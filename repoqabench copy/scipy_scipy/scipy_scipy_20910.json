{
  "repo_name": "scipy_scipy",
  "issue_id": "20910",
  "issue_description": "# BUG: positional argument `DeprecationWarning` message is overly long\n\n### Describe your issue.\r\n\r\nAfter upgrading SciPy to 1.13.1, I started seeing many `DeprecationWarning`s whose messages are overly long, which clutters the console. For example, one of them looked like the following:\r\n```\r\nDeprecationWarning: You are passing x=[0.         0.00200418 0.00400835 0.00601253 0.0080167  0.01002088\r\n   [40 lines of numeric data removed]\r\n   0.49302714] as a positional argument. Please change your invocation to use keyword arguments.\r\n   From SciPy 1.14, passing these as positional arguments will result in an error.\r\n    ...\r\n```\r\nIt looks like this is due to how the `_deprecate_positional_args()` function is written:\r\nhttps://github.com/scipy/scipy/blob/d8f96860461718355249fe9db66e2f6d16b4a480/scipy/_lib/deprecation.py#L181\r\nA way to fix this would be to truncate the formatted string representations of any arguments to a reasonable length before including them in the message.\r\n\r\n### Reproducing Code Example\r\n\r\n```python\r\nimport scipy.integrate\r\nscipy.integrate.simpson(1000*[0], 1000*[0])\r\n```\r\n\r\n\r\n### Error message\r\n\r\n```shell\r\ntest.py:2: DeprecationWarning: You are passing x=[0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0] as a positional argument. Please change your invocation to use\r\nkeyword arguments. From SciPy 1.14, passing these as positional arguments\r\nwill result in an error.\r\n  scipy.integrate.simpson(1000*[0], 1000*[0])\r\n```\r\n\r\n\r\n### SciPy/NumPy/Python version and system information\r\n\r\n```shell\r\n1.13.1 1.23.2 sys.version_info(major=3, minor=9, micro=10, releaselevel='final', serial=0)\r\n```\r\n",
  "issue_comments": [
    {
      "id": 2150962203,
      "user": "lucascolley",
      "body": "cc @j-bowhay "
    },
    {
      "id": 2151363858,
      "user": "cjerdonek",
      "body": "A simple version of truncation code could look something like this:\r\n```python\r\nMAX_LENGTH = 30\r\n\r\ndef _format_value(value):\r\n    formatted = str(value)\r\n    if len(formatted) <= MAX_LENGTH:\r\n        return formatted\r\n    return f'{formatted[:MAX_LENGTH]}<truncated...>'\r\n\r\nprint(_format_value(10*[0]))\r\nprint(_format_value(100*[0]))\r\n```\r\nwhich would result in:\r\n```\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<truncated...>\r\n```"
    },
    {
      "id": 2151384810,
      "user": "nickodell",
      "body": "> A way to fix this would be to truncate the formatted string representations of any arguments to a reasonable length before including them in the message.\r\n\r\nIs it necessary to include the value of the argument at all?\r\n\r\n* It's very likely that the user is passing a variable as the argument. Knowing the value of a variable wouldn't be helpful to locating that variable.\r\n* If the argument varies, this prevents Python from stopping repeated warnings.\r\n\r\nI would suggest a warning message like this:\r\n\r\n```\r\nDeprecationWarning: You are passing x as a positional argument. Please change your invocation to use keyword arguments.\r\n   From SciPy 1.14, passing these as positional arguments will result in an error.\r\n```"
    },
    {
      "id": 2151417969,
      "user": "fancidev",
      "body": "It might also be helpful to include the function name in the error message as well, because it could help the user pinpoint the offending function without digging into the exception stack (or if the stack is not printed)."
    },
    {
      "id": 2154595936,
      "user": "tupui",
      "body": "Hi @cjerdonek thanks for reporting.\n\nI would go with your solution @nickodell üëç\n@fancidev I would not print the function name since that's what the call stack is for."
    },
    {
      "id": 2154860483,
      "user": "j-bowhay",
      "body": "Thanks @cjerdonek I agree this is a bit annoying!\r\n\r\nAll of these deprecations have now been executed so you will need to adjust your code so the warnings are no longer emitted otherwise your code will break with the lastest versions of SciPy.\r\n\r\nThat being said it would be good to fix the decorator for future use! I also would go with @nickodell 's solution. The relevant file is here\r\nhttps://github.com/scipy/scipy/blob/de85b05990a475bfe04bd5f113511c4e9c2e2c8f/scipy/_lib/deprecation.py#L181-L239"
    },
    {
      "id": 2155810582,
      "user": "cjerdonek",
      "body": "I posted a PR for this here: https://github.com/scipy/scipy/pull/20924"
    },
    {
      "id": 2156184786,
      "user": "cjerdonek",
      "body": "Thanks, all, for the speedy feedback and merge!"
    },
    {
      "id": 2156189514,
      "user": "lucascolley",
      "body": "congrats on your first contribution to SciPy! :)"
    },
    {
      "id": 2156200123,
      "user": "cjerdonek",
      "body": "Thanks! üòÑ "
    }
  ],
  "text_context": "# BUG: positional argument `DeprecationWarning` message is overly long\n\n### Describe your issue.\r\n\r\nAfter upgrading SciPy to 1.13.1, I started seeing many `DeprecationWarning`s whose messages are overly long, which clutters the console. For example, one of them looked like the following:\r\n```\r\nDeprecationWarning: You are passing x=[0.         0.00200418 0.00400835 0.00601253 0.0080167  0.01002088\r\n   [40 lines of numeric data removed]\r\n   0.49302714] as a positional argument. Please change your invocation to use keyword arguments.\r\n   From SciPy 1.14, passing these as positional arguments will result in an error.\r\n    ...\r\n```\r\nIt looks like this is due to how the `_deprecate_positional_args()` function is written:\r\nhttps://github.com/scipy/scipy/blob/d8f96860461718355249fe9db66e2f6d16b4a480/scipy/_lib/deprecation.py#L181\r\nA way to fix this would be to truncate the formatted string representations of any arguments to a reasonable length before including them in the message.\r\n\r\n### Reproducing Code Example\r\n\r\n```python\r\nimport scipy.integrate\r\nscipy.integrate.simpson(1000*[0], 1000*[0])\r\n```\r\n\r\n\r\n### Error message\r\n\r\n```shell\r\ntest.py:2: DeprecationWarning: You are passing x=[0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n0, 0, 0] as a positional argument. Please change your invocation to use\r\nkeyword arguments. From SciPy 1.14, passing these as positional arguments\r\nwill result in an error.\r\n  scipy.integrate.simpson(1000*[0], 1000*[0])\r\n```\r\n\r\n\r\n### SciPy/NumPy/Python version and system information\r\n\r\n```shell\r\n1.13.1 1.23.2 sys.version_info(major=3, minor=9, micro=10, releaselevel='final', serial=0)\r\n```\r\n\n\ncc @j-bowhay \n\nA simple version of truncation code could look something like this:\r\n```python\r\nMAX_LENGTH = 30\r\n\r\ndef _format_value(value):\r\n    formatted = str(value)\r\n    if len(formatted) <= MAX_LENGTH:\r\n        return formatted\r\n    return f'{formatted[:MAX_LENGTH]}<truncated...>'\r\n\r\nprint(_format_value(10*[0]))\r\nprint(_format_value(100*[0]))\r\n```\r\nwhich would result in:\r\n```\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,<truncated...>\r\n```\n\n> A way to fix this would be to truncate the formatted string representations of any arguments to a reasonable length before including them in the message.\r\n\r\nIs it necessary to include the value of the argument at all?\r\n\r\n* It's very likely that the user is passing a variable as the argument. Knowing the value of a variable wouldn't be helpful to locating that variable.\r\n* If the argument varies, this prevents Python from stopping repeated warnings.\r\n\r\nI would suggest a warning message like this:\r\n\r\n```\r\nDeprecationWarning: You are passing x as a positional argument. Please change your invocation to use keyword arguments.\r\n   From SciPy 1.14, passing these as positional arguments will result in an error.\r\n```\n\nIt might also be helpful to include the function name in the error message as well, because it could help the user pinpoint the offending function without digging into the exception stack (or if the stack is not printed).\n\nHi @cjerdonek thanks for reporting.\n\nI would go with your solution @nickodell üëç\n@fancidev I would not print the function name since that's what the call stack is for.\n\nThanks @cjerdonek I agree this is a bit annoying!\r\n\r\nAll of these deprecations have now been executed so you will need to adjust your code so the warnings are no longer emitted otherwise your code will break with the lastest versions of SciPy.\r\n\r\nThat being said it would be good to fix the decorator for future use! I also would go with @nickodell 's solution. The relevant file is here\r\nhttps://github.com/scipy/scipy/blob/de85b05990a475bfe04bd5f113511c4e9c2e2c8f/scipy/_lib/deprecation.py#L181-L239\n\nI posted a PR for this here: https://github.com/scipy/scipy/pull/20924\n\nThanks, all, for the speedy feedback and merge!\n\ncongrats on your first contribution to SciPy! :)\n\nThanks! üòÑ ",
  "pr_link": "https://github.com/scipy/scipy/pull/20924",
  "code_context": [
    {
      "filename": "scipy/_lib/deprecation.py",
      "content": "from inspect import Parameter, signature\nimport functools\nimport warnings\nfrom importlib import import_module\n\n\n__all__ = [\"_deprecated\"]\n\n\n# Object to use as default value for arguments to be deprecated. This should\n# be used over 'None' as the user could parse 'None' as a positional argument\n_NoValue = object()\n\ndef _sub_module_deprecation(*, sub_package, module, private_modules, all,\n                            attribute, correct_module=None):\n    \"\"\"Helper function for deprecating modules that are public but were\n    intended to be private.\n\n    Parameters\n    ----------\n    sub_package : str\n        Subpackage the module belongs to eg. stats\n    module : str\n        Public but intended private module to deprecate\n    private_modules : list\n        Private replacement(s) for `module`; should contain the\n        content of ``all``, possibly spread over several modules.\n    all : list\n        ``__all__`` belonging to `module`\n    attribute : str\n        The attribute in `module` being accessed\n    correct_module : str, optional\n        Module in `sub_package` that `attribute` should be imported from.\n        Default is that `attribute` should be imported from ``scipy.sub_package``.\n    \"\"\"\n    if correct_module is not None:\n        correct_import = f\"scipy.{sub_package}.{correct_module}\"\n    else:\n        correct_import = f\"scipy.{sub_package}\"\n\n    if attribute not in all:\n        raise AttributeError(\n            f\"`scipy.{sub_package}.{module}` has no attribute `{attribute}`; \"\n            f\"furthermore, `scipy.{sub_package}.{module}` is deprecated \"\n            f\"and will be removed in SciPy 2.0.0.\"\n        )\n\n    attr = getattr(import_module(correct_import), attribute, None)\n\n    if attr is not None:\n        message = (\n            f\"Please import `{attribute}` from the `{correct_import}` namespace; \"\n            f\"the `scipy.{sub_package}.{module}` namespace is deprecated \"\n            f\"and will be removed in SciPy 2.0.0.\"\n        )\n    else:\n        message = (\n            f\"`scipy.{sub_package}.{module}.{attribute}` is deprecated along with \"\n            f\"the `scipy.{sub_package}.{module}` namespace. \"\n            f\"`scipy.{sub_package}.{module}.{attribute}` will be removed \"\n            f\"in SciPy 1.14.0, and the `scipy.{sub_package}.{module}` namespace \"\n            f\"will be removed in SciPy 2.0.0.\"\n        )\n\n    warnings.warn(message, category=DeprecationWarning, stacklevel=3)\n\n    for module in private_modules:\n        try:\n            return getattr(import_module(f\"scipy.{sub_package}.{module}\"), attribute)\n        except AttributeError as e:\n            # still raise an error if the attribute isn't in any of the expected\n            # private modules\n            if module == private_modules[-1]:\n                raise e\n            continue\n    \n\ndef _deprecated(msg, stacklevel=2):\n    \"\"\"Deprecate a function by emitting a warning on use.\"\"\"\n    def wrap(fun):\n        if isinstance(fun, type):\n            warnings.warn(\n                f\"Trying to deprecate class {fun!r}\",\n                category=RuntimeWarning, stacklevel=2)\n            return fun\n\n        @functools.wraps(fun)\n        def call(*args, **kwargs):\n            warnings.warn(msg, category=DeprecationWarning,\n                          stacklevel=stacklevel)\n            return fun(*args, **kwargs)\n        call.__doc__ = fun.__doc__\n        return call\n\n    return wrap\n\n\nclass _DeprecationHelperStr:\n    \"\"\"\n    Helper class used by deprecate_cython_api\n    \"\"\"\n    def __init__(self, content, message):\n        self._content = content\n        self._message = message\n\n    def __hash__(self):\n        return hash(self._content)\n\n    def __eq__(self, other):\n        res = (self._content == other)\n        if res:\n            warnings.warn(self._message, category=DeprecationWarning,\n                          stacklevel=2)\n        return res\n\n\ndef deprecate_cython_api(module, routine_name, new_name=None, message=None):\n    \"\"\"\n    Deprecate an exported cdef function in a public Cython API module.\n\n    Only functions can be deprecated; typedefs etc. cannot.\n\n    Parameters\n    ----------\n    module : module\n        Public Cython API module (e.g. scipy.linalg.cython_blas).\n    routine_name : str\n        Name of the routine to deprecate. May also be a fused-type\n        routine (in which case its all specializations are deprecated).\n    new_name : str\n        New name to include in the deprecation warning message\n    message : str\n        Additional text in the deprecation warning message\n\n    Examples\n    --------\n    Usually, this function would be used in the top-level of the\n    module ``.pyx`` file:\n\n    >>> from scipy._lib.deprecation import deprecate_cython_api\n    >>> import scipy.linalg.cython_blas as mod\n    >>> deprecate_cython_api(mod, \"dgemm\", \"dgemm_new\",\n    ...                      message=\"Deprecated in Scipy 1.5.0\")\n    >>> del deprecate_cython_api, mod\n\n    After this, Cython modules that use the deprecated function emit a\n    deprecation warning when they are imported.\n\n    \"\"\"\n    old_name = f\"{module.__name__}.{routine_name}\"\n\n    if new_name is None:\n        depdoc = \"`%s` is deprecated!\" % old_name\n    else:\n        depdoc = f\"`{old_name}` is deprecated, use `{new_name}` instead!\"\n\n    if message is not None:\n        depdoc += \"\\n\" + message\n\n    d = module.__pyx_capi__\n\n    # Check if the function is a fused-type function with a mangled name\n    j = 0\n    has_fused = False\n    while True:\n        fused_name = f\"__pyx_fuse_{j}{routine_name}\"\n        if fused_name in d:\n            has_fused = True\n            d[_DeprecationHelperStr(fused_name, depdoc)] = d.pop(fused_name)\n            j += 1\n        else:\n            break\n\n    # If not, apply deprecation to the named routine\n    if not has_fused:\n        d[_DeprecationHelperStr(routine_name, depdoc)] = d.pop(routine_name)\n\n\n# taken from scikit-learn, see\n# https://github.com/scikit-learn/scikit-learn/blob/1.3.0/sklearn/utils/validation.py#L38\ndef _deprecate_positional_args(func=None, *, version=None):\n    \"\"\"Decorator for methods that issues warnings for positional arguments.\n\n    Using the keyword-only argument syntax in pep 3102, arguments after the\n    * will issue a warning when passed as a positional argument.\n\n    Parameters\n    ----------\n    func : callable, default=None\n        Function to check arguments on.\n    version : callable, default=None\n        The version when positional arguments will result in error.\n    \"\"\"\n    if version is None:\n        msg = \"Need to specify a version where signature will be changed\"\n        raise ValueError(msg)\n\n    def _inner_deprecate_positional_args(f):\n        sig = signature(f)\n        kwonly_args = []\n        all_args = []\n\n        for name, param in sig.parameters.items():\n            if param.kind == Parameter.POSITIONAL_OR_KEYWORD:\n                all_args.append(name)\n            elif param.kind == Parameter.KEYWORD_ONLY:\n                kwonly_args.append(name)\n\n        @functools.wraps(f)\n        def inner_f(*args, **kwargs):\n            extra_args = len(args) - len(all_args)\n            if extra_args <= 0:\n                return f(*args, **kwargs)\n\n            # extra_args > 0\n            args_msg = \", \".join(kwonly_args[:extra_args])\n            warnings.warn(\n                (\n                    f\"You are passing as positional arguments: {args_msg}. \"\n                    \"Please change your invocation to use keyword arguments. \"\n                    f\"From SciPy {version}, passing these as positional \"\n                    \"arguments will result in an error.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            kwargs.update(zip(sig.parameters, args))\n            return f(**kwargs)\n\n        return inner_f\n\n    if func is not None:\n        return _inner_deprecate_positional_args(func)\n\n    return _inner_deprecate_positional_args\n"
    }
  ]
}