{
  "repo_name": "matplotlib_matplotlib",
  "issue_id": "8922",
  "issue_description": "# Separate plots in examples w/ multiple plots using ######\n\nSphinx-gallery will render plots in sections if they are separated by a `#########` line. This makes it easier to read / follow examples that create multiple plots, putting them inline w/ the code instead of all placed at the top. Some examples don't have this line of `#####` put in there yet, so an easy first step is to insert it into any examples where it makes sense.\r\n\r\n these are examples with multiple calls to `plt.figure` or `plt.show` (that aren't already separated by `#####...`):\r\n\r\n<details>\r\n\r\n- [x] examples/animation/basic_example.py\r\n- [x] examples/animation/basic_example_writer_sgskip.py\r\n- [x] examples/api/sankey_basics.py\r\n- [x] examples/axes_grid1/demo_fixed_size_axes.py\r\n- [x] examples/axes_grid1/make_room_for_ylabel_using_axesgrid.py\r\n- [x] examples/images_contours_and_fields/contour_demo.py\r\n- [x] examples/images_contours_and_fields/contour_label_demo.py\r\n- [x] examples/images_contours_and_fields/contourf_hatching.py\r\n- [x] examples/images_contours_and_fields/quiver_demo.py\r\n- [x] examples/images_contours_and_fields/tricontour_demo.py\r\n- [x] examples/images_contours_and_fields/tripcolor_demo.py\r\n- [x] examples/images_contours_and_fields/triplot_demo.py\r\n- [x] examples/misc/contour_manual.py\r\n- [x] examples/pylab_examples/demo_tight_layout.py\r\n- [x] examples/pylab_examples/errorbar_limits.py\r\n- [x] examples/pylab_examples/geo_demo.py\r\n- [x] pylab_examples/hyperlinks_sgskip.py\r\n- [x] examples/pylab_examples/markevery_demo.py\r\n- [x] examples/pylab_examples/multipage_pdf.py\r\n- [x] examples/pylab_examples/multiple_figs_demo.py\r\n- [x] examples/pylab_examples/spine_placement_demo.py\r\n- [x] pylab_examples/zorder_demo.py\r\n- [x] examples/pyplots/fig_axes_customize_simple.py\r\n- [x] examples/showcase/xkcd.py\r\n- [x] examples/statistics/boxplot.py\r\n- [x] examples/statistics/bxp.py\r\n- [x] examples/units/ellipse_with_units.py\r\n\r\n</details>",
  "issue_comments": [
    {
      "id": 318418456,
      "user": "choldgraf",
      "body": "Just a subset is fine, though it should be relatively quick to do once you\nget the hang of copy/pasting in the right spots!\n-- \n\nOn Thu, Jul 27, 2017 at 5:50 AM Ankit Raj Ojha <notifications@github.com>\nwrote:\n\n> @choldgraf <https://github.com/choldgraf> I would like to work on this.\n> Do I need to change all the files mentioned? Is there any file where it is\n> being used?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/8922#issuecomment-318352183>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABwSHeUzcySzD6BFKxH1ZAxAeg7OQ_A-ks5sSIeAgaJpZM4Of9IG>\n> .\n>\n"
    },
    {
      "id": 321979662,
      "user": "LindyBalboa",
      "body": "I'm glancing through the files after a `grep -r -L \"################\" * | xargs grep -c \"show\" | sort --field-separator=: -k 2`. I've looked through all of the ones with 2 or more instances of \"show\" and these are the ones which I believe may be converted to this format with some refactoring and -could- benefit from it (but maybe not?). This list is by no means exhaustive, but it is focal point with some specific examples.\r\n\r\nFiles to check:\r\n<details>\r\n<blockquote>\r\nticks_and_spines/spines_dropped.py</br>\r\nticks_and_spines/spines.py</br>\r\nticks_and_spines/tick-formatters.py</br>\r\nticks_and_spines/tick-locators.py</br>\r\nimages_contours_and_fields/plot_streamplot.py</br>\r\nimages_contours_and_fields/barcode_demo.py</br>\r\ntext_labels_and_annotations/text_alignment.py</br>\r\npie_and_polar_charts/pie_demo2.py</br>\r\nmisc/demo_agg_filter.py</br>\r\nmisc/customize_rc.py</br>\r\nlines_bars_and_markers/vline_hline_demo.py</br>\r\nlines_bars_and_markers/multicolored_line.py</br>\r\nimages_contours_and_fields/pcolormesh_levels.py</br>\r\nimages_contours_and_fields/image_nonuniform.py</br>\r\nimages_contours_and_fields/contourf_demo.py</br>\r\napi/affine_image.py</br>\r\n</blockquote>\r\n</details>"
    },
    {
      "id": 321986642,
      "user": "choldgraf",
      "body": "Yep - feel free to cross reference your list with the one in the top-level of this thread and open some PRs! :-)"
    },
    {
      "id": 321986862,
      "user": "LindyBalboa",
      "body": "Maybe. I was intending on just taking a crack at your list, but saw that a lot had been done already (the two PRs I refd this to). So I decided to try and track down the files that still need it. I would appreciate if someone more senior the the project could take a glance through them and see if any of them _shouldn't_ be refactored before people go foreward editing them. \r\n\r\nOh god, I just double checked the list. That formatting is aweful, I will fix that. FIXED"
    },
    {
      "id": 322008815,
      "user": "choldgraf",
      "body": "it shouldn't be too much work to add in the `####` where needed, so if you open a PR I am happy to give it a quick review and mention anywhere that it's unnecessary. But as a general rule I think that any code that generates >1 plots would benefit from having the output separated by `####` blocks"
    },
    {
      "id": 337804135,
      "user": "ash13",
      "body": "Hi, I want to work on this. Can someone help me to start of?"
    },
    {
      "id": 337871510,
      "user": "ash13",
      "body": "@choldgraf: Hi I tried adding the lines in the program list mentioned by you. Few of them already had it. The ones which din't have, I have added them.Please do let me know if I have to do any changes.\r\nhttps://github.com/matplotlib/matplotlib/pull/9479"
    },
    {
      "id": 519774197,
      "user": "jgtiu",
      "body": "Hi, new contributor here, I'd like to work on this issue. Is this something you still need?"
    },
    {
      "id": 520074069,
      "user": "timhoffm",
      "body": "Yes, please go for the unchecked items in the details list of the original post."
    },
    {
      "id": 546193512,
      "user": "ardieorden",
      "body": "Hi, I'd like to work on the `make_room_for_ylabel_using_axesgrid.py` item in the details list!"
    },
    {
      "id": 658468552,
      "user": "timhoffm",
      "body": "All handled."
    }
  ],
  "text_context": "# Separate plots in examples w/ multiple plots using ######\n\nSphinx-gallery will render plots in sections if they are separated by a `#########` line. This makes it easier to read / follow examples that create multiple plots, putting them inline w/ the code instead of all placed at the top. Some examples don't have this line of `#####` put in there yet, so an easy first step is to insert it into any examples where it makes sense.\r\n\r\n these are examples with multiple calls to `plt.figure` or `plt.show` (that aren't already separated by `#####...`):\r\n\r\n<details>\r\n\r\n- [x] examples/animation/basic_example.py\r\n- [x] examples/animation/basic_example_writer_sgskip.py\r\n- [x] examples/api/sankey_basics.py\r\n- [x] examples/axes_grid1/demo_fixed_size_axes.py\r\n- [x] examples/axes_grid1/make_room_for_ylabel_using_axesgrid.py\r\n- [x] examples/images_contours_and_fields/contour_demo.py\r\n- [x] examples/images_contours_and_fields/contour_label_demo.py\r\n- [x] examples/images_contours_and_fields/contourf_hatching.py\r\n- [x] examples/images_contours_and_fields/quiver_demo.py\r\n- [x] examples/images_contours_and_fields/tricontour_demo.py\r\n- [x] examples/images_contours_and_fields/tripcolor_demo.py\r\n- [x] examples/images_contours_and_fields/triplot_demo.py\r\n- [x] examples/misc/contour_manual.py\r\n- [x] examples/pylab_examples/demo_tight_layout.py\r\n- [x] examples/pylab_examples/errorbar_limits.py\r\n- [x] examples/pylab_examples/geo_demo.py\r\n- [x] pylab_examples/hyperlinks_sgskip.py\r\n- [x] examples/pylab_examples/markevery_demo.py\r\n- [x] examples/pylab_examples/multipage_pdf.py\r\n- [x] examples/pylab_examples/multiple_figs_demo.py\r\n- [x] examples/pylab_examples/spine_placement_demo.py\r\n- [x] pylab_examples/zorder_demo.py\r\n- [x] examples/pyplots/fig_axes_customize_simple.py\r\n- [x] examples/showcase/xkcd.py\r\n- [x] examples/statistics/boxplot.py\r\n- [x] examples/statistics/bxp.py\r\n- [x] examples/units/ellipse_with_units.py\r\n\r\n</details>\n\nJust a subset is fine, though it should be relatively quick to do once you\nget the hang of copy/pasting in the right spots!\n-- \n\nOn Thu, Jul 27, 2017 at 5:50 AM Ankit Raj Ojha <notifications@github.com>\nwrote:\n\n> @choldgraf <https://github.com/choldgraf> I would like to work on this.\n> Do I need to change all the files mentioned? Is there any file where it is\n> being used?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/8922#issuecomment-318352183>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABwSHeUzcySzD6BFKxH1ZAxAeg7OQ_A-ks5sSIeAgaJpZM4Of9IG>\n> .\n>\n\n\nI'm glancing through the files after a `grep -r -L \"################\" * | xargs grep -c \"show\" | sort --field-separator=: -k 2`. I've looked through all of the ones with 2 or more instances of \"show\" and these are the ones which I believe may be converted to this format with some refactoring and -could- benefit from it (but maybe not?). This list is by no means exhaustive, but it is focal point with some specific examples.\r\n\r\nFiles to check:\r\n<details>\r\n<blockquote>\r\nticks_and_spines/spines_dropped.py</br>\r\nticks_and_spines/spines.py</br>\r\nticks_and_spines/tick-formatters.py</br>\r\nticks_and_spines/tick-locators.py</br>\r\nimages_contours_and_fields/plot_streamplot.py</br>\r\nimages_contours_and_fields/barcode_demo.py</br>\r\ntext_labels_and_annotations/text_alignment.py</br>\r\npie_and_polar_charts/pie_demo2.py</br>\r\nmisc/demo_agg_filter.py</br>\r\nmisc/customize_rc.py</br>\r\nlines_bars_and_markers/vline_hline_demo.py</br>\r\nlines_bars_and_markers/multicolored_line.py</br>\r\nimages_contours_and_fields/pcolormesh_levels.py</br>\r\nimages_contours_and_fields/image_nonuniform.py</br>\r\nimages_contours_and_fields/contourf_demo.py</br>\r\napi/affine_image.py</br>\r\n</blockquote>\r\n</details>\n\nYep - feel free to cross reference your list with the one in the top-level of this thread and open some PRs! :-)\n\nMaybe. I was intending on just taking a crack at your list, but saw that a lot had been done already (the two PRs I refd this to). So I decided to try and track down the files that still need it. I would appreciate if someone more senior the the project could take a glance through them and see if any of them _shouldn't_ be refactored before people go foreward editing them. \r\n\r\nOh god, I just double checked the list. That formatting is aweful, I will fix that. FIXED\n\nit shouldn't be too much work to add in the `####` where needed, so if you open a PR I am happy to give it a quick review and mention anywhere that it's unnecessary. But as a general rule I think that any code that generates >1 plots would benefit from having the output separated by `####` blocks\n\nHi, I want to work on this. Can someone help me to start of?\n\n@choldgraf: Hi I tried adding the lines in the program list mentioned by you. Few of them already had it. The ones which din't have, I have added them.Please do let me know if I have to do any changes.\r\nhttps://github.com/matplotlib/matplotlib/pull/9479\n\nHi, new contributor here, I'd like to work on this issue. Is this something you still need?\n\nYes, please go for the unchecked items in the details list of the original post.\n\nHi, I'd like to work on the `make_room_for_ylabel_using_axesgrid.py` item in the details list!\n\nAll handled.",
  "pr_link": "https://github.com/matplotlib/matplotlib/pull/9479",
  "code_context": [
    {
      "filename": "examples/animation/basic_example_writer_sgskip.py",
      "content": "\"\"\"\n===================\nSaving an animation\n===================\n\nThis example showcases the same animations as `basic_example.py`, but instead\nof displaying the animation to the user, it writes to files using a\nMovieWriter instance.\n\"\"\"\n\nimport numpy as np\nimport matplotlib\nmatplotlib.use(\"Agg\")\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\n\ndef update_line(num, data, line):\n    line.set_data(data[..., :num])\n    return line,\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n\n# Set up formatting for the movie files\nWriter = animation.writers['ffmpeg']\nwriter = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800)\n\n\nfig1 = plt.figure()\n\n#########################################################################\ndata = np.random.rand(2, 25)\nl, = plt.plot([], [], 'r-')\nplt.xlim(0, 1)\nplt.ylim(0, 1)\nplt.xlabel('x')\nplt.title('test')\nline_ani = animation.FuncAnimation(fig1, update_line, 25, fargs=(data, l),\n                                   interval=50, blit=True)\nline_ani.save('lines.mp4', writer=writer)\n\nfig2 = plt.figure()\n\nx = np.arange(-9, 10)\ny = np.arange(-9, 10).reshape(-1, 1)\nbase = np.hypot(x, y)\nims = []\nfor add in np.arange(15):\n    ims.append((plt.pcolor(x, y, base + add, norm=plt.Normalize(0, 30)),))\n\nim_ani = animation.ArtistAnimation(fig2, ims, interval=50, repeat_delay=3000,\n                                   blit=True)\nim_ani.save('im.mp4', writer=writer)\n"
    },
    {
      "filename": "examples/axes_grid1/demo_fixed_size_axes.py",
      "content": "\"\"\"\n====================\nDemo Fixed Size Axes\n====================\n\n\"\"\"\nimport matplotlib.pyplot as plt\n\nfrom mpl_toolkits.axes_grid1 import Divider, LocatableAxes, Size\n\n\ndef demo_fixed_size_axes():\n    fig1 = plt.figure(1, (6, 6))\n\n    # The first items are for padding and the second items are for the axes.\n    # sizes are in inch.\n    h = [Size.Fixed(1.0), Size.Fixed(4.5)]\n    v = [Size.Fixed(0.7), Size.Fixed(5.)]\n\n    divider = Divider(fig1, (0.0, 0.0, 1., 1.), h, v, aspect=False)\n    # the width and height of the rectangle is ignored.\n\n    ax = LocatableAxes(fig1, divider.get_position())\n    ax.set_axes_locator(divider.new_locator(nx=1, ny=1))\n\n    fig1.add_axes(ax)\n\n    ax.plot([1, 2, 3])\n\n############################################################################\ndef demo_fixed_pad_axes():\n    fig = plt.figure(2, (6, 6))\n\n    # The first & third items are for padding and the second items are for the\n    # axes. Sizes are in inches.\n    h = [Size.Fixed(1.0), Size.Scaled(1.), Size.Fixed(.2)]\n    v = [Size.Fixed(0.7), Size.Scaled(1.), Size.Fixed(.5)]\n\n    divider = Divider(fig, (0.0, 0.0, 1., 1.), h, v, aspect=False)\n    # the width and height of the rectangle is ignored.\n\n    ax = LocatableAxes(fig, divider.get_position())\n    ax.set_axes_locator(divider.new_locator(nx=1, ny=1))\n\n    fig.add_axes(ax)\n\n    ax.plot([1, 2, 3])\n\n\nif __name__ == \"__main__\":\n    demo_fixed_size_axes()\n    demo_fixed_pad_axes()\n\n    plt.show()\n"
    },
    {
      "filename": "examples/axes_grid1/make_room_for_ylabel_using_axesgrid.py",
      "content": "\"\"\"\n===================================\nMake Room For Ylabel Using Axesgrid\n===================================\n\n\"\"\"\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nfrom mpl_toolkits.axes_grid1.axes_divider import make_axes_area_auto_adjustable\n\n\nif __name__ == \"__main__\":\n\n    import matplotlib.pyplot as plt\n\n    def ex1():\n        plt.figure(1)\n        ax = plt.axes([0, 0, 1, 1])\n        #ax = plt.subplot(111)\n\n        ax.set_yticks([0.5])\n        ax.set_yticklabels([\"very long label\"])\n\n        oake_axes_area_auto_adjustable(ax)\n\n#########################################################################\n\n    def ex2():\n\n        plt.figure(2)\n        ax1 = plt.axes([0, 0, 1, 0.5])\n        ax2 = plt.axes([0, 0.5, 1, 0.5])\n\n        ax1.set_yticks([0.5])\n        ax1.set_yticklabels([\"very long label\"])\n        ax1.set_ylabel(\"Y label\")\n\n        ax2.set_title(\"Title\")\n\n        make_axes_area_auto_adjustable(ax1, pad=0.1, use_axes=[ax1, ax2])\n        make_axes_area_auto_adjustable(ax2, pad=0.1, use_axes=[ax1, ax2])\n\n#########################################################################\n    def ex3():\n\n        fig = plt.figure(3)\n        ax1 = plt.axes([0, 0, 1, 1])\n        divider = make_axes_locatable(ax1)\n\n        ax2 = divider.new_horizontal(\"100%\", pad=0.3, sharey=ax1)\n        ax2.tick_params(labelleft=\"off\")\n        fig.add_axes(ax2)\n\n        divider.add_auto_adjustable_area(use_axes=[ax1], pad=0.1,\n                                         adjust_dirs=[\"left\"])\n        divider.add_auto_adjustable_area(use_axes=[ax2], pad=0.1,\n                                         adjust_dirs=[\"right\"])\n        divider.add_auto_adjustable_area(use_axes=[ax1, ax2], pad=0.1,\n                                         adjust_dirs=[\"top\", \"bottom\"])\n\n        ax1.set_yticks([0.5])\n        ax1.set_yticklabels([\"very long label\"])\n\n        ax2.set_title(\"Title\")\n        ax2.set_xlabel(\"X - Label\")\n#########################################################################\n    ex1()\n    ex2()\n    ex3()\n\n    plt.show()\n"
    },
    {
      "filename": "examples/showcase/xkcd.py",
      "content": "\"\"\"\n====\nXKCD\n====\n\nShows how to create an xkcd-like plot.\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nwith plt.xkcd():\n    # Based on \"Stove Ownership\" from XKCD by Randall Monroe\n    # http://xkcd.com/418/\n\n    fig = plt.figure()\n    ax = fig.add_axes((0.1, 0.2, 0.8, 0.7))\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    plt.xticks([])\n    plt.yticks([])\n    ax.set_ylim([-30, 10])\n\n    data = np.ones(100)\n    data[70:] -= np.arange(30)\n\n    plt.annotate(\n        'THE DAY I REALIZED\\nI COULD COOK BACON\\nWHENEVER I WANTED',\n        xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10))\n\n    plt.plot(data)\n\n    plt.xlabel('time')\n    plt.ylabel('my overall health')\n    fig.text(\n        0.5, 0.05,\n        '\"Stove Ownership\" from xkcd by Randall Monroe',\n        ha='center')\n\n    # Based on \"The Data So Far\" from XKCD by Randall Monroe\n    # http://xkcd.com/373/\n#############################################################################\n    fig = plt.figure()\n    ax = fig.add_axes((0.1, 0.2, 0.8, 0.7))\n    ax.bar([0, 1], [0, 100], 0.25)\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.xaxis.set_ticks_position('bottom')\n    ax.set_xticks([0, 1])\n    ax.set_xlim([-0.5, 1.5])\n    ax.set_ylim([0, 110])\n    ax.set_xticklabels(['CONFIRMED BY\\nEXPERIMENT', 'REFUTED BY\\nEXPERIMENT'])\n    plt.yticks([])\n\n    plt.title(\"CLAIMS OF SUPERNATURAL POWERS\")\n\n    fig.text(\n        0.5, 0.05,\n        '\"The Data So Far\" from xkcd by Randall Monroe',\n        ha='center')\n\nplt.show()\n"
    }
  ]
}