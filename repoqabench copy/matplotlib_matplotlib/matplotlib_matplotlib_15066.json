{
  "repo_name": "matplotlib_matplotlib",
  "issue_id": "15066",
  "issue_description": "# Feature request: stem3\n\nWould be great to have an equivalent to [Matlab's stem3](https://de.mathworks.com/help/matlab/ref/stem3.html) in `matplotlib`. [A temporary workaround is e.g. to use Line3D](https://stackoverflow.com/questions/8453726/is-there-a-matplotlib-counterpart-of-matlab-stem3).",
  "issue_comments": [
    {
      "id": 530032443,
      "user": "harshanavkis",
      "body": "Is anybody working on this? I would like to take this up. A few questions:\r\n1) Would the api need to be same as the matlab api?\r\n2) Where should I begin?"
    },
    {
      "id": 530034049,
      "user": "WeatherGod",
      "body": "Nope, go ahead and try to implement it. No, the api should match our stem()\nAPI, just with a `z` and `zdir` argument, most likely. You'll see what I\nmean when you look at implementations for `plot()` and `scatter()` in\n`lib/mpl_toolkits/mplot3d/axes3d.py`.\n\nOn Tue, Sep 10, 2019 at 1:09 PM Harshavardhan Unnibhavi <\nnotifications@github.com> wrote:\n\n> Is anybody working on this? I would like to take this up. A few questions:\n>\n>    1. Would the api need to be same as the matlab api?\n>    2. Where should I begin?\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/15066?email_source=notifications&email_token=AACHF6GM5S5QRJG4XJPT2JDQI7IDTA5CNFSM4IMFTZJ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6L2OOY#issuecomment-530032443>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AACHF6AKWJL7VBMPK5FLZ6LQI7IDTANCNFSM4IMFTZJQ>\n> .\n>\n"
    },
    {
      "id": 530035834,
      "user": "harshanavkis",
      "body": "Sure, thanks!!"
    },
    {
      "id": 611404153,
      "user": "grammicus",
      "body": "Is anyone still working on this?"
    },
    {
      "id": 611407373,
      "user": "anntzer",
      "body": "Not as far as I can see."
    },
    {
      "id": 611418474,
      "user": "fkromer",
      "body": "No. I'm using \"sufficient enough\" workaround for visualization `stem3` like right now."
    },
    {
      "id": 731704951,
      "user": "tcho0501",
      "body": "@jackcwu and I are working on this"
    },
    {
      "id": 731744262,
      "user": "timhoffm",
      "body": "@tcho0501 thanks for your interest, but there is already #18310."
    },
    {
      "id": 756366127,
      "user": "adeak",
      "body": "https://github.com/matplotlib/matplotlib/pull/18310 was merged 2 weeks ago., Can this issue be closed now?"
    },
    {
      "id": 756382913,
      "user": "timhoffm",
      "body": "Yes, thanks for the notification."
    }
  ],
  "text_context": "# Feature request: stem3\n\nWould be great to have an equivalent to [Matlab's stem3](https://de.mathworks.com/help/matlab/ref/stem3.html) in `matplotlib`. [A temporary workaround is e.g. to use Line3D](https://stackoverflow.com/questions/8453726/is-there-a-matplotlib-counterpart-of-matlab-stem3).\n\nIs anybody working on this? I would like to take this up. A few questions:\r\n1) Would the api need to be same as the matlab api?\r\n2) Where should I begin?\n\nNope, go ahead and try to implement it. No, the api should match our stem()\nAPI, just with a `z` and `zdir` argument, most likely. You'll see what I\nmean when you look at implementations for `plot()` and `scatter()` in\n`lib/mpl_toolkits/mplot3d/axes3d.py`.\n\nOn Tue, Sep 10, 2019 at 1:09 PM Harshavardhan Unnibhavi <\nnotifications@github.com> wrote:\n\n> Is anybody working on this? I would like to take this up. A few questions:\n>\n>    1. Would the api need to be same as the matlab api?\n>    2. Where should I begin?\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/15066?email_source=notifications&email_token=AACHF6GM5S5QRJG4XJPT2JDQI7IDTA5CNFSM4IMFTZJ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6L2OOY#issuecomment-530032443>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AACHF6AKWJL7VBMPK5FLZ6LQI7IDTANCNFSM4IMFTZJQ>\n> .\n>\n\n\nSure, thanks!!\n\nIs anyone still working on this?\n\nNot as far as I can see.\n\nNo. I'm using \"sufficient enough\" workaround for visualization `stem3` like right now.\n\n@jackcwu and I are working on this\n\n@tcho0501 thanks for your interest, but there is already #18310.\n\nhttps://github.com/matplotlib/matplotlib/pull/18310 was merged 2 weeks ago., Can this issue be closed now?\n\nYes, thanks for the notification.",
  "pr_link": "https://github.com/matplotlib/matplotlib/pull/18310",
  "code_context": [
    {
      "filename": "examples/mplot3d/stem3d_demo.py",
      "content": "\"\"\"\n=======\n3D stem\n=======\n\nDemonstration of a stem plot in 3D, which plots vertical lines from a baseline\nto the *z*-coordinate and places a marker at the tip.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntheta = np.linspace(0, 2*np.pi)\nx = np.cos(theta - np.pi/2)\ny = np.sin(theta - np.pi/2)\nz = theta\n\nfig, ax = plt.subplots(subplot_kw=dict(projection='3d'))\nax.stem(x, y, z)\n\nplt.show()\n\n#############################################################################\n#\n# The position of the baseline can be adapted using *bottom*. The parameters\n# *linefmt*, *markerfmt*, and *basefmt* control basic format properties of the\n# plot. However, in contrast to `~.axes3d.Axes3D.plot` not all properties are\n# configurable via keyword arguments. For more advanced control adapt the line\n# objects returned by `~.stem3D`.\n\nfig, ax = plt.subplots(subplot_kw=dict(projection='3d'))\nmarkerline, stemlines, baseline = ax.stem(\n    x, y, z, linefmt='grey', markerfmt='D', bottom=np.pi)\nmarkerline.set_markerfacecolor('none')\n\nplt.show()\n\n#############################################################################\n#\n# The orientation of the stems and baseline can be changed using *orientation*.\n# This determines in which direction the stems are projected from the head\n# points, towards the *bottom* baseline.\n#\n# For examples, by setting ``orientation='x'``, the stems are projected along\n# the *x*-direction, and the baseline is in the *yz*-plane.\n\nfig, ax = plt.subplots(subplot_kw=dict(projection='3d'))\nmarkerline, stemlines, baseline = ax.stem(x, y, z, bottom=-1, orientation='x')\nax.set(xlabel='x', ylabel='y', zlabel='z')\n\nplt.show()\n"
    },
    {
      "filename": "lib/mpl_toolkits/mplot3d/axes3d.py",
      "content": "\"\"\"\naxes3d.py, original mplot3d version by John Porter\nCreated: 23 Sep 2005\n\nParts fixed by Reinier Heeres <reinier@heeres.eu>\nMinor additions by Ben Axelrod <baxelrod@coroware.com>\nSignificant updates and revisions by Ben Root <ben.v.root@gmail.com>\n\nModule containing Axes3D, an object which can plot 3D objects on a\n2D matplotlib figure.\n\"\"\"\n\nfrom collections import defaultdict\nimport functools\nfrom functools import reduce\nfrom itertools import compress\nimport math\nimport textwrap\n\nimport numpy as np\n\nfrom matplotlib import artist\nfrom matplotlib import _api\nimport matplotlib.axes as maxes\nimport matplotlib.cbook as cbook\nimport matplotlib.collections as mcoll\nimport matplotlib.colors as mcolors\nimport matplotlib.docstring as docstring\nimport matplotlib.scale as mscale\nimport matplotlib.container as mcontainer\nimport matplotlib.transforms as mtransforms\nfrom matplotlib.axes import Axes, rcParams\nfrom matplotlib.axes._base import _axis_method_wrapper, _process_plot_format\nfrom matplotlib.transforms import Bbox\nfrom matplotlib.tri.triangulation import Triangulation\n\nfrom . import art3d\nfrom . import proj3d\nfrom . import axis3d\n\n\n@cbook._define_aliases({\n    \"xlim3d\": [\"xlim\"], \"ylim3d\": [\"ylim\"], \"zlim3d\": [\"zlim\"]})\nclass Axes3D(Axes):\n    \"\"\"\n    3D axes object.\n    \"\"\"\n    name = '3d'\n    _shared_z_axes = cbook.Grouper()\n\n    def __init__(\n            self, fig, rect=None, *args,\n            azim=-60, elev=30, sharez=None, proj_type='persp',\n            box_aspect=None,\n            **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        fig : Figure\n            The parent figure.\n        rect : (float, float, float, float)\n            The ``(left, bottom, width, height)`` axes position.\n        azim : float, default: -60\n            Azimuthal viewing angle.\n        elev : float, default: 30\n            Elevation viewing angle.\n        sharez : Axes3D, optional\n            Other axes to share z-limits with.\n        proj_type : {'persp', 'ortho'}\n            The projection type, default 'persp'.\n        **kwargs\n            Other optional keyword arguments:\n\n            %(Axes3D_kwdoc)s\n\n        Notes\n        -----\n        .. versionadded:: 1.2.1\n            The *sharez* parameter.\n        \"\"\"\n\n        if rect is None:\n            rect = [0.0, 0.0, 1.0, 1.0]\n\n        self.initial_azim = azim\n        self.initial_elev = elev\n        self.set_proj_type(proj_type)\n\n        self.xy_viewLim = Bbox.unit()\n        self.zz_viewLim = Bbox.unit()\n        self.xy_dataLim = Bbox.unit()\n        self.zz_dataLim = Bbox.unit()\n\n        # inhibit autoscale_view until the axes are defined\n        # they can't be defined until Axes.__init__ has been called\n        self.view_init(self.initial_elev, self.initial_azim)\n\n        self._sharez = sharez\n        if sharez is not None:\n            self._shared_z_axes.join(self, sharez)\n            self._adjustable = 'datalim'\n\n        super().__init__(\n            fig, rect, frameon=True, box_aspect=box_aspect, *args, **kwargs\n        )\n        # Disable drawing of axes by base class\n        super().set_axis_off()\n        # Enable drawing of axes by Axes3D class\n        self.set_axis_on()\n        self.M = None\n\n        # func used to format z -- fall back on major formatters\n        self.fmt_zdata = None\n\n        self.mouse_init()\n        self.figure.canvas.callbacks._pickled_cids.update({\n            self.figure.canvas.mpl_connect(\n                'motion_notify_event', self._on_move),\n            self.figure.canvas.mpl_connect(\n                'button_press_event', self._button_press),\n            self.figure.canvas.mpl_connect(\n                'button_release_event', self._button_release),\n        })\n        self.set_top_view()\n\n        self.patch.set_linewidth(0)\n        # Calculate the pseudo-data width and height\n        pseudo_bbox = self.transLimits.inverted().transform([(0, 0), (1, 1)])\n        self._pseudo_w, self._pseudo_h = pseudo_bbox[1] - pseudo_bbox[0]\n\n        # mplot3d currently manages its own spines and needs these turned off\n        # for bounding box calculations\n        for k in self.spines.keys():\n            self.spines[k].set_visible(False)\n\n    def set_axis_off(self):\n        self._axis3don = False\n        self.stale = True\n\n    def set_axis_on(self):\n        self._axis3don = True\n        self.stale = True\n\n    def convert_zunits(self, z):\n        \"\"\"\n        For artists in an axes, if the zaxis has units support,\n        convert *z* using zaxis unit type\n\n        .. versionadded:: 1.2.1\n\n        \"\"\"\n        return self.zaxis.convert_units(z)\n\n    def set_top_view(self):\n        # this happens to be the right view for the viewing coordinates\n        # moved up and to the left slightly to fit labels and axes\n        xdwl = 0.95 / self.dist\n        xdw = 0.9 / self.dist\n        ydwl = 0.95 / self.dist\n        ydw = 0.9 / self.dist\n        # This is purposely using the 2D Axes's set_xlim and set_ylim,\n        # because we are trying to place our viewing pane.\n        super().set_xlim(-xdwl, xdw, auto=None)\n        super().set_ylim(-ydwl, ydw, auto=None)\n\n    def _init_axis(self):\n        \"\"\"Init 3D axes; overrides creation of regular X/Y axes.\"\"\"\n        self.xaxis = axis3d.XAxis('x', self.xy_viewLim.intervalx,\n                                  self.xy_dataLim.intervalx, self)\n        self.yaxis = axis3d.YAxis('y', self.xy_viewLim.intervaly,\n                                  self.xy_dataLim.intervaly, self)\n        self.zaxis = axis3d.ZAxis('z', self.zz_viewLim.intervalx,\n                                  self.zz_dataLim.intervalx, self)\n        for ax in self.xaxis, self.yaxis, self.zaxis:\n            ax.init3d()\n\n    def get_zaxis(self):\n        \"\"\"Return the ``ZAxis`` (`~.axis3d.Axis`) instance.\"\"\"\n        return self.zaxis\n\n    get_zgridlines = _axis_method_wrapper(\"zaxis\", \"get_gridlines\")\n    get_zticklines = _axis_method_wrapper(\"zaxis\", \"get_ticklines\")\n\n    w_xaxis = cbook.deprecated(\"3.1\", alternative=\"xaxis\", pending=True)(\n        property(lambda self: self.xaxis))\n    w_yaxis = cbook.deprecated(\"3.1\", alternative=\"yaxis\", pending=True)(\n        property(lambda self: self.yaxis))\n    w_zaxis = cbook.deprecated(\"3.1\", alternative=\"zaxis\", pending=True)(\n        property(lambda self: self.zaxis))\n\n    def _get_axis_list(self):\n        return super()._get_axis_list() + (self.zaxis, )\n\n    def unit_cube(self, vals=None):\n        minx, maxx, miny, maxy, minz, maxz = vals or self.get_w_lims()\n        return [(minx, miny, minz),\n                (maxx, miny, minz),\n                (maxx, maxy, minz),\n                (minx, maxy, minz),\n                (minx, miny, maxz),\n                (maxx, miny, maxz),\n                (maxx, maxy, maxz),\n                (minx, maxy, maxz)]\n\n    def tunit_cube(self, vals=None, M=None):\n        if M is None:\n            M = self.M\n        xyzs = self.unit_cube(vals)\n        tcube = proj3d.proj_points(xyzs, M)\n        return tcube\n\n    def tunit_edges(self, vals=None, M=None):\n        tc = self.tunit_cube(vals, M)\n        edges = [(tc[0], tc[1]),\n                 (tc[1], tc[2]),\n                 (tc[2], tc[3]),\n                 (tc[3], tc[0]),\n\n                 (tc[0], tc[4]),\n                 (tc[1], tc[5]),\n                 (tc[2], tc[6]),\n                 (tc[3], tc[7]),\n\n                 (tc[4], tc[5]),\n                 (tc[5], tc[6]),\n                 (tc[6], tc[7]),\n                 (tc[7], tc[4])]\n        return edges\n\n    def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n        \"\"\"\n        Set the aspect ratios.\n\n        Axes 3D does not current support any aspect but 'auto' which fills\n        the axes with the data limits.\n\n        To simulate having equal aspect in data space, set the ratio\n        of your data limits to match the value of `~.get_box_aspect`.\n        To control box aspect ratios use `~.Axes3D.set_box_aspect`.\n\n        Parameters\n        ----------\n        aspect : {'auto'}\n            Possible values:\n\n            =========   ==================================================\n            value       description\n            =========   ==================================================\n            'auto'      automatic; fill the position rectangle with data.\n            =========   ==================================================\n\n        adjustable : None\n            Currently ignored by Axes3D\n\n            If not *None*, this defines which parameter will be adjusted to\n            meet the required aspect. See `.set_adjustable` for further\n            details.\n\n        anchor : None or str or 2-tuple of float, optional\n            If not *None*, this defines where the Axes will be drawn if there\n            is extra space due to aspect constraints. The most common way to\n            to specify the anchor are abbreviations of cardinal directions:\n\n            =====   =====================\n            value   description\n            =====   =====================\n            'C'     centered\n            'SW'    lower left corner\n            'S'     middle of bottom edge\n            'SE'    lower right corner\n            etc.\n            =====   =====================\n\n            See `.set_anchor` for further details.\n\n        share : bool, default: False\n            If ``True``, apply the settings to all shared Axes.\n\n        See Also\n        --------\n        mpl_toolkits.mplot3d.axes3d.Axes3D.set_box_aspect\n        \"\"\"\n        if aspect != 'auto':\n            raise NotImplementedError(\n                \"Axes3D currently only supports the aspect argument \"\n                f\"'auto'. You passed in {aspect!r}.\"\n            )\n\n        if share:\n            axes = {*self._shared_x_axes.get_siblings(self),\n                    *self._shared_y_axes.get_siblings(self),\n                    *self._shared_z_axes.get_siblings(self),\n                    }\n        else:\n            axes = {self}\n\n        for ax in axes:\n            ax._aspect = aspect\n            ax.stale = True\n\n        if anchor is not None:\n            self.set_anchor(anchor, share=share)\n\n    def set_anchor(self, anchor, share=False):\n        # docstring inherited\n        if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n            raise ValueError('anchor must be among %s' %\n                             ', '.join(mtransforms.Bbox.coefs))\n        if share:\n            axes = {*self._shared_x_axes.get_siblings(self),\n                    *self._shared_y_axes.get_siblings(self),\n                    *self._shared_z_axes.get_siblings(self),\n                    }\n        else:\n            axes = {self}\n        for ax in axes:\n            ax._anchor = anchor\n            ax.stale = True\n\n    def set_box_aspect(self, aspect, *, zoom=1):\n        \"\"\"\n        Set the axes box aspect.\n\n        The box aspect is the ratio of height to width in display\n        units for each face of the box when viewed perpendicular to\n        that face.  This is not to be confused with the data aspect\n        (which for Axes3D is always 'auto').  The default ratios are\n        4:4:3 (x:y:z).\n\n        To simulate having equal aspect in data space, set the box\n        aspect to match your data range in each dimension.\n\n        *zoom* controls the overall size of the Axes3D in the figure.\n\n        Parameters\n        ----------\n        aspect : 3-tuple of floats or None\n            Changes the physical dimensions of the Axes3D, such that the ratio\n            of the axis lengths in display units is x:y:z.\n\n            If None, defaults to 4:4:3\n\n        zoom : float\n            Control overall size of the Axes3D in the figure.\n        \"\"\"\n        if aspect is None:\n            aspect = np.asarray((4, 4, 3), dtype=float)\n        else:\n            orig_aspect = aspect\n            aspect = np.asarray(aspect, dtype=float)\n            if aspect.shape != (3,):\n                raise ValueError(\n                    \"You must pass a 3-tuple that can be cast to floats. \"\n                    f\"You passed {orig_aspect!r}\"\n                )\n        # default scale tuned to match the mpl32 appearance.\n        aspect *= 1.8294640721620434 * zoom / np.linalg.norm(aspect)\n\n        self._box_aspect = aspect\n        self.stale = True\n\n    def apply_aspect(self, position=None):\n        if position is None:\n            position = self.get_position(original=True)\n\n        # in the superclass, we would go through and actually deal with axis\n        # scales and box/datalim. Those are all irrelevant - all we need to do\n        # is make sure our coordinate system is square.\n        trans = self.get_figure().transSubfigure\n        bb = mtransforms.Bbox.from_bounds(0, 0, 1, 1).transformed(trans)\n        # this is the physical aspect of the panel (or figure):\n        fig_aspect = bb.height / bb.width\n\n        box_aspect = 1\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n\n    @artist.allow_rasterization\n    def draw(self, renderer):\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n\n        # first, set the aspect\n        # this is duplicated from `axes._base._AxesBase.draw`\n        # but must be called before any of the artist are drawn as\n        # it adjusts the view limits and the size of the bounding box\n        # of the axes\n        locator = self.get_axes_locator()\n        if locator:\n            pos = locator(self, renderer)\n            self.apply_aspect(pos)\n        else:\n            self.apply_aspect()\n\n        # add the projection matrix to the renderer\n        self.M = self.get_proj()\n        props3d = {\n            # To raise a deprecation, we need to wrap the attribute in a\n            # function, but binding that to an instance does not work, as you\n            # would end up with an instance-specific method. Properties are\n            # class-level attributes which *are* functions, so we do that\n            # instead.\n            # This dictionary comprehension creates deprecated properties for\n            # the attributes listed below, and they are temporarily attached to\n            # the _class_ in the `_setattr_cm` call. These can both be removed\n            # once the deprecation expires\n            name: cbook.deprecated('3.4', name=name,\n                                   alternative=f'self.axes.{name}')(\n                property(lambda self, _value=getattr(self, name): _value))\n            for name in ['M', 'vvec', 'eye', 'get_axis_position']\n        }\n\n        with cbook._setattr_cm(type(renderer), **props3d):\n            def do_3d_projection(artist):\n                \"\"\"\n                Call `do_3d_projection` on an *artist*, and warn if passing\n                *renderer*.\n\n                For our Artists, never pass *renderer*. For external Artists,\n                in lieu of more complicated signature parsing, always pass\n                *renderer* and raise a warning.\n                \"\"\"\n\n                if artist.__module__ == 'mpl_toolkits.mplot3d.art3d':\n                    # Our 3D Artists have deprecated the renderer parameter, so\n                    # avoid passing it to them; call this directly once the\n                    # deprecation has expired.\n                    return artist.do_3d_projection()\n\n                cbook.warn_deprecated(\n                    \"3.4\",\n                    message=\"The 'renderer' parameter of \"\n                    \"do_3d_projection() was deprecated in Matplotlib \"\n                    \"%(since)s and will be removed %(removal)s.\")\n                return artist.do_3d_projection(renderer)\n\n            # Calculate projection of collections and patches and zorder them.\n            # Make sure they are drawn above the grids.\n            zorder_offset = max(axis.get_zorder()\n                                for axis in self._get_axis_list()) + 1\n            for i, col in enumerate(\n                    sorted(self.collections,\n                           key=do_3d_projection,\n                           reverse=True)):\n                col.zorder = zorder_offset + i\n            for i, patch in enumerate(\n                    sorted(self.patches,\n                           key=do_3d_projection,\n                           reverse=True)):\n                patch.zorder = zorder_offset + i\n\n            if self._axis3don:\n                # Draw panes first\n                for axis in self._get_axis_list():\n                    axis.draw_pane(renderer)\n                # Then axes\n                for axis in self._get_axis_list():\n                    axis.draw(renderer)\n\n            # Then rest\n            super().draw(renderer)\n\n    def get_axis_position(self):\n        vals = self.get_w_lims()\n        tc = self.tunit_cube(vals, self.M)\n        xhigh = tc[1][2] > tc[2][2]\n        yhigh = tc[3][2] > tc[2][2]\n        zhigh = tc[0][2] > tc[2][2]\n        return xhigh, yhigh, zhigh\n\n    def _unit_change_handler(self, axis_name, event=None):\n        # docstring inherited\n        if event is None:  # Allow connecting `self._unit_change_handler(name)`\n            return functools.partial(\n                self._unit_change_handler, axis_name, event=object())\n        _api.check_in_list(self._get_axis_map(), axis_name=axis_name)\n        self.relim()\n        self.autoscale_view(scalex=(axis_name == \"x\"),\n                            scaley=(axis_name == \"y\"),\n                            scalez=(axis_name == \"z\"))\n\n    def update_datalim(self, xys, **kwargs):\n        pass\n\n    def get_autoscale_on(self):\n        \"\"\"\n        Get whether autoscaling is applied for all axes on plot commands\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n        \"\"\"\n        return super().get_autoscale_on() and self.get_autoscalez_on()\n\n    def get_autoscalez_on(self):\n        \"\"\"\n        Get whether autoscaling for the z-axis is applied on plot commands\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n        \"\"\"\n        return self._autoscaleZon\n\n    def set_autoscale_on(self, b):\n        \"\"\"\n        Set whether autoscaling is applied on plot commands\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n\n        Parameters\n        ----------\n        b : bool\n        \"\"\"\n        super().set_autoscale_on(b)\n        self.set_autoscalez_on(b)\n\n    def set_autoscalez_on(self, b):\n        \"\"\"\n        Set whether autoscaling for the z-axis is applied on plot commands\n\n        .. versionadded:: 1.1.0\n\n        Parameters\n        ----------\n        b : bool\n        \"\"\"\n        self._autoscaleZon = b\n\n    def set_zmargin(self, m):\n        \"\"\"\n        Set padding of Z data limits prior to autoscaling.\n\n        *m* times the data interval will be added to each\n        end of that interval before it is used in autoscaling.\n\n        accepts: float in range 0 to 1\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        if m < 0 or m > 1:\n            raise ValueError(\"margin must be in range 0 to 1\")\n        self._zmargin = m\n        self.stale = True\n\n    def margins(self, *margins, x=None, y=None, z=None, tight=True):\n        \"\"\"\n        Convenience method to set or retrieve autoscaling margins.\n\n        Call signatures::\n\n            margins()\n\n        returns xmargin, ymargin, zmargin\n\n        ::\n\n            margins(margin)\n\n            margins(xmargin, ymargin, zmargin)\n\n            margins(x=xmargin, y=ymargin, z=zmargin)\n\n            margins(..., tight=False)\n\n        All forms above set the xmargin, ymargin and zmargin\n        parameters. All keyword parameters are optional.  A single\n        positional argument specifies xmargin, ymargin and zmargin.\n        Passing both positional and keyword arguments for xmargin,\n        ymargin, and/or zmargin is invalid.\n\n        The *tight* parameter\n        is passed to :meth:`autoscale_view`, which is executed after\n        a margin is changed; the default here is *True*, on the\n        assumption that when margins are specified, no additional\n        padding to match tick marks is usually desired.  Setting\n        *tight* to *None* will preserve the previous setting.\n\n        Specifying any margin changes only the autoscaling; for example,\n        if *xmargin* is not None, then *xmargin* times the X data\n        interval will be added to each end of that interval before\n        it is used in autoscaling.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        if margins and x is not None and y is not None and z is not None:\n            raise TypeError('Cannot pass both positional and keyword '\n                            'arguments for x, y, and/or z.')\n        elif len(margins) == 1:\n            x = y = z = margins[0]\n        elif len(margins) == 3:\n            x, y, z = margins\n        elif margins:\n            raise TypeError('Must pass a single positional argument for all '\n                            'margins, or one for each margin (x, y, z).')\n\n        if x is None and y is None and z is None:\n            if tight is not True:\n                _api.warn_external(f'ignoring tight={tight!r} in get mode')\n            return self._xmargin, self._ymargin, self._zmargin\n\n        if x is not None:\n            self.set_xmargin(x)\n        if y is not None:\n            self.set_ymargin(y)\n        if z is not None:\n            self.set_zmargin(z)\n\n        self.autoscale_view(\n            tight=tight, scalex=(x is not None), scaley=(y is not None),\n            scalez=(z is not None)\n        )\n\n    def autoscale(self, enable=True, axis='both', tight=None):\n        \"\"\"\n        Convenience method for simple axis view autoscaling.\n        See :meth:`matplotlib.axes.Axes.autoscale` for full explanation.\n        Note that this function behaves the same, but for all\n        three axes.  Therefore, 'z' can be passed for *axis*,\n        and 'both' applies to all three axes.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        if enable is None:\n            scalex = True\n            scaley = True\n            scalez = True\n        else:\n            if axis in ['x', 'both']:\n                self._autoscaleXon = scalex = bool(enable)\n            else:\n                scalex = False\n            if axis in ['y', 'both']:\n                self._autoscaleYon = scaley = bool(enable)\n            else:\n                scaley = False\n            if axis in ['z', 'both']:\n                self._autoscaleZon = scalez = bool(enable)\n            else:\n                scalez = False\n        self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley,\n                            scalez=scalez)\n\n    def auto_scale_xyz(self, X, Y, Z=None, had_data=None):\n        # This updates the bounding boxes as to keep a record as to what the\n        # minimum sized rectangular volume holds the data.\n        X = np.reshape(X, -1)\n        Y = np.reshape(Y, -1)\n        self.xy_dataLim.update_from_data_xy(\n            np.column_stack([X, Y]), not had_data)\n        if Z is not None:\n            Z = np.reshape(Z, -1)\n            self.zz_dataLim.update_from_data_xy(\n                np.column_stack([Z, Z]), not had_data)\n        # Let autoscale_view figure out how to use this data.\n        self.autoscale_view()\n\n    def autoscale_view(self, tight=None, scalex=True, scaley=True,\n                       scalez=True):\n        \"\"\"\n        Autoscale the view limits using the data limits.\n        See :meth:`matplotlib.axes.Axes.autoscale_view` for documentation.\n        Note that this function applies to the 3D axes, and as such\n        adds the *scalez* to the function arguments.\n\n        .. versionchanged:: 1.1.0\n            Function signature was changed to better match the 2D version.\n            *tight* is now explicitly a kwarg and placed first.\n\n        .. versionchanged:: 1.2.1\n            This is now fully functional.\n        \"\"\"\n        # This method looks at the rectangular volume (see above)\n        # of data and decides how to scale the view portal to fit it.\n        if tight is None:\n            # if image data only just use the datalim\n            _tight = self._tight or (\n                len(self.images) > 0\n                and len(self.lines) == len(self.patches) == 0)\n        else:\n            _tight = self._tight = bool(tight)\n\n        if scalex and self._autoscaleXon:\n            self._shared_x_axes.clean()\n            x0, x1 = self.xy_dataLim.intervalx\n            xlocator = self.xaxis.get_major_locator()\n            x0, x1 = xlocator.nonsingular(x0, x1)\n            if self._xmargin > 0:\n                delta = (x1 - x0) * self._xmargin\n                x0 -= delta\n                x1 += delta\n            if not _tight:\n                x0, x1 = xlocator.view_limits(x0, x1)\n            self.set_xbound(x0, x1)\n\n        if scaley and self._autoscaleYon:\n            self._shared_y_axes.clean()\n            y0, y1 = self.xy_dataLim.intervaly\n            ylocator = self.yaxis.get_major_locator()\n            y0, y1 = ylocator.nonsingular(y0, y1)\n            if self._ymargin > 0:\n                delta = (y1 - y0) * self._ymargin\n                y0 -= delta\n                y1 += delta\n            if not _tight:\n                y0, y1 = ylocator.view_limits(y0, y1)\n            self.set_ybound(y0, y1)\n\n        if scalez and self._autoscaleZon:\n            self._shared_z_axes.clean()\n            z0, z1 = self.zz_dataLim.intervalx\n            zlocator = self.zaxis.get_major_locator()\n            z0, z1 = zlocator.nonsingular(z0, z1)\n            if self._zmargin > 0:\n                delta = (z1 - z0) * self._zmargin\n                z0 -= delta\n                z1 += delta\n            if not _tight:\n                z0, z1 = zlocator.view_limits(z0, z1)\n            self.set_zbound(z0, z1)\n\n    def get_w_lims(self):\n        \"\"\"Get 3D world limits.\"\"\"\n        minx, maxx = self.get_xlim3d()\n        miny, maxy = self.get_ylim3d()\n        minz, maxz = self.get_zlim3d()\n        return minx, maxx, miny, maxy, minz, maxz\n\n    def set_xlim3d(self, left=None, right=None, emit=True, auto=False,\n                   *, xmin=None, xmax=None):\n        \"\"\"\n        Set 3D x limits.\n\n        See :meth:`matplotlib.axes.Axes.set_xlim` for full documentation.\n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        if xmin is not None:\n            if left is not None:\n                raise TypeError('Cannot pass both `xmin` and `left`')\n            left = xmin\n        if xmax is not None:\n            if right is not None:\n                raise TypeError('Cannot pass both `xmax` and `right`')\n            right = xmax\n\n        self._process_unit_info([(\"x\", (left, right))], convert=False)\n        left = self._validate_converted_limits(left, self.convert_xunits)\n        right = self._validate_converted_limits(right, self.convert_xunits)\n\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n\n        if left == right:\n            _api.warn_external(\n                f\"Attempting to set identical left == right == {left} results \"\n                f\"in singular transformations; automatically expanding.\")\n        reverse = left > right\n        left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n        left, right = self.xaxis.limit_range_for_scale(left, right)\n        # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n        left, right = sorted([left, right], reverse=bool(reverse))\n        self.xy_viewLim.intervalx = (left, right)\n\n        if auto is not None:\n            self._autoscaleXon = bool(auto)\n\n        if emit:\n            self.callbacks.process('xlim_changed', self)\n            # Call all of the other x-axes that are shared with this one\n            for other in self._shared_x_axes.get_siblings(self):\n                if other is not self:\n                    other.set_xlim(self.xy_viewLim.intervalx,\n                                   emit=False, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n        self.stale = True\n        return left, right\n\n    def set_ylim3d(self, bottom=None, top=None, emit=True, auto=False,\n                   *, ymin=None, ymax=None):\n        \"\"\"\n        Set 3D y limits.\n\n        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation.\n        \"\"\"\n        if top is None and np.iterable(bottom):\n            bottom, top = bottom\n        if ymin is not None:\n            if bottom is not None:\n                raise TypeError('Cannot pass both `ymin` and `bottom`')\n            bottom = ymin\n        if ymax is not None:\n            if top is not None:\n                raise TypeError('Cannot pass both `ymax` and `top`')\n            top = ymax\n\n        self._process_unit_info([(\"y\", (bottom, top))], convert=False)\n        bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n        top = self._validate_converted_limits(top, self.convert_yunits)\n\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n\n        if bottom == top:\n            _api.warn_external(\n                f\"Attempting to set identical bottom == top == {bottom} \"\n                f\"results in singular transformations; automatically \"\n                f\"expanding.\")\n        swapped = bottom > top\n        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n        bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n        if swapped:\n            bottom, top = top, bottom\n        self.xy_viewLim.intervaly = (bottom, top)\n\n        if auto is not None:\n            self._autoscaleYon = bool(auto)\n\n        if emit:\n            self.callbacks.process('ylim_changed', self)\n            # Call all of the other y-axes that are shared with this one\n            for other in self._shared_y_axes.get_siblings(self):\n                if other is not self:\n                    other.set_ylim(self.xy_viewLim.intervaly,\n                                   emit=False, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n        self.stale = True\n        return bottom, top\n\n    def set_zlim3d(self, bottom=None, top=None, emit=True, auto=False,\n                   *, zmin=None, zmax=None):\n        \"\"\"\n        Set 3D z limits.\n\n        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation\n        \"\"\"\n        if top is None and np.iterable(bottom):\n            bottom, top = bottom\n        if zmin is not None:\n            if bottom is not None:\n                raise TypeError('Cannot pass both `zmin` and `bottom`')\n            bottom = zmin\n        if zmax is not None:\n            if top is not None:\n                raise TypeError('Cannot pass both `zmax` and `top`')\n            top = zmax\n\n        self._process_unit_info([(\"z\", (bottom, top))], convert=False)\n        bottom = self._validate_converted_limits(bottom, self.convert_zunits)\n        top = self._validate_converted_limits(top, self.convert_zunits)\n\n        old_bottom, old_top = self.get_zlim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n\n        if bottom == top:\n            _api.warn_external(\n                f\"Attempting to set identical bottom == top == {bottom} \"\n                f\"results in singular transformations; automatically \"\n                f\"expanding.\")\n        swapped = bottom > top\n        bottom, top = self.zaxis.get_major_locator().nonsingular(bottom, top)\n        bottom, top = self.zaxis.limit_range_for_scale(bottom, top)\n        if swapped:\n            bottom, top = top, bottom\n        self.zz_viewLim.intervalx = (bottom, top)\n\n        if auto is not None:\n            self._autoscaleZon = bool(auto)\n\n        if emit:\n            self.callbacks.process('zlim_changed', self)\n            # Call all of the other y-axes that are shared with this one\n            for other in self._shared_z_axes.get_siblings(self):\n                if other is not self:\n                    other.set_zlim(self.zz_viewLim.intervalx,\n                                   emit=False, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n        self.stale = True\n        return bottom, top\n\n    def get_xlim3d(self):\n        return tuple(self.xy_viewLim.intervalx)\n    get_xlim3d.__doc__ = maxes.Axes.get_xlim.__doc__\n    if get_xlim3d.__doc__ is not None:\n        get_xlim3d.__doc__ += \"\"\"\n        .. versionchanged:: 1.1.0\n            This function now correctly refers to the 3D x-limits\n        \"\"\"\n\n    def get_ylim3d(self):\n        return tuple(self.xy_viewLim.intervaly)\n    get_ylim3d.__doc__ = maxes.Axes.get_ylim.__doc__\n    if get_ylim3d.__doc__ is not None:\n        get_ylim3d.__doc__ += \"\"\"\n        .. versionchanged:: 1.1.0\n            This function now correctly refers to the 3D y-limits.\n        \"\"\"\n\n    def get_zlim3d(self):\n        \"\"\"Get 3D z limits.\"\"\"\n        return tuple(self.zz_viewLim.intervalx)\n\n    def get_zscale(self):\n        \"\"\"\n        Return the zaxis scale string %s\n\n        \"\"\" % (\", \".join(mscale.get_scale_names()))\n        return self.zaxis.get_scale()\n\n    # We need to slightly redefine these to pass scalez=False\n    # to their calls of autoscale_view.\n\n    def set_xscale(self, value, **kwargs):\n        self.xaxis._set_scale(value, **kwargs)\n        self.autoscale_view(scaley=False, scalez=False)\n        self._update_transScale()\n        self.stale = True\n\n    def set_yscale(self, value, **kwargs):\n        self.yaxis._set_scale(value, **kwargs)\n        self.autoscale_view(scalex=False, scalez=False)\n        self._update_transScale()\n        self.stale = True\n\n    def set_zscale(self, value, **kwargs):\n        self.zaxis._set_scale(value, **kwargs)\n        self.autoscale_view(scalex=False, scaley=False)\n        self._update_transScale()\n        self.stale = True\n\n    set_xscale.__doc__, set_yscale.__doc__, set_zscale.__doc__ = map(\n        \"\"\"\n        Set the {}-axis scale.\n\n        Parameters\n        ----------\n        value : {{\"linear\"}}\n            The axis scale type to apply.  3D axes currently only support\n            linear scales; other scales yield nonsensical results.\n\n        **kwargs\n            Keyword arguments are nominally forwarded to the scale class, but\n            none of them is applicable for linear scales.\n        \"\"\".format,\n        [\"x\", \"y\", \"z\"])\n\n    get_zticks = _axis_method_wrapper(\"zaxis\", \"get_ticklocs\")\n    set_zticks = _axis_method_wrapper(\"zaxis\", \"set_ticks\")\n    get_zmajorticklabels = _axis_method_wrapper(\"zaxis\", \"get_majorticklabels\")\n    get_zminorticklabels = _axis_method_wrapper(\"zaxis\", \"get_minorticklabels\")\n    get_zticklabels = _axis_method_wrapper(\"zaxis\", \"get_ticklabels\")\n    set_zticklabels = _axis_method_wrapper(\n        \"zaxis\", \"_set_ticklabels\",\n        doc_sub={\"Axis.set_ticks\": \"Axes3D.set_zticks\"})\n\n    zaxis_date = _axis_method_wrapper(\"zaxis\", \"axis_date\")\n    if zaxis_date.__doc__:\n        zaxis_date.__doc__ += textwrap.dedent(\"\"\"\n\n        Notes\n        -----\n        This function is merely provided for completeness, but 3D axes do not\n        support dates for ticks, and so this may not work as expected.\n        \"\"\")\n\n    def clabel(self, *args, **kwargs):\n        \"\"\"Currently not implemented for 3D axes, and returns *None*.\"\"\"\n        return None\n\n    def view_init(self, elev=None, azim=None):\n        \"\"\"\n        Set the elevation and azimuth of the axes in degrees (not radians).\n\n        This can be used to rotate the axes programmatically.\n\n        'elev' stores the elevation angle in the z plane (in degrees).\n        'azim' stores the azimuth angle in the (x, y) plane (in degrees).\n\n        if 'elev' or 'azim' are None (default), then the initial value\n        is used which was specified in the :class:`Axes3D` constructor.\n        \"\"\"\n\n        self.dist = 10\n\n        if elev is None:\n            self.elev = self.initial_elev\n        else:\n            self.elev = elev\n\n        if azim is None:\n            self.azim = self.initial_azim\n        else:\n            self.azim = azim\n\n    def set_proj_type(self, proj_type):\n        \"\"\"\n        Set the projection type.\n\n        Parameters\n        ----------\n        proj_type : {'persp', 'ortho'}\n        \"\"\"\n        self._projection = _api.check_getitem({\n            'persp': proj3d.persp_transformation,\n            'ortho': proj3d.ortho_transformation,\n        }, proj_type=proj_type)\n\n    def get_proj(self):\n        \"\"\"Create the projection matrix from the current viewing position.\"\"\"\n        # elev stores the elevation angle in the z plane\n        # azim stores the azimuth angle in the x,y plane\n        #\n        # dist is the distance of the eye viewing point from the object\n        # point.\n\n        relev, razim = np.pi * self.elev/180, np.pi * self.azim/180\n\n        xmin, xmax = self.get_xlim3d()\n        ymin, ymax = self.get_ylim3d()\n        zmin, zmax = self.get_zlim3d()\n\n        # transform to uniform world coordinates 0-1, 0-1, 0-1\n        worldM = proj3d.world_transformation(xmin, xmax,\n                                             ymin, ymax,\n                                             zmin, zmax,\n                                             pb_aspect=self._box_aspect)\n\n        # look into the middle of the new coordinates\n        R = self._box_aspect / 2\n\n        xp = R[0] + np.cos(razim) * np.cos(relev) * self.dist\n        yp = R[1] + np.sin(razim) * np.cos(relev) * self.dist\n        zp = R[2] + np.sin(relev) * self.dist\n        E = np.array((xp, yp, zp))\n\n        self.eye = E\n        self.vvec = R - E\n        self.vvec = self.vvec / np.linalg.norm(self.vvec)\n\n        if abs(relev) > np.pi/2:\n            # upside down\n            V = np.array((0, 0, -1))\n        else:\n            V = np.array((0, 0, 1))\n        zfront, zback = -self.dist, self.dist\n\n        viewM = proj3d.view_transformation(E, R, V)\n        projM = self._projection(zfront, zback)\n        M0 = np.dot(viewM, worldM)\n        M = np.dot(projM, M0)\n        return M\n\n    def mouse_init(self, rotate_btn=1, zoom_btn=3):\n        \"\"\"\n        Set the mouse buttons for 3D rotation and zooming.\n\n        Parameters\n        ----------\n        rotate_btn : int or list of int, default: 1\n            The mouse button or buttons to use for 3D rotation of the axes.\n        zoom_btn : int or list of int, default: 3\n            The mouse button or buttons to use to zoom the 3D axes.\n        \"\"\"\n        self.button_pressed = None\n        # coerce scalars into array-like, then convert into\n        # a regular list to avoid comparisons against None\n        # which breaks in recent versions of numpy.\n        self._rotate_btn = np.atleast_1d(rotate_btn).tolist()\n        self._zoom_btn = np.atleast_1d(zoom_btn).tolist()\n\n    def disable_mouse_rotation(self):\n        \"\"\"Disable mouse buttons for 3D rotation and zooming.\"\"\"\n        self.mouse_init(rotate_btn=[], zoom_btn=[])\n\n    def can_zoom(self):\n        \"\"\"\n        Return whether this axes supports the zoom box button functionality.\n\n        3D axes objects do not use the zoom box button.\n        \"\"\"\n        return False\n\n    def can_pan(self):\n        \"\"\"\n        Return whether this axes supports the pan/zoom button functionality.\n\n        3D axes objects do not use the pan/zoom button.\n        \"\"\"\n        return False\n\n    def cla(self):\n        # docstring inherited.\n\n        super().cla()\n        self.zaxis.clear()\n\n        if self._sharez is not None:\n            self.zaxis.major = self._sharez.zaxis.major\n            self.zaxis.minor = self._sharez.zaxis.minor\n            z0, z1 = self._sharez.get_zlim()\n            self.set_zlim(z0, z1, emit=False, auto=None)\n            self.zaxis._set_scale(self._sharez.zaxis.get_scale())\n        else:\n            self.zaxis._set_scale('linear')\n            try:\n                self.set_zlim(0, 1)\n            except TypeError:\n                pass\n\n        self._autoscaleZon = True\n        self._zmargin = 0\n\n        self.grid(rcParams['axes3d.grid'])\n\n    def _button_press(self, event):\n        if event.inaxes == self:\n            self.button_pressed = event.button\n            self.sx, self.sy = event.xdata, event.ydata\n            toolbar = getattr(self.figure.canvas, \"toolbar\")\n            if toolbar and toolbar._nav_stack() is None:\n                self.figure.canvas.toolbar.push_current()\n\n    def _button_release(self, event):\n        self.button_pressed = None\n        toolbar = getattr(self.figure.canvas, \"toolbar\")\n        if toolbar:\n            self.figure.canvas.toolbar.push_current()\n\n    def _get_view(self):\n        # docstring inherited\n        return (self.get_xlim(), self.get_ylim(), self.get_zlim(),\n                self.elev, self.azim)\n\n    def _set_view(self, view):\n        # docstring inherited\n        xlim, ylim, zlim, elev, azim = view\n        self.set(xlim=xlim, ylim=ylim, zlim=zlim)\n        self.elev = elev\n        self.azim = azim\n\n    def format_zdata(self, z):\n        \"\"\"\n        Return *z* string formatted.  This function will use the\n        :attr:`fmt_zdata` attribute if it is callable, else will fall\n        back on the zaxis major formatter\n        \"\"\"\n        try:\n            return self.fmt_zdata(z)\n        except (AttributeError, TypeError):\n            func = self.zaxis.get_major_formatter().format_data_short\n            val = func(z)\n            return val\n\n    def format_coord(self, xd, yd):\n        \"\"\"\n        Given the 2D view coordinates attempt to guess a 3D coordinate.\n        Looks for the nearest edge to the point and then assumes that\n        the point is at the same z location as the nearest point on the edge.\n        \"\"\"\n\n        if self.M is None:\n            return ''\n\n        if self.button_pressed in self._rotate_btn:\n            return 'azimuth={:.0f} deg, elevation={:.0f} deg '.format(\n                self.azim, self.elev)\n            # ignore xd and yd and display angles instead\n\n        # nearest edge\n        p0, p1 = min(self.tunit_edges(),\n                     key=lambda edge: proj3d._line2d_seg_dist(\n                         edge[0], edge[1], (xd, yd)))\n\n        # scale the z value to match\n        x0, y0, z0 = p0\n        x1, y1, z1 = p1\n        d0 = np.hypot(x0-xd, y0-yd)\n        d1 = np.hypot(x1-xd, y1-yd)\n        dt = d0+d1\n        z = d1/dt * z0 + d0/dt * z1\n\n        x, y, z = proj3d.inv_transform(xd, yd, z, self.M)\n\n        xs = self.format_xdata(x)\n        ys = self.format_ydata(y)\n        zs = self.format_zdata(z)\n        return 'x=%s, y=%s, z=%s' % (xs, ys, zs)\n\n    def _on_move(self, event):\n        \"\"\"\n        Mouse moving.\n\n        By default, button-1 rotates and button-3 zooms; these buttons can be\n        modified via `mouse_init`.\n        \"\"\"\n\n        if not self.button_pressed:\n            return\n\n        if self.M is None:\n            return\n\n        x, y = event.xdata, event.ydata\n        # In case the mouse is out of bounds.\n        if x is None:\n            return\n\n        dx, dy = x - self.sx, y - self.sy\n        w = self._pseudo_w\n        h = self._pseudo_h\n        self.sx, self.sy = x, y\n\n        # Rotation\n        if self.button_pressed in self._rotate_btn:\n            # rotate viewing point\n            # get the x and y pixel coords\n            if dx == 0 and dy == 0:\n                return\n            self.elev = art3d._norm_angle(self.elev - (dy/h)*180)\n            self.azim = art3d._norm_angle(self.azim - (dx/w)*180)\n            self.get_proj()\n            self.stale = True\n            self.figure.canvas.draw_idle()\n\n        elif self.button_pressed == 2:\n            # pan view\n            # get the x and y pixel coords\n            if dx == 0 and dy == 0:\n                return\n            minx, maxx, miny, maxy, minz, maxz = self.get_w_lims()\n            dx = 1-((w - dx)/w)\n            dy = 1-((h - dy)/h)\n            elev, azim = np.deg2rad(self.elev), np.deg2rad(self.azim)\n            # project xv, yv, zv -> xw, yw, zw\n            dxx = (maxx-minx)*(dy*np.sin(elev)*np.cos(azim) + dx*np.sin(azim))\n            dyy = (maxy-miny)*(-dx*np.cos(azim) + dy*np.sin(elev)*np.sin(azim))\n            dzz = (maxz-minz)*(-dy*np.cos(elev))\n            # pan\n            self.set_xlim3d(minx + dxx, maxx + dxx)\n            self.set_ylim3d(miny + dyy, maxy + dyy)\n            self.set_zlim3d(minz + dzz, maxz + dzz)\n            self.get_proj()\n            self.figure.canvas.draw_idle()\n\n        # Zoom\n        elif self.button_pressed in self._zoom_btn:\n            # zoom view\n            # hmmm..this needs some help from clipping....\n            minx, maxx, miny, maxy, minz, maxz = self.get_w_lims()\n            df = 1-((h - dy)/h)\n            dx = (maxx-minx)*df\n            dy = (maxy-miny)*df\n            dz = (maxz-minz)*df\n            self.set_xlim3d(minx - dx, maxx + dx)\n            self.set_ylim3d(miny - dy, maxy + dy)\n            self.set_zlim3d(minz - dz, maxz + dz)\n            self.get_proj()\n            self.figure.canvas.draw_idle()\n\n    def set_zlabel(self, zlabel, fontdict=None, labelpad=None, **kwargs):\n        \"\"\"\n        Set zlabel.  See doc for `.set_ylabel` for description.\n        \"\"\"\n        if labelpad is not None:\n            self.zaxis.labelpad = labelpad\n        return self.zaxis.set_label_text(zlabel, fontdict, **kwargs)\n\n    def get_zlabel(self):\n        \"\"\"\n        Get the z-label text string.\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n        \"\"\"\n        label = self.zaxis.get_label()\n        return label.get_text()\n\n    # Axes rectangle characteristics\n\n    def get_frame_on(self):\n        \"\"\"Get whether the 3D axes panels are drawn.\"\"\"\n        return self._frameon\n\n    def set_frame_on(self, b):\n        \"\"\"\n        Set whether the 3D axes panels are drawn.\n\n        Parameters\n        ----------\n        b : bool\n        \"\"\"\n        self._frameon = bool(b)\n        self.stale = True\n\n    def grid(self, b=True, **kwargs):\n        \"\"\"\n        Set / unset 3D grid.\n\n        .. note::\n\n            Currently, this function does not behave the same as\n            :meth:`matplotlib.axes.Axes.grid`, but it is intended to\n            eventually support that behavior.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        # TODO: Operate on each axes separately\n        if len(kwargs):\n            b = True\n        self._draw_grid = b\n        self.stale = True\n\n    def locator_params(self, axis='both', tight=None, **kwargs):\n        \"\"\"\n        Convenience method for controlling tick locators.\n\n        See :meth:`matplotlib.axes.Axes.locator_params` for full\n        documentation.  Note that this is for Axes3D objects,\n        therefore, setting *axis* to 'both' will result in the\n        parameters being set for all three axes.  Also, *axis*\n        can also take a value of 'z' to apply parameters to the\n        z axis.\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n        \"\"\"\n        _x = axis in ['x', 'both']\n        _y = axis in ['y', 'both']\n        _z = axis in ['z', 'both']\n        if _x:\n            self.xaxis.get_major_locator().set_params(**kwargs)\n        if _y:\n            self.yaxis.get_major_locator().set_params(**kwargs)\n        if _z:\n            self.zaxis.get_major_locator().set_params(**kwargs)\n        self.autoscale_view(tight=tight, scalex=_x, scaley=_y, scalez=_z)\n\n    def tick_params(self, axis='both', **kwargs):\n        \"\"\"\n        Convenience method for changing the appearance of ticks and\n        tick labels.\n\n        See :meth:`matplotlib.axes.Axes.tick_params` for more complete\n        documentation.\n\n        The only difference is that setting *axis* to 'both' will\n        mean that the settings are applied to all three axes. Also,\n        the *axis* parameter also accepts a value of 'z', which\n        would mean to apply to only the z-axis.\n\n        Also, because of how Axes3D objects are drawn very differently\n        from regular 2D axes, some of these settings may have\n        ambiguous meaning.  For simplicity, the 'z' axis will\n        accept settings as if it was like the 'y' axis.\n\n        .. note::\n           Axes3D currently ignores some of these settings.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        _api.check_in_list(['x', 'y', 'z', 'both'], axis=axis)\n        if axis in ['x', 'y', 'both']:\n            super().tick_params(axis, **kwargs)\n        if axis in ['z', 'both']:\n            zkw = dict(kwargs)\n            zkw.pop('top', None)\n            zkw.pop('bottom', None)\n            zkw.pop('labeltop', None)\n            zkw.pop('labelbottom', None)\n            self.zaxis.set_tick_params(**zkw)\n\n    # data limits, ticks, tick labels, and formatting\n\n    def invert_zaxis(self):\n        \"\"\"\n        Invert the z-axis.\n\n        .. versionadded:: 1.1.0\n            This function was added, but not tested. Please report any bugs.\n        \"\"\"\n        bottom, top = self.get_zlim()\n        self.set_zlim(top, bottom, auto=None)\n\n    def zaxis_inverted(self):\n        \"\"\"\n        Returns True if the z-axis is inverted.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        bottom, top = self.get_zlim()\n        return top < bottom\n\n    def get_zbound(self):\n        \"\"\"\n        Return the lower and upper z-axis bounds, in increasing order.\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        bottom, top = self.get_zlim()\n        if bottom < top:\n            return bottom, top\n        else:\n            return top, bottom\n\n    def set_zbound(self, lower=None, upper=None):\n        \"\"\"\n        Set the lower and upper numerical bounds of the z-axis.\n\n        This method will honor axes inversion regardless of parameter order.\n        It will not change the autoscaling setting (`.get_autoscalez_on()`).\n\n        .. versionadded:: 1.1.0\n        \"\"\"\n        if upper is None and np.iterable(lower):\n            lower, upper = lower\n\n        old_lower, old_upper = self.get_zbound()\n        if lower is None:\n            lower = old_lower\n        if upper is None:\n            upper = old_upper\n\n        self.set_zlim(sorted((lower, upper),\n                             reverse=bool(self.zaxis_inverted())),\n                      auto=None)\n\n    def text(self, x, y, z, s, zdir=None, **kwargs):\n        \"\"\"\n        Add text to the plot. kwargs will be passed on to Axes.text,\n        except for the *zdir* keyword, which sets the direction to be\n        used as the z direction.\n        \"\"\"\n        text = super().text(x, y, s, **kwargs)\n        art3d.text_2d_to_3d(text, z, zdir)\n        return text\n\n    text3D = text\n    text2D = Axes.text\n\n    def plot(self, xs, ys, *args, zdir='z', **kwargs):\n        \"\"\"\n        Plot 2D or 3D data.\n\n        Parameters\n        ----------\n        xs : 1D array-like\n            x coordinates of vertices.\n        ys : 1D array-like\n            y coordinates of vertices.\n        zs : float or 1D array-like\n            z coordinates of vertices; either one for all points or one for\n            each point.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            When plotting 2D data, the direction to use as z ('x', 'y' or 'z').\n        **kwargs\n            Other arguments are forwarded to `matplotlib.axes.Axes.plot`.\n        \"\"\"\n        had_data = self.has_data()\n\n        # `zs` can be passed positionally or as keyword; checking whether\n        # args[0] is a string matches the behavior of 2D `plot` (via\n        # `_process_plot_var_args`).\n        if args and not isinstance(args[0], str):\n            zs, *args = args\n            if 'zs' in kwargs:\n                raise TypeError(\"plot() for multiple values for argument 'z'\")\n        else:\n            zs = kwargs.pop('zs', 0)\n\n        # Match length\n        zs = np.broadcast_to(zs, np.shape(xs))\n\n        lines = super().plot(xs, ys, *args, **kwargs)\n        for line in lines:\n            art3d.line_2d_to_3d(line, zs=zs, zdir=zdir)\n\n        xs, ys, zs = art3d.juggle_axes(xs, ys, zs, zdir)\n        self.auto_scale_xyz(xs, ys, zs, had_data)\n        return lines\n\n    plot3D = plot\n\n    def plot_surface(self, X, Y, Z, *args, norm=None, vmin=None,\n                     vmax=None, lightsource=None, **kwargs):\n        \"\"\"\n        Create a surface plot.\n\n        By default it will be colored in shades of a solid color, but it also\n        supports colormapping by supplying the *cmap* argument.\n\n        .. note::\n\n           The *rcount* and *ccount* kwargs, which both default to 50,\n           determine the maximum number of samples used in each direction.  If\n           the input data is larger, it will be downsampled (by slicing) to\n           these numbers of points.\n\n        .. note::\n\n           To maximize rendering speed consider setting *rstride* and *cstride*\n           to divisors of the number of rows minus 1 and columns minus 1\n           respectively. For example, given 51 rows rstride can be any of the\n           divisors of 50.\n\n           Similarly, a setting of *rstride* and *cstride* equal to 1 (or\n           *rcount* and *ccount* equal the number of rows and columns) can use\n           the optimized path.\n\n        Parameters\n        ----------\n        X, Y, Z : 2D arrays\n            Data values.\n\n        rcount, ccount : int\n            Maximum number of samples used in each direction.  If the input\n            data is larger, it will be downsampled (by slicing) to these\n            numbers of points.  Defaults to 50.\n\n            .. versionadded:: 2.0\n\n        rstride, cstride : int\n            Downsampling stride in each direction.  These arguments are\n            mutually exclusive with *rcount* and *ccount*.  If only one of\n            *rstride* or *cstride* is set, the other defaults to 10.\n\n            'classic' mode uses a default of ``rstride = cstride = 10`` instead\n            of the new default of ``rcount = ccount = 50``.\n\n        color : color-like\n            Color of the surface patches.\n\n        cmap : Colormap\n            Colormap of the surface patches.\n\n        facecolors : array-like of colors.\n            Colors of each individual patch.\n\n        norm : Normalize\n            Normalization for the colormap.\n\n        vmin, vmax : float\n            Bounds for the normalization.\n\n        shade : bool, default: True\n            Whether to shade the facecolors.  Shading is always disabled when\n            *cmap* is specified.\n\n        lightsource : `~matplotlib.colors.LightSource`\n            The lightsource to use when *shade* is True.\n\n        **kwargs\n            Other arguments are forwarded to `.Poly3DCollection`.\n        \"\"\"\n\n        had_data = self.has_data()\n\n        if Z.ndim != 2:\n            raise ValueError(\"Argument Z must be 2-dimensional.\")\n        if np.any(np.isnan(Z)):\n            _api.warn_external(\n                \"Z contains NaN values. This may result in rendering \"\n                \"artifacts.\")\n\n        # TODO: Support masked arrays\n        X, Y, Z = np.broadcast_arrays(X, Y, Z)\n        rows, cols = Z.shape\n\n        has_stride = 'rstride' in kwargs or 'cstride' in kwargs\n        has_count = 'rcount' in kwargs or 'ccount' in kwargs\n\n        if has_stride and has_count:\n            raise ValueError(\"Cannot specify both stride and count arguments\")\n\n        rstride = kwargs.pop('rstride', 10)\n        cstride = kwargs.pop('cstride', 10)\n        rcount = kwargs.pop('rcount', 50)\n        ccount = kwargs.pop('ccount', 50)\n\n        if rcParams['_internal.classic_mode']:\n            # Strides have priority over counts in classic mode.\n            # So, only compute strides from counts\n            # if counts were explicitly given\n            compute_strides = has_count\n        else:\n            # If the strides are provided then it has priority.\n            # Otherwise, compute the strides from the counts.\n            compute_strides = not has_stride\n\n        if compute_strides:\n            rstride = int(max(np.ceil(rows / rcount), 1))\n            cstride = int(max(np.ceil(cols / ccount), 1))\n\n        if 'facecolors' in kwargs:\n            fcolors = kwargs.pop('facecolors')\n        else:\n            color = kwargs.pop('color', None)\n            if color is None:\n                color = self._get_lines.get_next_color()\n            color = np.array(mcolors.to_rgba(color))\n            fcolors = None\n\n        cmap = kwargs.get('cmap', None)\n        shade = kwargs.pop('shade', cmap is None)\n        if shade is None:\n            cbook.warn_deprecated(\n                \"3.1\",\n                message=\"Passing shade=None to Axes3D.plot_surface() is \"\n                        \"deprecated since matplotlib 3.1 and will change its \"\n                        \"semantic or raise an error in matplotlib 3.3. \"\n                        \"Please use shade=False instead.\")\n\n        colset = []  # the sampled facecolor\n        if (rows - 1) % rstride == 0 and \\\n           (cols - 1) % cstride == 0 and \\\n           fcolors is None:\n            polys = np.stack(\n                [cbook._array_patch_perimeters(a, rstride, cstride)\n                 for a in (X, Y, Z)],\n                axis=-1)\n        else:\n            # evenly spaced, and including both endpoints\n            row_inds = list(range(0, rows-1, rstride)) + [rows-1]\n            col_inds = list(range(0, cols-1, cstride)) + [cols-1]\n\n            polys = []\n            for rs, rs_next in zip(row_inds[:-1], row_inds[1:]):\n                for cs, cs_next in zip(col_inds[:-1], col_inds[1:]):\n                    ps = [\n                        # +1 ensures we share edges between polygons\n                        cbook._array_perimeter(a[rs:rs_next+1, cs:cs_next+1])\n                        for a in (X, Y, Z)\n                    ]\n                    # ps = np.stack(ps, axis=-1)\n                    ps = np.array(ps).T\n                    polys.append(ps)\n\n                    if fcolors is not None:\n                        colset.append(fcolors[rs][cs])\n\n        # note that the striding causes some polygons to have more coordinates\n        # than others\n        polyc = art3d.Poly3DCollection(polys, *args, **kwargs)\n\n        if fcolors is not None:\n            if shade:\n                colset = self._shade_colors(\n                    colset, self._generate_normals(polys), lightsource)\n            polyc.set_facecolors(colset)\n            polyc.set_edgecolors(colset)\n        elif cmap:\n            # can't always vectorize, because polys might be jagged\n            if isinstance(polys, np.ndarray):\n                avg_z = polys[..., 2].mean(axis=-1)\n            else:\n                avg_z = np.array([ps[:, 2].mean() for ps in polys])\n            polyc.set_array(avg_z)\n            if vmin is not None or vmax is not None:\n                polyc.set_clim(vmin, vmax)\n            if norm is not None:\n                polyc.set_norm(norm)\n        else:\n            if shade:\n                colset = self._shade_colors(\n                    color, self._generate_normals(polys), lightsource)\n            else:\n                colset = color\n            polyc.set_facecolors(colset)\n\n        self.add_collection(polyc)\n        self.auto_scale_xyz(X, Y, Z, had_data)\n\n        return polyc\n\n    def _generate_normals(self, polygons):\n        \"\"\"\n        Compute the normals of a list of polygons.\n\n        Normals point towards the viewer for a face with its vertices in\n        counterclockwise order, following the right hand rule.\n\n        Uses three points equally spaced around the polygon.\n        This normal of course might not make sense for polygons with more than\n        three points not lying in a plane, but it's a plausible and fast\n        approximation.\n\n        Parameters\n        ----------\n        polygons : list of (M_i, 3) array-like, or (..., M, 3) array-like\n            A sequence of polygons to compute normals for, which can have\n            varying numbers of vertices. If the polygons all have the same\n            number of vertices and array is passed, then the operation will\n            be vectorized.\n\n        Returns\n        -------\n        normals : (..., 3) array-like\n            A normal vector estimated for the polygon.\n\n        \"\"\"\n        if isinstance(polygons, np.ndarray):\n            # optimization: polygons all have the same number of points, so can\n            # vectorize\n            n = polygons.shape[-2]\n            i1, i2, i3 = 0, n//3, 2*n//3\n            v1 = polygons[..., i1, :] - polygons[..., i2, :]\n            v2 = polygons[..., i2, :] - polygons[..., i3, :]\n        else:\n            # The subtraction doesn't vectorize because polygons is jagged.\n            v1 = np.empty((len(polygons), 3))\n            v2 = np.empty((len(polygons), 3))\n            for poly_i, ps in enumerate(polygons):\n                n = len(ps)\n                i1, i2, i3 = 0, n//3, 2*n//3\n                v1[poly_i, :] = ps[i1, :] - ps[i2, :]\n                v2[poly_i, :] = ps[i2, :] - ps[i3, :]\n        return np.cross(v1, v2)\n\n    def _shade_colors(self, color, normals, lightsource=None):\n        \"\"\"\n        Shade *color* using normal vectors given by *normals*.\n        *color* can also be an array of the same length as *normals*.\n        \"\"\"\n        if lightsource is None:\n            # chosen for backwards-compatibility\n            lightsource = mcolors.LightSource(azdeg=225, altdeg=19.4712)\n\n        with np.errstate(invalid=\"ignore\"):\n            shade = ((normals / np.linalg.norm(normals, axis=1, keepdims=True))\n                     @ lightsource.direction)\n        mask = ~np.isnan(shade)\n\n        if mask.any():\n            # convert dot product to allowed shading fractions\n            in_norm = mcolors.Normalize(-1, 1)\n            out_norm = mcolors.Normalize(0.3, 1).inverse\n\n            def norm(x):\n                return out_norm(in_norm(x))\n\n            shade[~mask] = 0\n\n            color = mcolors.to_rgba_array(color)\n            # shape of color should be (M, 4) (where M is number of faces)\n            # shape of shade should be (M,)\n            # colors should have final shape of (M, 4)\n            alpha = color[:, 3]\n            colors = norm(shade)[:, np.newaxis] * color\n            colors[:, 3] = alpha\n        else:\n            colors = np.asanyarray(color).copy()\n\n        return colors\n\n    def plot_wireframe(self, X, Y, Z, *args, **kwargs):\n        \"\"\"\n        Plot a 3D wireframe.\n\n        .. note::\n\n           The *rcount* and *ccount* kwargs, which both default to 50,\n           determine the maximum number of samples used in each direction.  If\n           the input data is larger, it will be downsampled (by slicing) to\n           these numbers of points.\n\n        Parameters\n        ----------\n        X, Y, Z : 2D arrays\n            Data values.\n\n        rcount, ccount : int\n            Maximum number of samples used in each direction.  If the input\n            data is larger, it will be downsampled (by slicing) to these\n            numbers of points.  Setting a count to zero causes the data to be\n            not sampled in the corresponding direction, producing a 3D line\n            plot rather than a wireframe plot.  Defaults to 50.\n\n            .. versionadded:: 2.0\n\n        rstride, cstride : int\n            Downsampling stride in each direction.  These arguments are\n            mutually exclusive with *rcount* and *ccount*.  If only one of\n            *rstride* or *cstride* is set, the other defaults to 1.  Setting a\n            stride to zero causes the data to be not sampled in the\n            corresponding direction, producing a 3D line plot rather than a\n            wireframe plot.\n\n            'classic' mode uses a default of ``rstride = cstride = 1`` instead\n            of the new default of ``rcount = ccount = 50``.\n\n        **kwargs\n            Other arguments are forwarded to `.Line3DCollection`.\n        \"\"\"\n\n        had_data = self.has_data()\n        if Z.ndim != 2:\n            raise ValueError(\"Argument Z must be 2-dimensional.\")\n        # FIXME: Support masked arrays\n        X, Y, Z = np.broadcast_arrays(X, Y, Z)\n        rows, cols = Z.shape\n\n        has_stride = 'rstride' in kwargs or 'cstride' in kwargs\n        has_count = 'rcount' in kwargs or 'ccount' in kwargs\n\n        if has_stride and has_count:\n            raise ValueError(\"Cannot specify both stride and count arguments\")\n\n        rstride = kwargs.pop('rstride', 1)\n        cstride = kwargs.pop('cstride', 1)\n        rcount = kwargs.pop('rcount', 50)\n        ccount = kwargs.pop('ccount', 50)\n\n        if rcParams['_internal.classic_mode']:\n            # Strides have priority over counts in classic mode.\n            # So, only compute strides from counts\n            # if counts were explicitly given\n            if has_count:\n                rstride = int(max(np.ceil(rows / rcount), 1)) if rcount else 0\n                cstride = int(max(np.ceil(cols / ccount), 1)) if ccount else 0\n        else:\n            # If the strides are provided then it has priority.\n            # Otherwise, compute the strides from the counts.\n            if not has_stride:\n                rstride = int(max(np.ceil(rows / rcount), 1)) if rcount else 0\n                cstride = int(max(np.ceil(cols / ccount), 1)) if ccount else 0\n\n        # We want two sets of lines, one running along the \"rows\" of\n        # Z and another set of lines running along the \"columns\" of Z.\n        # This transpose will make it easy to obtain the columns.\n        tX, tY, tZ = np.transpose(X), np.transpose(Y), np.transpose(Z)\n\n        if rstride:\n            rii = list(range(0, rows, rstride))\n            # Add the last index only if needed\n            if rows > 0 and rii[-1] != (rows - 1):\n                rii += [rows-1]\n        else:\n            rii = []\n        if cstride:\n            cii = list(range(0, cols, cstride))\n            # Add the last index only if needed\n            if cols > 0 and cii[-1] != (cols - 1):\n                cii += [cols-1]\n        else:\n            cii = []\n\n        if rstride == 0 and cstride == 0:\n            raise ValueError(\"Either rstride or cstride must be non zero\")\n\n        # If the inputs were empty, then just\n        # reset everything.\n        if Z.size == 0:\n            rii = []\n            cii = []\n\n        xlines = [X[i] for i in rii]\n        ylines = [Y[i] for i in rii]\n        zlines = [Z[i] for i in rii]\n\n        txlines = [tX[i] for i in cii]\n        tylines = [tY[i] for i in cii]\n        tzlines = [tZ[i] for i in cii]\n\n        lines = ([list(zip(xl, yl, zl))\n                 for xl, yl, zl in zip(xlines, ylines, zlines)]\n                 + [list(zip(xl, yl, zl))\n                 for xl, yl, zl in zip(txlines, tylines, tzlines)])\n\n        linec = art3d.Line3DCollection(lines, *args, **kwargs)\n        self.add_collection(linec)\n        self.auto_scale_xyz(X, Y, Z, had_data)\n\n        return linec\n\n    def plot_trisurf(self, *args, color=None, norm=None, vmin=None, vmax=None,\n                     lightsource=None, **kwargs):\n        \"\"\"\n        Plot a triangulated surface.\n\n        The (optional) triangulation can be specified in one of two ways;\n        either::\n\n          plot_trisurf(triangulation, ...)\n\n        where triangulation is a `~matplotlib.tri.Triangulation` object, or::\n\n          plot_trisurf(X, Y, ...)\n          plot_trisurf(X, Y, triangles, ...)\n          plot_trisurf(X, Y, triangles=triangles, ...)\n\n        in which case a Triangulation object will be created.  See\n        `.Triangulation` for a explanation of these possibilities.\n\n        The remaining arguments are::\n\n          plot_trisurf(..., Z)\n\n        where *Z* is the array of values to contour, one per point\n        in the triangulation.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            Data values as 1D arrays.\n        color\n            Color of the surface patches.\n        cmap\n            A colormap for the surface patches.\n        norm : Normalize\n            An instance of Normalize to map values to colors.\n        vmin, vmax : float, default: None\n            Minimum and maximum value to map.\n        shade : bool, default: True\n            Whether to shade the facecolors.  Shading is always disabled when\n            *cmap* is specified.\n        lightsource : `~matplotlib.colors.LightSource`\n            The lightsource to use when *shade* is True.\n        **kwargs\n            All other arguments are passed on to\n            :class:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`\n\n        Examples\n        --------\n        .. plot:: gallery/mplot3d/trisurf3d.py\n        .. plot:: gallery/mplot3d/trisurf3d_2.py\n\n        .. versionadded:: 1.2.0\n        \"\"\"\n\n        had_data = self.has_data()\n\n        # TODO: Support custom face colours\n        if color is None:\n            color = self._get_lines.get_next_color()\n        color = np.array(mcolors.to_rgba(color))\n\n        cmap = kwargs.get('cmap', None)\n        shade = kwargs.pop('shade', cmap is None)\n\n        tri, args, kwargs = \\\n            Triangulation.get_from_args_and_kwargs(*args, **kwargs)\n        try:\n            z = kwargs.pop('Z')\n        except KeyError:\n            # We do this so Z doesn't get passed as an arg to PolyCollection\n            z, *args = args\n        z = np.asarray(z)\n\n        triangles = tri.get_masked_triangles()\n        xt = tri.x[triangles]\n        yt = tri.y[triangles]\n        zt = z[triangles]\n        verts = np.stack((xt, yt, zt), axis=-1)\n\n        polyc = art3d.Poly3DCollection(verts, *args, **kwargs)\n\n        if cmap:\n            # average over the three points of each triangle\n            avg_z = verts[:, :, 2].mean(axis=1)\n            polyc.set_array(avg_z)\n            if vmin is not None or vmax is not None:\n                polyc.set_clim(vmin, vmax)\n            if norm is not None:\n                polyc.set_norm(norm)\n        else:\n            if shade:\n                normals = self._generate_normals(verts)\n                colset = self._shade_colors(color, normals, lightsource)\n            else:\n                colset = color\n            polyc.set_facecolors(colset)\n\n        self.add_collection(polyc)\n        self.auto_scale_xyz(tri.x, tri.y, z, had_data)\n\n        return polyc\n\n    def _3d_extend_contour(self, cset, stride=5):\n        \"\"\"\n        Extend a contour in 3D by creating\n        \"\"\"\n\n        levels = cset.levels\n        colls = cset.collections\n        dz = (levels[1] - levels[0]) / 2\n\n        for z, linec in zip(levels, colls):\n            paths = linec.get_paths()\n            if not paths:\n                continue\n            topverts = art3d._paths_to_3d_segments(paths, z - dz)\n            botverts = art3d._paths_to_3d_segments(paths, z + dz)\n\n            color = linec.get_color()[0]\n\n            polyverts = []\n            normals = []\n            nsteps = round(len(topverts[0]) / stride)\n            if nsteps <= 1:\n                if len(topverts[0]) > 1:\n                    nsteps = 2\n                else:\n                    continue\n\n            stepsize = (len(topverts[0]) - 1) / (nsteps - 1)\n            for i in range(int(round(nsteps)) - 1):\n                i1 = int(round(i * stepsize))\n                i2 = int(round((i + 1) * stepsize))\n                polyverts.append([topverts[0][i1],\n                                  topverts[0][i2],\n                                  botverts[0][i2],\n                                  botverts[0][i1]])\n\n            # all polygons have 4 vertices, so vectorize\n            polyverts = np.array(polyverts)\n            normals = self._generate_normals(polyverts)\n\n            colors = self._shade_colors(color, normals)\n            colors2 = self._shade_colors(color, normals)\n            polycol = art3d.Poly3DCollection(polyverts,\n                                             facecolors=colors,\n                                             edgecolors=colors2)\n            polycol.set_sort_zpos(z)\n            self.add_collection3d(polycol)\n\n        for col in colls:\n            self.collections.remove(col)\n\n    def add_contour_set(\n            self, cset, extend3d=False, stride=5, zdir='z', offset=None):\n        zdir = '-' + zdir\n        if extend3d:\n            self._3d_extend_contour(cset, stride)\n        else:\n            for z, linec in zip(cset.levels, cset.collections):\n                if offset is not None:\n                    z = offset\n                art3d.line_collection_2d_to_3d(linec, z, zdir=zdir)\n\n    def add_contourf_set(self, cset, zdir='z', offset=None):\n        zdir = '-' + zdir\n        for z, linec in zip(cset.levels, cset.collections):\n            if offset is not None:\n                z = offset\n            art3d.poly_collection_2d_to_3d(linec, z, zdir=zdir)\n            linec.set_sort_zpos(z)\n\n    def contour(self, X, Y, Z, *args,\n                extend3d=False, stride=5, zdir='z', offset=None, **kwargs):\n        \"\"\"\n        Create a 3D contour plot.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            Input data.\n        extend3d : bool, default: False\n            Whether to extend contour in 3D.\n        stride : int\n            Step size for extending contour.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            The direction to use.\n        offset : float, optional\n            If specified, plot a projection of the contour lines at this\n            position in a plane normal to zdir.\n        *args, **kwargs\n            Other arguments are forwarded to `matplotlib.axes.Axes.contour`.\n\n        Returns\n        -------\n        matplotlib.contour.QuadContourSet\n        \"\"\"\n        had_data = self.has_data()\n\n        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)\n        cset = super().contour(jX, jY, jZ, *args, **kwargs)\n        self.add_contour_set(cset, extend3d, stride, zdir, offset)\n\n        self.auto_scale_xyz(X, Y, Z, had_data)\n        return cset\n\n    contour3D = contour\n\n    def tricontour(self, *args,\n                   extend3d=False, stride=5, zdir='z', offset=None, **kwargs):\n        \"\"\"\n        Create a 3D contour plot.\n\n        .. versionchanged:: 1.3.0\n            Added support for custom triangulations\n\n        .. note::\n            This method currently produces incorrect output due to a\n            longstanding bug in 3D PolyCollection rendering.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            Input data.\n        extend3d : bool, default: False\n            Whether to extend contour in 3D.\n        stride : int\n            Step size for extending contour.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            The direction to use.\n        offset : float, optional\n            If specified, plot a projection of the contour lines at this\n            position in a plane normal to zdir.\n        *args, **kwargs\n            Other arguments are forwarded to `matplotlib.axes.Axes.tricontour`.\n\n        Returns\n        -------\n        matplotlib.tri.tricontour.TriContourSet\n        \"\"\"\n        had_data = self.has_data()\n\n        tri, args, kwargs = Triangulation.get_from_args_and_kwargs(\n                *args, **kwargs)\n        X = tri.x\n        Y = tri.y\n        if 'Z' in kwargs:\n            Z = kwargs.pop('Z')\n        else:\n            # We do this so Z doesn't get passed as an arg to Axes.tricontour\n            Z, *args = args\n\n        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)\n        tri = Triangulation(jX, jY, tri.triangles, tri.mask)\n\n        cset = super().tricontour(tri, jZ, *args, **kwargs)\n        self.add_contour_set(cset, extend3d, stride, zdir, offset)\n\n        self.auto_scale_xyz(X, Y, Z, had_data)\n        return cset\n\n    def contourf(self, X, Y, Z, *args, zdir='z', offset=None, **kwargs):\n        \"\"\"\n        Create a 3D filled contour plot.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            Input data.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            The direction to use.\n        offset : float, optional\n            If specified, plot a projection of the contour lines at this\n            position in a plane normal to zdir.\n        *args, **kwargs\n            Other arguments are forwarded to `matplotlib.axes.Axes.contourf`.\n\n        Returns\n        -------\n        matplotlib.contour.QuadContourSet\n\n        Notes\n        -----\n        .. versionadded:: 1.1.0\n            The *zdir* and *offset* parameters.\n        \"\"\"\n        had_data = self.has_data()\n\n        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)\n        cset = super().contourf(jX, jY, jZ, *args, **kwargs)\n        self.add_contourf_set(cset, zdir, offset)\n\n        self.auto_scale_xyz(X, Y, Z, had_data)\n        return cset\n\n    contourf3D = contourf\n\n    def tricontourf(self, *args, zdir='z', offset=None, **kwargs):\n        \"\"\"\n        Create a 3D filled contour plot.\n\n        .. note::\n            This method currently produces incorrect output due to a\n            longstanding bug in 3D PolyCollection rendering.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            Input data.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            The direction to use.\n        offset : float, optional\n            If specified, plot a projection of the contour lines at this\n            position in a plane normal to zdir.\n        *args, **kwargs\n            Other arguments are forwarded to\n            `matplotlib.axes.Axes.tricontourf`.\n\n        Returns\n        -------\n        matplotlib.tri.tricontour.TriContourSet\n\n        Notes\n        -----\n        .. versionadded:: 1.1.0\n            The *zdir* and *offset* parameters.\n        .. versionchanged:: 1.3.0\n            Added support for custom triangulations\n        \"\"\"\n        had_data = self.has_data()\n\n        tri, args, kwargs = Triangulation.get_from_args_and_kwargs(\n                *args, **kwargs)\n        X = tri.x\n        Y = tri.y\n        if 'Z' in kwargs:\n            Z = kwargs.pop('Z')\n        else:\n            # We do this so Z doesn't get passed as an arg to Axes.tricontourf\n            Z, *args = args\n\n        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)\n        tri = Triangulation(jX, jY, tri.triangles, tri.mask)\n\n        cset = super().tricontourf(tri, jZ, *args, **kwargs)\n        self.add_contourf_set(cset, zdir, offset)\n\n        self.auto_scale_xyz(X, Y, Z, had_data)\n        return cset\n\n    def add_collection3d(self, col, zs=0, zdir='z'):\n        \"\"\"\n        Add a 3D collection object to the plot.\n\n        2D collection types are converted to a 3D version by\n        modifying the object and adding z coordinate information.\n\n        Supported are:\n\n        - PolyCollection\n        - LineCollection\n        - PatchCollection\n        \"\"\"\n        zvals = np.atleast_1d(zs)\n        zsortval = (np.min(zvals) if zvals.size\n                    else 0)  # FIXME: arbitrary default\n\n        # FIXME: use issubclass() (although, then a 3D collection\n        #       object would also pass.)  Maybe have a collection3d\n        #       abstract class to test for and exclude?\n        if type(col) is mcoll.PolyCollection:\n            art3d.poly_collection_2d_to_3d(col, zs=zs, zdir=zdir)\n            col.set_sort_zpos(zsortval)\n        elif type(col) is mcoll.LineCollection:\n            art3d.line_collection_2d_to_3d(col, zs=zs, zdir=zdir)\n            col.set_sort_zpos(zsortval)\n        elif type(col) is mcoll.PatchCollection:\n            art3d.patch_collection_2d_to_3d(col, zs=zs, zdir=zdir)\n            col.set_sort_zpos(zsortval)\n\n        collection = super().add_collection(col)\n        return collection\n\n    def scatter(self, xs, ys, zs=0, zdir='z', s=20, c=None, depthshade=True,\n                *args, **kwargs):\n        \"\"\"\n        Create a scatter plot.\n\n        Parameters\n        ----------\n        xs, ys : array-like\n             The data positions.\n        zs : float or array-like, default: 0\n            The z-positions. Either an array of the same length as *xs* and\n            *ys* or a single value to place all points in the same plane.\n        zdir : {'x', 'y', 'z', '-x', '-y', '-z'}, default: 'z'\n            The axis direction for the *zs*. This is useful when plotting 2D\n            data on a 3D Axes. The data must be passed as *xs*, *ys*. Setting\n            *zdir* to 'y' then plots the data to the x-z-plane.\n\n            See also :doc:`/gallery/mplot3d/2dcollections3d`.\n\n        s : float or array-like, default: 20\n            The marker size in points**2. Either an array of the same length\n            as *xs* and *ys* or a single value to make all markers the same\n            size.\n        c : color, sequence, or sequence of colors, optional\n            The marker color. Possible values:\n\n            - A single color format string.\n            - A sequence of colors of length n.\n            - A sequence of n numbers to be mapped to colors using *cmap* and\n              *norm*.\n            - A 2D array in which the rows are RGB or RGBA.\n\n            For more details see the *c* argument of `~.axes.Axes.scatter`.\n        depthshade : bool, default: True\n            Whether to shade the scatter markers to give the appearance of\n            depth. Each call to ``scatter()`` will perform its depthshading\n            independently.\n        **kwargs\n            All other arguments are passed on to `~.axes.Axes.scatter`.\n\n        Returns\n        -------\n        paths : `~matplotlib.collections.PathCollection`\n        \"\"\"\n\n        had_data = self.has_data()\n        zs_orig = zs\n\n        xs, ys, zs = np.broadcast_arrays(\n            *[np.ravel(np.ma.filled(t, np.nan)) for t in [xs, ys, zs]])\n        s = np.ma.ravel(s)  # This doesn't have to match x, y in size.\n\n        xs, ys, zs, s, c = cbook.delete_masked_points(xs, ys, zs, s, c)\n\n        # For xs and ys, 2D scatter() will do the copying.\n        if np.may_share_memory(zs_orig, zs):  # Avoid unnecessary copies.\n            zs = zs.copy()\n\n        patches = super().scatter(xs, ys, s=s, c=c, *args, **kwargs)\n        art3d.patch_collection_2d_to_3d(patches, zs=zs, zdir=zdir,\n                                        depthshade=depthshade)\n\n        if self._zmargin < 0.05 and xs.size > 0:\n            self.set_zmargin(0.05)\n\n        self.auto_scale_xyz(xs, ys, zs, had_data)\n\n        return patches\n\n    scatter3D = scatter\n\n    def bar(self, left, height, zs=0, zdir='z', *args, **kwargs):\n        \"\"\"\n        Add 2D bar(s).\n\n        Parameters\n        ----------\n        left : 1D array-like\n            The x coordinates of the left sides of the bars.\n        height : 1D array-like\n            The height of the bars.\n        zs : float or 1D array-like\n            Z coordinate of bars; if a single value is specified, it will be\n            used for all bars.\n        zdir : {'x', 'y', 'z'}, default: 'z'\n            When plotting 2D data, the direction to use as z ('x', 'y' or 'z').\n        **kwargs\n            Other arguments are forwarded to `matplotlib.axes.Axes.bar`.\n\n        Returns\n        -------\n        mpl_toolkits.mplot3d.art3d.Patch3DCollection\n        \"\"\"\n        had_data = self.has_data()\n\n        patches = super().bar(left, height, *args, **kwargs)\n\n        zs = np.broadcast_to(zs, len(left))\n\n        verts = []\n        verts_zs = []\n        for p, z in zip(patches, zs):\n            vs = art3d._get_patch_verts(p)\n            verts += vs.tolist()\n            verts_zs += [z] * len(vs)\n            art3d.patch_2d_to_3d(p, z, zdir)\n            if 'alpha' in kwargs:\n                p.set_alpha(kwargs['alpha'])\n\n        if len(verts) > 0:\n            # the following has to be skipped if verts is empty\n            # NOTE: Bugs could still occur if len(verts) > 0,\n            #       but the \"2nd dimension\" is empty.\n            xs, ys = zip(*verts)\n        else:\n            xs, ys = [], []\n\n        xs, ys, verts_zs = art3d.juggle_axes(xs, ys, verts_zs, zdir)\n        self.auto_scale_xyz(xs, ys, verts_zs, had_data)\n\n        return patches\n\n    def bar3d(self, x, y, z, dx, dy, dz, color=None,\n              zsort='average', shade=True, lightsource=None, *args, **kwargs):\n        \"\"\"\n        Generate a 3D barplot.\n\n        This method creates three dimensional barplot where the width,\n        depth, height, and color of the bars can all be uniquely set.\n\n        Parameters\n        ----------\n        x, y, z : array-like\n            The coordinates of the anchor point of the bars.\n\n        dx, dy, dz : float or array-like\n            The width, depth, and height of the bars, respectively.\n\n        color : sequence of colors, optional\n            The color of the bars can be specified globally or\n            individually. This parameter can be:\n\n            - A single color, to color all bars the same color.\n            - An array of colors of length N bars, to color each bar\n              independently.\n            - An array of colors of length 6, to color the faces of the\n              bars similarly.\n            - An array of colors of length 6 * N bars, to color each face\n              independently.\n\n            When coloring the faces of the boxes specifically, this is\n            the order of the coloring:\n\n            1. -Z (bottom of box)\n            2. +Z (top of box)\n            3. -Y\n            4. +Y\n            5. -X\n            6. +X\n\n        zsort : str, optional\n            The z-axis sorting scheme passed onto `~.art3d.Poly3DCollection`\n\n        shade : bool, default: True\n            When true, this shades the dark sides of the bars (relative\n            to the plot's source of light).\n\n        lightsource : `~matplotlib.colors.LightSource`\n            The lightsource to use when *shade* is True.\n\n        **kwargs\n            Any additional keyword arguments are passed onto\n            `~.art3d.Poly3DCollection`.\n\n        Returns\n        -------\n        collection : `~.art3d.Poly3DCollection`\n            A collection of three dimensional polygons representing\n            the bars.\n        \"\"\"\n\n        had_data = self.has_data()\n\n        x, y, z, dx, dy, dz = np.broadcast_arrays(\n            np.atleast_1d(x), y, z, dx, dy, dz)\n        minx = np.min(x)\n        maxx = np.max(x + dx)\n        miny = np.min(y)\n        maxy = np.max(y + dy)\n        minz = np.min(z)\n        maxz = np.max(z + dz)\n\n        # shape (6, 4, 3)\n        # All faces are oriented facing outwards - when viewed from the\n        # outside, their vertices are in a counterclockwise ordering.\n        cuboid = np.array([\n            # -z\n            (\n                (0, 0, 0),\n                (0, 1, 0),\n                (1, 1, 0),\n                (1, 0, 0),\n            ),\n            # +z\n            (\n                (0, 0, 1),\n                (1, 0, 1),\n                (1, 1, 1),\n                (0, 1, 1),\n            ),\n            # -y\n            (\n                (0, 0, 0),\n                (1, 0, 0),\n                (1, 0, 1),\n                (0, 0, 1),\n            ),\n            # +y\n            (\n                (0, 1, 0),\n                (0, 1, 1),\n                (1, 1, 1),\n                (1, 1, 0),\n            ),\n            # -x\n            (\n                (0, 0, 0),\n                (0, 0, 1),\n                (0, 1, 1),\n                (0, 1, 0),\n            ),\n            # +x\n            (\n                (1, 0, 0),\n                (1, 1, 0),\n                (1, 1, 1),\n                (1, 0, 1),\n            ),\n        ])\n\n        # indexed by [bar, face, vertex, coord]\n        polys = np.empty(x.shape + cuboid.shape)\n\n        # handle each coordinate separately\n        for i, p, dp in [(0, x, dx), (1, y, dy), (2, z, dz)]:\n            p = p[..., np.newaxis, np.newaxis]\n            dp = dp[..., np.newaxis, np.newaxis]\n            polys[..., i] = p + dp * cuboid[..., i]\n\n        # collapse the first two axes\n        polys = polys.reshape((-1,) + polys.shape[2:])\n\n        facecolors = []\n        if color is None:\n            color = [self._get_patches_for_fill.get_next_color()]\n\n        color = list(mcolors.to_rgba_array(color))\n\n        if len(color) == len(x):\n            # bar colors specified, need to expand to number of faces\n            for c in color:\n                facecolors.extend([c] * 6)\n        else:\n            # a single color specified, or face colors specified explicitly\n            facecolors = color\n            if len(facecolors) < len(x):\n                facecolors *= (6 * len(x))\n\n        if shade:\n            normals = self._generate_normals(polys)\n            sfacecolors = self._shade_colors(facecolors, normals, lightsource)\n        else:\n            sfacecolors = facecolors\n\n        col = art3d.Poly3DCollection(polys,\n                                     zsort=zsort,\n                                     facecolor=sfacecolors,\n                                     *args, **kwargs)\n        self.add_collection(col)\n\n        self.auto_scale_xyz((minx, maxx), (miny, maxy), (minz, maxz), had_data)\n\n        return col\n\n    def set_title(self, label, fontdict=None, loc='center', **kwargs):\n        # docstring inherited\n        ret = super().set_title(label, fontdict=fontdict, loc=loc, **kwargs)\n        (x, y) = self.title.get_position()\n        self.title.set_y(0.92 * y)\n        return ret\n\n    def quiver(self, *args,\n               length=1, arrow_length_ratio=.3, pivot='tail', normalize=False,\n               **kwargs):\n        \"\"\"\n        ax.quiver(X, Y, Z, U, V, W, /, length=1, arrow_length_ratio=.3, \\\npivot='tail', normalize=False, **kwargs)\n\n        Plot a 3D field of arrows.\n\n        The arguments could be array-like or scalars, so long as they\n        they can be broadcast together. The arguments can also be\n        masked arrays. If an element in any of argument is masked, then\n        that corresponding quiver element will not be plotted.\n\n        Parameters\n        ----------\n        X, Y, Z : array-like\n            The x, y and z coordinates of the arrow locations (default is\n            tail of arrow; see *pivot* kwarg).\n\n        U, V, W : array-like\n            The x, y and z components of the arrow vectors.\n\n        length : float, default: 1\n            The length of each quiver.\n\n        arrow_length_ratio : float, default: 0.3\n            The ratio of the arrow head with respect to the quiver.\n\n        pivot : {'tail', 'middle', 'tip'}, default: 'tail'\n            The part of the arrow that is at the grid point; the arrow\n            rotates about this point, hence the name *pivot*.\n\n        normalize : bool, default: False\n            Whether all arrows are normalized to have the same length, or keep\n            the lengths defined by *u*, *v*, and *w*.\n\n        **kwargs\n            Any additional keyword arguments are delegated to\n            :class:`~matplotlib.collections.LineCollection`\n        \"\"\"\n\n        def calc_arrows(UVW, angle=15):\n            # get unit direction vector perpendicular to (u, v, w)\n            x = UVW[:, 0]\n            y = UVW[:, 1]\n            norm = np.linalg.norm(UVW[:, :2], axis=1)\n            x_p = np.divide(y, norm, where=norm != 0, out=np.zeros_like(x))\n            y_p = np.divide(-x,  norm, where=norm != 0, out=np.ones_like(x))\n            # compute the two arrowhead direction unit vectors\n            ra = math.radians(angle)\n            c = math.cos(ra)\n            s = math.sin(ra)\n            # construct the rotation matrices of shape (3, 3, n)\n            Rpos = np.array(\n                [[c + (x_p ** 2) * (1 - c), x_p * y_p * (1 - c), y_p * s],\n                 [y_p * x_p * (1 - c), c + (y_p ** 2) * (1 - c), -x_p * s],\n                 [-y_p * s, x_p * s, np.full_like(x_p, c)]])\n            # opposite rotation negates all the sin terms\n            Rneg = Rpos.copy()\n            Rneg[[0, 1, 2, 2], [2, 2, 0, 1]] *= -1\n            # Batch n (3, 3) x (3) matrix multiplications ((3, 3, n) x (n, 3)).\n            Rpos_vecs = np.einsum(\"ij...,...j->...i\", Rpos, UVW)\n            Rneg_vecs = np.einsum(\"ij...,...j->...i\", Rneg, UVW)\n            # Stack into (n, 2, 3) result.\n            head_dirs = np.stack([Rpos_vecs, Rneg_vecs], axis=1)\n            return head_dirs\n\n        had_data = self.has_data()\n\n        # handle args\n        argi = 6\n        if len(args) < argi:\n            raise ValueError('Wrong number of arguments. Expected %d got %d' %\n                             (argi, len(args)))\n\n        # first 6 arguments are X, Y, Z, U, V, W\n        input_args = args[:argi]\n\n        # extract the masks, if any\n        masks = [k.mask for k in input_args\n                 if isinstance(k, np.ma.MaskedArray)]\n        # broadcast to match the shape\n        bcast = np.broadcast_arrays(*input_args, *masks)\n        input_args = bcast[:argi]\n        masks = bcast[argi:]\n        if masks:\n            # combine the masks into one\n            mask = reduce(np.logical_or, masks)\n            # put mask on and compress\n            input_args = [np.ma.array(k, mask=mask).compressed()\n                          for k in input_args]\n        else:\n            input_args = [np.ravel(k) for k in input_args]\n\n        if any(len(v) == 0 for v in input_args):\n            # No quivers, so just make an empty collection and return early\n            linec = art3d.Line3DCollection([], *args[argi:], **kwargs)\n            self.add_collection(linec)\n            return linec\n\n        shaft_dt = np.array([0., length], dtype=float)\n        arrow_dt = shaft_dt * arrow_length_ratio\n\n        _api.check_in_list(['tail', 'middle', 'tip'], pivot=pivot)\n        if pivot == 'tail':\n            shaft_dt -= length\n        elif pivot == 'middle':\n            shaft_dt -= length / 2\n\n        XYZ = np.column_stack(input_args[:3])\n        UVW = np.column_stack(input_args[3:argi]).astype(float)\n\n        # Normalize rows of UVW\n        norm = np.linalg.norm(UVW, axis=1)\n\n        # If any row of UVW is all zeros, don't make a quiver for it\n        mask = norm > 0\n        XYZ = XYZ[mask]\n        if normalize:\n            UVW = UVW[mask] / norm[mask].reshape((-1, 1))\n        else:\n            UVW = UVW[mask]\n\n        if len(XYZ) > 0:\n            # compute the shaft lines all at once with an outer product\n            shafts = (XYZ - np.multiply.outer(shaft_dt, UVW)).swapaxes(0, 1)\n            # compute head direction vectors, n heads x 2 sides x 3 dimensions\n            head_dirs = calc_arrows(UVW)\n            # compute all head lines at once, starting from the shaft ends\n            heads = shafts[:, :1] - np.multiply.outer(arrow_dt, head_dirs)\n            # stack left and right head lines together\n            heads = heads.reshape((len(arrow_dt), -1, 3))\n            # transpose to get a list of lines\n            heads = heads.swapaxes(0, 1)\n\n            lines = [*shafts, *heads]\n        else:\n            lines = []\n\n        linec = art3d.Line3DCollection(lines, *args[argi:], **kwargs)\n        self.add_collection(linec)\n\n        self.auto_scale_xyz(XYZ[:, 0], XYZ[:, 1], XYZ[:, 2], had_data)\n\n        return linec\n\n    quiver3D = quiver\n\n    def voxels(self, *args, facecolors=None, edgecolors=None, shade=True,\n               lightsource=None, **kwargs):\n        \"\"\"\n        ax.voxels([x, y, z,] /, filled, facecolors=None, edgecolors=None, \\\n**kwargs)\n\n        Plot a set of filled voxels\n\n        All voxels are plotted as 1x1x1 cubes on the axis, with\n        ``filled[0, 0, 0]`` placed with its lower corner at the origin.\n        Occluded faces are not plotted.\n\n        .. versionadded:: 2.1\n\n        Parameters\n        ----------\n        filled : 3D np.array of bool\n            A 3D array of values, with truthy values indicating which voxels\n            to fill\n\n        x, y, z : 3D np.array, optional\n            The coordinates of the corners of the voxels. This should broadcast\n            to a shape one larger in every dimension than the shape of\n            *filled*.  These can be used to plot non-cubic voxels.\n\n            If not specified, defaults to increasing integers along each axis,\n            like those returned by :func:`~numpy.indices`.\n            As indicated by the ``/`` in the function signature, these\n            arguments can only be passed positionally.\n\n        facecolors, edgecolors : array-like, optional\n            The color to draw the faces and edges of the voxels. Can only be\n            passed as keyword arguments.\n            These parameters can be:\n\n            - A single color value, to color all voxels the same color. This\n              can be either a string, or a 1D rgb/rgba array\n            - ``None``, the default, to use a single color for the faces, and\n              the style default for the edges.\n            - A 3D ndarray of color names, with each item the color for the\n              corresponding voxel. The size must match the voxels.\n            - A 4D ndarray of rgb/rgba data, with the components along the\n              last axis.\n\n        shade : bool, default: True\n            Whether to shade the facecolors.  Shading is always disabled when\n            *cmap* is specified.\n\n            .. versionadded:: 3.1\n\n        lightsource : `~matplotlib.colors.LightSource`\n            The lightsource to use when *shade* is True.\n\n            .. versionadded:: 3.1\n\n        **kwargs\n            Additional keyword arguments to pass onto\n            `~mpl_toolkits.mplot3d.art3d.Poly3DCollection`.\n\n        Returns\n        -------\n        faces : dict\n            A dictionary indexed by coordinate, where ``faces[i, j, k]`` is a\n            `.Poly3DCollection` of the faces drawn for the voxel\n            ``filled[i, j, k]``. If no faces were drawn for a given voxel,\n            either because it was not asked to be drawn, or it is fully\n            occluded, then ``(i, j, k) not in faces``.\n\n        Examples\n        --------\n        .. plot:: gallery/mplot3d/voxels.py\n        .. plot:: gallery/mplot3d/voxels_rgb.py\n        .. plot:: gallery/mplot3d/voxels_torus.py\n        .. plot:: gallery/mplot3d/voxels_numpy_logo.py\n        \"\"\"\n\n        # work out which signature we should be using, and use it to parse\n        # the arguments. Name must be voxels for the correct error message\n        if len(args) >= 3:\n            # underscores indicate position only\n            def voxels(__x, __y, __z, filled, **kwargs):\n                return (__x, __y, __z), filled, kwargs\n        else:\n            def voxels(filled, **kwargs):\n                return None, filled, kwargs\n\n        xyz, filled, kwargs = voxels(*args, **kwargs)\n\n        # check dimensions\n        if filled.ndim != 3:\n            raise ValueError(\"Argument filled must be 3-dimensional\")\n        size = np.array(filled.shape, dtype=np.intp)\n\n        # check xyz coordinates, which are one larger than the filled shape\n        coord_shape = tuple(size + 1)\n        if xyz is None:\n            x, y, z = np.indices(coord_shape)\n        else:\n            x, y, z = (np.broadcast_to(c, coord_shape) for c in xyz)\n\n        def _broadcast_color_arg(color, name):\n            if np.ndim(color) in (0, 1):\n                # single color, like \"red\" or [1, 0, 0]\n                return np.broadcast_to(color, filled.shape + np.shape(color))\n            elif np.ndim(color) in (3, 4):\n                # 3D array of strings, or 4D array with last axis rgb\n                if np.shape(color)[:3] != filled.shape:\n                    raise ValueError(\n                        \"When multidimensional, {} must match the shape of \"\n                        \"filled\".format(name))\n                return color\n            else:\n                raise ValueError(\"Invalid {} argument\".format(name))\n\n        # broadcast and default on facecolors\n        if facecolors is None:\n            facecolors = self._get_patches_for_fill.get_next_color()\n        facecolors = _broadcast_color_arg(facecolors, 'facecolors')\n\n        # broadcast but no default on edgecolors\n        edgecolors = _broadcast_color_arg(edgecolors, 'edgecolors')\n\n        # scale to the full array, even if the data is only in the center\n        self.auto_scale_xyz(x, y, z)\n\n        # points lying on corners of a square\n        square = np.array([\n            [0, 0, 0],\n            [1, 0, 0],\n            [1, 1, 0],\n            [0, 1, 0],\n        ], dtype=np.intp)\n\n        voxel_faces = defaultdict(list)\n\n        def permutation_matrices(n):\n            \"\"\"Generate cyclic permutation matrices.\"\"\"\n            mat = np.eye(n, dtype=np.intp)\n            for i in range(n):\n                yield mat\n                mat = np.roll(mat, 1, axis=0)\n\n        # iterate over each of the YZ, ZX, and XY orientations, finding faces\n        # to render\n        for permute in permutation_matrices(3):\n            # find the set of ranges to iterate over\n            pc, qc, rc = permute.T.dot(size)\n            pinds = np.arange(pc)\n            qinds = np.arange(qc)\n            rinds = np.arange(rc)\n\n            square_rot_pos = square.dot(permute.T)\n            square_rot_neg = square_rot_pos[::-1]\n\n            # iterate within the current plane\n            for p in pinds:\n                for q in qinds:\n                    # iterate perpendicularly to the current plane, handling\n                    # boundaries. We only draw faces between a voxel and an\n                    # empty space, to avoid drawing internal faces.\n\n                    # draw lower faces\n                    p0 = permute.dot([p, q, 0])\n                    i0 = tuple(p0)\n                    if filled[i0]:\n                        voxel_faces[i0].append(p0 + square_rot_neg)\n\n                    # draw middle faces\n                    for r1, r2 in zip(rinds[:-1], rinds[1:]):\n                        p1 = permute.dot([p, q, r1])\n                        p2 = permute.dot([p, q, r2])\n\n                        i1 = tuple(p1)\n                        i2 = tuple(p2)\n\n                        if filled[i1] and not filled[i2]:\n                            voxel_faces[i1].append(p2 + square_rot_pos)\n                        elif not filled[i1] and filled[i2]:\n                            voxel_faces[i2].append(p2 + square_rot_neg)\n\n                    # draw upper faces\n                    pk = permute.dot([p, q, rc-1])\n                    pk2 = permute.dot([p, q, rc])\n                    ik = tuple(pk)\n                    if filled[ik]:\n                        voxel_faces[ik].append(pk2 + square_rot_pos)\n\n        # iterate over the faces, and generate a Poly3DCollection for each\n        # voxel\n        polygons = {}\n        for coord, faces_inds in voxel_faces.items():\n            # convert indices into 3D positions\n            if xyz is None:\n                faces = faces_inds\n            else:\n                faces = []\n                for face_inds in faces_inds:\n                    ind = face_inds[:, 0], face_inds[:, 1], face_inds[:, 2]\n                    face = np.empty(face_inds.shape)\n                    face[:, 0] = x[ind]\n                    face[:, 1] = y[ind]\n                    face[:, 2] = z[ind]\n                    faces.append(face)\n\n            # shade the faces\n            facecolor = facecolors[coord]\n            edgecolor = edgecolors[coord]\n            if shade:\n                normals = self._generate_normals(faces)\n                facecolor = self._shade_colors(facecolor, normals, lightsource)\n                if edgecolor is not None:\n                    edgecolor = self._shade_colors(\n                        edgecolor, normals, lightsource\n                    )\n\n            poly = art3d.Poly3DCollection(\n                faces, facecolors=facecolor, edgecolors=edgecolor, **kwargs)\n            self.add_collection3d(poly)\n            polygons[coord] = poly\n\n        return polygons\n\n    def errorbar(self, x, y, z, zerr=None, yerr=None, xerr=None, fmt='',\n                 barsabove=False, errorevery=1, ecolor=None, elinewidth=None,\n                 capsize=None, capthick=None, xlolims=False, xuplims=False,\n                 ylolims=False, yuplims=False, zlolims=False, zuplims=False,\n                 arrow_length_ratio=.4, **kwargs):\n        \"\"\"\n        Plot lines and/or markers with errorbars around them.\n\n        *x*/*y*/*z* define the data locations, and *xerr*/*yerr*/*zerr* define\n        the errorbar sizes. By default, this draws the data markers/lines as\n        well the errorbars. Use fmt='none' to draw errorbars only.\n\n        Parameters\n        ----------\n        x, y, z : float or array-like\n            The data positions.\n\n        xerr, yerr, zerr : float or array-like, shape (N,) or (2, N), optional\n            The errorbar sizes:\n\n            - scalar: Symmetric +/- values for all data points.\n            - shape(N,): Symmetric +/-values for each data point.\n            - shape(2, N): Separate - and + values for each bar. First row\n              contains the lower errors, the second row contains the upper\n              errors.\n            - *None*: No errorbar.\n\n            Note that all error arrays should have *positive* values.\n\n        fmt : str, default: ''\n            The format for the data points / data lines. See `.plot` for\n            details.\n\n            Use 'none' (case insensitive) to plot errorbars without any data\n            markers.\n\n        ecolor : color, default: None\n            The color of the errorbar lines.  If None, use the color of the\n            line connecting the markers.\n\n        elinewidth : float, default: None\n            The linewidth of the errorbar lines. If None, the linewidth of\n            the current style is used.\n\n        capsize : float, default: :rc:`errorbar.capsize`\n            The length of the error bar caps in points.\n\n        capthick : float, default: None\n            An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n            This setting is a more sensible name for the property that\n            controls the thickness of the error bar cap in points. For\n            backwards compatibility, if *mew* or *markeredgewidth* are given,\n            then they will over-ride *capthick*. This may change in future\n            releases.\n\n        barsabove : bool, default: False\n            If True, will plot the errorbars above the plot\n            symbols. Default is below.\n\n        xlolims, ylolims, zlolims : bool, default: False\n            These arguments can be used to indicate that a value gives only\n            lower limits. In that case a caret symbol is used to indicate\n            this. *lims*-arguments may be scalars, or array-likes of the same\n            length as the errors. To use limits with inverted axes,\n            `~.Axes.set_xlim` or `~.Axes.set_ylim` must be called before\n            :meth:`errorbar`. Note the tricky parameter names: setting e.g.\n            *ylolims* to True means that the y-value is a *lower* limit of the\n            True value, so, only an *upward*-pointing arrow will be drawn!\n\n        xuplims, yuplims, zuplims : bool, default: False\n            Same as above, but for controlling the upper limits.\n\n        errorevery : int or (int, int), default: 1\n            draws error bars on a subset of the data. *errorevery* =N draws\n            error bars on the points (x[::N], y[::N], z[::N]).\n            *errorevery* =(start, N) draws error bars on the points\n            (x[start::N], y[start::N], z[start::N]). e.g. errorevery=(6, 3)\n            adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n            Used to avoid overlapping error bars when two series share x-axis\n            values.\n\n        arrow_length_ratio : float, default: 0.4\n            Passed to :meth:`quiver`, the ratio of the arrow head with respect\n            to the quiver.\n\n        Returns\n        -------\n        errlines : list\n            List of `~mpl_toolkits.mplot3d.art3d.Line3DCollection` instances\n            each containing an errorbar line.\n        caplines : list\n            List of `~mpl_toolkits.mplot3d.art3d.Line3D` instances each\n            containing a capline object.\n        limmarks : list\n            List of `~mpl_toolkits.mplot3d.art3d.Line3D` instances each\n            containing a marker with an upper or lower limit.\n\n        Other Parameters\n        ----------------\n        **kwargs\n            All other keyword arguments for styling errorbar lines are passed\n            `~mpl_toolkits.mplot3d.art3d.Line3DCollection`.\n\n        Examples\n        --------\n        .. plot:: gallery/mplot3d/errorbar3d.py\n        \"\"\"\n        had_data = self.has_data()\n\n        plot_line = (fmt.lower() != 'none')\n        label = kwargs.pop(\"label\", None)\n\n        if fmt == '':\n            fmt_style_kwargs = {}\n        else:\n            fmt_style_kwargs = {k: v for k, v in\n                                zip(('linestyle', 'marker', 'color'),\n                                    _process_plot_format(fmt))\n                                if v is not None}\n\n        if fmt == 'none':\n            # Remove alpha=0 color that _process_plot_format returns\n            fmt_style_kwargs.pop('color')\n\n        if ('color' in kwargs or 'color' in fmt_style_kwargs):\n            base_style = {}\n            if 'color' in kwargs:\n                base_style['color'] = kwargs.pop('color')\n        else:\n            base_style = next(self._get_lines.prop_cycler)\n\n        base_style['label'] = '_nolegend_'\n        base_style.update(fmt_style_kwargs)\n        if 'color' not in base_style:\n            base_style['color'] = 'C0'\n        if ecolor is None:\n            ecolor = base_style['color']\n\n        # make sure all the args are iterable; use lists not arrays to\n        # preserve units\n        x = x if np.iterable(x) else [x]\n        y = y if np.iterable(y) else [y]\n        z = z if np.iterable(z) else [z]\n\n        if not len(x) == len(y) == len(z):\n            raise ValueError(\"'x', 'y', and 'z' must have the same size\")\n\n        # make the style dict for the 'normal' plot line\n        if 'zorder' not in kwargs:\n            kwargs['zorder'] = 2\n        plot_line_style = {\n            **base_style,\n            **kwargs,\n            'zorder': (kwargs['zorder'] - .1 if barsabove else\n                       kwargs['zorder'] + .1),\n        }\n\n        # make the style dict for the line collections (the bars)\n        eb_lines_style = dict(base_style)\n        eb_lines_style.pop('marker', None)\n        eb_lines_style.pop('markerfacecolor', None)\n        eb_lines_style.pop('markeredgewidth', None)\n        eb_lines_style.pop('markeredgecolor', None)\n        eb_lines_style.pop('linestyle', None)\n        eb_lines_style['color'] = ecolor\n\n        if elinewidth:\n            eb_lines_style['linewidth'] = elinewidth\n        elif 'linewidth' in kwargs:\n            eb_lines_style['linewidth'] = kwargs['linewidth']\n\n        for key in ('transform', 'alpha', 'zorder', 'rasterized'):\n            if key in kwargs:\n                eb_lines_style[key] = kwargs[key]\n\n        # make the style dict for cap collections (the \"hats\")\n        eb_cap_style = dict(base_style)\n        # eject any marker information from format string\n        eb_cap_style.pop('marker', None)\n        eb_cap_style.pop('ls', None)\n        eb_cap_style['linestyle'] = 'none'\n        if capsize is None:\n            capsize = kwargs.pop('capsize', rcParams[\"errorbar.capsize\"])\n        if capsize > 0:\n            eb_cap_style['markersize'] = 2. * capsize\n        if capthick is not None:\n            eb_cap_style['markeredgewidth'] = capthick\n        eb_cap_style['color'] = ecolor\n\n        if plot_line:\n            data_line = art3d.Line3D(x, y, z, **plot_line_style)\n            self.add_line(data_line)\n\n        try:\n            offset, errorevery = errorevery\n        except TypeError:\n            offset = 0\n\n        if errorevery < 1 or int(errorevery) != errorevery:\n            raise ValueError(\n                'errorevery must be positive integer or tuple of integers')\n        if int(offset) != offset:\n            raise ValueError(\"errorevery's starting index must be an integer\")\n\n        everymask = np.zeros(len(x), bool)\n        everymask[offset::errorevery] = True\n\n        def _apply_mask(arrays, mask):\n            # Return, for each array in *arrays*, the elements for which *mask*\n            # is True, without using fancy indexing.\n            return [[*compress(array, mask)] for array in arrays]\n\n        def _extract_errs(err, data, lomask, himask):\n            # For separate +/- error values we need to unpack err\n            if len(err.shape) == 2:\n                low_err, high_err = err\n            else:\n                low_err, high_err = err, err\n\n            # for compatibility with the 2d errorbar function, when both upper\n            # and lower limits specified, we need to draw the markers / line\n            common_mask = (lomask == himask) & everymask\n            _lomask = lomask | common_mask\n            _himask = himask | common_mask\n\n            lows = np.where(_lomask, data - low_err, data)\n            highs = np.where(_himask, data + high_err, data)\n\n            return lows, highs\n\n        # collect drawn items while looping over the three coordinates\n        errlines, caplines, limmarks = [], [], []\n\n        # list of endpoint coordinates, used for auto-scaling\n        coorderrs = []\n\n        # define the markers used for errorbar caps and limits below\n        # the dictionary key is mapped by the `i_xyz` helper dictionary\n        capmarker = {0: '|', 1: '|', 2: '_'}\n        i_xyz = {'x': 0, 'y': 1, 'z': 2}\n\n        # loop over x-, y-, and z-direction and draw relevant elements\n        for zdir, data, err, lolims, uplims in zip(\n                ['x', 'y', 'z'], [x, y, z], [xerr, yerr, zerr],\n                [xlolims, ylolims, zlolims], [xuplims, yuplims, zuplims]):\n\n            dir_vector = art3d.get_dir_vector(zdir)\n            i_zdir = i_xyz[zdir]\n\n            if err is None:\n                continue\n\n            if not np.iterable(err):\n                err = [err] * len(data)\n\n            err = np.atleast_1d(err)\n\n            # arrays fine here, they are booleans and hence not units\n            lolims = np.broadcast_to(lolims, len(data)).astype(bool)\n            uplims = np.broadcast_to(uplims, len(data)).astype(bool)\n\n            nolims = ~(lolims | uplims)\n\n            # a nested list structure that expands to (xl,xh),(yl,yh),(zl,zh),\n            # where x/y/z and l/h correspond to dimensions and low/high\n            # positions of errorbars in a dimension we're looping over\n            coorderr = [\n                _extract_errs(err * dir_vector[i], coord,\n                              ~lolims & everymask, ~uplims & everymask)\n                for i, coord in enumerate([x, y, z])]\n            (xl, xh), (yl, yh), (zl, zh) = coorderr\n\n            # draws capmarkers - flat caps orthogonal to the error bars\n            if nolims.any() and capsize > 0:\n                lo_caps_xyz = _apply_mask([xl, yl, zl], nolims & everymask)\n                hi_caps_xyz = _apply_mask([xh, yh, zh], nolims & everymask)\n\n                # setting '_' for z-caps and '|' for x- and y-caps;\n                # these markers will rotate as the viewing angle changes\n                cap_lo = art3d.Line3D(*lo_caps_xyz, ls='',\n                                      marker=capmarker[i_zdir],\n                                      **eb_cap_style)\n                cap_hi = art3d.Line3D(*hi_caps_xyz, ls='',\n                                      marker=capmarker[i_zdir],\n                                      **eb_cap_style)\n                self.add_line(cap_lo)\n                self.add_line(cap_hi)\n                caplines.append(cap_lo)\n                caplines.append(cap_hi)\n\n            if (lolims | uplims).any():\n                limits = [\n                    _extract_errs(err*dir_vector[i], coord, uplims, lolims)\n                    for i, coord in enumerate([x, y, z])]\n\n                (xlo, xup), (ylo, yup), (zlo, zup) = limits\n                lomask = lolims & everymask\n                upmask = uplims & everymask\n                lolims_xyz = np.array(_apply_mask([xlo, ylo, zlo], upmask))\n                uplims_xyz = np.array(_apply_mask([xup, yup, zup], lomask))\n                lo_xyz = np.array(_apply_mask([x, y, z], upmask))\n                up_xyz = np.array(_apply_mask([x, y, z], lomask))\n                x0, y0, z0 = np.concatenate([lo_xyz, up_xyz], axis=-1)\n                dx, dy, dz = np.concatenate([lolims_xyz - lo_xyz,\n                                             uplims_xyz - up_xyz], axis=-1)\n                self.quiver(x0, y0, z0, dx, dy, dz,\n                            arrow_length_ratio=arrow_length_ratio,\n                            **eb_lines_style)\n\n            errline = art3d.Line3DCollection(np.array(coorderr).T,\n                                             **eb_lines_style)\n            self.add_collection(errline)\n            errlines.append(errline)\n            coorderrs.append(coorderr)\n\n        coorderrs = np.array(coorderrs)\n\n        def _digout_minmax(err_arr, coord_label):\n            return (np.nanmin(err_arr[:, i_xyz[coord_label], :, :]),\n                    np.nanmax(err_arr[:, i_xyz[coord_label], :, :]))\n\n        minx, maxx = _digout_minmax(coorderrs, 'x')\n        miny, maxy = _digout_minmax(coorderrs, 'y')\n        minz, maxz = _digout_minmax(coorderrs, 'z')\n        self.auto_scale_xyz((minx, maxx), (miny, maxy), (minz, maxz), had_data)\n\n        # Adapting errorbar containers for 3d case, assuming z-axis points \"up\"\n        errorbar_container = mcontainer.ErrorbarContainer(\n            (data_line, tuple(caplines), tuple(errlines)),\n            has_xerr=(xerr is not None or yerr is not None),\n            has_yerr=(zerr is not None),\n            label=label)\n        self.containers.append(errorbar_container)\n\n        return errlines, caplines, limmarks\n\n    def get_tightbbox(self, renderer, call_axes_locator=True,\n                      bbox_extra_artists=None, *, for_layout_only=False):\n        ret = super().get_tightbbox(renderer,\n                                    call_axes_locator=call_axes_locator,\n                                    bbox_extra_artists=bbox_extra_artists,\n                                    for_layout_only=for_layout_only)\n        batch = [ret]\n        if self._axis3don:\n            for axis in self._get_axis_list():\n                if axis.get_visible():\n                    try:\n                        axis_bb = axis.get_tightbbox(\n                            renderer,\n                            for_layout_only=for_layout_only\n                        )\n                    except TypeError:\n                        # in case downstream library has redefined axis:\n                        axis_bb = axis.get_tightbbox(renderer)\n                if axis_bb:\n                    batch.append(axis_bb)\n        return mtransforms.Bbox.union(batch)\n\n    def stem(self, x, y, z, *, linefmt='C0-', markerfmt='C0o', basefmt='C3-',\n             bottom=0, label=None, orientation='z'):\n        \"\"\"\n        Create a 3D stem plot.\n\n        A stem plot draws lines perpendicular to a baseline, and places markers\n        at the heads. By default, the baseline is defined by *x* and *y*, and\n        stems are drawn vertically from *bottom* to *z*.\n\n        Parameters\n        ----------\n        x, y, z : array-like\n            The positions of the heads of the stems. The stems are drawn along\n            the *orientation*-direction from the baseline at *bottom* (in the\n            *orientation*-coordinate) to the heads. By default, the *x* and *y*\n            positions are used for the baseline and *z* for the head position,\n            but this can be changed by *orientation*.\n\n        linefmt : str, default: 'C0-'\n            A string defining the properties of the vertical lines. Usually,\n            this will be a color or a color and a linestyle:\n\n            =========  =============\n            Character  Line Style\n            =========  =============\n            ``'-'``    solid line\n            ``'--'``   dashed line\n            ``'-.'``   dash-dot line\n            ``':'``    dotted line\n            =========  =============\n\n            Note: While it is technically possible to specify valid formats\n            other than color or color and linestyle (e.g. 'rx' or '-.'), this\n            is beyond the intention of the method and will most likely not\n            result in a reasonable plot.\n\n        markerfmt : str, default: 'C0o'\n            A string defining the properties of the markers at the stem heads.\n\n        basefmt : str, default: 'C3-'\n            A format string defining the properties of the baseline.\n\n        bottom : float, default: 0\n            The position of the baseline, in *orientation*-coordinates.\n\n        label : str, default: None\n            The label to use for the stems in legends.\n\n        orientation : {'x', 'y', 'z'}, default: 'z'\n            The direction along which stems are drawn.\n\n        Returns\n        -------\n        `.StemContainer`\n            The container may be treated like a tuple\n            (*markerline*, *stemlines*, *baseline*)\n\n        Examples\n        --------\n        .. plot:: gallery/mplot3d/stem3d_demo.py\n        \"\"\"\n\n        from matplotlib.container import StemContainer\n\n        had_data = self.has_data()\n\n        _api.check_in_list(['x', 'y', 'z'], orientation=orientation)\n\n        xlim = (np.min(x), np.max(x))\n        ylim = (np.min(y), np.max(y))\n        zlim = (np.min(z), np.max(z))\n\n        # Determine the appropriate plane for the baseline and the direction of\n        # stemlines based on the value of orientation.\n        if orientation == 'x':\n            basex, basexlim = y, ylim\n            basey, baseylim = z, zlim\n            lines = [[(bottom, thisy, thisz), (thisx, thisy, thisz)]\n                     for thisx, thisy, thisz in zip(x, y, z)]\n        elif orientation == 'y':\n            basex, basexlim = x, xlim\n            basey, baseylim = z, zlim\n            lines = [[(thisx, bottom, thisz), (thisx, thisy, thisz)]\n                     for thisx, thisy, thisz in zip(x, y, z)]\n        else:\n            basex, basexlim = x, xlim\n            basey, baseylim = y, ylim\n            lines = [[(thisx, thisy, bottom), (thisx, thisy, thisz)]\n                     for thisx, thisy, thisz in zip(x, y, z)]\n\n        # Determine style for stem lines.\n        linestyle, linemarker, linecolor = _process_plot_format(linefmt)\n        if linestyle is None:\n            linestyle = rcParams['lines.linestyle']\n\n        # Plot everything in required order.\n        baseline, = self.plot(basex, basey, basefmt, zs=bottom,\n                              zdir=orientation, label='_nolegend_')\n        stemlines = art3d.Line3DCollection(\n            lines, linestyles=linestyle, colors=linecolor, label='_nolegend_')\n        self.add_collection(stemlines)\n        markerline, = self.plot(x, y, z, markerfmt, label='_nolegend_')\n\n        stem_container = StemContainer((markerline, stemlines, baseline),\n                                       label=label)\n        self.add_container(stem_container)\n\n        jx, jy, jz = art3d.juggle_axes(basexlim, baseylim, [bottom, bottom],\n                                       orientation)\n        self.auto_scale_xyz([*jx, *xlim], [*jy, *ylim], [*jz, *zlim], had_data)\n\n        return stem_container\n\n    stem3D = stem\n\ndocstring.interpd.update(Axes3D_kwdoc=artist.kwdoc(Axes3D))\ndocstring.dedent_interpd(Axes3D.__init__)\n\n\ndef get_test_data(delta=0.05):\n    \"\"\"Return a tuple X, Y, Z with a test data set.\"\"\"\n    x = y = np.arange(-3.0, 3.0, delta)\n    X, Y = np.meshgrid(x, y)\n\n    Z1 = np.exp(-(X**2 + Y**2) / 2) / (2 * np.pi)\n    Z2 = (np.exp(-(((X - 1) / 1.5)**2 + ((Y - 1) / 0.5)**2) / 2) /\n          (2 * np.pi * 0.5 * 1.5))\n    Z = Z2 - Z1\n\n    X = X * 10\n    Y = Y * 10\n    Z = Z * 500\n    return X, Y, Z\n"
    },
    {
      "filename": "lib/mpl_toolkits/tests/test_mplot3d.py",
      "content": "import functools\nimport itertools\n\nimport pytest\n\nfrom mpl_toolkits.mplot3d import Axes3D, axes3d, proj3d, art3d\nimport matplotlib as mpl\nfrom matplotlib.backend_bases import MouseButton\nfrom matplotlib import cm\nfrom matplotlib import colors as mcolors\nfrom matplotlib.testing.decorators import image_comparison, check_figures_equal\nfrom matplotlib.testing.widgets import mock_event\nfrom matplotlib.collections import LineCollection, PolyCollection\nfrom matplotlib.patches import Circle\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nmpl3d_image_comparison = functools.partial(\n    image_comparison, remove_text=True, style='default')\n\n\ndef test_aspect_equal_error():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    with pytest.raises(NotImplementedError):\n        ax.set_aspect('equal')\n\n\n@mpl3d_image_comparison(['bar3d.png'])\ndef test_bar3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):\n        xs = np.arange(20)\n        ys = np.arange(20)\n        cs = [c] * len(xs)\n        cs[0] = 'c'\n        ax.bar(xs, ys, zs=z, zdir='y', align='edge', color=cs, alpha=0.8)\n\n\ndef test_bar3d_colors():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    for c in ['red', 'green', 'blue', 'yellow']:\n        xs = np.arange(len(c))\n        ys = np.zeros_like(xs)\n        zs = np.zeros_like(ys)\n        # Color names with same length as xs/ys/zs should not be split into\n        # individual letters.\n        ax.bar3d(xs, ys, zs, 1, 1, 1, color=c)\n\n\n@mpl3d_image_comparison(['bar3d_shaded.png'])\ndef test_bar3d_shaded():\n    x = np.arange(4)\n    y = np.arange(5)\n    x2d, y2d = np.meshgrid(x, y)\n    x2d, y2d = x2d.ravel(), y2d.ravel()\n    z = x2d + y2d + 1  # Avoid triggering bug with zero-depth boxes.\n\n    views = [(-60, 30), (30, 30), (30, -30), (120, -30)]\n    fig = plt.figure(figsize=plt.figaspect(1 / len(views)))\n    axs = fig.subplots(\n        1, len(views),\n        subplot_kw=dict(projection='3d')\n    )\n    for ax, (azim, elev) in zip(axs, views):\n        ax.bar3d(x2d, y2d, x2d * 0, 1, 1, z, shade=True)\n        ax.view_init(azim=azim, elev=elev)\n    fig.canvas.draw()\n\n\n@mpl3d_image_comparison(['bar3d_notshaded.png'])\ndef test_bar3d_notshaded():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    x = np.arange(4)\n    y = np.arange(5)\n    x2d, y2d = np.meshgrid(x, y)\n    x2d, y2d = x2d.ravel(), y2d.ravel()\n    z = x2d + y2d\n    ax.bar3d(x2d, y2d, x2d * 0, 1, 1, z, shade=False)\n    fig.canvas.draw()\n\n\ndef test_bar3d_lightsource():\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1, projection=\"3d\")\n\n    ls = mcolors.LightSource(azdeg=0, altdeg=90)\n\n    length, width = 3, 4\n    area = length * width\n\n    x, y = np.meshgrid(np.arange(length), np.arange(width))\n    x = x.ravel()\n    y = y.ravel()\n    dz = x + y\n\n    color = [cm.coolwarm(i/area) for i in range(area)]\n\n    collection = ax.bar3d(x=x, y=y, z=0,\n                          dx=1, dy=1, dz=dz,\n                          color=color, shade=True, lightsource=ls)\n\n    # Testing that the custom 90° lightsource produces different shading on\n    # the top facecolors compared to the default, and that those colors are\n    # precisely the colors from the colormap, due to the illumination parallel\n    # to the z-axis.\n    np.testing.assert_array_equal(color, collection._facecolor3d[1::6])\n\n\n@mpl3d_image_comparison(['contour3d.png'])\ndef test_contour3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    ax.contour(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n    ax.contour(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n    ax.contour(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n    ax.set_xlim(-40, 40)\n    ax.set_ylim(-40, 40)\n    ax.set_zlim(-100, 100)\n\n\n@mpl3d_image_comparison(['contourf3d.png'])\ndef test_contourf3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n    ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n    ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n    ax.set_xlim(-40, 40)\n    ax.set_ylim(-40, 40)\n    ax.set_zlim(-100, 100)\n\n\n@mpl3d_image_comparison(['contourf3d_fill.png'])\ndef test_contourf3d_fill():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y = np.meshgrid(np.arange(-2, 2, 0.25), np.arange(-2, 2, 0.25))\n    Z = X.clip(0, 0)\n    # This produces holes in the z=0 surface that causes rendering errors if\n    # the Poly3DCollection is not aware of path code information (issue #4784)\n    Z[::5, ::5] = 0.1\n    ax.contourf(X, Y, Z, offset=0, levels=[-0.1, 0], cmap=cm.coolwarm)\n    ax.set_xlim(-2, 2)\n    ax.set_ylim(-2, 2)\n    ax.set_zlim(-1, 1)\n\n\n@mpl3d_image_comparison(['tricontour.png'])\ndef test_tricontour():\n    fig = plt.figure()\n\n    np.random.seed(19680801)\n    x = np.random.rand(1000) - 0.5\n    y = np.random.rand(1000) - 0.5\n    z = -(x**2 + y**2)\n\n    ax = fig.add_subplot(1, 2, 1, projection='3d')\n    ax.tricontour(x, y, z)\n    ax = fig.add_subplot(1, 2, 2, projection='3d')\n    ax.tricontourf(x, y, z)\n\n\n@mpl3d_image_comparison(['lines3d.png'])\ndef test_lines3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\n    z = np.linspace(-2, 2, 100)\n    r = z ** 2 + 1\n    x = r * np.sin(theta)\n    y = r * np.cos(theta)\n    ax.plot(x, y, z)\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_plot_scalar(fig_test, fig_ref):\n    ax1 = fig_test.add_subplot(projection='3d')\n    ax1.plot([1], [1], \"o\")\n    ax2 = fig_ref.add_subplot(projection='3d')\n    ax2.plot(1, 1, \"o\")\n\n\n@mpl3d_image_comparison(['mixedsubplot.png'])\ndef test_mixedsubplots():\n    def f(t):\n        return np.cos(2*np.pi*t) * np.exp(-t)\n\n    t1 = np.arange(0.0, 5.0, 0.1)\n    t2 = np.arange(0.0, 5.0, 0.02)\n\n    fig = plt.figure(figsize=plt.figaspect(2.))\n    ax = fig.add_subplot(2, 1, 1)\n    ax.plot(t1, f(t1), 'bo', t2, f(t2), 'k--', markerfacecolor='green')\n    ax.grid(True)\n\n    ax = fig.add_subplot(2, 1, 2, projection='3d')\n    X, Y = np.meshgrid(np.arange(-5, 5, 0.25), np.arange(-5, 5, 0.25))\n    R = np.hypot(X, Y)\n    Z = np.sin(R)\n\n    ax.plot_surface(X, Y, Z, rcount=40, ccount=40,\n                    linewidth=0, antialiased=False)\n\n    ax.set_zlim3d(-1, 1)\n\n\n@check_figures_equal(extensions=['png'])\ndef test_tight_layout_text(fig_test, fig_ref):\n    # text is currently ignored in tight layout. So the order of text() and\n    # tight_layout() calls should not influence the result.\n    ax1 = fig_test.add_subplot(projection='3d')\n    ax1.text(.5, .5, .5, s='some string')\n    fig_test.tight_layout()\n\n    ax2 = fig_ref.add_subplot(projection='3d')\n    fig_ref.tight_layout()\n    ax2.text(.5, .5, .5, s='some string')\n\n\n@mpl3d_image_comparison(['scatter3d.png'])\ndef test_scatter3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    ax.scatter(np.arange(10), np.arange(10), np.arange(10),\n               c='r', marker='o')\n    x = y = z = np.arange(10, 20)\n    ax.scatter(x, y, z, c='b', marker='^')\n    z[-1] = 0  # Check that scatter() copies the data.\n\n\n@mpl3d_image_comparison(['scatter3d_color.png'])\ndef test_scatter3d_color():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    # Check that 'none' color works; these two should overlay to produce the\n    # same as setting just `color`.\n    ax.scatter(np.arange(10), np.arange(10), np.arange(10),\n               facecolor='r', edgecolor='none', marker='o')\n    ax.scatter(np.arange(10), np.arange(10), np.arange(10),\n               facecolor='none', edgecolor='r', marker='o')\n\n    ax.scatter(np.arange(10, 20), np.arange(10, 20), np.arange(10, 20),\n               color='b', marker='s')\n\n\n@check_figures_equal(extensions=['png'])\ndef test_scatter3d_modification(fig_ref, fig_test):\n    # Changing Path3DCollection properties post-creation should work correctly.\n    ax_test = fig_test.add_subplot(projection='3d')\n    c = ax_test.scatter(np.arange(10), np.arange(10), np.arange(10),\n                        marker='o')\n    c.set_facecolor('C1')\n    c.set_edgecolor('C2')\n    c.set_alpha([0.3, 0.7] * 5)\n    assert c.get_depthshade()\n    c.set_depthshade(False)\n    assert not c.get_depthshade()\n    c.set_sizes(np.full(10, 75))\n    c.set_linewidths(3)\n\n    ax_ref = fig_ref.add_subplot(projection='3d')\n    ax_ref.scatter(np.arange(10), np.arange(10), np.arange(10), marker='o',\n                   facecolor='C1', edgecolor='C2', alpha=[0.3, 0.7] * 5,\n                   depthshade=False, s=75, linewidths=3)\n\n\n@pytest.mark.parametrize('depthshade', [True, False])\n@check_figures_equal(extensions=['png'])\ndef test_scatter3d_sorting(fig_ref, fig_test, depthshade):\n    \"\"\"Test that marker properties are correctly sorted.\"\"\"\n\n    y, x = np.mgrid[:10, :10]\n    z = np.arange(x.size).reshape(x.shape)\n\n    sizes = np.full(z.shape, 25)\n    sizes[0::2, 0::2] = 100\n    sizes[1::2, 1::2] = 100\n\n    facecolors = np.full(z.shape, 'C0')\n    facecolors[:5, :5] = 'C1'\n    facecolors[6:, :4] = 'C2'\n    facecolors[6:, 6:] = 'C3'\n\n    edgecolors = np.full(z.shape, 'C4')\n    edgecolors[1:5, 1:5] = 'C5'\n    edgecolors[5:9, 1:5] = 'C6'\n    edgecolors[5:9, 5:9] = 'C7'\n\n    linewidths = np.full(z.shape, 2)\n    linewidths[0::2, 0::2] = 5\n    linewidths[1::2, 1::2] = 5\n\n    x, y, z, sizes, facecolors, edgecolors, linewidths = [\n        a.flatten()\n        for a in [x, y, z, sizes, facecolors, edgecolors, linewidths]\n    ]\n\n    ax_ref = fig_ref.add_subplot(projection='3d')\n    sets = (np.unique(a) for a in [sizes, facecolors, edgecolors, linewidths])\n    for s, fc, ec, lw in itertools.product(*sets):\n        subset = (\n            (sizes != s) |\n            (facecolors != fc) |\n            (edgecolors != ec) |\n            (linewidths != lw)\n        )\n        subset = np.ma.masked_array(z, subset, dtype=float)\n\n        # When depth shading is disabled, the colors are passed through as\n        # single-item lists; this triggers single path optimization. The\n        # following reshaping is a hack to disable that, since the optimization\n        # would not occur for the full scatter which has multiple colors.\n        fc = np.repeat(fc, sum(~subset.mask))\n\n        ax_ref.scatter(x, y, subset, s=s, fc=fc, ec=ec, lw=lw, alpha=1,\n                       depthshade=depthshade)\n\n    ax_test = fig_test.add_subplot(projection='3d')\n    ax_test.scatter(x, y, z, s=sizes, fc=facecolors, ec=edgecolors,\n                    lw=linewidths, alpha=1, depthshade=depthshade)\n\n\n@pytest.mark.parametrize('azim', [-50, 130])  # yellow first, blue first\n@check_figures_equal(extensions=['png'])\ndef test_marker_draw_order_data_reversed(fig_test, fig_ref, azim):\n    \"\"\"\n    Test that the draw order does not depend on the data point order.\n\n    For the given viewing angle at azim=-50, the yellow marker should be in\n    front. For azim=130, the blue marker should be in front.\n    \"\"\"\n    x = [-1, 1]\n    y = [1, -1]\n    z = [0, 0]\n    color = ['b', 'y']\n    ax = fig_test.add_subplot(projection='3d')\n    ax.scatter(x, y, z, s=3500, c=color)\n    ax.view_init(elev=0, azim=azim)\n    ax = fig_ref.add_subplot(projection='3d')\n    ax.scatter(x[::-1], y[::-1], z[::-1], s=3500, c=color[::-1])\n    ax.view_init(elev=0, azim=azim)\n\n\n@check_figures_equal(extensions=['png'])\ndef test_marker_draw_order_view_rotated(fig_test, fig_ref):\n    \"\"\"\n    Test that the draw order changes with the direction.\n\n    If we rotate *azim* by 180 degrees and exchange the colors, the plot\n    plot should look the same again.\n    \"\"\"\n    azim = 130\n    x = [-1, 1]\n    y = [1, -1]\n    z = [0, 0]\n    color = ['b', 'y']\n    ax = fig_test.add_subplot(projection='3d')\n    # axis are not exactly invariant under 180 degree rotation -> deactivate\n    ax.set_axis_off()\n    ax.scatter(x, y, z, s=3500, c=color)\n    ax.view_init(elev=0, azim=azim)\n    ax = fig_ref.add_subplot(projection='3d')\n    ax.set_axis_off()\n    ax.scatter(x, y, z, s=3500, c=color[::-1])  # color reversed\n    ax.view_init(elev=0, azim=azim - 180)  # view rotated by 180 degrees\n\n\n@mpl3d_image_comparison(['plot_3d_from_2d.png'], tol=0.015)\ndef test_plot_3d_from_2d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    xs = np.arange(0, 5)\n    ys = np.arange(5, 10)\n    ax.plot(xs, ys, zs=0, zdir='x')\n    ax.plot(xs, ys, zs=0, zdir='y')\n\n\n@mpl3d_image_comparison(['surface3d.png'])\ndef test_surface3d():\n    # Remove this line when this test image is regenerated.\n    plt.rcParams['pcolormesh.snap'] = False\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X = np.arange(-5, 5, 0.25)\n    Y = np.arange(-5, 5, 0.25)\n    X, Y = np.meshgrid(X, Y)\n    R = np.hypot(X, Y)\n    Z = np.sin(R)\n    surf = ax.plot_surface(X, Y, Z, rcount=40, ccount=40, cmap=cm.coolwarm,\n                           lw=0, antialiased=False)\n    ax.set_zlim(-1.01, 1.01)\n    fig.colorbar(surf, shrink=0.5, aspect=5)\n\n\n@mpl3d_image_comparison(['surface3d_shaded.png'])\ndef test_surface3d_shaded():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X = np.arange(-5, 5, 0.25)\n    Y = np.arange(-5, 5, 0.25)\n    X, Y = np.meshgrid(X, Y)\n    R = np.sqrt(X ** 2 + Y ** 2)\n    Z = np.sin(R)\n    ax.plot_surface(X, Y, Z, rstride=5, cstride=5,\n                    color=[0.25, 1, 0.25], lw=1, antialiased=False)\n    ax.set_zlim(-1.01, 1.01)\n\n\n@mpl3d_image_comparison(['text3d.png'], remove_text=False)\ndef test_text3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    zdirs = (None, 'x', 'y', 'z', (1, 1, 0), (1, 1, 1))\n    xs = (2, 6, 4, 9, 7, 2)\n    ys = (6, 4, 8, 7, 2, 2)\n    zs = (4, 2, 5, 6, 1, 7)\n\n    for zdir, x, y, z in zip(zdirs, xs, ys, zs):\n        label = '(%d, %d, %d), dir=%s' % (x, y, z, zdir)\n        ax.text(x, y, z, label, zdir)\n\n    ax.text(1, 1, 1, \"red\", color='red')\n    ax.text2D(0.05, 0.95, \"2D Text\", transform=ax.transAxes)\n    ax.set_xlim3d(0, 10)\n    ax.set_ylim3d(0, 10)\n    ax.set_zlim3d(0, 10)\n    ax.set_xlabel('X axis')\n    ax.set_ylabel('Y axis')\n    ax.set_zlabel('Z axis')\n\n\n@check_figures_equal(extensions=['png'])\ndef test_text3d_modification(fig_ref, fig_test):\n    # Modifying the Text position after the fact should work the same as\n    # setting it directly.\n    zdirs = (None, 'x', 'y', 'z', (1, 1, 0), (1, 1, 1))\n    xs = (2, 6, 4, 9, 7, 2)\n    ys = (6, 4, 8, 7, 2, 2)\n    zs = (4, 2, 5, 6, 1, 7)\n\n    ax_test = fig_test.add_subplot(projection='3d')\n    ax_test.set_xlim3d(0, 10)\n    ax_test.set_ylim3d(0, 10)\n    ax_test.set_zlim3d(0, 10)\n    for zdir, x, y, z in zip(zdirs, xs, ys, zs):\n        t = ax_test.text(0, 0, 0, f'({x}, {y}, {z}), dir={zdir}')\n        t.set_position_3d((x, y, z), zdir=zdir)\n\n    ax_ref = fig_ref.add_subplot(projection='3d')\n    ax_ref.set_xlim3d(0, 10)\n    ax_ref.set_ylim3d(0, 10)\n    ax_ref.set_zlim3d(0, 10)\n    for zdir, x, y, z in zip(zdirs, xs, ys, zs):\n        ax_ref.text(x, y, z, f'({x}, {y}, {z}), dir={zdir}', zdir=zdir)\n\n\n@mpl3d_image_comparison(['trisurf3d.png'], tol=0.03)\ndef test_trisurf3d():\n    n_angles = 36\n    n_radii = 8\n    radii = np.linspace(0.125, 1.0, n_radii)\n    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n    angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n    angles[:, 1::2] += np.pi/n_angles\n\n    x = np.append(0, (radii*np.cos(angles)).flatten())\n    y = np.append(0, (radii*np.sin(angles)).flatten())\n    z = np.sin(-x*y)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    ax.plot_trisurf(x, y, z, cmap=cm.jet, linewidth=0.2)\n\n\n@mpl3d_image_comparison(['trisurf3d_shaded.png'], tol=0.03)\ndef test_trisurf3d_shaded():\n    n_angles = 36\n    n_radii = 8\n    radii = np.linspace(0.125, 1.0, n_radii)\n    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n    angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n    angles[:, 1::2] += np.pi/n_angles\n\n    x = np.append(0, (radii*np.cos(angles)).flatten())\n    y = np.append(0, (radii*np.sin(angles)).flatten())\n    z = np.sin(-x*y)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    ax.plot_trisurf(x, y, z, color=[1, 0.5, 0], linewidth=0.2)\n\n\n@mpl3d_image_comparison(['wireframe3d.png'])\ndef test_wireframe3d():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    ax.plot_wireframe(X, Y, Z, rcount=13, ccount=13)\n\n\n@mpl3d_image_comparison(['wireframe3dzerocstride.png'])\ndef test_wireframe3dzerocstride():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    ax.plot_wireframe(X, Y, Z, rcount=13, ccount=0)\n\n\n@mpl3d_image_comparison(['wireframe3dzerorstride.png'])\ndef test_wireframe3dzerorstride():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    ax.plot_wireframe(X, Y, Z, rstride=0, cstride=10)\n\n\ndef test_wireframe3dzerostrideraises():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    with pytest.raises(ValueError):\n        ax.plot_wireframe(X, Y, Z, rstride=0, cstride=0)\n\n\ndef test_mixedsamplesraises():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    X, Y, Z = axes3d.get_test_data(0.05)\n    with pytest.raises(ValueError):\n        ax.plot_wireframe(X, Y, Z, rstride=10, ccount=50)\n    with pytest.raises(ValueError):\n        ax.plot_surface(X, Y, Z, cstride=50, rcount=10)\n\n\n@mpl3d_image_comparison(\n    ['quiver3d.png', 'quiver3d_pivot_middle.png', 'quiver3d_pivot_tail.png'])\ndef test_quiver3d():\n    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]\n    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)\n    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)\n    w = (2/3)**0.5 * np.cos(np.pi * x) * np.cos(np.pi * y) * np.sin(np.pi * z)\n    for pivot in ['tip', 'middle', 'tail']:\n        ax = plt.figure().add_subplot(projection='3d')\n        ax.quiver(x, y, z, u, v, w, length=0.1, pivot=pivot, normalize=True)\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_quiver3d_empty(fig_test, fig_ref):\n    fig_ref.add_subplot(projection='3d')\n    x = y = z = u = v = w = []\n    ax = fig_test.add_subplot(projection='3d')\n    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)\n\n\n@mpl3d_image_comparison(['quiver3d_masked.png'])\ndef test_quiver3d_masked():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    # Using mgrid here instead of ogrid because masked_where doesn't\n    # seem to like broadcasting very much...\n    x, y, z = np.mgrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]\n\n    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)\n    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)\n    w = (2/3)**0.5 * np.cos(np.pi * x) * np.cos(np.pi * y) * np.sin(np.pi * z)\n    u = np.ma.masked_where((-0.4 < x) & (x < 0.1), u, copy=False)\n    v = np.ma.masked_where((0.1 < y) & (y < 0.7), v, copy=False)\n\n    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)\n\n\n@check_figures_equal(extensions=['png'])\ndef test_patch_collection_modification(fig_test, fig_ref):\n    # Test that modifying Patch3DCollection properties after creation works.\n    patch = Circle((0, 0), 0.05)\n    c = art3d.Patch3DCollection([patch], linewidths=3)\n\n    ax_test = fig_test.add_subplot(projection='3d')\n    ax_test.add_collection3d(c)\n    c.set_edgecolor('C2')\n    c.set_facecolor('C3')\n    c.set_alpha(0.7)\n    assert c.get_depthshade()\n    c.set_depthshade(False)\n    assert not c.get_depthshade()\n\n    patch = Circle((0, 0), 0.05)\n    c = art3d.Patch3DCollection([patch], linewidths=3,\n                                edgecolor='C2', facecolor='C3', alpha=0.7,\n                                depthshade=False)\n\n    ax_ref = fig_ref.add_subplot(projection='3d')\n    ax_ref.add_collection3d(c)\n\n\n@mpl3d_image_comparison(['poly3dcollection_closed.png'])\ndef test_poly3dcollection_closed():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    poly1 = np.array([[0, 0, 1], [0, 1, 1], [0, 0, 0]], float)\n    poly2 = np.array([[0, 1, 1], [1, 1, 1], [1, 1, 0]], float)\n    c1 = art3d.Poly3DCollection([poly1], linewidths=3, edgecolor='k',\n                                facecolor=(0.5, 0.5, 1, 0.5), closed=True)\n    c2 = art3d.Poly3DCollection([poly2], linewidths=3, edgecolor='k',\n                                facecolor=(1, 0.5, 0.5, 0.5), closed=False)\n    ax.add_collection3d(c1)\n    ax.add_collection3d(c2)\n\n\ndef test_poly_collection_2d_to_3d_empty():\n    poly = PolyCollection([])\n    art3d.poly_collection_2d_to_3d(poly)\n    assert isinstance(poly, art3d.Poly3DCollection)\n    assert poly.get_paths() == []\n\n\n@mpl3d_image_comparison(['poly3dcollection_alpha.png'])\ndef test_poly3dcollection_alpha():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    poly1 = np.array([[0, 0, 1], [0, 1, 1], [0, 0, 0]], float)\n    poly2 = np.array([[0, 1, 1], [1, 1, 1], [1, 1, 0]], float)\n    c1 = art3d.Poly3DCollection([poly1], linewidths=3, edgecolor='k',\n                                facecolor=(0.5, 0.5, 1), closed=True)\n    c1.set_alpha(0.5)\n    c2 = art3d.Poly3DCollection([poly2], linewidths=3, closed=False)\n    # Post-creation modification should work.\n    c2.set_facecolor((1, 0.5, 0.5))\n    c2.set_edgecolor('k')\n    c2.set_alpha(0.5)\n    ax.add_collection3d(c1)\n    ax.add_collection3d(c2)\n\n\n@mpl3d_image_comparison(['add_collection3d_zs_array.png'])\ndef test_add_collection3d_zs_array():\n    theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\n    z = np.linspace(-2, 2, 100)\n    r = z**2 + 1\n    x = r * np.sin(theta)\n    y = r * np.cos(theta)\n\n    points = np.column_stack([x, y, z]).reshape(-1, 1, 3)\n    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    norm = plt.Normalize(0, 2*np.pi)\n    # 2D LineCollection from x & y values\n    lc = LineCollection(segments[:, :, :2], cmap='twilight', norm=norm)\n    lc.set_array(np.mod(theta, 2*np.pi))\n    # Add 2D collection at z values to ax\n    line = ax.add_collection3d(lc, zs=segments[:, :, 2])\n\n    assert line is not None\n\n    ax.set_xlim(-5, 5)\n    ax.set_ylim(-4, 6)\n    ax.set_zlim(-2, 2)\n\n\n@mpl3d_image_comparison(['add_collection3d_zs_scalar.png'])\ndef test_add_collection3d_zs_scalar():\n    theta = np.linspace(0, 2 * np.pi, 100)\n    z = 1\n    r = z**2 + 1\n    x = r * np.sin(theta)\n    y = r * np.cos(theta)\n\n    points = np.column_stack([x, y]).reshape(-1, 1, 2)\n    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    norm = plt.Normalize(0, 2*np.pi)\n    lc = LineCollection(segments, cmap='twilight', norm=norm)\n    lc.set_array(theta)\n    line = ax.add_collection3d(lc, zs=z)\n\n    assert line is not None\n\n    ax.set_xlim(-5, 5)\n    ax.set_ylim(-4, 6)\n    ax.set_zlim(0, 2)\n\n\n@mpl3d_image_comparison(['axes3d_labelpad.png'], remove_text=False)\ndef test_axes3d_labelpad():\n    fig = plt.figure()\n    ax = fig.add_axes(Axes3D(fig))\n    # labelpad respects rcParams\n    assert ax.xaxis.labelpad == mpl.rcParams['axes.labelpad']\n    # labelpad can be set in set_label\n    ax.set_xlabel('X LABEL', labelpad=10)\n    assert ax.xaxis.labelpad == 10\n    ax.set_ylabel('Y LABEL')\n    ax.set_zlabel('Z LABEL')\n    # or manually\n    ax.yaxis.labelpad = 20\n    ax.zaxis.labelpad = -40\n\n    # Tick labels also respect tick.pad (also from rcParams)\n    for i, tick in enumerate(ax.yaxis.get_major_ticks()):\n        tick.set_pad(tick.get_pad() - i * 5)\n\n\n@mpl3d_image_comparison(['axes3d_cla.png'], remove_text=False)\ndef test_axes3d_cla():\n    # fixed in pull request 4553\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1, projection='3d')\n    ax.set_axis_off()\n    ax.cla()  # make sure the axis displayed is 3D (not 2D)\n\n\n@mpl3d_image_comparison(['axes3d_rotated.png'], remove_text=False)\ndef test_axes3d_rotated():\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1, projection='3d')\n    ax.view_init(90, 45)  # look down, rotated. Should be square\n\n\ndef test_plotsurface_1d_raises():\n    x = np.linspace(0.5, 10, num=100)\n    y = np.linspace(0.5, 10, num=100)\n    X, Y = np.meshgrid(x, y)\n    z = np.random.randn(100)\n\n    fig = plt.figure(figsize=(14, 6))\n    ax = fig.add_subplot(1, 2, 1, projection='3d')\n    with pytest.raises(ValueError):\n        ax.plot_surface(X, Y, z)\n\n\ndef _test_proj_make_M():\n    # eye point\n    E = np.array([1000, -1000, 2000])\n    R = np.array([100, 100, 100])\n    V = np.array([0, 0, 1])\n    viewM = proj3d.view_transformation(E, R, V)\n    perspM = proj3d.persp_transformation(100, -100)\n    M = np.dot(perspM, viewM)\n    return M\n\n\ndef test_proj_transform():\n    M = _test_proj_make_M()\n\n    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 300.0\n    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 300.0\n    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 300.0\n\n    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)\n    ixs, iys, izs = proj3d.inv_transform(txs, tys, tzs, M)\n\n    np.testing.assert_almost_equal(ixs, xs)\n    np.testing.assert_almost_equal(iys, ys)\n    np.testing.assert_almost_equal(izs, zs)\n\n\ndef _test_proj_draw_axes(M, s=1, *args, **kwargs):\n    xs = [0, s, 0, 0]\n    ys = [0, 0, s, 0]\n    zs = [0, 0, 0, s]\n    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)\n    o, ax, ay, az = zip(txs, tys)\n    lines = [(o, ax), (o, ay), (o, az)]\n\n    fig, ax = plt.subplots(*args, **kwargs)\n    linec = LineCollection(lines)\n    ax.add_collection(linec)\n    for x, y, t in zip(txs, tys, ['o', 'x', 'y', 'z']):\n        ax.text(x, y, t)\n\n    return fig, ax\n\n\n@mpl3d_image_comparison(['proj3d_axes_cube.png'])\ndef test_proj_axes_cube():\n    M = _test_proj_make_M()\n\n    ts = '0 1 2 3 0 4 5 6 7 4'.split()\n    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 300.0\n    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 300.0\n    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 300.0\n\n    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)\n\n    fig, ax = _test_proj_draw_axes(M, s=400)\n\n    ax.scatter(txs, tys, c=tzs)\n    ax.plot(txs, tys, c='r')\n    for x, y, t in zip(txs, tys, ts):\n        ax.text(x, y, t)\n\n    ax.set_xlim(-0.2, 0.2)\n    ax.set_ylim(-0.2, 0.2)\n\n\n@mpl3d_image_comparison(['proj3d_axes_cube_ortho.png'])\ndef test_proj_axes_cube_ortho():\n    E = np.array([200, 100, 100])\n    R = np.array([0, 0, 0])\n    V = np.array([0, 0, 1])\n    viewM = proj3d.view_transformation(E, R, V)\n    orthoM = proj3d.ortho_transformation(-1, 1)\n    M = np.dot(orthoM, viewM)\n\n    ts = '0 1 2 3 0 4 5 6 7 4'.split()\n    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 100\n    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 100\n    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 100\n\n    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)\n\n    fig, ax = _test_proj_draw_axes(M, s=150)\n\n    ax.scatter(txs, tys, s=300-tzs)\n    ax.plot(txs, tys, c='r')\n    for x, y, t in zip(txs, tys, ts):\n        ax.text(x, y, t)\n\n    ax.set_xlim(-200, 200)\n    ax.set_ylim(-200, 200)\n\n\ndef test_rot():\n    V = [1, 0, 0, 1]\n    rotated_V = proj3d.rot_x(V, np.pi / 6)\n    np.testing.assert_allclose(rotated_V, [1, 0, 0, 1])\n\n    V = [0, 1, 0, 1]\n    rotated_V = proj3d.rot_x(V, np.pi / 6)\n    np.testing.assert_allclose(rotated_V, [0, np.sqrt(3) / 2, 0.5, 1])\n\n\ndef test_world():\n    xmin, xmax = 100, 120\n    ymin, ymax = -100, 100\n    zmin, zmax = 0.1, 0.2\n    M = proj3d.world_transformation(xmin, xmax, ymin, ymax, zmin, zmax)\n    np.testing.assert_allclose(M,\n                               [[5e-2, 0, 0, -5],\n                                [0, 5e-3, 0, 5e-1],\n                                [0, 0, 1e1, -1],\n                                [0, 0, 0, 1]])\n\n\n@mpl3d_image_comparison(['proj3d_lines_dists.png'])\ndef test_lines_dists():\n    fig, ax = plt.subplots(figsize=(4, 6), subplot_kw=dict(aspect='equal'))\n\n    xs = (0, 30)\n    ys = (20, 150)\n    ax.plot(xs, ys)\n    p0, p1 = zip(xs, ys)\n\n    xs = (0, 0, 20, 30)\n    ys = (100, 150, 30, 200)\n    ax.scatter(xs, ys)\n\n    dist = proj3d._line2d_seg_dist(p0, p1, (xs[0], ys[0]))\n    dist = proj3d._line2d_seg_dist(p0, p1, np.array((xs, ys)))\n    for x, y, d in zip(xs, ys, dist):\n        c = Circle((x, y), d, fill=0)\n        ax.add_patch(c)\n\n    ax.set_xlim(-50, 150)\n    ax.set_ylim(0, 300)\n\n\ndef test_autoscale():\n    fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n    ax.margins(x=0, y=.1, z=.2)\n    ax.plot([0, 1], [0, 1], [0, 1])\n    assert ax.get_w_lims() == (0, 1, -.1, 1.1, -.2, 1.2)\n    ax.autoscale(False)\n    ax.set_autoscalez_on(True)\n    ax.plot([0, 2], [0, 2], [0, 2])\n    assert ax.get_w_lims() == (0, 1, -.1, 1.1, -.4, 2.4)\n\n\n@mpl3d_image_comparison(['axes3d_ortho.png'], remove_text=False)\ndef test_axes3d_ortho():\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    ax.set_proj_type('ortho')\n\n\n@pytest.mark.parametrize('value', [np.inf, np.nan])\n@pytest.mark.parametrize(('setter', 'side'), [\n    ('set_xlim3d', 'left'),\n    ('set_xlim3d', 'right'),\n    ('set_ylim3d', 'bottom'),\n    ('set_ylim3d', 'top'),\n    ('set_zlim3d', 'bottom'),\n    ('set_zlim3d', 'top'),\n])\ndef test_invalid_axes_limits(setter, side, value):\n    limit = {side: value}\n    fig = plt.figure()\n    obj = fig.add_subplot(projection='3d')\n    with pytest.raises(ValueError):\n        getattr(obj, setter)(**limit)\n\n\nclass TestVoxels:\n    @mpl3d_image_comparison(['voxels-simple.png'])\n    def test_simple(self):\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        x, y, z = np.indices((5, 4, 3))\n        voxels = (x == y) | (y == z)\n        ax.voxels(voxels)\n\n    @mpl3d_image_comparison(['voxels-edge-style.png'])\n    def test_edge_style(self):\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        x, y, z = np.indices((5, 5, 4))\n        voxels = ((x - 2)**2 + (y - 2)**2 + (z-1.5)**2) < 2.2**2\n        v = ax.voxels(voxels, linewidths=3, edgecolor='C1')\n\n        # change the edge color of one voxel\n        v[max(v.keys())].set_edgecolor('C2')\n\n    @mpl3d_image_comparison(['voxels-named-colors.png'])\n    def test_named_colors(self):\n        \"\"\"Test with colors set to a 3D object array of strings.\"\"\"\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        x, y, z = np.indices((10, 10, 10))\n        voxels = (x == y) | (y == z)\n        voxels = voxels & ~(x * y * z < 1)\n        colors = np.full((10, 10, 10), 'C0', dtype=np.object_)\n        colors[(x < 5) & (y < 5)] = '0.25'\n        colors[(x + z) < 10] = 'cyan'\n        ax.voxels(voxels, facecolors=colors)\n\n    @mpl3d_image_comparison(['voxels-rgb-data.png'])\n    def test_rgb_data(self):\n        \"\"\"Test with colors set to a 4d float array of rgb data.\"\"\"\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        x, y, z = np.indices((10, 10, 10))\n        voxels = (x == y) | (y == z)\n        colors = np.zeros((10, 10, 10, 3))\n        colors[..., 0] = x / 9\n        colors[..., 1] = y / 9\n        colors[..., 2] = z / 9\n        ax.voxels(voxels, facecolors=colors)\n\n    @mpl3d_image_comparison(['voxels-alpha.png'])\n    def test_alpha(self):\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        x, y, z = np.indices((10, 10, 10))\n        v1 = x == y\n        v2 = np.abs(x - y) < 2\n        voxels = v1 | v2\n        colors = np.zeros((10, 10, 10, 4))\n        colors[v2] = [1, 0, 0, 0.5]\n        colors[v1] = [0, 1, 0, 0.5]\n        v = ax.voxels(voxels, facecolors=colors)\n\n        assert type(v) is dict\n        for coord, poly in v.items():\n            assert voxels[coord], \"faces returned for absent voxel\"\n            assert isinstance(poly, art3d.Poly3DCollection)\n\n    @mpl3d_image_comparison(['voxels-xyz.png'], tol=0.01, remove_text=False)\n    def test_xyz(self):\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        def midpoints(x):\n            sl = ()\n            for i in range(x.ndim):\n                x = (x[sl + np.index_exp[:-1]] +\n                     x[sl + np.index_exp[1:]]) / 2.0\n                sl += np.index_exp[:]\n            return x\n\n        # prepare some coordinates, and attach rgb values to each\n        r, g, b = np.indices((17, 17, 17)) / 16.0\n        rc = midpoints(r)\n        gc = midpoints(g)\n        bc = midpoints(b)\n\n        # define a sphere about [0.5, 0.5, 0.5]\n        sphere = (rc - 0.5)**2 + (gc - 0.5)**2 + (bc - 0.5)**2 < 0.5**2\n\n        # combine the color components\n        colors = np.zeros(sphere.shape + (3,))\n        colors[..., 0] = rc\n        colors[..., 1] = gc\n        colors[..., 2] = bc\n\n        # and plot everything\n        ax.voxels(r, g, b, sphere,\n                  facecolors=colors,\n                  edgecolors=np.clip(2*colors - 0.5, 0, 1),  # brighter\n                  linewidth=0.5)\n\n    def test_calling_conventions(self):\n        x, y, z = np.indices((3, 4, 5))\n        filled = np.ones((2, 3, 4))\n\n        fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n        # all the valid calling conventions\n        for kw in (dict(), dict(edgecolor='k')):\n            ax.voxels(filled, **kw)\n            ax.voxels(filled=filled, **kw)\n            ax.voxels(x, y, z, filled, **kw)\n            ax.voxels(x, y, z, filled=filled, **kw)\n\n        # duplicate argument\n        with pytest.raises(TypeError, match='voxels'):\n            ax.voxels(x, y, z, filled, filled=filled)\n        # missing arguments\n        with pytest.raises(TypeError, match='voxels'):\n            ax.voxels(x, y)\n        # x, y, z are positional only - this passes them on as attributes of\n        # Poly3DCollection\n        with pytest.raises(AttributeError):\n            ax.voxels(filled=filled, x=x, y=y, z=z)\n\n\ndef test_line3d_set_get_data_3d():\n    x, y, z = [0, 1], [2, 3], [4, 5]\n    x2, y2, z2 = [6, 7], [8, 9], [10, 11]\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n    lines = ax.plot(x, y, z)\n    line = lines[0]\n    np.testing.assert_array_equal((x, y, z), line.get_data_3d())\n    line.set_data_3d(x2, y2, z2)\n    np.testing.assert_array_equal((x2, y2, z2), line.get_data_3d())\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_inverted(fig_test, fig_ref):\n    # Plot then invert.\n    ax = fig_test.add_subplot(projection=\"3d\")\n    ax.plot([1, 1, 10, 10], [1, 10, 10, 10], [1, 1, 1, 10])\n    ax.invert_yaxis()\n    # Invert then plot.\n    ax = fig_ref.add_subplot(projection=\"3d\")\n    ax.invert_yaxis()\n    ax.plot([1, 1, 10, 10], [1, 10, 10, 10], [1, 1, 1, 10])\n\n\ndef test_inverted_cla():\n    # GitHub PR #5450. Setting autoscale should reset\n    # axes to be non-inverted.\n    fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n    # 1. test that a new axis is not inverted per default\n    assert not ax.xaxis_inverted()\n    assert not ax.yaxis_inverted()\n    assert not ax.zaxis_inverted()\n    ax.set_xlim(1, 0)\n    ax.set_ylim(1, 0)\n    ax.set_zlim(1, 0)\n    assert ax.xaxis_inverted()\n    assert ax.yaxis_inverted()\n    assert ax.zaxis_inverted()\n    ax.cla()\n    assert not ax.xaxis_inverted()\n    assert not ax.yaxis_inverted()\n    assert not ax.zaxis_inverted()\n\n\ndef test_ax3d_tickcolour():\n    fig = plt.figure()\n    ax = Axes3D(fig)\n\n    ax.tick_params(axis='x', colors='red')\n    ax.tick_params(axis='y', colors='red')\n    ax.tick_params(axis='z', colors='red')\n    fig.canvas.draw()\n\n    for tick in ax.xaxis.get_major_ticks():\n        assert tick.tick1line._color == 'red'\n    for tick in ax.yaxis.get_major_ticks():\n        assert tick.tick1line._color == 'red'\n    for tick in ax.zaxis.get_major_ticks():\n        assert tick.tick1line._color == 'red'\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_ticklabel_format(fig_test, fig_ref):\n    axs = fig_test.subplots(4, 5, subplot_kw={\"projection\": \"3d\"})\n    for ax in axs.flat:\n        ax.set_xlim(1e7, 1e7 + 10)\n    for row, name in zip(axs, [\"x\", \"y\", \"z\", \"both\"]):\n        row[0].ticklabel_format(\n            axis=name, style=\"plain\")\n        row[1].ticklabel_format(\n            axis=name, scilimits=(-2, 2))\n        row[2].ticklabel_format(\n            axis=name, useOffset=not mpl.rcParams[\"axes.formatter.useoffset\"])\n        row[3].ticklabel_format(\n            axis=name, useLocale=not mpl.rcParams[\"axes.formatter.use_locale\"])\n        row[4].ticklabel_format(\n            axis=name,\n            useMathText=not mpl.rcParams[\"axes.formatter.use_mathtext\"])\n\n    def get_formatters(ax, names):\n        return [getattr(ax, name).get_major_formatter() for name in names]\n\n    axs = fig_ref.subplots(4, 5, subplot_kw={\"projection\": \"3d\"})\n    for ax in axs.flat:\n        ax.set_xlim(1e7, 1e7 + 10)\n    for row, names in zip(\n            axs, [[\"xaxis\"], [\"yaxis\"], [\"zaxis\"], [\"xaxis\", \"yaxis\", \"zaxis\"]]\n    ):\n        for fmt in get_formatters(row[0], names):\n            fmt.set_scientific(False)\n        for fmt in get_formatters(row[1], names):\n            fmt.set_powerlimits((-2, 2))\n        for fmt in get_formatters(row[2], names):\n            fmt.set_useOffset(not mpl.rcParams[\"axes.formatter.useoffset\"])\n        for fmt in get_formatters(row[3], names):\n            fmt.set_useLocale(not mpl.rcParams[\"axes.formatter.use_locale\"])\n        for fmt in get_formatters(row[4], names):\n            fmt.set_useMathText(\n                not mpl.rcParams[\"axes.formatter.use_mathtext\"])\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_quiver3D_smoke(fig_test, fig_ref):\n    pivot = \"middle\"\n    # Make the grid\n    x, y, z = np.meshgrid(\n        np.arange(-0.8, 1, 0.2),\n        np.arange(-0.8, 1, 0.2),\n        np.arange(-0.8, 1, 0.8)\n    )\n    u = v = w = np.ones_like(x)\n\n    for fig, length in zip((fig_ref, fig_test), (1, 1.0)):\n        ax = fig.add_subplot(projection=\"3d\")\n        ax.quiver(x, y, z, u, v, w, length=length, pivot=pivot)\n\n\n@image_comparison([\"minor_ticks.png\"], style=\"mpl20\")\ndef test_minor_ticks():\n    ax = plt.figure().add_subplot(projection=\"3d\")\n    ax.set_xticks([0.25], minor=True)\n    ax.set_xticklabels([\"quarter\"], minor=True)\n    ax.set_yticks([0.33], minor=True)\n    ax.set_yticklabels([\"third\"], minor=True)\n    ax.set_zticks([0.50], minor=True)\n    ax.set_zticklabels([\"half\"], minor=True)\n\n\n@mpl3d_image_comparison(['errorbar3d_errorevery.png'])\ndef test_errorbar3d_errorevery():\n    \"\"\"Tests errorevery functionality for 3D errorbars.\"\"\"\n    t = np.arange(0, 2*np.pi+.1, 0.01)\n    x, y, z = np.sin(t), np.cos(3*t), np.sin(5*t)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    estep = 15\n    i = np.arange(t.size)\n    zuplims = (i % estep == 0) & (i // estep % 3 == 0)\n    zlolims = (i % estep == 0) & (i // estep % 3 == 2)\n\n    ax.errorbar(x, y, z, 0.2, zuplims=zuplims, zlolims=zlolims,\n                errorevery=estep)\n\n\n@mpl3d_image_comparison(['errorbar3d.png'])\ndef test_errorbar3d():\n    \"\"\"Tests limits, color styling, and legend for 3D errorbars.\"\"\"\n    fig = plt.figure()\n    ax = fig.add_subplot(projection='3d')\n\n    d = [1, 2, 3, 4, 5]\n    e = [.5, .5, .5, .5, .5]\n    ax.errorbar(x=d, y=d, z=d, xerr=e, yerr=e, zerr=e, capsize=3,\n                zuplims=[False, True, False, True, True],\n                zlolims=[True, False, False, True, False],\n                yuplims=True,\n                ecolor='purple', label='Error lines')\n    ax.legend()\n\n\n@image_comparison(['stem3d.png'], style='mpl20')\ndef test_stem3d():\n    fig, axs = plt.subplots(2, 3, figsize=(8, 6),\n                            constrained_layout=True,\n                            subplot_kw={'projection': '3d'})\n\n    theta = np.linspace(0, 2*np.pi)\n    x = np.cos(theta - np.pi/2)\n    y = np.sin(theta - np.pi/2)\n    z = theta\n\n    for ax, zdir in zip(axs[0], ['x', 'y', 'z']):\n        ax.stem(x, y, z, orientation=zdir)\n        ax.set_title(f'orientation={zdir}')\n\n    x = np.linspace(-np.pi/2, np.pi/2, 20)\n    y = np.ones_like(x)\n    z = np.cos(x)\n\n    for ax, zdir in zip(axs[1], ['x', 'y', 'z']):\n        markerline, stemlines, baseline = ax.stem(\n            x, y, z,\n            linefmt='C4-.', markerfmt='C1D', basefmt='C2',\n            orientation=zdir)\n        ax.set_title(f'orientation={zdir}')\n        markerline.set(markerfacecolor='none', markeredgewidth=2)\n        baseline.set_linewidth(3)\n\n\n@image_comparison([\"equal_box_aspect.png\"], style=\"mpl20\")\ndef test_equal_box_aspect():\n    from itertools import product, combinations\n\n    fig = plt.figure()\n    ax = fig.add_subplot(projection=\"3d\")\n\n    # Make data\n    u = np.linspace(0, 2 * np.pi, 100)\n    v = np.linspace(0, np.pi, 100)\n    x = np.outer(np.cos(u), np.sin(v))\n    y = np.outer(np.sin(u), np.sin(v))\n    z = np.outer(np.ones_like(u), np.cos(v))\n\n    # Plot the surface\n    ax.plot_surface(x, y, z)\n\n    # draw cube\n    r = [-1, 1]\n    for s, e in combinations(np.array(list(product(r, r, r))), 2):\n        if np.sum(np.abs(s - e)) == r[1] - r[0]:\n            ax.plot3D(*zip(s, e), color=\"b\")\n\n    # Make axes limits\n    xyzlim = np.column_stack(\n        [ax.get_xlim3d(), ax.get_ylim3d(), ax.get_zlim3d()]\n    )\n    XYZlim = [min(xyzlim[0]), max(xyzlim[1])]\n    ax.set_xlim3d(XYZlim)\n    ax.set_ylim3d(XYZlim)\n    ax.set_zlim3d(XYZlim)\n    ax.axis('off')\n    ax.set_box_aspect((1, 1, 1))\n\n\ndef test_colorbar_pos():\n    num_plots = 2\n    fig, axs = plt.subplots(1, num_plots, figsize=(4, 5),\n                            constrained_layout=True,\n                            subplot_kw={'projection': '3d'})\n    for ax in axs:\n        p_tri = ax.plot_trisurf(np.random.randn(5), np.random.randn(5),\n                                np.random.randn(5))\n\n    cbar = plt.colorbar(p_tri, ax=axs, orientation='horizontal')\n\n    fig.canvas.draw()\n    # check that actually on the bottom\n    assert cbar.ax.get_position().extents[1] < 0.2\n\n\ndef test_shared_axes_retick():\n    fig = plt.figure()\n    ax1 = fig.add_subplot(211, projection=\"3d\")\n    ax2 = fig.add_subplot(212, projection=\"3d\", sharez=ax1)\n    ax1.plot([0, 1], [0, 1], [0, 2])\n    ax2.plot([0, 1], [0, 1], [0, 2])\n    ax1.set_zticks([-0.5, 0, 2, 2.5])\n    # check that setting ticks on a shared axis is synchronized\n    assert ax1.get_zlim() == (-0.5, 2.5)\n    assert ax2.get_zlim() == (-0.5, 2.5)\n\n\ndef test_pan():\n    \"\"\"Test mouse panning using the middle mouse button.\"\"\"\n\n    def convert_lim(dmin, dmax):\n        \"\"\"Convert min/max limits to center and range.\"\"\"\n        center = (dmin + dmax) / 2\n        range_ = dmax - dmin\n        return center, range_\n\n    ax = plt.figure().add_subplot(projection='3d')\n    ax.scatter(0, 0, 0)\n    ax.figure.canvas.draw()\n\n    x_center0, x_range0 = convert_lim(*ax.get_xlim3d())\n    y_center0, y_range0 = convert_lim(*ax.get_ylim3d())\n    z_center0, z_range0 = convert_lim(*ax.get_zlim3d())\n\n    # move mouse diagonally to pan along all axis.\n    ax._button_press(\n        mock_event(ax, button=MouseButton.MIDDLE, xdata=0, ydata=0))\n    ax._on_move(\n        mock_event(ax, button=MouseButton.MIDDLE, xdata=1, ydata=1))\n\n    x_center, x_range = convert_lim(*ax.get_xlim3d())\n    y_center, y_range = convert_lim(*ax.get_ylim3d())\n    z_center, z_range = convert_lim(*ax.get_zlim3d())\n\n    # Ranges have not changed\n    assert x_range == pytest.approx(x_range0)\n    assert y_range == pytest.approx(y_range0)\n    assert z_range == pytest.approx(z_range0)\n\n    # But center positions have\n    assert x_center != pytest.approx(x_center0)\n    assert y_center != pytest.approx(y_center0)\n    assert z_center != pytest.approx(z_center0)\n\n\n@pytest.mark.style('default')\n@check_figures_equal(extensions=[\"png\"])\ndef test_scalarmap_update(fig_test, fig_ref):\n\n    x, y, z = np.array((list(itertools.product(*[np.arange(0, 5, 1),\n                                                 np.arange(0, 5, 1),\n                                                 np.arange(0, 5, 1)])))).T\n    c = x + y\n\n    # test\n    ax_test = fig_test.add_subplot(111, projection='3d')\n    sc_test = ax_test.scatter(x, y, z, c=c, s=40, cmap='viridis')\n    # force a draw\n    fig_test.canvas.draw()\n    # mark it as \"stale\"\n    sc_test.changed()\n\n    # ref\n    ax_ref = fig_ref.add_subplot(111, projection='3d')\n    sc_ref = ax_ref.scatter(x, y, z, c=c, s=40, cmap='viridis')\n\n\ndef test_subfigure_simple():\n    # smoketest that subfigures can work...\n    fig = plt.figure()\n    sf = fig.subfigures(1, 2)\n    ax = sf[0].add_subplot(1, 1, 1, projection='3d')\n    ax = sf[1].add_subplot(1, 1, 1, projection='3d', label='other')\n"
    }
  ]
}