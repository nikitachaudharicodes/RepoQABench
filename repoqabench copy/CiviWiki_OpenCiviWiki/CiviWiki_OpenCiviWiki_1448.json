{
  "repo_name": "CiviWiki_OpenCiviWiki",
  "issue_id": "1448",
  "issue_description": "# Add \"Issues\" tab to the user profile view\n\nWe recently removed some features from the user Profile view and now want to reimplement them using only Django.\r\n\r\nThis task will be to add an \"Issues\" tab to the user profile view. The tab should link to a sub-path of the user profile so it is clear to the viewer that they are viewing Issues related to the user.\r\n\r\n## Task\r\nAll of these tasks should be done in the `accounts` app.\r\n\r\n- [ ] create a Django view called `UserIssues` (in `accounts/views.py`)\r\n- [ ] create a URL definition `profile/<str:username>/issues` that renders the `UserIssues` view ( in `accounts/urls.py`)\r\n- [ ] ensure the `UserIssues` view context contains a list of users that are following the relevant user (given via the `username` in the URL) \r\n    - note, it should be possible to get the issues via `user.issue_civis`\r\n- [ ] create a template to render the user issues - for now, extending `base.html` so we have consistent branding  (in `accounts/templates/accounts/user_civis.html`) \r\n    - unless the `profile_base.html` is available, in which case use that instead\r\n",
  "issue_comments": [
    {
      "id": 1292983872,
      "user": "8bitaby",
      "body": "Can you please assign this issue to me? \r\n"
    },
    {
      "id": 1304779324,
      "user": "werberger",
      "body": "Again, can I put my hand up for next in line? No pressure @8bitaby \r\n\r\n@brylie is it just spam if I put the same comment in the other two similar issues?"
    },
    {
      "id": 1398647471,
      "user": "Nehemiah60",
      "body": "Can I be next in line for this issue? I'd like to work on this issue"
    },
    {
      "id": 1399192066,
      "user": "brylie",
      "body": "Sure. Open a pull request when you've got some initial progress ðŸ™‚"
    },
    {
      "id": 1407439927,
      "user": "Nehemiah60",
      "body": "I would love your feedback on this. I made a PR and I am awaiting a response. If there is an issue, I would love your support in tackling it. Thanks."
    },
    {
      "id": 1407441725,
      "user": "brylie",
      "body": "What is the link to the PR you created?"
    },
    {
      "id": 1407443774,
      "user": "Nehemiah60",
      "body": "https://github.com/Nehemiah60/OpenCiviWiki/branches\r\n"
    },
    {
      "id": 1407448177,
      "user": "brylie",
      "body": "Ah, OK. That looks like the list of branches in your GitHub fork. Once you have committed some changes to the `issues-tab` branch, go ahead and follow the instructions for opening a GitHub pull request:\r\n\r\nhttps://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request"
    },
    {
      "id": 1407457835,
      "user": "Nehemiah60",
      "body": "I had forgotten to create a pull request after committing the changes. I will love the feedback, and also support if there is revision needed. Thanks."
    },
    {
      "id": 1407479431,
      "user": "Nehemiah60",
      "body": "Here it is...there were some issues I was trying to fix.\r\nhttps://github.com/CiviWiki/OpenCiviWiki/pull/1491"
    },
    {
      "id": 1407500480,
      "user": "Nehemiah60",
      "body": "I hope it can be accessed now."
    }
  ],
  "text_context": "# Add \"Issues\" tab to the user profile view\n\nWe recently removed some features from the user Profile view and now want to reimplement them using only Django.\r\n\r\nThis task will be to add an \"Issues\" tab to the user profile view. The tab should link to a sub-path of the user profile so it is clear to the viewer that they are viewing Issues related to the user.\r\n\r\n## Task\r\nAll of these tasks should be done in the `accounts` app.\r\n\r\n- [ ] create a Django view called `UserIssues` (in `accounts/views.py`)\r\n- [ ] create a URL definition `profile/<str:username>/issues` that renders the `UserIssues` view ( in `accounts/urls.py`)\r\n- [ ] ensure the `UserIssues` view context contains a list of users that are following the relevant user (given via the `username` in the URL) \r\n    - note, it should be possible to get the issues via `user.issue_civis`\r\n- [ ] create a template to render the user issues - for now, extending `base.html` so we have consistent branding  (in `accounts/templates/accounts/user_civis.html`) \r\n    - unless the `profile_base.html` is available, in which case use that instead\r\n\n\nCan you please assign this issue to me? \r\n\n\nAgain, can I put my hand up for next in line? No pressure @8bitaby \r\n\r\n@brylie is it just spam if I put the same comment in the other two similar issues?\n\nCan I be next in line for this issue? I'd like to work on this issue\n\nSure. Open a pull request when you've got some initial progress ðŸ™‚\n\nI would love your feedback on this. I made a PR and I am awaiting a response. If there is an issue, I would love your support in tackling it. Thanks.\n\nWhat is the link to the PR you created?\n\nhttps://github.com/Nehemiah60/OpenCiviWiki/branches\r\n\n\nAh, OK. That looks like the list of branches in your GitHub fork. Once you have committed some changes to the `issues-tab` branch, go ahead and follow the instructions for opening a GitHub pull request:\r\n\r\nhttps://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request\n\nI had forgotten to create a pull request after committing the changes. I will love the feedback, and also support if there is revision needed. Thanks.\n\nHere it is...there were some issues I was trying to fix.\r\nhttps://github.com/CiviWiki/OpenCiviWiki/pull/1491\n\nI hope it can be accessed now.",
  "pr_link": "https://github.com/CiviWiki/OpenCiviWiki/pull/1491",
  "code_context": [
    {
      "filename": "project/accounts/templates/accounts/account.html",
      "content": "{% extends \"base.html\" %}\n{% load static %}\n{% load i18n %}\n\n{% block extra_css %}\n<link type=\"text/css\" rel=\"stylesheet/less\" href=\"{% static 'less/base.less' %}\"/>\n<link type=\"text/css\" rel=\"stylesheet/less\" href=\"{% static 'less/utils.less' %}\"/>\n<link type=\"text/css\" rel=\"stylesheet/less\" href=\"{% static 'less/account.less' %}\"/>\n{% endblock extra_css %}\n\n{% block content %}\n<div id=\"account\">\n  <div id=\"sidebar-template\">\n    <div class=\"profile-image\">\n      <div class=\"big-image-cropper z-depth-1\">\n        <img class=\"responsive-img\" src={{ profile.profile_image_url }}>\n      </div>\n    </div>\n    <!-- Prevent users from following themselves. -->\n    {% if not profile == request.user.profile %}\n      {% if profile not in request.user.profile.following.all %}\n        <a href=\"{% url 'profile-follow' profile.user.username %}\" class=\"waves-effect waves-light btn follow-btn\" id=\"sidebar-follow-btn\">\n          follow\n        </a>\n      {% else %}\n          <a href=\"{% url 'profile-unfollow' profile.user.username %}\" class=\"waves-effect waves-light btn follow-btn\" id=\"sidebar-follow-btn\">\n            unfollow\n          </a>\n      {% endif %}\n    {% endif %}\n\n    <div class=\"user-info section\">\n      <div class=\"full-name\">\n        {{ profile.first_name }} {{ profile.last_name }}\n      </div>\n      <div class=\"username\">@{{ username }}</div>\n    </div>\n    <div class=\"transparent\">\n      <div class=\"card-content\">\n        <div class=\"section\">\n          <div class=\"section-title\">ABOUT ME</div>\n          <div class=\"divider\"></div>\n          <div class=\"about-me\">{{ profile.about_me }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n{% endblock content %}\n"
    },
    {
      "filename": "project/accounts/templates/accounts/user_civis.html",
      "content": "{% extends \"base.html\" %}\n{% load i18n %}\n\n{% block content %}\n{% for civi in civis %}\n<div class=\"civi-card white\" data-id=\"\">\n    <div class=\"civi-header-account white\">\n        <div class=\"civi-title-outer\">\n            <div class=\"civi-type gray-text\">{{ civi.c_type }}</div>\n            <div class=\"civi-title\">{{ civi.title }}</div>\n        </div>\n    </div>\n    <div class=\"civi-body\">\n        <div class=\"civi-body-inner\">{{ civi.body }}</div>\n    </div>\n</div>\n{% empty %}\n<div class=\"section no-state\">\n    <div class=\"container\">\n        <div class=\"section\">\n            <div class=\"center title-lato text\">No activity</div>\n        </div>\n    </div>\n</div>\n{% endfor %}\n\n{% for follower in followers%}\n<div class=\"col s12 m6\">\n    <div class=\"user-chip chip white\">\n        <div class=\"user-chip-contents\">\n            <a href=\"/profile/{{ follower.user.username }}/\">\n                <img src=\"{{ follower.profile_image_url }}\" alt=\"{{ followers.user.username }}\">\n                @{{ follower.user.username }}\n            </a>\n        </div>\n    </div>\n</div>\n{%endfor%}\n\n{% endblock content %}\n"
    },
    {
      "filename": "project/accounts/urls.py",
      "content": "from accounts.views import (\n    PasswordResetCompleteView,\n    PasswordResetConfirmView,\n    PasswordResetDoneView,\n    PasswordResetView,\n    ProfileActivationView,\n    ProfileFollow,\n    ProfileFollowing,\n    ProfileUnfollow,\n    RegisterView,\n    SettingsView,\n    UserCivis,\n    UserFollowers,\n    UserIssues,\n    UserProfileView,\n    expunge_user,\n)\nfrom django.contrib.auth import views as auth_views\nfrom django.urls import path\n\nurlpatterns = [\n    path(\n        \"login/\",\n        auth_views.LoginView.as_view(template_name=\"accounts/register/login.html\"),\n        name=\"accounts_login\",\n    ),\n    path(\"logout/\", auth_views.LogoutView.as_view(), name=\"accounts_logout\"),\n    path(\"register/\", RegisterView.as_view(), name=\"accounts_register\"),\n    path(\"settings/\", SettingsView.as_view(), name=\"accounts_settings\"),\n    path(\n        \"activate_account/<uidb64>/<token>/\",\n        ProfileActivationView.as_view(),\n        name=\"accounts_activate\",\n    ),\n    path(\"profile/<str:username>/\", UserProfileView.as_view(), name=\"profile\"),\n    path(\n        \"profile/<str:username>/follow\", ProfileFollow.as_view(), name=\"profile-follow\"\n    ),\n    path(\n        \"profile/<str:username>/followers\",\n        UserFollowers.as_view(),\n        name=\"user-followers\",\n    ),\n    path(\n        \"profile/<str:username>/unfollow\",\n        ProfileUnfollow.as_view(),\n        name=\"profile-unfollow\",\n    ),\n    path(\n        \"profile/<str:username>/following\",\n        ProfileFollowing.as_view(),\n        name=\"profile-following\",\n    ),\n    path(\n        \"profile/<str:username>/civis/\",\n        UserCivis.as_view(),\n        name=\"user-civis\",\n    ),\n    path(\n        \"profile/<str:username>/issues/\",\n        UserIssues.as_view(),\n        name=\"user-issues\",\n    ),\n    path(\n        \"accounts/password_reset/\",\n        PasswordResetView.as_view(),\n        name=\"accounts_password_reset\",\n    ),\n    path(\n        \"accounts/password_reset_done/\",\n        PasswordResetDoneView.as_view(),\n        name=\"accounts_password_reset_done\",\n    ),\n    path(\n        \"accounts/password_reset_confirm/<uidb64>/<token>/\",\n        PasswordResetConfirmView.as_view(),\n        name=\"accounts_password_reset_confirm\",\n    ),\n    path(\n        \"accounts/password_reset_complete/\",\n        PasswordResetCompleteView.as_view(),\n        name=\"accounts_password_reset_complete\",\n    ),\n    path(\"accounts/expunge/\", expunge_user, name=\"expunge_user\"),\n]\n"
    },
    {
      "filename": "project/accounts/views.py",
      "content": "\"\"\"\nClass based views.\n\nThis module will include views for the accounts app.\n\"\"\"\n\nfrom accounts.authentication import account_activation_token, send_activation_email\nfrom accounts.forms import ProfileEditForm, UserRegistrationForm\nfrom accounts.models import Profile\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model, login\nfrom django.contrib.auth import views as auth_views\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, redirect\nfrom django.template.response import TemplateResponse\nfrom django.urls import reverse, reverse_lazy\nfrom django.utils.encoding import force_str\nfrom django.utils.http import urlsafe_base64_decode\nfrom django.views import View\nfrom django.views.generic.edit import FormView, UpdateView\n\n\nclass ProfileFollow(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        # Prevent users from following themselves.\n        if request.user.username == kwargs[\"username\"]:\n            pass\n        else:\n            following_profile = Profile.objects.get(user__username=kwargs[\"username\"])\n\n            self.request.user.profile.following.add(following_profile)\n\n        redirect_to = reverse(\"profile\", kwargs={\"username\": kwargs[\"username\"]})\n\n        return HttpResponseRedirect(redirect_to)\n\n\nclass ProfileUnfollow(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        # Prevent users from following themselves.\n        if request.user.username == kwargs[\"username\"]:\n            pass\n        else:\n            following_profile = Profile.objects.get(user__username=kwargs[\"username\"])\n\n            self.request.user.profile.following.remove(following_profile)\n\n        redirect_to = reverse(\"profile\", kwargs={\"username\": kwargs[\"username\"]})\n\n        return HttpResponseRedirect(redirect_to)\n\n\nclass RegisterView(FormView):\n    \"\"\"\n    A form view that handles user registration.\n    \"\"\"\n\n    template_name = \"accounts/register/register.html\"\n    form_class = UserRegistrationForm\n    success_url = \"/\"\n\n    def _create_user(self, form):\n        username = form.cleaned_data[\"username\"]\n        password = form.cleaned_data[\"password\"]\n        email = form.cleaned_data[\"email\"]\n        user = get_user_model().objects.create_user(username, email, password)\n        return user\n\n    def _send_email(self, user):\n        domain = get_current_site(self.request).domain\n        send_activation_email(user, domain)\n\n    def _login(self, user):\n        login(self.request, user)\n\n    def form_valid(self, form):\n        user = self._create_user(form)\n\n        self._send_email(user)\n        self._login(user)\n\n        return super(RegisterView, self).form_valid(form)\n\n\nclass ProfileActivationView(View):\n    \"\"\"\n    This shows different views to the user when they are verifying\n    their account based on whether they are already verified or not.\n    \"\"\"\n\n    def get(self, request, uidb64, token):\n\n        try:\n            uid = force_str(urlsafe_base64_decode(uidb64))\n            user = get_user_model().objects.get(pk=uid)\n\n        except (TypeError, ValueError, OverflowError, get_user_model().DoesNotExist):\n            user = None\n\n        redirect_link = {\"href\": \"/\", \"label\": \"Back to Main\"}\n\n        template_var = {\n            \"link\": redirect_link,\n        }\n\n        if user is not None and account_activation_token.check_token(user, token):\n            profile = user.profile\n\n            if profile.is_verified:\n                template_var[\"title\"] = \"Email Already Verified\"\n                template_var[\"content\"] = \"You have already verified your email.\"\n            else:\n                profile.is_verified = True\n                profile.save()\n\n                template_var[\"title\"] = \"Email Verification Successful\"\n                template_var[\"content\"] = \"Thank you for verifying your email.\"\n        else:\n            # invalid link\n            template_var[\"title\"] = \"Email Verification Error\"\n            template_var[\"content\"] = \"Email could not be verified\"\n\n        return TemplateResponse(request, \"general_message.html\", template_var)\n\n\nclass PasswordResetView(auth_views.PasswordResetView):\n    template_name = \"accounts/users/password_reset.html\"\n    email_template_name = \"accounts/users/password_reset_email.html\"\n    subject_template_name = \"accounts/users/password_reset_subject.txt\"\n    from_email = settings.EMAIL_HOST_USER\n    success_url = reverse_lazy(\"accounts_password_reset_done\")\n\n\nclass PasswordResetDoneView(auth_views.PasswordResetDoneView):\n    template_name = \"accounts/users/password_reset_done.html\"\n\n\nclass PasswordResetConfirmView(auth_views.PasswordResetConfirmView):\n    template_name = \"accounts/users/password_reset_confirm.html\"\n    success_url = reverse_lazy(\"accounts_password_reset_complete\")\n\n\nclass PasswordResetCompleteView(auth_views.PasswordResetCompleteView):\n    template_name = \"accounts/users/password_reset_complete.html\"\n\n\nclass SettingsView(LoginRequiredMixin, UpdateView):\n    \"\"\"A form view to edit Profile\"\"\"\n\n    login_url = \"accounts_login\"\n    form_class = ProfileEditForm\n    success_url = reverse_lazy(\"accounts_settings\")\n    template_name = \"accounts/settings.html\"\n\n    def get_object(self, queryset=None):\n        return Profile.objects.get(user=self.request.user)\n\n    def get_initial(self):\n        profile = Profile.objects.get(user=self.request.user)\n        self.initial.update(\n            {\n                \"username\": profile.user.username,\n                \"email\": profile.user.email,\n                \"first_name\": profile.first_name or None,\n                \"last_name\": profile.last_name or None,\n                \"about_me\": profile.about_me or None,\n                \"profile_image\": profile.profile_image or None,\n            }\n        )\n        return super(SettingsView, self).get_initial()\n\n\nclass UserProfileView(LoginRequiredMixin, View):\n    \"\"\"A view that shows profile for authorized users\"\"\"\n\n    def get(self, request, username=None):\n        profile = get_object_or_404(Profile, user__username=username)\n\n        return TemplateResponse(\n            request,\n            \"account.html\",\n            {\n                \"profile\": profile,\n            },\n        )\n\n\nclass UserFollowers(LoginRequiredMixin, View):\n    \"\"\"A view that shows the followers for authorized users\"\"\"\n\n    def get(self, request, username=None):\n        profile = get_object_or_404(Profile, user__username=username)\n\n        return TemplateResponse(\n            request,\n            \"user_followers.html\",\n            {\n                \"profile\": profile,\n            },\n        )\n\n\nclass ProfileFollowing(LoginRequiredMixin, View):\n    \"\"\"\n    A view that shows list of profiles\n    that profile with given username is following\n    \"\"\"\n\n    def get(self, request, username=None):\n        profile = get_object_or_404(Profile, user__username=username)\n\n        return TemplateResponse(\n            request,\n            \"profile_following.html\",\n            {\n                \"profile\": profile,\n            },\n        )\n\n\nclass UserCivis(LoginRequiredMixin, View):\n    \"\"\"\n    A view that shows list of civis\n    that profile with given username created\n    \"\"\"\n\n    def get(self, request, username=None):\n        profile = get_object_or_404(Profile, user__username=username)\n        user = profile.user\n        civis = user.civis.all()\n\n        return TemplateResponse(\n            request,\n            \"user_civis.html\",\n            {\"profile\": profile, \"civis\": civis},\n        )\n\n\n@login_required\ndef expunge_user(request):\n    \"\"\"\n    Delete User Information\n    \"\"\"\n\n    user_model = get_user_model()\n    user = get_object_or_404(user_model, username=request.user.username)\n\n    profile = get_object_or_404(Profile, user=user)\n\n    # Expunge personally identifiable data in user\n    expunged_user_data = {\n        \"is_active\": False,\n        \"email\": \"\",\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"username\": f\"expunged-{ user.id }\",\n    }\n    user.__dict__.update(expunged_user_data)\n    user.save()\n\n    # Expunge personally identifiable data in profile\n    expunged_profile_data = {\n        \"first_name\": \"\",\n        \"last_name\": \"\",\n        \"about_me\": \"\",\n    }\n    profile.__dict__.update(expunged_profile_data)\n    profile.save()\n\n    return redirect(\"/\")\n\n\nclass UserIssues(LoginRequiredMixin, View):\n    def get(self, request, username=None):\n        profile = get_object_or_404(Profile, user__username=username)\n        user = profile.user\n        civis = user.civis.all()\n        followers = profile.followers.all()\n\n        return TemplateResponse(\n            request,\n            \"user_civis.html\",\n            {\"profile\": profile, \"followers\": followers, \"civis\": civis},\n        )\n"
    }
  ]
}