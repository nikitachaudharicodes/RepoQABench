{
  "repo_name": "oppia_oppia",
  "issue_id": "20430",
  "issue_description": "# [BUG]: 404 Error Displayed Instead of Redirecting to Login Page When Accessing Pages that require the user to be Logged In\n\n### Describe the bug\r\n\r\nWhen a user who is not signed-in attempts to visit pages directly via the URL that require the user to be signed-in, instead of being redirected to the sign-in page as expected, the user encounters a ‘Error 404 - Page Not Found’ message.\r\n\r\nIn reference to issue #20334, the same type of problem that happened in preferences page is already being worked on (edit: PR merged), however, it is important to solve this issue in general and address all the pages that would require login and display 404 instead of redirecting the user to the sign-in page. There are other pages where the same problem happens and could all be solved using a similar fix. Two of these pages are for example: feedback updates page and delete account page.\r\n\r\n### URL of the page where the issue is observed.\r\n\r\nhttp://localhost:8181/feedback-updates and http://localhost:8181/delete-account (while the user is not logged-in)\r\n\r\n### Steps To Reproduce\r\n\r\n1. Log out of any current sessions.\r\n2. Attempt to visit the pages directly by entering the URL in the address bar.\r\n\r\n### Expected Behavior\r\n\r\nWhen a user who is not signed-in tries to access any of these pages, they should be redirected to the sign-in page.\r\n\r\n### Screenshots/Videos\r\n\r\n\r\nhttps://github.com/oppia/oppia/assets/119136653/4bb52bb2-c004-461f-b0b4-0b804101f7aa\r\n\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nChrome\r\n\r\n### Browser version\r\n\r\n125.0.6422.142\r\n\r\n### Additional context\r\n\r\nFor anyone that decides to take up this issue i will leave here an explanation of a possible fix that is being used to adress the same type of problem like the one in issue #20334 since the code of these pages follow a similar logic. I will show code changes made in preferences-page-root.component.ts and preferences-page-root.component.spec.ts as an example. \r\n\r\nTo address the issue similar to #20334, I'll show a potential fix currently under review(edit: PR merged). This example includes code changes made to preferences-page-root.component.ts and preferences-page-root.component.spec.ts. You can apply similar modifications to feedback-updates-page-root.component.ts and feedback-updates-page-root.component.spec.ts to resolve the issue on the feedback updates page. The same approach applies to delete-account-page-root.component.ts and delete-account-page-root.component.spec.ts for the delete account page and other similar pages.\r\n\r\nThe error page is shown instead of redirecting the user to the login page is because, looking at the corresponding .component.ts files of these pages, if the validateCanManageOwnAccount() throws an error (which happens if the user is not logged in), the error page is shown with 'errorPageIsShown = true'. Instead of this you will want to to redirect the user to the login page and not show the error page anymore, without forgetting to use a proper return_url parameter which will change from page to page (the page where the user is supposed to return to after the login is made):\r\n\r\n![preferences-page-root component ts](https://github.com/oppia/oppia/assets/119136653/b696d913-b11a-45d4-a87b-9d51156b11aa)\r\n\r\nIn addition to this you will also need to update one of the test cases accordingly. In these pages you would tipically find a 'should initialize and show error page when server respond with error' test case in the corresponding .component.spec.ts files. This test case verifies that the error page is shown in case of error, however, with the changes being made until now it is not supposed to show an error page in case of error, instead we should verify if the user is indeed being redirected to the login page:\r\n\r\n![preferences-page-root-component spec ts](https://github.com/oppia/oppia/assets/119136653/a587dbb5-fdd6-4a0c-998d-33e150ecde3e)\r\n\r\nFeel free to use this type of fix since it was approved for #20334.\r\n\r\n\r\n### Tips for developers\r\n\r\nBefore addressing the bug, please identify which PR caused the issue (you can follow the steps [here](https://github.com/oppia/oppia/wiki/How-to-find-the-commit-which-introduced-a-bug)). If you identify the PR, comment on the issue with a link to it. If not, mention the commit hash of the oldest commit you saw the bug on (and the month and year it was made in).\r\n\r\nThen, please leave a comment with details of the approach that you plan to take to fix the issue (see [example](https://github.com/oppia/oppia/issues/19157#issuecomment-1858788463)).\r\n\r\n**Note:** If this is your first Oppia issue, please make sure to follow our guidelines for [choosing an issue](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue) and [setting things up](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up). You will also need to show a demo of the fix working correctly on your local machine. Thanks!\r\n",
  "issue_comments": [
    {
      "id": 2383089259,
      "user": "KartikSuryavanshi",
      "body": "Hi @GuilhermeRoLopes @seanlip \r\nI would like to request the assignment of the issue related to handling redirects for users who are not signed in when attempting to access protected pages, which currently results in a ‘404 - Page Not Found’ error.\r\n\r\nIssue Details:\r\nAffected Pages: Feedback updates page, Delete account page, and potentially others.\r\nCurrent Behavior: Users encounter a 404 error instead of being redirected to the sign-in page.\r\n\r\nProposed Solution:\r\n\r\n1)Component Changes:\r\nIn feedback-updates-page-root.component.ts and delete-account-page-root.component.ts, update the logic to redirect unauthenticated users to the sign-in page using a return_url parameter instead of showing an error page.\r\nExample Changes in feedback-updates-page-root.component.ts:\r\n\r\n// Pseudocode Example\r\nif (!isUserAuthenticated()) {\r\n    this.router.navigate(['/sign-in'], { queryParams: { return_url: currentUrl } });\r\n    return;\r\n}\r\n\r\n2)Test Case Updates:\r\nModify the corresponding .spec.ts files to verify that unauthenticated users are redirected to the sign-in page instead of showing an error page.\r\nExample Changes in feedback-updates-page-root.component.spec.ts:\r\n\r\nit('should redirect to sign-in page when user is not authenticated', () => {\r\n    // Setup mock for isUserAuthenticated() to return false\r\n    // Expect the router to navigate to the sign-in page with return_url\r\n});\r\n\r\nBenefits:-\r\nThis solution enhances user experience by ensuring a consistent and clear redirect to the sign-in page across all relevant pages.\r\n\r\nNext Steps:\r\nI would like to request your approval to proceed with these changes.\r\n\r\nThank you for considering my request!\r\n\r\nBest regards,\r\nKartik Suryavanshi"
    },
    {
      "id": 2391745265,
      "user": "seanlip",
      "body": "@KartikSuryavanshi Thanks, could you please show a video demonstrating that these changes work correctly on your local machine?"
    },
    {
      "id": 2391808728,
      "user": "KartikSuryavanshi",
      "body": "Hi @seanlip \r\nCan we create a separate auth.ts file? Instead of duplicating the authentication logic across multiple components (like feedback-updates-page-root.component.ts and delete-account-page-root.component.ts), this file can centralize the authentication logic, improving maintainability and reducing code duplication.In feedback-updates-page-root.component.ts and delete-account-page-root.component.ts, import the handleUnauthenticatedUser function from auth.ts and replace the current logic with this centralized function."
    },
    {
      "id": 2391825765,
      "user": "seanlip",
      "body": "Yup, seems reasonable to me. If you can point to another example that shows this is standard practice, so much the better.\r\n\r\n/cc @DubeySandeep @srijanreddy98 in case they have any thoughts, too!"
    },
    {
      "id": 2391853843,
      "user": "KartikSuryavanshi",
      "body": "Yes ,As for another example, consider how we handle API requests. By creating a dedicated service file, such as api.service.ts, we can encapsulate all our API logic in one place. This standard practice allows for easier updates and debugging, as well as ensuring consistent error handling across different components that make API calls."
    },
    {
      "id": 2391868828,
      "user": "seanlip",
      "body": "@KartikSuryavanshi Sorry, I meant, point to an example in another well-known project that uses Angular 2+ routing, or a documentation page that uses this pattern."
    },
    {
      "id": 2391914765,
      "user": "KartikSuryavanshi",
      "body": "Hey @seanlip, https://github.com/angular/components/blob/main/src/dev-app/routes.ts please have a look at this repo; it is used for centralized routing.\r\n\r\n"
    },
    {
      "id": 2391919931,
      "user": "seanlip",
      "body": "@KartikSuryavanshi Again, to be clear, I'm looking for an example that supports your proposal of having an auth.ts file. There isn't one mentioned in the file you linked to."
    },
    {
      "id": 2391980401,
      "user": "KartikSuryavanshi",
      "body": "I was actually focusing on centralizing routes rather than the auth.ts file. Please check out this repo: [github.com/angular/angularfire/blob/main/samples/advanced/src/app/auth/auth.component.ts](https://github.com/angular/angularfire/blob/main/samples/advanced/src/app/auth/auth.component.ts).\r\n\r\nThe path  referenced (auth.component.ts) in the AngularFire repo is more focused on the UI side of authentication, handling user interactions related to authentication. However, it doesn't fully align with the idea of centralizing authentication logic in a reusable utility (such as an auth.ts file) for shared logic like handleUnauthenticatedUser.\r\nThank you"
    },
    {
      "id": 2393185896,
      "user": "seanlip",
      "body": "@KartikSuryavanshi Thanks for taking a look. I had a chat with @DubeySandeep -- it seems we already have such a similar centralized structure, so we shouldn't need to introduce a new one. \r\n\r\nCan you take a look at app.routing.module.ts and see whether the issue here is the missing `canActivate: [IsLoggedInGuard]` in the relevant paths? If so then the fix would be comparatively straightforward, but please show a video demonstrating that it works properly. (Note that you might also need to update the logic within the page itself in order to match how we do this for other handlers that work properly -- look for other pages in app.routing.module.ts that use this auth guard.)"
    },
    {
      "id": 2393287842,
      "user": "KartikSuryavanshi",
      "body": "Thanks for the clarification. I’ll check app.routing.module.ts for missing canActivate: [IsLoggedInGuard] and implement the fix if needed. I’ll update the logic to match other pages using this guard and share a video showing the fix works."
    },
    {
      "id": 2394947836,
      "user": "KartikSuryavanshi",
      "body": "Hey @seanlip @HardikGoyal2003,\r\n\r\nI’ve successfully resolved the issue described in the expected behavior. Now, when a user who is not signed in tries to access any of the specified pages, they are correctly redirected to the sign-in page, as expected.\r\n\r\nCould you kindly review the changes? If everything looks good, please assign this issue to me so I can proceed with creating a PR.\r\n\r\nThank you!\r\n\r\nhttps://github.com/user-attachments/assets/10c89b41-37f4-4b6d-b480-53a581c5e2aa\r\n\r\n"
    },
    {
      "id": 2394967204,
      "user": "HardikGoyal2003",
      "body": "@KartikSuryavanshi This looks good, assigning it to you!!"
    },
    {
      "id": 2395017168,
      "user": "KartikSuryavanshi",
      "body": "Hey @HardikGoyal2003,\r\n\r\nI’ve just made a pull request addressing the bug related to unauthenticated users encountering a 404 error instead of being redirected to the sign-in page. It also resolves the issue for other pages like the feedback updates and delete account pages. Could you please review the changes and provide feedback?\r\n\r\nThank you!\r\n\r\n"
    },
    {
      "id": 2395018635,
      "user": "HardikGoyal2003",
      "body": "Hey @KartikSuryavanshi, it's already assigned to a reviewer who will handle it. I noticed your PR is changing files beyond core/templates/pages/oppia-root/routing/app.routing.module.ts. Why is it so?\r\n\r\nPlease ensure the essential checklist is marked in your PR description. Thanks!"
    },
    {
      "id": 2395021505,
      "user": "KartikSuryavanshi",
      "body": "Hey @HardikGoyal2003,\r\n\r\nYes, actually the changes were made only in the core/templates/pages/oppia-root/routing/app.routing.module.ts. It looks like there might have been an oversight in the files that appear in the PR. I'll double-check to ensure only the intended files are part of the PR.\r\n\r\nThanks for pointing it out, and I'll also make sure the essential checklist is marked.\r\n\r\n"
    },
    {
      "id": 2531351368,
      "user": "HardikGoyal2003",
      "body": "Closing this issue as fixed by https://github.com/oppia/oppia/pull/21164"
    }
  ],
  "text_context": "# [BUG]: 404 Error Displayed Instead of Redirecting to Login Page When Accessing Pages that require the user to be Logged In\n\n### Describe the bug\r\n\r\nWhen a user who is not signed-in attempts to visit pages directly via the URL that require the user to be signed-in, instead of being redirected to the sign-in page as expected, the user encounters a ‘Error 404 - Page Not Found’ message.\r\n\r\nIn reference to issue #20334, the same type of problem that happened in preferences page is already being worked on (edit: PR merged), however, it is important to solve this issue in general and address all the pages that would require login and display 404 instead of redirecting the user to the sign-in page. There are other pages where the same problem happens and could all be solved using a similar fix. Two of these pages are for example: feedback updates page and delete account page.\r\n\r\n### URL of the page where the issue is observed.\r\n\r\nhttp://localhost:8181/feedback-updates and http://localhost:8181/delete-account (while the user is not logged-in)\r\n\r\n### Steps To Reproduce\r\n\r\n1. Log out of any current sessions.\r\n2. Attempt to visit the pages directly by entering the URL in the address bar.\r\n\r\n### Expected Behavior\r\n\r\nWhen a user who is not signed-in tries to access any of these pages, they should be redirected to the sign-in page.\r\n\r\n### Screenshots/Videos\r\n\r\n\r\nhttps://github.com/oppia/oppia/assets/119136653/4bb52bb2-c004-461f-b0b4-0b804101f7aa\r\n\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nChrome\r\n\r\n### Browser version\r\n\r\n125.0.6422.142\r\n\r\n### Additional context\r\n\r\nFor anyone that decides to take up this issue i will leave here an explanation of a possible fix that is being used to adress the same type of problem like the one in issue #20334 since the code of these pages follow a similar logic. I will show code changes made in preferences-page-root.component.ts and preferences-page-root.component.spec.ts as an example. \r\n\r\nTo address the issue similar to #20334, I'll show a potential fix currently under review(edit: PR merged). This example includes code changes made to preferences-page-root.component.ts and preferences-page-root.component.spec.ts. You can apply similar modifications to feedback-updates-page-root.component.ts and feedback-updates-page-root.component.spec.ts to resolve the issue on the feedback updates page. The same approach applies to delete-account-page-root.component.ts and delete-account-page-root.component.spec.ts for the delete account page and other similar pages.\r\n\r\nThe error page is shown instead of redirecting the user to the login page is because, looking at the corresponding .component.ts files of these pages, if the validateCanManageOwnAccount() throws an error (which happens if the user is not logged in), the error page is shown with 'errorPageIsShown = true'. Instead of this you will want to to redirect the user to the login page and not show the error page anymore, without forgetting to use a proper return_url parameter which will change from page to page (the page where the user is supposed to return to after the login is made):\r\n\r\n![preferences-page-root component ts](https://github.com/oppia/oppia/assets/119136653/b696d913-b11a-45d4-a87b-9d51156b11aa)\r\n\r\nIn addition to this you will also need to update one of the test cases accordingly. In these pages you would tipically find a 'should initialize and show error page when server respond with error' test case in the corresponding .component.spec.ts files. This test case verifies that the error page is shown in case of error, however, with the changes being made until now it is not supposed to show an error page in case of error, instead we should verify if the user is indeed being redirected to the login page:\r\n\r\n![preferences-page-root-component spec ts](https://github.com/oppia/oppia/assets/119136653/a587dbb5-fdd6-4a0c-998d-33e150ecde3e)\r\n\r\nFeel free to use this type of fix since it was approved for #20334.\r\n\r\n\r\n### Tips for developers\r\n\r\nBefore addressing the bug, please identify which PR caused the issue (you can follow the steps [here](https://github.com/oppia/oppia/wiki/How-to-find-the-commit-which-introduced-a-bug)). If you identify the PR, comment on the issue with a link to it. If not, mention the commit hash of the oldest commit you saw the bug on (and the month and year it was made in).\r\n\r\nThen, please leave a comment with details of the approach that you plan to take to fix the issue (see [example](https://github.com/oppia/oppia/issues/19157#issuecomment-1858788463)).\r\n\r\n**Note:** If this is your first Oppia issue, please make sure to follow our guidelines for [choosing an issue](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue) and [setting things up](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up). You will also need to show a demo of the fix working correctly on your local machine. Thanks!\r\n\n\nHi @GuilhermeRoLopes @seanlip \r\nI would like to request the assignment of the issue related to handling redirects for users who are not signed in when attempting to access protected pages, which currently results in a ‘404 - Page Not Found’ error.\r\n\r\nIssue Details:\r\nAffected Pages: Feedback updates page, Delete account page, and potentially others.\r\nCurrent Behavior: Users encounter a 404 error instead of being redirected to the sign-in page.\r\n\r\nProposed Solution:\r\n\r\n1)Component Changes:\r\nIn feedback-updates-page-root.component.ts and delete-account-page-root.component.ts, update the logic to redirect unauthenticated users to the sign-in page using a return_url parameter instead of showing an error page.\r\nExample Changes in feedback-updates-page-root.component.ts:\r\n\r\n// Pseudocode Example\r\nif (!isUserAuthenticated()) {\r\n    this.router.navigate(['/sign-in'], { queryParams: { return_url: currentUrl } });\r\n    return;\r\n}\r\n\r\n2)Test Case Updates:\r\nModify the corresponding .spec.ts files to verify that unauthenticated users are redirected to the sign-in page instead of showing an error page.\r\nExample Changes in feedback-updates-page-root.component.spec.ts:\r\n\r\nit('should redirect to sign-in page when user is not authenticated', () => {\r\n    // Setup mock for isUserAuthenticated() to return false\r\n    // Expect the router to navigate to the sign-in page with return_url\r\n});\r\n\r\nBenefits:-\r\nThis solution enhances user experience by ensuring a consistent and clear redirect to the sign-in page across all relevant pages.\r\n\r\nNext Steps:\r\nI would like to request your approval to proceed with these changes.\r\n\r\nThank you for considering my request!\r\n\r\nBest regards,\r\nKartik Suryavanshi\n\n@KartikSuryavanshi Thanks, could you please show a video demonstrating that these changes work correctly on your local machine?\n\nHi @seanlip \r\nCan we create a separate auth.ts file? Instead of duplicating the authentication logic across multiple components (like feedback-updates-page-root.component.ts and delete-account-page-root.component.ts), this file can centralize the authentication logic, improving maintainability and reducing code duplication.In feedback-updates-page-root.component.ts and delete-account-page-root.component.ts, import the handleUnauthenticatedUser function from auth.ts and replace the current logic with this centralized function.\n\nYup, seems reasonable to me. If you can point to another example that shows this is standard practice, so much the better.\r\n\r\n/cc @DubeySandeep @srijanreddy98 in case they have any thoughts, too!\n\nYes ,As for another example, consider how we handle API requests. By creating a dedicated service file, such as api.service.ts, we can encapsulate all our API logic in one place. This standard practice allows for easier updates and debugging, as well as ensuring consistent error handling across different components that make API calls.\n\n@KartikSuryavanshi Sorry, I meant, point to an example in another well-known project that uses Angular 2+ routing, or a documentation page that uses this pattern.\n\nHey @seanlip, https://github.com/angular/components/blob/main/src/dev-app/routes.ts please have a look at this repo; it is used for centralized routing.\r\n\r\n\n\n@KartikSuryavanshi Again, to be clear, I'm looking for an example that supports your proposal of having an auth.ts file. There isn't one mentioned in the file you linked to.\n\nI was actually focusing on centralizing routes rather than the auth.ts file. Please check out this repo: [github.com/angular/angularfire/blob/main/samples/advanced/src/app/auth/auth.component.ts](https://github.com/angular/angularfire/blob/main/samples/advanced/src/app/auth/auth.component.ts).\r\n\r\nThe path  referenced (auth.component.ts) in the AngularFire repo is more focused on the UI side of authentication, handling user interactions related to authentication. However, it doesn't fully align with the idea of centralizing authentication logic in a reusable utility (such as an auth.ts file) for shared logic like handleUnauthenticatedUser.\r\nThank you\n\n@KartikSuryavanshi Thanks for taking a look. I had a chat with @DubeySandeep -- it seems we already have such a similar centralized structure, so we shouldn't need to introduce a new one. \r\n\r\nCan you take a look at app.routing.module.ts and see whether the issue here is the missing `canActivate: [IsLoggedInGuard]` in the relevant paths? If so then the fix would be comparatively straightforward, but please show a video demonstrating that it works properly. (Note that you might also need to update the logic within the page itself in order to match how we do this for other handlers that work properly -- look for other pages in app.routing.module.ts that use this auth guard.)\n\nThanks for the clarification. I’ll check app.routing.module.ts for missing canActivate: [IsLoggedInGuard] and implement the fix if needed. I’ll update the logic to match other pages using this guard and share a video showing the fix works.\n\nHey @seanlip @HardikGoyal2003,\r\n\r\nI’ve successfully resolved the issue described in the expected behavior. Now, when a user who is not signed in tries to access any of the specified pages, they are correctly redirected to the sign-in page, as expected.\r\n\r\nCould you kindly review the changes? If everything looks good, please assign this issue to me so I can proceed with creating a PR.\r\n\r\nThank you!\r\n\r\nhttps://github.com/user-attachments/assets/10c89b41-37f4-4b6d-b480-53a581c5e2aa\r\n\r\n\n\n@KartikSuryavanshi This looks good, assigning it to you!!\n\nHey @HardikGoyal2003,\r\n\r\nI’ve just made a pull request addressing the bug related to unauthenticated users encountering a 404 error instead of being redirected to the sign-in page. It also resolves the issue for other pages like the feedback updates and delete account pages. Could you please review the changes and provide feedback?\r\n\r\nThank you!\r\n\r\n\n\nHey @KartikSuryavanshi, it's already assigned to a reviewer who will handle it. I noticed your PR is changing files beyond core/templates/pages/oppia-root/routing/app.routing.module.ts. Why is it so?\r\n\r\nPlease ensure the essential checklist is marked in your PR description. Thanks!\n\nHey @HardikGoyal2003,\r\n\r\nYes, actually the changes were made only in the core/templates/pages/oppia-root/routing/app.routing.module.ts. It looks like there might have been an oversight in the files that appear in the PR. I'll double-check to ensure only the intended files are part of the PR.\r\n\r\nThanks for pointing it out, and I'll also make sure the essential checklist is marked.\r\n\r\n\n\nClosing this issue as fixed by https://github.com/oppia/oppia/pull/21164",
  "pr_link": "https://github.com/oppia/oppia/pull/21164",
  "code_context": [
    {
      "filename": "core/templates/pages/oppia-root/routing/app.routing.module.ts",
      "content": "// Copyright 2021 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Root routing module.\n */\n\nimport {APP_BASE_HREF} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {Route, RouterModule} from '@angular/router';\nimport {AppConstants} from 'app.constants';\nimport {IsLoggedInGuard} from 'pages/lightweight-oppia-root/routing/guards/is-logged-in.guard';\nimport {IsNewLessonPlayerGuard} from 'pages/exploration-player-page/new-lesson-player/lesson-player-flag.guard';\n\n// All paths must be defined in constants.ts file.\n// Otherwise pages will have false 404 status code.\nconst routes: Route[] = [\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.SUBTOPIC_VIEWER.ROUTE,\n    loadChildren: () =>\n      import('pages/subtopic-viewer-page/subtopic-viewer-page.module').then(\n        m => m.SubtopicViewerPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.ADMIN.ROUTE,\n    loadChildren: () =>\n      import('pages/admin-page/admin-page.module').then(m => m.AdminPageModule),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.COLLECTION_EDITOR.ROUTE,\n    loadChildren: () =>\n      import('pages/collection-editor-page/collection-editor-page.module').then(\n        m => m.CollectionEditorPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.STORY_EDITOR.ROUTE,\n    loadChildren: () =>\n      import('pages/story-editor-page/story-editor-page.module').then(\n        m => m.StoryEditorPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.MODERATOR.ROUTE,\n    loadChildren: () =>\n      import('pages/moderator-page/moderator-page.module').then(\n        m => m.ModeratorPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_DASHBOARD.ROUTE,\n    loadChildren: () =>\n      import('pages/blog-dashboard-page/blog-dashboard-page.module').then(\n        m => m.BlogDashboardPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_ADMIN.ROUTE,\n    loadChildren: () =>\n      import('pages/blog-admin-page/blog-admin-page.module').then(\n        m => m.BlogAdminPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.EMAIL_DASHBOARD.ROUTE,\n    loadChildren: () =>\n      import('pages/email-dashboard-pages/email-dashboard-page.module').then(\n        m => m.EmailDashboardPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.DIAGNOSTIC_TEST_PLAYER\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/diagnostic-test-player-page/diagnostic-test-player-page.module'\n      ).then(m => m.DiagnosticTestPlayerPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.CLASSROOM.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/classroom-page/classroom-page.module').then(\n        m => m.ClassroomPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.CLASSROOMS.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/classrooms-page/classrooms-page.module').then(\n        m => m.ClassroomsPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.CURRICULUM_ADMIN.ROUTE,\n    loadChildren: () =>\n      import('pages/classroom-admin-page/classroom-admin-page.module').then(\n        m => m.ClassroomAdminPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LEARNER_DASHBOARD.ROUTE,\n    loadChildren: () =>\n      import('pages/learner-dashboard-page/learner-dashboard-page.module').then(\n        m => m.LearnerDashboardPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LEARNER_GROUP_EDITOR\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/learner-group-pages/edit-group/edit-learner-group-page.module'\n      ).then(m => m.EditLearnerGroupPageModule),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.FACILITATOR_DASHBOARD\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/facilitator-dashboard-page/facilitator-dashboard-page.module'\n      ).then(m => m.FacilitatorDashboardPageModule),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LEARNER_GROUP_CREATOR\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/learner-group-pages/create-group/create-learner-group-page.module'\n      ).then(m => m.CreateLearnerGroupPageModule),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.ABOUT.ROUTE,\n    loadChildren: () =>\n      import('pages/about-page/about-page.module').then(m => m.AboutPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND\n      .CONTRIBUTOR_DASHBOARD_ADMIN.ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/contributor-dashboard-admin-page' +\n          '/contributor-dashboard-admin-page.module'\n      ).then(m => m.ContributorDashboardAdminPageModule),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.EXPLORATION_PLAYER.ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/exploration-player-page/exploration-player-page.module'\n      ).then(m => m.ExplorationPlayerPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.EXPLORATION_PLAYER_EMBED\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/exploration-player-page/exploration-player-page.module'\n      ).then(m => m.ExplorationPlayerPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.NEW_LESSON_PLAYER.ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/exploration-player-page/new-lesson-player' +\n          '/lesson-player-page.module'\n      ).then(m => m.NewLessonPlayerPageModule),\n    canActivate: [IsNewLessonPlayerGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.ANDROID.ROUTE,\n    loadChildren: () =>\n      import('pages/android-page/android-page.module').then(\n        m => m.AndroidPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.DELETE_ACCOUNT.ROUTE,\n    pathMatch: 'full',\n    canActivate: [IsLoggedInGuard],\n    loadChildren: () =>\n      import('pages/delete-account-page/delete-account-page.module').then(\n        m => m.DeleteAccountPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PENDING_ACCOUNT_DELETION\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/pending-account-deletion-page/' +\n          'pending-account-deletion-page.module'\n      ).then(m => m.PendingAccountDeletionPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PREFERENCES.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/preferences-page/preferences-page.module').then(\n        m => m.PreferencesPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.FEEDBACK_UPDATES.ROUTE,\n    pathMatch: 'full',\n    canActivate: [IsLoggedInGuard],\n    loadChildren: () =>\n      import('pages/feedback-updates-page/feedback-updates-page.module').then(\n        m => m.FeedbackUpdatesPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PROFILE.ROUTE,\n    loadChildren: () =>\n      import('pages/profile-page/profile-page.module').then(\n        m => m.ProfilePageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.RELEASE_COORDINATOR_PAGE\n      .ROUTE,\n    loadChildren: () =>\n      import(\n        'pages/release-coordinator-page/release-coordinator-page.module'\n      ).then(m => m.ReleaseCoordinatorPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LIBRARY_INDEX.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/library-page/library-page.module').then(\n        m => m.LibraryPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LIBRARY_SEARCH.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/library-page/library-page.module').then(\n        m => m.LibraryPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LIBRARY_RECENTLY_PUBLISHED\n      .ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/library-page/library-page.module').then(\n        m => m.LibraryPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LIBRARY_TOP_RATED.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/library-page/library-page.module').then(\n        m => m.LibraryPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.STORY_VIEWER.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/story-viewer-page/story-viewer-page.module').then(\n        m => m.StoryViewerPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.CONTACT.ROUTE,\n    loadChildren: () =>\n      import('pages/contact-page/contact-page.module').then(\n        m => m.ContactPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.DONATE.ROUTE,\n    loadChildren: () =>\n      import('pages/donate-page/donate-page.module').then(\n        m => m.DonatePageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.GET_STARTED.ROUTE,\n    loadChildren: () =>\n      import('pages/get-started-page/get-started-page.module').then(\n        m => m.GetStartedPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LICENSE.ROUTE,\n    loadChildren: () =>\n      import('pages/license-page/license.module').then(\n        m => m.LicensePageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LOGIN.ROUTE,\n    loadChildren: () =>\n      import('pages/login-page/login-page.module').then(m => m.LoginPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LOGOUT.ROUTE,\n    loadChildren: () =>\n      import('pages/logout-page/logout-page.module').then(\n        m => m.LogoutPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PARTNERSHIPS.ROUTE,\n    loadChildren: () =>\n      import('pages/partnerships-page/partnerships-page.module').then(\n        m => m.PartnershipsPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PLAYBOOK.ROUTE,\n    loadChildren: () =>\n      import('pages/participation-playbook/playbook.module').then(\n        m => m.PlaybookPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.PRIVACY.ROUTE,\n    loadChildren: () =>\n      import('pages/privacy-page/privacy-page.module').then(\n        m => m.PrivacyPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.SIGNUP.ROUTE,\n    loadChildren: () =>\n      import('pages/signup-page/signup-page.module').then(\n        m => m.SignupPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.TEACH.ROUTE,\n    loadChildren: () =>\n      import('pages/teach-page/teach-page.module').then(m => m.TeachPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.TERMS.ROUTE,\n    loadChildren: () =>\n      import('pages/terms-page/terms-page.module').then(m => m.TermsPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.THANKS.ROUTE,\n    loadChildren: () =>\n      import('pages/thanks-page/thanks-page.module').then(\n        m => m.ThanksPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.VOLUNTEER.ROUTE,\n    loadChildren: () =>\n      import('pages/volunteer-page/volunteer-page.module').then(\n        m => m.VolunteerPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.LEARNER_GROUP_VIEWER\n      .ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import(\n        'pages/learner-group-pages/view-group/view-learner-group-page.module'\n      ).then(m => m.ViewLearnerGroupPageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_HOMEPAGE.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/blog-home-page/blog-home-page.module').then(\n        m => m.BlogHomePageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_HOMEPAGE_SEARCH\n      .ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/blog-home-page/blog-home-page.module').then(\n        m => m.BlogHomePageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_AUTHOR_PROFILE_PAGE\n      .ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import(\n        'pages/blog-author-profile-page/blog-author-profile-page.module'\n      ).then(m => m.BlogAuthorProfilePageModule),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.BLOG_POST_PAGE.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/blog-post-page/blog-post-page.module').then(\n        m => m.BlogPostPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.VOICEOVER_ADMIN.ROUTE,\n    loadChildren: () =>\n      import('pages/voiceover-admin-page/voiceover-admin-page.module').then(\n        m => m.VoiceoverAdminPageModule\n      ),\n    canActivate: [IsLoggedInGuard],\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.COLLECTION_PLAYER.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/collection-player-page/collection-player-page.module').then(\n        m => m.CollectionPlayerPageModule\n      ),\n  },\n  {\n    path: AppConstants.PAGES_REGISTERED_WITH_FRONTEND.REVIEW_TEST.ROUTE,\n    pathMatch: 'full',\n    loadChildren: () =>\n      import('pages/review-test-page/review-test-page.module').then(\n        m => m.ReviewTestPageModule\n      ),\n  },\n];\n\n// Register stewards landing pages.\nfor (let i = 0; i < AppConstants.STEWARDS_LANDING_PAGE.ROUTES.length; i++) {\n  // Redirect old stewards landing pages to volunteer page.\n  routes.push({\n    path: AppConstants.STEWARDS_LANDING_PAGE.ROUTES[i],\n    loadChildren: () =>\n      import('pages/volunteer-page/volunteer-page.module').then(\n        m => m.VolunteerPageModule\n      ),\n  });\n}\n\n// Register all routes for topic landing page.\nfor (let key in AppConstants.AVAILABLE_LANDING_PAGES) {\n  for (let i = 0; i < AppConstants.AVAILABLE_LANDING_PAGES[key].length; i++) {\n    routes.push({\n      path: key + '/' + AppConstants.AVAILABLE_LANDING_PAGES[key][i],\n      loadChildren: () =>\n        import(\n          'pages/landing-pages/topic-landing-page/topic-landing-page.module'\n        ).then(m => m.TopicLandingPageModule),\n    });\n  }\n}\n\n// Error routes.\nroutes.push(\n  // Route to register all the custom error pages on oppia.\n  {\n    path: `${AppConstants.PAGES_REGISTERED_WITH_FRONTEND.ERROR.ROUTE}/:status_code`,\n    loadChildren: () =>\n      import('pages/error-pages/error-page.module').then(\n        m => m.ErrorPageModule\n      ),\n  },\n  // '**' wildcard route must be kept at the end,as it can override all other\n  // routes.\n  // Add error page for not found routes.\n  {\n    path: '**',\n    loadChildren: () =>\n      import('pages/error-pages/error-page.module').then(\n        m => m.ErrorPageModule\n      ),\n  }\n);\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [\n    {\n      provide: APP_BASE_HREF,\n      useValue: '/',\n    },\n  ],\n})\nexport class AppRoutingModule {}\n"
    }
  ]
}