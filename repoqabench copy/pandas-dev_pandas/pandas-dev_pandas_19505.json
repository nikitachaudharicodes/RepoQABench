{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "19505",
  "issue_description": "# Documation: copy documenation is lacking detail for when deep=False\n\nThe DataFrame.copy documentation (for pandas 0.22.0) states:\r\n\r\n```\r\ndeep : boolean or string, default True\r\nMake a deep copy, including a copy of the data and the indices. \r\nWith deep=False neither the indices or the data are copied.\r\nNote that when deep=True data is copied, actual python objects \r\nwill not be copied recursively, only the reference to the object. \r\nThis is in contrast to copy.deepcopy in the Standard Library,\r\nwhich recursively copies object data.\r\n```\r\n#### Problem description\r\n\r\nThe documentation does not state what *is* copied when ``deep=False`` (it doesn't copy data, it doesn't copy indices, what does it copy then?).\r\n\r\nSearching for 'copy' suggests this has not been reported as an issue.",
  "issue_comments": [
    {
      "id": 362498941,
      "user": "ZhuBaohe",
      "body": "The reference of   the data is copied with deep=False.\r\n\r\n```python\r\ndf=pd.DataFrame([1,2,3])\r\n\r\ndf1=df.copy(deep=False)\r\n\r\ndf1.iat[0,0]=100\r\n\r\ndf1.index=[10,20,30]\r\n\r\ndf1\r\nOut[188]: \r\n      0\r\n10  100\r\n20    2\r\n30    3\r\n\r\ndf\r\nOut[189]: \r\n     0\r\n0  100\r\n1    2\r\n2    3\r\n```"
    },
    {
      "id": 362670891,
      "user": "chris-b1",
      "body": "The `DataFrame` object itself is what is being copied, but the backing arrays aren't, as @ZhuBaohe  shows.  Certainly would take a doc PR clarifying if you're interested.\r\n```python\r\nIn [213]: df_1 = df\r\n\r\nIn [214]: df_1 is df\r\nOut[214]: True\r\n\r\nIn [215]: df_2 = df.copy(deep=False)\r\n\r\nIn [216]: df_2 is df\r\nOut[216]: False\r\n\r\nIn [217]: df_2.values.data == df_2.values.data\r\nOut[217]: True\r\n```\r\n\r\n\r\n"
    },
    {
      "id": 363336284,
      "user": "MIsmailKhan",
      "body": "Hi, I'd be happy to take this up! \r\n\r\nWould this suffice?\r\n\r\n\"\r\ndeep : boolean or string, default True\r\nMake a deep copy, including a copy of the data and the indices. **With ``deep=False``(i.e. shallow copy), the data reference is copied.** Neither the indices or data are copied.\r\nNote that when deep=True data is copied, actual python objects \r\nwill not be copied recursively, only the reference to the object. \r\nThis is in contrast to copy.deepcopy in the Standard Library,\r\nwhich recursively copies object data.\r\n\"\r\n\r\n\r\n\r\n\r\n"
    },
    {
      "id": 363352108,
      "user": "charlie0389",
      "body": "Ok, I'm a little confused. What does a copy of the reference to the object mean? Isn't this the same operation as tagging an object  with a variable? i.e. \r\nIsn't\r\n```\r\ndf2 = df1\r\n```\r\nthe same as\r\n```\r\ndf2 = df1.copy(deep=False)\r\n```\r\n?\r\nObviously if I was right this would be a little redundant, so I assume I'm not. But I think the documentation could outline with an example of when  ``deep=False`` is useful.\r\n\r\n"
    },
    {
      "id": 363376853,
      "user": "MIsmailKhan",
      "body": "I think this should cover the question: \r\nhttps://stackoverflow.com/questions/46327494/python-pandas-dataframe-copydeep-false-vs-copydeep-true-vs\r\n\r\nAs for whether df2 = df1 and df2 =df1.copy(deep=False) are the same. I wrote up a couple of lines and checked what happened to the above if I modified the original database(i.e. df2). They both yielded the same output so I'm guessing that they are the same.\r\n\r\nhttp://nbviewer.jupyter.org/gist/MIsmailKhan/b5e2534636e526d840c231cebcca5761\r\n"
    },
    {
      "id": 363382109,
      "user": "charlie0389",
      "body": "Thankyou MismailKhan for the link and the example, its a bit clearer to me now. Unfortunately, neither of the StackOverflow answers articulate the difference between ``copy()`` and ``copy(deep=False)`` like your notebook example does.\r\n\r\nHowever, as you acknowledge, it's still not clear why a ``copy(deep=False)`` operation is useful. It seems to me that if you are still operating on the same object, it's rather pointless just making a second reference to it - why not just use the same reference if the end result is the same...?"
    },
    {
      "id": 363473645,
      "user": "MIsmailKhan",
      "body": "I've added some lines to reflect why we'd want to use .copy(deep==False),\nthis should clear things out.\nhttps://gist.github.com/MIsmailKhan/be2f51d60e61d1f77b92889d94b9b176\n\nOn Tue, Feb 6, 2018 at 2:38 PM, charlie0389 <notifications@github.com>\nwrote:\n\n> Thankyou MismailKhan for the link and the example, its a bit clearer to me\n> now. Unfortunately, neither of the StackOverflow answers articulate the\n> difference between copy() and copy(deep=False) like your notebook example\n> does.\n>\n> However, as you acknowledge, it's still not clear why a copy(deep=False)\n> operation is useful. It seems to me that if you are still operating on the\n> same object, it's rather pointless just making a second reference to it -\n> why not just use the same reference if the end result is the same...?\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19505#issuecomment-363382109>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/APD7OqxgK4YqHtueVe7vQnqYXF21Tc6Xks5tSCu8gaJpZM4R2plu>\n> .\n>\n"
    },
    {
      "id": 363716789,
      "user": "charlie0389",
      "body": "Thanks MismailKhan - thankyou for clearing that up."
    },
    {
      "id": 374498055,
      "user": "eamag",
      "body": "So can we close this issue?"
    },
    {
      "id": 374532224,
      "user": "jorisvandenbossche",
      "body": "This will be closed by https://github.com/pandas-dev/pandas/pull/20261"
    }
  ],
  "text_context": "# Documation: copy documenation is lacking detail for when deep=False\n\nThe DataFrame.copy documentation (for pandas 0.22.0) states:\r\n\r\n```\r\ndeep : boolean or string, default True\r\nMake a deep copy, including a copy of the data and the indices. \r\nWith deep=False neither the indices or the data are copied.\r\nNote that when deep=True data is copied, actual python objects \r\nwill not be copied recursively, only the reference to the object. \r\nThis is in contrast to copy.deepcopy in the Standard Library,\r\nwhich recursively copies object data.\r\n```\r\n#### Problem description\r\n\r\nThe documentation does not state what *is* copied when ``deep=False`` (it doesn't copy data, it doesn't copy indices, what does it copy then?).\r\n\r\nSearching for 'copy' suggests this has not been reported as an issue.\n\nThe reference of   the data is copied with deep=False.\r\n\r\n```python\r\ndf=pd.DataFrame([1,2,3])\r\n\r\ndf1=df.copy(deep=False)\r\n\r\ndf1.iat[0,0]=100\r\n\r\ndf1.index=[10,20,30]\r\n\r\ndf1\r\nOut[188]: \r\n      0\r\n10  100\r\n20    2\r\n30    3\r\n\r\ndf\r\nOut[189]: \r\n     0\r\n0  100\r\n1    2\r\n2    3\r\n```\n\nThe `DataFrame` object itself is what is being copied, but the backing arrays aren't, as @ZhuBaohe  shows.  Certainly would take a doc PR clarifying if you're interested.\r\n```python\r\nIn [213]: df_1 = df\r\n\r\nIn [214]: df_1 is df\r\nOut[214]: True\r\n\r\nIn [215]: df_2 = df.copy(deep=False)\r\n\r\nIn [216]: df_2 is df\r\nOut[216]: False\r\n\r\nIn [217]: df_2.values.data == df_2.values.data\r\nOut[217]: True\r\n```\r\n\r\n\r\n\n\nHi, I'd be happy to take this up! \r\n\r\nWould this suffice?\r\n\r\n\"\r\ndeep : boolean or string, default True\r\nMake a deep copy, including a copy of the data and the indices. **With ``deep=False``(i.e. shallow copy), the data reference is copied.** Neither the indices or data are copied.\r\nNote that when deep=True data is copied, actual python objects \r\nwill not be copied recursively, only the reference to the object. \r\nThis is in contrast to copy.deepcopy in the Standard Library,\r\nwhich recursively copies object data.\r\n\"\r\n\r\n\r\n\r\n\r\n\n\nOk, I'm a little confused. What does a copy of the reference to the object mean? Isn't this the same operation as tagging an object  with a variable? i.e. \r\nIsn't\r\n```\r\ndf2 = df1\r\n```\r\nthe same as\r\n```\r\ndf2 = df1.copy(deep=False)\r\n```\r\n?\r\nObviously if I was right this would be a little redundant, so I assume I'm not. But I think the documentation could outline with an example of when  ``deep=False`` is useful.\r\n\r\n\n\nI think this should cover the question: \r\nhttps://stackoverflow.com/questions/46327494/python-pandas-dataframe-copydeep-false-vs-copydeep-true-vs\r\n\r\nAs for whether df2 = df1 and df2 =df1.copy(deep=False) are the same. I wrote up a couple of lines and checked what happened to the above if I modified the original database(i.e. df2). They both yielded the same output so I'm guessing that they are the same.\r\n\r\nhttp://nbviewer.jupyter.org/gist/MIsmailKhan/b5e2534636e526d840c231cebcca5761\r\n\n\nThankyou MismailKhan for the link and the example, its a bit clearer to me now. Unfortunately, neither of the StackOverflow answers articulate the difference between ``copy()`` and ``copy(deep=False)`` like your notebook example does.\r\n\r\nHowever, as you acknowledge, it's still not clear why a ``copy(deep=False)`` operation is useful. It seems to me that if you are still operating on the same object, it's rather pointless just making a second reference to it - why not just use the same reference if the end result is the same...?\n\nI've added some lines to reflect why we'd want to use .copy(deep==False),\nthis should clear things out.\nhttps://gist.github.com/MIsmailKhan/be2f51d60e61d1f77b92889d94b9b176\n\nOn Tue, Feb 6, 2018 at 2:38 PM, charlie0389 <notifications@github.com>\nwrote:\n\n> Thankyou MismailKhan for the link and the example, its a bit clearer to me\n> now. Unfortunately, neither of the StackOverflow answers articulate the\n> difference between copy() and copy(deep=False) like your notebook example\n> does.\n>\n> However, as you acknowledge, it's still not clear why a copy(deep=False)\n> operation is useful. It seems to me that if you are still operating on the\n> same object, it's rather pointless just making a second reference to it -\n> why not just use the same reference if the end result is the same...?\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19505#issuecomment-363382109>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/APD7OqxgK4YqHtueVe7vQnqYXF21Tc6Xks5tSCu8gaJpZM4R2plu>\n> .\n>\n\n\nThanks MismailKhan - thankyou for clearing that up.\n\nSo can we close this issue?\n\nThis will be closed by https://github.com/pandas-dev/pandas/pull/20261",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/20261",
  "code_context": [
    {
      "filename": "pandas/core/generic.py",
      "content": "# pylint: disable=W0231,E1101\nimport collections\nimport functools\nimport warnings\nimport operator\nimport weakref\nimport gc\nimport json\n\nimport numpy as np\nimport pandas as pd\n\nfrom pandas._libs import tslib, properties\nfrom pandas.core.dtypes.common import (\n    _ensure_int64,\n    _ensure_object,\n    is_scalar,\n    is_number,\n    is_integer, is_bool,\n    is_bool_dtype,\n    is_categorical_dtype,\n    is_numeric_dtype,\n    is_datetime64_dtype,\n    is_timedelta64_dtype,\n    is_datetime64tz_dtype,\n    is_list_like,\n    is_dict_like,\n    is_re_compilable,\n    is_period_arraylike,\n    pandas_dtype)\nfrom pandas.core.dtypes.cast import maybe_promote, maybe_upcast_putmask\nfrom pandas.core.dtypes.inference import is_hashable\nfrom pandas.core.dtypes.missing import isna, notna\nfrom pandas.core.dtypes.generic import ABCSeries, ABCPanel, ABCDataFrame\n\nfrom pandas.core.base import PandasObject, SelectionMixin\nfrom pandas.core.index import (Index, MultiIndex, _ensure_index,\n                               InvalidIndexError, RangeIndex)\nimport pandas.core.indexing as indexing\nfrom pandas.core.indexing import maybe_convert_indices\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.period import PeriodIndex, Period\nfrom pandas.core.internals import BlockManager\nimport pandas.core.algorithms as algos\nimport pandas.core.common as com\nimport pandas.core.missing as missing\nfrom pandas.io.formats.printing import pprint_thing\nfrom pandas.io.formats.format import format_percentiles, DataFrameFormatter\nfrom pandas.tseries.frequencies import to_offset\nfrom pandas import compat\nfrom pandas.compat.numpy import function as nv\nfrom pandas.compat import (map, zip, lzip, lrange, string_types, to_str,\n                           isidentifier, set_function_name, cPickle as pkl)\nfrom pandas.core.ops import _align_method_FRAME\nimport pandas.core.nanops as nanops\nfrom pandas.util._decorators import (Appender, Substitution,\n                                     deprecate_kwarg)\nfrom pandas.util._validators import validate_bool_kwarg, validate_fillna_kwargs\nfrom pandas.core import config\n\n# goal is to be able to define the docs close to function, while still being\n# able to share\n_shared_docs = dict()\n_shared_doc_kwargs = dict(\n    axes='keywords for axes', klass='NDFrame',\n    axes_single_arg='int or labels for object',\n    args_transpose='axes to permute (int or label for object)',\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names to sort by\"\"\")\n\n\ndef _single_replace(self, to_replace, method, inplace, limit):\n    \"\"\"\n    Replaces values in a Series using the fill method specified when no\n    replacement value is given in the replace method\n    \"\"\"\n    if self.ndim != 1:\n        raise TypeError('cannot replace {0} with method {1} on a {2}'\n                        .format(to_replace, method, type(self).__name__))\n\n    orig_dtype = self.dtype\n    result = self if inplace else self.copy()\n    fill_f = missing.get_fill_func(method)\n\n    mask = missing.mask_missing(result.values, to_replace)\n    values = fill_f(result.values, limit=limit, mask=mask)\n\n    if values.dtype == orig_dtype and inplace:\n        return\n\n    result = pd.Series(values, index=self.index,\n                       dtype=self.dtype).__finalize__(self)\n\n    if inplace:\n        self._update_inplace(result._data)\n        return\n\n    return result\n\n\nclass NDFrame(PandasObject, SelectionMixin):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : boolean, default False\n    \"\"\"\n    _internal_names = ['_data', '_cacher', '_item_cache', '_cache', '_is_copy',\n                       '_subtyp', '_name', '_index', '_default_kind',\n                       '_default_fill_value', '_metadata', '__array_struct__',\n                       '__array_interface__']\n    _internal_names_set = set(_internal_names)\n    _accessors = frozenset([])\n    _deprecations = frozenset(['as_blocks', 'blocks',\n                               'consolidate', 'convert_objects', 'is_copy'])\n    _metadata = []\n    _is_copy = None\n\n    def __init__(self, data, axes=None, copy=False, dtype=None,\n                 fastpath=False):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, '_is_copy', None)\n        object.__setattr__(self, '_data', data)\n        object.__setattr__(self, '_item_cache', {})\n\n    @property\n    def is_copy(self):\n        warnings.warn(\"Attribute 'is_copy' is deprecated and will be removed \"\n                      \"in a future version.\", FutureWarning, stacklevel=2)\n        return self._is_copy\n\n    @is_copy.setter\n    def is_copy(self, msg):\n        warnings.warn(\"Attribute 'is_copy' is deprecated and will be removed \"\n                      \"in a future version.\", FutureWarning, stacklevel=2)\n        self._is_copy = msg\n\n    def _repr_data_resource_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):\n            data = self.head(config.get_option('display.max_rows'))\n            payload = json.loads(data.to_json(orient='table'),\n                                 object_pairs_hook=collections.OrderedDict)\n            return payload\n\n    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == 'V':\n                raise NotImplementedError(\"compound dtypes are not implemented\"\n                                          \" in the {0} constructor\"\n                                          .format(self.__class__.__name__))\n\n        return dtype\n\n    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(axe,\n                                       axis=self._get_block_manager_axis(a),\n                                       copy=False)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    # ----------------------------------------------------------------------\n    # Construction\n\n    @property\n    def _constructor(self):\n        \"\"\"Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    def __unicode__(self):\n        # unicode representation based upon iterating over self\n        # (since, by definition, `PandasContainers` are iterable)\n        prepr = '[%s]' % ','.join(map(pprint_thing, self))\n        return '%s(%s)' % (self.__class__.__name__, prepr)\n\n    def _dir_additions(self):\n        \"\"\" add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = {c for c in self._info_axis.unique(level=0)[:100]\n                     if isinstance(c, string_types) and isidentifier(c)}\n        return super(NDFrame, self)._dir_additions().union(additions)\n\n    @property\n    def _constructor_sliced(self):\n        \"\"\"Used when a manipulation result has one lower dimension(s) as the\n        original, such as DataFrame single columns slicing.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    @property\n    def _constructor_expanddim(self):\n        \"\"\"Used when a manipulation result has one higher dimension as the\n        original, such as Series.to_frame() and DataFrame.to_panel()\n        \"\"\"\n        raise NotImplementedError\n\n    # ----------------------------------------------------------------------\n    # Axis\n\n    @classmethod\n    def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,\n                    slicers=None, axes_are_reversed=False, build_axes=True,\n                    ns=None):\n        \"\"\"Provide axes setup for the major PandasObjects.\n\n        Parameters\n        ----------\n        axes : the names of the axes in order (lowest to highest)\n        info_axis_num : the axis of the selector dimension (int)\n        stat_axis_num : the number of axis for the default stats (int)\n        aliases : other names for a single axis (dict)\n        slicers : how axes slice to others (dict)\n        axes_are_reversed : boolean whether to treat passed axes as\n            reversed (DataFrame)\n        build_axes : setup the axis properties (default True)\n        \"\"\"\n\n        cls._AXIS_ORDERS = axes\n        cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n        cls._AXIS_LEN = len(axes)\n        cls._AXIS_ALIASES = aliases or dict()\n        cls._AXIS_IALIASES = {v: k for k, v in cls._AXIS_ALIASES.items()}\n        cls._AXIS_NAMES = dict(enumerate(axes))\n        cls._AXIS_SLICEMAP = slicers or None\n        cls._AXIS_REVERSED = axes_are_reversed\n\n        # typ\n        setattr(cls, '_typ', cls.__name__.lower())\n\n        # indexing support\n        cls._ix = None\n\n        if info_axis is not None:\n            cls._info_axis_number = info_axis\n            cls._info_axis_name = axes[info_axis]\n\n        if stat_axis is not None:\n            cls._stat_axis_number = stat_axis\n            cls._stat_axis_name = axes[stat_axis]\n\n        # setup the actual axis\n        if build_axes:\n\n            def set_axis(a, i):\n                setattr(cls, a, properties.AxisProperty(i))\n                cls._internal_names_set.add(a)\n\n            if axes_are_reversed:\n                m = cls._AXIS_LEN - 1\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, m - i)\n            else:\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, i)\n\n        # addtl parms\n        if isinstance(ns, dict):\n            for k, v in ns.items():\n                setattr(cls, k, v)\n\n    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d\n\n    @staticmethod\n    def _construct_axes_dict_from(self, axes, **kwargs):\n        \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n        d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_dict_for_slice(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {self._AXIS_SLICEMAP[a]: self._get_axis(a)\n             for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_from_arguments(self, args, kwargs, require_all=False):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # if we have an alias for this axis\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\"arguments are mutually exclusive \"\n                                        \"for [%s,%s]\" % (a, alias))\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments \"\n                                        \"specified!\")\n\n        axes = {a: kwargs.pop(a, None) for a in self._AXIS_ORDERS}\n        return axes, kwargs\n\n    @classmethod\n    def _from_axes(cls, data, axes, **kwargs):\n        # for construction from BlockManager\n        if isinstance(data, BlockManager):\n            return cls(data, **kwargs)\n        else:\n            if cls._AXIS_REVERSED:\n                axes = axes[::-1]\n            d = cls._construct_axes_dict_from(cls, axes, copy=False)\n            d.update(kwargs)\n            return cls(data, **d)\n\n    def _get_axis_number(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in self._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return self._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis_name(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, string_types):\n            if axis in self._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return self._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)\n\n    def _get_block_manager_axis(self, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = self._get_axis_number(axis)\n        if self._AXIS_REVERSED:\n            m = self._AXIS_LEN - 1\n            return m - axis\n        return axis\n\n    def _get_axis_resolvers(self, axis):\n        # index or columns\n        axis_index = getattr(self, axis)\n        d = dict()\n        prefix = axis[0]\n\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                # prefix with 'i' or 'c' depending on the input axis\n                # e.g., you must do ilevel_0 for the 0th level of an unnamed\n                # multiiindex\n                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)\n                level = i\n\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n\n        # put the index/columns itself in the dict\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n\n        d[axis] = dindex\n        return d\n\n    def _get_index_resolvers(self):\n        d = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n        return d\n\n    @property\n    def _info_axis(self):\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def _stat_axis(self):\n        return getattr(self, self._stat_axis_name)\n\n    @property\n    def shape(self):\n        \"\"\"Return a tuple of axis dimensions\"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self):\n        \"\"\"Return index label(s) of the internal NDFrame\"\"\"\n        # we do it this way because if we have reversed axes, then\n        # the block manager shows then reversed\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @property\n    def ndim(self):\n        \"\"\"Number of axes / array dimensions\"\"\"\n        return self._data.ndim\n\n    @property\n    def size(self):\n        \"\"\"number of elements in the NDFrame\"\"\"\n        return np.prod(self.shape)\n\n    @property\n    def _selected_obj(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    @property\n    def _obj_with_exclusions(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    def _expand_axes(self, key):\n        new_axes = []\n        for k, ax in zip(key, self.axes):\n            if k not in ax:\n                if type(k) != ax.dtype.type:\n                    ax = ax.astype('O')\n                new_axes.append(ax.insert(len(ax), k))\n            else:\n                new_axes.append(ax)\n\n        return new_axes\n\n    _shared_docs['set_axis'] = \"\"\"Assign desired index to given axis\n\n        Parameters\n        ----------\n        labels: list-like or Index\n            The values for the new index\n        axis : int or string, default 0\n        inplace : boolean, default None\n            Whether to return a new %(klass)s instance.\n\n            WARNING: inplace=None currently falls back to to True, but\n            in a future version, will default to False.  Use inplace=True\n            explicitly rather than relying on the default.\n\n        .. versionadded:: 0.21.0\n            The signature is make consistent to the rest of the API.\n            Previously, the \"axis\" and \"labels\" arguments were respectively\n            the first and second positional arguments.\n\n        Returns\n        -------\n        renamed : %(klass)s or None\n            An object of same type as caller if inplace=False, None otherwise.\n\n        See Also\n        --------\n        pandas.NDFrame.rename\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.set_axis(['a', 'b', 'c'], axis=0, inplace=False)\n        a    1\n        b    2\n        c    3\n        dtype: int64\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.set_axis(['a', 'b', 'c'], axis=0, inplace=False)\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n        >>> df.set_axis(['I', 'II'], axis=1, inplace=False)\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6\n        >>> df.set_axis(['i', 'ii'], axis=1, inplace=True)\n        >>> df\n           i  ii\n        0  1   4\n        1  2   5\n        2  3   6\n\n        \"\"\"\n\n    @Appender(_shared_docs['set_axis'] % dict(klass='NDFrame'))\n    def set_axis(self, labels, axis=0, inplace=None):\n        if is_scalar(labels):\n            warnings.warn(\n                'set_axis now takes \"labels\" as first argument, and '\n                '\"axis\" as named parameter. The old form, with \"axis\" as '\n                'first parameter and \\\"labels\\\" as second, is still supported '\n                'but will be deprecated in a future version of pandas.',\n                FutureWarning, stacklevel=2)\n            labels, axis = axis, labels\n\n        if inplace is None:\n            warnings.warn(\n                'set_axis currently defaults to operating inplace.\\nThis '\n                'will change in a future version of pandas, use '\n                'inplace=True to avoid this warning.',\n                FutureWarning, stacklevel=2)\n            inplace = True\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            obj = self.copy()\n            obj.set_axis(labels, axis=axis, inplace=True)\n            return obj\n\n    def _set_axis(self, axis, labels):\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()\n\n    _shared_docs['transpose'] = \"\"\"\n        Permute the dimensions of the %(klass)s\n\n        Parameters\n        ----------\n        args : %(args_transpose)s\n        copy : boolean, default False\n            Make a copy of the underlying data. Mixed-dtype data will\n            always result in a copy\n\n        Examples\n        --------\n        >>> p.transpose(2, 0, 1)\n        >>> p.transpose(2, 0, 1, copy=True)\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n\n    @Appender(_shared_docs['transpose'] % _shared_doc_kwargs)\n    def transpose(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs,\n                                                           require_all=True)\n        axes_names = tuple(self._get_axis_name(axes[a])\n                           for a in self._AXIS_ORDERS)\n        axes_numbers = tuple(self._get_axis_number(axes[a])\n                             for a in self._AXIS_ORDERS)\n\n        # we must have unique axes\n        if len(axes) != len(set(axes)):\n            raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)\n\n        new_axes = self._construct_axes_dict_from(self, [self._get_axis(x)\n                                                         for x in axes_names])\n        new_values = self.values.transpose(axes_numbers)\n        if kwargs.pop('copy', None) or (len(args) and args[-1]):\n            new_values = new_values.copy()\n\n        nv.validate_transpose_for_generic(self, kwargs)\n        return self._constructor(new_values, **new_axes).__finalize__(self)\n\n    def swapaxes(self, axis1, axis2, copy=True):\n        \"\"\"\n        Interchange axes and swap values axes appropriately\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n        i = self._get_axis_number(axis1)\n        j = self._get_axis_number(axis2)\n\n        if i == j:\n            if copy:\n                return self.copy()\n            return self\n\n        mapping = {i: j, j: i}\n\n        new_axes = (self._get_axis(mapping.get(k, k))\n                    for k in range(self._AXIS_LEN))\n        new_values = self.values.swapaxes(i, j)\n        if copy:\n            new_values = new_values.copy()\n\n        return self._constructor(new_values, *new_axes).__finalize__(self)\n\n    def pop(self, item):\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n\n        Parameters\n        ----------\n        item : str\n            Column label to be popped\n\n        Returns\n        -------\n        popped : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n        ...                    ('parrot', 'bird',     24.0),\n        ...                    ('lion',   'mammal',   80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=('name', 'class', 'max_speed'))\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        >>> df.pop('class')\n        0      bird\n        1      bird\n        2    mammal\n        3    mammal\n        Name: class, dtype: object\n\n        >>> df\n             name  max_speed\n        0  falcon      389.0\n        1  parrot       24.0\n        2    lion       80.5\n        3  monkey        NaN\n        \"\"\"\n        result = self[item]\n        del self[item]\n        try:\n            result._reset_cacher()\n        except AttributeError:\n            pass\n\n        return result\n\n    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze length 1 dimensions.\n\n        Parameters\n        ----------\n        axis : None, integer or string axis name, optional\n            The axis to squeeze if 1-sized.\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        scalar if 1-sized, else original object\n        \"\"\"\n        axis = (self._AXIS_NAMES if axis is None else\n                (self._get_axis_number(axis),))\n        try:\n            return self.iloc[\n                tuple(0 if i in axis and len(a) == 1 else slice(None)\n                      for i, a in enumerate(self.axes))]\n        except Exception:\n            return self\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        result = self.copy()\n        labels = result._data.axes[axis]\n        result._data.set_axis(axis, labels.swaplevel(i, j))\n        return result\n\n    # ----------------------------------------------------------------------\n    # Rename\n\n    # TODO: define separate funcs for DataFrame, Series and Panel so you can\n    # get completion on keyword arguments.\n    _shared_docs['rename'] = \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(optional_mapper)s\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        %(optional_axis)s\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        See Also\n        --------\n        pandas.NDFrame.rename_axis\n\n        Examples\n        --------\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        Since ``DataFrame`` doesn't have a ``.name`` attribute,\n        only mapping-type arguments are allowed.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n\n        See the :ref:`user guide <basics.rename>` for more.\n        \"\"\"\n\n    @Appender(_shared_docs['rename'] % dict(axes='axes keywords for this'\n                                            ' object', klass='NDFrame',\n                                            optional_mapper='',\n                                            optional_axis=''))\n    def rename(self, *args, **kwargs):\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        copy = kwargs.pop('copy', True)\n        inplace = kwargs.pop('inplace', False)\n        level = kwargs.pop('level', None)\n        axis = kwargs.pop('axis', None)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        if kwargs:\n            raise TypeError('rename() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        if com._count_not_none(*axes.values()) == 0:\n            raise TypeError('must pass an index to rename')\n\n        # renamer function if passed a dict\n        def _get_rename_function(mapper):\n            if isinstance(mapper, (dict, ABCSeries)):\n\n                def f(x):\n                    if x in mapper:\n                        return mapper[x]\n                    else:\n                        return x\n            else:\n                f = mapper\n\n            return f\n\n        self._consolidate_inplace()\n        result = self if inplace else self.copy(deep=copy)\n\n        # start in the axis order to eliminate too many copies\n        for axis in lrange(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is None:\n                continue\n            f = _get_rename_function(v)\n\n            baxis = self._get_block_manager_axis(axis)\n            if level is not None:\n                level = self.axes[axis]._get_level_number(level)\n            result._data = result._data.rename_axis(f, axis=baxis, copy=copy,\n                                                    level=level)\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result._data)\n        else:\n            return result.__finalize__(self)\n\n    rename.__doc__ = _shared_docs['rename']\n\n    def rename_axis(self, mapper, axis=0, copy=True, inplace=False):\n        \"\"\"Alter the name of the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n        axis : int or string, default 0\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n\n        Returns\n        -------\n        renamed : type of caller or None if inplace=True\n\n        Notes\n        -----\n        Prior to version 0.21.0, ``rename_axis`` could also be used to change\n        the axis *labels* by passing a mapping or scalar. This behavior is\n        deprecated and will be removed in a future version. Use ``rename``\n        instead.\n\n        See Also\n        --------\n        pandas.Series.rename, pandas.DataFrame.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename_axis(\"foo\")\n             A  B\n        foo\n        0    1  4\n        1    2  5\n        2    3  6\n\n        >>> df.rename_axis(\"bar\", axis=\"columns\")\n        bar  A  B\n        0    1  4\n        1    2  5\n        2    3  6\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        non_mapper = is_scalar(mapper) or (is_list_like(mapper) and not\n                                           is_dict_like(mapper))\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            msg = (\"Using 'rename_axis' to alter labels is deprecated. \"\n                   \"Use '.rename' instead\")\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            axis = self._get_axis_name(axis)\n            d = {'copy': copy, 'inplace': inplace}\n            d[axis] = mapper\n            return self.rename(**d)\n\n    def _set_axis_name(self, name, axis=0, inplace=False):\n        \"\"\"\n        Alter the name or names of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name for the Index, or list of names for the MultiIndex\n        axis : int or str\n           0 or 'index' for the index; 1 or 'columns' for the columns\n        inplace : bool\n            whether to modify `self` directly or return a copy\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        renamed : type of caller or None if inplace=True\n\n        See Also\n        --------\n        pandas.DataFrame.rename\n        pandas.Series.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n        >>> df._set_axis_name(\"foo\")\n             A\n        foo\n        0    1\n        1    2\n        2    3\n        >>> df.index = pd.MultiIndex.from_product([['A'], ['a', 'b', 'c']])\n        >>> df._set_axis_name([\"bar\", \"baz\"])\n                 A\n        bar baz\n        A   a    1\n            b    2\n            c    3\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(idx, axis=axis, inplace=True)\n        if not inplace:\n            return renamed\n\n    # ----------------------------------------------------------------------\n    # Comparisons\n\n    def _indexed_same(self, other):\n        return all(self._get_axis(a).equals(other._get_axis(a))\n                   for a in self._AXIS_ORDERS)\n\n    def __neg__(self):\n        values = com._values_from_object(self)\n        if is_bool_dtype(values):\n            arr = operator.inv(values)\n        elif (is_numeric_dtype(values) or is_timedelta64_dtype(values)):\n            arr = operator.neg(values)\n        else:\n            raise TypeError(\"Unary negative expects numeric dtype, not {}\"\n                            .format(values.dtype))\n        return self.__array_wrap__(arr)\n\n    def __pos__(self):\n        values = com._values_from_object(self)\n        if (is_bool_dtype(values) or is_period_arraylike(values)):\n            arr = values\n        elif (is_numeric_dtype(values) or is_timedelta64_dtype(values)):\n            arr = operator.pos(values)\n        else:\n            raise TypeError(\"Unary plus expects numeric dtype, not {}\"\n                            .format(values.dtype))\n        return self.__array_wrap__(arr)\n\n    def __invert__(self):\n        try:\n            arr = operator.inv(com._values_from_object(self))\n            return self.__array_wrap__(arr)\n        except Exception:\n\n            # inv fails with 0 len\n            if not np.prod(self.shape):\n                return self\n\n            raise\n\n    def equals(self, other):\n        \"\"\"\n        Determines if two NDFrame objects contain the same elements. NaNs in\n        the same location are considered equal.\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)\n\n    # -------------------------------------------------------------------------\n    # Label or Level Combination Helpers\n    #\n    # A collection of helper methods for DataFrame/Series operations that\n    # accept a combination of column/index labels and levels.  All such\n    # operations should utilize/extend these methods when possible so that we\n    # have consistent precedence and validation logic throughout the library.\n\n    def _is_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key: str\n            Potential level name for the given axis\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_level_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (key is not None and\n                is_hashable(key) and\n                key in self.axes[axis].names and\n                not self._is_label_reference(key, axis=axis))\n\n    def _is_label_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key: str\n            Potential label name\n        axis: int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (key is not None and\n                is_hashable(key) and\n                any(key in self.axes[ax] for ax in other_axes))\n\n    def _is_label_or_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key: str\n            Potential label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_label_or_level: bool\n        \"\"\"\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_or_level_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (self._is_level_reference(key, axis=axis) or\n                self._is_label_reference(key, axis=axis))\n\n    def _check_label_or_level_ambiguity(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Check whether `key` matches both a level of the input `axis` and a\n        label of the other axis and raise a ``FutureWarning`` if this is the\n        case.\n\n        Note: This method will be altered to raise an ambiguity exception in\n        a future version.\n\n        Parameters\n        ----------\n        key: str or object\n            label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        ambiguous: bool\n\n        Raises\n        ------\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_check_label_or_level_ambiguity is not implemented for {type}\"\n                .format(type=type(self)))\n\n        if (key is not None and\n                is_hashable(key) and\n                key in self.axes[axis].names and\n                any(key in self.axes[ax] for ax in other_axes)):\n\n            # Build an informative and grammatical warning\n            level_article, level_type = (('an', 'index')\n                                         if axis == 0 else\n                                         ('a', 'column'))\n\n            label_article, label_type = (('a', 'column')\n                                         if axis == 0 else\n                                         ('an', 'index'))\n\n            msg = (\"'{key}' is both {level_article} {level_type} level and \"\n                   \"{label_article} {label_type} label.\\n\"\n                   \"Defaulting to {label_type}, but this will raise an \"\n                   \"ambiguity error in a future version\"\n                   ).format(key=key,\n                            level_article=level_article,\n                            level_type=level_type,\n                            label_article=label_article,\n                            label_type=label_type)\n\n            warnings.warn(msg, FutureWarning, stacklevel=stacklevel + 1)\n            return True\n        else:\n            return False\n\n    def _get_label_or_level_values(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key: str\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        values: np.ndarray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_get_label_or_level_values is not implemented for {type}\"\n                .format(type=type(self)))\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis,\n                                                 stacklevel=stacklevel + 1)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n\n            if other_axes and isinstance(\n                    self._get_axis(other_axes[0]), MultiIndex):\n                multi_message = ('\\n'\n                                 'For a multi-index, the label must be a '\n                                 'tuple with elements corresponding to '\n                                 'each level.')\n            else:\n                multi_message = ''\n\n            label_axis_name = 'column' if axis == 0 else 'index'\n            raise ValueError((\"The {label_axis_name} label '{key}' \"\n                              \"is not unique.{multi_message}\")\n                             .format(key=key,\n                                     label_axis_name=label_axis_name,\n                                     multi_message=multi_message))\n\n        return values\n\n    def _drop_labels_or_levels(self, keys, axis=0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys: str or list of str\n            labels or levels to drop\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_drop_labels_or_levels is not implemented for {type}\"\n                .format(type=type(self)))\n\n        # Validate keys\n        keys = com._maybe_make_list(keys)\n        invalid_keys = [k for k in keys if not\n                        self._is_label_or_level_reference(k, axis=axis)]\n\n        if invalid_keys:\n            raise ValueError((\"The following keys are not valid labels or \"\n                              \"levels for axis {axis}: {invalid_keys}\")\n                             .format(axis=axis,\n                                     invalid_keys=invalid_keys))\n\n        # Compute levels and labels to drop\n        levels_to_drop = [k for k in keys\n                          if self._is_level_reference(k, axis=axis)]\n\n        labels_to_drop = [k for k in keys\n                          if not self._is_level_reference(k, axis=axis)]\n\n        # Perform copy upfront and then use inplace operations below.\n        # This ensures that we always perform exactly one copy.\n        # ``copy`` and/or ``inplace`` options could be added in the future.\n        dropped = self.copy()\n\n        if axis == 0:\n            # Handle dropping index levels\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n            # Handle dropping columns labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            # Handle dropping column levels\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    # Drop the specified levels from the MultiIndex\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    # Drop the last level of Index by replacing with\n                    # a RangeIndex\n                    dropped.columns = RangeIndex(dropped.columns.size)\n\n            # Handle dropping index labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n        return dropped\n\n    # ----------------------------------------------------------------------\n    # Iteration\n\n    def __hash__(self):\n        raise TypeError('{0!r} objects are mutable, thus they cannot be'\n                        ' hashed'.format(self.__class__.__name__))\n\n    def __iter__(self):\n        \"\"\"Iterate over infor axis\"\"\"\n        return iter(self._info_axis)\n\n    # can we get a better explanation of this?\n    def keys(self):\n        \"\"\"Get the 'info axis' (see Indexing for more)\n\n        This is index for Series, columns for DataFrame and major_axis for\n        Panel.\n        \"\"\"\n        return self._info_axis\n\n    def iteritems(self):\n        \"\"\"Iterate over (label, values) on info axis\n\n        This is index for Series, columns for DataFrame, major_axis for Panel,\n        and so on.\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    def __len__(self):\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self):\n        \"\"\"True if NDFrame is entirely empty [no items], meaning any of the\n        axes are of length 0.\n\n        Notes\n        -----\n        If NDFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        See also\n        --------\n        pandas.Series.dropna\n        pandas.DataFrame.dropna\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    def __nonzero__(self):\n        raise ValueError(\"The truth value of a {0} is ambiguous. \"\n                         \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n                         .format(self.__class__.__name__))\n\n    __bool__ = __nonzero__\n\n    def bool(self):\n        \"\"\"Return the bool of a single element PandasObject.\n\n        This must be a boolean scalar value, either True or False.  Raise a\n        ValueError if the PandasObject does not have exactly 1 element, or that\n        element is not boolean\n        \"\"\"\n        v = self.squeeze()\n        if isinstance(v, (bool, np.bool_)):\n            return bool(v)\n        elif is_scalar(v):\n            raise ValueError(\"bool cannot act on a non-boolean single element \"\n                             \"{0}\".format(self.__class__.__name__))\n\n        self.__nonzero__()\n\n    def __abs__(self):\n        return self.abs()\n\n    def __round__(self, decimals=0):\n        return self.round(decimals)\n\n    # ----------------------------------------------------------------------\n    # Array Interface\n\n    def __array__(self, dtype=None):\n        return com._values_from_object(self)\n\n    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)\n\n    # ideally we would define this to avoid the getattr checks, but\n    # is slower\n    # @property\n    # def __array_interface__(self):\n    #    \"\"\" provide numpy array interface method \"\"\"\n    #    values = self.values\n    #    return dict(typestr=values.dtype.str,shape=values.shape,data=values)\n\n    def to_dense(self):\n        \"\"\"Return dense representation of NDFrame (as opposed to sparse)\"\"\"\n        # compat\n        return self\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    def __getstate__(self):\n        meta = {k: getattr(self, k, None) for k in self._metadata}\n        return dict(_data=self._data, _typ=self._typ, _metadata=self._metadata,\n                    **meta)\n\n    def __setstate__(self, state):\n\n        if isinstance(state, BlockManager):\n            self._data = state\n        elif isinstance(state, dict):\n            typ = state.get('_typ')\n            if typ is not None:\n\n                # set in the order of internal names\n                # to avoid definitional recursion\n                # e.g. say fill_value needing _data to be\n                # defined\n                meta = set(self._internal_names + self._metadata)\n                for k in list(meta):\n                    if k in state:\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n\n            else:\n                self._unpickle_series_compat(state)\n        elif isinstance(state[0], dict):\n            if len(state) == 5:\n                self._unpickle_sparse_frame_compat(state)\n            else:\n                self._unpickle_frame_compat(state)\n        elif len(state) == 4:\n            self._unpickle_panel_compat(state)\n        elif len(state) == 2:\n            self._unpickle_series_compat(state)\n        else:  # pragma: no cover\n            # old pickling format, for compatibility\n            self._unpickle_matrix_compat(state)\n\n        self._item_cache = {}\n\n    # ----------------------------------------------------------------------\n    # IO\n\n    def _repr_latex_(self):\n        \"\"\"\n        Returns a LaTeX representation for a particular object.\n        Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n        \"\"\"\n        if config.get_option('display.latex.repr'):\n            return self.to_latex()\n        else:\n            return None\n\n    # ----------------------------------------------------------------------\n    # I/O Methods\n\n    _shared_docs['to_excel'] = \"\"\"\n    Write %(klass)s to an excel sheet\n    %(versionadded_to_excel)s\n\n    Parameters\n    ----------\n    excel_writer : string or ExcelWriter object\n        File path or existing ExcelWriter\n    sheet_name : string, default 'Sheet1'\n        Name of sheet which will contain DataFrame\n    na_rep : string, default ''\n        Missing data representation\n    float_format : string, default None\n        Format string for floating point numbers\n    columns : sequence, optional\n        Columns to write\n    header : boolean or list of string, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names\n    index : boolean, default True\n        Write row names (index)\n    index_label : string or sequence, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the DataFrame uses MultiIndex.\n    startrow :\n        upper left cell row to dump data frame\n    startcol :\n        upper left cell column to dump data frame\n    engine : string, default None\n        write engine to use - you can also set this via the options\n        ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n        ``io.excel.xlsm.writer``.\n    merge_cells : boolean, default True\n        Write MultiIndex and Hierarchical Rows as merged cells.\n    encoding: string, default None\n        encoding of the resulting excel file. Only necessary for xlwt,\n        other writers support unicode natively.\n    inf_rep : string, default 'inf'\n        Representation for infinity (there is no native representation for\n        infinity in Excel)\n    freeze_panes : tuple of integer (length 2), default None\n        Specifies the one-based bottommost row and rightmost column that\n        is to be frozen\n\n        .. versionadded:: 0.20.0\n\n    Notes\n    -----\n    If passing an existing ExcelWriter object, then the sheet will be added\n    to the existing workbook.  This can be used to save different\n    DataFrames to one workbook:\n\n    >>> writer = pd.ExcelWriter('output.xlsx')\n    >>> df1.to_excel(writer,'Sheet1')\n    >>> df2.to_excel(writer,'Sheet2')\n    >>> writer.save()\n\n    For compatibility with to_csv, to_excel serializes lists and dicts to\n    strings before writing.\n    \"\"\"\n\n    def to_json(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False, compression=None,\n                index=True):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : the path or buffer to write the result string\n            if this is None, return the converted string\n        orient : string\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values'}\n\n            * The format of the JSON string\n\n              - split : dict like\n                {index -> [index], columns -> [columns], data -> [values]}\n              - records : list like\n                [{column -> value}, ... , {column -> value}]\n              - index : dict like {index -> {column -> value}}\n              - columns : dict like {column -> {index -> value}}\n              - values : just the values array\n              - table : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. `epoch` = epoch milliseconds,\n            `iso` = ISO8601. The default depends on the `orient`. For\n            `orient='table'`, the default is `'iso'`. For all other orients,\n            the default is `'epoch'`.\n        double_precision : The number of decimal places to use when encoding\n            floating point values, default 10.\n        force_ascii : force encoded string to be ASCII, default True.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : boolean, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {None, 'gzip', 'bz2', 'xz'}\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename\n\n            .. versionadded:: 0.21.0\n\n        index : boolean, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        same type as input object with filtered info axis\n\n        See Also\n        --------\n        pd.read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)\n\n    def to_hdf(self, path_or_buf, key, **kwargs):\n        \"\"\"Write the contained data to an HDF5 file using HDFStore.\n\n        Parameters\n        ----------\n        path_or_buf : the path (string) or HDFStore object\n        key : string\n            identifier for the group in the store\n        mode : optional, {'a', 'w', 'r+'}, default 'a'\n\n          ``'w'``\n              Write; a new file is created (an existing file with the same\n              name would be deleted).\n          ``'a'``\n              Append; an existing file is opened for reading and writing,\n              and if the file does not exist it is created.\n          ``'r+'``\n              It is similar to ``'a'``, but the file must already exist.\n        format : 'fixed(f)|table(t)', default is 'fixed'\n            fixed(f) : Fixed format\n                       Fast writing/reading. Not-appendable, nor searchable\n            table(t) : Table format\n                       Write as a PyTables Table structure which may perform\n                       worse but allow more flexible operations like searching\n                       / selecting subsets of the data\n        append : boolean, default False\n            For Table formats, append the input data to the existing\n        data_columns :  list of columns, or True, default None\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See `here\n            <http://pandas.pydata.org/pandas-docs/stable/io.html#query-via-data-columns>`__.\n\n            Applicable only to format='table'.\n        complevel : int, 0-9, default None\n            Specifies a compression level for data.\n            A value of 0 disables compression.\n        complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n            Specifies the compression library to be used.\n            As of v0.20.2 these additional compressors for Blosc are supported\n            (default if no compressor specified: 'blosc:blosclz'):\n            {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n            'blosc:zlib', 'blosc:zstd'}.\n            Specifying a compression library which is not available issues\n            a ValueError.\n        fletcher32 : bool, default False\n            If applying compression use the fletcher32 checksum\n        dropna : boolean, default False.\n            If true, ALL nan rows will not be written to store.\n        \"\"\"\n\n        from pandas.io import pytables\n        return pytables.to_hdf(path_or_buf, key, self, **kwargs)\n\n    def to_msgpack(self, path_or_buf=None, encoding='utf-8', **kwargs):\n        \"\"\"\n        msgpack (serialize) object to input file path\n\n        THIS IS AN EXPERIMENTAL LIBRARY and the storage format\n        may not be stable until a future release.\n\n        Parameters\n        ----------\n        path : string File path, buffer-like, or None\n            if None, return generated string\n        append : boolean whether to append to an existing msgpack\n            (default is False)\n        compress : type of compressor (zlib or blosc), default to None (no\n            compression)\n        \"\"\"\n\n        from pandas.io import packers\n        return packers.to_msgpack(path_or_buf, self, encoding=encoding,\n                                  **kwargs)\n\n    def to_sql(self, name, con, schema=None, if_exists='fail', index=True,\n               index_label=None, chunksize=None, dtype=None):\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Parameters\n        ----------\n        name : string\n            Name of SQL table\n        con : SQLAlchemy engine or DBAPI2 connection (legacy mode)\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. If a DBAPI2 object, only sqlite3 is supported.\n        schema : string, default None\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            - fail: If table exists, do nothing.\n            - replace: If table exists, drop it, recreate it, and insert data.\n            - append: If table exists, insert data. Create if does not exist.\n        index : boolean, default True\n            Write DataFrame index as a column.\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, default None\n            If not None, then rows will be written in batches of this size at a\n            time.  If None, all rows will be written at once.\n        dtype : dict of column name to SQL type, default None\n            Optional specifying the datatype for columns. The SQL type should\n            be a SQLAlchemy type, or a string for sqlite3 fallback connection.\n\n        \"\"\"\n        from pandas.io import sql\n        sql.to_sql(self, name, con, schema=schema, if_exists=if_exists,\n                   index=index, index_label=index_label, chunksize=chunksize,\n                   dtype=dtype)\n\n    def to_pickle(self, path, compression='infer',\n                  protocol=pkl.HIGHEST_PROTOCOL):\n        \"\"\"\n        Pickle (serialize) object to input file path.\n\n        Parameters\n        ----------\n        path : string\n            File path\n        compression : {'infer', 'gzip', 'bz2', 'xz', None}, default 'infer'\n            a string representing the compression to use in the output file\n\n            .. versionadded:: 0.20.0\n        protocol : int\n            Int which indicates which protocol should be used by the pickler,\n            default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n            values for this parameter depend on the version of Python. For\n            Python 2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a\n            valid value. For Python >= 3.4, 4 is a valid value.A negative value\n            for the protocol parameter is equivalent to setting its value to\n            HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html\n            .. versionadded:: 0.21.0\n\n        \"\"\"\n        from pandas.io.pickle import to_pickle\n        return to_pickle(self, path, compression=compression,\n                         protocol=protocol)\n\n    def to_clipboard(self, excel=True, sep=None, **kwargs):\n        \"\"\"\n        Attempt to write text representation of object to the system clipboard\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : boolean, defaults to True\n                if True, use the provided separator, writing in a csv\n                format for allowing easy pasting into excel.\n                if False, write a string representation of the object\n                to the clipboard\n        sep : optional, defaults to tab\n        other keywords are passed to to_csv\n\n        Notes\n        -----\n        Requirements for your platform\n          - Linux: xclip, or xsel (with gtk or PyQt4 modules)\n          - Windows: none\n          - OS X: none\n        \"\"\"\n        from pandas.io import clipboards\n        clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        a DataArray for a Series\n        a Dataset for a DataFrame\n        a DataArray for higher dims\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)})\n        >>> df\n           A    B    C\n        0  1  foo  4.0\n        1  1  bar  5.0\n        2  2  foo  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (index: 3)\n        Coordinates:\n          * index    (index) int64 0 1 2\n        Data variables:\n            A        (index) int64 1 1 2\n            B        (index) object 'foo' 'bar' 'foo'\n            C        (index) float64 4.0 5.0 6.0\n\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)}\n                             ).set_index(['B','A'])\n        >>> df\n                 C\n        B   A\n        foo 1  4.0\n        bar 1  5.0\n        foo 2  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (A: 2, B: 2)\n        Coordinates:\n          * B        (B) object 'bar' 'foo'\n          * A        (A) int64 1 2\n        Data variables:\n            C        (B, A) float64 5.0 nan 4.0 6.0\n\n        >>> p = pd.Panel(np.arange(24).reshape(4,3,2),\n                         items=list('ABCD'),\n                         major_axis=pd.date_range('20130101', periods=3),\n                         minor_axis=['first', 'second'])\n        >>> p\n        <class 'pandas.core.panel.Panel'>\n        Dimensions: 4 (items) x 3 (major_axis) x 2 (minor_axis)\n        Items axis: A to D\n        Major_axis axis: 2013-01-01 00:00:00 to 2013-01-03 00:00:00\n        Minor_axis axis: first to second\n\n        >>> p.to_xarray()\n        <xarray.DataArray (items: 4, major_axis: 3, minor_axis: 2)>\n        array([[[ 0,  1],\n                [ 2,  3],\n                [ 4,  5]],\n               [[ 6,  7],\n                [ 8,  9],\n                [10, 11]],\n               [[12, 13],\n                [14, 15],\n                [16, 17]],\n               [[18, 19],\n                [20, 21],\n                [22, 23]]])\n        Coordinates:\n          * items       (items) object 'A' 'B' 'C' 'D'\n          * major_axis  (major_axis) datetime64[ns] 2013-01-01 2013-01-02 2013-01-03  # noqa\n          * minor_axis  (minor_axis) object 'first' 'second'\n\n        Notes\n        -----\n        See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n        \"\"\"\n\n        try:\n            import xarray\n        except ImportError:\n            # Give a nice error message\n            raise ImportError(\"the xarray library is not installed\\n\"\n                              \"you can install via conda\\n\"\n                              \"conda install xarray\\n\"\n                              \"or via pip\\n\"\n                              \"pip install xarray\\n\")\n\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        elif self.ndim == 2:\n            return xarray.Dataset.from_dataframe(self)\n\n        # > 2 dims\n        coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS]\n        return xarray.DataArray(self,\n                                coords=coords,\n                                )\n\n    _shared_docs['to_latex'] = r\"\"\"\n        Render an object to a tabular environment table. You can splice\n        this into a LaTeX document. Requires \\\\usepackage{booktabs}.\n\n        .. versionchanged:: 0.20.2\n           Added to Series\n\n        `to_latex`-specific options:\n\n        bold_rows : boolean, default False\n            Make the row labels bold in the output\n        column_format : str, default None\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3\n            columns\n        longtable : boolean, default will be read from the pandas config module\n            Default: False.\n            Use a longtable environment instead of tabular. Requires adding\n            a \\\\usepackage{longtable} to your LaTeX preamble.\n        escape : boolean, default will be read from the pandas config module\n            Default: True.\n            When set to False prevents from escaping latex special\n            characters in column names.\n        encoding : str, default None\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n\n            .. versionadded:: 0.18.0\n\n        multicolumn : boolean, default True\n            Use \\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multicolumn_format : str, default 'l'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multirow : boolean, default False\n            Use \\multirow to enhance MultiIndex rows.\n            Requires adding a \\\\usepackage{multirow} to your LaTeX preamble.\n            Will print centered labels (instead of top-aligned)\n            across the contained rows, separating groups via clines.\n            The default will be read from the pandas config module.\n\n            .. versionadded:: 0.20.0\n            \"\"\"\n\n    @Substitution(header='Write out the column names. If a list of strings '\n                         'is given, it is assumed to be aliases for the '\n                         'column names.')\n    @Appender(_shared_docs['to_latex'] % _shared_doc_kwargs)\n    def to_latex(self, buf=None, columns=None, col_space=None, header=True,\n                 index=True, na_rep='NaN', formatters=None, float_format=None,\n                 sparsify=None, index_names=True, bold_rows=False,\n                 column_format=None, longtable=None, escape=None,\n                 encoding=None, decimal='.', multicolumn=None,\n                 multicolumn_format=None, multirow=None):\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()\n        if longtable is None:\n            longtable = config.get_option(\"display.latex.longtable\")\n        if escape is None:\n            escape = config.get_option(\"display.latex.escape\")\n        if multicolumn is None:\n            multicolumn = config.get_option(\"display.latex.multicolumn\")\n        if multicolumn_format is None:\n            multicolumn_format = config.get_option(\n                \"display.latex.multicolumn_format\")\n        if multirow is None:\n            multirow = config.get_option(\"display.latex.multirow\")\n\n        formatter = DataFrameFormatter(self, buf=buf, columns=columns,\n                                       col_space=col_space, na_rep=na_rep,\n                                       header=header, index=index,\n                                       formatters=formatters,\n                                       float_format=float_format,\n                                       bold_rows=bold_rows,\n                                       sparsify=sparsify,\n                                       index_names=index_names,\n                                       escape=escape, decimal=decimal)\n        formatter.to_latex(column_format=column_format, longtable=longtable,\n                           encoding=encoding, multicolumn=multicolumn,\n                           multicolumn_format=multicolumn_format,\n                           multirow=multirow)\n\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    # ----------------------------------------------------------------------\n    # Fancy Indexing\n\n    @classmethod\n    def _create_indexer(cls, name, indexer):\n        \"\"\"Create an indexer like _name in the class.\"\"\"\n        if getattr(cls, name, None) is None:\n            _indexer = functools.partial(indexer, name)\n            setattr(cls, name, property(_indexer, doc=indexer.__doc__))\n\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (DataFrame column, Panel slice,\n        etc.). Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : type of items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    def __getitem__(self, item):\n        return self._get_item_cache(item)\n\n    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res\n\n    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))\n\n    def _reset_cacher(self):\n        \"\"\"Reset the cacher.\"\"\"\n        if hasattr(self, '_cacher'):\n            del self._cacher\n\n    def _iget_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n        ax = self._info_axis\n        if ax.is_unique:\n            lower = self._get_item_cache(ax[item])\n        else:\n            lower = self._take(item, axis=self._info_axis_number,\n                               convert=True)\n        return lower\n\n    def _box_item_values(self, key, values):\n        raise com.AbstractMethodError(self)\n\n    def _maybe_cache_changed(self, item, value):\n        \"\"\"The object has called back to us saying maybe it has changed.\n        \"\"\"\n        self._data.set(item, value, check=False)\n\n    @property\n    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, '_cacher', None) is not None\n\n    def _get_cacher(self):\n        \"\"\"return my cacher or None\"\"\"\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            cacher = cacher[1]()\n        return cacher\n\n    @property\n    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view\n\n    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : boolean, default False\n            clear the item cache\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except Exception:\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t='referant')\n\n        if clear:\n            self._clear_item_cache()\n\n    def _clear_item_cache(self, i=None):\n        if i is not None:\n            self._item_cache.pop(i, None)\n        else:\n            self._item_cache.clear()\n\n    def _slice(self, slobj, axis=0, kind=None):\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result\n\n    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()\n\n    def _set_is_copy(self, ref=None, copy=True):\n        if not copy:\n            self._is_copy = None\n        else:\n            if ref is not None:\n                self._is_copy = weakref.ref(ref)\n            else:\n                self._is_copy = None\n\n    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False\n\n    def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : integer, default 4\n           the level to show of the stack when the error is output\n        t : string, the type of setting error\n        force : boolean, default False\n           if True, then force showing an error\n\n        validate if we are doing a settitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        if force or self._is_copy:\n\n            value = config.get_option('mode.chained_assignment')\n            if value is None:\n                return\n\n            # see if the copy is not actually referred; if so, then dissolve\n            # the copy weakref\n            try:\n                gc.collect(2)\n                if not gc.get_referents(self._is_copy()):\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n\n            # we might be a false positive\n            try:\n                if self._is_copy().shape == self.shape:\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n\n            # a custom message\n            if isinstance(self._is_copy, string_types):\n                t = self._is_copy\n\n            elif t == 'referant':\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame\\n\\n\"\n                     \"See the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            else:\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame.\\n\"\n                     \"Try using .loc[row_indexer,col_indexer] = value \"\n                     \"instead\\n\\nSee the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            if value == 'raise':\n                raise com.SettingWithCopyError(t)\n            elif value == 'warn':\n                warnings.warn(t, com.SettingWithCopyWarning,\n                              stacklevel=stacklevel)\n\n    def __delitem__(self, key):\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if hasattr(self, 'columns') and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key, )\n            for col in self.columns:\n                if isinstance(col, tuple) and col[:len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            self._data.delete(key)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass\n\n    _shared_docs['_take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        This is the internal version of ``.take()`` and will contain a wider\n        selection of parameters useful for internal use but not as suitable\n        for public usage.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : int, default 0\n            The axis on which to select elements. \"0\" means that we are\n            selecting rows, \"1\" means that we are selecting columns, etc.\n        convert : bool, default True\n            Whether to convert negative indices into positive ones.\n            For example, ``-1`` would map to the ``len(axis) - 1``.\n            The conversions are similar to the behavior of indexing a\n            regular Python list.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        numpy.ndarray.take\n        numpy.take\n        \"\"\"\n\n    @Appender(_shared_docs['_take'])\n    def _take(self, indices, axis=0, convert=True, is_copy=True):\n        self._consolidate_inplace()\n\n        if convert:\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n\n        new_data = self._data.take(indices,\n                                   axis=self._get_block_manager_axis(axis),\n                                   verify=True)\n        result = self._constructor(new_data).__finalize__(self)\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result\n\n    _shared_docs['take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : int, default 0\n            The axis on which to select elements. \"0\" means that we are\n            selecting rows, \"1\" means that we are selecting columns, etc.\n        convert : bool, default True\n            .. deprecated:: 0.21.0\n               In the future, negative indices will always be converted.\n\n            Whether to convert negative indices into positive ones.\n            For example, ``-1`` would map to the ``len(axis) - 1``.\n            The conversions are similar to the behavior of indexing a\n            regular Python list.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n                               ('parrot', 'bird',     24.0),\n                               ('lion',   'mammal',   80.5),\n                               ('monkey', 'mammal', np.nan)],\n                              columns=('name', 'class', 'max_speed'),\n                              index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        numpy.ndarray.take\n        numpy.take\n        \"\"\"\n\n    @Appender(_shared_docs['take'])\n    def take(self, indices, axis=0, convert=None, is_copy=True, **kwargs):\n        if convert is not None:\n            msg = (\"The 'convert' parameter is deprecated \"\n                   \"and will be removed in a future version.\")\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n        else:\n            convert = True\n\n        convert = nv.validate_take(tuple(), kwargs)\n        return self._take(indices, axis=axis, convert=convert, is_copy=is_copy)\n\n    def xs(self, key, axis=0, level=None, drop_level=True):\n        \"\"\"\n        Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame. Defaults to cross-section on the rows (axis=0).\n\n        Parameters\n        ----------\n        key : object\n            Some label contained in the index, or partially in a MultiIndex\n        axis : int, default 0\n            Axis to retrieve cross-section on\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n\n        Examples\n        --------\n        >>> df\n           A  B  C\n        a  4  5  2\n        b  4  0  9\n        c  9  7  3\n        >>> df.xs('a')\n        A    4\n        B    5\n        C    2\n        Name: a\n        >>> df.xs('C', axis=1)\n        a    2\n        b    9\n        c    3\n        Name: C\n\n        >>> df\n                            A  B  C  D\n        first second third\n        bar   one    1      4  1  8  9\n              two    1      7  5  5  0\n        baz   one    1      6  6  8  0\n              three  2      5  3  5  3\n        >>> df.xs(('baz', 'three'))\n               A  B  C  D\n        third\n        2      5  3  5  3\n        >>> df.xs('one', level=1)\n                     A  B  C  D\n        first third\n        bar   1      4  1  8  9\n        baz   1      6  6  8  0\n        >>> df.xs(('baz', 2), level=[0, 'third'])\n                A  B  C  D\n        second\n        three   5  3  5  3\n\n        Returns\n        -------\n        xs : Series or DataFrame\n\n        Notes\n        -----\n        xs is only for getting, not setting values.\n\n        MultiIndex Slicers is a generic way to get/set values on any level or\n        levels.  It is a superset of xs functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level,\n                                               drop_level=drop_level)\n\n            # create the tuple of the indexer\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = loc\n            indexer = tuple(indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key,\n                                                      drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    inds, = loc.nonzero()\n                    return self._take(inds, axis=axis, convert=False)\n                else:\n                    return self._take(loc, axis=axis, convert=True)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            new_values = self._data.fast_xs(loc)\n\n            # may need to box a datelike-scalar\n            #\n            # if we encounter an array-like and we only have 1 dim\n            # that means that their are list/ndarrays inside the Series!\n            # so just return them (GH 6394)\n            if not is_list_like(new_values) or self.ndim == 1:\n                return com._maybe_box_datetimelike(new_values)\n\n            result = self._constructor_sliced(\n                new_values, index=self.columns,\n                name=self.index[loc], dtype=new_values.dtype)\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result\n\n    _xs = xs\n\n    def select(self, crit, axis=0):\n        \"\"\"Return data corresponding to axis labels matching criteria\n\n        .. deprecated:: 0.21.0\n            Use df.loc[df.index.map(crit)] to select via labels\n\n        Parameters\n        ----------\n        crit : function\n            To be called on each index (label). Should return True or False\n        axis : int\n\n        Returns\n        -------\n        selection : type of caller\n        \"\"\"\n        warnings.warn(\"'select' is deprecated and will be removed in a \"\n                      \"future release. You can use \"\n                      \".loc[labels.map(crit)] as a replacement\",\n                      FutureWarning, stacklevel=2)\n\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis)\n\n        if len(axis_values) > 0:\n            new_axis = axis_values[\n                np.asarray([bool(crit(label)) for label in axis_values])]\n        else:\n            new_axis = axis_values\n\n        return self.reindex(**{axis_name: new_axis})\n\n    def reindex_like(self, other, method=None, copy=True, limit=None,\n                     tolerance=None):\n        \"\"\"Return an object with matching indices to myself.\n\n        Parameters\n        ----------\n        other : Object\n        method : string or None\n        copy : boolean, default True\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches. Can be list-like.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Notes\n        -----\n        Like calling s.reindex(index=other.index, columns=other.columns,\n                               method=...)\n\n        Returns\n        -------\n        reindexed : same as input\n        \"\"\"\n        d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=method,\n                                       copy=copy, limit=limit,\n                                       tolerance=tolerance)\n\n        return self.reindex(**d)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=None,\n             inplace=False, errors='raise'):\n        \"\"\"\n        Return new object with labels in requested axis removed.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : int or axis name\n            Whether to drop labels from the index (0 / 'index') or\n            columns (1 / 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, default None\n            For MultiIndex\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        Returns\n        -------\n        dropped : type of caller\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n                              columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Notes\n        -----\n        Specifying both `labels` and `index` or `columns` will raise a\n        ValueError.\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and \"\n                                 \"'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\"Need to specify at least one of 'labels', \"\n                             \"'index' or 'columns'\")\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n        else:\n            return obj\n\n    def _drop_axis(self, labels, axis, level=None, errors='raise'):\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis, axis_ = self._get_axis(axis), axis\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            dropped = self.reindex(**{axis_name: new_axis})\n            try:\n                dropped.axes[axis_].set_names(axis.names, inplace=True)\n            except AttributeError:\n                pass\n            result = dropped\n\n        else:\n            labels = _ensure_object(com._index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                indexer = ~axis.get_level_values(level).isin(labels)\n            else:\n                indexer = ~axis.isin(labels)\n\n            if errors == 'raise' and indexer.all():\n                raise KeyError('{} not found in axis'.format(labels))\n\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n\n            result = self.loc[tuple(slicer)]\n\n        return result\n\n    def _update_inplace(self, result, verify_is_copy=True):\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, '_data', result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)\n\n    def add_prefix(self, prefix):\n        \"\"\"\n        Concatenate prefix string with panel items names.\n\n        Parameters\n        ----------\n        prefix : string\n\n        Returns\n        -------\n        with_prefix : type of caller\n        \"\"\"\n        new_data = self._data.add_prefix(prefix)\n        return self._constructor(new_data).__finalize__(self)\n\n    def add_suffix(self, suffix):\n        \"\"\"\n        Concatenate suffix string with panel items names.\n\n        Parameters\n        ----------\n        suffix : string\n\n        Returns\n        -------\n        with_suffix : type of caller\n        \"\"\"\n        new_data = self._data.add_suffix(suffix)\n        return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n             Axis to be sorted\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\n        ...     'col1' : ['A', 'A', 'B', np.nan, 'D', 'C'],\n        ...     'col2' : [2, 1, 9, 8, 7, 4],\n        ...     'col3': [0, 1, 9, 4, 2, 3],\n        ... })\n        >>> df\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n\n        Sort by col1\n\n        >>> df.sort_values(by=['col1'])\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort by multiple columns\n\n        >>> df.sort_values(by=['col1', 'col2'])\n            col1 col2 col3\n        1   A    1    1\n        0   A    2    0\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort Descending\n\n        >>> df.sort_values(by='col1', ascending=False)\n            col1 col2 col3\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        3   NaN  8    4\n\n        Putting NAs first\n\n        >>> df.sort_values(by='col1', ascending=False, na_position='first')\n            col1 col2 col3\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        \"\"\"\n\n    def sort_values(self, by=None, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n        \"\"\"\n        NOT IMPLEMENTED: do not call this method, as sorting values is not\n        supported for Panel objects and will raise an error.\n        \"\"\"\n        raise NotImplementedError(\"sort_values has not been implemented \"\n                                  \"on Panel or Panel4D objects.\")\n\n    _shared_docs['sort_index'] = \"\"\"\n        Sort object by labels (along an axis)\n\n        Parameters\n        ----------\n        axis : %(axes)s to direct sorting\n        level : int or level name or list of ints or list of level names\n            if not None, sort on values in specified index level(s)\n        ascending : boolean, default True\n            Sort ascending vs. descending\n        inplace : bool, default False\n            if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end.\n             Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            if true and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['sort_index'] % dict(axes=\"axes\", klass=\"NDFrame\"))\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        labels = self._get_axis(axis)\n\n        if level is not None:\n            raise NotImplementedError(\"level is not implemented\")\n        if inplace:\n            raise NotImplementedError(\"inplace is not implemented\")\n\n        sort_index = labels.argsort()\n        if not ascending:\n            sort_index = sort_index[::-1]\n\n        new_axis = labels.take(sort_index)\n        return self.reindex(**{axis_name: new_axis})\n\n    _shared_docs['reindex'] = \"\"\"\n        Conform %(klass)s to new index with optional filling logic, placing\n        NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        copy=False\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional (should be specified using keywords)\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to backpropagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29     100\n        2009-12-30     100\n        2009-12-31     100\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\"\n\n    # TODO: Decide if we care about having different examples for different\n    #       kinds\n\n    @Appender(_shared_docs['reindex'] % dict(axes=\"axes\", klass=\"NDFrame\",\n                                             optional_labels=\"\",\n                                             optional_axis=\"\"))\n    def reindex(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n        level = kwargs.pop('level', None)\n        copy = kwargs.pop('copy', True)\n        limit = kwargs.pop('limit', None)\n        tolerance = kwargs.pop('tolerance', None)\n        fill_value = kwargs.pop('fill_value', np.nan)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError('reindex() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(self._get_axis(axis).identical(ax)\n               for axis, ax in axes.items() if ax is not None):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            try:\n                return self._reindex_multi(axes, copy, fill_value)\n            except Exception:\n                pass\n\n        # perform the reindex on the axes\n        return self._reindex_axes(axes, level, limit, tolerance, method,\n                                  fill_value, copy).__finalize__(self)\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n                      copy):\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(labels, level=level, limit=limit,\n                                            tolerance=tolerance, method=method)\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers({axis: [new_index, indexer]},\n                                             fill_value=fill_value,\n                                             copy=copy, allow_dups=False)\n\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return ((com._count_not_none(*axes.values()) == self._AXIS_LEN) and\n                method is None and level is None and not self._is_mixed_type)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        return NotImplemented\n\n    _shared_docs[\n        'reindex_axis'] = (\"\"\"Conform input object to new index with optional\n        filling logic, placing NA/NaN in locations having no value in the\n        previous index. A new object is produced unless the new index is\n        equivalent to the current one and copy=False\n\n        Parameters\n        ----------\n        labels : array-like\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        axis : %(axes_single_arg)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            Method to use for filling holes in reindexed DataFrame:\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)\n\n        See Also\n        --------\n        reindex, reindex_like\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\")\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=True,\n                     limit=None, fill_value=np.nan):\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        self._consolidate_inplace()\n\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis_name)\n        method = missing.clean_reindex_fill_method(method)\n        warnings.warn(msg, FutureWarning, stacklevel=3)\n        new_index, indexer = axis_values.reindex(labels, method, level,\n                                                 limit=limit)\n        return self._reindex_with_indexers({axis: [new_index, indexer]},\n                                           fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers, fill_value=np.nan, copy=False,\n                               allow_dups=False):\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = _ensure_index(index)\n            if indexer is not None:\n                indexer = _ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,\n                                                fill_value=fill_value,\n                                                allow_dups=allow_dups,\n                                                copy=copy)\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def _reindex_axis(self, new_index, fill_method, axis, copy):\n        new_data = self._data.reindex_axis(new_index, axis=axis,\n                                           method=fill_method, copy=copy)\n\n        if new_data is self._data and not copy:\n            return self\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def filter(self, items=None, like=None, regex=None, axis=None):\n        \"\"\"\n        Subset rows or columns of dataframe according to labels in\n        the specified index.\n\n        Note that this routine does not filter a dataframe on its\n        contents. The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            List of info axis to restrict to (must not all be present)\n        like : string\n            Keep info axis where \"arg in col == True\"\n        regex : string (regular expression)\n            Keep info axis with re.search(regex, col) == True\n        axis : int or string axis name\n            The axis to filter on.  By default this is the info axis,\n            'index' for Series, 'columns' for DataFrame\n\n        Returns\n        -------\n        same type as input object\n\n        Examples\n        --------\n        >>> df\n        one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=['one', 'three'])\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex='e$', axis=1)\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like='bbi', axis=0)\n        one  two  three\n        rabbit    4    5      6\n\n        See Also\n        --------\n        pandas.DataFrame.loc\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n        \"\"\"\n        import re\n\n        nkw = com._count_not_none(items, like, regex)\n        if nkw > 1:\n            raise TypeError('Keyword arguments `items`, `like`, or `regex` '\n                            'are mutually exclusive')\n\n        if axis is None:\n            axis = self._info_axis_name\n        labels = self._get_axis(axis)\n\n        if items is not None:\n            name = self._get_axis_name(axis)\n            return self.reindex(\n                **{name: [r for r in items if r in labels]})\n        elif like:\n            def f(x):\n                return like in to_str(x)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        elif regex:\n            def f(x):\n                return matcher.search(to_str(x)) is not None\n            matcher = re.compile(regex)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        else:\n            raise TypeError('Must pass either `items`, `like`, or `regex`')\n\n    def head(self, n=5):\n        \"\"\"\n        Return the first n rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        obj_head : type of caller\n            The first n rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.tail\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first n lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        \"\"\"\n\n        return self.iloc[:n]\n\n    def tail(self, n=5):\n        \"\"\"\n        Return the last n rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        type of caller\n            The last `n` rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.head : The first `n` rows of the caller object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the last 5 lines\n\n        >>> df.tail()\n           animal\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n\n        Viewing the last n lines (three in this case)\n\n        >>> df.tail(3)\n          animal\n        6  shark\n        7  whale\n        8  zebra\n        \"\"\"\n\n        if n == 0:\n            return self.iloc[0:0]\n        return self.iloc[-n:]\n\n    def sample(self, n=None, frac=None, replace=False, weights=None,\n               random_state=None, axis=None):\n        \"\"\"\n        Returns a random sample of items from an axis of object.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : boolean, optional\n            Sample with or without replacement. Default = False.\n        weights : str or ndarray-like, optional\n            Default 'None' results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            inf and -inf values not allowed.\n        random_state : int or numpy.random.RandomState, optional\n            Seed for the random number generator (if int), or numpy RandomState\n            object.\n        axis : int or string, optional\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type (0 for Series and DataFrames, 1 for Panels).\n\n        Returns\n        -------\n        A new object of same type as caller.\n\n        Examples\n        --------\n\n        Generate an example ``Series`` and ``DataFrame``:\n\n        >>> s = pd.Series(np.random.randn(50))\n        >>> s.head()\n        0   -0.038497\n        1    1.820773\n        2   -0.972766\n        3   -1.598270\n        4   -1.095526\n        dtype: float64\n        >>> df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n        >>> df.head()\n                  A         B         C         D\n        0  0.016443 -2.318952 -0.566372 -1.028078\n        1 -1.051921  0.438836  0.658280 -0.175797\n        2 -1.243569 -0.364626 -0.215065  0.057736\n        3  1.768216  0.404512 -0.385604 -1.457834\n        4  1.072446 -1.137172  0.314194 -0.046661\n\n        Next extract a random sample from both of these objects...\n\n        3 random elements from the ``Series``:\n\n        >>> s.sample(n=3)\n        27   -0.994689\n        55   -1.049016\n        67   -0.224565\n        dtype: float64\n\n        And a random 10% of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.1, replace=True)\n                   A         B         C         D\n        35  1.981780  0.142106  1.817165 -0.290805\n        49 -1.336199 -0.448634 -0.789640  0.217116\n        40  0.823173 -0.078816  1.009536  1.015108\n        15  1.421154 -0.055301 -1.922594 -0.019696\n        6  -0.148339  0.832938  1.787600 -1.383767\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n\n        axis = self._get_axis_number(axis)\n        axis_length = self.shape[axis]\n\n        # Process random_state argument\n        rs = com._random_state(random_state)\n\n        # Check weights for compliance\n        if weights is not None:\n\n            # If a series, align with frame\n            if isinstance(weights, pd.Series):\n                weights = weights.reindex(self.axes[axis])\n\n            # Strings acceptable if a dataframe and axis = 0\n            if isinstance(weights, string_types):\n                if isinstance(self, pd.DataFrame):\n                    if axis == 0:\n                        try:\n                            weights = self[weights]\n                        except KeyError:\n                            raise KeyError(\"String passed to weights not a \"\n                                           \"valid column\")\n                    else:\n                        raise ValueError(\"Strings can only be passed to \"\n                                         \"weights when sampling from rows on \"\n                                         \"a DataFrame\")\n                else:\n                    raise ValueError(\"Strings cannot be passed as weights \"\n                                     \"when sampling from a Series or Panel.\")\n\n            weights = pd.Series(weights, dtype='float64')\n\n            if len(weights) != axis_length:\n                raise ValueError(\"Weights and axis to be sampled must be of \"\n                                 \"same length\")\n\n            if (weights == np.inf).any() or (weights == -np.inf).any():\n                raise ValueError(\"weight vector may not include `inf` values\")\n\n            if (weights < 0).any():\n                raise ValueError(\"weight vector many not include negative \"\n                                 \"values\")\n\n            # If has nan, set to zero.\n            weights = weights.fillna(0)\n\n            # Renormalize if don't sum to 1\n            if weights.sum() != 1:\n                if weights.sum() != 0:\n                    weights = weights / weights.sum()\n                else:\n                    raise ValueError(\"Invalid weights: weights sum to zero\")\n\n            weights = weights.values\n\n        # If no frac or n, default to n=1.\n        if n is None and frac is None:\n            n = 1\n        elif n is not None and frac is None and n % 1 != 0:\n            raise ValueError(\"Only integers accepted as `n` values\")\n        elif n is None and frac is not None:\n            n = int(round(frac * axis_length))\n        elif n is not None and frac is not None:\n            raise ValueError('Please enter a value for `frac` OR `n`, not '\n                             'both')\n\n        # Check for negative sizes\n        if n < 0:\n            raise ValueError(\"A negative number of rows requested. Please \"\n                             \"provide positive value.\")\n\n        locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n        return self.take(locs, axis=axis, is_copy=False)\n\n    _shared_docs['pipe'] = (r\"\"\"\n        Apply func(self, \\*args, \\*\\*kwargs)\n\n        Parameters\n        ----------\n        func : function\n            function to apply to the %(klass)s.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the %(klass)s.\n        args : iterable, optional\n            positional arguments passed into ``func``.\n        kwargs : mapping, optional\n            a dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        object : the return type of ``func``.\n\n        Notes\n        -----\n\n        Use ``.pipe`` when chaining together functions that expect\n        Series, DataFrames or GroupBy objects. Instead of writing\n\n        >>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\n        You can write\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``f`` takes its data as ``arg2``:\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n        ...  )\n\n        See Also\n        --------\n        pandas.DataFrame.apply\n        pandas.DataFrame.applymap\n        pandas.Series.map\n    \"\"\")\n\n    @Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\n    def pipe(self, func, *args, **kwargs):\n        return com._pipe(self, func, *args, **kwargs)\n\n    _shared_docs['aggregate'] = (\"\"\"\n    Aggregate using callable, string, dict, or list of string/callables\n\n    %(versionadded)s\n\n    Parameters\n    ----------\n    func : callable, string, dictionary, or list of string/callables\n        Function to use for aggregating the data. If a function, must either\n        work when passed a %(klass)s or when passed to %(klass)s.apply. For\n        a DataFrame, can pass a dict, if the keys are DataFrame column names.\n\n        Accepted Combinations are:\n\n        - string function name\n        - function\n        - list of functions\n        - dict of column names -> functions (or list of functions)\n\n    Notes\n    -----\n    Numpy functions mean/median/prod/sum/std/var are special cased so the\n    default behavior is applying the function along axis=0\n    (e.g., np.mean(arr_2d, axis=0)) as opposed to\n    mimicking the default Numpy behavior (e.g., np.mean(arr_2d)).\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Returns\n    -------\n    aggregated : %(klass)s\n    \"\"\")\n\n    _shared_docs['transform'] = (\"\"\"\n    Call function producing a like-indexed %(klass)s\n    and return a %(klass)s with the transformed values\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    func : callable, string, dictionary, or list of string/callables\n        To apply to column\n\n        Accepted Combinations are:\n\n        - string function name\n        - function\n        - list of functions\n        - dict of column names -> functions (or list of functions)\n\n    Returns\n    -------\n    transformed : %(klass)s\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    df.iloc[3:7] = np.nan\n\n    >>> df.transform(lambda x: (x - x.mean()) / x.std())\n                       A         B         C\n    2000-01-01  0.579457  1.236184  0.123424\n    2000-01-02  0.370357 -0.605875 -1.231325\n    2000-01-03  1.455756 -0.277446  0.288967\n    2000-01-04       NaN       NaN       NaN\n    2000-01-05       NaN       NaN       NaN\n    2000-01-06       NaN       NaN       NaN\n    2000-01-07       NaN       NaN       NaN\n    2000-01-08 -0.498658  1.274522  1.642524\n    2000-01-09 -0.540524 -1.012676 -0.828968\n    2000-01-10 -1.366388 -0.614710  0.005378\n\n    See also\n    --------\n    pandas.%(klass)s.aggregate\n    pandas.%(klass)s.apply\n\n    \"\"\")\n\n    # ----------------------------------------------------------------------\n    # Attribute access\n\n    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self\n\n    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (name in self._internal_names_set or name in self._metadata or\n                name in self._accessors):\n            return object.__getattribute__(self, name)\n        else:\n            if name in self._info_axis:\n                return self[name]\n            return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\"Pandas doesn't allow columns to be \"\n                                  \"created via a new attribute name - see \"\n                                  \"https://pandas.pydata.org/pandas-docs/\"\n                                  \"stable/indexing.html#attribute-access\",\n                                  stacklevel=2)\n                object.__setattr__(self, name, value)\n\n    # ----------------------------------------------------------------------\n    # Getting and setting elements\n\n    # ----------------------------------------------------------------------\n    # Consolidation of internals\n\n    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result\n\n    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)\n\n    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : boolean, default False\n            If False return new object, otherwise modify existing object\n\n        Returns\n        -------\n        consolidated : type of caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)\n\n    def consolidate(self, inplace=False):\n        \"\"\"Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        .. deprecated:: 0.20.0\n            Consolidate will be an internal implementation only.\n        \"\"\"\n        # 15483\n        warnings.warn(\"consolidate is deprecated and will be removed in a \"\n                      \"future release.\", FutureWarning, stacklevel=2)\n        return self._consolidate(inplace)\n\n    @property\n    def _is_mixed_type(self):\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_numeric_mixed_type(self):\n        f = lambda: self._data.is_numeric_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_datelike_mixed_type(self):\n        f = lambda: self._data.is_datelike_mixed_type\n        return self._protect_consolidate(f)\n\n    def _check_inplace_setting(self, value):\n        \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n\n        if self._is_mixed_type:\n            if not self._is_numeric_mixed_type:\n\n                # allow an actual np.nan thru\n                try:\n                    if np.isnan(value):\n                        return True\n                except Exception:\n                    pass\n\n                raise TypeError('Cannot do inplace boolean setting on '\n                                'mixed-types with a non np.nan value')\n\n        return True\n\n    def _get_numeric_data(self):\n        return self._constructor(\n            self._data.get_numeric_data()).__finalize__(self)\n\n    def _get_bool_data(self):\n        return self._constructor(self._data.get_bool_data()).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    def as_matrix(self, columns=None):\n        \"\"\"Convert the frame to its Numpy-array representation.\n\n        .. deprecated:: 0.23.0\n            Use :meth:`DataFrame.values` instead.\n\n        Parameters\n        ----------\n        columns: list, optional, default:None\n            If None, return all columns, otherwise, returns specified columns.\n\n        Returns\n        -------\n        values : ndarray\n            If the caller is heterogeneous and contains booleans or objects,\n            the result will be of dtype=object. See Notes.\n\n\n        Notes\n        -----\n        Return is NOT a Numpy-matrix, rather, a Numpy-array.\n\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcase to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a flot64 dtype.\n\n        This method is provided for backwards compatibility. Generally,\n        it is recommended to use '.values'.\n\n        See Also\n        --------\n        pandas.DataFrame.values\n        \"\"\"\n        warnings.warn(\"Method .as_matrix will be removed in a future version. \"\n                      \"Use .values instead.\", FutureWarning, stacklevel=2)\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED,\n                                   items=columns)\n\n    @property\n    def values(self):\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]], dtype=int64)\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        See Also\n        --------\n        pandas.DataFrame.index : Retrievie the index labels\n        pandas.DataFrame.columns : Retrieving the column names\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)\n\n    @property\n    def _values(self):\n        \"\"\"internal implementation\"\"\"\n        return self.values\n\n    @property\n    def _get_values(self):\n        # compat\n        return self.values\n\n    def get_values(self):\n        \"\"\"same as values (but handles sparseness conversions)\"\"\"\n        return self.values\n\n    def get_dtype_counts(self):\n        \"\"\"Return the counts of dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtype_counts())\n\n    def get_ftype_counts(self):\n        \"\"\"Return the counts of ftypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftype_counts())\n\n    @property\n    def dtypes(self):\n        \"\"\"Return the dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    @property\n    def ftypes(self):\n        \"\"\"\n        Return the ftypes (indication of sparse/dense and dtype)\n        in this object.\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    def as_blocks(self, copy=True):\n        \"\"\"\n        Convert the frame to a dict of dtype -> Constructor Types that each has\n        a homogeneous dtype.\n\n        .. deprecated:: 0.21.0\n\n        NOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n              as_matrix)\n\n        Parameters\n        ----------\n        copy : boolean, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> Constructor Types\n        \"\"\"\n        warnings.warn(\"as_blocks is deprecated and will \"\n                      \"be removed in a future version\",\n                      FutureWarning, stacklevel=2)\n        return self._to_dict_of_blocks(copy=copy)\n\n    @property\n    def blocks(self):\n        \"\"\"\n        Internal property, property synonym for as_blocks()\n\n        .. deprecated:: 0.21.0\n        \"\"\"\n        return self.as_blocks()\n\n    def _to_dict_of_blocks(self, copy=True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {k: self._constructor(v).__finalize__(self)\n                for k, v, in self._data.to_dict(copy=copy).items()}\n\n    @deprecate_kwarg(old_arg_name='raise_on_error', new_arg_name='errors',\n                     mapping={True: 'raise', False: 'ignore'})\n    def astype(self, dtype, copy=True, errors='raise', **kwargs):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True.\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            .. versionadded:: 0.20.0\n\n        raise_on_error : raise on invalid input\n            .. deprecated:: 0.20.0\n               Use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns\n        -------\n        casted : type of caller\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> ser.astype('category', ordered=True, categories=[2, 1])\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1,2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n\n        See also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError('Only the Series name can be used for '\n                                   'the key in Series dtype mappings.')\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors, **kwargs)\n            elif self.ndim > 2:\n                raise NotImplementedError(\n                    'astype() only accepts a dtype arg of type dict when '\n                    'invoked on Series and DataFrames. A single dtype must be '\n                    'specified when invoked on a Panel.'\n                )\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError('Only a column name can be used for the '\n                                   'key in a dtype mappings argument.')\n            results = []\n            for col_name, col in self.iteritems():\n                if col_name in dtype:\n                    results.append(col.astype(dtype[col_name], copy=copy))\n                else:\n                    results.append(results.append(col.copy() if copy else col))\n\n        elif is_categorical_dtype(dtype) and self.ndim > 1:\n            # GH 18099: columnwise conversion to categorical\n            results = (self[col].astype(dtype, copy=copy) for col in self)\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,\n                                         **kwargs)\n            return self._constructor(new_data).__finalize__(self)\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result\n\n    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series, DataFrame or Panel\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)\n\n    def __copy__(self, deep=True):\n        return self.copy(deep=deep)\n\n    def __deepcopy__(self, memo=None):\n        if memo is None:\n            memo = {}\n        return self.copy(deep=True)\n\n    def _convert(self, datetime=False, numeric=False, timedelta=False,\n                 coerce=False, copy=True):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : boolean, default False\n            If True, convert to date where possible.\n        numeric : boolean, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : boolean, default False\n            If True, convert to timedelta where possible.\n        coerce : boolean, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT)\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        return self._constructor(\n            self._data.convert(datetime=datetime, numeric=numeric,\n                               timedelta=timedelta, coerce=coerce,\n                               copy=copy)).__finalize__(self)\n\n    def convert_objects(self, convert_dates=True, convert_numeric=False,\n                        convert_timedeltas=True, copy=True):\n        \"\"\"Attempt to infer better dtype for object columns.\n\n        .. deprecated:: 0.21.0\n\n        Parameters\n        ----------\n        convert_dates : boolean, default True\n            If True, convert to date where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        convert_numeric : boolean, default False\n            If True, attempt to coerce to numbers (including strings), with\n            unconvertible values becoming NaN.\n        convert_timedeltas : boolean, default True\n            If True, convert to timedelta where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Return a fixed frequency timedelta index,\n            with day as the default.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        msg = (\"convert_objects is deprecated.  To re-infer data dtypes for \"\n               \"object columns, use {klass}.infer_objects()\\nFor all \"\n               \"other conversions use the data-type specific converters \"\n               \"pd.to_datetime, pd.to_timedelta and pd.to_numeric.\"\n               ).format(klass=self.__class__.__name__)\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self._constructor(\n            self._data.convert(convert_dates=convert_dates,\n                               convert_numeric=convert_numeric,\n                               convert_timedeltas=convert_timedeltas,\n                               copy=copy)).__finalize__(self)\n\n    def infer_objects(self):\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to numeric typeR\n\n        Returns\n        -------\n        converted : same type as input object\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        # numeric=False necessary to only soft convert;\n        # python objects will still be converted to\n        # native numpy numeric types\n        return self._constructor(\n            self._data.convert(datetime=True, numeric=False,\n                               timedelta=True, coerce=False,\n                               copy=True)).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Filling NA's\n\n    _shared_docs['fillna'] = (\"\"\"\n        Fill NA/NaN values using the specified method\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame). (values not\n            in the dict/Series/DataFrame will not be filled). This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        axis : %(axes_single_arg)s\n        inplace : boolean, default False\n            If True, fill in place. Note: this will modify any\n            other views on this object, (e.g. a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            a dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible)\n\n        See Also\n        --------\n        reindex, asfreq\n\n        Returns\n        -------\n        filled : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                    columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\")\n\n    @Appender(_shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        value, method = validate_fillna_kwargs(value, method)\n\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        from pandas import DataFrame\n        if value is None:\n\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._data = result._data.downcast()\n\n                return result\n\n            # > 3d\n            if self.ndim > 3:\n                raise NotImplementedError('Cannot fillna with a method for > '\n                                          '3dims')\n\n            # 3d\n            elif self.ndim == 3:\n                # fill in 2d chunks\n                result = {col: s.fillna(method=method, value=value)\n                          for col, s in self.iteritems()}\n                new_obj = self._constructor.\\\n                    from_dict(result).__finalize__(self)\n                new_data = new_obj._data\n\n            else:\n                # 2d or less\n                new_data = self._data.interpolate(method=method, axis=axis,\n                                                  limit=limit, inplace=inplace,\n                                                  coerce=True,\n                                                  downcast=downcast)\n        else:\n            if len(self._get_axis(axis)) == 0:\n                return self\n\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    from pandas import Series\n                    value = Series(value)\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError('\"value\" parameter must be a scalar, dict '\n                                    'or Series, but you passed a '\n                                    '\"{0}\"'.format(type(value).__name__))\n\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError('Currently only can fill '\n                                              'with dict/Series column '\n                                              'by column')\n\n                result = self if inplace else self.copy()\n                for k, v in compat.iteritems(value):\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n            elif isinstance(value, DataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)\n            else:\n                raise ValueError(\"invalid fill value with a %s\" % type(value))\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def ffill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='ffill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='ffill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    def bfill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='bfill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='bfill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    _shared_docs['replace'] = (\"\"\"\n        Replace values given in 'to_replace' with 'value'.\n\n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, numeric, or None\n\n            * numeric, str or regex:\n\n                - numeric: numeric values equal to ``to_replace`` will be\n                  replaced with ``value``\n                - str: string exactly matching ``to_replace`` will be replaced\n                  with ``value``\n                - regex: regexs matching ``to_replace`` will be replaced with\n                  ``value``\n\n            * list of str, regex, or numeric:\n\n                - First, if ``to_replace`` and ``value`` are both lists, they\n                  **must** be the same length.\n                - Second, if ``regex=True`` then all of the strings in **both**\n                  lists will be interpreted as regexs otherwise they will match\n                  directly. This doesn't matter much for ``value`` since there\n                  are only a few possible substitution regexes you can use.\n                - str, regex and numeric rules apply as above.\n\n            * dict:\n\n                - Dicts can be used to specify different replacement values\n                  for different existing values. For example,\n                  {'a': 'b', 'y': 'z'} replaces the value 'a' with 'b' and\n                  'y' with 'z'. To use a dict in this way the ``value``\n                  parameter should be ``None``.\n                - For a DataFrame a dict can specify that different values\n                  should be replaced in different columns. For example,\n                  {'a': 1, 'b': 'z'} looks for the value 1 in column 'a' and\n                  the value 'z' in column 'b' and replaces these values with\n                  whatever is specified in ``value``. The ``value`` parameter\n                  should not be ``None`` in this case. You can treat this as a\n                  special case of passing two lists except that you are\n                  specifying the column to search in.\n                - For a DataFrame nested dictionaries, e.g.,\n                  {'a': {'b': np.nan}}, are read as follows: look in column 'a'\n                  for the value 'b' and replace it with NaN. The ``value``\n                  parameter should be ``None`` to use a nested dict in this\n                  way. You can nest regular expressions as well. Note that\n                  column names (the top-level dictionary keys in a nested\n                  dictionary) **cannot** be regular expressions.\n\n            * None:\n\n                - This means that the ``regex`` argument must be a string,\n                  compiled regular expression, or list, dict, ndarray or Series\n                  of such elements. If ``value`` is also ``None`` then this\n                  **must** be a nested dictionary or ``Series``.\n\n            See the examples section for examples of each of these.\n        value : scalar, dict, list, str, regex, default None\n            Value to replace any values matching ``to_replace`` with.\n            For a DataFrame a dict of values can be used to specify which\n            value to use for each column (columns not in the dict will not be\n            filled). Regular expressions, strings and lists or dicts of such\n            objects are also allowed.\n        inplace : boolean, default False\n            If True, in place. Note: this will modify any\n            other views on this object (e.g. a column from a DataFrame).\n            Returns the caller if this is True.\n        limit : int, default None\n            Maximum size gap to forward or backward fill\n        regex : bool or same types as ``to_replace``, default False\n            Whether to interpret ``to_replace`` and/or ``value`` as regular\n            expressions. If this is ``True`` then ``to_replace`` *must* be a\n            string. Alternatively, this could be a regular expression or a\n            list, dict, or array of regular expressions in which case\n            ``to_replace`` must be ``None``.\n        method : string, optional, {'pad', 'ffill', 'bfill'}\n            The method to use when for replacement, when ``to_replace`` is a\n            scalar, list or tuple and ``value`` is None.\n\n        .. versionchanged:: 0.23.0\n           Added to DataFrame\n\n        See Also\n        --------\n        %(klass)s.fillna : Fill NA/NaN values\n        %(klass)s.where : Replace values based on boolean condition\n\n        Returns\n        -------\n        filled : %(klass)s\n\n        Raises\n        ------\n        AssertionError\n            * If ``regex`` is not a ``bool`` and ``to_replace`` is not\n              ``None``.\n        TypeError\n            * If ``to_replace`` is a ``dict`` and ``value`` is not a ``list``,\n              ``dict``, ``ndarray``, or ``Series``\n            * If ``to_replace`` is ``None`` and ``regex`` is not compilable\n              into a regular expression or is a list, dict, ndarray, or\n              Series.\n            * When replacing multiple ``bool`` or ``datetime64`` objects and\n              the arguments to ``to_replace`` does not match the type of the\n              value being replaced\n        ValueError\n            * If a ``list`` or an ``ndarray`` is passed to ``to_replace`` and\n              `value` but they are not the same length.\n\n        Notes\n        -----\n        * Regex substitution is performed under the hood with ``re.sub``. The\n          rules for substitution for ``re.sub`` are the same.\n        * Regular expressions will only substitute on strings, meaning you\n          cannot provide, for example, a regular expression matching floating\n          point numbers and expect the columns in your frame that have a\n          numeric dtype to be matched. However, if those floating point\n          numbers *are* strings, then you can do this.\n        * This method has *a lot* of options. You are encouraged to experiment\n          and play with this method to gain intuition about how it works.\n\n        Examples\n        --------\n\n        >>> s = pd.Series([0, 1, 2, 3, 4])\n        >>> s.replace(0, 5)\n        0    5\n        1    1\n        2    2\n        3    3\n        4    4\n        dtype: int64\n        >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n        ...                    'B': [5, 6, 7, 8, 9],\n        ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n        >>> df.replace(0, 5)\n           A  B  C\n        0  5  5  a\n        1  1  6  b\n        2  2  7  c\n        3  3  8  d\n        4  4  9  e\n\n        >>> df.replace([0, 1, 2, 3], 4)\n           A  B  C\n        0  4  5  a\n        1  4  6  b\n        2  4  7  c\n        3  4  8  d\n        4  4  9  e\n        >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n           A  B  C\n        0  4  5  a\n        1  3  6  b\n        2  2  7  c\n        3  1  8  d\n        4  4  9  e\n        >>> s.replace([1, 2], method='bfill')\n        0    0\n        1    3\n        2    3\n        3    3\n        4    4\n        dtype: int64\n\n        >>> df.replace({0: 10, 1: 100})\n             A  B  C\n        0   10  5  a\n        1  100  6  b\n        2    2  7  c\n        3    3  8  d\n        4    4  9  e\n        >>> df.replace({'A': 0, 'B': 5}, 100)\n             A    B  C\n        0  100  100  a\n        1    1    6  b\n        2    2    7  c\n        3    3    8  d\n        4    4    9  e\n        >>> df.replace({'A': {0: 100, 4: 400}})\n             A  B  C\n        0  100  5  a\n        1    1  6  b\n        2    2  7  c\n        3    3  8  d\n        4  400  9  e\n\n        >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n        ...                    'B': ['abc', 'bar', 'xyz']})\n        >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n        >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n              A    B\n        0   new  abc\n        1   foo  bar\n        2  bait  xyz\n        >>> df.replace(regex=r'^ba.$', value='new')\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n        >>> df.replace(regex={r'^ba.$':'new', 'foo':'xyz'})\n              A    B\n        0   new  abc\n        1   xyz  new\n        2  bait  xyz\n        >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n              A    B\n        0   new  abc\n        1   new  new\n        2  bait  xyz\n\n        Note that when replacing multiple ``bool`` or ``datetime64`` objects,\n        the data types in the ``to_replace`` parameter must match the data\n        type of the value being replaced:\n\n        >>> df = pd.DataFrame({'A': [True, False, True],\n        ...                    'B': [False, True, False]})\n        >>> df.replace({'a string': 'new value', True: False})  # raises\n        TypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\n        This raises a ``TypeError`` because one of the ``dict`` keys is not of\n        the correct type for replacement.\n    \"\"\")\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\"'to_replace' must be 'None' if 'regex' is \"\n                                 \"not a bool\")\n        if axis is not None:\n            warnings.warn('the \"axis\" argument is deprecated '\n                          'and will be removed in'\n                          'v0.13; this argument has no effect')\n\n        self._consolidate_inplace()\n\n        if value is None:\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                if isinstance(self, pd.DataFrame):\n                    return self.apply(_single_replace,\n                                      args=(to_replace, method, inplace,\n                                            limit))\n                return _single_replace(self, to_replace, method, inplace,\n                                       limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError('If \"to_replace\" and \"value\" are both None'\n                                    ' and \"to_replace\" is not a list, then '\n                                    'regex must be a mapping')\n                to_replace = regex\n                regex = True\n\n            items = list(compat.iteritems(to_replace))\n            keys, values = lzip(*items) or ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\"If a nested mapping is passed, all values\"\n                                    \" of the top level mapping must be \"\n                                    \"mappings\")\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = lzip(*v.items()) or ([], [])\n                    if set(keys) & set(values):\n                        raise ValueError(\"Replacement not allowed with \"\n                                         \"overlapping keys and values\")\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(to_replace, value, inplace=inplace,\n                                limit=limit, regex=regex)\n        else:\n\n            # need a non-zero len on all axes\n            for a in self._AXIS_ORDERS:\n                if not len(self._get_axis(a)):\n                    return self\n\n            new_data = self._data\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    res = self if inplace else self.copy()\n                    for c, src in compat.iteritems(to_replace):\n                        if c in value and c in self:\n                            # object conversion is handled in\n                            # series.replace which is called recursivelly\n                            res[c] = res[c].replace(to_replace=src,\n                                                    value=value[c],\n                                                    inplace=False,\n                                                    regex=regex)\n                    return None if inplace else res\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    keys = [(k, src) for k, src in compat.iteritems(to_replace)\n                            if k in self]\n                    keys_len = len(keys) - 1\n                    for i, (k, src) in enumerate(keys):\n                        convert = i == keys_len\n                        new_data = new_data.replace(to_replace=src,\n                                                    value=value,\n                                                    filter=[k],\n                                                    inplace=inplace,\n                                                    regex=regex,\n                                                    convert=convert)\n                else:\n                    raise TypeError('value argument must be scalar, dict, or '\n                                    'Series')\n\n            elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError('Replacement lists must match '\n                                         'in length. Expecting %d got %d ' %\n                                         (len(to_replace), len(value)))\n\n                    new_data = self._data.replace_list(src_list=to_replace,\n                                                       dest_list=value,\n                                                       inplace=inplace,\n                                                       regex=regex)\n\n                else:  # [NA, ''] -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n            elif to_replace is None:\n                if not (is_re_compilable(regex) or\n                        is_list_like(regex) or is_dict_like(regex)):\n                    raise TypeError(\"'regex' must be a string or a compiled \"\n                                    \"regular expression or a list or dict of \"\n                                    \"strings or regular expressions, you \"\n                                    \"passed a\"\n                                    \" {0!r}\".format(type(regex).__name__))\n                return self.replace(regex, value, inplace=inplace, limit=limit,\n                                    regex=True)\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    new_data = self._data\n\n                    for k, v in compat.iteritems(value):\n                        if k in self:\n                            new_data = new_data.replace(to_replace=to_replace,\n                                                        value=v, filter=[k],\n                                                        inplace=inplace,\n                                                        regex=regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n                else:\n                    msg = ('Invalid \"to_replace\" type: '\n                           '{0!r}').format(type(to_replace).__name__)\n                    raise TypeError(msg)  # pragma: no cover\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['interpolate'] = \"\"\"\n        Please note that only ``method='linear'`` is supported for\n        DataFrames/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\n                  'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\n                  'polynomial', 'spline', 'piecewise_polynomial',\n                  'from_derivatives', 'pchip', 'akima'}\n\n            * 'linear': ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n              default\n            * 'time': interpolation works on daily and higher resolution\n              data to interpolate given length of interval\n            * 'index', 'values': use the actual numerical values of the index\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n              'barycentric', 'polynomial' is passed to\n              ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\n              require that you also specify an `order` (int),\n              e.g. df.interpolate(method='polynomial', order=4).\n              These use the actual numerical values of the index.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n              are all wrappers around the scipy interpolation methods of\n              similar names. These use the actual numerical values of the\n              index. For more information on their behavior, see the\n              `scipy documentation\n              <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\n              and `tutorial documentation\n              <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__\n            * 'from_derivatives' refers to BPoly.from_derivatives which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18\n\n            .. versionadded:: 0.18.1\n\n               Added support for the 'akima' method\n               Added interpolate method 'from_derivatives' which replaces\n               'piecewise_polynomial' in scipy 0.18; backwards-compatible with\n               scipy < 0.18\n\n        axis : {0, 1}, default 0\n            * 0: fill column-by-column\n            * 1: fill row-by-row\n        limit : int, default None.\n            Maximum number of consecutive NaNs to fill. Must be greater than 0.\n        limit_direction : {'forward', 'backward', 'both'}, default 'forward'\n        limit_area : {'inside', 'outside'}, default None\n            * None: (default) no fill restriction\n            * 'inside' Only fill NaNs surrounded by valid values (interpolate).\n            * 'outside' Only fill NaNs outside valid values (extrapolate).\n            .. versionadded:: 0.21.0\n\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n        inplace : bool, default False\n            Update the NDFrame in place if possible.\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        kwargs : keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame of same shape interpolated at the NaNs\n\n        See Also\n        --------\n        reindex, replace, fillna\n\n        Examples\n        --------\n\n        Filling in NaNs\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s.interpolate()\n        0    0\n        1    1\n        2    2\n        3    3\n        dtype: float64\n\n        \"\"\"\n\n    @Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\n    def interpolate(self, method='linear', axis=0, limit=None, inplace=False,\n                    limit_direction='forward', limit_area=None,\n                    downcast=None, **kwargs):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if self.ndim > 2:\n            raise NotImplementedError(\"Interpolate has not been implemented \"\n                                      \"on Panel and Panel 4D objects.\")\n\n        if axis == 0:\n            ax = self._info_axis_name\n            _maybe_transposed_self = self\n        elif axis == 1:\n            _maybe_transposed_self = self.T\n            ax = 1\n        else:\n            _maybe_transposed_self = self\n        ax = _maybe_transposed_self._get_axis_number(ax)\n\n        if _maybe_transposed_self.ndim == 2:\n            alt_ax = 1 - ax\n        else:\n            alt_ax = ax\n\n        if (isinstance(_maybe_transposed_self.index, MultiIndex) and\n                method != 'linear'):\n            raise ValueError(\"Only `method=linear` interpolation is supported \"\n                             \"on MultiIndexes.\")\n\n        if _maybe_transposed_self._data.get_dtype_counts().get(\n                'object') == len(_maybe_transposed_self.T):\n            raise TypeError(\"Cannot interpolate with all NaNs.\")\n\n        # create/use the index\n        if method == 'linear':\n            # prior default\n            index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n        else:\n            index = _maybe_transposed_self._get_axis(alt_ax)\n\n        if isna(index).any():\n            raise NotImplementedError(\"Interpolation with NaNs in the index \"\n                                      \"has not been implemented. Try filling \"\n                                      \"those NaNs before interpolating.\")\n        data = _maybe_transposed_self._data\n        new_data = data.interpolate(method=method, axis=ax, index=index,\n                                    values=_maybe_transposed_self, limit=limit,\n                                    limit_direction=limit_direction,\n                                    limit_area=limit_area,\n                                    inplace=inplace, downcast=downcast,\n                                    **kwargs)\n\n        if inplace:\n            if axis == 1:\n                new_data = self._constructor(new_data).T._data\n            self._update_inplace(new_data)\n        else:\n            res = self._constructor(new_data).__finalize__(self)\n            if axis == 1:\n                res = res.T\n            return res\n\n    # ----------------------------------------------------------------------\n    # Timeseries methods Methods\n\n    def asof(self, where, subset=None):\n        \"\"\"\n        The last row without any NaN is taken (or the last row without\n        NaN considering only the subset of columns in the case of a DataFrame)\n\n        .. versionadded:: 0.19.0 For DataFrame\n\n        If there is no good value, NaN is returned for a Series\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array of dates\n        subset : string or list of strings, default None\n           if not None use these columns for NaN propagation\n\n        Notes\n        -----\n        Dates are assumed to be sorted\n        Raises if this is not the case\n\n        Returns\n        -------\n        where is scalar\n\n          - value or NaN if input is Series\n          - Series if input is DataFrame\n\n        where is Index: same shape object as input\n\n        See Also\n        --------\n        merge_asof\n\n        \"\"\"\n\n        if isinstance(where, compat.string_types):\n            from pandas import to_datetime\n            where = to_datetime(where)\n\n        if not self.index.is_monotonic:\n            raise ValueError(\"asof requires a sorted index\")\n\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError(\"subset is not valid for Series\")\n        elif self.ndim > 2:\n            raise NotImplementedError(\"asof is not implemented \"\n                                      \"for {type}\".format(type=type(self)))\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq).ordinal\n                start = start.ordinal\n\n            if where < start:\n                if not is_series:\n                    from pandas import Series\n                    return Series(index=self.columns, name=where)\n                return np.nan\n\n            # It's always much faster to use a *while* loop here for\n            # Series than pre-computing all the NAs. However a\n            # *while* loop is extremely expensive for DataFrame\n            # so we later pre-compute all the NAs and use the same\n            # code path whether *where* is a scalar or list.\n            # See PR: https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side='right')\n                if loc > 0:\n                    loc -= 1\n\n                values = self._values\n                while loc > 0 and isna(values[loc]):\n                    loc -= 1\n                return values[loc]\n\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n\n        nulls = self.isna() if is_series else self[subset].isna().any(1)\n        if nulls.all():\n            if is_series:\n                return self._constructor(np.nan, index=where, name=self.name)\n            elif is_list:\n                from pandas import DataFrame\n                return DataFrame(np.nan, index=where, columns=self.columns)\n            else:\n                from pandas import Series\n                return Series(np.nan, index=self.columns, name=where[0])\n\n        locs = self.index.asof_locs(where, ~(nulls.values))\n\n        # mask the missing\n        missing = locs == -1\n        data = self.take(locs, is_copy=False)\n        data.index = where\n        data.loc[missing] = np.nan\n        return data if is_list else data.iloc[-1]\n\n    # ----------------------------------------------------------------------\n    # Action Methods\n\n    _shared_docs['isna'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are NA.\n\n        See Also\n        --------\n        %(klass)s.notna : boolean inverse of isna\n        %(klass)s.isnull : alias of isna\n        isna : top-level isna\n        \"\"\"\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return isna(self).__finalize__(self)\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return isna(self).__finalize__(self)\n\n    _shared_docs['notna'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are\n        not NA.\n\n        See Also\n        --------\n        %(klass)s.isna : boolean inverse of notna\n        %(klass)s.notnull : alias of notna\n        notna : top-level notna\n        \"\"\"\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return notna(self).__finalize__(self)\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return notna(self).__finalize__(self)\n\n    def _clip_with_scalar(self, lower, upper, inplace=False):\n        if ((lower is not None and np.any(isna(lower))) or\n                (upper is not None and np.any(isna(upper)))):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        result = self.values\n        mask = isna(result)\n\n        with np.errstate(all='ignore'):\n            if upper is not None:\n                result = np.where(result >= upper, upper, result)\n            if lower is not None:\n                result = np.where(result <= lower, lower, result)\n        if np.any(mask):\n            result[mask] = np.nan\n\n        axes_dict = self._construct_axes_dict()\n        result = self._constructor(result, **axes_dict).__finalize__(self)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def _clip_with_one_bound(self, threshold, method, axis, inplace):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == 'le':\n                return self._clip_with_scalar(None, threshold, inplace=inplace)\n            return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n        subset = method(threshold, axis=axis) | isna(self)\n\n        # GH #15390\n        # In order for where method to work, the threshold must\n        # be transformed to NDFrame from other array like structure.\n        if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n            if isinstance(self, ABCSeries):\n                threshold = pd.Series(threshold, index=self.index)\n            else:\n                threshold = _align_method_FRAME(self, np.asarray(threshold),\n                                                axis)\n        return self.where(subset, threshold, axis=axis, inplace=inplace)\n\n    def clip(self, lower=None, upper=None, axis=None, inplace=False,\n             *args, **kwargs):\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Parameters\n        ----------\n        lower : float or array_like, default None\n        upper : float or array_like, default None\n        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        clipped : Series\n\n        Examples\n        --------\n        >>> df\n                  0         1\n        0  0.335232 -1.256177\n        1 -1.367855  0.746646\n        2  0.027753 -1.176076\n        3  0.230930 -0.679613\n        4  1.261967  0.570967\n\n        >>> df.clip(-1.0, 0.5)\n                  0         1\n        0  0.335232 -1.000000\n        1 -1.000000  0.500000\n        2  0.027753 -1.000000\n        3  0.230930 -0.679613\n        4  0.500000  0.500000\n\n        >>> t\n        0   -0.3\n        1   -0.2\n        2   -0.1\n        3    0.0\n        4    0.1\n        dtype: float64\n\n        >>> df.clip(t, t + 1, axis=0)\n                  0         1\n        0  0.335232 -0.300000\n        1 -0.200000  0.746646\n        2  0.027753 -0.100000\n        3  0.230930  0.000000\n        4  1.100000  0.570967\n        \"\"\"\n        if isinstance(self, ABCPanel):\n            raise NotImplementedError(\"clip is not supported yet for panels\")\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        axis = nv.validate_clip_with_axis(axis, args, kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # GH 17276\n        # numpy doesn't like NaN as a clip value\n        # so ignore\n        if np.any(pd.isnull(lower)):\n            lower = None\n        if np.any(pd.isnull(upper)):\n            upper = None\n\n        # GH 2747 (arguments were reversed)\n        if lower is not None and upper is not None:\n            if is_scalar(lower) and is_scalar(upper):\n                lower, upper = min(lower, upper), max(lower, upper)\n\n        # fast-path for scalars\n        if ((lower is None or (is_scalar(lower) and is_number(lower))) and\n                (upper is None or (is_scalar(upper) and is_number(upper)))):\n            return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n        result = self\n        if lower is not None:\n            result = result.clip_lower(lower, axis, inplace=inplace)\n        if upper is not None:\n            if inplace:\n                result = self\n            result = result.clip_upper(upper, axis, inplace=inplace)\n\n        return result\n\n    def clip_upper(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of input with values above given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.le,\n                                         axis=axis, inplace=inplace)\n\n    def clip_lower(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of the input with values below given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.ge,\n                                         axis=axis, inplace=inplace)\n\n    def groupby(self, by=None, axis=0, level=None, as_index=True, sort=True,\n                group_keys=True, squeeze=False, **kwargs):\n        \"\"\"\n        Group series using mapper (dict or key function, apply given function\n        to group, return result as series) or by a series of columns.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it's called on each value of the object's\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted a (single) key.\n        axis : int, default 0\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels\n        as_index : boolean, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output\n        sort : boolean, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group.  groupby preserves the order of rows within each group.\n        group_keys : boolean, default True\n            When calling apply, add group keys to index to identify pieces\n        squeeze : boolean, default False\n            reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type\n\n        Returns\n        -------\n        GroupBy object\n\n        Examples\n        --------\n        DataFrame results\n\n        >>> data.groupby(func, axis=0).mean()\n        >>> data.groupby(['col1', 'col2'])['col3'].mean()\n\n        DataFrame with hierarchical index\n\n        >>> data.groupby(['col1', 'col2']).mean()\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n        See also\n        --------\n        resample : Convenience method for frequency conversion and resampling\n            of time series.\n        \"\"\"\n        from pandas.core.groupby import groupby\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n        return groupby(self, by=by, axis=axis, level=level, as_index=as_index,\n                       sort=sort, group_keys=group_keys, squeeze=squeeze,\n                       **kwargs)\n\n    def asfreq(self, freq, method=None, how=None, normalize=False,\n               fill_value=None):\n        \"\"\"\n        Convert TimeSeries to specified frequency.\n\n        Optionally provide filling method to pad/backfill missing values.\n\n        Returns the original data conformed to a new index with the specified\n        frequency. ``resample`` is more appropriate if an operation, such as\n        summarization, is necessary to represent the data at the new frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset object, or string\n        method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid\n            * 'backfill' / 'bfill': use NEXT valid observation to fill\n        how : {'start', 'end'}, default end\n            For PeriodIndex only, see PeriodIndex.asfreq\n        normalize : bool, default False\n            Whether to reset output index to midnight\n        fill_value: scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        converted : type of caller\n\n        Examples\n        --------\n\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({'s':series})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq='30S')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq='30S', fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq='30S', method='bfill')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n\n        See Also\n        --------\n        reindex\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n        \"\"\"\n        from pandas.core.resample import asfreq\n        return asfreq(self, freq, method=method, how=how, normalize=normalize,\n                      fill_value=fill_value)\n\n    def at_time(self, time, asof=False):\n        \"\"\"\n        Select values at particular time of day (e.g. 9:30AM).\n\n        Parameters\n        ----------\n        time : datetime.time or string\n\n        Returns\n        -------\n        values_at_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_at_time(time, asof=asof)\n            return self._take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def between_time(self, start_time, end_time, include_start=True,\n                     include_end=True):\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        Parameters\n        ----------\n        start_time : datetime.time or string\n        end_time : datetime.time or string\n        include_start : boolean, default True\n        include_end : boolean, default True\n\n        Returns\n        -------\n        values_between_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_between_time(\n                start_time, end_time, include_start=include_start,\n                include_end=include_end)\n            return self._take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def resample(self, rule, how=None, axis=0, fill_method=None, closed=None,\n                 label=None, convention='start', kind=None, loffset=None,\n                 limit=None, base=0, on=None, level=None):\n        \"\"\"\n        Convenience method for frequency conversion and resampling of time\n        series.  Object must have a datetime-like index (DatetimeIndex,\n        PeriodIndex, or TimedeltaIndex), or pass datetime-like values\n        to the on or level keyword.\n\n        Parameters\n        ----------\n        rule : string\n            the offset string or object representing target conversion\n        axis : int, optional, default 0\n        closed : {'right', 'left'}\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {'right', 'left'}\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {'start', 'end', 's', 'e'}\n            For PeriodIndex only, controls whether to use the start or end of\n            `rule`\n        kind: {'timestamp', 'period'}, optional\n            Pass 'timestamp' to convert the resulting index to a\n            ``DateTimeIndex`` or 'period' to convert it to a ``PeriodIndex``.\n            By default the input representation is retained.\n        loffset : timedelta\n            Adjust the resampled time labels\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0\n        on : string, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        level : string or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling.  Level must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        Returns\n        -------\n        Resampler object\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#resampling>`_\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5] #select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like)+5\n\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n                                                        freq='A',\n                                                        periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n\n        Resample by month using 'start' `convention`. Values are assigned to\n        the first month of the period.\n\n        >>> s.resample('M', convention='start').asfreq().head()\n        2012-01    1.0\n        2012-02    NaN\n        2012-03    NaN\n        2012-04    NaN\n        2012-05    NaN\n        Freq: M, dtype: float64\n\n        Resample by month using 'end' `convention`. Values are assigned to\n        the last month of the period.\n\n        >>> s.resample('M', convention='end').asfreq()\n        2012-12    1.0\n        2013-01    NaN\n        2013-02    NaN\n        2013-03    NaN\n        2013-04    NaN\n        2013-05    NaN\n        2013-06    NaN\n        2013-07    NaN\n        2013-08    NaN\n        2013-09    NaN\n        2013-10    NaN\n        2013-11    NaN\n        2013-12    2.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword ``on`` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> df = pd.DataFrame(data=9*[range(4)], columns=['a', 'b', 'c', 'd'])\n        >>> df['time'] = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> df.resample('3T', on='time').sum()\n                             a  b  c  d\n        time\n        2000-01-01 00:00:00  0  3  6  9\n        2000-01-01 00:03:00  0  3  6  9\n        2000-01-01 00:06:00  0  3  6  9\n\n        For a DataFrame with MultiIndex, the keyword ``level`` can be used to\n        specify on level the resampling needs to take place.\n\n        >>> time = pd.date_range('1/1/2000', periods=5, freq='T')\n        >>> df2 = pd.DataFrame(data=10*[range(4)],\n                               columns=['a', 'b', 'c', 'd'],\n                               index=pd.MultiIndex.from_product([time, [1, 2]])\n                               )\n        >>> df2.resample('3T', level=0).sum()\n                             a  b   c   d\n        2000-01-01 00:00:00  0  6  12  18\n        2000-01-01 00:03:00  0  4   8  12\n\n        See also\n        --------\n        groupby : Group by mapping, function, label, or list of labels.\n        \"\"\"\n        from pandas.core.resample import (resample,\n                                          _maybe_process_deprecations)\n        axis = self._get_axis_number(axis)\n        r = resample(self, freq=rule, label=label, closed=closed,\n                     axis=axis, kind=kind, loffset=loffset,\n                     convention=convention,\n                     base=base, key=on, level=level)\n        return _maybe_process_deprecations(r,\n                                           how=how,\n                                           fill_method=fill_method,\n                                           limit=limit)\n\n    def first(self, offset):\n        \"\"\"\n        Convenience method for subsetting initial periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.first('10D') -> First 10 days\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'first' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n        end_date = end = self.index[0] + offset\n\n        # Tick-like, e.g. 3 weeks\n        if not offset.isAnchored() and hasattr(offset, '_inc'):\n            if end_date in self.index:\n                end = self.index.searchsorted(end_date, side='left')\n                return self.iloc[:end]\n\n        return self.loc[:end]\n\n    def last(self, offset):\n        \"\"\"\n        Convenience method for subsetting final periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.last('5M') -> Last 5 months\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'last' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n\n        start_date = self.index[-1] - offset\n        start = self.index.searchsorted(start_date, side='right')\n        return self.iloc[start:]\n\n    def rank(self, axis=0, method='average', numeric_only=None,\n             na_option='keep', ascending=True, pct=False):\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis. Equal values are\n        assigned a rank that is the average of the ranks of those values\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            index to direct ranking\n        method : {'average', 'min', 'max', 'first', 'dense'}\n            * average: average rank of group\n            * min: lowest rank in group\n            * max: highest rank in group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups\n        numeric_only : boolean, default None\n            Include only float, int, boolean data. Valid only for DataFrame or\n            Panel objects\n        na_option : {'keep', 'top', 'bottom'}\n            * keep: leave NA values where they are\n            * top: smallest rank if ascending\n            * bottom: smallest rank if descending\n        ascending : boolean, default True\n            False for ranks by high (1) to low (N)\n        pct : boolean, default False\n            Computes percentage rank of data\n\n        Returns\n        -------\n        ranks : same type as caller\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            msg = \"rank does not make sense when ndim > 2\"\n            raise NotImplementedError(msg)\n\n        def ranker(data):\n            ranks = algos.rank(data.values, axis=axis, method=method,\n                               ascending=ascending, na_option=na_option,\n                               pct=pct)\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self)\n\n        # if numeric_only is None, and we can't get anything, we try with\n        # numeric_only=True\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)\n\n    _shared_docs['align'] = (\"\"\"\n        Align two objects on their axes with the\n        specified join method for each axis Index\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None)\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        copy : boolean, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        method : str, default None\n        limit : int, default None\n        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions\n\n        Returns\n        -------\n        (left, right) : (%(klass)s, type of other)\n            Aligned objects\n        \"\"\")\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        from pandas import DataFrame, Series\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, Series):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons({c: self for c in other.columns},\n                          **other._construct_axes_dict())\n                return df._align_frame(other, join=join, axis=axis,\n                                       level=level, copy=copy,\n                                       fill_value=fill_value, method=method,\n                                       limit=limit, fill_axis=fill_axis)\n            elif isinstance(other, Series):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons({c: other for c in self.columns},\n                          **self._construct_axes_dict())\n                return self._align_frame(df, join=join, axis=axis, level=level,\n                                         copy=copy, fill_value=fill_value,\n                                         method=method, limit=limit,\n                                         fill_axis=fill_axis)\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, DataFrame):\n            return self._align_frame(other, join=join, axis=axis, level=level,\n                                     copy=copy, fill_value=fill_value,\n                                     method=method, limit=limit,\n                                     fill_axis=fill_axis)\n        elif isinstance(other, Series):\n            return self._align_series(other, join=join, axis=axis, level=level,\n                                      copy=copy, fill_value=fill_value,\n                                      method=method, limit=limit,\n                                      fill_axis=fill_axis)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    def _align_frame(self, other, join='outer', axis=None, level=None,\n                     copy=True, fill_value=np.nan, method=None, limit=None,\n                     fill_axis=0):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True)\n\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(\n                    other.columns, how=join, level=level, return_indexers=True)\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(reindexers, copy=copy,\n                                           fill_value=fill_value,\n                                           allow_dups=True)\n        # other must be always DataFrame\n        right = other._reindex_with_indexers({0: [join_index, iridx],\n                                              1: [join_columns, cridx]},\n                                             copy=copy, fill_value=fill_value,\n                                             allow_dups=True)\n\n        if method is not None:\n            left = left.fillna(axis=fill_axis, method=method, limit=limit)\n            right = right.fillna(axis=fill_axis, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _align_series(self, other, join='outer', axis=None, level=None,\n                      copy=True, fill_value=None, method=None, limit=None,\n                      fill_axis=0):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError('cannot align series to a series other than '\n                                 'axis 0')\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(other.index, how=join,\n                                                         level=level,\n                                                         return_indexers=True)\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError('Must specify axis=0 or 1')\n\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit,\n                               axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n               errors='raise', try_cast=False):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        # align the cond to same shape as myself\n        cond = com._apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join='right', broadcast_axis=1)\n        else:\n            if not hasattr(cond, 'shape'):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as '\n                                 'self')\n            cond = self._constructor(cond, **self._construct_axes_dict())\n\n        # make sure we are boolean\n        fill_value = True if inplace else False\n        cond = cond.fillna(fill_value)\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not isinstance(cond, pd.DataFrame):\n            # This is a single-dimensional object.\n            if not is_bool_dtype(cond):\n                raise ValueError(msg.format(dtype=cond.dtype))\n        else:\n            for dt in cond.dtypes:\n                if not is_bool_dtype(dt):\n                    raise ValueError(msg.format(dtype=dt))\n\n        cond = cond.astype(bool, copy=False)\n        cond = -cond if inplace else cond\n\n        # try to align with other\n        try_quick = True\n        if hasattr(other, 'align'):\n\n            # align with me\n            if other.ndim <= self.ndim:\n\n                _, other = self.align(other, join='left', axis=axis,\n                                      level=level, fill_value=np.nan)\n\n                # if we are NOT aligned, raise as we cannot where index\n                if (axis is None and\n                        not all(other._get_axis(i).equals(ax)\n                                for i, ax in enumerate(self.axes))):\n                    raise InvalidIndexError\n\n            # slice me out of the other\n            else:\n                raise NotImplementedError(\"cannot align with a higher \"\n                                          \"dimensional NDFrame\")\n\n        if isinstance(other, np.ndarray):\n\n            if other.shape != self.shape:\n\n                if self.ndim == 1:\n\n                    icond = cond.values\n\n                    # GH 2745 / GH 4192\n                    # treat like a scalar\n                    if len(other) == 1:\n                        other = np.array(other[0])\n\n                    # GH 3235\n                    # match True cond to other\n                    elif len(cond[icond]) == len(other):\n\n                        # try to not change dtype at first (if try_quick)\n                        if try_quick:\n\n                            try:\n                                new_other = com._values_from_object(self)\n                                new_other = new_other.copy()\n                                new_other[icond] = other\n                                other = new_other\n                            except Exception:\n                                try_quick = False\n\n                        # let's create a new (if we failed at the above\n                        # or not try_quick\n                        if not try_quick:\n\n                            dtype, fill_value = maybe_promote(other.dtype)\n                            new_other = np.empty(len(icond), dtype=dtype)\n                            new_other.fill(fill_value)\n                            maybe_upcast_putmask(new_other, icond, other)\n                            other = new_other\n\n                    else:\n                        raise ValueError('Length of replacements must equal '\n                                         'series length')\n\n                else:\n                    raise ValueError('other must be the same shape as self '\n                                     'when an ndarray')\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, 'ndim', 0):\n            align = True\n        else:\n            align = (self._get_axis_number(axis) == 1)\n\n        block_axis = self._get_block_manager_axis(axis)\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            self._check_inplace_setting(other)\n            new_data = self._data.putmask(mask=cond, new=other, align=align,\n                                          inplace=True, axis=block_axis,\n                                          transpose=self._AXIS_REVERSED)\n            self._update_inplace(new_data)\n\n        else:\n            new_data = self._data.where(other=other, cond=cond, align=align,\n                                        errors=errors,\n                                        try_cast=try_cast, axis=block_axis,\n                                        transpose=self._AXIS_REVERSED)\n\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['where'] = (\"\"\"\n        Return an object of same shape as self and whose corresponding\n        entries are from self where `cond` is %(cond)s and otherwise are from\n        `other`.\n\n        Parameters\n        ----------\n        cond : boolean %(klass)s, array-like, or callable\n            Where `cond` is %(cond)s, keep the original value. Where\n            %(cond_rev)s, replace with corresponding value from `other`.\n            If `cond` is callable, it is computed on the %(klass)s and\n            should return boolean %(klass)s or array. The callable must\n            not change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as cond.\n\n        other : scalar, %(klass)s, or callable\n            Entries where `cond` is %(cond_rev)s are replaced with\n            corresponding value from `other`.\n            If other is callable, it is computed on the %(klass)s and\n            should return scalar or %(klass)s. The callable must not\n            change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as other.\n\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n        axis : alignment axis if needed, default None\n        level : alignment level if needed, default None\n        errors : str, {'raise', 'ignore'}, default 'raise'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            Note that currently this parameter won't affect\n            the results and will always coerce to a suitable dtype.\n\n        try_cast : boolean, default False\n            try to cast the result back to the input type (if possible),\n        raise_on_error : boolean, default True\n            Whether to raise on invalid data types (e.g. trying to where on\n            strings)\n\n            .. deprecated:: 0.21.0\n\n        Returns\n        -------\n        wh : same type as caller\n\n        Notes\n        -----\n        The %(name)s method is an application of the if-then idiom. For each\n        element in the calling DataFrame, if ``cond`` is ``%(cond)s`` the\n        element is used; otherwise the corresponding element from the DataFrame\n        ``other`` is used.\n\n        The signature for :func:`DataFrame.where` differs from\n        :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n        ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``%(name)s`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> s.mask(s > 0)\n        0    0.0\n        1    NaN\n        2    NaN\n        3    NaN\n        4    NaN\n\n        >>> s.where(s > 1, 10)\n        0    10.0\n        1    10.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n        >>> m = df %% 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n\n        See Also\n        --------\n        :func:`DataFrame.%(name_other)s`\n        \"\"\")\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"True\",\n                                           cond_rev=\"False\", name='where',\n                                           name_other='mask'))\n    def where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n              errors='raise', try_cast=False, raise_on_error=None):\n\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in \"\n                \"favor of errors='raise|ignore'\",\n                FutureWarning, stacklevel=2)\n\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n\n        other = com._apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level,\n                           errors=errors, try_cast=try_cast)\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"False\",\n                                           cond_rev=\"True\", name='mask',\n                                           name_other='where'))\n    def mask(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n             errors='raise', try_cast=False, raise_on_error=None):\n\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in \"\n                \"favor of errors='raise|ignore'\",\n                FutureWarning, stacklevel=2)\n\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cond = com._apply_if_callable(cond, self)\n\n        return self.where(~cond, other=other, inplace=inplace, axis=axis,\n                          level=level, try_cast=try_cast,\n                          errors=errors)\n\n    _shared_docs['shift'] = (\"\"\"\n        Shift index by desired number of periods with an optional time freq\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, optional\n            Increment to use from the tseries module or time rule (e.g. 'EOM').\n            See Notes.\n        axis : %(axes_single_arg)s\n\n        Notes\n        -----\n        If freq is specified then the index values are shifted but the data\n        is not realigned. That is, use freq if you would like to extend the\n        index when shifting and preserve the original data.\n\n        Returns\n        -------\n        shifted : %(klass)s\n    \"\"\")\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        if periods == 0:\n            return self\n\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._data.shift(periods=periods, axis=block_axis)\n        else:\n            return self.tshift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.\n\n        Returns\n        -------\n        shifted : same type as caller\n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n        return new_obj.__finalize__(self)\n\n    def tshift(self, periods=1, freq=None, axis=0):\n        \"\"\"\n        Shift the time index, using the index's frequency if available.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, default None\n            Increment to use from the tseries module or time rule (e.g. 'EOM')\n        axis : int or basestring\n            Corresponds to the axis that contains the Index\n\n        Notes\n        -----\n        If freq is not specified then tries to use the freq or inferred_freq\n        attributes of the index. If neither of those attributes exist, a\n        ValueError is thrown\n\n        Returns\n        -------\n        shifted : NDFrame\n        \"\"\"\n\n        index = self._get_axis(axis)\n        if freq is None:\n            freq = getattr(index, 'freq', None)\n\n        if freq is None:\n            freq = getattr(index, 'inferred_freq', None)\n\n        if freq is None:\n            msg = 'Freq was not given and was not set in the index'\n            raise ValueError(msg)\n\n        if periods == 0:\n            return self\n\n        if isinstance(freq, string_types):\n            freq = to_offset(freq)\n\n        block_axis = self._get_block_manager_axis(axis)\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq == orig_freq:\n                new_data = self._data.copy()\n                new_data.axes[block_axis] = index.shift(periods)\n            else:\n                msg = ('Given freq %s does not match PeriodIndex freq %s' %\n                       (freq.rule_code, orig_freq.rule_code))\n                raise ValueError(msg)\n        else:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def truncate(self, before=None, after=None, axis=None, copy=True):\n        \"\"\"\n        Truncates a sorted DataFrame/Series before and/or after some\n        particular index value. If the axis contains only datetime values,\n        before/after parameters are converted to datetime values.\n\n        Parameters\n        ----------\n        before : date, string, int\n            Truncate all rows before this index value\n        after : date, string, int\n            Truncate all rows after this index value\n        axis : {0 or 'index', 1 or 'columns'}\n\n            * 0 or 'index': apply truncation to rows\n            * 1 or 'columns': apply truncation to columns\n\n            Default is stat axis for given data type (0 for Series and\n            DataFrames, 1 for Panels)\n        copy : boolean, default is True,\n            return a copy of the truncated section\n\n        Returns\n        -------\n        truncated : type of caller\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n        ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n        ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n        ...                    index=[1, 2, 3, 4, 5])\n        >>> df.truncate(before=2, after=4)\n           A  B  C\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4, 5],\n        ...                    'B': [6, 7, 8, 9, 10],\n        ...                    'C': [11, 12, 13, 14, 15]},\n        ...                    index=['a', 'b', 'c', 'd', 'e'])\n        >>> df.truncate(before='b', after='d')\n           A  B   C\n        b  2  7  12\n        c  3  8  13\n        d  4  9  14\n\n        The index values in ``truncate`` can be datetimes or string\n        dates. Note that ``truncate`` assumes a 0 value for any unspecified\n        date component in a ``DatetimeIndex`` in contrast to slicing which\n        returns any partially matching dates.\n\n        >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n        >>> df = pd.DataFrame(index=dates, data={'A': 1})\n        >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n        >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                             A\n        2016-01-10 23:59:55  1\n        2016-01-10 23:59:56  1\n        2016-01-10 23:59:57  1\n        2016-01-10 23:59:58  1\n        2016-01-10 23:59:59  1\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # GH 17935\n        # Check that index is sorted\n        if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n            raise ValueError(\"truncate requires a sorted index\")\n\n        # if we have a date index, convert to dates, otherwise\n        # treat like a slice\n        if ax.is_all_dates:\n            from pandas.core.tools.datetimes import to_datetime\n            before = to_datetime(before)\n            after = to_datetime(after)\n\n        if before is not None and after is not None:\n            if before > after:\n                raise ValueError('Truncate: %s must be after %s' %\n                                 (after, before))\n\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis),\n                    ax.truncate(before, after))\n\n        if copy:\n            result = result.copy()\n\n        return result\n\n    def tz_convert(self, tz, axis=0, level=None, copy=True):\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to convert\n        level : int, str, default None\n            If axis ia a MultiIndex, convert a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, 'tz_convert'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_convert(ax, tz)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    @deprecate_kwarg(old_arg_name='infer_dst', new_arg_name='ambiguous',\n                     mapping={True: 'infer',\n                              False: 'raise'})\n    def tz_localize(self, tz, axis=0, level=None, copy=True,\n                    ambiguous='raise'):\n        \"\"\"\n        Localize tz-naive TimeSeries to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times\n        infer_dst : boolean, default False\n            .. deprecated:: 0.15.0\n               Attempt to infer fall dst-transition hours based on order\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous):\n            if not hasattr(ax, 'tz_localize'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_localize(ax, tz, ambiguous)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Numeric Methods\n    def abs(self):\n        \"\"\"\n        Return an object with absolute value taken--only applicable to objects\n        that are all numeric.\n\n        Returns\n        -------\n        abs: type of caller\n        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\"\n        Generates descriptive statistics that summarize the central tendency,\n        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        summary:  Series/DataFrame of summary statistics\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the dataframe consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                       3\n        unique                      2\n        top       2010-01-01 00:00:00\n        freq                        2\n        first     2000-01-01 00:00:00\n        last      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame({ 'object': ['a', 'b', 'c'],\n        ...                     'numeric': [1, 2, 3],\n        ...                     'categorical': pd.Categorical(['d','e','f'])\n        ...                   })\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')\n                categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      c\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.object])\n               object\n        count       3\n        unique      3\n        top         c\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=['category'])\n               categorical\n        count            3\n        unique           3\n        top              f\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      c\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.object])\n                categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n\n        See Also\n        --------\n        DataFrame.count\n        DataFrame.max\n        DataFrame.min\n        DataFrame.mean\n        DataFrame.std\n        DataFrame.select_dtypes\n        \"\"\"\n        if self.ndim >= 3:\n            msg = \"describe is not implemented on Panel objects.\"\n            raise NotImplementedError(msg)\n        elif self.ndim == 2 and self.columns.size == 0:\n            raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n        if percentiles is not None:\n            # explicit conversion of `percentiles` to list\n            percentiles = list(percentiles)\n\n            # get them all to be in [0, 1]\n            self._check_percentile(percentiles)\n\n            # median should always be included\n            if 0.5 not in percentiles:\n                percentiles.append(0.5)\n            percentiles = np.asarray(percentiles)\n        else:\n            percentiles = np.array([0.25, 0.5, 0.75])\n\n        # sort and check for duplicates\n        unique_pcts = np.unique(percentiles)\n        if len(unique_pcts) < len(percentiles):\n            raise ValueError(\"percentiles cannot contain duplicates\")\n        percentiles = unique_pcts\n\n        formatted_percentiles = format_percentiles(percentiles)\n\n        def describe_numeric_1d(series):\n            stat_index = (['count', 'mean', 'std', 'min'] +\n                          formatted_percentiles + ['max'])\n            d = ([series.count(), series.mean(), series.std(), series.min()] +\n                 [series.quantile(x) for x in percentiles] + [series.max()])\n            return pd.Series(d, index=stat_index, name=series.name)\n\n        def describe_categorical_1d(data):\n            names = ['count', 'unique']\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n\n                if is_datetime64_dtype(data):\n                    asint = data.dropna().values.view('i8')\n                    names += ['top', 'freq', 'first', 'last']\n                    result += [tslib.Timestamp(top), freq,\n                               tslib.Timestamp(asint.min()),\n                               tslib.Timestamp(asint.max())]\n                else:\n                    names += ['top', 'freq']\n                    result += [top, freq]\n\n            return pd.Series(result, index=names, name=data.name)\n\n        def describe_1d(data):\n            if is_bool_dtype(data):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_timedelta64_dtype(data):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)\n\n        if self.ndim == 1:\n            return describe_1d(self)\n        elif (include is None) and (exclude is None):\n            # when some numerics are found, keep only numerics\n            data = self.select_dtypes(include=[np.number])\n            if len(data.columns) == 0:\n                data = self\n        elif include == 'all':\n            if exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self\n        else:\n            data = self.select_dtypes(include=include, exclude=exclude)\n\n        ldesc = [describe_1d(s) for _, s in data.iteritems()]\n        # set a convenient order for rows\n        names = []\n        ldesc_indexes = sorted([x.index for x in ldesc], key=len)\n        for idxnames in ldesc_indexes:\n            for name in idxnames:\n                if name not in names:\n                    names.append(name)\n\n        d = pd.concat(ldesc, join_axes=pd.Index([names]), axis=1)\n        d.columns = data.columns.copy()\n        return d\n\n    def _check_percentile(self, q):\n        \"\"\"Validate percentiles (used by describe and quantile).\"\"\"\n\n        msg = (\"percentiles should all be in the interval [0, 1]. \"\n               \"Try {0} instead.\")\n        q = np.asarray(q)\n        if q.ndim == 0:\n            if not 0 <= q <= 1:\n                raise ValueError(msg.format(q / 100.0))\n        else:\n            if not all(0 <= qs <= 1 for qs in q):\n                raise ValueError(msg.format(q / 100.0))\n        return q\n\n    _shared_docs['pct_change'] = \"\"\"\n        Percent change over given number of periods.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change\n        fill_method : str, default 'pad'\n            How to handle NAs before computing percent changes\n        limit : int, default None\n            The number of consecutive NAs to fill before stopping\n        freq : DateOffset, timedelta, or offset alias string, optional\n            Increment to use from time series API (e.g. 'M' or BDay())\n\n        Returns\n        -------\n        chg : %(klass)s\n\n        Notes\n        -----\n\n        By default, the percentage change is calculated along the stat\n        axis: 0, or ``Index``, for ``DataFrame`` and 1, or ``minor`` for\n        ``Panel``. You can change this with the ``axis`` keyword argument.\n        \"\"\"\n\n    @Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\n    def pct_change(self, periods=1, fill_method='pad', limit=None, freq=None,\n                   **kwargs):\n        # TODO: Not sure if above is correct - need someone to confirm.\n        axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n        rs = (data.div(data.shift(periods=periods, freq=freq, axis=axis,\n                                  **kwargs)) - 1)\n        rs = rs.reindex_like(data)\n        if freq is None:\n            mask = isna(com._values_from_object(data))\n            np.putmask(rs.values, mask, np.nan)\n        return rs\n\n    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)\n\n    @classmethod\n    def _add_numeric_operations(cls):\n        \"\"\"Add the operations to the cls; evaluate the doc strings again\"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        cls.any = _make_logical_function(\n            cls, 'any', name, name2, axis_descr,\n            'Return whether any element is True over requested axis',\n            nanops.nanany)\n        cls.all = _make_logical_function(\n            cls, 'all', name, name2, axis_descr,\n            'Return whether all elements are True over requested axis',\n            nanops.nanall)\n\n        @Substitution(outname='mad',\n                      desc=\"Return the mean absolute deviation of the values \"\n                           \"for the requested axis\",\n                      name1=name, name2=name2, axis_descr=axis_descr,\n                      min_count='', examples='')\n        @Appender(_num_doc)\n        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level('mad', axis=axis, level=level,\n                                          skipna=skipna)\n\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n        cls.mad = mad\n\n        cls.sem = _make_stat_function_ddof(\n            cls, 'sem', name, name2, axis_descr,\n            \"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\",\n            nanops.nansem)\n        cls.var = _make_stat_function_ddof(\n            cls, 'var', name, name2, axis_descr,\n            \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument\",\n            nanops.nanvar)\n        cls.std = _make_stat_function_ddof(\n            cls, 'std', name, name2, axis_descr,\n            \"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument\",\n            nanops.nanstd)\n\n        @Substitution(outname='compounded',\n                      desc=\"Return the compound percentage of the values for \"\n                      \"the requested axis\", name1=name, name2=name2,\n                      axis_descr=axis_descr,\n                      min_count='', examples='')\n        @Appender(_num_doc)\n        def compound(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            return (1 + self).prod(axis=axis, skipna=skipna, level=level) - 1\n\n        cls.compound = compound\n\n        cls.cummin = _make_cum_function(\n            cls, 'cummin', name, name2, axis_descr, \"cumulative minimum\",\n            lambda y, axis: np.minimum.accumulate(y, axis), \"min\",\n            np.inf, np.nan)\n        cls.cumsum = _make_cum_function(\n            cls, 'cumsum', name, name2, axis_descr, \"cumulative sum\",\n            lambda y, axis: y.cumsum(axis), \"sum\", 0., np.nan)\n        cls.cumprod = _make_cum_function(\n            cls, 'cumprod', name, name2, axis_descr, \"cumulative product\",\n            lambda y, axis: y.cumprod(axis), \"prod\", 1., np.nan)\n        cls.cummax = _make_cum_function(\n            cls, 'cummax', name, name2, axis_descr, \"cumulative max\",\n            lambda y, axis: np.maximum.accumulate(y, axis), \"max\",\n            -np.inf, np.nan)\n\n        cls.sum = _make_min_count_stat_function(\n            cls, 'sum', name, name2, axis_descr,\n            'Return the sum of the values for the requested axis',\n            nanops.nansum, _sum_examples)\n        cls.mean = _make_stat_function(\n            cls, 'mean', name, name2, axis_descr,\n            'Return the mean of the values for the requested axis',\n            nanops.nanmean)\n        cls.skew = _make_stat_function(\n            cls, 'skew', name, name2, axis_descr,\n            'Return unbiased skew over requested axis\\nNormalized by N-1',\n            nanops.nanskew)\n        cls.kurt = _make_stat_function(\n            cls, 'kurt', name, name2, axis_descr,\n            \"Return unbiased kurtosis over requested axis using Fisher's \"\n            \"definition of\\nkurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1\\n\",\n            nanops.nankurt)\n        cls.kurtosis = cls.kurt\n        cls.prod = _make_min_count_stat_function(\n            cls, 'prod', name, name2, axis_descr,\n            'Return the product of the values for the requested axis',\n            nanops.nanprod, _prod_examples)\n        cls.product = cls.prod\n        cls.median = _make_stat_function(\n            cls, 'median', name, name2, axis_descr,\n            'Return the median of the values for the requested axis',\n            nanops.nanmedian)\n        cls.max = _make_stat_function(\n            cls, 'max', name, name2, axis_descr,\n            \"\"\"This method returns the maximum of the values in the object.\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\",\n            nanops.nanmax)\n        cls.min = _make_stat_function(\n            cls, 'min', name, name2, axis_descr,\n            \"\"\"This method returns the minimum of the values in the object.\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\",\n            nanops.nanmin)\n\n    @classmethod\n    def _add_series_only_operations(cls):\n        \"\"\"Add the series only operations to the cls; evaluate the doc\n        strings again.\n        \"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        def nanptp(values, axis=0, skipna=True):\n            nmax = nanops.nanmax(values, axis, skipna)\n            nmin = nanops.nanmin(values, axis, skipna)\n            return nmax - nmin\n\n        cls.ptp = _make_stat_function(\n            cls, 'ptp', name, name2, axis_descr,\n            \"\"\"Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\"\"\",\n            nanptp)\n\n    @classmethod\n    def _add_series_or_dataframe_operations(cls):\n        \"\"\"Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.\n        \"\"\"\n\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, center=False,\n                    win_type=None, on=None, axis=0, closed=None):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window,\n                                   min_periods=min_periods,\n                                   center=center, win_type=win_type,\n                                   on=on, axis=axis, closed=closed)\n\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods,\n                                     center=center, axis=axis)\n\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n                min_periods=0, adjust=True, ignore_na=False,\n                axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                               alpha=alpha, min_periods=min_periods,\n                               adjust=adjust, ignore_na=ignore_na, axis=axis)\n\n        cls.ewm = ewm\n\n        @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n        def transform(self, func, *args, **kwargs):\n            result = self.agg(func, *args, **kwargs)\n            if is_scalar(result) or len(result) != len(self):\n                raise ValueError(\"transforms cannot produce \"\n                                 \"aggregated results\")\n\n            return result\n\n        cls.transform = transform\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    _shared_docs['valid_index'] = \"\"\"\n        Return index for %(position)s non-NA/null value.\n\n        Notes\n        --------\n        If all elements are non-NA/null, returns None.\n        Also returns None for empty %(klass)s.\n\n        Returns\n        --------\n        scalar : type of index\n        \"\"\"\n\n\ndef _doc_parms(cls):\n    \"\"\"Return a tuple of the doc parms.\"\"\"\n    axis_descr = \"{%s}\" % ', '.join([\"{0} ({1})\".format(a, i)\n                                     for i, a in enumerate(cls._AXIS_ORDERS)])\n    name = (cls._constructor_sliced.__name__\n            if cls._AXIS_LEN > 1 else 'scalar')\n    name2 = cls.__name__\n    return axis_descr, name, name2\n\n\n_num_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n%(min_count)s\\\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\n\n%(examples)s\"\"\"\n\n_num_ddof_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_bool_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nbool_only : boolean, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_cnum_doc = \"\"\"\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\n\nReturns\n-------\n%(outname)s : %(name1)s\\n\n\n\nSee also\n--------\npandas.core.window.Expanding.%(accum_func_name)s : Similar functionality\n    but ignores ``NaN`` values.\n\n\"\"\"\n\n\n_sum_examples = \"\"\"\\\nExamples\n--------\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([]).sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([]).sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan\n\"\"\"\n\n_prod_examples = \"\"\"\\\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan\n\"\"\"\n\n\n_min_count_stub = \"\"\"\\\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded :: 0.22.0\n\n       Added with the default being 0. This means the sum of an all-NA\n       or empty Series is 0, and the product of an all-NA or empty\n       Series is 1.\n\"\"\"\n\n\ndef _make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc,\n                                  f, examples):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, min_count=_min_count_stub,\n                  examples=examples)\n    @Appender(_num_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, numeric_only=None,\n                  min_count=0,\n                  **kwargs):\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna, min_count=min_count)\n        return self._reduce(f, name, axis=axis, skipna=skipna,\n                            numeric_only=numeric_only, min_count=min_count)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_stat_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, min_count='', examples='')\n    @Appender(_num_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, numeric_only=None,\n                  **kwargs):\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, name, axis=axis, skipna=skipna,\n                            numeric_only=numeric_only)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, ddof=1,\n                  numeric_only=None, **kwargs):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna, ddof=ddof)\n        return self._reduce(f, name, axis=axis, numeric_only=numeric_only,\n                            skipna=skipna, ddof=ddof)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_cum_function(cls, name, name1, name2, axis_descr, desc,\n                       accum_func, accum_func_name, mask_a, mask_b):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, accum_func_name=accum_func_name)\n    @Appender(\"Return {0} over requested axis.\".format(desc) +\n              _cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        y = com._values_from_object(self).copy()\n\n        if (skipna and\n                issubclass(y.dtype.type, (np.datetime64, np.timedelta64))):\n            result = accum_func(y, axis)\n            mask = isna(self)\n            np.putmask(result, mask, tslib.iNaT)\n        elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):\n            mask = isna(self)\n            np.putmask(y, mask, mask_a)\n            result = accum_func(y, axis)\n            np.putmask(result, mask, mask_b)\n        else:\n            result = accum_func(y, axis)\n\n        d = self._construct_axes_dict()\n        d['copy'] = False\n        return self._constructor(result, **d).__finalize__(self)\n\n    return set_function_name(cum_func, name, cls)\n\n\ndef _make_logical_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_bool_doc)\n    def logical_func(self, axis=None, bool_only=None, skipna=None, level=None,\n                     **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\"Option bool_only is not \"\n                                          \"implemented with option level.\")\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, axis=axis, skipna=skipna,\n                            numeric_only=bool_only, filter_type='bool',\n                            name=name)\n\n    return set_function_name(logical_func, name, cls)\n\n\n# install the indexes\nfor _name, _indexer in indexing.get_indexers_list():\n    NDFrame._create_indexer(_name, _indexer)\n"
    }
  ]
}