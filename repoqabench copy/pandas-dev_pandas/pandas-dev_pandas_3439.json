{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "3439",
  "issue_description": "# Flesh out examples included in docstrings\n\n```\n.../pandas$ nosetests -v --with-doctest -I .*test\n/.../.virtualenvs/myenv/local/lib/python2.7/site-packages/scikits/statsmodels/__init__.py:2: UserWarning: scikits.statsmodels namespace is deprecated and will be removed in 0.5, please use statsmodels instead\n  warnings.warn('scikits.statsmodels namespace is deprecated and will be '\n/.../.virtualenvs/myenv/local/lib/python2.7/site-packages/scikits/statsmodels/regression/__init__.py:2: UserWarning: scikits.statsmodels namespace is deprecated and will be removed in 0.5, please use statsmodels instead\n  warnings.warn('scikits.statsmodels namespace is deprecated and will be '\nDoctest: pandas.compat.scipy.percentileofscore ... ok\nDoctest: pandas.compat.scipy.rankdata ... FAIL\nDoctest: pandas.compat.scipy.scoreatpercentile ... FAIL\nDoctest: pandas.core.algorithms.quantile ... ok\nDoctest: pandas.core.common.iterpairs ... FAIL\nDoctest: pandas.core.common.split_ranges ... ok\nDoctest: pandas.core.format.EngFormatter.__call__ ... FAIL\nDoctest: pandas.core.frame.DataFrame.__init__ ... FAIL\nDoctest: pandas.core.frame.DataFrame.apply ... FAIL\nDoctest: pandas.core.frame.DataFrame.combine_first ... FAIL\nDoctest: pandas.core.frame.DataFrame.merge ... FAIL\nDoctest: pandas.core.frame.DataFrame.pivot ... FAIL\nDoctest: pandas.core.frame.DataFrame.reindex ... FAIL\nDoctest: pandas.core.frame.DataFrame.reindex_axis ... FAIL\nDoctest: pandas.core.frame.DataFrame.set_index ... FAIL\nDoctest: pandas.core.frame.DataFrame.sort ... FAIL\nDoctest: pandas.core.frame.DataFrame.sort_index ... FAIL\nDoctest: pandas.core.frame.DataFrame.stack ... FAIL\nDoctest: pandas.core.frame.DataFrame.to_excel ... FAIL\nDoctest: pandas.core.frame.DataFrame.unstack ... FAIL\nDoctest: pandas.core.frame.DataFrame.xs ... FAIL\nDoctest: pandas.core.generic.PandasObject.groupby ... FAIL\nDoctest: pandas.core.groupby.NDFrameGroupBy.transform ... FAIL\nDoctest: pandas.core.groupby.SeriesGroupBy.aggregate ... FAIL\nDoctest: pandas.core.groupby.SeriesGroupBy.transform ... FAIL\nDoctest: pandas.core.index.Index.diff ... FAIL\nDoctest: pandas.core.index.Index.get_indexer ... FAIL\nDoctest: pandas.core.index.MultiIndex.get_indexer ... FAIL\nDoctest: pandas.core.indexing._SeriesIndexer ... FAIL\nDoctest: pandas.core.panel.WidePanel.transpose ... FAIL\nDoctest: pandas.core.panel.panel_index ... FAIL\nDoctest: pandas.core.reshape._Unstacker ... FAIL\nDoctest: pandas.core.reshape.lreshape ... FAIL\nDoctest: pandas.core.reshape.melt ... FAIL\nDoctest: pandas.core.series.Series.map ... FAIL\nDoctest: pandas.core.series.Series.rename ... FAIL\nDoctest: pandas.core.series.Series.sort_index ... FAIL\nDoctest: pandas.core.series.Series.unstack ... FAIL\nDoctest: pandas.core.strings.StringMethods ... FAIL\nFailure: ImportError (No module named httplib2) ... ERROR\nDoctest: pandas.io.data.Options ... FAIL\nDoctest: pandas.io.data.Options.get_call_data ... FAIL\nDoctest: pandas.io.data.Options.get_options_data ... FAIL\nDoctest: pandas.io.data.Options.get_put_data ... FAIL\nFailure: ImportError (No module named httplib2) ... ERROR\nDoctest: pandas.io.pytables.HDFStore ... FAIL\nDoctest: pandas.io.pytables.get_store ... FAIL\nDoctest: pandas.io.sql.sequence2dict ... ok\nFailure: ImportError (No module named util) ... ERROR\nFailure: ImportError (No module named rpy2.robjects.packages) ... ERROR\nFailure: ImportError (No module named util) ... ERROR\nFailure: ImportError (cannot import name WLS) ... ERROR\nDoctest: pandas.tools.merge.merge ... FAIL\nDoctest: pandas.tools.merge.ordered_merge ... FAIL\nDoctest: pandas.tools.pivot.crosstab ... FAIL\nDoctest: pandas.tools.pivot.pivot_table ... FAIL\nDoctest: pandas.tools.plotting.boxplot_frame_groupby ... FAIL\nDoctest: pandas.tools.plotting.parallel_coordinates ... FAIL\nDoctest: pandas.tools.plotting.scatter_matrix ... FAIL\nDoctest: pandas.tools.tile.cut ... FAIL\nDoctest: pandas.tseries.period.Period.strftime ... FAIL\nDoctest: pandas.tseries.period.PeriodIndex ... FAIL\nDoctest: pandas.util.compat._Counter ... ok\nDoctest: pandas.util.compat._Counter.__add__ ... ok\nDoctest: pandas.util.compat._Counter.__and__ ... ok\nDoctest: pandas.util.compat._Counter.__init__ ... ok\nDoctest: pandas.util.compat._Counter.__or__ ... ok\nDoctest: pandas.util.compat._Counter.__sub__ ... ok\nDoctest: pandas.util.compat._Counter.elements ... ok\nDoctest: pandas.util.compat._Counter.most_common ... ok\nDoctest: pandas.util.compat._Counter.update ... ok\nDoctest: pandas.util.counter.Counter ... ok\nDoctest: pandas.util.counter.Counter.__add__ ... ok\nDoctest: pandas.util.counter.Counter.__and__ ... ok\nDoctest: pandas.util.counter.Counter.__init__ ... ok\nDoctest: pandas.util.counter.Counter.__or__ ... ok\nDoctest: pandas.util.counter.Counter.__sub__ ... ok\nDoctest: pandas.util.counter.Counter.elements ... ok\nDoctest: pandas.util.counter.Counter.most_common ... ok\nDoctest: pandas.util.counter.Counter.subtract ... ok\nDoctest: pandas.util.counter.Counter.update ... ok\n...\nRan 81 tests in 4.671s\n\nFAILED (errors=6, failures=52)\n```\n\nFrom the Messages (not included in the code snippet above) one can see that most errors result from ImportErrors, so maybe the problem is only that the imports are not in the docstring.\n",
  "issue_comments": [
    {
      "id": 16929482,
      "user": "ghost",
      "body": "Those are code examples utilizing the familiar \">>>\", not doctests per se.\nPractically all those methods are covered by the test suite, which is where testing\nis done in pandas.\n\nThanks, closing.\n"
    },
    {
      "id": 16943779,
      "user": "bmu",
      "body": "@y-p I'm not really happy with closing this ticket. \n\nI think if there are examples, they should work. I think it is useful to have examples in the docstrings especially in ipython, where you can copy and paste them into the console and try some things with the objects created from pasting the examples. \n\nAn example is numpy, where examples are given in the same way, but they work (they are using \">>>\" to and I think this is no problem, it's even given in the documentation of the [doctest module](http://docs.python.org/2/library/doctest.html) as an example, you can paste in the examples with the prompt into ipython and its ignoring the prompt). Numpy and matplotlib also use the \"default\" import names (numpy as np, matplotlib.pyplot as plt) which makes the users familiar with these shortcuts.\n\nsure it is right, that the testing in pandas is done by the unittests, but if there are examples in the docstrings I think they should be tested to and they should work.\n"
    },
    {
      "id": 16945087,
      "user": "wesm",
      "body": "Not sure how this would be possible with pandas the the repr for objects cannot be used typically to reconstruct the object for comparison. \n"
    },
    {
      "id": 16945488,
      "user": "ghost",
      "body": "Looking at the actual docstrings, these are examples of invocation/signature not full blown doctests \n(they use nonexistent variables for example, and there's no expected result).\n\nalso note that numpydoc docstrings use >>> to annotate something for syntax highlighting,\nnot necessarily as doctest.\n\nSince they weren't written as doctests, `nose --with-doctest` failing isn't really a \"failing test\",\nbut PRs are welcome naturally.\n"
    },
    {
      "id": 16952529,
      "user": "bmu",
      "body": "@wesm I don't mean the repr but the object itself created by the example code.\n\nAs an example, in the docs of the `DataFrame` class definition there are the lines \n\n``` python\n>>> df3 = DataFrame(np.random.randn(10, 5),                                                               \n...                 columns=['a', 'b', 'c', 'd', 'e'])            \n```\n\nIf I paste them into ipython I have a DataFrame with named columns, which maybe useful for a beginner as he can further inspect the dataframe (attribute access of the cols, ...) and you don't have to write this code yourself. It's not a big thing, but I did this with numpy and especially with matplotlib where you have more complicated objects with man attributes/methods. Maybe others do this too.\n\n@y-p ok, so perhaps the title of this ticket is wrong: most examples are not working as they are. It wasn't really meant to report \"failing tests\", but failing examples (and doctest is a method to test examples in this way).  \n"
    },
    {
      "id": 16953086,
      "user": "ghost",
      "body": "as I said, PRs welcome. \n"
    },
    {
      "id": 19154330,
      "user": "bmu",
      "body": "Just found an for a \"failing doctest\" on on [SO](http://stackoverflow.com/questions/17003034/missing-data-in-pandas-crosstab).\n\nThe asker is expecting the output of the docstring, however he gets a different result.\n"
    },
    {
      "id": 19164252,
      "user": "hayd",
      "body": "@bmu It's slightly different (he's tweaked the input arrays), basically OP wants the MultiIndex to include empty columns. The example in the docstring has no empty columns.\n\n_I think that's a feature request (#3820) rather than a docstring bug?_\n"
    },
    {
      "id": 19168005,
      "user": "bmu",
      "body": "@hayd I see, you are rigth. However in the example section of the `crosstab` docstring a multi index is returned, while the output you get, if you execute the statement is different.\n"
    },
    {
      "id": 303175355,
      "user": "ProsperousHeart",
      "body": "I'm working on this now. :)"
    },
    {
      "id": 303186495,
      "user": "jorisvandenbossche",
      "body": "BTW, running doctests using pytest can be done like:\r\n\r\n```\r\npytest --doctests-module pandas/core/series.py\r\n```\r\n\r\nAnd example PR for the adjustments that are needed to get the doctests running: https://github.com/pandas-dev/pandas/pull/15625"
    },
    {
      "id": 303195141,
      "user": "ProsperousHeart",
      "body": "@jorisvandenbossche - that won't work if you're in the pandas folder already. Would need to be:\r\n\r\n`pytest --doctests-module core/series.py`\r\n\r\n@TomAugspurger helped me with that (I'm on Windows) - though I may be misspeaking on my understanding of the issue I was having..."
    },
    {
      "id": 365091384,
      "user": "jorisvandenbossche",
      "body": "Was just looking how you can run doctests for a single method, and you can do this as follows:\r\n\r\n```\r\npytest --doctest-modules pandas/core/frame.py -k sort_values\r\n```\r\n\r\nin case you want to test `DataFrame.sort_values`. \r\n(for series method, you need to specify pandas/core/series.py)\r\n\r\ncc @datapythonista "
    }
  ],
  "text_context": "# Flesh out examples included in docstrings\n\n```\n.../pandas$ nosetests -v --with-doctest -I .*test\n/.../.virtualenvs/myenv/local/lib/python2.7/site-packages/scikits/statsmodels/__init__.py:2: UserWarning: scikits.statsmodels namespace is deprecated and will be removed in 0.5, please use statsmodels instead\n  warnings.warn('scikits.statsmodels namespace is deprecated and will be '\n/.../.virtualenvs/myenv/local/lib/python2.7/site-packages/scikits/statsmodels/regression/__init__.py:2: UserWarning: scikits.statsmodels namespace is deprecated and will be removed in 0.5, please use statsmodels instead\n  warnings.warn('scikits.statsmodels namespace is deprecated and will be '\nDoctest: pandas.compat.scipy.percentileofscore ... ok\nDoctest: pandas.compat.scipy.rankdata ... FAIL\nDoctest: pandas.compat.scipy.scoreatpercentile ... FAIL\nDoctest: pandas.core.algorithms.quantile ... ok\nDoctest: pandas.core.common.iterpairs ... FAIL\nDoctest: pandas.core.common.split_ranges ... ok\nDoctest: pandas.core.format.EngFormatter.__call__ ... FAIL\nDoctest: pandas.core.frame.DataFrame.__init__ ... FAIL\nDoctest: pandas.core.frame.DataFrame.apply ... FAIL\nDoctest: pandas.core.frame.DataFrame.combine_first ... FAIL\nDoctest: pandas.core.frame.DataFrame.merge ... FAIL\nDoctest: pandas.core.frame.DataFrame.pivot ... FAIL\nDoctest: pandas.core.frame.DataFrame.reindex ... FAIL\nDoctest: pandas.core.frame.DataFrame.reindex_axis ... FAIL\nDoctest: pandas.core.frame.DataFrame.set_index ... FAIL\nDoctest: pandas.core.frame.DataFrame.sort ... FAIL\nDoctest: pandas.core.frame.DataFrame.sort_index ... FAIL\nDoctest: pandas.core.frame.DataFrame.stack ... FAIL\nDoctest: pandas.core.frame.DataFrame.to_excel ... FAIL\nDoctest: pandas.core.frame.DataFrame.unstack ... FAIL\nDoctest: pandas.core.frame.DataFrame.xs ... FAIL\nDoctest: pandas.core.generic.PandasObject.groupby ... FAIL\nDoctest: pandas.core.groupby.NDFrameGroupBy.transform ... FAIL\nDoctest: pandas.core.groupby.SeriesGroupBy.aggregate ... FAIL\nDoctest: pandas.core.groupby.SeriesGroupBy.transform ... FAIL\nDoctest: pandas.core.index.Index.diff ... FAIL\nDoctest: pandas.core.index.Index.get_indexer ... FAIL\nDoctest: pandas.core.index.MultiIndex.get_indexer ... FAIL\nDoctest: pandas.core.indexing._SeriesIndexer ... FAIL\nDoctest: pandas.core.panel.WidePanel.transpose ... FAIL\nDoctest: pandas.core.panel.panel_index ... FAIL\nDoctest: pandas.core.reshape._Unstacker ... FAIL\nDoctest: pandas.core.reshape.lreshape ... FAIL\nDoctest: pandas.core.reshape.melt ... FAIL\nDoctest: pandas.core.series.Series.map ... FAIL\nDoctest: pandas.core.series.Series.rename ... FAIL\nDoctest: pandas.core.series.Series.sort_index ... FAIL\nDoctest: pandas.core.series.Series.unstack ... FAIL\nDoctest: pandas.core.strings.StringMethods ... FAIL\nFailure: ImportError (No module named httplib2) ... ERROR\nDoctest: pandas.io.data.Options ... FAIL\nDoctest: pandas.io.data.Options.get_call_data ... FAIL\nDoctest: pandas.io.data.Options.get_options_data ... FAIL\nDoctest: pandas.io.data.Options.get_put_data ... FAIL\nFailure: ImportError (No module named httplib2) ... ERROR\nDoctest: pandas.io.pytables.HDFStore ... FAIL\nDoctest: pandas.io.pytables.get_store ... FAIL\nDoctest: pandas.io.sql.sequence2dict ... ok\nFailure: ImportError (No module named util) ... ERROR\nFailure: ImportError (No module named rpy2.robjects.packages) ... ERROR\nFailure: ImportError (No module named util) ... ERROR\nFailure: ImportError (cannot import name WLS) ... ERROR\nDoctest: pandas.tools.merge.merge ... FAIL\nDoctest: pandas.tools.merge.ordered_merge ... FAIL\nDoctest: pandas.tools.pivot.crosstab ... FAIL\nDoctest: pandas.tools.pivot.pivot_table ... FAIL\nDoctest: pandas.tools.plotting.boxplot_frame_groupby ... FAIL\nDoctest: pandas.tools.plotting.parallel_coordinates ... FAIL\nDoctest: pandas.tools.plotting.scatter_matrix ... FAIL\nDoctest: pandas.tools.tile.cut ... FAIL\nDoctest: pandas.tseries.period.Period.strftime ... FAIL\nDoctest: pandas.tseries.period.PeriodIndex ... FAIL\nDoctest: pandas.util.compat._Counter ... ok\nDoctest: pandas.util.compat._Counter.__add__ ... ok\nDoctest: pandas.util.compat._Counter.__and__ ... ok\nDoctest: pandas.util.compat._Counter.__init__ ... ok\nDoctest: pandas.util.compat._Counter.__or__ ... ok\nDoctest: pandas.util.compat._Counter.__sub__ ... ok\nDoctest: pandas.util.compat._Counter.elements ... ok\nDoctest: pandas.util.compat._Counter.most_common ... ok\nDoctest: pandas.util.compat._Counter.update ... ok\nDoctest: pandas.util.counter.Counter ... ok\nDoctest: pandas.util.counter.Counter.__add__ ... ok\nDoctest: pandas.util.counter.Counter.__and__ ... ok\nDoctest: pandas.util.counter.Counter.__init__ ... ok\nDoctest: pandas.util.counter.Counter.__or__ ... ok\nDoctest: pandas.util.counter.Counter.__sub__ ... ok\nDoctest: pandas.util.counter.Counter.elements ... ok\nDoctest: pandas.util.counter.Counter.most_common ... ok\nDoctest: pandas.util.counter.Counter.subtract ... ok\nDoctest: pandas.util.counter.Counter.update ... ok\n...\nRan 81 tests in 4.671s\n\nFAILED (errors=6, failures=52)\n```\n\nFrom the Messages (not included in the code snippet above) one can see that most errors result from ImportErrors, so maybe the problem is only that the imports are not in the docstring.\n\n\nThose are code examples utilizing the familiar \">>>\", not doctests per se.\nPractically all those methods are covered by the test suite, which is where testing\nis done in pandas.\n\nThanks, closing.\n\n\n@y-p I'm not really happy with closing this ticket. \n\nI think if there are examples, they should work. I think it is useful to have examples in the docstrings especially in ipython, where you can copy and paste them into the console and try some things with the objects created from pasting the examples. \n\nAn example is numpy, where examples are given in the same way, but they work (they are using \">>>\" to and I think this is no problem, it's even given in the documentation of the [doctest module](http://docs.python.org/2/library/doctest.html) as an example, you can paste in the examples with the prompt into ipython and its ignoring the prompt). Numpy and matplotlib also use the \"default\" import names (numpy as np, matplotlib.pyplot as plt) which makes the users familiar with these shortcuts.\n\nsure it is right, that the testing in pandas is done by the unittests, but if there are examples in the docstrings I think they should be tested to and they should work.\n\n\nNot sure how this would be possible with pandas the the repr for objects cannot be used typically to reconstruct the object for comparison. \n\n\nLooking at the actual docstrings, these are examples of invocation/signature not full blown doctests \n(they use nonexistent variables for example, and there's no expected result).\n\nalso note that numpydoc docstrings use >>> to annotate something for syntax highlighting,\nnot necessarily as doctest.\n\nSince they weren't written as doctests, `nose --with-doctest` failing isn't really a \"failing test\",\nbut PRs are welcome naturally.\n\n\n@wesm I don't mean the repr but the object itself created by the example code.\n\nAs an example, in the docs of the `DataFrame` class definition there are the lines \n\n``` python\n>>> df3 = DataFrame(np.random.randn(10, 5),                                                               \n...                 columns=['a', 'b', 'c', 'd', 'e'])            \n```\n\nIf I paste them into ipython I have a DataFrame with named columns, which maybe useful for a beginner as he can further inspect the dataframe (attribute access of the cols, ...) and you don't have to write this code yourself. It's not a big thing, but I did this with numpy and especially with matplotlib where you have more complicated objects with man attributes/methods. Maybe others do this too.\n\n@y-p ok, so perhaps the title of this ticket is wrong: most examples are not working as they are. It wasn't really meant to report \"failing tests\", but failing examples (and doctest is a method to test examples in this way).  \n\n\nas I said, PRs welcome. \n\n\nJust found an for a \"failing doctest\" on on [SO](http://stackoverflow.com/questions/17003034/missing-data-in-pandas-crosstab).\n\nThe asker is expecting the output of the docstring, however he gets a different result.\n\n\n@bmu It's slightly different (he's tweaked the input arrays), basically OP wants the MultiIndex to include empty columns. The example in the docstring has no empty columns.\n\n_I think that's a feature request (#3820) rather than a docstring bug?_\n\n\n@hayd I see, you are rigth. However in the example section of the `crosstab` docstring a multi index is returned, while the output you get, if you execute the statement is different.\n\n\nI'm working on this now. :)\n\nBTW, running doctests using pytest can be done like:\r\n\r\n```\r\npytest --doctests-module pandas/core/series.py\r\n```\r\n\r\nAnd example PR for the adjustments that are needed to get the doctests running: https://github.com/pandas-dev/pandas/pull/15625\n\n@jorisvandenbossche - that won't work if you're in the pandas folder already. Would need to be:\r\n\r\n`pytest --doctests-module core/series.py`\r\n\r\n@TomAugspurger helped me with that (I'm on Windows) - though I may be misspeaking on my understanding of the issue I was having...\n\nWas just looking how you can run doctests for a single method, and you can do this as follows:\r\n\r\n```\r\npytest --doctest-modules pandas/core/frame.py -k sort_values\r\n```\r\n\r\nin case you want to test `DataFrame.sort_values`. \r\n(for series method, you need to specify pandas/core/series.py)\r\n\r\ncc @datapythonista ",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/15625",
  "code_context": [
    {
      "filename": "pandas/core/generic.py",
      "content": "# pylint: disable=W0231,E1101\nimport collections\nimport warnings\nimport operator\nimport weakref\nimport gc\nimport json\n\nimport numpy as np\nimport pandas as pd\n\nfrom pandas._libs import tslib, lib\nfrom pandas.types.common import (_coerce_to_dtype,\n                                 _ensure_int64,\n                                 needs_i8_conversion,\n                                 is_scalar,\n                                 is_integer, is_bool,\n                                 is_bool_dtype,\n                                 is_numeric_dtype,\n                                 is_datetime64_dtype,\n                                 is_timedelta64_dtype,\n                                 is_datetime64tz_dtype,\n                                 is_list_like,\n                                 is_dict_like,\n                                 is_re_compilable)\nfrom pandas.types.cast import _maybe_promote, _maybe_upcast_putmask\nfrom pandas.types.missing import isnull, notnull\nfrom pandas.types.generic import ABCSeries, ABCPanel\n\nfrom pandas.core.common import (_values_from_object,\n                                _maybe_box_datetimelike,\n                                SettingWithCopyError, SettingWithCopyWarning,\n                                AbstractMethodError)\n\nfrom pandas.core.base import PandasObject\nfrom pandas.core.index import (Index, MultiIndex, _ensure_index,\n                               InvalidIndexError)\nimport pandas.core.indexing as indexing\nfrom pandas.tseries.index import DatetimeIndex\nfrom pandas.tseries.period import PeriodIndex, Period\nfrom pandas.core.internals import BlockManager\nimport pandas.core.algorithms as algos\nimport pandas.core.common as com\nimport pandas.core.missing as missing\nfrom pandas.formats.printing import pprint_thing\nfrom pandas.formats.format import format_percentiles\nfrom pandas.tseries.frequencies import to_offset\nfrom pandas import compat\nfrom pandas.compat.numpy import function as nv\nfrom pandas.compat import (map, zip, lzip, lrange, string_types,\n                           isidentifier, set_function_name)\nimport pandas.core.nanops as nanops\nfrom pandas.util.decorators import Appender, Substitution, deprecate_kwarg\nfrom pandas.util.validators import validate_bool_kwarg\nfrom pandas.core import config\n\n# goal is to be able to define the docs close to function, while still being\n# able to share\n_shared_docs = dict()\n_shared_doc_kwargs = dict(\n    axes='keywords for axes', klass='NDFrame',\n    axes_single_arg='int or labels for object',\n    args_transpose='axes to permute (int or label for object)',\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names which refer to the axis items.\"\"\")\n\n\ndef _single_replace(self, to_replace, method, inplace, limit):\n    if self.ndim != 1:\n        raise TypeError('cannot replace {0} with method {1} on a {2}'\n                        .format(to_replace, method, type(self).__name__))\n\n    orig_dtype = self.dtype\n    result = self if inplace else self.copy()\n    fill_f = missing.get_fill_func(method)\n\n    mask = missing.mask_missing(result.values, to_replace)\n    values = fill_f(result.values, limit=limit, mask=mask)\n\n    if values.dtype == orig_dtype and inplace:\n        return\n\n    result = pd.Series(values, index=self.index,\n                       dtype=self.dtype).__finalize__(self)\n\n    if inplace:\n        self._update_inplace(result._data)\n        return\n\n    return result\n\n\nclass NDFrame(PandasObject):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : boolean, default False\n    \"\"\"\n    _internal_names = ['_data', '_cacher', '_item_cache', '_cache', 'is_copy',\n                       '_subtyp', '_name', '_index', '_default_kind',\n                       '_default_fill_value', '_metadata', '__array_struct__',\n                       '__array_interface__']\n    _internal_names_set = set(_internal_names)\n    _accessors = frozenset([])\n    _metadata = []\n    is_copy = None\n\n    def __init__(self, data, axes=None, copy=False, dtype=None,\n                 fastpath=False):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, 'is_copy', None)\n        object.__setattr__(self, '_data', data)\n        object.__setattr__(self, '_item_cache', {})\n\n    def _ipython_display_(self):\n        try:\n            from IPython.display import display\n        except ImportError:\n            return None\n\n        # Series doesn't define _repr_html_ or _repr_latex_\n        latex = self._repr_latex_() if hasattr(self, '_repr_latex_') else None\n        html = self._repr_html_() if hasattr(self, '_repr_html_') else None\n        table_schema = self._repr_table_schema_()\n        # We need the inital newline since we aren't going through the\n        # usual __repr__. See\n        # https://github.com/pandas-dev/pandas/pull/14904#issuecomment-277829277\n        text = \"\\n\" + repr(self)\n\n        reprs = {\"text/plain\": text, \"text/html\": html, \"text/latex\": latex,\n                 \"application/vnd.dataresource+json\": table_schema}\n        reprs = {k: v for k, v in reprs.items() if v}\n        display(reprs, raw=True)\n\n    def _repr_table_schema_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):\n            data = self.head(config.get_option('display.max_rows'))\n            payload = json.loads(data.to_json(orient='table'),\n                                 object_pairs_hook=collections.OrderedDict)\n            return payload\n\n    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = _coerce_to_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == 'V':\n                raise NotImplementedError(\"compound dtypes are not implemented\"\n                                          \"in the {0} constructor\"\n                                          .format(self.__class__.__name__))\n        return dtype\n\n    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(axe,\n                                       axis=self._get_block_manager_axis(a),\n                                       copy=False)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    # ----------------------------------------------------------------------\n    # Construction\n\n    @property\n    def _constructor(self):\n        \"\"\"Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def __unicode__(self):\n        # unicode representation based upon iterating over self\n        # (since, by definition, `PandasContainers` are iterable)\n        prepr = '[%s]' % ','.join(map(pprint_thing, self))\n        return '%s(%s)' % (self.__class__.__name__, prepr)\n\n    def _dir_additions(self):\n        \"\"\" add the string-like attributes from the info_axis \"\"\"\n        return set([c for c in self._info_axis\n                    if isinstance(c, string_types) and isidentifier(c)])\n\n    @property\n    def _constructor_sliced(self):\n        \"\"\"Used when a manipulation result has one lower dimension(s) as the\n        original, such as DataFrame single columns slicing.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    @property\n    def _constructor_expanddim(self):\n        \"\"\"Used when a manipulation result has one higher dimension as the\n        original, such as Series.to_frame() and DataFrame.to_panel()\n        \"\"\"\n        raise NotImplementedError\n\n    # ----------------------------------------------------------------------\n    # Axis\n\n    @classmethod\n    def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,\n                    slicers=None, axes_are_reversed=False, build_axes=True,\n                    ns=None):\n        \"\"\"Provide axes setup for the major PandasObjects.\n\n        Parameters\n        ----------\n        axes : the names of the axes in order (lowest to highest)\n        info_axis_num : the axis of the selector dimension (int)\n        stat_axis_num : the number of axis for the default stats (int)\n        aliases : other names for a single axis (dict)\n        slicers : how axes slice to others (dict)\n        axes_are_reversed : boolean whether to treat passed axes as\n            reversed (DataFrame)\n        build_axes : setup the axis properties (default True)\n        \"\"\"\n\n        cls._AXIS_ORDERS = axes\n        cls._AXIS_NUMBERS = dict((a, i) for i, a in enumerate(axes))\n        cls._AXIS_LEN = len(axes)\n        cls._AXIS_ALIASES = aliases or dict()\n        cls._AXIS_IALIASES = dict((v, k) for k, v in cls._AXIS_ALIASES.items())\n        cls._AXIS_NAMES = dict(enumerate(axes))\n        cls._AXIS_SLICEMAP = slicers or None\n        cls._AXIS_REVERSED = axes_are_reversed\n\n        # typ\n        setattr(cls, '_typ', cls.__name__.lower())\n\n        # indexing support\n        cls._ix = None\n\n        if info_axis is not None:\n            cls._info_axis_number = info_axis\n            cls._info_axis_name = axes[info_axis]\n\n        if stat_axis is not None:\n            cls._stat_axis_number = stat_axis\n            cls._stat_axis_name = axes[stat_axis]\n\n        # setup the actual axis\n        if build_axes:\n\n            def set_axis(a, i):\n                setattr(cls, a, lib.AxisProperty(i))\n                cls._internal_names_set.add(a)\n\n            if axes_are_reversed:\n                m = cls._AXIS_LEN - 1\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, m - i)\n            else:\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, i)\n\n        # addtl parms\n        if isinstance(ns, dict):\n            for k, v in ns.items():\n                setattr(cls, k, v)\n\n    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = dict([(a, self._get_axis(a)) for a in (axes or self._AXIS_ORDERS)])\n        d.update(kwargs)\n        return d\n\n    @staticmethod\n    def _construct_axes_dict_from(self, axes, **kwargs):\n        \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n        d = dict([(a, ax) for a, ax in zip(self._AXIS_ORDERS, axes)])\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_dict_for_slice(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = dict([(self._AXIS_SLICEMAP[a], self._get_axis(a))\n                  for a in (axes or self._AXIS_ORDERS)])\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_from_arguments(self, args, kwargs, require_all=False):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # if we have an alias for this axis\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\"arguments are mutually exclusive \"\n                                        \"for [%s,%s]\" % (a, alias))\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments \"\n                                        \"specified!\")\n\n        axes = dict([(a, kwargs.pop(a, None)) for a in self._AXIS_ORDERS])\n        return axes, kwargs\n\n    @classmethod\n    def _from_axes(cls, data, axes, **kwargs):\n        # for construction from BlockManager\n        if isinstance(data, BlockManager):\n            return cls(data, **kwargs)\n        else:\n            if cls._AXIS_REVERSED:\n                axes = axes[::-1]\n            d = cls._construct_axes_dict_from(cls, axes, copy=False)\n            d.update(kwargs)\n            return cls(data, **d)\n\n    def _get_axis_number(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in self._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return self._AXIS_NUMBERS[axis]\n            except:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis_name(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, string_types):\n            if axis in self._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return self._AXIS_NAMES[axis]\n            except:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)\n\n    def _get_block_manager_axis(self, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = self._get_axis_number(axis)\n        if self._AXIS_REVERSED:\n            m = self._AXIS_LEN - 1\n            return m - axis\n        return axis\n\n    def _get_axis_resolvers(self, axis):\n        # index or columns\n        axis_index = getattr(self, axis)\n        d = dict()\n        prefix = axis[0]\n\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                # prefix with 'i' or 'c' depending on the input axis\n                # e.g., you must do ilevel_0 for the 0th level of an unnamed\n                # multiiindex\n                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)\n                level = i\n\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n\n        # put the index/columns itself in the dict\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n\n        d[axis] = dindex\n        return d\n\n    def _get_index_resolvers(self):\n        d = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n        return d\n\n    @property\n    def _info_axis(self):\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def _stat_axis(self):\n        return getattr(self, self._stat_axis_name)\n\n    @property\n    def shape(self):\n        \"\"\"Return a tuple of axis dimensions\"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self):\n        \"\"\"Return index label(s) of the internal NDFrame\"\"\"\n        # we do it this way because if we have reversed axes, then\n        # the block manager shows then reversed\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @property\n    def ndim(self):\n        \"\"\"Number of axes / array dimensions\"\"\"\n        return self._data.ndim\n\n    @property\n    def size(self):\n        \"\"\"number of elements in the NDFrame\"\"\"\n        return np.prod(self.shape)\n\n    def _expand_axes(self, key):\n        new_axes = []\n        for k, ax in zip(key, self.axes):\n            if k not in ax:\n                if type(k) != ax.dtype.type:\n                    ax = ax.astype('O')\n                new_axes.append(ax.insert(len(ax), k))\n            else:\n                new_axes.append(ax)\n\n        return new_axes\n\n    def set_axis(self, axis, labels):\n        \"\"\" public verson of axis assignment \"\"\"\n        setattr(self, self._get_axis_name(axis), labels)\n\n    def _set_axis(self, axis, labels):\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()\n\n    _shared_docs['transpose'] = \"\"\"\n        Permute the dimensions of the %(klass)s\n\n        Parameters\n        ----------\n        args : %(args_transpose)s\n        copy : boolean, default False\n            Make a copy of the underlying data. Mixed-dtype data will\n            always result in a copy\n\n        Examples\n        --------\n        >>> p.transpose(2, 0, 1)\n        >>> p.transpose(2, 0, 1, copy=True)\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n\n    @Appender(_shared_docs['transpose'] % _shared_doc_kwargs)\n    def transpose(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs,\n                                                           require_all=True)\n        axes_names = tuple([self._get_axis_name(axes[a])\n                            for a in self._AXIS_ORDERS])\n        axes_numbers = tuple([self._get_axis_number(axes[a])\n                              for a in self._AXIS_ORDERS])\n\n        # we must have unique axes\n        if len(axes) != len(set(axes)):\n            raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)\n\n        new_axes = self._construct_axes_dict_from(self, [self._get_axis(x)\n                                                         for x in axes_names])\n        new_values = self.values.transpose(axes_numbers)\n        if kwargs.pop('copy', None) or (len(args) and args[-1]):\n            new_values = new_values.copy()\n\n        nv.validate_transpose_for_generic(self, kwargs)\n        return self._constructor(new_values, **new_axes).__finalize__(self)\n\n    def swapaxes(self, axis1, axis2, copy=True):\n        \"\"\"\n        Interchange axes and swap values axes appropriately\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n        i = self._get_axis_number(axis1)\n        j = self._get_axis_number(axis2)\n\n        if i == j:\n            if copy:\n                return self.copy()\n            return self\n\n        mapping = {i: j, j: i}\n\n        new_axes = (self._get_axis(mapping.get(k, k))\n                    for k in range(self._AXIS_LEN))\n        new_values = self.values.swapaxes(i, j)\n        if copy:\n            new_values = new_values.copy()\n\n        return self._constructor(new_values, *new_axes).__finalize__(self)\n\n    def pop(self, item):\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n        \"\"\"\n        result = self[item]\n        del self[item]\n        try:\n            result._reset_cacher()\n        except AttributeError:\n            pass\n\n        return result\n\n    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze length 1 dimensions.\n\n        Parameters\n        ----------\n        axis : None, integer or string axis name, optional\n            The axis to squeeze if 1-sized.\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        scalar if 1-sized, else original object\n        \"\"\"\n        axis = (self._AXIS_NAMES if axis is None else\n                (self._get_axis_number(axis),))\n        try:\n            return self.iloc[\n                tuple([0 if i in axis and len(a) == 1 else slice(None)\n                       for i, a in enumerate(self.axes)])]\n        except:\n            return self\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        result = self.copy()\n        labels = result._data.axes[axis]\n        result._data.set_axis(axis, labels.swaplevel(i, j))\n        return result\n\n    # ----------------------------------------------------------------------\n    # Rename\n\n    # TODO: define separate funcs for DataFrame, Series and Panel so you can\n    # get completion on keyword arguments.\n    _shared_docs['rename'] = \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        See Also\n        --------\n        pandas.NDFrame.rename_axis\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n        \"\"\"\n\n    @Appender(_shared_docs['rename'] % dict(axes='axes keywords for this'\n                                            ' object', klass='NDFrame'))\n    def rename(self, *args, **kwargs):\n\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        copy = kwargs.pop('copy', True)\n        inplace = kwargs.pop('inplace', False)\n\n        if kwargs:\n            raise TypeError('rename() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        if com._count_not_none(*axes.values()) == 0:\n            raise TypeError('must pass an index to rename')\n\n        # renamer function if passed a dict\n        def _get_rename_function(mapper):\n            if isinstance(mapper, (dict, ABCSeries)):\n\n                def f(x):\n                    if x in mapper:\n                        return mapper[x]\n                    else:\n                        return x\n            else:\n                f = mapper\n\n            return f\n\n        self._consolidate_inplace()\n        result = self if inplace else self.copy(deep=copy)\n\n        # start in the axis order to eliminate too many copies\n        for axis in lrange(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is None:\n                continue\n            f = _get_rename_function(v)\n\n            baxis = self._get_block_manager_axis(axis)\n            result._data = result._data.rename_axis(f, axis=baxis, copy=copy)\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result._data)\n        else:\n            return result.__finalize__(self)\n\n    rename.__doc__ = _shared_docs['rename']\n\n    def rename_axis(self, mapper, axis=0, copy=True, inplace=False):\n        \"\"\"\n        Alter index and / or columns using input function or functions.\n        A scalar or list-like for ``mapper`` will alter the ``Index.name``\n        or ``MultiIndex.names`` attribute.\n        A function or dict for ``mapper`` will alter the labels.\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, dict-like or function, optional\n        axis : int or string, default 0\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n\n        Returns\n        -------\n        renamed : type of caller\n\n        See Also\n        --------\n        pandas.NDFrame.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename_axis(\"foo\")  # scalar, alters df.index.name\n             A  B\n        foo\n        0    1  4\n        1    2  5\n        2    3  6\n        >>> df.rename_axis(lambda x: 2 * x)  # function: alters labels\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        >>> df.rename_axis({\"A\": \"ehh\", \"C\": \"see\"}, axis=\"columns\")  # mapping\n           ehh  B\n        0    1  4\n        1    2  5\n        2    3  6\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        non_mapper = is_scalar(mapper) or (is_list_like(mapper) and not\n                                           is_dict_like(mapper))\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis)\n        else:\n            axis = self._get_axis_name(axis)\n            d = {'copy': copy, 'inplace': inplace}\n            d[axis] = mapper\n            return self.rename(**d)\n\n    def _set_axis_name(self, name, axis=0):\n        \"\"\"\n        Alter the name or names of the axis, returning self.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name for the Index, or list of names for the MultiIndex\n        axis : int or str\n           0 or 'index' for the index; 1 or 'columns' for the columns\n\n        Returns\n        -------\n        renamed : type of caller\n\n        See Also\n        --------\n        pandas.DataFrame.rename\n        pandas.Series.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n        >>> df._set_axis_name(\"foo\")\n             A\n        foo\n        0    1\n        1    2\n        2    3\n        >>> df.index = pd.MultiIndex.from_product([['A'], ['a', 'b', 'c']])\n        >>> df._set_axis_name([\"bar\", \"baz\"])\n                 A\n        bar baz\n        A   a    1\n            b    2\n            c    3\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        renamed = self.copy(deep=True)\n        renamed.set_axis(axis, idx)\n        return renamed\n\n    # ----------------------------------------------------------------------\n    # Comparisons\n\n    def _indexed_same(self, other):\n        return all([self._get_axis(a).equals(other._get_axis(a))\n                    for a in self._AXIS_ORDERS])\n\n    def __neg__(self):\n        values = _values_from_object(self)\n        if values.dtype == np.bool_:\n            arr = operator.inv(values)\n        else:\n            arr = operator.neg(values)\n        return self.__array_wrap__(arr)\n\n    def __invert__(self):\n        try:\n            arr = operator.inv(_values_from_object(self))\n            return self.__array_wrap__(arr)\n        except:\n\n            # inv fails with 0 len\n            if not np.prod(self.shape):\n                return self\n\n            raise\n\n    def equals(self, other):\n        \"\"\"\n        Determines if two NDFrame objects contain the same elements. NaNs in\n        the same location are considered equal.\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)\n\n    # ----------------------------------------------------------------------\n    # Iteration\n\n    def __hash__(self):\n        raise TypeError('{0!r} objects are mutable, thus they cannot be'\n                        ' hashed'.format(self.__class__.__name__))\n\n    def __iter__(self):\n        \"\"\"Iterate over infor axis\"\"\"\n        return iter(self._info_axis)\n\n    # can we get a better explanation of this?\n    def keys(self):\n        \"\"\"Get the 'info axis' (see Indexing for more)\n\n        This is index for Series, columns for DataFrame and major_axis for\n        Panel.\n        \"\"\"\n        return self._info_axis\n\n    def iteritems(self):\n        \"\"\"Iterate over (label, values) on info axis\n\n        This is index for Series, columns for DataFrame, major_axis for Panel,\n        and so on.\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    # originally used to get around 2to3's changes to iteritems.\n    # Now unnecessary. Sidenote: don't want to deprecate this for a while,\n    # otherwise libraries that use 2to3 will have issues.\n    def iterkv(self, *args, **kwargs):\n        \"iteritems alias used to get around 2to3. Deprecated\"\n        warnings.warn(\"iterkv is deprecated and will be removed in a future \"\n                      \"release, use ``iteritems`` instead.\", FutureWarning,\n                      stacklevel=2)\n        return self.iteritems(*args, **kwargs)\n\n    def __len__(self):\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self):\n        \"\"\"True if NDFrame is entirely empty [no items], meaning any of the\n        axes are of length 0.\n\n        Notes\n        -----\n        If NDFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        See also\n        --------\n        pandas.Series.dropna\n        pandas.DataFrame.dropna\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    def __nonzero__(self):\n        raise ValueError(\"The truth value of a {0} is ambiguous. \"\n                         \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n                         .format(self.__class__.__name__))\n\n    __bool__ = __nonzero__\n\n    def bool(self):\n        \"\"\"Return the bool of a single element PandasObject.\n\n        This must be a boolean scalar value, either True or False.  Raise a\n        ValueError if the PandasObject does not have exactly 1 element, or that\n        element is not boolean\n        \"\"\"\n        v = self.squeeze()\n        if isinstance(v, (bool, np.bool_)):\n            return bool(v)\n        elif is_scalar(v):\n            raise ValueError(\"bool cannot act on a non-boolean single element \"\n                             \"{0}\".format(self.__class__.__name__))\n\n        self.__nonzero__()\n\n    def __abs__(self):\n        return self.abs()\n\n    def __round__(self, decimals=0):\n        return self.round(decimals)\n\n    # ----------------------------------------------------------------------\n    # Array Interface\n\n    def __array__(self, dtype=None):\n        return _values_from_object(self)\n\n    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)\n\n    # ideally we would define this to avoid the getattr checks, but\n    # is slower\n    # @property\n    # def __array_interface__(self):\n    #    \"\"\" provide numpy array interface method \"\"\"\n    #    values = self.values\n    #    return dict(typestr=values.dtype.str,shape=values.shape,data=values)\n\n    def to_dense(self):\n        \"\"\"Return dense representation of NDFrame (as opposed to sparse)\"\"\"\n        # compat\n        return self\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    def __getstate__(self):\n        meta = dict((k, getattr(self, k, None)) for k in self._metadata)\n        return dict(_data=self._data, _typ=self._typ, _metadata=self._metadata,\n                    **meta)\n\n    def __setstate__(self, state):\n\n        if isinstance(state, BlockManager):\n            self._data = state\n        elif isinstance(state, dict):\n            typ = state.get('_typ')\n            if typ is not None:\n\n                # set in the order of internal names\n                # to avoid definitional recursion\n                # e.g. say fill_value needing _data to be\n                # defined\n                meta = set(self._internal_names + self._metadata)\n                for k in list(meta):\n                    if k in state:\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n\n            else:\n                self._unpickle_series_compat(state)\n        elif isinstance(state[0], dict):\n            if len(state) == 5:\n                self._unpickle_sparse_frame_compat(state)\n            else:\n                self._unpickle_frame_compat(state)\n        elif len(state) == 4:\n            self._unpickle_panel_compat(state)\n        elif len(state) == 2:\n            self._unpickle_series_compat(state)\n        else:  # pragma: no cover\n            # old pickling format, for compatibility\n            self._unpickle_matrix_compat(state)\n\n        self._item_cache = {}\n\n    # ----------------------------------------------------------------------\n    # IO\n\n    # ----------------------------------------------------------------------\n    # I/O Methods\n\n    _shared_docs['to_excel'] = \"\"\"\n    Write %(klass)s to an excel sheet\n    %(versionadded_to_excel)s\n\n    Parameters\n    ----------\n    excel_writer : string or ExcelWriter object\n        File path or existing ExcelWriter\n    sheet_name : string, default 'Sheet1'\n        Name of sheet which will contain DataFrame\n    na_rep : string, default ''\n        Missing data representation\n    float_format : string, default None\n        Format string for floating point numbers\n    columns : sequence, optional\n        Columns to write\n    header : boolean or list of string, default True\n        Write out column names. If a list of string is given it is\n        assumed to be aliases for the column names\n    index : boolean, default True\n        Write row names (index)\n    index_label : string or sequence, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the DataFrame uses MultiIndex.\n    startrow :\n        upper left cell row to dump data frame\n    startcol :\n        upper left cell column to dump data frame\n    engine : string, default None\n        write engine to use - you can also set this via the options\n        ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n        ``io.excel.xlsm.writer``.\n    merge_cells : boolean, default True\n        Write MultiIndex and Hierarchical Rows as merged cells.\n    encoding: string, default None\n        encoding of the resulting excel file. Only necessary for xlwt,\n        other writers support unicode natively.\n    inf_rep : string, default 'inf'\n        Representation for infinity (there is no native representation for\n        infinity in Excel)\n    freeze_panes : tuple of integer (length 2), default None\n        Specifies the one-based bottommost row and rightmost column that\n        is to be frozen\n\n        .. versionadded:: 0.20.0\n\n    Notes\n    -----\n    If passing an existing ExcelWriter object, then the sheet will be added\n    to the existing workbook.  This can be used to save different\n    DataFrames to one workbook:\n\n    >>> writer = pd.ExcelWriter('output.xlsx')\n    >>> df1.to_excel(writer,'Sheet1')\n    >>> df2.to_excel(writer,'Sheet2')\n    >>> writer.save()\n\n    For compatibility with to_csv, to_excel serializes lists and dicts to\n    strings before writing.\n    \"\"\"\n\n    def to_json(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : the path or buffer to write the result string\n            if this is None, return a StringIO of the converted string\n        orient : string\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values'}\n\n            * The format of the JSON string\n\n              - split : dict like\n                {index -> [index], columns -> [columns], data -> [values]}\n              - records : list like\n                [{column -> value}, ... , {column -> value}]\n              - index : dict like {index -> {column -> value}}\n              - columns : dict like {column -> {index -> value}}\n              - values : just the values array\n              - table : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. `epoch` = epoch milliseconds,\n            `iso` = ISO8601. The default depends on the `orient`. For\n            `orient='table'`, the default is `'iso'`. For all other orients,\n            the default is `'epoch'`.\n        double_precision : The number of decimal places to use when encoding\n            floating point values, default 10.\n        force_ascii : force encoded string to be ASCII, default True.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : boolean, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        Returns\n        -------\n        same type as input object with filtered info axis\n\n        See Also\n        --------\n        pd.read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines)\n\n    def to_hdf(self, path_or_buf, key, **kwargs):\n        \"\"\"Write the contained data to an HDF5 file using HDFStore.\n\n        Parameters\n        ----------\n        path_or_buf : the path (string) or HDFStore object\n        key : string\n            identifier for the group in the store\n        mode : optional, {'a', 'w', 'r+'}, default 'a'\n\n          ``'w'``\n              Write; a new file is created (an existing file with the same\n              name would be deleted).\n          ``'a'``\n              Append; an existing file is opened for reading and writing,\n              and if the file does not exist it is created.\n          ``'r+'``\n              It is similar to ``'a'``, but the file must already exist.\n        format : 'fixed(f)|table(t)', default is 'fixed'\n            fixed(f) : Fixed format\n                       Fast writing/reading. Not-appendable, nor searchable\n            table(t) : Table format\n                       Write as a PyTables Table structure which may perform\n                       worse but allow more flexible operations like searching\n                       / selecting subsets of the data\n        append : boolean, default False\n            For Table formats, append the input data to the existing\n        data_columns :  list of columns, or True, default None\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See `here\n            <http://pandas.pydata.org/pandas-docs/stable/io.html#query-via-data-columns>`__.\n\n            Applicable only to format='table'.\n        complevel : int, 1-9, default 0\n            If a complib is specified compression will be applied\n            where possible\n        complib : {'zlib', 'bzip2', 'lzo', 'blosc', None}, default None\n            If complevel is > 0 apply compression to objects written\n            in the store wherever possible\n        fletcher32 : bool, default False\n            If applying compression use the fletcher32 checksum\n        dropna : boolean, default False.\n            If true, ALL nan rows will not be written to store.\n        \"\"\"\n\n        from pandas.io import pytables\n        return pytables.to_hdf(path_or_buf, key, self, **kwargs)\n\n    def to_msgpack(self, path_or_buf=None, encoding='utf-8', **kwargs):\n        \"\"\"\n        msgpack (serialize) object to input file path\n\n        THIS IS AN EXPERIMENTAL LIBRARY and the storage format\n        may not be stable until a future release.\n\n        Parameters\n        ----------\n        path : string File path, buffer-like, or None\n            if None, return generated string\n        append : boolean whether to append to an existing msgpack\n            (default is False)\n        compress : type of compressor (zlib or blosc), default to None (no\n            compression)\n        \"\"\"\n\n        from pandas.io import packers\n        return packers.to_msgpack(path_or_buf, self, encoding=encoding,\n                                  **kwargs)\n\n    def to_sql(self, name, con, flavor=None, schema=None, if_exists='fail',\n               index=True, index_label=None, chunksize=None, dtype=None):\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Parameters\n        ----------\n        name : string\n            Name of SQL table\n        con : SQLAlchemy engine or DBAPI2 connection (legacy mode)\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. If a DBAPI2 object, only sqlite3 is supported.\n        flavor : 'sqlite', default None\n            DEPRECATED: this parameter will be removed in a future version,\n            as 'sqlite' is the only supported option if SQLAlchemy is not\n            installed.\n        schema : string, default None\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            - fail: If table exists, do nothing.\n            - replace: If table exists, drop it, recreate it, and insert data.\n            - append: If table exists, insert data. Create if does not exist.\n        index : boolean, default True\n            Write DataFrame index as a column.\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, default None\n            If not None, then rows will be written in batches of this size at a\n            time.  If None, all rows will be written at once.\n        dtype : dict of column name to SQL type, default None\n            Optional specifying the datatype for columns. The SQL type should\n            be a SQLAlchemy type, or a string for sqlite3 fallback connection.\n\n        \"\"\"\n        from pandas.io import sql\n        sql.to_sql(self, name, con, flavor=flavor, schema=schema,\n                   if_exists=if_exists, index=index, index_label=index_label,\n                   chunksize=chunksize, dtype=dtype)\n\n    def to_pickle(self, path):\n        \"\"\"\n        Pickle (serialize) object to input file path.\n\n        Parameters\n        ----------\n        path : string\n            File path\n        \"\"\"\n        from pandas.io.pickle import to_pickle\n        return to_pickle(self, path)\n\n    def to_clipboard(self, excel=None, sep=None, **kwargs):\n        \"\"\"\n        Attempt to write text representation of object to the system clipboard\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : boolean, defaults to True\n                if True, use the provided separator, writing in a csv\n                format for allowing easy pasting into excel.\n                if False, write a string representation of the object\n                to the clipboard\n        sep : optional, defaults to tab\n        other keywords are passed to to_csv\n\n        Notes\n        -----\n        Requirements for your platform\n          - Linux: xclip, or xsel (with gtk or PyQt4 modules)\n          - Windows: none\n          - OS X: none\n        \"\"\"\n        from pandas.io import clipboard\n        clipboard.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        a DataArray for a Series\n        a Dataset for a DataFrame\n        a DataArray for higher dims\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)})\n        >>> df\n           A    B    C\n        0  1  foo  4.0\n        1  1  bar  5.0\n        2  2  foo  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (index: 3)\n        Coordinates:\n          * index    (index) int64 0 1 2\n        Data variables:\n            A        (index) int64 1 1 2\n            B        (index) object 'foo' 'bar' 'foo'\n            C        (index) float64 4.0 5.0 6.0\n\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)}\n                             ).set_index(['B','A'])\n        >>> df\n                 C\n        B   A\n        foo 1  4.0\n        bar 1  5.0\n        foo 2  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (A: 2, B: 2)\n        Coordinates:\n          * B        (B) object 'bar' 'foo'\n          * A        (A) int64 1 2\n        Data variables:\n            C        (B, A) float64 5.0 nan 4.0 6.0\n\n        >>> p = pd.Panel(np.arange(24).reshape(4,3,2),\n                         items=list('ABCD'),\n                         major_axis=pd.date_range('20130101', periods=3),\n                         minor_axis=['first', 'second'])\n        >>> p\n        <class 'pandas.core.panel.Panel'>\n        Dimensions: 4 (items) x 3 (major_axis) x 2 (minor_axis)\n        Items axis: A to D\n        Major_axis axis: 2013-01-01 00:00:00 to 2013-01-03 00:00:00\n        Minor_axis axis: first to second\n\n        >>> p.to_xarray()\n        <xarray.DataArray (items: 4, major_axis: 3, minor_axis: 2)>\n        array([[[ 0,  1],\n                [ 2,  3],\n                [ 4,  5]],\n               [[ 6,  7],\n                [ 8,  9],\n                [10, 11]],\n               [[12, 13],\n                [14, 15],\n                [16, 17]],\n               [[18, 19],\n                [20, 21],\n                [22, 23]]])\n        Coordinates:\n          * items       (items) object 'A' 'B' 'C' 'D'\n          * major_axis  (major_axis) datetime64[ns] 2013-01-01 2013-01-02 2013-01-03  # noqa\n          * minor_axis  (minor_axis) object 'first' 'second'\n\n        Notes\n        -----\n        See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n        \"\"\"\n        import xarray\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        elif self.ndim == 2:\n            return xarray.Dataset.from_dataframe(self)\n\n        # > 2 dims\n        coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS]\n        return xarray.DataArray(self,\n                                coords=coords,\n                                )\n\n    # ----------------------------------------------------------------------\n    # Fancy Indexing\n\n    @classmethod\n    def _create_indexer(cls, name, indexer):\n        \"\"\"Create an indexer like _name in the class.\"\"\"\n\n        if getattr(cls, name, None) is None:\n            iname = '_%s' % name\n            setattr(cls, iname, None)\n\n            def _indexer(self):\n                i = getattr(self, iname)\n                if i is None:\n                    i = indexer(self, name)\n                    setattr(self, iname, i)\n                return i\n\n            setattr(cls, name, property(_indexer, doc=indexer.__doc__))\n\n            # add to our internal names set\n            cls._internal_names_set.add(iname)\n\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (DataFrame column, Panel slice,\n        etc.). Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : type of items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    def __getitem__(self, item):\n        return self._get_item_cache(item)\n\n    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res.is_copy = self.is_copy\n        return res\n\n    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))\n\n    def _reset_cacher(self):\n        \"\"\"Reset the cacher.\"\"\"\n        if hasattr(self, '_cacher'):\n            del self._cacher\n\n    def _iget_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n        ax = self._info_axis\n        if ax.is_unique:\n            lower = self._get_item_cache(ax[item])\n        else:\n            lower = self.take(item, axis=self._info_axis_number, convert=True)\n        return lower\n\n    def _box_item_values(self, key, values):\n        raise AbstractMethodError(self)\n\n    def _maybe_cache_changed(self, item, value):\n        \"\"\"The object has called back to us saying maybe it has changed.\n\n        numpy < 1.8 has an issue with object arrays and aliasing\n        GH6026\n        \"\"\"\n        self._data.set(item, value, check=pd._np_version_under1p8)\n\n    @property\n    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, '_cacher', None) is not None\n\n    def _get_cacher(self):\n        \"\"\"return my cacher or None\"\"\"\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            cacher = cacher[1]()\n        return cacher\n\n    @property\n    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view\n\n    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : boolean, default False\n            clear the item cache\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except:\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t='referant')\n\n        if clear:\n            self._clear_item_cache()\n\n    def _clear_item_cache(self, i=None):\n        if i is not None:\n            self._item_cache.pop(i, None)\n        else:\n            self._item_cache.clear()\n\n    def _slice(self, slobj, axis=0, kind=None):\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result\n\n    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()\n\n    def _set_is_copy(self, ref=None, copy=True):\n        if not copy:\n            self.is_copy = None\n        else:\n            if ref is not None:\n                self.is_copy = weakref.ref(ref)\n            else:\n                self.is_copy = None\n\n    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self.is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False\n\n    def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : integer, default 4\n           the level to show of the stack when the error is output\n        t : string, the type of setting error\n        force : boolean, default False\n           if True, then force showing an error\n\n        validate if we are doing a settitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        if force or self.is_copy:\n\n            value = config.get_option('mode.chained_assignment')\n            if value is None:\n                return\n\n            # see if the copy is not actually refererd; if so, then disolve\n            # the copy weakref\n            try:\n                gc.collect(2)\n                if not gc.get_referents(self.is_copy()):\n                    self.is_copy = None\n                    return\n            except:\n                pass\n\n            # we might be a false positive\n            try:\n                if self.is_copy().shape == self.shape:\n                    self.is_copy = None\n                    return\n            except:\n                pass\n\n            # a custom message\n            if isinstance(self.is_copy, string_types):\n                t = self.is_copy\n\n            elif t == 'referant':\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame\\n\\n\"\n                     \"See the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            else:\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame.\\n\"\n                     \"Try using .loc[row_indexer,col_indexer] = value \"\n                     \"instead\\n\\nSee the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            if value == 'raise':\n                raise SettingWithCopyError(t)\n            elif value == 'warn':\n                warnings.warn(t, SettingWithCopyWarning, stacklevel=stacklevel)\n\n    def __delitem__(self, key):\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if hasattr(self, 'columns') and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key, )\n            for col in self.columns:\n                if isinstance(col, tuple) and col[:len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            self._data.delete(key)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass\n\n    def take(self, indices, axis=0, convert=True, is_copy=True, **kwargs):\n        \"\"\"\n        Analogous to ndarray.take\n\n        Parameters\n        ----------\n        indices : list / array of ints\n        axis : int, default 0\n        convert : translate neg to pos indices (default)\n        is_copy : mark the returned frame as a copy\n\n        Returns\n        -------\n        taken : type of caller\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n        self._consolidate_inplace()\n        new_data = self._data.take(indices,\n                                   axis=self._get_block_manager_axis(axis),\n                                   convert=True, verify=True)\n        result = self._constructor(new_data).__finalize__(self)\n\n        # maybe set copy if we didn't actually change the index\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result\n\n    def xs(self, key, axis=0, level=None, drop_level=True):\n        \"\"\"\n        Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame. Defaults to cross-section on the rows (axis=0).\n\n        Parameters\n        ----------\n        key : object\n            Some label contained in the index, or partially in a MultiIndex\n        axis : int, default 0\n            Axis to retrieve cross-section on\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n\n        Examples\n        --------\n        >>> df\n           A  B  C\n        a  4  5  2\n        b  4  0  9\n        c  9  7  3\n        >>> df.xs('a')\n        A    4\n        B    5\n        C    2\n        Name: a\n        >>> df.xs('C', axis=1)\n        a    2\n        b    9\n        c    3\n        Name: C\n\n        >>> df\n                            A  B  C  D\n        first second third\n        bar   one    1      4  1  8  9\n              two    1      7  5  5  0\n        baz   one    1      6  6  8  0\n              three  2      5  3  5  3\n        >>> df.xs(('baz', 'three'))\n               A  B  C  D\n        third\n        2      5  3  5  3\n        >>> df.xs('one', level=1)\n                     A  B  C  D\n        first third\n        bar   1      4  1  8  9\n        baz   1      6  6  8  0\n        >>> df.xs(('baz', 2), level=[0, 'third'])\n                A  B  C  D\n        second\n        three   5  3  5  3\n\n        Returns\n        -------\n        xs : Series or DataFrame\n\n        Notes\n        -----\n        xs is only for getting, not setting values.\n\n        MultiIndex Slicers is a generic way to get/set values on any level or\n        levels.  It is a superset of xs functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level,\n                                               drop_level=drop_level)\n\n            # create the tuple of the indexer\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = loc\n            indexer = tuple(indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key,\n                                                      drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    inds, = loc.nonzero()\n                    return self.take(inds, axis=axis, convert=False)\n                else:\n                    return self.take(loc, axis=axis, convert=True)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            new_values = self._data.fast_xs(loc)\n\n            # may need to box a datelike-scalar\n            #\n            # if we encounter an array-like and we only have 1 dim\n            # that means that their are list/ndarrays inside the Series!\n            # so just return them (GH 6394)\n            if not is_list_like(new_values) or self.ndim == 1:\n                return _maybe_box_datetimelike(new_values)\n\n            result = self._constructor_sliced(\n                new_values, index=self.columns,\n                name=self.index[loc], dtype=new_values.dtype)\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result\n\n    _xs = xs\n\n    # TODO: Check if this was clearer in 0.12\n    def select(self, crit, axis=0):\n        \"\"\"\n        Return data corresponding to axis labels matching criteria\n\n        Parameters\n        ----------\n        crit : function\n            To be called on each index (label). Should return True or False\n        axis : int\n\n        Returns\n        -------\n        selection : type of caller\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis)\n\n        if len(axis_values) > 0:\n            new_axis = axis_values[\n                np.asarray([bool(crit(label)) for label in axis_values])]\n        else:\n            new_axis = axis_values\n\n        return self.reindex(**{axis_name: new_axis})\n\n    def reindex_like(self, other, method=None, copy=True, limit=None,\n                     tolerance=None):\n        \"\"\"Return an object with matching indices to myself.\n\n        Parameters\n        ----------\n        other : Object\n        method : string or None\n        copy : boolean, default True\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches.\n\n            .. versionadded:: 0.17.0\n\n        Notes\n        -----\n        Like calling s.reindex(index=other.index, columns=other.columns,\n                               method=...)\n\n        Returns\n        -------\n        reindexed : same as input\n        \"\"\"\n        d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=method,\n                                       copy=copy, limit=limit,\n                                       tolerance=tolerance)\n\n        return self.reindex(**d)\n\n    def drop(self, labels, axis=0, level=None, inplace=False, errors='raise'):\n        \"\"\"\n        Return new object with labels in requested axis removed.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n            .. versionadded:: 0.16.1\n\n        Returns\n        -------\n        dropped : type of caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis, axis_ = self._get_axis(axis), axis\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            dropped = self.reindex(**{axis_name: new_axis})\n            try:\n                dropped.axes[axis_].set_names(axis.names, inplace=True)\n            except AttributeError:\n                pass\n            result = dropped\n\n        else:\n            labels = com._index_labels_to_array(labels)\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                indexer = ~axis.get_level_values(level).isin(labels)\n            else:\n                indexer = ~axis.isin(labels)\n\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n\n            result = self.loc[tuple(slicer)]\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def _update_inplace(self, result, verify_is_copy=True):\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, '_data', result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)\n\n    def add_prefix(self, prefix):\n        \"\"\"\n        Concatenate prefix string with panel items names.\n\n        Parameters\n        ----------\n        prefix : string\n\n        Returns\n        -------\n        with_prefix : type of caller\n        \"\"\"\n        new_data = self._data.add_prefix(prefix)\n        return self._constructor(new_data).__finalize__(self)\n\n    def add_suffix(self, suffix):\n        \"\"\"\n        Concatenate suffix string with panel items names.\n\n        Parameters\n        ----------\n        suffix : string\n\n        Returns\n        -------\n        with_suffix : type of caller\n        \"\"\"\n        new_data = self._data.add_suffix(suffix)\n        return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        .. versionadded:: 0.17.0\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n            Axis to direct sorting\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n        \"\"\"\n\n    def sort_values(self, by, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n        raise AbstractMethodError(self)\n\n    _shared_docs['sort_index'] = \"\"\"\n        Sort object by labels (along an axis)\n\n        Parameters\n        ----------\n        axis : %(axes)s to direct sorting\n        level : int or level name or list of ints or list of level names\n            if not None, sort on values in specified index level(s)\n        ascending : boolean, default True\n            Sort ascending vs. descending\n        inplace : bool, default False\n            if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end.\n             Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            if true and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['sort_index'] % dict(axes=\"axes\", klass=\"NDFrame\"))\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        labels = self._get_axis(axis)\n\n        if level is not None:\n            raise NotImplementedError(\"level is not implemented\")\n        if inplace:\n            raise NotImplementedError(\"inplace is not implemented\")\n\n        sort_index = labels.argsort()\n        if not ascending:\n            sort_index = sort_index[::-1]\n\n        new_axis = labels.take(sort_index)\n        return self.reindex(**{axis_name: new_axis})\n\n    _shared_docs['reindex'] = \"\"\"\n        Conform %(klass)s to new index with optional filling logic, placing\n        NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        copy=False\n\n        Parameters\n        ----------\n        %(axes)s : array-like, optional (can be specified in order, or as\n            keywords)\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            method to use for filling holes in reindexed DataFrame.\n            Please note: this is only  applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            .. versionadded:: 0.17.0\n\n        Examples\n        --------\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to backpropagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29     100\n        2009-12-30     100\n        2009-12-31     100\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\"\n\n    # TODO: Decide if we care about having different examples for different\n    #       kinds\n\n    @Appender(_shared_docs['reindex'] % dict(axes=\"axes\", klass=\"NDFrame\"))\n    def reindex(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n        level = kwargs.pop('level', None)\n        copy = kwargs.pop('copy', True)\n        limit = kwargs.pop('limit', None)\n        tolerance = kwargs.pop('tolerance', None)\n        fill_value = kwargs.pop('fill_value', np.nan)\n\n        if kwargs:\n            raise TypeError('reindex() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all([self._get_axis(axis).identical(ax)\n                for axis, ax in axes.items() if ax is not None]):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            try:\n                return self._reindex_multi(axes, copy, fill_value)\n            except:\n                pass\n\n        # perform the reindex on the axes\n        return self._reindex_axes(axes, level, limit, tolerance, method,\n                                  fill_value, copy).__finalize__(self)\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n                      copy):\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(labels, level=level, limit=limit,\n                                            tolerance=tolerance, method=method)\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers({axis: [new_index, indexer]},\n                                             fill_value=fill_value,\n                                             copy=copy, allow_dups=False)\n\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return ((com._count_not_none(*axes.values()) == self._AXIS_LEN) and\n                method is None and level is None and not self._is_mixed_type)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        return NotImplemented\n\n    _shared_docs[\n        'reindex_axis'] = (\"\"\"Conform input object to new index with optional\n        filling logic, placing NA/NaN in locations having no value in the\n        previous index. A new object is produced unless the new index is\n        equivalent to the current one and copy=False\n\n        Parameters\n        ----------\n        labels : array-like\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        axis : %(axes_single_arg)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            Method to use for filling holes in reindexed DataFrame:\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            .. versionadded:: 0.17.0\n\n        Examples\n        --------\n        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)\n\n        See Also\n        --------\n        reindex, reindex_like\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\")\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=True,\n                     limit=None, fill_value=np.nan):\n        self._consolidate_inplace()\n\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis_name)\n        method = missing.clean_reindex_fill_method(method)\n        new_index, indexer = axis_values.reindex(labels, method, level,\n                                                 limit=limit)\n        return self._reindex_with_indexers({axis: [new_index, indexer]},\n                                           fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers, fill_value=np.nan, copy=False,\n                               allow_dups=False):\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = _ensure_index(index)\n            if indexer is not None:\n                indexer = _ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,\n                                                fill_value=fill_value,\n                                                allow_dups=allow_dups,\n                                                copy=copy)\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def _reindex_axis(self, new_index, fill_method, axis, copy):\n        new_data = self._data.reindex_axis(new_index, axis=axis,\n                                           method=fill_method, copy=copy)\n\n        if new_data is self._data and not copy:\n            return self\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def filter(self, items=None, like=None, regex=None, axis=None):\n        \"\"\"\n        Subset rows or columns of dataframe according to labels in\n        the specified index.\n\n        Note that this routine does not filter a dataframe on its\n        contents. The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            List of info axis to restrict to (must not all be present)\n        like : string\n            Keep info axis where \"arg in col == True\"\n        regex : string (regular expression)\n            Keep info axis with re.search(regex, col) == True\n        axis : int or string axis name\n            The axis to filter on.  By default this is the info axis,\n            'index' for Series, 'columns' for DataFrame\n\n        Returns\n        -------\n        same type as input object\n\n        Examples\n        --------\n        >>> df\n        one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=['one', 'three'])\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex='e$', axis=1)\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like='bbi', axis=0)\n        one  two  three\n        rabbit    4    5      6\n\n        See Also\n        --------\n        pandas.DataFrame.select\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n        \"\"\"\n        import re\n\n        nkw = sum([x is not None for x in [items, like, regex]])\n        if nkw > 1:\n            raise TypeError('Keyword arguments `items`, `like`, or `regex` '\n                            'are mutually exclusive')\n\n        if axis is None:\n            axis = self._info_axis_name\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis_name)\n\n        if items is not None:\n            return self.reindex(**{axis_name:\n                                   [r for r in items if r in axis_values]})\n        elif like:\n            matchf = lambda x: (like in x if isinstance(x, string_types) else\n                                like in str(x))\n            return self.select(matchf, axis=axis_name)\n        elif regex:\n            matcher = re.compile(regex)\n            return self.select(lambda x: matcher.search(str(x)) is not None,\n                               axis=axis_name)\n        else:\n            raise TypeError('Must pass either `items`, `like`, or `regex`')\n\n    def head(self, n=5):\n        \"\"\"\n        Returns first n rows\n        \"\"\"\n        return self.iloc[:n]\n\n    def tail(self, n=5):\n        \"\"\"\n        Returns last n rows\n        \"\"\"\n        if n == 0:\n            return self.iloc[0:0]\n        return self.iloc[-n:]\n\n    def sample(self, n=None, frac=None, replace=False, weights=None,\n               random_state=None, axis=None):\n        \"\"\"\n        Returns a random sample of items from an axis of object.\n\n        .. versionadded:: 0.16.1\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : boolean, optional\n            Sample with or without replacement. Default = False.\n        weights : str or ndarray-like, optional\n            Default 'None' results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            inf and -inf values not allowed.\n        random_state : int or numpy.random.RandomState, optional\n            Seed for the random number generator (if int), or numpy RandomState\n            object.\n        axis : int or string, optional\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type (0 for Series and DataFrames, 1 for Panels).\n\n        Returns\n        -------\n        A new object of same type as caller.\n\n        Examples\n        --------\n\n        Generate an example ``Series`` and ``DataFrame``:\n\n        >>> s = pd.Series(np.random.randn(50))\n        >>> s.head()\n        0   -0.038497\n        1    1.820773\n        2   -0.972766\n        3   -1.598270\n        4   -1.095526\n        dtype: float64\n        >>> df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n        >>> df.head()\n                  A         B         C         D\n        0  0.016443 -2.318952 -0.566372 -1.028078\n        1 -1.051921  0.438836  0.658280 -0.175797\n        2 -1.243569 -0.364626 -0.215065  0.057736\n        3  1.768216  0.404512 -0.385604 -1.457834\n        4  1.072446 -1.137172  0.314194 -0.046661\n\n        Next extract a random sample from both of these objects...\n\n        3 random elements from the ``Series``:\n\n        >>> s.sample(n=3)\n        27   -0.994689\n        55   -1.049016\n        67   -0.224565\n        dtype: float64\n\n        And a random 10% of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.1, replace=True)\n                   A         B         C         D\n        35  1.981780  0.142106  1.817165 -0.290805\n        49 -1.336199 -0.448634 -0.789640  0.217116\n        40  0.823173 -0.078816  1.009536  1.015108\n        15  1.421154 -0.055301 -1.922594 -0.019696\n        6  -0.148339  0.832938  1.787600 -1.383767\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n\n        axis = self._get_axis_number(axis)\n        axis_length = self.shape[axis]\n\n        # Process random_state argument\n        rs = com._random_state(random_state)\n\n        # Check weights for compliance\n        if weights is not None:\n\n            # If a series, align with frame\n            if isinstance(weights, pd.Series):\n                weights = weights.reindex(self.axes[axis])\n\n            # Strings acceptable if a dataframe and axis = 0\n            if isinstance(weights, string_types):\n                if isinstance(self, pd.DataFrame):\n                    if axis == 0:\n                        try:\n                            weights = self[weights]\n                        except KeyError:\n                            raise KeyError(\"String passed to weights not a \"\n                                           \"valid column\")\n                    else:\n                        raise ValueError(\"Strings can only be passed to \"\n                                         \"weights when sampling from rows on \"\n                                         \"a DataFrame\")\n                else:\n                    raise ValueError(\"Strings cannot be passed as weights \"\n                                     \"when sampling from a Series or Panel.\")\n\n            weights = pd.Series(weights, dtype='float64')\n\n            if len(weights) != axis_length:\n                raise ValueError(\"Weights and axis to be sampled must be of \"\n                                 \"same length\")\n\n            if (weights == np.inf).any() or (weights == -np.inf).any():\n                raise ValueError(\"weight vector may not include `inf` values\")\n\n            if (weights < 0).any():\n                raise ValueError(\"weight vector many not include negative \"\n                                 \"values\")\n\n            # If has nan, set to zero.\n            weights = weights.fillna(0)\n\n            # Renormalize if don't sum to 1\n            if weights.sum() != 1:\n                if weights.sum() != 0:\n                    weights = weights / weights.sum()\n                else:\n                    raise ValueError(\"Invalid weights: weights sum to zero\")\n\n            weights = weights.values\n\n        # If no frac or n, default to n=1.\n        if n is None and frac is None:\n            n = 1\n        elif n is not None and frac is None and n % 1 != 0:\n            raise ValueError(\"Only integers accepted as `n` values\")\n        elif n is None and frac is not None:\n            n = int(round(frac * axis_length))\n        elif n is not None and frac is not None:\n            raise ValueError('Please enter a value for `frac` OR `n`, not '\n                             'both')\n\n        # Check for negative sizes\n        if n < 0:\n            raise ValueError(\"A negative number of rows requested. Please \"\n                             \"provide positive value.\")\n\n        locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n        return self.take(locs, axis=axis, is_copy=False)\n\n    _shared_docs['pipe'] = (\"\"\"\n        Apply func(self, \\*args, \\*\\*kwargs)\n\n        .. versionadded:: 0.16.2\n\n        Parameters\n        ----------\n        func : function\n            function to apply to the %(klass)s.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the %(klass)s.\n        args : positional arguments passed into ``func``.\n        kwargs : a dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        object : the return type of ``func``.\n\n        Notes\n        -----\n\n        Use ``.pipe`` when chaining together functions that expect\n        on Series or DataFrames. Instead of writing\n\n        >>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\n        You can write\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``f`` takes its data as ``arg2``:\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n        ...  )\n\n        See Also\n        --------\n        pandas.DataFrame.apply\n        pandas.DataFrame.applymap\n        pandas.Series.map\n    \"\"\")\n\n    @Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\n    def pipe(self, func, *args, **kwargs):\n        if isinstance(func, tuple):\n            func, target = func\n            if target in kwargs:\n                raise ValueError('%s is both the pipe target and a keyword '\n                                 'argument' % target)\n            kwargs[target] = self\n            return func(*args, **kwargs)\n        else:\n            return func(self, *args, **kwargs)\n\n    # ----------------------------------------------------------------------\n    # Attribute access\n\n    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self\n\n    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (name in self._internal_names_set or name in self._metadata or\n                name in self._accessors):\n            return object.__getattribute__(self, name)\n        else:\n            if name in self._info_axis:\n                return self[name]\n            return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                object.__setattr__(self, name, value)\n\n    # ----------------------------------------------------------------------\n    # Getting and setting elements\n\n    # ----------------------------------------------------------------------\n    # Consolidation of internals\n\n    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result\n\n    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)\n\n    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : boolean, default False\n            If False return new object, otherwise modify existing object\n\n        Returns\n        -------\n        consolidated : type of caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)\n\n    def consolidate(self, inplace=False):\n        \"\"\"\n        DEPRECATED: consolidate will be an internal implementation only.\n        \"\"\"\n        # 15483\n        warnings.warn(\"consolidate is deprecated and will be removed in a \"\n                      \"future release.\", FutureWarning, stacklevel=2)\n        return self._consolidate(inplace)\n\n    @property\n    def _is_mixed_type(self):\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_numeric_mixed_type(self):\n        f = lambda: self._data.is_numeric_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_datelike_mixed_type(self):\n        f = lambda: self._data.is_datelike_mixed_type\n        return self._protect_consolidate(f)\n\n    def _check_inplace_setting(self, value):\n        \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n\n        if self._is_mixed_type:\n            if not self._is_numeric_mixed_type:\n\n                # allow an actual np.nan thru\n                try:\n                    if np.isnan(value):\n                        return True\n                except:\n                    pass\n\n                raise TypeError('Cannot do inplace boolean setting on '\n                                'mixed-types with a non np.nan value')\n\n        return True\n\n    def _get_numeric_data(self):\n        return self._constructor(\n            self._data.get_numeric_data()).__finalize__(self)\n\n    def _get_bool_data(self):\n        return self._constructor(self._data.get_bool_data()).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    def as_matrix(self, columns=None):\n        \"\"\"\n        Convert the frame to its Numpy-array representation.\n\n        Parameters\n        ----------\n        columns: list, optional, default:None\n            If None, return all columns, otherwise, returns specified columns.\n\n        Returns\n        -------\n        values : ndarray\n            If the caller is heterogeneous and contains booleans or objects,\n            the result will be of dtype=object. See Notes.\n\n\n        Notes\n        -----\n        Return is NOT a Numpy-matrix, rather, a Numpy-array.\n\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcase to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a flot64 dtype.\n\n        This method is provided for backwards compatibility. Generally,\n        it is recommended to use '.values'.\n\n        See Also\n        --------\n        pandas.DataFrame.values\n        \"\"\"\n        self._consolidate_inplace()\n        if self._AXIS_REVERSED:\n            return self._data.as_matrix(columns).T\n        return self._data.as_matrix(columns)\n\n    @property\n    def values(self):\n        \"\"\"Numpy representation of NDFrame\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a flot64 dtype.\n        \"\"\"\n        return self.as_matrix()\n\n    @property\n    def _values(self):\n        \"\"\"internal implementation\"\"\"\n        return self.values\n\n    @property\n    def _get_values(self):\n        # compat\n        return self.as_matrix()\n\n    def get_values(self):\n        \"\"\"same as values (but handles sparseness conversions)\"\"\"\n        return self.as_matrix()\n\n    def get_dtype_counts(self):\n        \"\"\"Return the counts of dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtype_counts())\n\n    def get_ftype_counts(self):\n        \"\"\"Return the counts of ftypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftype_counts())\n\n    @property\n    def dtypes(self):\n        \"\"\"Return the dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    @property\n    def ftypes(self):\n        \"\"\"\n        Return the ftypes (indication of sparse/dense and dtype)\n        in this object.\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    def as_blocks(self, copy=True):\n        \"\"\"\n        Convert the frame to a dict of dtype -> Constructor Types that each has\n        a homogeneous dtype.\n\n        NOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n              as_matrix)\n\n        Parameters\n        ----------\n        copy : boolean, default True\n\n               .. versionadded: 0.16.1\n\n        Returns\n        -------\n        values : a dict of dtype -> Constructor Types\n        \"\"\"\n        self._consolidate_inplace()\n\n        bd = {}\n        for b in self._data.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        result = {}\n        for dtype, blocks in bd.items():\n            # Must combine even after consolidation, because there may be\n            # sparse items which are never consolidated into one block.\n            combined = self._data.combine(blocks, copy=copy)\n            result[dtype] = self._constructor(combined).__finalize__(self)\n\n        return result\n\n    @property\n    def blocks(self):\n        \"\"\"Internal property, property synonym for as_blocks()\"\"\"\n        return self.as_blocks()\n\n    @deprecate_kwarg(old_arg_name='raise_on_error', new_arg_name='errors',\n                     mapping={True: 'raise', False: 'ignore'})\n    def astype(self, dtype, copy=True, errors='raise', **kwargs):\n        \"\"\"\n        Cast object to input numpy.dtype\n        Return a copy when copy = True (be really careful with this!)\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            .. versionadded:: 0.20.0\n\n        raise_on_error : DEPRECATED use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns\n        -------\n        casted : type of caller\n        \"\"\"\n        if isinstance(dtype, collections.Mapping):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or list(dtype.keys())[0] != self.name:\n                    raise KeyError('Only the Series name can be used for '\n                                   'the key in Series dtype mappings.')\n                new_type = list(dtype.values())[0]\n                return self.astype(new_type, copy, errors, **kwargs)\n            elif self.ndim > 2:\n                raise NotImplementedError(\n                    'astype() only accepts a dtype arg of type dict when '\n                    'invoked on Series and DataFrames. A single dtype must be '\n                    'specified when invoked on a Panel.'\n                )\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError('Only a column name can be used for the '\n                                   'key in a dtype mappings argument.')\n            from pandas import concat\n            results = []\n            for col_name, col in self.iteritems():\n                if col_name in dtype:\n                    results.append(col.astype(dtype[col_name], copy=copy))\n                else:\n                    results.append(results.append(col.copy() if copy else col))\n            return concat(results, axis=1, copy=False)\n\n        # else, only a single dtype is given\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,\n                                     **kwargs)\n        return self._constructor(new_data).__finalize__(self)\n\n    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this objects data.\n\n        Parameters\n        ----------\n        deep : boolean or string, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices or the data are copied.\n\n            Note that when ``deep=True`` data is copied, actual python objects\n            will not be copied recursively, only the reference to the object.\n            This is in contrast to ``copy.deepcopy`` in the Standard Library,\n            which recursively copies object data.\n\n        Returns\n        -------\n        copy : type of caller\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)\n\n    def __copy__(self, deep=True):\n        return self.copy(deep=deep)\n\n    def __deepcopy__(self, memo=None):\n        if memo is None:\n            memo = {}\n        return self.copy(deep=True)\n\n    def _convert(self, datetime=False, numeric=False, timedelta=False,\n                 coerce=False, copy=True):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : boolean, default False\n            If True, convert to date where possible.\n        numeric : boolean, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : boolean, default False\n            If True, convert to timedelta where possible.\n        coerce : boolean, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT)\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        return self._constructor(\n            self._data.convert(datetime=datetime, numeric=numeric,\n                               timedelta=timedelta, coerce=coerce,\n                               copy=copy)).__finalize__(self)\n\n    # TODO: Remove in 0.18 or 2017, which ever is sooner\n    def convert_objects(self, convert_dates=True, convert_numeric=False,\n                        convert_timedeltas=True, copy=True):\n        \"\"\"\n        Deprecated.\n\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        convert_dates : boolean, default True\n            If True, convert to date where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        convert_numeric : boolean, default False\n            If True, attempt to coerce to numbers (including strings), with\n            unconvertible values becoming NaN.\n        convert_timedeltas : boolean, default True\n            If True, convert to timedelta where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Return a fixed frequency timedelta index,\n            with day as the default.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        from warnings import warn\n        warn(\"convert_objects is deprecated.  Use the data-type specific \"\n             \"converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.\",\n             FutureWarning, stacklevel=2)\n\n        return self._constructor(\n            self._data.convert(convert_dates=convert_dates,\n                               convert_numeric=convert_numeric,\n                               convert_timedeltas=convert_timedeltas,\n                               copy=copy)).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Filling NA's\n\n    _shared_docs['fillna'] = (\"\"\"\n        Fill NA/NaN values using the specified method\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame). (values not\n            in the dict/Series/DataFrame will not be filled). This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        axis : %(axes_single_arg)s\n        inplace : boolean, default False\n            If True, fill in place. Note: this will modify any\n            other views on this object, (e.g. a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            a dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible)\n\n        See Also\n        --------\n        reindex, asfreq\n\n        Returns\n        -------\n        filled : %(klass)s\n        \"\"\")\n\n    @Appender(_shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if isinstance(value, (list, tuple)):\n            raise TypeError('\"value\" parameter must be a scalar or dict, but '\n                            'you passed a \"{0}\"'.format(type(value).__name__))\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n        method = missing.clean_fill_method(method)\n        from pandas import DataFrame\n        if value is None:\n            if method is None:\n                raise ValueError('must specify a fill method or value')\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._data = result._data.downcast()\n\n                return result\n\n            # > 3d\n            if self.ndim > 3:\n                raise NotImplementedError('Cannot fillna with a method for > '\n                                          '3dims')\n\n            # 3d\n            elif self.ndim == 3:\n\n                # fill in 2d chunks\n                result = dict([(col, s.fillna(method=method, value=value))\n                               for col, s in self.iteritems()])\n                new_obj = self._constructor.\\\n                    from_dict(result).__finalize__(self)\n                new_data = new_obj._data\n\n            else:\n                # 2d or less\n                method = missing.clean_fill_method(method)\n                new_data = self._data.interpolate(method=method, axis=axis,\n                                                  limit=limit, inplace=inplace,\n                                                  coerce=True,\n                                                  downcast=downcast)\n        else:\n            if method is not None:\n                raise ValueError('cannot specify both a fill method and value')\n\n            if len(self._get_axis(axis)) == 0:\n                return self\n\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    from pandas import Series\n                    value = Series(value)\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise ValueError(\"invalid fill value with a %s\" %\n                                     type(value))\n\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError('Currently only can fill '\n                                              'with dict/Series column '\n                                              'by column')\n\n                result = self if inplace else self.copy()\n                for k, v in compat.iteritems(value):\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result\n            elif not is_list_like(value):\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n            elif isinstance(value, DataFrame) and self.ndim == 2:\n                new_data = self.where(self.notnull(), value)\n            else:\n                raise ValueError(\"invalid fill value with a %s\" % type(value))\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def ffill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='ffill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='ffill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    def bfill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='bfill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='bfill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        \"\"\"\n        Replace values given in 'to_replace' with 'value'.\n\n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, numeric, or None\n\n            * str or regex:\n\n                - str: string exactly matching `to_replace` will be replaced\n                  with `value`\n                - regex: regexs matching `to_replace` will be replaced with\n                  `value`\n\n            * list of str, regex, or numeric:\n\n                - First, if `to_replace` and `value` are both lists, they\n                  **must** be the same length.\n                - Second, if ``regex=True`` then all of the strings in **both**\n                  lists will be interpreted as regexs otherwise they will match\n                  directly. This doesn't matter much for `value` since there\n                  are only a few possible substitution regexes you can use.\n                - str and regex rules apply as above.\n\n            * dict:\n\n                - Nested dictionaries, e.g., {'a': {'b': nan}}, are read as\n                  follows: look in column 'a' for the value 'b' and replace it\n                  with nan. You can nest regular expressions as well. Note that\n                  column names (the top-level dictionary keys in a nested\n                  dictionary) **cannot** be regular expressions.\n                - Keys map to column names and values map to substitution\n                  values. You can treat this as a special case of passing two\n                  lists except that you are specifying the column to search in.\n\n            * None:\n\n                - This means that the ``regex`` argument must be a string,\n                  compiled regular expression, or list, dict, ndarray or Series\n                  of such elements. If `value` is also ``None`` then this\n                  **must** be a nested dictionary or ``Series``.\n\n            See the examples section for examples of each of these.\n        value : scalar, dict, list, str, regex, default None\n            Value to use to fill holes (e.g. 0), alternately a dict of values\n            specifying which value to use for each column (columns not in the\n            dict will not be filled). Regular expressions, strings and lists or\n            dicts of such objects are also allowed.\n        inplace : boolean, default False\n            If True, in place. Note: this will modify any\n            other views on this object (e.g. a column form a DataFrame).\n            Returns the caller if this is True.\n        limit : int, default None\n            Maximum size gap to forward or backward fill\n        regex : bool or same types as `to_replace`, default False\n            Whether to interpret `to_replace` and/or `value` as regular\n            expressions. If this is ``True`` then `to_replace` *must* be a\n            string. Otherwise, `to_replace` must be ``None`` because this\n            parameter will be interpreted as a regular expression or a list,\n            dict, or array of regular expressions.\n        method : string, optional, {'pad', 'ffill', 'bfill'}\n            The method to use when for replacement, when ``to_replace`` is a\n            ``list``.\n\n        See Also\n        --------\n        NDFrame.reindex\n        NDFrame.asfreq\n        NDFrame.fillna\n\n        Returns\n        -------\n        filled : NDFrame\n\n        Raises\n        ------\n        AssertionError\n            * If `regex` is not a ``bool`` and `to_replace` is not ``None``.\n        TypeError\n            * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n              ``dict``, ``ndarray``, or ``Series``\n            * If `to_replace` is ``None`` and `regex` is not compilable into a\n              regular expression or is a list, dict, ndarray, or Series.\n        ValueError\n            * If `to_replace` and `value` are ``list`` s or ``ndarray`` s, but\n              they are not the same length.\n\n        Notes\n        -----\n        * Regex substitution is performed under the hood with ``re.sub``. The\n          rules for substitution for ``re.sub`` are the same.\n        * Regular expressions will only substitute on strings, meaning you\n          cannot provide, for example, a regular expression matching floating\n          point numbers and expect the columns in your frame that have a\n          numeric dtype to be matched. However, if those floating point numbers\n          *are* strings, then you can do this.\n        * This method has *a lot* of options. You are encouraged to experiment\n          and play with this method to gain intuition about how it works.\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\"'to_replace' must be 'None' if 'regex' is \"\n                                 \"not a bool\")\n        if axis is not None:\n            from warnings import warn\n            warn('the \"axis\" argument is deprecated and will be removed in'\n                 'v0.13; this argument has no effect')\n\n        self._consolidate_inplace()\n\n        if value is None:\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                return _single_replace(self, to_replace, method, inplace,\n                                       limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError('If \"to_replace\" and \"value\" are both None'\n                                    ' and \"to_replace\" is not a list, then '\n                                    'regex must be a mapping')\n                to_replace = regex\n                regex = True\n\n            items = list(compat.iteritems(to_replace))\n            keys, values = lzip(*items) or ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\"If a nested mapping is passed, all values\"\n                                    \" of the top level mapping must be \"\n                                    \"mappings\")\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = lzip(*v.items()) or ([], [])\n                    if set(keys) & set(values):\n                        raise ValueError(\"Replacement not allowed with \"\n                                         \"overlapping keys and values\")\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(to_replace, value, inplace=inplace,\n                                limit=limit, regex=regex)\n        else:\n\n            # need a non-zero len on all axes\n            for a in self._AXIS_ORDERS:\n                if not len(self._get_axis(a)):\n                    return self\n\n            new_data = self._data\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    res = self if inplace else self.copy()\n                    for c, src in compat.iteritems(to_replace):\n                        if c in value and c in self:\n                            # object conversion is handled in\n                            # series.replace which is called recursivelly\n                            res[c] = res[c].replace(to_replace=src,\n                                                    value=value[c],\n                                                    inplace=False,\n                                                    regex=regex)\n                    return None if inplace else res\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    keys = [(k, src) for k, src in compat.iteritems(to_replace)\n                            if k in self]\n                    keys_len = len(keys) - 1\n                    for i, (k, src) in enumerate(keys):\n                        convert = i == keys_len\n                        new_data = new_data.replace(to_replace=src,\n                                                    value=value,\n                                                    filter=[k],\n                                                    inplace=inplace,\n                                                    regex=regex,\n                                                    convert=convert)\n                else:\n                    raise TypeError('value argument must be scalar, dict, or '\n                                    'Series')\n\n            elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError('Replacement lists must match '\n                                         'in length. Expecting %d got %d ' %\n                                         (len(to_replace), len(value)))\n\n                    new_data = self._data.replace_list(src_list=to_replace,\n                                                       dest_list=value,\n                                                       inplace=inplace,\n                                                       regex=regex)\n\n                else:  # [NA, ''] -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n            elif to_replace is None:\n                if not (is_re_compilable(regex) or\n                        is_list_like(regex) or is_dict_like(regex)):\n                    raise TypeError(\"'regex' must be a string or a compiled \"\n                                    \"regular expression or a list or dict of \"\n                                    \"strings or regular expressions, you \"\n                                    \"passed a\"\n                                    \" {0!r}\".format(type(regex).__name__))\n                return self.replace(regex, value, inplace=inplace, limit=limit,\n                                    regex=True)\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    new_data = self._data\n\n                    for k, v in compat.iteritems(value):\n                        if k in self:\n                            new_data = new_data.replace(to_replace=to_replace,\n                                                        value=v, filter=[k],\n                                                        inplace=inplace,\n                                                        regex=regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n                else:\n                    msg = ('Invalid \"to_replace\" type: '\n                           '{0!r}').format(type(to_replace).__name__)\n                    raise TypeError(msg)  # pragma: no cover\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['interpolate'] = \"\"\"\n        Please note that only ``method='linear'`` is supported for\n        DataFrames/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\n                  'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\n                  'polynomial', 'spline', 'piecewise_polynomial',\n                  'from_derivatives', 'pchip', 'akima'}\n\n            * 'linear': ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n              default\n            * 'time': interpolation works on daily and higher resolution\n              data to interpolate given length of interval\n            * 'index', 'values': use the actual numerical values of the index\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n              'barycentric', 'polynomial' is passed to\n              ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\n              require that you also specify an `order` (int),\n              e.g. df.interpolate(method='polynomial', order=4).\n              These use the actual numerical values of the index.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n              are all wrappers around the scipy interpolation methods of\n              similar names. These use the actual numerical values of the\n              index. For more information on their behavior, see the\n              `scipy documentation\n              <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\n              and `tutorial documentation\n              <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__\n            * 'from_derivatives' refers to BPoly.from_derivatives which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18\n\n            .. versionadded:: 0.18.1\n\n               Added support for the 'akima' method\n               Added interpolate method 'from_derivatives' which replaces\n               'piecewise_polynomial' in scipy 0.18; backwards-compatible with\n               scipy < 0.18\n\n        axis : {0, 1}, default 0\n            * 0: fill column-by-column\n            * 1: fill row-by-row\n        limit : int, default None.\n            Maximum number of consecutive NaNs to fill. Must be greater than 0.\n        limit_direction : {'forward', 'backward', 'both'}, default 'forward'\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n\n            .. versionadded:: 0.17.0\n\n        inplace : bool, default False\n            Update the NDFrame in place if possible.\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        kwargs : keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame of same shape interpolated at the NaNs\n\n        See Also\n        --------\n        reindex, replace, fillna\n\n        Examples\n        --------\n\n        Filling in NaNs\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s.interpolate()\n        0    0\n        1    1\n        2    2\n        3    3\n        dtype: float64\n\n        \"\"\"\n\n    @Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\n    def interpolate(self, method='linear', axis=0, limit=None, inplace=False,\n                    limit_direction='forward', downcast=None, **kwargs):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if self.ndim > 2:\n            raise NotImplementedError(\"Interpolate has not been implemented \"\n                                      \"on Panel and Panel 4D objects.\")\n\n        if axis == 0:\n            ax = self._info_axis_name\n            _maybe_transposed_self = self\n        elif axis == 1:\n            _maybe_transposed_self = self.T\n            ax = 1\n        else:\n            _maybe_transposed_self = self\n        ax = _maybe_transposed_self._get_axis_number(ax)\n\n        if _maybe_transposed_self.ndim == 2:\n            alt_ax = 1 - ax\n        else:\n            alt_ax = ax\n\n        if (isinstance(_maybe_transposed_self.index, MultiIndex) and\n                method != 'linear'):\n            raise ValueError(\"Only `method=linear` interpolation is supported \"\n                             \"on MultiIndexes.\")\n\n        if _maybe_transposed_self._data.get_dtype_counts().get(\n                'object') == len(_maybe_transposed_self.T):\n            raise TypeError(\"Cannot interpolate with all NaNs.\")\n\n        # create/use the index\n        if method == 'linear':\n            # prior default\n            index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n        else:\n            index = _maybe_transposed_self._get_axis(alt_ax)\n\n        if pd.isnull(index).any():\n            raise NotImplementedError(\"Interpolation with NaNs in the index \"\n                                      \"has not been implemented. Try filling \"\n                                      \"those NaNs before interpolating.\")\n        data = _maybe_transposed_self._data\n        new_data = data.interpolate(method=method, axis=ax, index=index,\n                                    values=_maybe_transposed_self, limit=limit,\n                                    limit_direction=limit_direction,\n                                    inplace=inplace, downcast=downcast,\n                                    **kwargs)\n\n        if inplace:\n            if axis == 1:\n                new_data = self._constructor(new_data).T._data\n            self._update_inplace(new_data)\n        else:\n            res = self._constructor(new_data).__finalize__(self)\n            if axis == 1:\n                res = res.T\n            return res\n\n    # ----------------------------------------------------------------------\n    # Timeseries methods Methods\n\n    def asof(self, where, subset=None):\n        \"\"\"\n        The last row without any NaN is taken (or the last row without\n        NaN considering only the subset of columns in the case of a DataFrame)\n\n        .. versionadded:: 0.19.0 For DataFrame\n\n        If there is no good value, NaN is returned for a Series\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array of dates\n        subset : string or list of strings, default None\n           if not None use these columns for NaN propagation\n\n        Notes\n        -----\n        Dates are assumed to be sorted\n        Raises if this is not the case\n\n        Returns\n        -------\n        where is scalar\n\n          - value or NaN if input is Series\n          - Series if input is DataFrame\n\n        where is Index: same shape object as input\n\n        See Also\n        --------\n        merge_asof\n\n        \"\"\"\n\n        if isinstance(where, compat.string_types):\n            from pandas import to_datetime\n            where = to_datetime(where)\n\n        if not self.index.is_monotonic:\n            raise ValueError(\"asof requires a sorted index\")\n\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError(\"subset is not valid for Series\")\n        elif self.ndim > 2:\n            raise NotImplementedError(\"asof is not implemented \"\n                                      \"for {type}\".format(type(self)))\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq).ordinal\n                start = start.ordinal\n\n            if where < start:\n                if not is_series:\n                    from pandas import Series\n                    return Series(index=self.columns, name=where)\n                return np.nan\n\n            # It's always much faster to use a *while* loop here for\n            # Series than pre-computing all the NAs. However a\n            # *while* loop is extremely expensive for DataFrame\n            # so we later pre-compute all the NAs and use the same\n            # code path whether *where* is a scalar or list.\n            # See PR: https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side='right')\n                if loc > 0:\n                    loc -= 1\n\n                values = self._values\n                while loc > 0 and isnull(values[loc]):\n                    loc -= 1\n                return values[loc]\n\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n\n        nulls = self.isnull() if is_series else self[subset].isnull().any(1)\n        locs = self.index.asof_locs(where, ~(nulls.values))\n\n        # mask the missing\n        missing = locs == -1\n        data = self.take(locs, is_copy=False)\n        data.index = where\n        data.loc[missing] = np.nan\n        return data if is_list else data.iloc[-1]\n\n    # ----------------------------------------------------------------------\n    # Action Methods\n\n    _shared_docs['isnull'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are null.\n\n        See Also\n        --------\n        notnull : boolean inverse of isnull\n        \"\"\"\n\n    @Appender(_shared_docs['isnull'])\n    def isnull(self):\n        return isnull(self).__finalize__(self)\n\n    _shared_docs['isnotnull'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are\n        not null.\n\n        See Also\n        --------\n        isnull : boolean inverse of notnull\n        \"\"\"\n\n    @Appender(_shared_docs['isnotnull'])\n    def notnull(self):\n        return notnull(self).__finalize__(self)\n\n    def clip(self, lower=None, upper=None, axis=None, *args, **kwargs):\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Parameters\n        ----------\n        lower : float or array_like, default None\n        upper : float or array_like, default None\n        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n\n        Returns\n        -------\n        clipped : Series\n\n        Examples\n        --------\n        >>> df\n          0         1\n        0  0.335232 -1.256177\n        1 -1.367855  0.746646\n        2  0.027753 -1.176076\n        3  0.230930 -0.679613\n        4  1.261967  0.570967\n        >>> df.clip(-1.0, 0.5)\n                  0         1\n        0  0.335232 -1.000000\n        1 -1.000000  0.500000\n        2  0.027753 -1.000000\n        3  0.230930 -0.679613\n        4  0.500000  0.500000\n        >>> t\n        0   -0.3\n        1   -0.2\n        2   -0.1\n        3    0.0\n        4    0.1\n        dtype: float64\n        >>> df.clip(t, t + 1, axis=0)\n                  0         1\n        0  0.335232 -0.300000\n        1 -0.200000  0.746646\n        2  0.027753 -0.100000\n        3  0.230930  0.000000\n        4  1.100000  0.570967\n        \"\"\"\n        if isinstance(self, ABCPanel):\n            raise NotImplementedError(\"clip is not supported yet for panels\")\n\n        axis = nv.validate_clip_with_axis(axis, args, kwargs)\n\n        # GH 2747 (arguments were reversed)\n        if lower is not None and upper is not None:\n            if is_scalar(lower) and is_scalar(upper):\n                lower, upper = min(lower, upper), max(lower, upper)\n\n        result = self\n        if lower is not None:\n            result = result.clip_lower(lower, axis)\n        if upper is not None:\n            result = result.clip_upper(upper, axis)\n\n        return result\n\n    def clip_upper(self, threshold, axis=None):\n        \"\"\"\n        Return copy of input with values above given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        if np.any(isnull(threshold)):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        subset = self.le(threshold, axis=axis) | isnull(self)\n        return self.where(subset, threshold, axis=axis)\n\n    def clip_lower(self, threshold, axis=None):\n        \"\"\"\n        Return copy of the input with values below given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        if np.any(isnull(threshold)):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        subset = self.ge(threshold, axis=axis) | isnull(self)\n        return self.where(subset, threshold, axis=axis)\n\n    def groupby(self, by=None, axis=0, level=None, as_index=True, sort=True,\n                group_keys=True, squeeze=False, **kwargs):\n        \"\"\"\n        Group series using mapper (dict or key function, apply given function\n        to group, return result as series) or by a series of columns.\n\n        Parameters\n        ----------\n        by : mapping function / list of functions, dict, Series, or tuple /\n            list of column names or index level names.\n            Called on each element of the object index to determine the groups.\n            If a dict or Series is passed, the Series or dict VALUES will be\n            used to determine the groups\n        axis : int, default 0\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels\n        as_index : boolean, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output\n        sort : boolean, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group.  groupby preserves the order of rows within each group.\n        group_keys : boolean, default True\n            When calling apply, add group keys to index to identify pieces\n        squeeze : boolean, default False\n            reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type\n\n        Examples\n        --------\n        DataFrame results\n\n        >>> data.groupby(func, axis=0).mean()\n        >>> data.groupby(['col1', 'col2'])['col3'].mean()\n\n        DataFrame with hierarchical index\n\n        >>> data.groupby(['col1', 'col2']).mean()\n\n        Returns\n        -------\n        GroupBy object\n\n        \"\"\"\n        from pandas.core.groupby import groupby\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n        return groupby(self, by=by, axis=axis, level=level, as_index=as_index,\n                       sort=sort, group_keys=group_keys, squeeze=squeeze,\n                       **kwargs)\n\n    def asfreq(self, freq, method=None, how=None, normalize=False,\n               fill_value=None):\n        \"\"\"\n        Convert TimeSeries to specified frequency.\n\n        Optionally provide filling method to pad/backfill missing values.\n\n        Returns the original data conformed to a new index with the specified\n        frequency. ``resample`` is more appropriate if an operation, such as\n        summarization, is necessary to represent the data at the new frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset object, or string\n        method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid\n            * 'backfill' / 'bfill': use NEXT valid observation to fill\n        how : {'start', 'end'}, default end\n            For PeriodIndex only, see PeriodIndex.asfreq\n        normalize : bool, default False\n            Whether to reset output index to midnight\n        fill_value: scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        converted : type of caller\n\n        Examples\n        --------\n\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({'s':series})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq='30S')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq='30S', fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq='30S', method='bfill')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n\n        See Also\n        --------\n        reindex\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n        \"\"\"\n        from pandas.tseries.resample import asfreq\n        return asfreq(self, freq, method=method, how=how, normalize=normalize,\n                      fill_value=fill_value)\n\n    def at_time(self, time, asof=False):\n        \"\"\"\n        Select values at particular time of day (e.g. 9:30AM).\n\n        Parameters\n        ----------\n        time : datetime.time or string\n\n        Returns\n        -------\n        values_at_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_at_time(time, asof=asof)\n            return self.take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def between_time(self, start_time, end_time, include_start=True,\n                     include_end=True):\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        Parameters\n        ----------\n        start_time : datetime.time or string\n        end_time : datetime.time or string\n        include_start : boolean, default True\n        include_end : boolean, default True\n\n        Returns\n        -------\n        values_between_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_between_time(\n                start_time, end_time, include_start=include_start,\n                include_end=include_end)\n            return self.take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def resample(self, rule, how=None, axis=0, fill_method=None, closed=None,\n                 label=None, convention='start', kind=None, loffset=None,\n                 limit=None, base=0, on=None, level=None):\n        \"\"\"\n        Convenience method for frequency conversion and resampling of time\n        series.  Object must have a datetime-like index (DatetimeIndex,\n        PeriodIndex, or TimedeltaIndex), or pass datetime-like values\n        to the on or level keyword.\n\n        Parameters\n        ----------\n        rule : string\n            the offset string or object representing target conversion\n        axis : int, optional, default 0\n        closed : {'right', 'left'}\n            Which side of bin interval is closed\n        label : {'right', 'left'}\n            Which bin edge label to label bucket with\n        convention : {'start', 'end', 's', 'e'}\n        loffset : timedelta\n            Adjust the resampled time labels\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0\n        on : string, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        level : string or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling.  Level must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        Notes\n        -----\n        To learn more about the offset strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5] #select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like)+5\n\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For DataFrame objects, the keyword ``on`` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> df = pd.DataFrame(data=9*[range(4)], columns=['a', 'b', 'c', 'd'])\n        >>> df['time'] = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> df.resample('3T', on='time').sum()\n                             a  b  c  d\n        time\n        2000-01-01 00:00:00  0  3  6  9\n        2000-01-01 00:03:00  0  3  6  9\n        2000-01-01 00:06:00  0  3  6  9\n\n        For a DataFrame with MultiIndex, the keyword ``level`` can be used to\n        specify on level the resampling needs to take place.\n\n        >>> time = pd.date_range('1/1/2000', periods=5, freq='T')\n        >>> df2 = pd.DataFrame(data=10*[range(4)],\n                               columns=['a', 'b', 'c', 'd'],\n                               index=pd.MultiIndex.from_product([time, [1, 2]])\n                               )\n        >>> df2.resample('3T', level=0).sum()\n                             a  b   c   d\n        2000-01-01 00:00:00  0  6  12  18\n        2000-01-01 00:03:00  0  4   8  12\n        \"\"\"\n        from pandas.tseries.resample import (resample,\n                                             _maybe_process_deprecations)\n        axis = self._get_axis_number(axis)\n        r = resample(self, freq=rule, label=label, closed=closed,\n                     axis=axis, kind=kind, loffset=loffset,\n                     convention=convention,\n                     base=base, key=on, level=level)\n        return _maybe_process_deprecations(r,\n                                           how=how,\n                                           fill_method=fill_method,\n                                           limit=limit)\n\n    def first(self, offset):\n        \"\"\"\n        Convenience method for subsetting initial periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.first('10D') -> First 10 days\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'first' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n        end_date = end = self.index[0] + offset\n\n        # Tick-like, e.g. 3 weeks\n        if not offset.isAnchored() and hasattr(offset, '_inc'):\n            if end_date in self.index:\n                end = self.index.searchsorted(end_date, side='left')\n                return self.iloc[:end]\n\n        return self.loc[:end]\n\n    def last(self, offset):\n        \"\"\"\n        Convenience method for subsetting final periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.last('5M') -> Last 5 months\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'last' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n\n        start_date = start = self.index[-1] - offset\n        start = self.index.searchsorted(start_date, side='right')\n        return self.iloc[start:]\n\n    def rank(self, axis=0, method='average', numeric_only=None,\n             na_option='keep', ascending=True, pct=False):\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis. Equal values are\n        assigned a rank that is the average of the ranks of those values\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            index to direct ranking\n        method : {'average', 'min', 'max', 'first', 'dense'}\n            * average: average rank of group\n            * min: lowest rank in group\n            * max: highest rank in group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups\n        numeric_only : boolean, default None\n            Include only float, int, boolean data. Valid only for DataFrame or\n            Panel objects\n        na_option : {'keep', 'top', 'bottom'}\n            * keep: leave NA values where they are\n            * top: smallest rank if ascending\n            * bottom: smallest rank if descending\n        ascending : boolean, default True\n            False for ranks by high (1) to low (N)\n        pct : boolean, default False\n            Computes percentage rank of data\n\n        Returns\n        -------\n        ranks : same type as caller\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            msg = \"rank does not make sense when ndim > 2\"\n            raise NotImplementedError(msg)\n\n        def ranker(data):\n            ranks = algos.rank(data.values, axis=axis, method=method,\n                               ascending=ascending, na_option=na_option,\n                               pct=pct)\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self)\n\n        # if numeric_only is None, and we can't get anything, we try with\n        # numeric_only=True\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)\n\n    _shared_docs['align'] = (\"\"\"\n        Align two object on their axes with the\n        specified join method for each axis Index\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None)\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        copy : boolean, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        method : str, default None\n        limit : int, default None\n        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions\n\n            .. versionadded:: 0.17.0\n\n        Returns\n        -------\n        (left, right) : (%(klass)s, type of other)\n            Aligned objects\n        \"\"\")\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        from pandas import DataFrame, Series\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, Series):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons(dict((c, self) for c in other.columns),\n                          **other._construct_axes_dict())\n                return df._align_frame(other, join=join, axis=axis,\n                                       level=level, copy=copy,\n                                       fill_value=fill_value, method=method,\n                                       limit=limit, fill_axis=fill_axis)\n            elif isinstance(other, Series):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons(dict((c, other) for c in self.columns),\n                          **self._construct_axes_dict())\n                return self._align_frame(df, join=join, axis=axis, level=level,\n                                         copy=copy, fill_value=fill_value,\n                                         method=method, limit=limit,\n                                         fill_axis=fill_axis)\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, DataFrame):\n            return self._align_frame(other, join=join, axis=axis, level=level,\n                                     copy=copy, fill_value=fill_value,\n                                     method=method, limit=limit,\n                                     fill_axis=fill_axis)\n        elif isinstance(other, Series):\n            return self._align_series(other, join=join, axis=axis, level=level,\n                                      copy=copy, fill_value=fill_value,\n                                      method=method, limit=limit,\n                                      fill_axis=fill_axis)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    def _align_frame(self, other, join='outer', axis=None, level=None,\n                     copy=True, fill_value=np.nan, method=None, limit=None,\n                     fill_axis=0):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True)\n\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(\n                    other.columns, how=join, level=level, return_indexers=True)\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(reindexers, copy=copy,\n                                           fill_value=fill_value,\n                                           allow_dups=True)\n        # other must be always DataFrame\n        right = other._reindex_with_indexers({0: [join_index, iridx],\n                                              1: [join_columns, cridx]},\n                                             copy=copy, fill_value=fill_value,\n                                             allow_dups=True)\n\n        if method is not None:\n            left = left.fillna(axis=fill_axis, method=method, limit=limit)\n            right = right.fillna(axis=fill_axis, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _align_series(self, other, join='outer', axis=None, level=None,\n                      copy=True, fill_value=None, method=None, limit=None,\n                      fill_axis=0):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError('cannot align series to a series other than '\n                                 'axis 0')\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(other.index, how=join,\n                                                         level=level,\n                                                         return_indexers=True)\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError('Must specify axis=0 or 1')\n\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notnull(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit,\n                               axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n               try_cast=False, raise_on_error=True):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        # align the cond to same shape as myself\n        cond = com._apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join='right', broadcast_axis=1)\n        else:\n            if not hasattr(cond, 'shape'):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as '\n                                 'self')\n            cond = self._constructor(cond, **self._construct_axes_dict())\n\n        # make sure we are boolean\n        fill_value = True if inplace else False\n        cond = cond.fillna(fill_value)\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not isinstance(cond, pd.DataFrame):\n            # This is a single-dimensional object.\n            if not is_bool_dtype(cond):\n                raise ValueError(msg.format(dtype=cond.dtype))\n        else:\n            for dt in cond.dtypes:\n                if not is_bool_dtype(dt):\n                    raise ValueError(msg.format(dtype=dt))\n\n        cond = cond.astype(bool, copy=False)\n        cond = -cond if inplace else cond\n\n        # try to align with other\n        try_quick = True\n        if hasattr(other, 'align'):\n\n            # align with me\n            if other.ndim <= self.ndim:\n\n                _, other = self.align(other, join='left', axis=axis,\n                                      level=level, fill_value=np.nan)\n\n                # if we are NOT aligned, raise as we cannot where index\n                if (axis is None and\n                        not all([other._get_axis(i).equals(ax)\n                                 for i, ax in enumerate(self.axes)])):\n                    raise InvalidIndexError\n\n            # slice me out of the other\n            else:\n                raise NotImplemented(\"cannot align with a higher dimensional \"\n                                     \"NDFrame\")\n\n        elif is_list_like(other):\n\n            if self.ndim == 1:\n\n                # try to set the same dtype as ourselves\n                try:\n                    new_other = np.array(other, dtype=self.dtype)\n                except ValueError:\n                    new_other = np.array(other)\n                except TypeError:\n                    new_other = other\n\n                # we can end up comparing integers and m8[ns]\n                # which is a numpy no no\n                is_i8 = needs_i8_conversion(self.dtype)\n                if is_i8:\n                    matches = False\n                else:\n                    matches = (new_other == np.array(other))\n\n                if matches is False or not matches.all():\n\n                    # coerce other to a common dtype if we can\n                    if needs_i8_conversion(self.dtype):\n                        try:\n                            other = np.array(other, dtype=self.dtype)\n                        except:\n                            other = np.array(other)\n                    else:\n                        other = np.asarray(other)\n                        other = np.asarray(other,\n                                           dtype=np.common_type(other,\n                                                                new_other))\n\n                    # we need to use the new dtype\n                    try_quick = False\n                else:\n                    other = new_other\n            else:\n\n                other = np.array(other)\n\n        if isinstance(other, np.ndarray):\n\n            if other.shape != self.shape:\n\n                if self.ndim == 1:\n\n                    icond = cond.values\n\n                    # GH 2745 / GH 4192\n                    # treat like a scalar\n                    if len(other) == 1:\n                        other = np.array(other[0])\n\n                    # GH 3235\n                    # match True cond to other\n                    elif len(cond[icond]) == len(other):\n\n                        # try to not change dtype at first (if try_quick)\n                        if try_quick:\n\n                            try:\n                                new_other = _values_from_object(self).copy()\n                                new_other[icond] = other\n                                other = new_other\n                            except:\n                                try_quick = False\n\n                        # let's create a new (if we failed at the above\n                        # or not try_quick\n                        if not try_quick:\n\n                            dtype, fill_value = _maybe_promote(other.dtype)\n                            new_other = np.empty(len(icond), dtype=dtype)\n                            new_other.fill(fill_value)\n                            _maybe_upcast_putmask(new_other, icond, other)\n                            other = new_other\n\n                    else:\n                        raise ValueError('Length of replacements must equal '\n                                         'series length')\n\n                else:\n                    raise ValueError('other must be the same shape as self '\n                                     'when an ndarray')\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, 'ndim', 0):\n            align = True\n        else:\n            align = (self._get_axis_number(axis) == 1)\n\n        block_axis = self._get_block_manager_axis(axis)\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            self._check_inplace_setting(other)\n            new_data = self._data.putmask(mask=cond, new=other, align=align,\n                                          inplace=True, axis=block_axis,\n                                          transpose=self._AXIS_REVERSED)\n            self._update_inplace(new_data)\n\n        else:\n            new_data = self._data.where(other=other, cond=cond, align=align,\n                                        raise_on_error=raise_on_error,\n                                        try_cast=try_cast, axis=block_axis,\n                                        transpose=self._AXIS_REVERSED)\n\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['where'] = (\"\"\"\n        Return an object of same shape as self and whose corresponding\n        entries are from self where cond is %(cond)s and otherwise are from\n        other.\n\n        Parameters\n        ----------\n        cond : boolean %(klass)s, array-like, or callable\n            If cond is callable, it is computed on the %(klass)s and\n            should return boolean %(klass)s or array. The callable must\n            not change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as cond.\n\n        other : scalar, %(klass)s, or callable\n            If other is callable, it is computed on the %(klass)s and\n            should return scalar or %(klass)s. The callable must not\n            change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as other.\n\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n        axis : alignment axis if needed, default None\n        level : alignment level if needed, default None\n        try_cast : boolean, default False\n            try to cast the result back to the input type (if possible),\n        raise_on_error : boolean, default True\n            Whether to raise on invalid data types (e.g. trying to where on\n            strings)\n\n        Returns\n        -------\n        wh : same type as caller\n\n        Notes\n        -----\n        The %(name)s method is an application of the if-then idiom. For each\n        element in the calling DataFrame, if ``cond`` is ``%(cond)s`` the\n        element is used; otherwise the corresponding element from the DataFrame\n        ``other`` is used.\n\n        The signature for :func:`DataFrame.where` differs from\n        :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n        ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``%(name)s`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n        >>> m = df %% 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n\n        See Also\n        --------\n        :func:`DataFrame.%(name_other)s`\n        \"\"\")\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"True\",\n                                           name='where', name_other='mask'))\n    def where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n              try_cast=False, raise_on_error=True):\n\n        other = com._apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level, try_cast,\n                           raise_on_error)\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"False\",\n                                           name='mask', name_other='where'))\n    def mask(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n             try_cast=False, raise_on_error=True):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cond = com._apply_if_callable(cond, self)\n\n        return self.where(~cond, other=other, inplace=inplace, axis=axis,\n                          level=level, try_cast=try_cast,\n                          raise_on_error=raise_on_error)\n\n    _shared_docs['shift'] = (\"\"\"\n        Shift index by desired number of periods with an optional time freq\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, optional\n            Increment to use from the tseries module or time rule (e.g. 'EOM').\n            See Notes.\n        axis : %(axes_single_arg)s\n\n        Notes\n        -----\n        If freq is specified then the index values are shifted but the data\n        is not realigned. That is, use freq if you would like to extend the\n        index when shifting and preserve the original data.\n\n        Returns\n        -------\n        shifted : %(klass)s\n    \"\"\")\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        if periods == 0:\n            return self\n\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._data.shift(periods=periods, axis=block_axis)\n        else:\n            return self.tshift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.\n\n        Returns\n        -------\n        shifted : same type as caller\n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(axis, shifted_axis)\n\n        return new_obj.__finalize__(self)\n\n    def tshift(self, periods=1, freq=None, axis=0):\n        \"\"\"\n        Shift the time index, using the index's frequency if available.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, default None\n            Increment to use from the tseries module or time rule (e.g. 'EOM')\n        axis : int or basestring\n            Corresponds to the axis that contains the Index\n\n        Notes\n        -----\n        If freq is not specified then tries to use the freq or inferred_freq\n        attributes of the index. If neither of those attributes exist, a\n        ValueError is thrown\n\n        Returns\n        -------\n        shifted : NDFrame\n        \"\"\"\n\n        index = self._get_axis(axis)\n        if freq is None:\n            freq = getattr(index, 'freq', None)\n\n        if freq is None:\n            freq = getattr(index, 'inferred_freq', None)\n\n        if freq is None:\n            msg = 'Freq was not given and was not set in the index'\n            raise ValueError(msg)\n\n        if periods == 0:\n            return self\n\n        if isinstance(freq, string_types):\n            freq = to_offset(freq)\n\n        block_axis = self._get_block_manager_axis(axis)\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq == orig_freq:\n                new_data = self._data.copy()\n                new_data.axes[block_axis] = index.shift(periods)\n            else:\n                msg = ('Given freq %s does not match PeriodIndex freq %s' %\n                       (freq.rule_code, orig_freq.rule_code))\n                raise ValueError(msg)\n        else:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def truncate(self, before=None, after=None, axis=None, copy=True):\n        \"\"\"Truncates a sorted NDFrame before and/or after some particular\n        index value. If the axis contains only datetime values, before/after\n        parameters are converted to datetime values.\n\n        Parameters\n        ----------\n        before : date\n            Truncate before index value\n        after : date\n            Truncate after index value\n        axis : the truncation axis, defaults to the stat axis\n        copy : boolean, default is True,\n            return a copy of the truncated section\n\n        Returns\n        -------\n        truncated : type of caller\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # if we have a date index, convert to dates, otherwise\n        # treat like a slice\n        if ax.is_all_dates:\n            from pandas.tseries.tools import to_datetime\n            before = to_datetime(before)\n            after = to_datetime(after)\n\n        if before is not None and after is not None:\n            if before > after:\n                raise ValueError('Truncate: %s must be after %s' %\n                                 (after, before))\n\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis),\n                    ax.truncate(before, after))\n\n        if copy:\n            result = result.copy()\n\n        return result\n\n    def tz_convert(self, tz, axis=0, level=None, copy=True):\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to convert\n        level : int, str, default None\n            If axis ia a MultiIndex, convert a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, 'tz_convert'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_convert(ax, tz)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(axis, ax)\n        return result.__finalize__(self)\n\n    @deprecate_kwarg(old_arg_name='infer_dst', new_arg_name='ambiguous',\n                     mapping={True: 'infer',\n                              False: 'raise'})\n    def tz_localize(self, tz, axis=0, level=None, copy=True,\n                    ambiguous='raise'):\n        \"\"\"\n        Localize tz-naive TimeSeries to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times\n        infer_dst : boolean, default False (DEPRECATED)\n            Attempt to infer fall dst-transition hours based on order\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous):\n            if not hasattr(ax, 'tz_localize'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_localize(ax, tz, ambiguous)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(axis, ax)\n        return result.__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Numeric Methods\n    def abs(self):\n        \"\"\"\n        Return an object with absolute value taken--only applicable to objects\n        that are all numeric.\n\n        Returns\n        -------\n        abs: type of caller\n        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\"\n        Generates descriptive statistics that summarize the central tendency,\n        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to categorical\n              objects submit the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``)\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To select numeric types submit\n              ``numpy.number``. To select categorical objects submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``)\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        summary:  Series/DataFrame of summary statistics\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If ``include='all'``\n        is provided as an option, the result will include a union of\n        attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                       3\n        unique                      2\n        top       2010-01-01 00:00:00\n        freq                        2\n        first     2000-01-01 00:00:00\n        last      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame([[1, 'a'], [2, 'b'], [3, 'c']],\n        ...                   columns=['numeric', 'object'])\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')\n                numeric object\n        count       3.0      3\n        unique      NaN      3\n        top         NaN      b\n        freq        NaN      1\n        mean        2.0    NaN\n        std         1.0    NaN\n        min         1.0    NaN\n        25%         1.5    NaN\n        50%         2.0    NaN\n        75%         2.5    NaN\n        max         3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.object])\n               object\n        count       3\n        unique      3\n        top         b\n        freq        1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])\n               object\n        count       3\n        unique      3\n        top         b\n        freq        1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.object])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        See Also\n        --------\n        DataFrame.count\n        DataFrame.max\n        DataFrame.min\n        DataFrame.mean\n        DataFrame.std\n        DataFrame.select_dtypes\n        \"\"\"\n        if self.ndim >= 3:\n            msg = \"describe is not implemented on Panel or PanelND objects.\"\n            raise NotImplementedError(msg)\n        elif self.ndim == 2 and self.columns.size == 0:\n            raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n        if percentiles is not None:\n            # explicit conversion of `percentiles` to list\n            percentiles = list(percentiles)\n\n            # get them all to be in [0, 1]\n            self._check_percentile(percentiles)\n\n            # median should always be included\n            if 0.5 not in percentiles:\n                percentiles.append(0.5)\n            percentiles = np.asarray(percentiles)\n        else:\n            percentiles = np.array([0.25, 0.5, 0.75])\n\n        # sort and check for duplicates\n        unique_pcts = np.unique(percentiles)\n        if len(unique_pcts) < len(percentiles):\n            raise ValueError(\"percentiles cannot contain duplicates\")\n        percentiles = unique_pcts\n\n        formatted_percentiles = format_percentiles(percentiles)\n\n        def describe_numeric_1d(series):\n            stat_index = (['count', 'mean', 'std', 'min'] +\n                          formatted_percentiles + ['max'])\n            d = ([series.count(), series.mean(), series.std(), series.min()] +\n                 [series.quantile(x) for x in percentiles] + [series.max()])\n            return pd.Series(d, index=stat_index, name=series.name)\n\n        def describe_categorical_1d(data):\n            names = ['count', 'unique']\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n\n                if is_datetime64_dtype(data):\n                    asint = data.dropna().values.view('i8')\n                    names += ['top', 'freq', 'first', 'last']\n                    result += [lib.Timestamp(top), freq,\n                               lib.Timestamp(asint.min()),\n                               lib.Timestamp(asint.max())]\n                else:\n                    names += ['top', 'freq']\n                    result += [top, freq]\n\n            return pd.Series(result, index=names, name=data.name)\n\n        def describe_1d(data):\n            if is_bool_dtype(data):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_timedelta64_dtype(data):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)\n\n        if self.ndim == 1:\n            return describe_1d(self)\n        elif (include is None) and (exclude is None):\n            # when some numerics are found, keep only numerics\n            data = self.select_dtypes(include=[np.number])\n            if len(data.columns) == 0:\n                data = self\n        elif include == 'all':\n            if exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self\n        else:\n            data = self.select_dtypes(include=include, exclude=exclude)\n\n        ldesc = [describe_1d(s) for _, s in data.iteritems()]\n        # set a convenient order for rows\n        names = []\n        ldesc_indexes = sorted([x.index for x in ldesc], key=len)\n        for idxnames in ldesc_indexes:\n            for name in idxnames:\n                if name not in names:\n                    names.append(name)\n\n        d = pd.concat(ldesc, join_axes=pd.Index([names]), axis=1)\n        d.columns = data.columns.copy()\n        return d\n\n    def _check_percentile(self, q):\n        \"\"\"Validate percentiles (used by describe and quantile).\"\"\"\n\n        msg = (\"percentiles should all be in the interval [0, 1]. \"\n               \"Try {0} instead.\")\n        q = np.asarray(q)\n        if q.ndim == 0:\n            if not 0 <= q <= 1:\n                raise ValueError(msg.format(q / 100.0))\n        else:\n            if not all(0 <= qs <= 1 for qs in q):\n                raise ValueError(msg.format(q / 100.0))\n        return q\n\n    _shared_docs['pct_change'] = \"\"\"\n        Percent change over given number of periods.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change\n        fill_method : str, default 'pad'\n            How to handle NAs before computing percent changes\n        limit : int, default None\n            The number of consecutive NAs to fill before stopping\n        freq : DateOffset, timedelta, or offset alias string, optional\n            Increment to use from time series API (e.g. 'M' or BDay())\n\n        Returns\n        -------\n        chg : %(klass)s\n\n        Notes\n        -----\n\n        By default, the percentage change is calculated along the stat\n        axis: 0, or ``Index``, for ``DataFrame`` and 1, or ``minor`` for\n        ``Panel``. You can change this with the ``axis`` keyword argument.\n        \"\"\"\n\n    @Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\n    def pct_change(self, periods=1, fill_method='pad', limit=None, freq=None,\n                   **kwargs):\n        # TODO: Not sure if above is correct - need someone to confirm.\n        axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n        rs = (data.div(data.shift(periods=periods, freq=freq, axis=axis,\n                                  **kwargs)) - 1)\n        if freq is None:\n            mask = isnull(_values_from_object(self))\n            np.putmask(rs.values, mask, np.nan)\n        return rs\n\n    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        grouped = self.groupby(level=level, axis=axis)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)\n\n    @classmethod\n    def _add_numeric_operations(cls):\n        \"\"\"Add the operations to the cls; evaluate the doc strings again\"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        cls.any = _make_logical_function(\n            cls, 'any', name, name2, axis_descr,\n            'Return whether any element is True over requested axis',\n            nanops.nanany)\n        cls.all = _make_logical_function(\n            cls, 'all', name, name2, axis_descr,\n            'Return whether all elements are True over requested axis',\n            nanops.nanall)\n\n        @Substitution(outname='mad',\n                      desc=\"Return the mean absolute deviation of the values \"\n                           \"for the requested axis\",\n                      name1=name, name2=name2, axis_descr=axis_descr)\n        @Appender(_num_doc)\n        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level('mad', axis=axis, level=level,\n                                          skipna=skipna)\n\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n        cls.mad = mad\n\n        cls.sem = _make_stat_function_ddof(\n            cls, 'sem', name, name2, axis_descr,\n            \"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\",\n            nanops.nansem)\n        cls.var = _make_stat_function_ddof(\n            cls, 'var', name, name2, axis_descr,\n            \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument\",\n            nanops.nanvar)\n        cls.std = _make_stat_function_ddof(\n            cls, 'std', name, name2, axis_descr,\n            \"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument\",\n            nanops.nanstd)\n\n        @Substitution(outname='compounded',\n                      desc=\"Return the compound percentage of the values for \"\n                      \"the requested axis\", name1=name, name2=name2,\n                      axis_descr=axis_descr)\n        @Appender(_num_doc)\n        def compound(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            return (1 + self).prod(axis=axis, skipna=skipna, level=level) - 1\n\n        cls.compound = compound\n\n        cls.cummin = _make_cum_function(\n            cls, 'cummin', name, name2, axis_descr, \"cumulative minimum\",\n            lambda y, axis: np.minimum.accumulate(y, axis), \"min\",\n            np.inf, np.nan)\n        cls.cumsum = _make_cum_function(\n            cls, 'cumsum', name, name2, axis_descr, \"cumulative sum\",\n            lambda y, axis: y.cumsum(axis), \"sum\", 0., np.nan)\n        cls.cumprod = _make_cum_function(\n            cls, 'cumprod', name, name2, axis_descr, \"cumulative product\",\n            lambda y, axis: y.cumprod(axis), \"prod\", 1., np.nan)\n        cls.cummax = _make_cum_function(\n            cls, 'cummax', name, name2, axis_descr, \"cumulative max\",\n            lambda y, axis: np.maximum.accumulate(y, axis), \"max\",\n            -np.inf, np.nan)\n\n        cls.sum = _make_stat_function(\n            cls, 'sum', name, name2, axis_descr,\n            'Return the sum of the values for the requested axis',\n            nanops.nansum)\n        cls.mean = _make_stat_function(\n            cls, 'mean', name, name2, axis_descr,\n            'Return the mean of the values for the requested axis',\n            nanops.nanmean)\n        cls.skew = _make_stat_function(\n            cls, 'skew', name, name2, axis_descr,\n            'Return unbiased skew over requested axis\\nNormalized by N-1',\n            nanops.nanskew)\n        cls.kurt = _make_stat_function(\n            cls, 'kurt', name, name2, axis_descr,\n            \"Return unbiased kurtosis over requested axis using Fisher's \"\n            \"definition of\\nkurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1\\n\",\n            nanops.nankurt)\n        cls.kurtosis = cls.kurt\n        cls.prod = _make_stat_function(\n            cls, 'prod', name, name2, axis_descr,\n            'Return the product of the values for the requested axis',\n            nanops.nanprod)\n        cls.product = cls.prod\n        cls.median = _make_stat_function(\n            cls, 'median', name, name2, axis_descr,\n            'Return the median of the values for the requested axis',\n            nanops.nanmedian)\n        cls.max = _make_stat_function(\n            cls, 'max', name, name2, axis_descr,\n            \"\"\"This method returns the maximum of the values in the object.\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\",\n            nanops.nanmax)\n        cls.min = _make_stat_function(\n            cls, 'min', name, name2, axis_descr,\n            \"\"\"This method returns the minimum of the values in the object.\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\",\n            nanops.nanmin)\n\n    @classmethod\n    def _add_series_only_operations(cls):\n        \"\"\"Add the series only operations to the cls; evaluate the doc\n        strings again.\n        \"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        def nanptp(values, axis=0, skipna=True):\n            nmax = nanops.nanmax(values, axis, skipna)\n            nmin = nanops.nanmin(values, axis, skipna)\n            return nmax - nmin\n\n        cls.ptp = _make_stat_function(\n            cls, 'ptp', name, name2, axis_descr,\n            \"\"\"Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\"\"\",\n            nanptp)\n\n    @classmethod\n    def _add_series_or_dataframe_operations(cls):\n        \"\"\"Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.\n        \"\"\"\n\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, freq=None, center=False,\n                    win_type=None, on=None, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window,\n                                   min_periods=min_periods, freq=freq,\n                                   center=center, win_type=win_type,\n                                   on=on, axis=axis)\n\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, freq=None, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods, freq=freq,\n                                     center=center, axis=axis)\n\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n                min_periods=0, freq=None, adjust=True, ignore_na=False,\n                axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                               alpha=alpha, min_periods=min_periods, freq=freq,\n                               adjust=adjust, ignore_na=ignore_na, axis=axis)\n\n        cls.ewm = ewm\n\n\ndef _doc_parms(cls):\n    \"\"\"Return a tuple of the doc parms.\"\"\"\n    axis_descr = \"{%s}\" % ', '.join([\"{0} ({1})\".format(a, i)\n                                     for i, a in enumerate(cls._AXIS_ORDERS)])\n    name = (cls._constructor_sliced.__name__\n            if cls._AXIS_LEN > 1 else 'scalar')\n    name2 = cls.__name__\n    return axis_descr, name, name2\n\n\n_num_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_num_ddof_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nddof : int, default 1\n    degrees of freedom\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_bool_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nbool_only : boolean, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_cnum_doc = \"\"\"\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\n\nReturns\n-------\n%(outname)s : %(name1)s\\n\n\n\nSee also\n--------\npandas.core.window.Expanding.%(accum_func_name)s : Similar functionality\n    but ignores ``NaN`` values.\n\n\"\"\"\n\n\ndef _make_stat_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_num_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, numeric_only=None,\n                  **kwargs):\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, name, axis=axis, skipna=skipna,\n                            numeric_only=numeric_only)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, ddof=1,\n                  numeric_only=None, **kwargs):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna, ddof=ddof)\n        return self._reduce(f, name, axis=axis, numeric_only=numeric_only,\n                            skipna=skipna, ddof=ddof)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_cum_function(cls, name, name1, name2, axis_descr, desc,\n                       accum_func, accum_func_name, mask_a, mask_b):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, accum_func_name=accum_func_name)\n    @Appender(\"Return {0} over requested axis.\".format(desc) +\n              _cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        y = _values_from_object(self).copy()\n\n        if (skipna and\n                issubclass(y.dtype.type, (np.datetime64, np.timedelta64))):\n            result = accum_func(y, axis)\n            mask = isnull(self)\n            np.putmask(result, mask, tslib.iNaT)\n        elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):\n            mask = isnull(self)\n            np.putmask(y, mask, mask_a)\n            result = accum_func(y, axis)\n            np.putmask(result, mask, mask_b)\n        else:\n            result = accum_func(y, axis)\n\n        d = self._construct_axes_dict()\n        d['copy'] = False\n        return self._constructor(result, **d).__finalize__(self)\n\n    return set_function_name(cum_func, name, cls)\n\n\ndef _make_logical_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_bool_doc)\n    def logical_func(self, axis=None, bool_only=None, skipna=None, level=None,\n                     **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\"Option bool_only is not \"\n                                          \"implemented with option level.\")\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, axis=axis, skipna=skipna,\n                            numeric_only=bool_only, filter_type='bool',\n                            name=name)\n\n    return set_function_name(logical_func, name, cls)\n\n\n# install the indexes\nfor _name, _indexer in indexing.get_indexers_list():\n    NDFrame._create_indexer(_name, _indexer)\n"
    },
    {
      "filename": "pandas/core/series.py",
      "content": "\"\"\"\nData structure for 1-dimensional cross-sectional and time series data\n\"\"\"\nfrom __future__ import division\n\n# pylint: disable=E1101,E1103\n# pylint: disable=W0703,W0622,W0613,W0201\n\nimport types\nimport warnings\n\nfrom numpy import nan, ndarray\nimport numpy as np\nimport numpy.ma as ma\n\nfrom pandas.types.common import (_coerce_to_dtype, is_categorical_dtype,\n                                 is_bool,\n                                 is_integer, is_integer_dtype,\n                                 is_float_dtype,\n                                 is_extension_type, is_datetimetz,\n                                 is_datetimelike,\n                                 is_datetime64tz_dtype,\n                                 is_timedelta64_dtype,\n                                 is_list_like,\n                                 is_hashable,\n                                 is_iterator,\n                                 is_dict_like,\n                                 is_scalar,\n                                 _is_unorderable_exception,\n                                 _ensure_platform_int)\nfrom pandas.types.generic import ABCSparseArray, ABCDataFrame\nfrom pandas.types.cast import (_maybe_upcast, _infer_dtype_from_scalar,\n                               _possibly_convert_platform,\n                               _possibly_cast_to_datetime, _possibly_castable)\nfrom pandas.types.missing import isnull, notnull\n\nfrom pandas.core.common import (is_bool_indexer,\n                                _default_index,\n                                _asarray_tuplesafe,\n                                _values_from_object,\n                                _try_sort,\n                                _maybe_match_name,\n                                SettingWithCopyError,\n                                _maybe_box_datetimelike,\n                                _dict_compat)\nfrom pandas.core.index import (Index, MultiIndex, InvalidIndexError,\n                               Float64Index, _ensure_index)\nfrom pandas.core.indexing import check_bool_indexer, maybe_convert_indices\nfrom pandas.core import generic, base\nfrom pandas.core.internals import SingleBlockManager\nfrom pandas.core.categorical import Categorical, CategoricalAccessor\nimport pandas.core.strings as strings\nfrom pandas.tseries.common import (maybe_to_datetimelike,\n                                   CombinedDatetimelikeProperties)\nfrom pandas.tseries.index import DatetimeIndex\nfrom pandas.tseries.tdi import TimedeltaIndex\nfrom pandas.tseries.period import PeriodIndex\nfrom pandas import compat\nfrom pandas.util.terminal import get_terminal_size\nfrom pandas.compat import zip, u, OrderedDict, StringIO\nfrom pandas.compat.numpy import function as nv\n\nimport pandas.core.ops as ops\nimport pandas.core.algorithms as algorithms\n\nimport pandas.core.common as com\nimport pandas.core.nanops as nanops\nimport pandas.formats.format as fmt\nfrom pandas.util.decorators import Appender, deprecate_kwarg, Substitution\nfrom pandas.util.validators import validate_bool_kwarg\n\nfrom pandas._libs import index as libindex, tslib as libts, lib, iNaT\nfrom pandas.core.config import get_option\n\n__all__ = ['Series']\n\n_shared_doc_kwargs = dict(\n    axes='index', klass='Series', axes_single_arg=\"{0, 'index'}\",\n    inplace=\"\"\"inplace : boolean, default False\n        If True, performs operation inplace and returns None.\"\"\",\n    unique='np.ndarray', duplicated='Series',\n    optional_by='',\n    versionadded_to_excel='\\n.. versionadded:: 0.20.0\\n')\n\n\ndef _coerce_method(converter):\n    \"\"\" install the scalar coercion methods \"\"\"\n\n    def wrapper(self):\n        if len(self) == 1:\n            return converter(self.iloc[0])\n        raise TypeError(\"cannot convert the series to \"\n                        \"{0}\".format(str(converter)))\n\n    return wrapper\n\n# ----------------------------------------------------------------------\n# Series class\n\n\nclass Series(base.IndexOpsMixin, strings.StringAccessorMixin,\n             generic.NDFrame,):\n    \"\"\"\n    One-dimensional ndarray with axis labels (including time series).\n\n    Labels need not be unique but must be a hashable type. The object\n    supports both integer- and label-based indexing and provides a host of\n    methods for performing operations involving the index. Statistical\n    methods from ndarray have been overridden to automatically exclude\n    missing data (currently represented as NaN).\n\n    Operations between Series (+, -, /, *, **) align values based on their\n    associated index values-- they need not be the same length. The result\n    index will be the sorted union of the two indexes.\n\n    Parameters\n    ----------\n    data : array-like, dict, or scalar value\n        Contains data stored in Series\n    index : array-like or Index (1d)\n        Values must be hashable and have the same length as `data`.\n        Non-unique index values are allowed. Will default to\n        RangeIndex(len(data)) if not provided. If both a dict and index\n        sequence are used, the index will override the keys found in the\n        dict.\n    dtype : numpy.dtype or None\n        If None, dtype will be inferred\n    copy : boolean, default False\n        Copy input data\n    \"\"\"\n    _metadata = ['name']\n    _accessors = frozenset(['dt', 'cat', 'str'])\n    _allow_index_ops = True\n\n    def __init__(self, data=None, index=None, dtype=None, name=None,\n                 copy=False, fastpath=False):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            if index is not None:\n                index = _ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\"initializing a Series from a \"\n                                          \"MultiIndex is not supported\")\n            elif isinstance(data, Index):\n                # need to copy to avoid aliasing issues\n                if name is None:\n                    name = data.name\n\n                data = data._to_embed(keep_tz=True)\n                copy = True\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, Series):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                if index is None:\n                    if isinstance(data, OrderedDict):\n                        index = Index(data)\n                    else:\n                        index = Index(_try_sort(data))\n                try:\n                    if isinstance(index, DatetimeIndex):\n                        if len(data):\n                            # coerce back to datetime objects for lookup\n                            data = _dict_compat(data)\n                            data = lib.fast_multiget(data,\n                                                     index.asobject.values,\n                                                     default=np.nan)\n                        else:\n                            data = np.nan\n                    # GH #12169\n                    elif isinstance(index, (PeriodIndex, TimedeltaIndex)):\n                        data = ([data.get(i, nan) for i in index]\n                                if data else np.nan)\n                    else:\n                        data = lib.fast_multiget(data, index.values,\n                                                 default=np.nan)\n                except TypeError:\n                    data = ([data.get(i, nan) for i in index]\n                            if data else np.nan)\n\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n            elif isinstance(data, Categorical):\n                # GH12574: Allow dtype=category only, otherwise error\n                if ((dtype is not None) and\n                        not is_categorical_dtype(dtype)):\n                    raise ValueError(\"cannot specify a dtype with a \"\n                                     \"Categorical unless \"\n                                     \"dtype='category'\")\n            elif (isinstance(data, types.GeneratorType) or\n                  (compat.PY3 and isinstance(data, map))):\n                data = list(data)\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(\"{0!r} type is unordered\"\n                                \"\".format(data.__class__.__name__))\n            else:\n\n                # handle sparse passed here (and force conversion)\n                if isinstance(data, ABCSparseArray):\n                    data = data.to_dense()\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = _default_index(len(data))\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, raise_on_error=False,\n                                       copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = _sanitize_array(data, index, dtype, copy,\n                                       raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n\n        self.name = name\n        self._set_axis(0, index, fastpath=True)\n\n    @classmethod\n    def from_array(cls, arr, index=None, name=None, dtype=None, copy=False,\n                   fastpath=False):\n        # return a sparse series here\n        if isinstance(arr, ABCSparseArray):\n            from pandas.sparse.series import SparseSeries\n            cls = SparseSeries\n\n        return cls(arr, index=index, name=name, dtype=dtype, copy=copy,\n                   fastpath=fastpath)\n\n    @property\n    def _constructor(self):\n        return Series\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n        return DataFrame\n\n    # types\n    @property\n    def _can_hold_na(self):\n        return self._data._can_hold_na\n\n    _index = None\n\n    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\" override generic, we want to set the _typ here \"\"\"\n\n        if not fastpath:\n            labels = _ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels,\n                              (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here becuase we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (libts.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, '_index', labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)\n\n    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, '_subtyp', 'time_series')\n        else:\n            object.__setattr__(self, '_subtyp', 'series')\n\n    def _update_inplace(self, result, **kwargs):\n        # we want to call the generic version and not the IndexOpsMixin\n        return generic.NDFrame._update_inplace(self, result, **kwargs)\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if value is not None and not is_hashable(value):\n            raise TypeError('Series.name must be a hashable type')\n        object.__setattr__(self, '_name', value)\n\n    # ndarray compatibility\n    @property\n    def dtype(self):\n        \"\"\" return the dtype object of the underlying data \"\"\"\n        return self._data.dtype\n\n    @property\n    def dtypes(self):\n        \"\"\" return the dtype object of the underlying data \"\"\"\n        return self._data.dtype\n\n    @property\n    def ftype(self):\n        \"\"\" return if the data is sparse|dense \"\"\"\n        return self._data.ftype\n\n    @property\n    def ftypes(self):\n        \"\"\" return if the data is sparse|dense \"\"\"\n        return self._data.ftype\n\n    @property\n    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like\n        depending on the dtype\n\n        Returns\n        -------\n        arr : numpy.ndarray or ndarray-like\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n\n        \"\"\"\n        return self._data.external_values()\n\n    @property\n    def _values(self):\n        \"\"\" return the internal repr of this data \"\"\"\n        return self._data.internal_values()\n\n    def get_values(self):\n        \"\"\" same as values (but handles sparseness conversions); is a view \"\"\"\n        return self._data.get_values()\n\n    @property\n    def asobject(self):\n        \"\"\"\n        return object Series which contains boxed values\n\n        *this is an internal non-public method*\n        \"\"\"\n        return self._data.asobject\n\n    # ops\n    def ravel(self, order='C'):\n        \"\"\"\n        Return the flattened underlying data as an ndarray\n\n        See also\n        --------\n        numpy.ndarray.ravel\n        \"\"\"\n        return self._values.ravel(order=order)\n\n    def compress(self, condition, *args, **kwargs):\n        \"\"\"\n        Return selected slices of an array along given axis as a Series\n\n        See also\n        --------\n        numpy.ndarray.compress\n        \"\"\"\n        nv.validate_compress(args, kwargs)\n        return self[condition]\n\n    def nonzero(self):\n        \"\"\"\n        Return the indices of the elements that are non-zero\n\n        This method is equivalent to calling `numpy.nonzero` on the\n        series data. For compatability with NumPy, the return value is\n        the same (a tuple with an array of indices for each dimension),\n        but it will always be a one-item tuple because series only have\n        one dimension.\n\n        Examples\n        --------\n        >>> s = pd.Series([0, 3, 0, 4])\n        >>> s.nonzero()\n        (array([1, 3]),)\n        >>> s.iloc[s.nonzero()[0]]\n        1    3\n        3    4\n        dtype: int64\n\n        See Also\n        --------\n        numpy.nonzero\n        \"\"\"\n        return self._values.nonzero()\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n        Applies the `put` method to its `values` attribute\n        if it has one.\n\n        See also\n        --------\n        numpy.ndarray.put\n        \"\"\"\n        self._values.put(*args, **kwargs)\n\n    def __len__(self):\n        \"\"\"\n        return the length of the Series\n        \"\"\"\n        return len(self._data)\n\n    def view(self, dtype=None):\n        return self._constructor(self._values.view(dtype),\n                                 index=self.index).__finalize__(self)\n\n    def __array__(self, result=None):\n        \"\"\"\n        the array interface, return my values\n        \"\"\"\n        return self.get_values()\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc\n        \"\"\"\n        return self._constructor(result, index=self.index,\n                                 copy=False).__finalize__(self)\n\n    def __array_prepare__(self, result, context=None):\n        \"\"\"\n        Gets called prior to a ufunc\n        \"\"\"\n\n        # nice error message for non-ufunc types\n        if context is not None and not isinstance(self._values, np.ndarray):\n            obj = context[1][0]\n            raise TypeError(\"{obj} with dtype {dtype} cannot perform \"\n                            \"the numpy op {op}\".format(\n                                obj=type(obj).__name__,\n                                dtype=getattr(obj, 'dtype', None),\n                                op=context[0].__name__))\n        return result\n\n    # complex\n    @property\n    def real(self):\n        return self.values.real\n\n    @real.setter\n    def real(self, v):\n        self.values.real = v\n\n    @property\n    def imag(self):\n        return self.values.imag\n\n    @imag.setter\n    def imag(self, v):\n        self.values.imag = v\n\n    # coercion\n    __float__ = _coerce_method(float)\n    __long__ = _coerce_method(int)\n    __int__ = _coerce_method(int)\n\n    def _unpickle_series_compat(self, state):\n        if isinstance(state, dict):\n            self._data = state['_data']\n            self.name = state['name']\n            self.index = self._data.index\n\n        elif isinstance(state, tuple):\n\n            # < 0.12 series pickle\n\n            nd_state, own_state = state\n\n            # recreate the ndarray\n            data = np.empty(nd_state[1], dtype=nd_state[2])\n            np.ndarray.__setstate__(data, nd_state)\n\n            # backwards compat\n            index, name = own_state[0], None\n            if len(own_state) > 1:\n                name = own_state[1]\n\n            # recreate\n            self._data = SingleBlockManager(data, index, fastpath=True)\n            self._index = index\n            self.name = name\n\n        else:\n            raise Exception(\"cannot unpickle legacy formats -> [%s]\" % state)\n\n    # indexers\n    @property\n    def axes(self):\n        \"\"\"Return a list of the row axis labels\"\"\"\n        return [self.index]\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        Return the i-th value or values in the Series by location\n\n        Parameters\n        ----------\n        i : int, slice, or sequence of integers\n\n        Returns\n        -------\n        value : scalar (int) or Series (slice, sequence)\n        \"\"\"\n        try:\n\n            # dispatch to the values if we need\n            values = self._values\n            if isinstance(values, np.ndarray):\n                return libindex.get_value_at(values, i)\n            else:\n                return values[i]\n        except IndexError:\n            raise\n        except:\n            if isinstance(i, slice):\n                indexer = self.index._convert_slice_indexer(i, kind='iloc')\n                return self._get_values(indexer)\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    return self.take(i, axis=axis, convert=True)\n                else:\n                    return libindex.get_value_at(self, i)\n\n    @property\n    def _is_mixed_type(self):\n        return False\n\n    def _slice(self, slobj, axis=0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj,\n                                                  kind=kind or 'getitem')\n        return self._get_values(slobj)\n\n    def __getitem__(self, key):\n        key = com._apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if we have a non-unique index here\n                    # otherwise have inline ndarray/lists\n                    if not self.index.is_unique:\n                        result = self._constructor(\n                            result, index=[key] * len(result),\n                            dtype=self.dtype).__finalize__(self)\n\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key,\n                                                             kind='getitem')\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        except Exception:\n            raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)\n\n    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._get_values(indexer)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError('Indexing a Series with DataFrame is not '\n                            'supported, use the appropriate DataFrame column')\n        else:\n            if isinstance(key, tuple):\n                try:\n                    return self._get_values_tuple(key)\n                except:\n                    if len(key) == 1:\n                        key = key[0]\n                        if isinstance(key, slice):\n                            return self._get_values(key)\n                    raise\n\n            # pragma: no cover\n            if not isinstance(key, (list, np.ndarray, Series, Index)):\n                key = list(key)\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n            else:\n                key_type = lib.infer_dtype(key)\n\n            if key_type == 'integer':\n                if self.index.is_integer() or self.index.is_floating():\n                    return self.reindex(key)\n                else:\n                    return self._get_values(key)\n            elif key_type == 'boolean':\n                return self._get_values(key)\n            else:\n                try:\n                    # handle the dup indexing case (GH 4246)\n                    if isinstance(key, (list, tuple)):\n                        return self.loc[key]\n\n                    return self.reindex(key)\n                except Exception:\n                    # [slice(0, 5, None)] will break if you convert to ndarray,\n                    # e.g. as requested by np.median\n                    # hack\n                    if isinstance(key[0], slice):\n                        return self._get_values(key)\n                    raise\n\n    def _get_values_tuple(self, key):\n        # mpl hackaround\n        if any(k is None for k in key):\n            return self._get_values(key)\n\n        if not isinstance(self.index, MultiIndex):\n            raise ValueError('Can only tuple-index with a MultiIndex')\n\n        # If key is contained, would have returned by now\n        indexer, new_index = self.index.get_loc_level(key)\n        return self._constructor(self._values[indexer],\n                                 index=new_index).__finalize__(self)\n\n    def _get_values(self, indexer):\n        try:\n            return self._constructor(self._data.get_slice(indexer),\n                                     fastpath=True).__finalize__(self)\n        except Exception:\n            return self._values[indexer]\n\n    def __setitem__(self, key, value):\n        key = com._apply_if_callable(key, self)\n\n        def setitem(key, value):\n            try:\n                self._set_with_engine(key, value)\n                return\n            except (SettingWithCopyError):\n                raise\n            except (KeyError, ValueError):\n                values = self._values\n                if (is_integer(key) and\n                        not self.index.inferred_type == 'integer'):\n\n                    values[key] = value\n                    return\n                elif key is Ellipsis:\n                    self[:] = value\n                    return\n                elif com.is_bool_indexer(key):\n                    pass\n                elif is_timedelta64_dtype(self.dtype):\n                    # reassign a null value to iNaT\n                    if isnull(value):\n                        value = iNaT\n\n                        try:\n                            self.index._engine.set_value(self._values, key,\n                                                         value)\n                            return\n                        except TypeError:\n                            pass\n\n                self.loc[key] = value\n                return\n\n            except TypeError as e:\n                if (isinstance(key, tuple) and\n                        not isinstance(self.index, MultiIndex)):\n                    raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n                # python 3 type errors should be raised\n                if _is_unorderable_exception(e):\n                    raise IndexError(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n\n            self._set_with(key, value)\n\n        # do the setitem\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n        setitem(key, value)\n        if cacher_needs_updating:\n            self._maybe_update_cacher()\n\n    def _set_with_engine(self, key, value):\n        values = self._values\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return\n\n    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._set_values(indexer, value)\n        else:\n            if isinstance(key, tuple):\n                try:\n                    self._set_values(key, value)\n                except Exception:\n                    pass\n\n            if not isinstance(key, (list, Series, np.ndarray, Series)):\n                try:\n                    key = list(key)\n                except:\n                    key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n            else:\n                key_type = lib.infer_dtype(key)\n\n            if key_type == 'integer':\n                if self.index.inferred_type == 'integer':\n                    self._set_labels(key, value)\n                else:\n                    return self._set_values(key, value)\n            elif key_type == 'boolean':\n                self._set_values(key.astype(np.bool_), value)\n            else:\n                self._set_labels(key, value)\n\n    def _set_labels(self, key, value):\n        if isinstance(key, Index):\n            key = key.values\n        else:\n            key = _asarray_tuplesafe(key)\n        indexer = self.index.get_indexer(key)\n        mask = indexer == -1\n        if mask.any():\n            raise ValueError('%s not contained in the index' % str(key[mask]))\n        self._set_values(indexer, value)\n\n    def _set_values(self, key, value):\n        if isinstance(key, Series):\n            key = key._values\n        self._data = self._data.setitem(indexer=key, value=value)\n        self._maybe_update_cacher()\n\n    @deprecate_kwarg(old_arg_name='reps', new_arg_name='repeats')\n    def repeat(self, repeats, *args, **kwargs):\n        \"\"\"\n        Repeat elements of an Series. Refer to `numpy.ndarray.repeat`\n        for more information about the `repeats` argument.\n\n        See also\n        --------\n        numpy.ndarray.repeat\n        \"\"\"\n        nv.validate_repeat(args, kwargs)\n        new_index = self.index.repeat(repeats)\n        new_values = self._values.repeat(repeats)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    def reshape(self, *args, **kwargs):\n        \"\"\"\n        DEPRECATED: calling this method will raise an error in a\n        future release. Please call ``.values.reshape(...)`` instead.\n\n        return an ndarray with the values shape\n        if the specified shape matches exactly the current shape, then\n        return self (for compat)\n\n        See also\n        --------\n        numpy.ndarray.reshape\n        \"\"\"\n        warnings.warn(\"reshape is deprecated and will raise \"\n                      \"in a subsequent release. Please use \"\n                      \".values.reshape(...) instead\", FutureWarning,\n                      stacklevel=2)\n\n        if len(args) == 1 and hasattr(args[0], '__iter__'):\n            shape = args[0]\n        else:\n            shape = args\n\n        if tuple(shape) == self.shape:\n            # XXX ignoring the \"order\" keyword.\n            nv.validate_reshape(tuple(), kwargs)\n            return self\n\n        return self._values.reshape(shape, **kwargs)\n\n    def get_value(self, label, takeable=False):\n        \"\"\"\n        Quickly retrieve single value at passed index label\n\n        Parameters\n        ----------\n        index : label\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        if takeable is True:\n            return _maybe_box_datetimelike(self._values[label])\n        return self.index.get_value(self._values, label)\n\n    def set_value(self, label, value, takeable=False):\n        \"\"\"\n        Quickly set single value at passed label. If label is not contained, a\n        new object is created with the label placed at the end of the result\n        index\n\n        Parameters\n        ----------\n        label : object\n            Partial indexing with MultiIndex not allowed\n        value : object\n            Scalar value\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        series : Series\n            If label is contained, will be reference to calling Series,\n            otherwise a new object\n        \"\"\"\n        try:\n            if takeable:\n                self._values[label] = value\n            else:\n                self.index._engine.set_value(self._values, label, value)\n            return self\n        except KeyError:\n\n            # set using a non-recursive method\n            self.loc[label] = value\n            return self\n\n    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Analogous to the :meth:`pandas.DataFrame.reset_index` function, see\n        docstring there.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns\n        name : object, default None\n            The name of the column corresponding to the Series values\n        inplace : boolean, default False\n            Modify the Series in place (do not create a new object)\n\n        Returns\n        ----------\n        resetted : DataFrame, or Series if drop == True\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if drop:\n            new_index = _default_index(len(self))\n            if level is not None and isinstance(self.index, MultiIndex):\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < len(self.index.levels):\n                    new_index = self.index.droplevel(level)\n\n            if inplace:\n                self.index = new_index\n                # set name if it was passed, otherwise, keep the previous name\n                self.name = name or self.name\n            else:\n                return self._constructor(self._values.copy(),\n                                         index=new_index).__finalize__(self)\n        elif inplace:\n            raise TypeError('Cannot reset_index inplace on a Series '\n                            'to create a DataFrame')\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(\"\"))\n        width, height = get_terminal_size()\n        max_rows = (height if get_option(\"display.max_rows\") == 0 else\n                    get_option(\"display.max_rows\"))\n\n        self.to_string(buf=buf, name=self.name, dtype=self.dtype,\n                       max_rows=max_rows)\n        result = buf.getvalue()\n\n        return result\n\n    def to_string(self, buf=None, na_rep='NaN', float_format=None, header=True,\n                  index=True, length=False, dtype=False, name=False,\n                  max_rows=None):\n        \"\"\"\n        Render a string representation of the Series\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            buffer to write to\n        na_rep : string, optional\n            string representation of NAN to use, default 'NaN'\n        float_format : one-parameter function, optional\n            formatter function to apply to columns' elements if they are floats\n            default None\n        header: boolean, default True\n            Add the Series header (index name)\n        index : bool, optional\n            Add index (row) labels, default True\n        length : boolean, default False\n            Add the Series length\n        dtype : boolean, default False\n            Add the Series dtype\n        name : boolean, default False\n            Add the Series name if not None\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n\n        Returns\n        -------\n        formatted : string (if not buffer passed)\n        \"\"\"\n\n        the_repr = self._get_repr(float_format=float_format, na_rep=na_rep,\n                                  header=header, index=index, length=length,\n                                  dtype=dtype, name=name, max_rows=max_rows)\n\n        # catch contract violations\n        if not isinstance(the_repr, compat.text_type):\n            raise AssertionError(\"result must be of type unicode, type\"\n                                 \" of result is {0!r}\"\n                                 \"\".format(the_repr.__class__.__name__))\n\n        if buf is None:\n            return the_repr\n        else:\n            try:\n                buf.write(the_repr)\n            except AttributeError:\n                with open(buf, 'w') as f:\n                    f.write(the_repr)\n\n    def _get_repr(self, name=False, header=True, index=True, length=True,\n                  dtype=True, na_rep='NaN', float_format=None, max_rows=None):\n        \"\"\"\n\n        Internal function, should always return unicode string\n        \"\"\"\n        formatter = fmt.SeriesFormatter(self, name=name, length=length,\n                                        header=header, index=index,\n                                        dtype=dtype, na_rep=na_rep,\n                                        float_format=float_format,\n                                        max_rows=max_rows)\n        result = formatter.to_string()\n\n        # TODO: following check prob. not neces.\n        if not isinstance(result, compat.text_type):\n            raise AssertionError(\"result must be of type unicode, type\"\n                                 \" of result is {0!r}\"\n                                 \"\".format(result.__class__.__name__))\n        return result\n\n    def __iter__(self):\n        \"\"\" provide iteration over the values of the Series\n        box values if necessary \"\"\"\n        if is_datetimelike(self):\n            return (_maybe_box_datetimelike(x) for x in self._values)\n        else:\n            return iter(self._values)\n\n    def iteritems(self):\n        \"\"\"\n        Lazily iterate over (index, value) tuples\n        \"\"\"\n        return zip(iter(self.index), iter(self))\n\n    if compat.PY3:  # pragma: no cover\n        items = iteritems\n\n    # ----------------------------------------------------------------------\n    # Misc public methods\n\n    def keys(self):\n        \"\"\"Alias for index\"\"\"\n        return self.index\n\n    def tolist(self):\n        \"\"\" Convert Series to a nested list \"\"\"\n        return list(self.asobject)\n\n    def to_dict(self):\n        \"\"\"\n        Convert Series to {label -> value} dict\n\n        Returns\n        -------\n        value_dict : dict\n        \"\"\"\n        return dict(compat.iteritems(self))\n\n    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        data_frame : DataFrame\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df\n\n    def to_sparse(self, kind='block', fill_value=None):\n        \"\"\"\n        Convert Series to SparseSeries\n\n        Parameters\n        ----------\n        kind : {'block', 'integer'}\n        fill_value : float, defaults to NaN (missing)\n\n        Returns\n        -------\n        sp : SparseSeries\n        \"\"\"\n        from pandas.core.sparse import SparseSeries\n        return SparseSeries(self, kind=kind,\n                            fill_value=fill_value).__finalize__(self)\n\n    def _set_name(self, name, inplace=False):\n        \"\"\"\n        Set the Series name.\n\n        Parameters\n        ----------\n        name : str\n        inplace : bool\n            whether to modify `self` directly or return a copy\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        ser = self if inplace else self.copy()\n        ser.name = name\n        return ser\n\n    # ----------------------------------------------------------------------\n    # Statistics, overridden ndarray methods\n\n    # TODO: integrate bottleneck\n\n    def count(self, level=None):\n        \"\"\"\n        Return number of non-NA/null observations in the Series\n\n        Parameters\n        ----------\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a smaller Series\n\n        Returns\n        -------\n        nobs : int or Series (if level specified)\n        \"\"\"\n        from pandas.core.index import _get_na_value\n\n        if level is None:\n            return notnull(_values_from_object(self)).sum()\n\n        if isinstance(level, compat.string_types):\n            level = self.index._get_level_number(level)\n\n        lev = self.index.levels[level]\n        lab = np.array(self.index.labels[level], subok=False, copy=True)\n\n        mask = lab == -1\n        if mask.any():\n            lab[mask] = cnt = len(lev)\n            lev = lev.insert(cnt, _get_na_value(lev.dtype.type))\n\n        obs = lab[notnull(self.values)]\n        out = np.bincount(obs, minlength=len(lev) or None)\n        return self._constructor(out, index=lev,\n                                 dtype='int64').__finalize__(self)\n\n    def mode(self):\n        \"\"\"Return the mode(s) of the dataset.\n\n        Empty if nothing occurs at least 2 times. Always returns Series even\n        if only one value is returned.\n\n        Returns\n        -------\n        modes : Series (sorted)\n        \"\"\"\n        # TODO: Add option for bins like value_counts()\n        return algorithms.mode(self)\n\n    @Appender(base._shared_docs['unique'] % _shared_doc_kwargs)\n    def unique(self):\n        result = super(Series, self).unique()\n        if is_datetime64tz_dtype(self.dtype):\n            # to return array of Timestamp with tz\n            # ToDo: it must return DatetimeArray with tz in pandas 2.0\n            return result.asobject.values\n        return result\n\n    @deprecate_kwarg('take_last', 'keep', mapping={True: 'last',\n                                                   False: 'first'})\n    @Appender(base._shared_docs['drop_duplicates'] % _shared_doc_kwargs)\n    def drop_duplicates(self, keep='first', inplace=False):\n        return super(Series, self).drop_duplicates(keep=keep, inplace=inplace)\n\n    @deprecate_kwarg('take_last', 'keep', mapping={True: 'last',\n                                                   False: 'first'})\n    @Appender(base._shared_docs['duplicated'] % _shared_doc_kwargs)\n    def duplicated(self, keep='first'):\n        return super(Series, self).duplicated(keep=keep)\n\n    def idxmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Index of first occurrence of minimum of values.\n\n        Parameters\n        ----------\n        skipna : boolean, default True\n            Exclude NA/null values\n\n        Returns\n        -------\n        idxmin : Index of minimum of values\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        DataFrame.idxmin\n        numpy.ndarray.argmin\n        \"\"\"\n        skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmin(_values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n\n    def idxmax(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Index of first occurrence of maximum of values.\n\n        Parameters\n        ----------\n        skipna : boolean, default True\n            Exclude NA/null values\n\n        Returns\n        -------\n        idxmax : Index of maximum of values\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        DataFrame.idxmax\n        numpy.ndarray.argmax\n        \"\"\"\n        skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmax(_values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n\n    # ndarray compat\n    argmin = idxmin\n    argmax = idxmax\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round each value in a Series to the given number of decimals.\n\n        Parameters\n        ----------\n        decimals : int\n            Number of decimal places to round to (default: 0).\n            If decimals is negative, it specifies the number of\n            positions to the left of the decimal point.\n\n        Returns\n        -------\n        Series object\n\n        See Also\n        --------\n        numpy.around\n        DataFrame.round\n\n        \"\"\"\n        nv.validate_round(args, kwargs)\n        result = _values_from_object(self).round(decimals)\n        result = self._constructor(result, index=self.index).__finalize__(self)\n\n        return result\n\n    def quantile(self, q=0.5, interpolation='linear'):\n        \"\"\"\n        Return value at the given quantile, a la numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n                * linear: `i + (j - i) * fraction`, where `fraction` is the\n                  fractional part of the index surrounded by `i` and `j`.\n                * lower: `i`.\n                * higher: `j`.\n                * nearest: `i` or `j` whichever is nearest.\n                * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantile : float or Series\n            if ``q`` is an array, a Series will be returned where the\n            index is ``q`` and the values are the quantiles.\n\n        Examples\n        --------\n        >>> s = Series([1, 2, 3, 4])\n        >>> s.quantile(.5)\n        2.5\n        >>> s.quantile([.25, .5, .75])\n        0.25    1.75\n        0.50    2.50\n        0.75    3.25\n        dtype: float64\n\n        \"\"\"\n\n        self._check_percentile(q)\n\n        result = self._data.quantile(qs=q, interpolation=interpolation)\n\n        if is_list_like(q):\n            return self._constructor(result,\n                                     index=Float64Index(q),\n                                     name=self.name)\n        else:\n            # scalar\n            return result\n\n    def corr(self, other, method='pearson', min_periods=None):\n        \"\"\"\n        Compute correlation with `other` Series, excluding missing values\n\n        Parameters\n        ----------\n        other : Series\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result\n\n\n        Returns\n        -------\n        correlation : float\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        return nanops.nancorr(this.values, other.values, method=method,\n                              min_periods=min_periods)\n\n    def cov(self, other, min_periods=None):\n        \"\"\"\n        Compute covariance with Series, excluding missing values\n\n        Parameters\n        ----------\n        other : Series\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result\n\n        Returns\n        -------\n        covariance : float\n\n        Normalized by N-1 (unbiased estimator).\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        return nanops.nancov(this.values, other.values,\n                             min_periods=min_periods)\n\n    def diff(self, periods=1):\n        \"\"\"\n        1st discrete difference of object\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming difference\n\n        Returns\n        -------\n        diffed : Series\n        \"\"\"\n        result = algorithms.diff(_values_from_object(self), periods)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def autocorr(self, lag=1):\n        \"\"\"\n        Lag-N autocorrelation\n\n        Parameters\n        ----------\n        lag : int, default 1\n            Number of lags to apply before performing autocorrelation.\n\n        Returns\n        -------\n        autocorr : float\n        \"\"\"\n        return self.corr(self.shift(lag))\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or inner-product with Series\n        objects\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n\n        Returns\n        -------\n        dot_product : scalar or Series\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        if isinstance(other, (Series, DataFrame)):\n            common = self.index.union(other.index)\n            if (len(common) > len(self.index) or\n                    len(common) > len(other.index)):\n                raise ValueError('matrices are not aligned')\n\n            left = self.reindex(index=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[0] != rvals.shape[0]:\n                raise Exception('Dot product shape mismatch, %s vs %s' %\n                                (lvals.shape, rvals.shape))\n\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals),\n                                     index=other.columns).__finalize__(self)\n        elif isinstance(other, Series):\n            return np.dot(lvals, rvals)\n        elif isinstance(rvals, np.ndarray):\n            return np.dot(lvals, rvals)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    @Substitution(klass='Series')\n    @Appender(base._shared_docs['searchsorted'])\n    @deprecate_kwarg(old_arg_name='v', new_arg_name='value')\n    def searchsorted(self, value, side='left', sorter=None):\n        if sorter is not None:\n            sorter = _ensure_platform_int(sorter)\n        return self._values.searchsorted(Series(value)._values,\n                                         side=side, sorter=sorter)\n\n    # -------------------------------------------------------------------\n    # Combination\n\n    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n\n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n\n            .. versionadded: 0.19.0\n\n        verify_integrity : boolean, default False\n            If True, raise Exception on creating index with duplicates\n\n        Returns\n        -------\n        appended : Series\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3,4,5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `ignore_index` set to True:\n\n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `verify_integrity` set to True:\n\n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n\n\n        \"\"\"\n        from pandas.tools.concat import concat\n\n        if isinstance(to_append, (list, tuple)):\n            to_concat = [self] + to_append\n        else:\n            to_concat = [self, to_append]\n        return concat(to_concat, ignore_index=ignore_index,\n                      verify_integrity=verify_integrity)\n\n    def _binop(self, other, func, level=None, fill_value=None):\n        \"\"\"\n        Perform generic binary operation with optional fill value\n\n        Parameters\n        ----------\n        other : Series\n        func : binary operator\n        fill_value : float or object\n            Value to substitute for NA/null values. If both Series are NA in a\n            location, the result will be NA regardless of the passed fill value\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n\n        Returns\n        -------\n        combined : Series\n        \"\"\"\n        if not isinstance(other, Series):\n            raise AssertionError('Other operand must be Series')\n\n        new_index = self.index\n        this = self\n\n        if not self.index.equals(other.index):\n            this, other = self.align(other, level=level, join='outer',\n                                     copy=False)\n            new_index = this.index\n\n        this_vals = this.values\n        other_vals = other.values\n\n        if fill_value is not None:\n            this_mask = isnull(this_vals)\n            other_mask = isnull(other_vals)\n            this_vals = this_vals.copy()\n            other_vals = other_vals.copy()\n\n            # one but not both\n            mask = this_mask ^ other_mask\n            this_vals[this_mask & mask] = fill_value\n            other_vals[other_mask & mask] = fill_value\n\n        with np.errstate(all='ignore'):\n            result = func(this_vals, other_vals)\n        name = _maybe_match_name(self, other)\n        result = self._constructor(result, index=new_index, name=name)\n        result = result.__finalize__(self)\n        if name is None:\n            # When name is None, __finalize__ overwrites current name\n            result.name = None\n        return result\n\n    def combine(self, other, func, fill_value=nan):\n        \"\"\"\n        Perform elementwise binary operation on two Series using given function\n        with optional fill value when an index is missing from one Series or\n        the other\n\n        Parameters\n        ----------\n        other : Series or scalar value\n        func : function\n        fill_value : scalar value\n\n        Returns\n        -------\n        result : Series\n        \"\"\"\n        if isinstance(other, Series):\n            new_index = self.index.union(other.index)\n            new_name = _maybe_match_name(self, other)\n            new_values = np.empty(len(new_index), dtype=self.dtype)\n            for i, idx in enumerate(new_index):\n                lv = self.get(idx, fill_value)\n                rv = other.get(idx, fill_value)\n                with np.errstate(all='ignore'):\n                    new_values[i] = func(lv, rv)\n        else:\n            new_index = self.index\n            with np.errstate(all='ignore'):\n                new_values = func(self._values, other)\n            new_name = self.name\n        return self._constructor(new_values, index=new_index, name=new_name)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine Series values, choosing the calling Series's values\n        first. Result index will be the union of the two indexes\n\n        Parameters\n        ----------\n        other : Series\n\n        Returns\n        -------\n        y : Series\n        \"\"\"\n        new_index = self.index.union(other.index)\n        this = self.reindex(new_index, copy=False)\n        other = other.reindex(new_index, copy=False)\n        # TODO: do we need name?\n        name = _maybe_match_name(self, other)  # noqa\n        rs_vals = com._where_compat(isnull(this), other._values, this._values)\n        return self._constructor(rs_vals, index=new_index).__finalize__(self)\n\n    def update(self, other):\n        \"\"\"\n        Modify Series in place using non-NA values from passed\n        Series. Aligns on index\n\n        Parameters\n        ----------\n        other : Series\n        \"\"\"\n        other = other.reindex_like(self)\n        mask = notnull(other)\n\n        self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n        self._maybe_update_cacher()\n\n    # ----------------------------------------------------------------------\n    # Reindexing, sorting\n\n    @Appender(generic._shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n\n        # GH 5856/5853\n        if inplace and self._is_cached:\n            raise ValueError(\"This Series is a view of some other array, to \"\n                             \"sort in-place you must create a copy\")\n\n        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind='quicksort')\n\n        arr = self._values\n        sortedIdx = np.empty(len(self), dtype=np.int32)\n\n        bad = isnull(arr)\n\n        good = ~bad\n        idx = _default_index(len(self))\n\n        argsorted = _try_kind_sort(arr[good])\n\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError('Length of ascending (%d) must be 1 '\n                                 'for Series' % (len(ascending)))\n            ascending = ascending[0]\n\n        if not is_bool(ascending):\n            raise ValueError('ascending must be boolean')\n\n        if not ascending:\n            argsorted = argsorted[::-1]\n\n        if na_position == 'last':\n            n = good.sum()\n            sortedIdx[:n] = idx[good][argsorted]\n            sortedIdx[n:] = idx[bad]\n        elif na_position == 'first':\n            n = bad.sum()\n            sortedIdx[n:] = idx[good][argsorted]\n            sortedIdx[:n] = idx[bad]\n        else:\n            raise ValueError('invalid na_position: {!r}'.format(na_position))\n\n        result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    @Appender(generic._shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        index = self.index\n        if level is not None:\n            new_index, indexer = index.sortlevel(level, ascending=ascending,\n                                                 sort_remaining=sort_remaining)\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(index.labels, orders=ascending)\n        else:\n            from pandas.core.sorting import nargsort\n            indexer = nargsort(index, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        indexer = _ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    def sort(self, axis=0, ascending=True, kind='quicksort',\n             na_position='last', inplace=True):\n        \"\"\"\n        DEPRECATED: use :meth:`Series.sort_values(inplace=True)` for INPLACE\n        sorting\n\n        Sort values and index labels by value. This is an inplace sort by\n        default.  Series.order is the equivalent but returns a new Series.\n\n        Parameters\n        ----------\n        axis : int (can only be zero)\n        ascending : boolean, default True\n            Sort ascending. Passing False sorts descending\n        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See np.sort for more\n            information. 'mergesort' is the only stable algorithm\n        na_position : {'first', 'last'} (optional, default='last')\n            'first' puts NaNs at the beginning\n            'last' puts NaNs at the end\n        inplace : boolean, default True\n            Do operation in place.\n\n        See Also\n        --------\n        Series.sort_values\n        \"\"\"\n        warnings.warn(\"sort is deprecated, use sort_values(inplace=True) for \"\n                      \"INPLACE sorting\", FutureWarning, stacklevel=2)\n\n        return self.sort_values(ascending=ascending, kind=kind,\n                                na_position=na_position, inplace=inplace)\n\n    def order(self, na_last=None, ascending=True, kind='quicksort',\n              na_position='last', inplace=False):\n        \"\"\"\n        DEPRECATED: use :meth:`Series.sort_values`\n\n        Sorts Series object, by value, maintaining index-value link.\n        This will return a new Series by default. Series.sort is the equivalent\n        but as an inplace method.\n\n        Parameters\n        ----------\n        na_last : boolean (optional, default=True)--DEPRECATED; use na_position\n            Put NaN's at beginning or end\n        ascending : boolean, default True\n            Sort ascending. Passing False sorts descending\n        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See np.sort for more\n            information. 'mergesort' is the only stable algorithm\n        na_position : {'first', 'last'} (optional, default='last')\n            'first' puts NaNs at the beginning\n            'last' puts NaNs at the end\n        inplace : boolean, default False\n            Do operation in place.\n\n        Returns\n        -------\n        y : Series\n\n        See Also\n        --------\n        Series.sort_values\n        \"\"\"\n        warnings.warn(\"order is deprecated, use sort_values(...)\",\n                      FutureWarning, stacklevel=2)\n\n        return self.sort_values(ascending=ascending, kind=kind,\n                                na_position=na_position, inplace=inplace)\n\n    def argsort(self, axis=0, kind='quicksort', order=None):\n        \"\"\"\n        Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,\n        and places the result in the same locations as the non-NA values\n\n        Parameters\n        ----------\n        axis : int (can only be zero)\n        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See np.sort for more\n            information. 'mergesort' is the only stable algorithm\n        order : ignored\n\n        Returns\n        -------\n        argsorted : Series, with -1 indicated where nan values are present\n\n        See also\n        --------\n        numpy.ndarray.argsort\n        \"\"\"\n        values = self._values\n        mask = isnull(values)\n\n        if mask.any():\n            result = Series(-1, index=self.index, name=self.name,\n                            dtype='int64')\n            notmask = ~mask\n            result[notmask] = np.argsort(values[notmask], kind=kind)\n            return self._constructor(result,\n                                     index=self.index).__finalize__(self)\n        else:\n            return self._constructor(\n                np.argsort(values, kind=kind), index=self.index,\n                dtype='int64').__finalize__(self)\n\n    @deprecate_kwarg('take_last', 'keep', mapping={True: 'last',\n                                                   False: 'first'})\n    def nlargest(self, n=5, keep='first'):\n        \"\"\"Return the largest `n` elements.\n\n        Parameters\n        ----------\n        n : int\n            Return this many descending sorted values\n        keep : {'first', 'last', False}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n        take_last : deprecated\n\n        Returns\n        -------\n        top_n : Series\n            The n largest values in the Series, in sorted order\n\n        Notes\n        -----\n        Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n        relative to the size of the ``Series`` object.\n\n        See Also\n        --------\n        Series.nsmallest\n\n        Examples\n        --------\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> s = pd.Series(np.random.randn(10**6))\n        >>> s.nlargest(10)  # only sorts up to the N requested\n        219921    4.644710\n        82124     4.608745\n        421689    4.564644\n        425277    4.447014\n        718691    4.414137\n        43154     4.403520\n        283187    4.313922\n        595519    4.273635\n        503969    4.250236\n        121637    4.240952\n        dtype: float64\n        \"\"\"\n        return algorithms.select_n_series(self, n=n, keep=keep,\n                                          method='nlargest')\n\n    @deprecate_kwarg('take_last', 'keep', mapping={True: 'last',\n                                                   False: 'first'})\n    def nsmallest(self, n=5, keep='first'):\n        \"\"\"Return the smallest `n` elements.\n\n        Parameters\n        ----------\n        n : int\n            Return this many ascending sorted values\n        keep : {'first', 'last', False}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n        take_last : deprecated\n\n        Returns\n        -------\n        bottom_n : Series\n            The n smallest values in the Series, in sorted order\n\n        Notes\n        -----\n        Faster than ``.sort_values().head(n)`` for small `n` relative to\n        the size of the ``Series`` object.\n\n        See Also\n        --------\n        Series.nlargest\n\n        Examples\n        --------\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> s = pd.Series(np.random.randn(10**6))\n        >>> s.nsmallest(10)  # only sorts up to the N requested\n        288532   -4.954580\n        732345   -4.835960\n        64803    -4.812550\n        446457   -4.609998\n        501225   -4.483945\n        669476   -4.472935\n        973615   -4.401699\n        621279   -4.355126\n        773916   -4.347355\n        359919   -4.331927\n        dtype: float64\n        \"\"\"\n        return algorithms.select_n_series(self, n=n, keep=keep,\n                                          method='nsmallest')\n\n    def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n        \"\"\"\n        DEPRECATED: use :meth:`Series.sort_index`\n\n        Sort Series with MultiIndex by chosen level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order)\n\n        Parameters\n        ----------\n        level : int or level name, default None\n        ascending : bool, default True\n\n        Returns\n        -------\n        sorted : Series\n\n        See Also\n        --------\n        Series.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn(\"sortlevel is deprecated, use sort_index(level=...)\",\n                      FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, ascending=ascending,\n                               sort_remaining=sort_remaining)\n\n    def swaplevel(self, i=-2, j=-1, copy=True):\n        \"\"\"\n        Swap levels i and j in a MultiIndex\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : Series\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        new_index = self.index.swaplevel(i, j)\n        return self._constructor(self._values, index=new_index,\n                                 copy=copy).__finalize__(self)\n\n    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange index levels using input order. May not drop or duplicate\n        levels\n\n        Parameters\n        ----------\n        order : list of int representing new level order.\n               (reference level by number or key)\n        axis : where to reorder levels\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        if not isinstance(self.index, MultiIndex):  # pragma: no cover\n            raise Exception('Can only reorder levels on a hierarchical axis.')\n\n        result = self.copy()\n        result.index = result.index.reorder_levels(order)\n        return result\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default last level\n            Level(s) to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded: 0.18.0\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4],\n        ...     index=pd.MultiIndex.from_product([['one', 'two'], ['a', 'b']]))\n        >>> s\n        one  a    1\n             b    2\n        two  a    3\n             b    4\n        dtype: int64\n\n        >>> s.unstack(level=-1)\n             a  b\n        one  1  2\n        two  3  4\n\n        >>> s.unstack(level=0)\n           one  two\n        a    1    3\n        b    2    4\n\n        Returns\n        -------\n        unstacked : DataFrame\n        \"\"\"\n        from pandas.core.reshape import unstack\n        return unstack(self, level, fill_value)\n\n    # ----------------------------------------------------------------------\n    # function application\n\n    def map(self, arg, na_action=None):\n        \"\"\"\n        Map values of Series using input correspondence (which can be\n        a dict, Series, or function)\n\n        Parameters\n        ----------\n        arg : function, dict, or Series\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        y : Series\n            same index as caller\n\n        Examples\n        --------\n\n        Map inputs to outputs (both of type `Series`)\n\n        >>> x = pd.Series([1,2,3], index=['one', 'two', 'three'])\n        >>> x\n        one      1\n        two      2\n        three    3\n        dtype: int64\n\n        >>> y = pd.Series(['foo', 'bar', 'baz'], index=[1,2,3])\n        >>> y\n        1    foo\n        2    bar\n        3    baz\n\n        >>> x.map(y)\n        one   foo\n        two   bar\n        three baz\n\n        Mapping a dictionary keys on the index labels works similar as\n        with a `Series`:\n\n        >>> z = {1: 'A', 2: 'B', 3: 'C'}\n\n        >>> x.map(z)\n        one   A\n        two   B\n        three C\n\n        Use na_action to control whether NA values are affected by the mapping\n        function.\n\n        >>> s = pd.Series([1, 2, 3, np.nan])\n\n        >>> s2 = s.map(lambda x: 'this is a string {}'.format(x),\n                       na_action=None)\n        0    this is a string 1.0\n        1    this is a string 2.0\n        2    this is a string 3.0\n        3    this is a string nan\n        dtype: object\n\n        >>> s3 = s.map(lambda x: 'this is a string {}'.format(x),\n                       na_action='ignore')\n        0    this is a string 1.0\n        1    this is a string 2.0\n        2    this is a string 3.0\n        3                     NaN\n        dtype: object\n\n        See Also\n        --------\n        Series.apply: For applying more complex functions on a Series\n        DataFrame.apply: Apply a function row-/column-wise\n        DataFrame.applymap: Apply a function elementwise on a whole DataFrame\n        \"\"\"\n\n        if is_extension_type(self.dtype):\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.asobject\n\n            if na_action == 'ignore':\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f,\n                                              isnull(values).view(np.uint8))\n            else:\n                map_f = lib.map_infer\n\n        if isinstance(arg, (dict, Series)):\n            if isinstance(arg, dict):\n                arg = self._constructor(arg, index=arg.keys())\n\n            indexer = arg.index.get_indexer(values)\n            new_values = algorithms.take_1d(arg._values, indexer)\n        else:\n            new_values = map_f(values, arg)\n\n        return self._constructor(new_values,\n                                 index=self.index).__finalize__(self)\n\n    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series. Can be ufunc (a NumPy function\n        that applies to the entire Series) or a Python function that only works\n        on single values\n\n        Parameters\n        ----------\n        func : function\n        convert_dtype : boolean, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object\n        args : tuple\n            Positional arguments to pass to function in addition to the value\n        Additional keyword arguments will be passed as keywords to the function\n\n        Returns\n        -------\n        y : Series or DataFrame if func returns a Series\n\n        See also\n        --------\n        Series.map: For element-wise operations\n\n        Examples\n        --------\n\n        Create a series with typical summer temperatures for each city.\n\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> series = pd.Series([20, 21, 12], index=['London',\n        ... 'New York','Helsinki'])\n        >>> series\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x**2\n        >>> series.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> series.apply(lambda x: x**2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x-custom_value\n\n        >>> series.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x+=kwargs[month]\n        ...         return x\n\n        >>> series.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> series.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n\n\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype,\n                                     index=self.index).__finalize__(self)\n\n        if kwds or args and not isinstance(func, np.ufunc):\n            f = lambda x: func(x, *args, **kwds)\n        else:\n            f = func\n\n        with np.errstate(all='ignore'):\n            if isinstance(f, np.ufunc):\n                return f(self)\n\n            if is_extension_type(self.dtype):\n                mapped = self._values.map(f)\n            else:\n                values = self.asobject\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n        if len(mapped) and isinstance(mapped[0], Series):\n            from pandas.core.frame import DataFrame\n            return DataFrame(mapped.tolist(), index=self.index)\n        else:\n            return self._constructor(mapped,\n                                     index=self.index).__finalize__(self)\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n                filter_type=None, **kwds):\n        \"\"\"\n        perform a reduction operation\n\n        if we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object\n\n        \"\"\"\n        delegate = self._values\n        if isinstance(delegate, np.ndarray):\n            # Validate that 'axis' is consistent with Series's single axis.\n            self._get_axis_number(axis)\n            if numeric_only:\n                raise NotImplementedError('Series.{0} does not implement '\n                                          'numeric_only.'.format(name))\n            with np.errstate(all='ignore'):\n                return op(delegate, skipna=skipna, **kwds)\n\n        return delegate._reduce(op=op, name=name, axis=axis, skipna=skipna,\n                                numeric_only=numeric_only,\n                                filter_type=filter_type, **kwds)\n\n    def _reindex_indexer(self, new_index, indexer, copy):\n        if indexer is None:\n            if copy:\n                return self.copy()\n            return self\n\n        # be subclass-friendly\n        new_values = algorithms.take_1d(self.get_values(), indexer)\n        return self._constructor(new_values, index=new_index)\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\" check if we do need a multi reindex; this is for compat with\n        higher dims\n        \"\"\"\n        return False\n\n    @Appender(generic._shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        return super(Series, self).align(other, join=join, axis=axis,\n                                         level=level, copy=copy,\n                                         fill_value=fill_value, method=method,\n                                         limit=limit, fill_axis=fill_axis,\n                                         broadcast_axis=broadcast_axis)\n\n    @Appender(generic._shared_docs['rename'] % _shared_doc_kwargs)\n    def rename(self, index=None, **kwargs):\n        kwargs['inplace'] = validate_bool_kwarg(kwargs.get('inplace', False),\n                                                'inplace')\n\n        non_mapping = is_scalar(index) or (is_list_like(index) and\n                                           not is_dict_like(index))\n        if non_mapping:\n            return self._set_name(index, inplace=kwargs.get('inplace'))\n        return super(Series, self).rename(index=index, **kwargs)\n\n    @Appender(generic._shared_docs['reindex'] % _shared_doc_kwargs)\n    def reindex(self, index=None, **kwargs):\n        return super(Series, self).reindex(index=index, **kwargs)\n\n    @Appender(generic._shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None, **kwargs):\n        return super(Series, self).fillna(value=value, method=method,\n                                          axis=axis, inplace=inplace,\n                                          limit=limit, downcast=downcast,\n                                          **kwargs)\n\n    @Appender(generic._shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(Series, self).shift(periods=periods, freq=freq, axis=axis)\n\n    def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\" for compatibility with higher dims \"\"\"\n        if axis != 0:\n            raise ValueError(\"cannot reindex series on non-zero axis!\")\n        return self.reindex(index=labels, **kwargs)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"Memory usage of the Series\n\n        Parameters\n        ----------\n        index : bool\n            Specifies whether to include memory usage of Series index\n        deep : bool\n            Introspect the data deeply, interrogate\n            `object` dtypes for system-level memory consumption\n\n        Returns\n        -------\n        scalar bytes of memory consumed\n\n        Notes\n        -----\n        Memory usage does not include memory consumed by elements that\n        are not components of the array if deep=False\n\n        See Also\n        --------\n        numpy.ndarray.nbytes\n        \"\"\"\n        v = super(Series, self).memory_usage(deep=deep)\n        if index:\n            v += self.index.memory_usage(deep=deep)\n        return v\n\n    def take(self, indices, axis=0, convert=True, is_copy=False, **kwargs):\n        \"\"\"\n        return Series corresponding to requested indices\n\n        Parameters\n        ----------\n        indices : list / array of ints\n        convert : translate negative to positive indices (default)\n\n        Returns\n        -------\n        taken : Series\n\n        See also\n        --------\n        numpy.ndarray.take\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n\n        # check/convert indicies here\n        if convert:\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n\n        indices = _ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n        new_values = self._values.take(indices)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    def isin(self, values):\n        \"\"\"\n        Return a boolean :class:`~pandas.Series` showing whether each element\n        in the :class:`~pandas.Series` is exactly contained in the passed\n        sequence of ``values``.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            ``list`` of one element.\n\n            .. versionadded:: 0.18.1\n\n            Support for values as a set\n\n        Returns\n        -------\n        isin : Series (bool dtype)\n\n        Raises\n        ------\n        TypeError\n          * If ``values`` is a string\n\n        See Also\n        --------\n        pandas.DataFrame.isin\n\n        Examples\n        --------\n\n        >>> s = pd.Series(list('abc'))\n        >>> s.isin(['a', 'c', 'e'])\n        0     True\n        1    False\n        2     True\n        dtype: bool\n\n        Passing a single string as ``s.isin('a')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['a'])\n        0     True\n        1    False\n        2    False\n        dtype: bool\n\n        \"\"\"\n        result = algorithms.isin(_values_from_object(self), values)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def between(self, left, right, inclusive=True):\n        \"\"\"\n        Return boolean Series equivalent to left <= series <= right. NA values\n        will be treated as False\n\n        Parameters\n        ----------\n        left : scalar\n            Left boundary\n        right : scalar\n            Right boundary\n\n        Returns\n        -------\n        is_between : Series\n        \"\"\"\n        if inclusive:\n            lmask = self >= left\n            rmask = self <= right\n        else:\n            lmask = self > left\n            rmask = self < right\n\n        return lmask & rmask\n\n    @classmethod\n    def from_csv(cls, path, sep=',', parse_dates=True, header=None,\n                 index_col=0, encoding=None, infer_datetime_format=False):\n        \"\"\"\n        Read CSV file (DISCOURAGED, please use :func:`pandas.read_csv`\n        instead).\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a time Series.\n\n        This method only differs from :func:`pandas.read_csv` in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `header` is ``None`` instead of ``0`` (the first row is not used as\n          the column names)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        With :func:`pandas.read_csv`, the option ``squeeze=True`` can be used\n        to return a Series like ``from_csv``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        sep : string, default ','\n            Field delimiter\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        header : int, default None\n            Row to use as header (skip prior rows)\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        encoding : string, optional\n            a string representing the encoding to use if the contents are\n            non-ascii, for python versions prior to 3\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : Series\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        df = DataFrame.from_csv(path, header=header, index_col=index_col,\n                                sep=sep, parse_dates=parse_dates,\n                                encoding=encoding,\n                                infer_datetime_format=infer_datetime_format)\n        result = df.iloc[:, 0]\n        if header is None:\n            result.index.name = result.name = None\n\n        return result\n\n    def to_csv(self, path=None, index=True, sep=\",\", na_rep='',\n               float_format=None, header=False, index_label=None,\n               mode='w', encoding=None, date_format=None, decimal='.'):\n        \"\"\"\n        Write Series to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        header : boolean, default False\n            Write out series name\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.\n        mode : Python write mode, default 'w'\n        sep : character, default \",\"\n            Field delimiter for the output file.\n        encoding : string, optional\n            a string representing the encoding to use if the contents are\n            non-ascii, for python versions prior to 3\n        date_format: string, default None\n            Format string for datetime objects.\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        df = DataFrame(self)\n        # result is only a string if no path provided, otherwise None\n        result = df.to_csv(path, index=index, sep=sep, na_rep=na_rep,\n                           float_format=float_format, header=header,\n                           index_label=index_label, mode=mode,\n                           encoding=encoding, date_format=date_format,\n                           decimal=decimal)\n        if path is None:\n            return result\n\n    @Appender(generic._shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,\n                 merge_cells=True, encoding=None, inf_rep='inf', verbose=True):\n        df = self.to_frame()\n        df.to_excel(excel_writer=excel_writer, sheet_name=sheet_name,\n                    na_rep=na_rep, float_format=float_format, columns=columns,\n                    header=header, index=index, index_label=index_label,\n                    startrow=startrow, startcol=startcol, engine=engine,\n                    merge_cells=merge_cells, encoding=encoding,\n                    inf_rep=inf_rep, verbose=verbose)\n\n    def dropna(self, axis=0, inplace=False, **kwargs):\n        \"\"\"\n        Return Series without null values\n\n        Returns\n        -------\n        valid : Series\n        inplace : boolean, default False\n            Do operation in place.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        kwargs.pop('how', None)\n        if kwargs:\n            raise TypeError('dropna() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        axis = self._get_axis_number(axis or 0)\n\n        if self._can_hold_na:\n            result = remove_na(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        else:\n            if inplace:\n                # do nothing\n                pass\n            else:\n                return self.copy()\n\n    valid = lambda self, inplace=False, **kwargs: self.dropna(inplace=inplace,\n                                                              **kwargs)\n\n    def first_valid_index(self):\n        \"\"\"\n        Return label for first non-NA/null value\n        \"\"\"\n        if len(self) == 0:\n            return None\n\n        mask = isnull(self._values)\n        i = mask.argmin()\n        if mask[i]:\n            return None\n        else:\n            return self.index[i]\n\n    def last_valid_index(self):\n        \"\"\"\n        Return label for last non-NA/null value\n        \"\"\"\n        if len(self) == 0:\n            return None\n\n        mask = isnull(self._values[::-1])\n        i = mask.argmin()\n        if mask[i]:\n            return None\n        else:\n            return self.index[len(self) - i - 1]\n\n    # ----------------------------------------------------------------------\n    # Time series-oriented methods\n\n    def to_timestamp(self, freq=None, how='start', copy=True):\n        \"\"\"\n        Cast to datetimeindex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n\n        Returns\n        -------\n        ts : Series with DatetimeIndex\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n\n        new_index = self.index.to_timestamp(freq=freq, how=how)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    def to_period(self, freq=None, copy=True):\n        \"\"\"\n        Convert Series from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n\n        Returns\n        -------\n        ts : Series with PeriodIndex\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n\n        new_index = self.index.to_period(freq=freq)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    # -------------------------------------------------------------------------\n    # Datetimelike delegation methods\n\n    def _make_dt_accessor(self):\n        try:\n            return maybe_to_datetimelike(self)\n        except Exception:\n            raise AttributeError(\"Can only use .dt accessor with datetimelike \"\n                                 \"values\")\n\n    dt = base.AccessorProperty(CombinedDatetimelikeProperties,\n                               _make_dt_accessor)\n\n    # -------------------------------------------------------------------------\n    # Categorical methods\n\n    def _make_cat_accessor(self):\n        if not is_categorical_dtype(self.dtype):\n            raise AttributeError(\"Can only use .cat accessor with a \"\n                                 \"'category' dtype\")\n        return CategoricalAccessor(self.values, self.index)\n\n    cat = base.AccessorProperty(CategoricalAccessor, _make_cat_accessor)\n\n    def _dir_deletions(self):\n        return self._accessors\n\n    def _dir_additions(self):\n        rv = set()\n        for accessor in self._accessors:\n            try:\n                getattr(self, accessor)\n                rv.add(accessor)\n            except AttributeError:\n                pass\n        return rv\n\n\nSeries._setup_axes(['index'], info_axis=0, stat_axis=0, aliases={'rows': 0})\nSeries._add_numeric_operations()\nSeries._add_series_only_operations()\nSeries._add_series_or_dataframe_operations()\n_INDEX_TYPES = ndarray, Index, list, tuple\n\n# -----------------------------------------------------------------------------\n# Supplementary functions\n\n\ndef remove_na(series):\n    \"\"\"\n    Return series containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    return series[notnull(_values_from_object(series))]\n\n\ndef _sanitize_index(data, index, copy=False):\n    \"\"\" sanitize an index type to return an ndarray of the underlying, pass\n    thru a non-Index\n    \"\"\"\n\n    if index is None:\n        return data\n\n    if len(data) != len(index):\n        raise ValueError('Length of values does not match length of ' 'index')\n\n    if isinstance(data, PeriodIndex):\n        data = data.asobject\n    elif isinstance(data, DatetimeIndex):\n        data = data._to_embed(keep_tz=True)\n        if copy:\n            data = data.copy()\n    elif isinstance(data, np.ndarray):\n\n        # coerce datetimelike types\n        if data.dtype.kind in ['M', 'm']:\n            data = _sanitize_array(data, index, copy=copy)\n\n    return data\n\n\ndef _sanitize_array(data, index, dtype=None, copy=False,\n                    raise_cast_failure=False):\n    \"\"\" sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified\n    \"\"\"\n\n    if dtype is not None:\n        dtype = _coerce_to_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = _maybe_upcast(data, copy=True)\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    def _try_cast(arr, take_fast_path):\n\n        # perf shortcut as this is the most common case\n        if take_fast_path:\n            if _possibly_castable(arr) and not copy and dtype is None:\n                return arr\n\n        try:\n            subarr = _possibly_cast_to_datetime(arr, dtype)\n            if not is_extension_type(subarr):\n                subarr = np.array(subarr, dtype=dtype, copy=copy)\n        except (ValueError, TypeError):\n            if is_categorical_dtype(dtype):\n                subarr = Categorical(arr)\n            elif dtype is not None and raise_cast_failure:\n                raise\n            else:\n                subarr = np.array(arr, dtype=object, copy=copy)\n        return subarr\n\n    # GH #846\n    if isinstance(data, (np.ndarray, Index, Series)):\n\n        if dtype is not None:\n            subarr = np.array(data, copy=False)\n\n            # possibility of nan -> garbage\n            if is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n                if not isnull(data).any():\n                    subarr = _try_cast(data, True)\n                elif copy:\n                    subarr = data.copy()\n            else:\n                subarr = _try_cast(data, True)\n        elif isinstance(data, Index):\n            # don't coerce Index types\n            # e.g. indexes can have different conversions (so don't fast path\n            # them)\n            # GH 6140\n            subarr = _sanitize_index(data, index, copy=True)\n        else:\n            subarr = _try_cast(data, True)\n\n        if copy:\n            subarr = data.copy()\n\n    elif isinstance(data, Categorical):\n        subarr = data\n\n        if copy:\n            subarr = data.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            try:\n                subarr = _try_cast(data, False)\n            except Exception:\n                if raise_cast_failure:  # pragma: no cover\n                    raise\n                subarr = np.array(data, dtype=object, copy=copy)\n                subarr = lib.maybe_convert_objects(subarr)\n\n        else:\n            subarr = _possibly_convert_platform(data)\n\n        subarr = _possibly_cast_to_datetime(subarr, dtype)\n\n    else:\n        subarr = _try_cast(data, False)\n\n    def create_from_value(value, index, dtype):\n        # return a new empty value suitable for the dtype\n\n        if is_datetimetz(dtype):\n            subarr = DatetimeIndex([value] * len(index), dtype=dtype)\n        elif is_categorical_dtype(dtype):\n            subarr = Categorical([value] * len(index))\n        else:\n            if not isinstance(dtype, (np.dtype, type(np.dtype))):\n                dtype = dtype.dtype\n            subarr = np.empty(len(index), dtype=dtype)\n            subarr.fill(value)\n\n        return subarr\n\n    # scalar like, GH\n    if getattr(subarr, 'ndim', 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = _infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = _possibly_cast_to_datetime(value, dtype)\n\n            subarr = create_from_value(value, index, dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = create_from_value(subarr[0], index,\n                                           subarr.dtype)\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception('Data must be 1-dimensional')\n        else:\n            subarr = _asarray_tuplesafe(data, dtype=dtype)\n\n    # This is to prevent mixed-type Series getting all casted to\n    # NumPy string type, e.g. NaN --> '-1#IND'.\n    if issubclass(subarr.dtype.type, compat.string_types):\n        subarr = np.array(data, dtype=object, copy=copy)\n\n    return subarr\n\n\n# ----------------------------------------------------------------------\n# Add plotting methods to Series\n\nimport pandas.tools.plotting as _gfx  # noqa\n\nSeries.plot = base.AccessorProperty(_gfx.SeriesPlotMethods,\n                                    _gfx.SeriesPlotMethods)\nSeries.hist = _gfx.hist_series\n\n# Add arithmetic!\nops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs)\nops.add_special_arithmetic_methods(Series, **ops.series_special_funcs)\n"
    }
  ]
}