{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "28547",
  "issue_description": "# Deprecate using `xlrd` engine in favor of openpyxl\n\nxlrd is unmaintained and the previous maintainer has asked us to move towards openpyxl. xlrd works now, but *might* have some issues when Python 3.9 or later gets released and changes some elements of the XML parser, as default usage right now throws a `PendingDeprecationWarning`\r\n\r\nConsidering that I think we need to deprecate using `xlrd` in favor of `openpyxl`. We might not necessarily need to remove the former and it does offer some functionality the latter doesn't (namely reading `.xls` files) but should at the very least start moving towards the latter",
  "issue_comments": [
    {
      "id": 533458629,
      "user": "arpit1997",
      "body": "@WillAyd Should we start with adding `openpyxl` as an engine in [pandas.read_excel](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html#pandas-read-excel).\r\n\r\nHappy to contribute a PR for it."
    },
    {
      "id": 533541123,
      "user": "WillAyd",
      "body": "It is already available just need to make it default over time, so want to raise a FutureWarning when the user doesn’t explicitly provide an engine that it will change to openpxyl in a future releaae"
    },
    {
      "id": 533799622,
      "user": "jorisvandenbossche",
      "body": "Would it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases? \r\n\r\nReason I am asking is because if for 99% of the use cases both give exactly the same, raising a warning for all those users feels a bit annoying."
    },
    {
      "id": 534080823,
      "user": "153957",
      "body": "The docstrings already require some updating as they currently indicate `'xlrd'` is the only option for 'engine'."
    },
    {
      "id": 534259137,
      "user": "153957",
      "body": "> Would it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases?\r\n\r\nIt would require installing a different optional package, so a version with deprecation messages/future warnings would be useful."
    },
    {
      "id": 534260801,
      "user": "WillAyd",
      "body": "> Would it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases?\r\n> \r\n> Reason I am asking is because if for 99% of the use cases both give exactly the same, raising a warning for all those users feels a bit annoying.\r\n\r\nJust to add - xlrd is AFAIK the only library that can read the legacy .xls format. From experience even \".xlsx\" formats aren't as standardized as you'd hope. The openpyxl reader is pretty new so I guess will see through proper deprecation cycle what differences, if any, arise"
    },
    {
      "id": 534291424,
      "user": "jorisvandenbossche",
      "body": "> Just to add - xlrd is AFAIK the only library that can read the legacy .xls format.\r\n\r\nAnd to be clear, for those the default would stay xlrd, and this would not be deprecated, right?\r\n\r\nSo the question about \"switching the default\" was only for xlsx files."
    },
    {
      "id": 534293277,
      "user": "WillAyd",
      "body": "Up for debate but for that I think we want to push people towards reading .xlsx files. xlrd is not maintained any more and might break with Python 3.9, so would want to get ahead of that as much as possible"
    },
    {
      "id": 539949953,
      "user": "Hiyorimi",
      "body": "So what is the decision ? \r\n\r\nDump xlrd disregarding .xls support and to replace it with openpyxl ?"
    },
    {
      "id": 540038109,
      "user": "WillAyd",
      "body": "We need to deprecate using xlrd by default. I think it's fine to do for all extensions, including .xls - interesting in a PR?"
    },
    {
      "id": 542967301,
      "user": "GallowayJ",
      "body": "Hi @WillAyd I'm interested in working on this. Is the decision to just raise a FutureWarning for all extensions when no engine is explicitly provided by the user?"
    },
    {
      "id": 542973327,
      "user": "WillAyd",
      "body": "@GallowayJ great - that would be much appreciated! Yes I think let's start with that and see how it looks"
    },
    {
      "id": 542976126,
      "user": "GallowayJ",
      "body": "Okay thanks! I'll get cracking!"
    },
    {
      "id": 543286394,
      "user": "Kathakali123",
      "body": "@GallowayJ  hey , are you working on it ?"
    },
    {
      "id": 543294566,
      "user": "GallowayJ",
      "body": "@Kathakali123 Yeah"
    },
    {
      "id": 650567061,
      "user": "roberthdevries",
      "body": "take"
    },
    {
      "id": 662394387,
      "user": "simonjayhawkins",
      "body": "@TomAugspurger @jreback FYI removing from 1.1 milestone. linked PR isn't milestoned."
    },
    {
      "id": 729865175,
      "user": "fiendish",
      "body": "Given that people using pandas are often not in control of the data they receive, would it be possible for pandas-dev to patch xlrd's broken use of getiterator?"
    },
    {
      "id": 729901821,
      "user": "jreback",
      "body": "we don’t maintain xlrd at all\r\n\r\ni suppose a monkey patch makes it work from the community would be ok"
    },
    {
      "id": 729987499,
      "user": "fiendish",
      "body": "> we don’t maintain xlrd at all\r\n\r\nYeah, nobody does :( , so even though this bug is absolutely trivial to fix there's nowhere to submit the patch -> https://github.com/python-excel/xlrd/compare/python-excel:f8371f0...fiendish:e995456\r\n\r\n(TBH, ElementTree.iter was introduced in python 2.7, which is the oldest version that xlrd claims to support anyway. I'm not even sure why it bothers looking at getiterator at all)"
    },
    {
      "id": 730022144,
      "user": "jreback",
      "body": "you can try to monkey patch - if it works would be willing to consider a patch"
    },
    {
      "id": 735437456,
      "user": "cjw296",
      "body": "A year down the line, it's time to see this change made. It's disappointing to see it dropped from milestones when it needlessly results in pain for people trying to read modern Excel files.\r\n\r\nFor `.xlsx`, `xlrd` absolutely positively should not be used, and I say that as the main maintainer of `xlrd` over the last decade plus.\r\n\r\nWhat proportion of users are still reading data from `.xls` files (as opposed to `.xlsx`)? While I feel for these users, they either need to stick on an old version of Python or Pandas, *or* someone needs to step up and properly maintain `xlrd`. Nevermind the dangers of using the `.xls` pseudo-standard that have caused some [quite high profile problems](https://www.bbc.co.uk/news/technology-54423988) of late.\r\n"
    },
    {
      "id": 735441693,
      "user": "fiendish",
      "body": "> What proportion of users are still reading data from .xls files (as opposed to .xlsx)?\r\n\r\nSadly some of us don't get to pick and choose what data files we work with. That's definitely not your problem to solve, but it is mine so I have to try to defend keeping xlrd alive here. Even the latest version of Excel for mac calls xls a \"Common Format\".\r\n\r\n>  While I feel for these users, they either need to stick on an old version of Python or Pandas, or someone needs to step up and properly maintain xlrd.\r\n\r\nIf you want to transfer ownership of the repository to me so that I can make a two line change via s/getiterator/iter (or the more nostalgic patch I linked earlier), I'm happy to make that change and no other changes just to stop the only available option for reading xls files from getting forced into the bin for a terrible reason (I mean the deprecation of getiterator, not your choice to stop maintaining). It seems reasonable to do on the premise that ElementTree.iter has existed since Python 2.7.\r\n\r\nBut I don't need anyone to \"step up and properly maintain\" it. I just need it to not stop being an option entirely. If push comes to shove, if someone (including me) can't monkey patch around xlrd's forced obsolescence inside pandas, I can at least keep using my own patched version of xlrd as long as Pandas doesn't work towards dropping xlrd entirely."
    },
    {
      "id": 739570508,
      "user": "fzumstein",
      "body": "@fiendish you shouldn't need to use a patched version of xlrd when working with the legacy `xls` format as the issue you fixed on your branch was only an issue when using xlrd with the new `xlsx` format."
    },
    {
      "id": 739573499,
      "user": "fiendish",
      "body": "@fzumstein In general you may be right. Our case is a little weird. Some of our files actually come into the code without any file extension at all (don't ask, lol, I'm working on addressing that), so it was nice to have one engine that did both by peeking the contents instead of going by file extension. Relying on being able to tell the difference works only until it doesn't. Maybe a pythonic solution is to try one and then fall back to the other...or maybe pandas should rip off the peek code to choose the engine that way, or maybe I should (ugh. isn't the point of libraries so that I don't have to learn how to peek inside the file to tell what it is?)...but xlrd has worked great and fixing it to be 3.9 compliant was _so_ easy. If xlrd hadn't stopped working in 3.9 would this issue have even been opened at all in the first place?"
    },
    {
      "id": 743113883,
      "user": "cjw296",
      "body": "@WillAyd - so, a couple of private comments and @fiendish's comment above have made me realise that xlrd still needs to stick around, BUT, only for `.xls` files:\r\n\r\nhttps://groups.google.com/g/python-excel/c/IRa8IWq_4zk/m/Af8-hrRnAgAJ\r\n\r\nWhat I'd suggest is making `xlrd` the default engine for `.xls` files and `openpyxl` the default for `.xlsx` files.\r\nIf it helps, I've abstracted out the code in `xlrd` that figures out what the type of a spreadsheet file is here:\r\n\r\nhttps://xlrd.readthedocs.io/en/latest/api.html#xlrd.inspect_format"
    },
    {
      "id": 743124725,
      "user": "jorisvandenbossche",
      "body": "@cjw296 Thanks a lot for that!\r\n\r\n> What I'd suggest is making `xlrd` the default engine for `.xls` files and `openpyxl` the default for `.xlsx` files.\r\n\r\nI think that's exactly what we ended up doing in https://github.com/pandas-dev/pandas/pull/35029. Explicitly specifying `engine=\"xlrd\"` for anything else than xls files is deprecated, and when reading xlsx files we now default to openpyxl (if it is installed, at least. If only xlrd is installed, we also raise a deprecation warning that people should install openpyxl instead)\r\n"
    },
    {
      "id": 743125066,
      "user": "jorisvandenbossche",
      "body": "And additional note, this change will shortly be released in pandas 1.2.0 (the RC is out since yesterday)"
    },
    {
      "id": 743129783,
      "user": "cjw296",
      "body": "@jorisvandenbossche - great! Just to be super explicit: if you attempt to open anything other than a `.xls` file with xlrd 2.0.0+, you'll get an [exception](https://github.com/python-excel/xlrd/blob/58ccbb12e2c0f9803905c90b29bd67adbd58a356/xlrd/__init__.py#L170)."
    },
    {
      "id": 743137752,
      "user": "jorisvandenbossche",
      "body": "Ah, good to know. I think that's certainly fine (it's faster than doing a deprecation first .. but I think many pandas users will already upgrade pandas, without necessarily upgrading xlrd, so our deprecation will still be useful). \r\nBut maybe we should then update pandas to check for this (case of xlrd >= 2.0), to raise a more informative error message (otherwise if you have eg only xlrd installed, from the xlrd error message it might seem that *pandas* does not support a certain format, while it's only xlrd that doesn't support it)"
    }
  ],
  "text_context": "# Deprecate using `xlrd` engine in favor of openpyxl\n\nxlrd is unmaintained and the previous maintainer has asked us to move towards openpyxl. xlrd works now, but *might* have some issues when Python 3.9 or later gets released and changes some elements of the XML parser, as default usage right now throws a `PendingDeprecationWarning`\r\n\r\nConsidering that I think we need to deprecate using `xlrd` in favor of `openpyxl`. We might not necessarily need to remove the former and it does offer some functionality the latter doesn't (namely reading `.xls` files) but should at the very least start moving towards the latter\n\n@WillAyd Should we start with adding `openpyxl` as an engine in [pandas.read_excel](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html#pandas-read-excel).\r\n\r\nHappy to contribute a PR for it.\n\nIt is already available just need to make it default over time, so want to raise a FutureWarning when the user doesn’t explicitly provide an engine that it will change to openpxyl in a future releaae\n\nWould it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases? \r\n\r\nReason I am asking is because if for 99% of the use cases both give exactly the same, raising a warning for all those users feels a bit annoying.\n\nThe docstrings already require some updating as they currently indicate `'xlrd'` is the only option for 'engine'.\n\n> Would it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases?\r\n\r\nIt would require installing a different optional package, so a version with deprecation messages/future warnings would be useful.\n\n> Would it be an option to simply switch the default, without first raising a warning? Or do the two engines give different results in quite some cases?\r\n> \r\n> Reason I am asking is because if for 99% of the use cases both give exactly the same, raising a warning for all those users feels a bit annoying.\r\n\r\nJust to add - xlrd is AFAIK the only library that can read the legacy .xls format. From experience even \".xlsx\" formats aren't as standardized as you'd hope. The openpyxl reader is pretty new so I guess will see through proper deprecation cycle what differences, if any, arise\n\n> Just to add - xlrd is AFAIK the only library that can read the legacy .xls format.\r\n\r\nAnd to be clear, for those the default would stay xlrd, and this would not be deprecated, right?\r\n\r\nSo the question about \"switching the default\" was only for xlsx files.\n\nUp for debate but for that I think we want to push people towards reading .xlsx files. xlrd is not maintained any more and might break with Python 3.9, so would want to get ahead of that as much as possible\n\nSo what is the decision ? \r\n\r\nDump xlrd disregarding .xls support and to replace it with openpyxl ?\n\nWe need to deprecate using xlrd by default. I think it's fine to do for all extensions, including .xls - interesting in a PR?\n\nHi @WillAyd I'm interested in working on this. Is the decision to just raise a FutureWarning for all extensions when no engine is explicitly provided by the user?\n\n@GallowayJ great - that would be much appreciated! Yes I think let's start with that and see how it looks\n\nOkay thanks! I'll get cracking!\n\n@GallowayJ  hey , are you working on it ?\n\n@Kathakali123 Yeah\n\ntake\n\n@TomAugspurger @jreback FYI removing from 1.1 milestone. linked PR isn't milestoned.\n\nGiven that people using pandas are often not in control of the data they receive, would it be possible for pandas-dev to patch xlrd's broken use of getiterator?\n\nwe don’t maintain xlrd at all\r\n\r\ni suppose a monkey patch makes it work from the community would be ok\n\n> we don’t maintain xlrd at all\r\n\r\nYeah, nobody does :( , so even though this bug is absolutely trivial to fix there's nowhere to submit the patch -> https://github.com/python-excel/xlrd/compare/python-excel:f8371f0...fiendish:e995456\r\n\r\n(TBH, ElementTree.iter was introduced in python 2.7, which is the oldest version that xlrd claims to support anyway. I'm not even sure why it bothers looking at getiterator at all)\n\nyou can try to monkey patch - if it works would be willing to consider a patch\n\nA year down the line, it's time to see this change made. It's disappointing to see it dropped from milestones when it needlessly results in pain for people trying to read modern Excel files.\r\n\r\nFor `.xlsx`, `xlrd` absolutely positively should not be used, and I say that as the main maintainer of `xlrd` over the last decade plus.\r\n\r\nWhat proportion of users are still reading data from `.xls` files (as opposed to `.xlsx`)? While I feel for these users, they either need to stick on an old version of Python or Pandas, *or* someone needs to step up and properly maintain `xlrd`. Nevermind the dangers of using the `.xls` pseudo-standard that have caused some [quite high profile problems](https://www.bbc.co.uk/news/technology-54423988) of late.\r\n\n\n> What proportion of users are still reading data from .xls files (as opposed to .xlsx)?\r\n\r\nSadly some of us don't get to pick and choose what data files we work with. That's definitely not your problem to solve, but it is mine so I have to try to defend keeping xlrd alive here. Even the latest version of Excel for mac calls xls a \"Common Format\".\r\n\r\n>  While I feel for these users, they either need to stick on an old version of Python or Pandas, or someone needs to step up and properly maintain xlrd.\r\n\r\nIf you want to transfer ownership of the repository to me so that I can make a two line change via s/getiterator/iter (or the more nostalgic patch I linked earlier), I'm happy to make that change and no other changes just to stop the only available option for reading xls files from getting forced into the bin for a terrible reason (I mean the deprecation of getiterator, not your choice to stop maintaining). It seems reasonable to do on the premise that ElementTree.iter has existed since Python 2.7.\r\n\r\nBut I don't need anyone to \"step up and properly maintain\" it. I just need it to not stop being an option entirely. If push comes to shove, if someone (including me) can't monkey patch around xlrd's forced obsolescence inside pandas, I can at least keep using my own patched version of xlrd as long as Pandas doesn't work towards dropping xlrd entirely.\n\n@fiendish you shouldn't need to use a patched version of xlrd when working with the legacy `xls` format as the issue you fixed on your branch was only an issue when using xlrd with the new `xlsx` format.\n\n@fzumstein In general you may be right. Our case is a little weird. Some of our files actually come into the code without any file extension at all (don't ask, lol, I'm working on addressing that), so it was nice to have one engine that did both by peeking the contents instead of going by file extension. Relying on being able to tell the difference works only until it doesn't. Maybe a pythonic solution is to try one and then fall back to the other...or maybe pandas should rip off the peek code to choose the engine that way, or maybe I should (ugh. isn't the point of libraries so that I don't have to learn how to peek inside the file to tell what it is?)...but xlrd has worked great and fixing it to be 3.9 compliant was _so_ easy. If xlrd hadn't stopped working in 3.9 would this issue have even been opened at all in the first place?\n\n@WillAyd - so, a couple of private comments and @fiendish's comment above have made me realise that xlrd still needs to stick around, BUT, only for `.xls` files:\r\n\r\nhttps://groups.google.com/g/python-excel/c/IRa8IWq_4zk/m/Af8-hrRnAgAJ\r\n\r\nWhat I'd suggest is making `xlrd` the default engine for `.xls` files and `openpyxl` the default for `.xlsx` files.\r\nIf it helps, I've abstracted out the code in `xlrd` that figures out what the type of a spreadsheet file is here:\r\n\r\nhttps://xlrd.readthedocs.io/en/latest/api.html#xlrd.inspect_format\n\n@cjw296 Thanks a lot for that!\r\n\r\n> What I'd suggest is making `xlrd` the default engine for `.xls` files and `openpyxl` the default for `.xlsx` files.\r\n\r\nI think that's exactly what we ended up doing in https://github.com/pandas-dev/pandas/pull/35029. Explicitly specifying `engine=\"xlrd\"` for anything else than xls files is deprecated, and when reading xlsx files we now default to openpyxl (if it is installed, at least. If only xlrd is installed, we also raise a deprecation warning that people should install openpyxl instead)\r\n\n\nAnd additional note, this change will shortly be released in pandas 1.2.0 (the RC is out since yesterday)\n\n@jorisvandenbossche - great! Just to be super explicit: if you attempt to open anything other than a `.xls` file with xlrd 2.0.0+, you'll get an [exception](https://github.com/python-excel/xlrd/blob/58ccbb12e2c0f9803905c90b29bd67adbd58a356/xlrd/__init__.py#L170).\n\nAh, good to know. I think that's certainly fine (it's faster than doing a deprecation first .. but I think many pandas users will already upgrade pandas, without necessarily upgrading xlrd, so our deprecation will still be useful). \r\nBut maybe we should then update pandas to check for this (case of xlrd >= 2.0), to raise a more informative error message (otherwise if you have eg only xlrd installed, from the xlrd error message it might seem that *pandas* does not support a certain format, while it's only xlrd that doesn't support it)",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/35029",
  "code_context": [
    {
      "filename": "pandas/io/excel/_base.py",
      "content": "import abc\nimport datetime\nimport inspect\nfrom io import BufferedIOBase, BytesIO, RawIOBase\nimport os\nfrom textwrap import fill\nfrom typing import Any, Dict, Mapping, Union, cast\nimport warnings\n\nfrom pandas._config import config\n\nfrom pandas._libs.parsers import STR_NA_VALUES\nfrom pandas._typing import Buffer, FilePathOrBuffer, StorageOptions\nfrom pandas.compat._optional import import_optional_dependency\nfrom pandas.errors import EmptyDataError\nfrom pandas.util._decorators import Appender, deprecate_nonkeyword_arguments\n\nfrom pandas.core.dtypes.common import is_bool, is_float, is_integer, is_list_like\n\nfrom pandas.core.frame import DataFrame\n\nfrom pandas.io.common import IOHandles, get_handle, stringify_path, validate_header_arg\nfrom pandas.io.excel._util import (\n    fill_mi_header,\n    get_default_writer,\n    get_writer,\n    maybe_convert_usecols,\n    pop_header_name,\n)\nfrom pandas.io.parsers import TextParser\n\n_read_excel_doc = (\n    \"\"\"\nRead an Excel file into a pandas DataFrame.\n\nSupports `xls`, `xlsx`, `xlsm`, `xlsb`, `odf`, `ods` and `odt` file extensions\nread from a local filesystem or URL. Supports an option to read\na single sheet or a list of sheets.\n\nParameters\n----------\nio : str, bytes, ExcelFile, xlrd.Book, path object, or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.xlsx``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handle (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nsheet_name : str, int, list, or None, default 0\n    Strings are used for sheet names. Integers are used in zero-indexed\n    sheet positions. Lists of strings/integers are used to request\n    multiple sheets. Specify None to get all sheets.\n\n    Available cases:\n\n    * Defaults to ``0``: 1st sheet as a `DataFrame`\n    * ``1``: 2nd sheet as a `DataFrame`\n    * ``\"Sheet1\"``: Load sheet with name \"Sheet1\"\n    * ``[0, 1, \"Sheet5\"]``: Load first, second and sheet named \"Sheet5\"\n      as a dict of `DataFrame`\n    * None: All sheets.\n\nheader : int, list of int, default 0\n    Row (0-indexed) to use for the column labels of the parsed\n    DataFrame. If a list of integers is passed those row positions will\n    be combined into a ``MultiIndex``. Use None if there is no header.\nnames : array-like, default None\n    List of column names to use. If file contains no header row,\n    then you should explicitly pass header=None.\nindex_col : int, list of int, default None\n    Column (0-indexed) to use as the row labels of the DataFrame.\n    Pass None if there is no such column.  If a list is passed,\n    those columns will be combined into a ``MultiIndex``.  If a\n    subset of data is selected with ``usecols``, index_col\n    is based on the subset.\nusecols : int, str, list-like, or callable default None\n    * If None, then parse all columns.\n    * If str, then indicates comma separated list of Excel column letters\n      and column ranges (e.g. \"A:E\" or \"A,C,E:F\"). Ranges are inclusive of\n      both sides.\n    * If list of int, then indicates list of column numbers to be parsed.\n    * If list of string, then indicates list of column names to be parsed.\n\n      .. versionadded:: 0.24.0\n\n    * If callable, then evaluate each column name against it and parse the\n      column if the callable returns ``True``.\n\n    Returns a subset of the columns according to behavior above.\n\n      .. versionadded:: 0.24.0\n\nsqueeze : bool, default False\n    If the parsed data only contains one column then return a Series.\ndtype : Type name or dict of column -> type, default None\n    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}\n    Use `object` to preserve data as stored in Excel and not interpret dtype.\n    If converters are specified, they will be applied INSTEAD\n    of dtype conversion.\nengine : str, default None\n    If io is not a buffer or path, this must be set to identify io.\n    Supported engines: \"xlrd\", \"openpyxl\", \"odf\", \"pyxlsb\".\n    Engine compatibility :\n\n    - \"xlrd\" supports most old/new Excel file formats.\n    - \"openpyxl\" supports newer Excel file formats.\n    - \"odf\" supports OpenDocument file formats (.odf, .ods, .odt).\n    - \"pyxlsb\" supports Binary Excel files.\n\n    .. versionchanged:: 1.2.0\n        The engine `xlrd <https://xlrd.readthedocs.io/en/latest/>`_\n        is no longer maintained, and is not supported with\n        python >= 3.9. When ``engine=None``, the following logic will be\n        used to determine the engine.\n\n        - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n          then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n        - Otherwise if ``path_or_buffer`` is a bytes stream, the file has the\n          extension ``.xls``, or is an ``xlrd`` Book instance, then ``xlrd`` will\n          be used.\n        - Otherwise if `openpyxl <https://pypi.org/project/openpyxl/>`_ is installed,\n          then ``openpyxl`` will be used.\n        - Otherwise ``xlrd`` will be used and a ``FutureWarning`` will be raised.\n\n        Specifying ``engine=\"xlrd\"`` will continue to be allowed for the\n        indefinite future.\n\nconverters : dict, default None\n    Dict of functions for converting values in certain columns. Keys can\n    either be integers or column labels, values are functions that take one\n    input argument, the Excel cell content, and return the transformed\n    content.\ntrue_values : list, default None\n    Values to consider as True.\nfalse_values : list, default None\n    Values to consider as False.\nskiprows : list-like, int, or callable, optional\n    Line numbers to skip (0-indexed) or number of lines to skip (int) at the\n    start of the file. If callable, the callable function will be evaluated\n    against the row indices, returning True if the row should be skipped and\n    False otherwise. An example of a valid callable argument would be ``lambda\n    x: x in [0, 2]``.\nnrows : int, default None\n    Number of rows to parse.\nna_values : scalar, str, list-like, or dict, default None\n    Additional strings to recognize as NA/NaN. If dict passed, specific\n    per-column NA values. By default the following values are interpreted\n    as NaN: '\"\"\"\n    + fill(\"', '\".join(sorted(STR_NA_VALUES)), 70, subsequent_indent=\"    \")\n    + \"\"\"'.\nkeep_default_na : bool, default True\n    Whether or not to include the default NaN values when parsing the data.\n    Depending on whether `na_values` is passed in, the behavior is as follows:\n\n    * If `keep_default_na` is True, and `na_values` are specified, `na_values`\n      is appended to the default NaN values used for parsing.\n    * If `keep_default_na` is True, and `na_values` are not specified, only\n      the default NaN values are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are specified, only\n      the NaN values specified `na_values` are used for parsing.\n    * If `keep_default_na` is False, and `na_values` are not specified, no\n      strings will be parsed as NaN.\n\n    Note that if `na_filter` is passed in as False, the `keep_default_na` and\n    `na_values` parameters will be ignored.\nna_filter : bool, default True\n    Detect missing value markers (empty strings and the value of na_values). In\n    data without any NAs, passing na_filter=False can improve the performance\n    of reading a large file.\nverbose : bool, default False\n    Indicate number of NA values placed in non-numeric columns.\nparse_dates : bool, list-like, or dict, default False\n    The behavior is as follows:\n\n    * bool. If True -> try parsing the index.\n    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3\n      each as a separate date column.\n    * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as\n      a single date column.\n    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call\n      result 'foo'\n\n    If a column or index contains an unparseable date, the entire column or\n    index will be returned unaltered as an object data type. If you don`t want to\n    parse some cells as date just change their type in Excel to \"Text\".\n    For non-standard datetime parsing, use ``pd.to_datetime`` after ``pd.read_excel``.\n\n    Note: A fast-path exists for iso8601-formatted dates.\ndate_parser : function, optional\n    Function to use for converting a sequence of string columns to an array of\n    datetime instances. The default uses ``dateutil.parser.parser`` to do the\n    conversion. Pandas will try to call `date_parser` in three different ways,\n    advancing to the next if an exception occurs: 1) Pass one or more arrays\n    (as defined by `parse_dates`) as arguments; 2) concatenate (row-wise) the\n    string values from the columns defined by `parse_dates` into a single array\n    and pass that; and 3) call `date_parser` once for each row using one or\n    more strings (corresponding to the columns defined by `parse_dates`) as\n    arguments.\nthousands : str, default None\n    Thousands separator for parsing string columns to numeric.  Note that\n    this parameter is only necessary for columns stored as TEXT in Excel,\n    any numeric columns will automatically be parsed, regardless of display\n    format.\ncomment : str, default None\n    Comments out remainder of line. Pass a character or characters to this\n    argument to indicate comments in the input file. Any data between the\n    comment string and the end of the current line is ignored.\nskipfooter : int, default 0\n    Rows at the end to skip (0-indexed).\nconvert_float : bool, default True\n    Convert integral floats to int (i.e., 1.0 --> 1). If False, all numeric\n    data will be read in as floats: Excel stores all numbers as floats\n    internally.\nmangle_dupe_cols : bool, default True\n    Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than\n    'X'...'X'. Passing in False will cause data to be overwritten if there\n    are duplicate names in the columns.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc., if using a URL that will\n    be parsed by ``fsspec``, e.g., starting \"s3://\", \"gcs://\". An error\n    will be raised if providing this argument with a local path or\n    a file-like buffer. See the fsspec and backend storage implementation\n    docs for the set of allowed keys and values.\n\n    .. versionadded:: 1.2.0\n\nReturns\n-------\nDataFrame or dict of DataFrames\n    DataFrame from the passed in Excel file. See notes in sheet_name\n    argument for more information on when a dict of DataFrames is returned.\n\nSee Also\n--------\nDataFrame.to_excel : Write DataFrame to an Excel file.\nDataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_fwf : Read a table of fixed-width formatted lines into DataFrame.\n\nExamples\n--------\nThe file can be read using the file name as string or an open file object:\n\n>>> pd.read_excel('tmp.xlsx', index_col=0)  # doctest: +SKIP\n       Name  Value\n0   string1      1\n1   string2      2\n2  #Comment      3\n\n>>> pd.read_excel(open('tmp.xlsx', 'rb'),\n...               sheet_name='Sheet3')  # doctest: +SKIP\n   Unnamed: 0      Name  Value\n0           0   string1      1\n1           1   string2      2\n2           2  #Comment      3\n\nIndex and header can be specified via the `index_col` and `header` arguments\n\n>>> pd.read_excel('tmp.xlsx', index_col=None, header=None)  # doctest: +SKIP\n     0         1      2\n0  NaN      Name  Value\n1  0.0   string1      1\n2  1.0   string2      2\n3  2.0  #Comment      3\n\nColumn types are inferred but can be explicitly specified\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               dtype={'Name': str, 'Value': float})  # doctest: +SKIP\n       Name  Value\n0   string1    1.0\n1   string2    2.0\n2  #Comment    3.0\n\nTrue, False, and NA values, and thousands separators have defaults,\nbut can be explicitly specified, too. Supply the values you would like\nas strings or lists of strings!\n\n>>> pd.read_excel('tmp.xlsx', index_col=0,\n...               na_values=['string1', 'string2'])  # doctest: +SKIP\n       Name  Value\n0       NaN      1\n1       NaN      2\n2  #Comment      3\n\nComment lines in the excel input file can be skipped using the `comment` kwarg\n\n>>> pd.read_excel('tmp.xlsx', index_col=0, comment='#')  # doctest: +SKIP\n      Name  Value\n0  string1    1.0\n1  string2    2.0\n2     None    NaN\n\"\"\"\n)\n\n\n@deprecate_nonkeyword_arguments(allowed_args=2, version=\"2.0\")\n@Appender(_read_excel_doc)\ndef read_excel(\n    io,\n    sheet_name=0,\n    header=0,\n    names=None,\n    index_col=None,\n    usecols=None,\n    squeeze=False,\n    dtype=None,\n    engine=None,\n    converters=None,\n    true_values=None,\n    false_values=None,\n    skiprows=None,\n    nrows=None,\n    na_values=None,\n    keep_default_na=True,\n    na_filter=True,\n    verbose=False,\n    parse_dates=False,\n    date_parser=None,\n    thousands=None,\n    comment=None,\n    skipfooter=0,\n    convert_float=True,\n    mangle_dupe_cols=True,\n    storage_options: StorageOptions = None,\n):\n\n    should_close = False\n    if not isinstance(io, ExcelFile):\n        should_close = True\n        io = ExcelFile(io, storage_options=storage_options, engine=engine)\n    elif engine and engine != io.engine:\n        raise ValueError(\n            \"Engine should not be specified when passing \"\n            \"an ExcelFile - ExcelFile already has the engine set\"\n        )\n\n    try:\n        data = io.parse(\n            sheet_name=sheet_name,\n            header=header,\n            names=names,\n            index_col=index_col,\n            usecols=usecols,\n            squeeze=squeeze,\n            dtype=dtype,\n            converters=converters,\n            true_values=true_values,\n            false_values=false_values,\n            skiprows=skiprows,\n            nrows=nrows,\n            na_values=na_values,\n            keep_default_na=keep_default_na,\n            na_filter=na_filter,\n            verbose=verbose,\n            parse_dates=parse_dates,\n            date_parser=date_parser,\n            thousands=thousands,\n            comment=comment,\n            skipfooter=skipfooter,\n            convert_float=convert_float,\n            mangle_dupe_cols=mangle_dupe_cols,\n        )\n    finally:\n        # make sure to close opened file handles\n        if should_close:\n            io.close()\n    return data\n\n\nclass BaseExcelReader(metaclass=abc.ABCMeta):\n    def __init__(self, filepath_or_buffer, storage_options: StorageOptions = None):\n        self.handles = IOHandles(\n            handle=filepath_or_buffer, compression={\"method\": None}\n        )\n        if not isinstance(filepath_or_buffer, (ExcelFile, self._workbook_class)):\n            self.handles = get_handle(\n                filepath_or_buffer, \"rb\", storage_options=storage_options, is_text=False\n            )\n\n        if isinstance(self.handles.handle, self._workbook_class):\n            self.book = self.handles.handle\n        elif hasattr(self.handles.handle, \"read\"):\n            # N.B. xlrd.Book has a read attribute too\n            self.handles.handle.seek(0)\n            self.book = self.load_workbook(self.handles.handle)\n        elif isinstance(self.handles.handle, bytes):\n            self.book = self.load_workbook(BytesIO(self.handles.handle))\n        else:\n            raise ValueError(\n                \"Must explicitly set engine if not passing in buffer or path for io.\"\n            )\n\n    @property\n    @abc.abstractmethod\n    def _workbook_class(self):\n        pass\n\n    @abc.abstractmethod\n    def load_workbook(self, filepath_or_buffer):\n        pass\n\n    def close(self):\n        self.handles.close()\n\n    @property\n    @abc.abstractmethod\n    def sheet_names(self):\n        pass\n\n    @abc.abstractmethod\n    def get_sheet_by_name(self, name):\n        pass\n\n    @abc.abstractmethod\n    def get_sheet_by_index(self, index):\n        pass\n\n    @abc.abstractmethod\n    def get_sheet_data(self, sheet, convert_float):\n        pass\n\n    def parse(\n        self,\n        sheet_name=0,\n        header=0,\n        names=None,\n        index_col=None,\n        usecols=None,\n        squeeze=False,\n        dtype=None,\n        true_values=None,\n        false_values=None,\n        skiprows=None,\n        nrows=None,\n        na_values=None,\n        verbose=False,\n        parse_dates=False,\n        date_parser=None,\n        thousands=None,\n        comment=None,\n        skipfooter=0,\n        convert_float=True,\n        mangle_dupe_cols=True,\n        **kwds,\n    ):\n\n        validate_header_arg(header)\n\n        ret_dict = False\n\n        # Keep sheetname to maintain backwards compatibility.\n        if isinstance(sheet_name, list):\n            sheets = sheet_name\n            ret_dict = True\n        elif sheet_name is None:\n            sheets = self.sheet_names\n            ret_dict = True\n        else:\n            sheets = [sheet_name]\n\n        # handle same-type duplicates.\n        sheets = list(dict.fromkeys(sheets).keys())\n\n        output = {}\n\n        for asheetname in sheets:\n            if verbose:\n                print(f\"Reading sheet {asheetname}\")\n\n            if isinstance(asheetname, str):\n                sheet = self.get_sheet_by_name(asheetname)\n            else:  # assume an integer if not a string\n                sheet = self.get_sheet_by_index(asheetname)\n\n            data = self.get_sheet_data(sheet, convert_float)\n            usecols = maybe_convert_usecols(usecols)\n\n            if not data:\n                output[asheetname] = DataFrame()\n                continue\n\n            if is_list_like(header) and len(header) == 1:\n                header = header[0]\n\n            # forward fill and pull out names for MultiIndex column\n            header_names = None\n            if header is not None and is_list_like(header):\n                header_names = []\n                control_row = [True] * len(data[0])\n\n                for row in header:\n                    if is_integer(skiprows):\n                        row += skiprows\n\n                    data[row], control_row = fill_mi_header(data[row], control_row)\n\n                    if index_col is not None:\n                        header_name, _ = pop_header_name(data[row], index_col)\n                        header_names.append(header_name)\n\n            if is_list_like(index_col):\n                # Forward fill values for MultiIndex index.\n                if header is None:\n                    offset = 0\n                elif not is_list_like(header):\n                    offset = 1 + header\n                else:\n                    offset = 1 + max(header)\n\n                # Check if we have an empty dataset\n                # before trying to collect data.\n                if offset < len(data):\n                    for col in index_col:\n                        last = data[offset][col]\n\n                        for row in range(offset + 1, len(data)):\n                            if data[row][col] == \"\" or data[row][col] is None:\n                                data[row][col] = last\n                            else:\n                                last = data[row][col]\n\n            has_index_names = is_list_like(header) and len(header) > 1\n\n            # GH 12292 : error when read one empty column from excel file\n            try:\n                parser = TextParser(\n                    data,\n                    names=names,\n                    header=header,\n                    index_col=index_col,\n                    has_index_names=has_index_names,\n                    squeeze=squeeze,\n                    dtype=dtype,\n                    true_values=true_values,\n                    false_values=false_values,\n                    skiprows=skiprows,\n                    nrows=nrows,\n                    na_values=na_values,\n                    parse_dates=parse_dates,\n                    date_parser=date_parser,\n                    thousands=thousands,\n                    comment=comment,\n                    skipfooter=skipfooter,\n                    usecols=usecols,\n                    mangle_dupe_cols=mangle_dupe_cols,\n                    **kwds,\n                )\n\n                output[asheetname] = parser.read(nrows=nrows)\n\n                if not squeeze or isinstance(output[asheetname], DataFrame):\n                    if header_names:\n                        output[asheetname].columns = output[\n                            asheetname\n                        ].columns.set_names(header_names)\n\n            except EmptyDataError:\n                # No Data, return an empty DataFrame\n                output[asheetname] = DataFrame()\n\n        if ret_dict:\n            return output\n        else:\n            return output[asheetname]\n\n\nclass ExcelWriter(metaclass=abc.ABCMeta):\n    \"\"\"\n    Class for writing DataFrame objects into excel sheets.\n\n    Default is to use xlwt for xls, openpyxl for xlsx, odf for ods.\n    See DataFrame.to_excel for typical usage.\n\n    Parameters\n    ----------\n    path : str or typing.BinaryIO\n        Path to xls or xlsx or ods file.\n    engine : str (optional)\n        Engine to use for writing. If None, defaults to\n        ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword\n        argument.\n    date_format : str, default None\n        Format string for dates written into Excel files (e.g. 'YYYY-MM-DD').\n    datetime_format : str, default None\n        Format string for datetime objects written into Excel files.\n        (e.g. 'YYYY-MM-DD HH:MM:SS').\n    mode : {'w', 'a'}, default 'w'\n        File mode to use (write or append). Append does not work with fsspec URLs.\n\n        .. versionadded:: 0.24.0\n    storage_options : dict, optional\n        Extra options that make sense for a particular storage connection, e.g.\n        host, port, username, password, etc., if using a URL that will\n        be parsed by ``fsspec``, e.g., starting \"s3://\", \"gcs://\".\n\n        .. versionadded:: 1.2.0\n\n    Attributes\n    ----------\n    None\n\n    Methods\n    -------\n    None\n\n    Notes\n    -----\n    None of the methods and properties are considered public.\n\n    For compatibility with CSV writers, ExcelWriter serializes lists\n    and dicts to strings before writing.\n\n    Examples\n    --------\n    Default usage:\n\n    >>> with ExcelWriter('path_to_file.xlsx') as writer:\n    ...     df.to_excel(writer)\n\n    To write to separate sheets in a single file:\n\n    >>> with ExcelWriter('path_to_file.xlsx') as writer:\n    ...     df1.to_excel(writer, sheet_name='Sheet1')\n    ...     df2.to_excel(writer, sheet_name='Sheet2')\n\n    You can set the date format or datetime format:\n\n    >>> with ExcelWriter('path_to_file.xlsx',\n    ...                   date_format='YYYY-MM-DD',\n    ...                   datetime_format='YYYY-MM-DD HH:MM:SS') as writer:\n    ...     df.to_excel(writer)\n\n    You can also append to an existing Excel file:\n\n    >>> with ExcelWriter('path_to_file.xlsx', mode='a') as writer:\n    ...     df.to_excel(writer, sheet_name='Sheet3')\n\n    You can store Excel file in RAM:\n\n    >>> import io\n    >>> buffer = io.BytesIO()\n    >>> with pd.ExcelWriter(buffer) as writer:\n    ...     df.to_excel(writer)\n\n    You can pack Excel file into zip archive:\n\n    >>> import zipfile\n    >>> with zipfile.ZipFile('path_to_file.zip', 'w') as zf:\n    ...     with zf.open('filename.xlsx', 'w') as buffer:\n    ...         with pd.ExcelWriter(buffer) as writer:\n    ...             df.to_excel(writer)\n    \"\"\"\n\n    # Defining an ExcelWriter implementation (see abstract methods for more...)\n\n    # - Mandatory\n    #   - ``write_cells(self, cells, sheet_name=None, startrow=0, startcol=0)``\n    #     --> called to write additional DataFrames to disk\n    #   - ``supported_extensions`` (tuple of supported extensions), used to\n    #      check that engine supports the given extension.\n    #   - ``engine`` - string that gives the engine name. Necessary to\n    #     instantiate class directly and bypass ``ExcelWriterMeta`` engine\n    #     lookup.\n    #   - ``save(self)`` --> called to save file to disk\n    # - Mostly mandatory (i.e. should at least exist)\n    #   - book, cur_sheet, path\n\n    # - Optional:\n    #   - ``__init__(self, path, engine=None, **kwargs)`` --> always called\n    #     with path as first argument.\n\n    # You also need to register the class with ``register_writer()``.\n    # Technically, ExcelWriter implementations don't need to subclass\n    # ExcelWriter.\n    def __new__(cls, path, engine=None, **kwargs):\n        # only switch class if generic(ExcelWriter)\n\n        if cls is ExcelWriter:\n            if engine is None or (isinstance(engine, str) and engine == \"auto\"):\n                if isinstance(path, str):\n                    ext = os.path.splitext(path)[-1][1:]\n                else:\n                    ext = \"xlsx\"\n\n                try:\n                    engine = config.get_option(f\"io.excel.{ext}.writer\")\n                    if engine == \"auto\":\n                        engine = get_default_writer(ext)\n                except KeyError as err:\n                    raise ValueError(f\"No engine for filetype: '{ext}'\") from err\n            cls = get_writer(engine)\n\n        return object.__new__(cls)\n\n    # declare external properties you can count on\n    curr_sheet = None\n    path = None\n\n    @property\n    @abc.abstractmethod\n    def supported_extensions(self):\n        \"\"\"Extensions that writer engine supports.\"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def engine(self):\n        \"\"\"Name of engine.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def write_cells(\n        self, cells, sheet_name=None, startrow=0, startcol=0, freeze_panes=None\n    ):\n        \"\"\"\n        Write given formatted cells into Excel an excel sheet\n\n        Parameters\n        ----------\n        cells : generator\n            cell of formatted data to save to Excel sheet\n        sheet_name : str, default None\n            Name of Excel sheet, if None, then use self.cur_sheet\n        startrow : upper left cell row to dump data frame\n        startcol : upper left cell column to dump data frame\n        freeze_panes: int tuple of length 2\n            contains the bottom-most row and right-most column to freeze\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def save(self):\n        \"\"\"\n        Save workbook to disk.\n        \"\"\"\n        pass\n\n    def __init__(\n        self,\n        path: Union[FilePathOrBuffer, \"ExcelWriter\"],\n        engine=None,\n        date_format=None,\n        datetime_format=None,\n        mode: str = \"w\",\n        storage_options: StorageOptions = None,\n        **engine_kwargs,\n    ):\n        # validate that this engine can handle the extension\n        if isinstance(path, str):\n            ext = os.path.splitext(path)[-1]\n            self.check_extension(ext)\n\n        # use mode to open the file\n        if \"b\" not in mode:\n            mode += \"b\"\n        # use \"a\" for the user to append data to excel but internally use \"r+\" to let\n        # the excel backend first read the existing file and then write any data to it\n        mode = mode.replace(\"a\", \"r+\")\n\n        # cast ExcelWriter to avoid adding 'if self.handles is not None'\n        self.handles = IOHandles(cast(Buffer, path), compression={\"copression\": None})\n        if not isinstance(path, ExcelWriter):\n            self.handles = get_handle(\n                path, mode, storage_options=storage_options, is_text=False\n            )\n        self.sheets: Dict[str, Any] = {}\n        self.cur_sheet = None\n\n        if date_format is None:\n            self.date_format = \"YYYY-MM-DD\"\n        else:\n            self.date_format = date_format\n        if datetime_format is None:\n            self.datetime_format = \"YYYY-MM-DD HH:MM:SS\"\n        else:\n            self.datetime_format = datetime_format\n\n        self.mode = mode\n\n    def __fspath__(self):\n        return getattr(self.handles.handle, \"name\", \"\")\n\n    def _get_sheet_name(self, sheet_name):\n        if sheet_name is None:\n            sheet_name = self.cur_sheet\n        if sheet_name is None:  # pragma: no cover\n            raise ValueError(\"Must pass explicit sheet_name or set cur_sheet property\")\n        return sheet_name\n\n    def _value_with_fmt(self, val):\n        \"\"\"\n        Convert numpy types to Python types for the Excel writers.\n\n        Parameters\n        ----------\n        val : object\n            Value to be written into cells\n\n        Returns\n        -------\n        Tuple with the first element being the converted value and the second\n            being an optional format\n        \"\"\"\n        fmt = None\n\n        if is_integer(val):\n            val = int(val)\n        elif is_float(val):\n            val = float(val)\n        elif is_bool(val):\n            val = bool(val)\n        elif isinstance(val, datetime.datetime):\n            fmt = self.datetime_format\n        elif isinstance(val, datetime.date):\n            fmt = self.date_format\n        elif isinstance(val, datetime.timedelta):\n            val = val.total_seconds() / float(86400)\n            fmt = \"0\"\n        else:\n            val = str(val)\n\n        return val, fmt\n\n    @classmethod\n    def check_extension(cls, ext: str):\n        \"\"\"\n        checks that path's extension against the Writer's supported\n        extensions.  If it isn't supported, raises UnsupportedFiletypeError.\n        \"\"\"\n        if ext.startswith(\".\"):\n            ext = ext[1:]\n        # error: \"Callable[[ExcelWriter], Any]\" has no attribute \"__iter__\"\n        #  (not iterable)  [attr-defined]\n        if not any(\n            ext in extension\n            for extension in cls.supported_extensions  # type: ignore[attr-defined]\n        ):\n            raise ValueError(f\"Invalid extension for engine '{cls.engine}': '{ext}'\")\n        else:\n            return True\n\n    # Allow use as a contextmanager\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.close()\n\n    def close(self):\n        \"\"\"synonym for save, to make it more file-like\"\"\"\n        content = self.save()\n        self.handles.close()\n        return content\n\n\ndef _is_ods_stream(stream: Union[BufferedIOBase, RawIOBase]) -> bool:\n    \"\"\"\n    Check if the stream is an OpenDocument Spreadsheet (.ods) file\n\n    It uses magic values inside the stream\n\n    Parameters\n    ----------\n    stream : Union[BufferedIOBase, RawIOBase]\n        IO stream with data which might be an ODS file\n\n    Returns\n    -------\n    is_ods : bool\n        Boolean indication that this is indeed an ODS file or not\n    \"\"\"\n    stream.seek(0)\n    is_ods = False\n    if stream.read(4) == b\"PK\\003\\004\":\n        stream.seek(30)\n        is_ods = (\n            stream.read(54) == b\"mimetype\"\n            b\"application/vnd.oasis.opendocument.spreadsheet\"\n        )\n    stream.seek(0)\n    return is_ods\n\n\nclass ExcelFile:\n    \"\"\"\n    Class for parsing tabular excel sheets into DataFrame objects.\n\n    Uses xlrd engine by default. See read_excel for more documentation\n\n    Parameters\n    ----------\n    path_or_buffer : str, path object (pathlib.Path or py._path.local.LocalPath),\n        a file-like object, xlrd workbook or openpypl workbook.\n        If a string or path object, expected to be a path to a\n        .xls, .xlsx, .xlsb, .xlsm, .odf, .ods, or .odt file.\n    engine : str, default None\n        If io is not a buffer or path, this must be set to identify io.\n        Supported engines: ``xlrd``, ``openpyxl``, ``odf``, ``pyxlsb``\n        Engine compatibility :\n\n        - ``xlrd`` supports most old/new Excel file formats.\n        - ``openpyxl`` supports newer Excel file formats.\n        - ``odf`` supports OpenDocument file formats (.odf, .ods, .odt).\n        - ``pyxlsb`` supports Binary Excel files.\n\n        .. versionchanged:: 1.2.0\n\n           The engine `xlrd <https://xlrd.readthedocs.io/en/latest/>`_\n           is no longer maintained, and is not supported with\n           python >= 3.9. When ``engine=None``, the following logic will be\n           used to determine the engine.\n\n           - If ``path_or_buffer`` is an OpenDocument format (.odf, .ods, .odt),\n             then `odf <https://pypi.org/project/odfpy/>`_ will be used.\n           - Otherwise if ``path_or_buffer`` is a bytes stream, the file has the\n             extension ``.xls``, or is an ``xlrd`` Book instance, then ``xlrd``\n             will be used.\n           - Otherwise if `openpyxl <https://pypi.org/project/openpyxl/>`_ is installed,\n             then ``openpyxl`` will be used.\n           - Otherwise ``xlrd`` will be used and a ``FutureWarning`` will be raised.\n\n           Specifying ``engine=\"xlrd\"`` will continue to be allowed for the\n           indefinite future.\n    \"\"\"\n\n    from pandas.io.excel._odfreader import ODFReader\n    from pandas.io.excel._openpyxl import OpenpyxlReader\n    from pandas.io.excel._pyxlsb import PyxlsbReader\n    from pandas.io.excel._xlrd import XlrdReader\n\n    _engines: Mapping[str, Any] = {\n        \"xlrd\": XlrdReader,\n        \"openpyxl\": OpenpyxlReader,\n        \"odf\": ODFReader,\n        \"pyxlsb\": PyxlsbReader,\n    }\n\n    def __init__(\n        self, path_or_buffer, engine=None, storage_options: StorageOptions = None\n    ):\n        if engine is None:\n            # Determine ext and use odf for ods stream/file\n            if isinstance(path_or_buffer, (BufferedIOBase, RawIOBase)):\n                ext = None\n                if _is_ods_stream(path_or_buffer):\n                    engine = \"odf\"\n            else:\n                ext = os.path.splitext(str(path_or_buffer))[-1]\n                if ext == \".ods\":\n                    engine = \"odf\"\n\n            if (\n                import_optional_dependency(\n                    \"xlrd\", raise_on_missing=False, on_version=\"ignore\"\n                )\n                is not None\n            ):\n                from xlrd import Book\n\n                if isinstance(path_or_buffer, Book):\n                    engine = \"xlrd\"\n\n            # GH 35029 - Prefer openpyxl except for xls files\n            if engine is None:\n                if ext is None or isinstance(path_or_buffer, bytes) or ext == \".xls\":\n                    engine = \"xlrd\"\n                elif (\n                    import_optional_dependency(\n                        \"openpyxl\", raise_on_missing=False, on_version=\"ignore\"\n                    )\n                    is not None\n                ):\n                    engine = \"openpyxl\"\n                else:\n                    caller = inspect.stack()[1]\n                    if (\n                        caller.filename.endswith(\"pandas/io/excel/_base.py\")\n                        and caller.function == \"read_excel\"\n                    ):\n                        stacklevel = 4\n                    else:\n                        stacklevel = 2\n                    warnings.warn(\n                        \"The xlrd engine is no longer maintained and is not \"\n                        \"supported when using pandas with python >= 3.9. However, \"\n                        \"the engine xlrd will continue to be allowed for the \"\n                        \"indefinite future. Beginning with pandas 1.2.0, the \"\n                        \"openpyxl engine will be used if it is installed and the \"\n                        \"engine argument is not specified. Either install openpyxl \"\n                        \"or specify engine='xlrd' to silence this warning.\",\n                        FutureWarning,\n                        stacklevel=stacklevel,\n                    )\n                    engine = \"xlrd\"\n        if engine not in self._engines:\n            raise ValueError(f\"Unknown engine: {engine}\")\n\n        self.engine = engine\n        self.storage_options = storage_options\n\n        # Could be a str, ExcelFile, Book, etc.\n        self.io = path_or_buffer\n        # Always a string\n        self._io = stringify_path(path_or_buffer)\n\n        self._reader = self._engines[engine](self._io, storage_options=storage_options)\n\n    def __fspath__(self):\n        return self._io\n\n    def parse(\n        self,\n        sheet_name=0,\n        header=0,\n        names=None,\n        index_col=None,\n        usecols=None,\n        squeeze=False,\n        converters=None,\n        true_values=None,\n        false_values=None,\n        skiprows=None,\n        nrows=None,\n        na_values=None,\n        parse_dates=False,\n        date_parser=None,\n        thousands=None,\n        comment=None,\n        skipfooter=0,\n        convert_float=True,\n        mangle_dupe_cols=True,\n        **kwds,\n    ):\n        \"\"\"\n        Parse specified sheet(s) into a DataFrame.\n\n        Equivalent to read_excel(ExcelFile, ...)  See the read_excel\n        docstring for more info on accepted parameters.\n\n        Returns\n        -------\n        DataFrame or dict of DataFrames\n            DataFrame from the passed in Excel file.\n        \"\"\"\n        return self._reader.parse(\n            sheet_name=sheet_name,\n            header=header,\n            names=names,\n            index_col=index_col,\n            usecols=usecols,\n            squeeze=squeeze,\n            converters=converters,\n            true_values=true_values,\n            false_values=false_values,\n            skiprows=skiprows,\n            nrows=nrows,\n            na_values=na_values,\n            parse_dates=parse_dates,\n            date_parser=date_parser,\n            thousands=thousands,\n            comment=comment,\n            skipfooter=skipfooter,\n            convert_float=convert_float,\n            mangle_dupe_cols=mangle_dupe_cols,\n            **kwds,\n        )\n\n    @property\n    def book(self):\n        return self._reader.book\n\n    @property\n    def sheet_names(self):\n        return self._reader.sheet_names\n\n    def close(self):\n        \"\"\"close io if necessary\"\"\"\n        self._reader.close()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.close()\n\n    def __del__(self):\n        # Ensure we don't leak file descriptors, but put in try/except in case\n        # attributes are already deleted\n        try:\n            self.close()\n        except AttributeError:\n            pass\n"
    },
    {
      "filename": "pandas/tests/io/excel/test_readers.py",
      "content": "from datetime import datetime, time\nfrom functools import partial\nimport os\nfrom urllib.error import URLError\n\nimport numpy as np\nimport pytest\n\nimport pandas.util._test_decorators as td\n\nimport pandas as pd\nfrom pandas import DataFrame, Index, MultiIndex, Series\nimport pandas._testing as tm\n\nread_ext_params = [\".xls\", \".xlsx\", \".xlsm\", \".xlsb\", \".ods\"]\nengine_params = [\n    # Add any engines to test here\n    # When defusedxml is installed it triggers deprecation warnings for\n    # xlrd and openpyxl, so catch those here\n    pytest.param(\n        \"xlrd\",\n        marks=[\n            td.skip_if_no(\"xlrd\"),\n        ],\n    ),\n    pytest.param(\n        \"openpyxl\",\n        marks=[\n            td.skip_if_no(\"openpyxl\"),\n            pytest.mark.filterwarnings(\"ignore:.*html argument\"),\n        ],\n    ),\n    pytest.param(\n        None,\n        marks=[\n            td.skip_if_no(\"xlrd\"),\n        ],\n    ),\n    pytest.param(\"pyxlsb\", marks=td.skip_if_no(\"pyxlsb\")),\n    pytest.param(\"odf\", marks=td.skip_if_no(\"odf\")),\n]\n\n\ndef _is_valid_engine_ext_pair(engine, read_ext: str) -> bool:\n    \"\"\"\n    Filter out invalid (engine, ext) pairs instead of skipping, as that\n    produces 500+ pytest.skips.\n    \"\"\"\n    engine = engine.values[0]\n    if engine == \"openpyxl\" and read_ext == \".xls\":\n        return False\n    if engine == \"odf\" and read_ext != \".ods\":\n        return False\n    if read_ext == \".ods\" and engine != \"odf\":\n        return False\n    if engine == \"pyxlsb\" and read_ext != \".xlsb\":\n        return False\n    if read_ext == \".xlsb\" and engine != \"pyxlsb\":\n        return False\n    return True\n\n\ndef _transfer_marks(engine, read_ext):\n    \"\"\"\n    engine gives us a pytest.param objec with some marks, read_ext is just\n    a string.  We need to generate a new pytest.param inheriting the marks.\n    \"\"\"\n    values = engine.values + (read_ext,)\n    new_param = pytest.param(values, marks=engine.marks)\n    return new_param\n\n\n@pytest.fixture(\n    autouse=True,\n    params=[\n        _transfer_marks(eng, ext)\n        for eng in engine_params\n        for ext in read_ext_params\n        if _is_valid_engine_ext_pair(eng, ext)\n    ],\n)\ndef engine_and_read_ext(request):\n    \"\"\"\n    Fixture for Excel reader engine and read_ext, only including valid pairs.\n    \"\"\"\n    return request.param\n\n\n@pytest.fixture\ndef engine(engine_and_read_ext):\n    engine, read_ext = engine_and_read_ext\n    return engine\n\n\n@pytest.fixture\ndef read_ext(engine_and_read_ext):\n    engine, read_ext = engine_and_read_ext\n    return read_ext\n\n\nclass TestReaders:\n    @pytest.fixture(autouse=True)\n    def cd_and_set_engine(self, engine, datapath, monkeypatch):\n        \"\"\"\n        Change directory and set engine for read_excel calls.\n        \"\"\"\n        func = partial(pd.read_excel, engine=engine)\n        monkeypatch.chdir(datapath(\"io\", \"data\", \"excel\"))\n        monkeypatch.setattr(pd, \"read_excel\", func)\n\n    def test_usecols_int(self, read_ext, df_ref):\n        df_ref = df_ref.reindex(columns=[\"A\", \"B\", \"C\"])\n\n        # usecols as int\n        msg = \"Passing an integer for `usecols`\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=3\n            )\n\n        # usecols as int\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext,\n                sheet_name=\"Sheet2\",\n                skiprows=[1],\n                index_col=0,\n                usecols=3,\n            )\n\n    def test_usecols_list(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        df_ref = df_ref.reindex(columns=[\"B\", \"C\"])\n        df1 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=[0, 2, 3]\n        )\n        df2 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=[0, 2, 3],\n        )\n\n        # TODO add index to xls file)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n    def test_usecols_str(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        df1 = df_ref.reindex(columns=[\"A\", \"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A:D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A:D\",\n        )\n\n        # TODO add index to xls, read xls ignores index name ?\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n        df1 = df_ref.reindex(columns=[\"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,C,D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A,C,D\",\n        )\n        # TODO add index to xls file\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n        df1 = df_ref.reindex(columns=[\"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,C:D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A,C:D\",\n        )\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n    @pytest.mark.parametrize(\n        \"usecols\", [[0, 1, 3], [0, 3, 1], [1, 0, 3], [1, 3, 0], [3, 0, 1], [3, 1, 0]]\n    )\n    def test_usecols_diff_positional_int_columns_order(self, read_ext, usecols, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        expected = df_ref[[\"A\", \"C\"]]\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=usecols\n        )\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    @pytest.mark.parametrize(\"usecols\", [[\"B\", \"D\"], [\"D\", \"B\"]])\n    def test_usecols_diff_positional_str_columns_order(self, read_ext, usecols, df_ref):\n        expected = df_ref[[\"B\", \"D\"]]\n        expected.index = range(len(expected))\n\n        result = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", usecols=usecols)\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_read_excel_without_slicing(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        expected = df_ref\n        result = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0)\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_usecols_excel_range_str(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        expected = df_ref[[\"C\", \"D\"]]\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,D:E\"\n        )\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_usecols_excel_range_str_invalid(self, read_ext):\n        msg = \"Invalid column name: E1\"\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", usecols=\"D:E1\")\n\n    def test_index_col_label_error(self, read_ext):\n        msg = \"list indices must be integers.*, not str\"\n\n        with pytest.raises(TypeError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext,\n                sheet_name=\"Sheet1\",\n                index_col=[\"A\"],\n                usecols=[\"A\", \"C\"],\n            )\n\n    def test_index_col_empty(self, read_ext):\n        # see gh-9208\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet3\", index_col=[\"A\", \"B\", \"C\"]\n        )\n        expected = DataFrame(\n            columns=[\"D\", \"E\", \"F\"],\n            index=MultiIndex(levels=[[]] * 3, codes=[[]] * 3, names=[\"A\", \"B\", \"C\"]),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"index_col\", [None, 2])\n    def test_index_col_with_unnamed(self, read_ext, index_col):\n        # see gh-18792\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet4\", index_col=index_col\n        )\n        expected = DataFrame(\n            [[\"i1\", \"a\", \"x\"], [\"i2\", \"b\", \"y\"]], columns=[\"Unnamed: 0\", \"col1\", \"col2\"]\n        )\n        if index_col:\n            expected = expected.set_index(expected.columns[index_col])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_usecols_pass_non_existent_column(self, read_ext):\n        msg = (\n            \"Usecols do not match columns, \"\n            \"columns expected but not found: \" + r\"\\['E'\\]\"\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, usecols=[\"E\"])\n\n    def test_usecols_wrong_type(self, read_ext):\n        msg = (\n            \"'usecols' must either be list-like of \"\n            \"all strings, all unicode, all integers or a callable.\"\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, usecols=[\"E1\", 0])\n\n    def test_excel_stop_iterator(self, read_ext):\n\n        parsed = pd.read_excel(\"test2\" + read_ext, sheet_name=\"Sheet1\")\n        expected = DataFrame([[\"aaaa\", \"bbbbb\"]], columns=[\"Test\", \"Test1\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_cell_error_na(self, read_ext):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        parsed = pd.read_excel(\"test3\" + read_ext, sheet_name=\"Sheet1\")\n        expected = DataFrame([[np.nan]], columns=[\"Test\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_table(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        df1 = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0)\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet2\", skiprows=[1], index_col=0\n        )\n        # TODO add index to file\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        df3 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, skipfooter=1\n        )\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n    def test_reader_special_dtypes(self, read_ext):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        expected = DataFrame.from_dict(\n            {\n                \"IntCol\": [1, 2, -3, 4, 0],\n                \"FloatCol\": [1.25, 2.25, 1.83, 1.92, 0.0000000005],\n                \"BoolCol\": [True, False, True, True, False],\n                \"StrCol\": [1, 2, 3, 4, 5],\n                # GH5394 - this is why convert_float isn't vectorized\n                \"Str2Col\": [\"a\", 3, \"c\", \"d\", \"e\"],\n                \"DateCol\": [\n                    datetime(2013, 10, 30),\n                    datetime(2013, 10, 31),\n                    datetime(1905, 1, 1),\n                    datetime(2013, 12, 14),\n                    datetime(2015, 3, 14),\n                ],\n            },\n        )\n        basename = \"test_types\"\n\n        # should read in correctly and infer types\n        actual = pd.read_excel(basename + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n        # if not coercing number, then int comes in as float\n        float_expected = expected.copy()\n        float_expected[\"IntCol\"] = float_expected[\"IntCol\"].astype(float)\n        float_expected.loc[float_expected.index[1], \"Str2Col\"] = 3.0\n        actual = pd.read_excel(\n            basename + read_ext, sheet_name=\"Sheet1\", convert_float=False\n        )\n        tm.assert_frame_equal(actual, float_expected)\n\n        # check setting Index (assuming xls and xlsx are the same here)\n        for icol, name in enumerate(expected.columns):\n            actual = pd.read_excel(\n                basename + read_ext, sheet_name=\"Sheet1\", index_col=icol\n            )\n            exp = expected.set_index(name)\n            tm.assert_frame_equal(actual, exp)\n\n        # convert_float and converters should be different but both accepted\n        expected[\"StrCol\"] = expected[\"StrCol\"].apply(str)\n        actual = pd.read_excel(\n            basename + read_ext, sheet_name=\"Sheet1\", converters={\"StrCol\": str}\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        no_convert_float = float_expected.copy()\n        no_convert_float[\"StrCol\"] = no_convert_float[\"StrCol\"].apply(str)\n        actual = pd.read_excel(\n            basename + read_ext,\n            sheet_name=\"Sheet1\",\n            convert_float=False,\n            converters={\"StrCol\": str},\n        )\n        tm.assert_frame_equal(actual, no_convert_float)\n\n    # GH8212 - support for converters and missing values\n    def test_reader_converters(self, read_ext):\n\n        basename = \"test_converters\"\n\n        expected = DataFrame.from_dict(\n            {\n                \"IntCol\": [1, 2, -3, -1000, 0],\n                \"FloatCol\": [12.5, np.nan, 18.3, 19.2, 0.000000005],\n                \"BoolCol\": [\"Found\", \"Found\", \"Found\", \"Not found\", \"Found\"],\n                \"StrCol\": [\"1\", np.nan, \"3\", \"4\", \"5\"],\n            }\n        )\n\n        converters = {\n            \"IntCol\": lambda x: int(x) if x != \"\" else -1000,\n            \"FloatCol\": lambda x: 10 * x if x else np.nan,\n            2: lambda x: \"Found\" if x != \"\" else \"Not found\",\n            3: lambda x: str(x) if x else \"\",\n        }\n\n        # should read in correctly and set types of single cells (not array\n        # dtypes)\n        actual = pd.read_excel(\n            basename + read_ext, sheet_name=\"Sheet1\", converters=converters\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_reader_dtype(self, read_ext):\n        # GH 8212\n        basename = \"testdtype\"\n        actual = pd.read_excel(basename + read_ext)\n\n        expected = DataFrame(\n            {\n                \"a\": [1, 2, 3, 4],\n                \"b\": [2.5, 3.5, 4.5, 5.5],\n                \"c\": [1, 2, 3, 4],\n                \"d\": [1.0, 2.0, np.nan, 4.0],\n            }\n        ).reindex(columns=[\"a\", \"b\", \"c\", \"d\"])\n\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            basename + read_ext, dtype={\"a\": \"float64\", \"b\": \"float32\", \"c\": str}\n        )\n\n        expected[\"a\"] = expected[\"a\"].astype(\"float64\")\n        expected[\"b\"] = expected[\"b\"].astype(\"float32\")\n        expected[\"c\"] = [\"001\", \"002\", \"003\", \"004\"]\n        tm.assert_frame_equal(actual, expected)\n\n        msg = \"Unable to convert column d to type int64\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(basename + read_ext, dtype={\"d\": \"int64\"})\n\n    @pytest.mark.parametrize(\n        \"dtype,expected\",\n        [\n            (\n                None,\n                DataFrame(\n                    {\n                        \"a\": [1, 2, 3, 4],\n                        \"b\": [2.5, 3.5, 4.5, 5.5],\n                        \"c\": [1, 2, 3, 4],\n                        \"d\": [1.0, 2.0, np.nan, 4.0],\n                    }\n                ),\n            ),\n            (\n                {\"a\": \"float64\", \"b\": \"float32\", \"c\": str, \"d\": str},\n                DataFrame(\n                    {\n                        \"a\": Series([1, 2, 3, 4], dtype=\"float64\"),\n                        \"b\": Series([2.5, 3.5, 4.5, 5.5], dtype=\"float32\"),\n                        \"c\": [\"001\", \"002\", \"003\", \"004\"],\n                        \"d\": [\"1\", \"2\", np.nan, \"4\"],\n                    }\n                ),\n            ),\n        ],\n    )\n    def test_reader_dtype_str(self, read_ext, dtype, expected):\n        # see gh-20377\n        basename = \"testdtype\"\n\n        actual = pd.read_excel(basename + read_ext, dtype=dtype)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_reader_spaces(self, read_ext):\n        # see gh-32207\n        basename = \"test_spaces\"\n\n        actual = pd.read_excel(basename + read_ext)\n        expected = DataFrame(\n            {\n                \"testcol\": [\n                    \"this is great\",\n                    \"4    spaces\",\n                    \"1 trailing \",\n                    \" 1 leading\",\n                    \"2  spaces  multiple  times\",\n                ]\n            }\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    # gh-36122, gh-35802\n    @pytest.mark.parametrize(\n        \"basename,expected\",\n        [\n            (\"gh-35802\", DataFrame({\"COLUMN\": [\"Test (1)\"]})),\n            (\"gh-36122\", DataFrame(columns=[\"got 2nd sa\"])),\n        ],\n    )\n    def test_read_excel_ods_nested_xml(self, read_ext, basename, expected):\n        # see gh-35802\n        engine = pd.read_excel.keywords[\"engine\"]\n        if engine != \"odf\":\n            pytest.skip(f\"Skipped for engine: {engine}\")\n\n        actual = pd.read_excel(basename + read_ext)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_reading_all_sheets(self, read_ext):\n        # Test reading all sheet names by setting sheet_name to None,\n        # Ensure a dict is returned.\n        # See PR #9450\n        basename = \"test_multisheet\"\n        dfs = pd.read_excel(basename + read_ext, sheet_name=None)\n        # ensure this is not alphabetical to test order preservation\n        expected_keys = [\"Charlie\", \"Alpha\", \"Beta\"]\n        tm.assert_contains_all(expected_keys, dfs.keys())\n        # Issue 9930\n        # Ensure sheet order is preserved\n        assert expected_keys == list(dfs.keys())\n\n    def test_reading_multiple_specific_sheets(self, read_ext):\n        # Test reading specific sheet names by specifying a mixed list\n        # of integers and strings, and confirm that duplicated sheet\n        # references (positions/names) are removed properly.\n        # Ensure a dict is returned\n        # See PR #9450\n        basename = \"test_multisheet\"\n        # Explicitly request duplicates. Only the set should be returned.\n        expected_keys = [2, \"Charlie\", \"Charlie\"]\n        dfs = pd.read_excel(basename + read_ext, sheet_name=expected_keys)\n        expected_keys = list(set(expected_keys))\n        tm.assert_contains_all(expected_keys, dfs.keys())\n        assert len(expected_keys) == len(dfs.keys())\n\n    def test_reading_all_sheets_with_blank(self, read_ext):\n        # Test reading all sheet names by setting sheet_name to None,\n        # In the case where some sheets are blank.\n        # Issue #11711\n        basename = \"blank_with_header\"\n        dfs = pd.read_excel(basename + read_ext, sheet_name=None)\n        expected_keys = [\"Sheet1\", \"Sheet2\", \"Sheet3\"]\n        tm.assert_contains_all(expected_keys, dfs.keys())\n\n    # GH6403\n    def test_read_excel_blank(self, read_ext):\n        actual = pd.read_excel(\"blank\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, DataFrame())\n\n    def test_read_excel_blank_with_header(self, read_ext):\n        expected = DataFrame(columns=[\"col_1\", \"col_2\"])\n        actual = pd.read_excel(\"blank_with_header\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n    def test_date_conversion_overflow(self, read_ext):\n        # GH 10001 : pandas.ExcelFile ignore parse_dates=False\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        expected = DataFrame(\n            [\n                [pd.Timestamp(\"2016-03-12\"), \"Marc Johnson\"],\n                [pd.Timestamp(\"2016-03-16\"), \"Jack Black\"],\n                [1e20, \"Timothy Brown\"],\n            ],\n            columns=[\"DateColWithBigInt\", \"StringCol\"],\n        )\n\n        if pd.read_excel.keywords[\"engine\"] == \"openpyxl\":\n            pytest.xfail(\"Maybe not supported by openpyxl\")\n\n        if pd.read_excel.keywords[\"engine\"] is None:\n            # GH 35029\n            pytest.xfail(\"Defaults to openpyxl, maybe not supported\")\n\n        result = pd.read_excel(\"testdateoverflow\" + read_ext)\n        tm.assert_frame_equal(result, expected)\n\n    def test_sheet_name(self, read_ext, df_ref):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n        filename = \"test1\"\n        sheet_name = \"Sheet1\"\n\n        if pd.read_excel.keywords[\"engine\"] == \"openpyxl\":\n            pytest.xfail(\"Maybe not supported by openpyxl\")\n\n        df1 = pd.read_excel(\n            filename + read_ext, sheet_name=sheet_name, index_col=0\n        )  # doc\n        df2 = pd.read_excel(filename + read_ext, index_col=0, sheet_name=sheet_name)\n\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n    def test_excel_read_buffer(self, read_ext):\n\n        pth = \"test1\" + read_ext\n        expected = pd.read_excel(pth, sheet_name=\"Sheet1\", index_col=0)\n        with open(pth, \"rb\") as f:\n            actual = pd.read_excel(f, sheet_name=\"Sheet1\", index_col=0)\n            tm.assert_frame_equal(expected, actual)\n\n    def test_bad_engine_raises(self, read_ext):\n        bad_engine = \"foo\"\n        with pytest.raises(ValueError, match=\"Unknown engine: foo\"):\n            pd.read_excel(\"\", engine=bad_engine)\n\n    @tm.network\n    def test_read_from_http_url(self, read_ext):\n        url = (\n            \"https://raw.githubusercontent.com/pandas-dev/pandas/master/\"\n            \"pandas/tests/io/data/excel/test1\" + read_ext\n        )\n        url_table = pd.read_excel(url)\n        local_table = pd.read_excel(\"test1\" + read_ext)\n        tm.assert_frame_equal(url_table, local_table)\n\n    @td.skip_if_not_us_locale\n    def test_read_from_s3_url(self, read_ext, s3_resource, s3so):\n        # Bucket \"pandas-test\" created in tests/io/conftest.py\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            s3_resource.Bucket(\"pandas-test\").put_object(Key=\"test1\" + read_ext, Body=f)\n\n        url = \"s3://pandas-test/test1\" + read_ext\n\n        url_table = pd.read_excel(url, storage_options=s3so)\n        local_table = pd.read_excel(\"test1\" + read_ext)\n        tm.assert_frame_equal(url_table, local_table)\n\n    @pytest.mark.slow\n    def test_read_from_file_url(self, read_ext, datapath):\n\n        # FILE\n        localtable = os.path.join(datapath(\"io\", \"data\", \"excel\"), \"test1\" + read_ext)\n        local_table = pd.read_excel(localtable)\n\n        try:\n            url_table = pd.read_excel(\"file://localhost/\" + localtable)\n        except URLError:\n            # fails on some systems\n            import platform\n\n            platform_info = \" \".join(platform.uname()).strip()\n            pytest.skip(f\"failing on {platform_info}\")\n\n        tm.assert_frame_equal(url_table, local_table)\n\n    def test_read_from_pathlib_path(self, read_ext):\n\n        # GH12655\n        from pathlib import Path\n\n        str_path = \"test1\" + read_ext\n        expected = pd.read_excel(str_path, sheet_name=\"Sheet1\", index_col=0)\n\n        path_obj = Path(\"test1\" + read_ext)\n        actual = pd.read_excel(path_obj, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    @td.skip_if_no(\"py.path\")\n    @td.check_file_leaks\n    def test_read_from_py_localpath(self, read_ext):\n\n        # GH12655\n        from py.path import local as LocalPath\n\n        str_path = os.path.join(\"test1\" + read_ext)\n        expected = pd.read_excel(str_path, sheet_name=\"Sheet1\", index_col=0)\n\n        path_obj = LocalPath().join(\"test1\" + read_ext)\n        actual = pd.read_excel(path_obj, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    @td.check_file_leaks\n    def test_close_from_py_localpath(self, read_ext):\n\n        # GH31467\n        str_path = os.path.join(\"test1\" + read_ext)\n        with open(str_path, \"rb\") as f:\n            x = pd.read_excel(f, sheet_name=\"Sheet1\", index_col=0)\n            del x\n            # should not throw an exception because the passed file was closed\n            f.read()\n\n    def test_reader_seconds(self, read_ext):\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        # Test reading times with and without milliseconds. GH5945.\n        expected = DataFrame.from_dict(\n            {\n                \"Time\": [\n                    time(1, 2, 3),\n                    time(2, 45, 56, 100000),\n                    time(4, 29, 49, 200000),\n                    time(6, 13, 42, 300000),\n                    time(7, 57, 35, 400000),\n                    time(9, 41, 28, 500000),\n                    time(11, 25, 21, 600000),\n                    time(13, 9, 14, 700000),\n                    time(14, 53, 7, 800000),\n                    time(16, 37, 0, 900000),\n                    time(18, 20, 54),\n                ]\n            }\n        )\n\n        actual = pd.read_excel(\"times_1900\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\"times_1904\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_multiindex(self, read_ext):\n        # see gh-4679\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        mi = MultiIndex.from_product([[\"foo\", \"bar\"], [\"a\", \"b\"]])\n        mi_file = \"testmultiindex\" + read_ext\n\n        # \"mi_column\" sheet\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=mi,\n        )\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"mi_column\", header=[0, 1], index_col=0\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"mi_index\" sheet\n        expected.index = mi\n        expected.columns = [\"a\", \"b\", \"c\", \"d\"]\n\n        actual = pd.read_excel(mi_file, sheet_name=\"mi_index\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n        # \"both\" sheet\n        expected.columns = mi\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"both\", index_col=[0, 1], header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n        # \"mi_index_name\" sheet\n        expected.columns = [\"a\", \"b\", \"c\", \"d\"]\n        expected.index = mi.set_names([\"ilvl1\", \"ilvl2\"])\n\n        actual = pd.read_excel(mi_file, sheet_name=\"mi_index_name\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected)\n\n        # \"mi_column_name\" sheet\n        expected.index = list(range(4))\n        expected.columns = mi.set_names([\"c1\", \"c2\"])\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"mi_column_name\", header=[0, 1], index_col=0\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # see gh-11317\n        # \"name_with_int\" sheet\n        expected.columns = mi.set_levels([1, 2], level=1).set_names([\"c1\", \"c2\"])\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"name_with_int\", index_col=0, header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"both_name\" sheet\n        expected.columns = mi.set_names([\"c1\", \"c2\"])\n        expected.index = mi.set_names([\"ilvl1\", \"ilvl2\"])\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"both_name\", index_col=[0, 1], header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"both_skiprows\" sheet\n        actual = pd.read_excel(\n            mi_file,\n            sheet_name=\"both_name_skiprows\",\n            index_col=[0, 1],\n            header=[0, 1],\n            skiprows=2,\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_multiindex_header_only(self, read_ext):\n        # see gh-11733.\n        #\n        # Don't try to parse a header name if there isn't one.\n        mi_file = \"testmultiindex\" + read_ext\n        result = pd.read_excel(mi_file, sheet_name=\"index_col_none\", header=[0, 1])\n\n        exp_columns = MultiIndex.from_product([(\"A\", \"B\"), (\"key\", \"val\")])\n        expected = DataFrame([[1, 2, 3, 4]] * 2, columns=exp_columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_excel_old_index_format(self, read_ext):\n        # see gh-4679\n        filename = \"test_index_name_pre17\" + read_ext\n\n        # We detect headers to determine if index names exist, so\n        # that \"index\" name in the \"names\" version of the data will\n        # now be interpreted as rows that include null data.\n        data = np.array(\n            [\n                [None, None, None, None, None],\n                [\"R0C0\", \"R0C1\", \"R0C2\", \"R0C3\", \"R0C4\"],\n                [\"R1C0\", \"R1C1\", \"R1C2\", \"R1C3\", \"R1C4\"],\n                [\"R2C0\", \"R2C1\", \"R2C2\", \"R2C3\", \"R2C4\"],\n                [\"R3C0\", \"R3C1\", \"R3C2\", \"R3C3\", \"R3C4\"],\n                [\"R4C0\", \"R4C1\", \"R4C2\", \"R4C3\", \"R4C4\"],\n            ]\n        )\n        columns = [\"C_l0_g0\", \"C_l0_g1\", \"C_l0_g2\", \"C_l0_g3\", \"C_l0_g4\"]\n        mi = MultiIndex(\n            levels=[\n                [\"R0\", \"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"],\n                [\"R1\", \"R_l1_g0\", \"R_l1_g1\", \"R_l1_g2\", \"R_l1_g3\", \"R_l1_g4\"],\n            ],\n            codes=[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]],\n            names=[None, None],\n        )\n        si = Index(\n            [\"R0\", \"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"], name=None\n        )\n\n        expected = DataFrame(data, index=si, columns=columns)\n\n        actual = pd.read_excel(filename, sheet_name=\"single_names\", index_col=0)\n        tm.assert_frame_equal(actual, expected)\n\n        expected.index = mi\n\n        actual = pd.read_excel(filename, sheet_name=\"multi_names\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected)\n\n        # The analogous versions of the \"names\" version data\n        # where there are explicitly no names for the indices.\n        data = np.array(\n            [\n                [\"R0C0\", \"R0C1\", \"R0C2\", \"R0C3\", \"R0C4\"],\n                [\"R1C0\", \"R1C1\", \"R1C2\", \"R1C3\", \"R1C4\"],\n                [\"R2C0\", \"R2C1\", \"R2C2\", \"R2C3\", \"R2C4\"],\n                [\"R3C0\", \"R3C1\", \"R3C2\", \"R3C3\", \"R3C4\"],\n                [\"R4C0\", \"R4C1\", \"R4C2\", \"R4C3\", \"R4C4\"],\n            ]\n        )\n        columns = [\"C_l0_g0\", \"C_l0_g1\", \"C_l0_g2\", \"C_l0_g3\", \"C_l0_g4\"]\n        mi = MultiIndex(\n            levels=[\n                [\"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"],\n                [\"R_l1_g0\", \"R_l1_g1\", \"R_l1_g2\", \"R_l1_g3\", \"R_l1_g4\"],\n            ],\n            codes=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]],\n            names=[None, None],\n        )\n        si = Index([\"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"], name=None)\n\n        expected = DataFrame(data, index=si, columns=columns)\n\n        actual = pd.read_excel(filename, sheet_name=\"single_no_names\", index_col=0)\n        tm.assert_frame_equal(actual, expected)\n\n        expected.index = mi\n\n        actual = pd.read_excel(filename, sheet_name=\"multi_no_names\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n    def test_read_excel_bool_header_arg(self, read_ext):\n        # GH 6114\n        msg = \"Passing a bool to header is invalid\"\n        for arg in [True, False]:\n            with pytest.raises(TypeError, match=msg):\n                pd.read_excel(\"test1\" + read_ext, header=arg)\n\n    def test_read_excel_skiprows(self, read_ext):\n        # GH 4903\n        if pd.read_excel.keywords[\"engine\"] == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext, sheet_name=\"skiprows_list\", skiprows=[0, 2]\n        )\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=np.array([0, 2]),\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # GH36435\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=lambda x: x in [0, 2],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=3,\n            names=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        expected = DataFrame(\n            [\n                # [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows(self, read_ext):\n        # GH 16645\n        num_rows_to_pull = 5\n        actual = pd.read_excel(\"test1\" + read_ext, nrows=num_rows_to_pull)\n        expected = pd.read_excel(\"test1\" + read_ext)\n        expected = expected[:num_rows_to_pull]\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows_greater_than_nrows_in_file(self, read_ext):\n        # GH 16645\n        expected = pd.read_excel(\"test1\" + read_ext)\n        num_records_in_file = len(expected)\n        num_rows_to_pull = num_records_in_file + 10\n        actual = pd.read_excel(\"test1\" + read_ext, nrows=num_rows_to_pull)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows_non_integer_parameter(self, read_ext):\n        # GH 16645\n        msg = \"'nrows' must be an integer >=0\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, nrows=\"5\")\n\n    def test_read_excel_squeeze(self, read_ext):\n        # GH 12157\n        f = \"test_squeeze\" + read_ext\n\n        actual = pd.read_excel(f, sheet_name=\"two_columns\", index_col=0, squeeze=True)\n        expected = Series([2, 3, 4], [4, 5, 6], name=\"b\")\n        expected.index.name = \"a\"\n        tm.assert_series_equal(actual, expected)\n\n        actual = pd.read_excel(f, sheet_name=\"two_columns\", squeeze=True)\n        expected = DataFrame({\"a\": [4, 5, 6], \"b\": [2, 3, 4]})\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(f, sheet_name=\"one_column\", squeeze=True)\n        expected = Series([1, 2, 3], name=\"a\")\n        tm.assert_series_equal(actual, expected)\n\n    def test_deprecated_kwargs(self, read_ext):\n        with tm.assert_produces_warning(FutureWarning, raise_on_extra_warnings=False):\n            pd.read_excel(\"test1\" + read_ext, \"Sheet1\", 0)\n\n        pd.read_excel(\"test1\" + read_ext)\n\n    def test_no_header_with_list_index_col(self, read_ext):\n        # GH 31783\n        file_name = \"testmultiindex\" + read_ext\n        data = [(\"B\", \"B\"), (\"key\", \"val\"), (3, 4), (3, 4)]\n        idx = MultiIndex.from_tuples(\n            [(\"A\", \"A\"), (\"key\", \"val\"), (1, 2), (1, 2)], names=(0, 1)\n        )\n        expected = DataFrame(data, index=idx, columns=(2, 3))\n        result = pd.read_excel(\n            file_name, sheet_name=\"index_col_none\", index_col=[0, 1], header=None\n        )\n        tm.assert_frame_equal(expected, result)\n\n\nclass TestExcelFileRead:\n    @pytest.fixture(autouse=True)\n    def cd_and_set_engine(self, engine, datapath, monkeypatch):\n        \"\"\"\n        Change directory and set engine for ExcelFile objects.\n        \"\"\"\n        func = partial(pd.ExcelFile, engine=engine)\n        monkeypatch.chdir(datapath(\"io\", \"data\", \"excel\"))\n        monkeypatch.setattr(pd, \"ExcelFile\", func)\n\n    def test_excel_passes_na(self, read_ext):\n        with pd.ExcelFile(\"test4\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=False, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[\"NA\"], [1], [\"NA\"], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        with pd.ExcelFile(\"test4\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=True, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        # 13967\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=False, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[\"1.#QNAN\"], [1], [\"nan\"], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=True, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n    @pytest.mark.parametrize(\"na_filter\", [None, True, False])\n    def test_excel_passes_na_filter(self, read_ext, na_filter):\n        # gh-25453\n        kwargs = {}\n\n        if na_filter is not None:\n            kwargs[\"na_filter\"] = na_filter\n\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel,\n                sheet_name=\"Sheet1\",\n                keep_default_na=True,\n                na_values=[\"apple\"],\n                **kwargs,\n            )\n\n        if na_filter is False:\n            expected = [[\"1.#QNAN\"], [1], [\"nan\"], [\"apple\"], [\"rabbit\"]]\n        else:\n            expected = [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]]\n\n        expected = DataFrame(expected, columns=[\"Test\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_table_sheet_by_index(self, read_ext, df_ref):\n        # For some reason pd.read_excel has no attribute 'keywords' here.\n        # Skipping based on read_ext instead.\n        if read_ext == \".xlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df1 = pd.read_excel(excel, sheet_name=0, index_col=0)\n            df2 = pd.read_excel(excel, sheet_name=1, skiprows=[1], index_col=0)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df1 = excel.parse(0, index_col=0)\n            df2 = excel.parse(1, skiprows=[1], index_col=0)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df3 = pd.read_excel(excel, sheet_name=0, index_col=0, skipfooter=1)\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df3 = excel.parse(0, index_col=0, skipfooter=1)\n\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n    def test_sheet_name(self, read_ext, df_ref):\n        # For some reason pd.read_excel has no attribute 'keywords' here.\n        # Skipping based on read_ext instead.\n        if read_ext == \".xlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        filename = \"test1\"\n        sheet_name = \"Sheet1\"\n\n        with pd.ExcelFile(filename + read_ext) as excel:\n            df1_parse = excel.parse(sheet_name=sheet_name, index_col=0)  # doc\n\n        with pd.ExcelFile(filename + read_ext) as excel:\n            df2_parse = excel.parse(index_col=0, sheet_name=sheet_name)\n\n        tm.assert_frame_equal(df1_parse, df_ref, check_names=False)\n        tm.assert_frame_equal(df2_parse, df_ref, check_names=False)\n\n    def test_excel_read_buffer(self, engine, read_ext):\n        pth = \"test1\" + read_ext\n        expected = pd.read_excel(pth, sheet_name=\"Sheet1\", index_col=0, engine=engine)\n\n        with open(pth, \"rb\") as f:\n            with pd.ExcelFile(f) as xls:\n                actual = pd.read_excel(xls, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    def test_reader_closes_file(self, engine, read_ext):\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            with pd.ExcelFile(f) as xlsx:\n                # parses okay\n                pd.read_excel(xlsx, sheet_name=\"Sheet1\", index_col=0, engine=engine)\n\n        assert f.closed\n\n    def test_conflicting_excel_engines(self, read_ext):\n        # GH 26566\n        msg = \"Engine should not be specified when passing an ExcelFile\"\n\n        with pd.ExcelFile(\"test1\" + read_ext) as xl:\n            with pytest.raises(ValueError, match=msg):\n                pd.read_excel(xl, engine=\"foo\")\n\n    def test_excel_read_binary(self, engine, read_ext):\n        # GH 15914\n        expected = pd.read_excel(\"test1\" + read_ext, engine=engine)\n\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            data = f.read()\n\n        actual = pd.read_excel(data, engine=engine)\n        tm.assert_frame_equal(expected, actual)\n\n    def test_excel_high_surrogate(self, engine):\n        # GH 23809\n        expected = DataFrame([\"\\udc88\"], columns=[\"Column1\"])\n\n        # should not produce a segmentation violation\n        actual = pd.read_excel(\"high_surrogate.xlsx\", engine=\"xlrd\")\n        tm.assert_frame_equal(expected, actual)\n\n    @pytest.mark.parametrize(\"filename\", [\"df_empty.xlsx\", \"df_equals.xlsx\"])\n    def test_header_with_index_col(self, engine, filename):\n        # GH 33476\n        idx = Index([\"Z\"], name=\"I2\")\n        cols = MultiIndex.from_tuples([(\"A\", \"B\"), (\"A\", \"B.1\")], names=[\"I11\", \"I12\"])\n        expected = DataFrame([[1, 3]], index=idx, columns=cols, dtype=\"int64\")\n        result = pd.read_excel(\n            filename, sheet_name=\"Sheet1\", index_col=0, header=[0, 1]\n        )\n        tm.assert_frame_equal(expected, result)\n\n    def test_read_datetime_multiindex(self, engine, read_ext):\n        # GH 34748\n        if engine == \"pyxlsb\":\n            pytest.xfail(\"Sheets containing datetimes not supported by pyxlsb\")\n\n        f = \"test_datetime_mi\" + read_ext\n        with pd.ExcelFile(f) as excel:\n            actual = pd.read_excel(excel, header=[0, 1], index_col=0, engine=engine)\n        expected_column_index = MultiIndex.from_tuples(\n            [(pd.to_datetime(\"02/29/2020\"), pd.to_datetime(\"03/01/2020\"))],\n            names=[\n                pd.to_datetime(\"02/29/2020\").to_pydatetime(),\n                pd.to_datetime(\"03/01/2020\").to_pydatetime(),\n            ],\n        )\n        expected = DataFrame([], columns=expected_column_index)\n\n        tm.assert_frame_equal(expected, actual)\n"
    },
    {
      "filename": "pandas/tests/io/excel/test_writers.py",
      "content": "from datetime import date, datetime, timedelta\nfrom functools import partial\nfrom io import BytesIO\nimport os\n\nimport numpy as np\nimport pytest\n\nimport pandas.util._test_decorators as td\n\nimport pandas as pd\nfrom pandas import DataFrame, Index, MultiIndex, get_option, set_option\nimport pandas._testing as tm\n\nfrom pandas.io.excel import (\n    ExcelFile,\n    ExcelWriter,\n    _OpenpyxlWriter,\n    _XlsxWriter,\n    _XlwtWriter,\n    register_writer,\n)\n\n\n@pytest.fixture\ndef path(ext):\n    \"\"\"\n    Fixture to open file for use in each test case.\n    \"\"\"\n    with tm.ensure_clean(ext) as file_path:\n        yield file_path\n\n\n@pytest.fixture\ndef set_engine(engine, ext):\n    \"\"\"\n    Fixture to set engine for use in each test case.\n\n    Rather than requiring `engine=...` to be provided explicitly as an\n    argument in each test, this fixture sets a global option to dictate\n    which engine should be used to write Excel files. After executing\n    the test it rolls back said change to the global option.\n    \"\"\"\n    option_name = f\"io.excel.{ext.strip('.')}.writer\"\n    prev_engine = get_option(option_name)\n    set_option(option_name, engine)\n    yield\n    set_option(option_name, prev_engine)  # Roll back option change\n\n\n@pytest.mark.parametrize(\n    \"ext\",\n    [\n        pytest.param(\".xlsx\", marks=[td.skip_if_no(\"openpyxl\"), td.skip_if_no(\"xlrd\")]),\n        pytest.param(\".xlsm\", marks=[td.skip_if_no(\"openpyxl\"), td.skip_if_no(\"xlrd\")]),\n        pytest.param(\".xls\", marks=[td.skip_if_no(\"xlwt\"), td.skip_if_no(\"xlrd\")]),\n        pytest.param(\n            \".xlsx\", marks=[td.skip_if_no(\"xlsxwriter\"), td.skip_if_no(\"xlrd\")]\n        ),\n        pytest.param(\".ods\", marks=td.skip_if_no(\"odf\")),\n    ],\n)\nclass TestRoundTrip:\n    @pytest.mark.parametrize(\n        \"header,expected\",\n        [(None, DataFrame([np.nan] * 4)), (0, DataFrame({\"Unnamed: 0\": [np.nan] * 3}))],\n    )\n    def test_read_one_empty_col_no_header(self, ext, header, expected):\n        # xref gh-12292\n        filename = \"no_header\"\n        df = DataFrame([[\"\", 1, 100], [\"\", 2, 200], [\"\", 3, 300], [\"\", 4, 400]])\n\n        with tm.ensure_clean(ext) as path:\n            df.to_excel(path, filename, index=False, header=False)\n            result = pd.read_excel(\n                path, sheet_name=filename, usecols=[0], header=header\n            )\n\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"header,expected\",\n        [(None, DataFrame([0] + [np.nan] * 4)), (0, DataFrame([np.nan] * 4))],\n    )\n    def test_read_one_empty_col_with_header(self, ext, header, expected):\n        filename = \"with_header\"\n        df = DataFrame([[\"\", 1, 100], [\"\", 2, 200], [\"\", 3, 300], [\"\", 4, 400]])\n\n        with tm.ensure_clean(ext) as path:\n            df.to_excel(path, \"with_header\", index=False, header=True)\n            result = pd.read_excel(\n                path, sheet_name=filename, usecols=[0], header=header\n            )\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_set_column_names_in_parameter(self, ext):\n        # GH 12870 : pass down column names associated with\n        # keyword argument names\n        refdf = DataFrame([[1, \"foo\"], [2, \"bar\"], [3, \"baz\"]], columns=[\"a\", \"b\"])\n\n        with tm.ensure_clean(ext) as pth:\n            with ExcelWriter(pth) as writer:\n                refdf.to_excel(writer, \"Data_no_head\", header=False, index=False)\n                refdf.to_excel(writer, \"Data_with_head\", index=False)\n\n            refdf.columns = [\"A\", \"B\"]\n\n            with ExcelFile(pth) as reader:\n                xlsdf_no_head = pd.read_excel(\n                    reader, sheet_name=\"Data_no_head\", header=None, names=[\"A\", \"B\"]\n                )\n                xlsdf_with_head = pd.read_excel(\n                    reader,\n                    sheet_name=\"Data_with_head\",\n                    index_col=None,\n                    names=[\"A\", \"B\"],\n                )\n\n            tm.assert_frame_equal(xlsdf_no_head, refdf)\n            tm.assert_frame_equal(xlsdf_with_head, refdf)\n\n    def test_creating_and_reading_multiple_sheets(self, ext):\n        # see gh-9450\n        #\n        # Test reading multiple sheets, from a runtime\n        # created Excel file with multiple sheets.\n        def tdf(col_sheet_name):\n            d, i = [11, 22, 33], [1, 2, 3]\n            return DataFrame(d, i, columns=[col_sheet_name])\n\n        sheets = [\"AAA\", \"BBB\", \"CCC\"]\n\n        dfs = [tdf(s) for s in sheets]\n        dfs = dict(zip(sheets, dfs))\n\n        with tm.ensure_clean(ext) as pth:\n            with ExcelWriter(pth) as ew:\n                for sheetname, df in dfs.items():\n                    df.to_excel(ew, sheetname)\n\n            dfs_returned = pd.read_excel(pth, sheet_name=sheets, index_col=0)\n\n            for s in sheets:\n                tm.assert_frame_equal(dfs[s], dfs_returned[s])\n\n    def test_read_excel_multiindex_empty_level(self, ext):\n        # see gh-12453\n        with tm.ensure_clean(ext) as path:\n            df = DataFrame(\n                {\n                    (\"One\", \"x\"): {0: 1},\n                    (\"Two\", \"X\"): {0: 3},\n                    (\"Two\", \"Y\"): {0: 7},\n                    (\"Zero\", \"\"): {0: 0},\n                }\n            )\n\n            expected = DataFrame(\n                {\n                    (\"One\", \"x\"): {0: 1},\n                    (\"Two\", \"X\"): {0: 3},\n                    (\"Two\", \"Y\"): {0: 7},\n                    (\"Zero\", \"Unnamed: 4_level_1\"): {0: 0},\n                }\n            )\n\n            df.to_excel(path)\n            actual = pd.read_excel(path, header=[0, 1], index_col=0)\n            tm.assert_frame_equal(actual, expected)\n\n            df = DataFrame(\n                {\n                    (\"Beg\", \"\"): {0: 0},\n                    (\"Middle\", \"x\"): {0: 1},\n                    (\"Tail\", \"X\"): {0: 3},\n                    (\"Tail\", \"Y\"): {0: 7},\n                }\n            )\n\n            expected = DataFrame(\n                {\n                    (\"Beg\", \"Unnamed: 1_level_1\"): {0: 0},\n                    (\"Middle\", \"x\"): {0: 1},\n                    (\"Tail\", \"X\"): {0: 3},\n                    (\"Tail\", \"Y\"): {0: 7},\n                }\n            )\n\n            df.to_excel(path)\n            actual = pd.read_excel(path, header=[0, 1], index_col=0)\n            tm.assert_frame_equal(actual, expected)\n\n    @pytest.mark.parametrize(\"c_idx_names\", [True, False])\n    @pytest.mark.parametrize(\"r_idx_names\", [True, False])\n    @pytest.mark.parametrize(\"c_idx_levels\", [1, 3])\n    @pytest.mark.parametrize(\"r_idx_levels\", [1, 3])\n    def test_excel_multindex_roundtrip(\n        self, ext, c_idx_names, r_idx_names, c_idx_levels, r_idx_levels\n    ):\n        # see gh-4679\n        with tm.ensure_clean(ext) as pth:\n            if c_idx_levels == 1 and c_idx_names:\n                pytest.skip(\n                    \"Column index name cannot be serialized unless it's a MultiIndex\"\n                )\n\n            # Empty name case current read in as\n            # unnamed levels, not Nones.\n            check_names = r_idx_names or r_idx_levels <= 1\n\n            df = tm.makeCustomDataframe(\n                5, 5, c_idx_names, r_idx_names, c_idx_levels, r_idx_levels\n            )\n            df.to_excel(pth)\n\n            act = pd.read_excel(\n                pth,\n                index_col=list(range(r_idx_levels)),\n                header=list(range(c_idx_levels)),\n            )\n            tm.assert_frame_equal(df, act, check_names=check_names)\n\n            df.iloc[0, :] = np.nan\n            df.to_excel(pth)\n\n            act = pd.read_excel(\n                pth,\n                index_col=list(range(r_idx_levels)),\n                header=list(range(c_idx_levels)),\n            )\n            tm.assert_frame_equal(df, act, check_names=check_names)\n\n            df.iloc[-1, :] = np.nan\n            df.to_excel(pth)\n            act = pd.read_excel(\n                pth,\n                index_col=list(range(r_idx_levels)),\n                header=list(range(c_idx_levels)),\n            )\n            tm.assert_frame_equal(df, act, check_names=check_names)\n\n    def test_read_excel_parse_dates(self, ext):\n        # see gh-11544, gh-12051\n        df = DataFrame(\n            {\"col\": [1, 2, 3], \"date_strings\": pd.date_range(\"2012-01-01\", periods=3)}\n        )\n        df2 = df.copy()\n        df2[\"date_strings\"] = df2[\"date_strings\"].dt.strftime(\"%m/%d/%Y\")\n\n        with tm.ensure_clean(ext) as pth:\n            df2.to_excel(pth)\n\n            res = pd.read_excel(pth, index_col=0)\n            tm.assert_frame_equal(df2, res)\n\n            res = pd.read_excel(pth, parse_dates=[\"date_strings\"], index_col=0)\n            tm.assert_frame_equal(df, res)\n\n            date_parser = lambda x: datetime.strptime(x, \"%m/%d/%Y\")\n            res = pd.read_excel(\n                pth, parse_dates=[\"date_strings\"], date_parser=date_parser, index_col=0\n            )\n            tm.assert_frame_equal(df, res)\n\n    def test_multiindex_interval_datetimes(self, ext):\n        # GH 30986\n        midx = pd.MultiIndex.from_arrays(\n            [\n                range(4),\n                pd.interval_range(\n                    start=pd.Timestamp(\"2020-01-01\"), periods=4, freq=\"6M\"\n                ),\n            ]\n        )\n        df = DataFrame(range(4), index=midx)\n        with tm.ensure_clean(ext) as pth:\n            df.to_excel(pth)\n            result = pd.read_excel(pth, index_col=[0, 1])\n        expected = DataFrame(\n            range(4),\n            pd.MultiIndex.from_arrays(\n                [\n                    range(4),\n                    [\n                        \"(2020-01-31, 2020-07-31]\",\n                        \"(2020-07-31, 2021-01-31]\",\n                        \"(2021-01-31, 2021-07-31]\",\n                        \"(2021-07-31, 2022-01-31]\",\n                    ],\n                ]\n            ),\n        )\n        tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    \"engine,ext\",\n    [\n        pytest.param(\n            \"openpyxl\",\n            \".xlsx\",\n            marks=[td.skip_if_no(\"openpyxl\"), td.skip_if_no(\"xlrd\")],\n        ),\n        pytest.param(\n            \"openpyxl\",\n            \".xlsm\",\n            marks=[td.skip_if_no(\"openpyxl\"), td.skip_if_no(\"xlrd\")],\n        ),\n        pytest.param(\n            \"xlwt\", \".xls\", marks=[td.skip_if_no(\"xlwt\"), td.skip_if_no(\"xlrd\")]\n        ),\n        pytest.param(\n            \"xlsxwriter\",\n            \".xlsx\",\n            marks=[td.skip_if_no(\"xlsxwriter\"), td.skip_if_no(\"xlrd\")],\n        ),\n        pytest.param(\"odf\", \".ods\", marks=td.skip_if_no(\"odf\")),\n    ],\n)\n@pytest.mark.usefixtures(\"set_engine\")\nclass TestExcelWriter:\n    def test_excel_sheet_size(self, path):\n\n        # GH 26080\n        breaking_row_count = 2 ** 20 + 1\n        breaking_col_count = 2 ** 14 + 1\n        # purposely using two arrays to prevent memory issues while testing\n        row_arr = np.zeros(shape=(breaking_row_count, 1))\n        col_arr = np.zeros(shape=(1, breaking_col_count))\n        row_df = DataFrame(row_arr)\n        col_df = DataFrame(col_arr)\n\n        msg = \"sheet is too large\"\n        with pytest.raises(ValueError, match=msg):\n            row_df.to_excel(path)\n\n        with pytest.raises(ValueError, match=msg):\n            col_df.to_excel(path)\n\n    def test_excel_sheet_by_name_raise(self, path, engine):\n        gt = DataFrame(np.random.randn(10, 2))\n        gt.to_excel(path)\n\n        xl = ExcelFile(path)\n        df = pd.read_excel(xl, sheet_name=0, index_col=0)\n\n        tm.assert_frame_equal(gt, df)\n\n        if engine == \"odf\":\n            msg = \"sheet 0 not found\"\n            with pytest.raises(ValueError, match=msg):\n                pd.read_excel(xl, \"0\")\n        elif engine == \"xlwt\":\n            import xlrd\n\n            msg = \"No sheet named <'0'>\"\n            with pytest.raises(xlrd.XLRDError, match=msg):\n                pd.read_excel(xl, sheet_name=\"0\")\n        else:\n            with pytest.raises(KeyError, match=\"Worksheet 0 does not exist.\"):\n                pd.read_excel(xl, sheet_name=\"0\")\n\n    def test_excel_writer_context_manager(self, frame, path):\n        with ExcelWriter(path) as writer:\n            frame.to_excel(writer, \"Data1\")\n            frame2 = frame.copy()\n            frame2.columns = frame.columns[::-1]\n            frame2.to_excel(writer, \"Data2\")\n\n        with ExcelFile(path) as reader:\n            found_df = pd.read_excel(reader, sheet_name=\"Data1\", index_col=0)\n            found_df2 = pd.read_excel(reader, sheet_name=\"Data2\", index_col=0)\n\n            tm.assert_frame_equal(found_df, frame)\n            tm.assert_frame_equal(found_df2, frame2)\n\n    def test_roundtrip(self, frame, path):\n        frame = frame.copy()\n        frame[\"A\"][:5] = np.nan\n\n        frame.to_excel(path, \"test1\")\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", index=False)\n\n        # test roundtrip\n        frame.to_excel(path, \"test1\")\n        recons = pd.read_excel(path, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(frame, recons)\n\n        frame.to_excel(path, \"test1\", index=False)\n        recons = pd.read_excel(path, sheet_name=\"test1\", index_col=None)\n        recons.index = frame.index\n        tm.assert_frame_equal(frame, recons)\n\n        frame.to_excel(path, \"test1\", na_rep=\"NA\")\n        recons = pd.read_excel(path, sheet_name=\"test1\", index_col=0, na_values=[\"NA\"])\n        tm.assert_frame_equal(frame, recons)\n\n        # GH 3611\n        frame.to_excel(path, \"test1\", na_rep=\"88\")\n        recons = pd.read_excel(path, sheet_name=\"test1\", index_col=0, na_values=[\"88\"])\n        tm.assert_frame_equal(frame, recons)\n\n        frame.to_excel(path, \"test1\", na_rep=\"88\")\n        recons = pd.read_excel(\n            path, sheet_name=\"test1\", index_col=0, na_values=[88, 88.0]\n        )\n        tm.assert_frame_equal(frame, recons)\n\n        # GH 6573\n        frame.to_excel(path, \"Sheet1\")\n        recons = pd.read_excel(path, index_col=0)\n        tm.assert_frame_equal(frame, recons)\n\n        frame.to_excel(path, \"0\")\n        recons = pd.read_excel(path, index_col=0)\n        tm.assert_frame_equal(frame, recons)\n\n        # GH 8825 Pandas Series should provide to_excel method\n        s = frame[\"A\"]\n        s.to_excel(path)\n        recons = pd.read_excel(path, index_col=0)\n        tm.assert_frame_equal(s.to_frame(), recons)\n\n    def test_mixed(self, frame, path):\n        mixed_frame = frame.copy()\n        mixed_frame[\"foo\"] = \"bar\"\n\n        mixed_frame.to_excel(path, \"test1\")\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(mixed_frame, recons)\n\n    def test_ts_frame(self, tsframe, path):\n        df = tsframe\n\n        # freq doesnt round-trip\n        index = pd.DatetimeIndex(np.asarray(df.index), freq=None)\n        df.index = index\n\n        df.to_excel(path, \"test1\")\n        reader = ExcelFile(path)\n\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(df, recons)\n\n    def test_basics_with_nan(self, frame, path):\n        frame = frame.copy()\n        frame[\"A\"][:5] = np.nan\n        frame.to_excel(path, \"test1\")\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", index=False)\n\n    @pytest.mark.parametrize(\"np_type\", [np.int8, np.int16, np.int32, np.int64])\n    def test_int_types(self, np_type, path):\n        # Test np.int values read come back as int\n        # (rather than float which is Excel's format).\n        df = DataFrame(np.random.randint(-10, 10, size=(10, 2)), dtype=np_type)\n        df.to_excel(path, \"test1\")\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n\n        int_frame = df.astype(np.int64)\n        tm.assert_frame_equal(int_frame, recons)\n\n        recons2 = pd.read_excel(path, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(int_frame, recons2)\n\n        # Test with convert_float=False comes back as float.\n        float_frame = df.astype(float)\n        recons = pd.read_excel(\n            path, sheet_name=\"test1\", convert_float=False, index_col=0\n        )\n        tm.assert_frame_equal(\n            recons, float_frame, check_index_type=False, check_column_type=False\n        )\n\n    @pytest.mark.parametrize(\"np_type\", [np.float16, np.float32, np.float64])\n    def test_float_types(self, np_type, path):\n        # Test np.float values read come back as float.\n        df = DataFrame(np.random.random_sample(10), dtype=np_type)\n        df.to_excel(path, \"test1\")\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0).astype(np_type)\n\n        tm.assert_frame_equal(df, recons)\n\n    @pytest.mark.parametrize(\"np_type\", [np.bool8, np.bool_])\n    def test_bool_types(self, np_type, path):\n        # Test np.bool values read come back as float.\n        df = DataFrame([1, 0, True, False], dtype=np_type)\n        df.to_excel(path, \"test1\")\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0).astype(np_type)\n\n        tm.assert_frame_equal(df, recons)\n\n    def test_inf_roundtrip(self, path):\n        df = DataFrame([(1, np.inf), (2, 3), (5, -np.inf)])\n        df.to_excel(path, \"test1\")\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n\n        tm.assert_frame_equal(df, recons)\n\n    def test_sheets(self, frame, tsframe, path):\n\n        # freq doesnt round-trip\n        index = pd.DatetimeIndex(np.asarray(tsframe.index), freq=None)\n        tsframe.index = index\n\n        frame = frame.copy()\n        frame[\"A\"][:5] = np.nan\n\n        frame.to_excel(path, \"test1\")\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", index=False)\n\n        # Test writing to separate sheets\n        writer = ExcelWriter(path)\n        frame.to_excel(writer, \"test1\")\n        tsframe.to_excel(writer, \"test2\")\n        writer.close()\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(frame, recons)\n        recons = pd.read_excel(reader, sheet_name=\"test2\", index_col=0)\n        tm.assert_frame_equal(tsframe, recons)\n        assert 2 == len(reader.sheet_names)\n        assert \"test1\" == reader.sheet_names[0]\n        assert \"test2\" == reader.sheet_names[1]\n\n    def test_colaliases(self, frame, path):\n        frame = frame.copy()\n        frame[\"A\"][:5] = np.nan\n\n        frame.to_excel(path, \"test1\")\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", index=False)\n\n        # column aliases\n        col_aliases = Index([\"AA\", \"X\", \"Y\", \"Z\"])\n        frame.to_excel(path, \"test1\", header=col_aliases)\n        reader = ExcelFile(path)\n        rs = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        xp = frame.copy()\n        xp.columns = col_aliases\n        tm.assert_frame_equal(xp, rs)\n\n    def test_roundtrip_indexlabels(self, merge_cells, frame, path):\n        frame = frame.copy()\n        frame[\"A\"][:5] = np.nan\n\n        frame.to_excel(path, \"test1\")\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", index=False)\n\n        # test index_label\n        df = DataFrame(np.random.randn(10, 2)) >= 0\n        df.to_excel(path, \"test1\", index_label=[\"test\"], merge_cells=merge_cells)\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0).astype(np.int64)\n        df.index.names = [\"test\"]\n        assert df.index.names == recons.index.names\n\n        df = DataFrame(np.random.randn(10, 2)) >= 0\n        df.to_excel(\n            path,\n            \"test1\",\n            index_label=[\"test\", \"dummy\", \"dummy2\"],\n            merge_cells=merge_cells,\n        )\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0).astype(np.int64)\n        df.index.names = [\"test\"]\n        assert df.index.names == recons.index.names\n\n        df = DataFrame(np.random.randn(10, 2)) >= 0\n        df.to_excel(path, \"test1\", index_label=\"test\", merge_cells=merge_cells)\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0).astype(np.int64)\n        df.index.names = [\"test\"]\n        tm.assert_frame_equal(df, recons.astype(bool))\n\n        frame.to_excel(\n            path,\n            \"test1\",\n            columns=[\"A\", \"B\", \"C\", \"D\"],\n            index=False,\n            merge_cells=merge_cells,\n        )\n        # take 'A' and 'B' as indexes (same row as cols 'C', 'D')\n        df = frame.copy()\n        df = df.set_index([\"A\", \"B\"])\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=[0, 1])\n        tm.assert_frame_equal(df, recons)\n\n    def test_excel_roundtrip_indexname(self, merge_cells, path):\n        df = DataFrame(np.random.randn(10, 4))\n        df.index.name = \"foo\"\n\n        df.to_excel(path, merge_cells=merge_cells)\n\n        xf = ExcelFile(path)\n        result = pd.read_excel(xf, sheet_name=xf.sheet_names[0], index_col=0)\n\n        tm.assert_frame_equal(result, df)\n        assert result.index.name == \"foo\"\n\n    def test_excel_roundtrip_datetime(self, merge_cells, tsframe, path):\n        # datetime.date, not sure what to test here exactly\n\n        # freq does not round-trip\n        index = pd.DatetimeIndex(np.asarray(tsframe.index), freq=None)\n        tsframe.index = index\n\n        tsf = tsframe.copy()\n\n        tsf.index = [x.date() for x in tsframe.index]\n        tsf.to_excel(path, \"test1\", merge_cells=merge_cells)\n\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n\n        tm.assert_frame_equal(tsframe, recons)\n\n    def test_excel_date_datetime_format(self, engine, ext, path):\n        # see gh-4133\n        #\n        # Excel output format strings\n        df = DataFrame(\n            [\n                [date(2014, 1, 31), date(1999, 9, 24)],\n                [datetime(1998, 5, 26, 23, 33, 4), datetime(2014, 2, 28, 13, 5, 13)],\n            ],\n            index=[\"DATE\", \"DATETIME\"],\n            columns=[\"X\", \"Y\"],\n        )\n        df_expected = DataFrame(\n            [\n                [datetime(2014, 1, 31), datetime(1999, 9, 24)],\n                [datetime(1998, 5, 26, 23, 33, 4), datetime(2014, 2, 28, 13, 5, 13)],\n            ],\n            index=[\"DATE\", \"DATETIME\"],\n            columns=[\"X\", \"Y\"],\n        )\n\n        with tm.ensure_clean(ext) as filename2:\n            writer1 = ExcelWriter(path)\n            writer2 = ExcelWriter(\n                filename2,\n                date_format=\"DD.MM.YYYY\",\n                datetime_format=\"DD.MM.YYYY HH-MM-SS\",\n            )\n\n            df.to_excel(writer1, \"test1\")\n            df.to_excel(writer2, \"test1\")\n\n            writer1.close()\n            writer2.close()\n\n            reader1 = ExcelFile(path)\n            reader2 = ExcelFile(filename2)\n\n            rs1 = pd.read_excel(reader1, sheet_name=\"test1\", index_col=0)\n            rs2 = pd.read_excel(reader2, sheet_name=\"test1\", index_col=0)\n\n            tm.assert_frame_equal(rs1, rs2)\n\n            # Since the reader returns a datetime object for dates,\n            # we need to use df_expected to check the result.\n            tm.assert_frame_equal(rs2, df_expected)\n\n    def test_to_excel_interval_no_labels(self, path):\n        # see gh-19242\n        #\n        # Test writing Interval without labels.\n        df = DataFrame(np.random.randint(-10, 10, size=(20, 1)), dtype=np.int64)\n        expected = df.copy()\n\n        df[\"new\"] = pd.cut(df[0], 10)\n        expected[\"new\"] = pd.cut(expected[0], 10).astype(str)\n\n        df.to_excel(path, \"test1\")\n        reader = ExcelFile(path)\n\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(expected, recons)\n\n    def test_to_excel_interval_labels(self, path):\n        # see gh-19242\n        #\n        # Test writing Interval with labels.\n        df = DataFrame(np.random.randint(-10, 10, size=(20, 1)), dtype=np.int64)\n        expected = df.copy()\n        intervals = pd.cut(\n            df[0], 10, labels=[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\n        )\n        df[\"new\"] = intervals\n        expected[\"new\"] = pd.Series(list(intervals))\n\n        df.to_excel(path, \"test1\")\n        reader = ExcelFile(path)\n\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(expected, recons)\n\n    def test_to_excel_timedelta(self, path):\n        # see gh-19242, gh-9155\n        #\n        # Test writing timedelta to xls.\n        df = DataFrame(\n            np.random.randint(-10, 10, size=(20, 1)), columns=[\"A\"], dtype=np.int64\n        )\n        expected = df.copy()\n\n        df[\"new\"] = df[\"A\"].apply(lambda x: timedelta(seconds=x))\n        expected[\"new\"] = expected[\"A\"].apply(\n            lambda x: timedelta(seconds=x).total_seconds() / float(86400)\n        )\n\n        df.to_excel(path, \"test1\")\n        reader = ExcelFile(path)\n\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(expected, recons)\n\n    def test_to_excel_periodindex(self, tsframe, path):\n        xp = tsframe.resample(\"M\", kind=\"period\").mean()\n\n        xp.to_excel(path, \"sht1\")\n\n        reader = ExcelFile(path)\n        rs = pd.read_excel(reader, sheet_name=\"sht1\", index_col=0)\n        tm.assert_frame_equal(xp, rs.to_period(\"M\"))\n\n    def test_to_excel_multiindex(self, merge_cells, frame, path):\n        arrays = np.arange(len(frame.index) * 2).reshape(2, -1)\n        new_index = MultiIndex.from_arrays(arrays, names=[\"first\", \"second\"])\n        frame.index = new_index\n\n        frame.to_excel(path, \"test1\", header=False)\n        frame.to_excel(path, \"test1\", columns=[\"A\", \"B\"])\n\n        # round trip\n        frame.to_excel(path, \"test1\", merge_cells=merge_cells)\n        reader = ExcelFile(path)\n        df = pd.read_excel(reader, sheet_name=\"test1\", index_col=[0, 1])\n        tm.assert_frame_equal(frame, df)\n\n    # GH13511\n    def test_to_excel_multiindex_nan_label(self, merge_cells, path):\n        df = DataFrame({\"A\": [None, 2, 3], \"B\": [10, 20, 30], \"C\": np.random.sample(3)})\n        df = df.set_index([\"A\", \"B\"])\n\n        df.to_excel(path, merge_cells=merge_cells)\n        df1 = pd.read_excel(path, index_col=[0, 1])\n        tm.assert_frame_equal(df, df1)\n\n    # Test for Issue 11328. If column indices are integers, make\n    # sure they are handled correctly for either setting of\n    # merge_cells\n    def test_to_excel_multiindex_cols(self, merge_cells, frame, path):\n        arrays = np.arange(len(frame.index) * 2).reshape(2, -1)\n        new_index = MultiIndex.from_arrays(arrays, names=[\"first\", \"second\"])\n        frame.index = new_index\n\n        new_cols_index = MultiIndex.from_tuples([(40, 1), (40, 2), (50, 1), (50, 2)])\n        frame.columns = new_cols_index\n        header = [0, 1]\n        if not merge_cells:\n            header = 0\n\n        # round trip\n        frame.to_excel(path, \"test1\", merge_cells=merge_cells)\n        reader = ExcelFile(path)\n        df = pd.read_excel(reader, sheet_name=\"test1\", header=header, index_col=[0, 1])\n        if not merge_cells:\n            fm = frame.columns.format(sparsify=False, adjoin=False, names=False)\n            frame.columns = [\".\".join(map(str, q)) for q in zip(*fm)]\n        tm.assert_frame_equal(frame, df)\n\n    def test_to_excel_multiindex_dates(self, merge_cells, tsframe, path):\n        # try multiindex with dates\n        new_index = [tsframe.index, np.arange(len(tsframe.index))]\n        tsframe.index = MultiIndex.from_arrays(new_index)\n\n        tsframe.index.names = [\"time\", \"foo\"]\n        tsframe.to_excel(path, \"test1\", merge_cells=merge_cells)\n        reader = ExcelFile(path)\n        recons = pd.read_excel(reader, sheet_name=\"test1\", index_col=[0, 1])\n\n        tm.assert_frame_equal(tsframe, recons)\n        assert recons.index.names == (\"time\", \"foo\")\n\n    def test_to_excel_multiindex_no_write_index(self, path):\n        # Test writing and re-reading a MI without the index. GH 5616.\n\n        # Initial non-MI frame.\n        frame1 = DataFrame({\"a\": [10, 20], \"b\": [30, 40], \"c\": [50, 60]})\n\n        # Add a MI.\n        frame2 = frame1.copy()\n        multi_index = MultiIndex.from_tuples([(70, 80), (90, 100)])\n        frame2.index = multi_index\n\n        # Write out to Excel without the index.\n        frame2.to_excel(path, \"test1\", index=False)\n\n        # Read it back in.\n        reader = ExcelFile(path)\n        frame3 = pd.read_excel(reader, sheet_name=\"test1\")\n\n        # Test that it is the same as the initial frame.\n        tm.assert_frame_equal(frame1, frame3)\n\n    def test_to_excel_float_format(self, path):\n        df = DataFrame(\n            [[0.123456, 0.234567, 0.567567], [12.32112, 123123.2, 321321.2]],\n            index=[\"A\", \"B\"],\n            columns=[\"X\", \"Y\", \"Z\"],\n        )\n        df.to_excel(path, \"test1\", float_format=\"%.2f\")\n\n        reader = ExcelFile(path)\n        result = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n\n        expected = DataFrame(\n            [[0.12, 0.23, 0.57], [12.32, 123123.20, 321321.20]],\n            index=[\"A\", \"B\"],\n            columns=[\"X\", \"Y\", \"Z\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_to_excel_output_encoding(self, ext):\n        # Avoid mixed inferred_type.\n        df = DataFrame(\n            [[\"\\u0192\", \"\\u0193\", \"\\u0194\"], [\"\\u0195\", \"\\u0196\", \"\\u0197\"]],\n            index=[\"A\\u0192\", \"B\"],\n            columns=[\"X\\u0193\", \"Y\", \"Z\"],\n        )\n\n        with tm.ensure_clean(\"__tmp_to_excel_float_format__.\" + ext) as filename:\n            df.to_excel(filename, sheet_name=\"TestSheet\", encoding=\"utf8\")\n            result = pd.read_excel(filename, sheet_name=\"TestSheet\", index_col=0)\n            tm.assert_frame_equal(result, df)\n\n    def test_to_excel_unicode_filename(self, ext, path):\n        with tm.ensure_clean(\"\\u0192u.\" + ext) as filename:\n            try:\n                f = open(filename, \"wb\")\n            except UnicodeEncodeError:\n                pytest.skip(\"No unicode file names on this system\")\n            else:\n                f.close()\n\n            df = DataFrame(\n                [[0.123456, 0.234567, 0.567567], [12.32112, 123123.2, 321321.2]],\n                index=[\"A\", \"B\"],\n                columns=[\"X\", \"Y\", \"Z\"],\n            )\n            df.to_excel(filename, \"test1\", float_format=\"%.2f\")\n\n            reader = ExcelFile(filename)\n            result = pd.read_excel(reader, sheet_name=\"test1\", index_col=0)\n\n            expected = DataFrame(\n                [[0.12, 0.23, 0.57], [12.32, 123123.20, 321321.20]],\n                index=[\"A\", \"B\"],\n                columns=[\"X\", \"Y\", \"Z\"],\n            )\n            tm.assert_frame_equal(result, expected)\n\n    # FIXME: dont leave commented-out\n    # def test_to_excel_header_styling_xls(self, engine, ext):\n\n    #     import StringIO\n    #     s = StringIO(\n    #     \"\"\"Date,ticker,type,value\n    #     2001-01-01,x,close,12.2\n    #     2001-01-01,x,open ,12.1\n    #     2001-01-01,y,close,12.2\n    #     2001-01-01,y,open ,12.1\n    #     2001-02-01,x,close,12.2\n    #     2001-02-01,x,open ,12.1\n    #     2001-02-01,y,close,12.2\n    #     2001-02-01,y,open ,12.1\n    #     2001-03-01,x,close,12.2\n    #     2001-03-01,x,open ,12.1\n    #     2001-03-01,y,close,12.2\n    #     2001-03-01,y,open ,12.1\"\"\")\n    #     df = read_csv(s, parse_dates=[\"Date\"])\n    #     pdf = df.pivot_table(values=\"value\", rows=[\"ticker\"],\n    #                                          cols=[\"Date\", \"type\"])\n\n    #     try:\n    #         import xlwt\n    #         import xlrd\n    #     except ImportError:\n    #         pytest.skip\n\n    #     filename = '__tmp_to_excel_header_styling_xls__.xls'\n    #     pdf.to_excel(filename, 'test1')\n\n    #     wbk = xlrd.open_workbook(filename,\n    #                              formatting_info=True)\n    #     assert [\"test1\"] == wbk.sheet_names()\n    #     ws = wbk.sheet_by_name('test1')\n    #     assert [(0, 1, 5, 7), (0, 1, 3, 5), (0, 1, 1, 3)] == ws.merged_cells\n    #     for i in range(0, 2):\n    #         for j in range(0, 7):\n    #             xfx = ws.cell_xf_index(0, 0)\n    #             cell_xf = wbk.xf_list[xfx]\n    #             font = wbk.font_list\n    #             assert 1 == font[cell_xf.font_index].bold\n    #             assert 1 == cell_xf.border.top_line_style\n    #             assert 1 == cell_xf.border.right_line_style\n    #             assert 1 == cell_xf.border.bottom_line_style\n    #             assert 1 == cell_xf.border.left_line_style\n    #             assert 2 == cell_xf.alignment.hor_align\n    #     os.remove(filename)\n    # def test_to_excel_header_styling_xlsx(self, engine, ext):\n    #     import StringIO\n    #     s = StringIO(\n    #     \"\"\"Date,ticker,type,value\n    #     2001-01-01,x,close,12.2\n    #     2001-01-01,x,open ,12.1\n    #     2001-01-01,y,close,12.2\n    #     2001-01-01,y,open ,12.1\n    #     2001-02-01,x,close,12.2\n    #     2001-02-01,x,open ,12.1\n    #     2001-02-01,y,close,12.2\n    #     2001-02-01,y,open ,12.1\n    #     2001-03-01,x,close,12.2\n    #     2001-03-01,x,open ,12.1\n    #     2001-03-01,y,close,12.2\n    #     2001-03-01,y,open ,12.1\"\"\")\n    #     df = read_csv(s, parse_dates=[\"Date\"])\n    #     pdf = df.pivot_table(values=\"value\", rows=[\"ticker\"],\n    #                                          cols=[\"Date\", \"type\"])\n    #     try:\n    #         import openpyxl\n    #         from openpyxl.cell import get_column_letter\n    #     except ImportError:\n    #         pytest.skip\n    #     if openpyxl.__version__ < '1.6.1':\n    #         pytest.skip\n    #     # test xlsx_styling\n    #     filename = '__tmp_to_excel_header_styling_xlsx__.xlsx'\n    #     pdf.to_excel(filename, 'test1')\n    #     wbk = openpyxl.load_workbook(filename)\n    #     assert [\"test1\"] == wbk.get_sheet_names()\n    #     ws = wbk.get_sheet_by_name('test1')\n    #     xlsaddrs = [\"%s2\" % chr(i) for i in range(ord('A'), ord('H'))]\n    #     xlsaddrs += [\"A%s\" % i for i in range(1, 6)]\n    #     xlsaddrs += [\"B1\", \"D1\", \"F1\"]\n    #     for xlsaddr in xlsaddrs:\n    #         cell = ws.cell(xlsaddr)\n    #         assert cell.style.font.bold\n    #         assert (openpyxl.style.Border.BORDER_THIN ==\n    #                 cell.style.borders.top.border_style)\n    #         assert (openpyxl.style.Border.BORDER_THIN ==\n    #                 cell.style.borders.right.border_style)\n    #         assert (openpyxl.style.Border.BORDER_THIN ==\n    #                 cell.style.borders.bottom.border_style)\n    #         assert (openpyxl.style.Border.BORDER_THIN ==\n    #                 cell.style.borders.left.border_style)\n    #         assert (openpyxl.style.Alignment.HORIZONTAL_CENTER ==\n    #                 cell.style.alignment.horizontal)\n    #     mergedcells_addrs = [\"C1\", \"E1\", \"G1\"]\n    #     for maddr in mergedcells_addrs:\n    #         assert ws.cell(maddr).merged\n    #     os.remove(filename)\n\n    @pytest.mark.parametrize(\"use_headers\", [True, False])\n    @pytest.mark.parametrize(\"r_idx_nlevels\", [1, 2, 3])\n    @pytest.mark.parametrize(\"c_idx_nlevels\", [1, 2, 3])\n    def test_excel_010_hemstring(\n        self, merge_cells, c_idx_nlevels, r_idx_nlevels, use_headers, path\n    ):\n        def roundtrip(data, header=True, parser_hdr=0, index=True):\n            data.to_excel(path, header=header, merge_cells=merge_cells, index=index)\n\n            xf = ExcelFile(path)\n            return pd.read_excel(xf, sheet_name=xf.sheet_names[0], header=parser_hdr)\n\n        # Basic test.\n        parser_header = 0 if use_headers else None\n        res = roundtrip(DataFrame([0]), use_headers, parser_header)\n\n        assert res.shape == (1, 2)\n        assert res.iloc[0, 0] is not np.nan\n\n        # More complex tests with multi-index.\n        nrows = 5\n        ncols = 3\n\n        # ensure limited functionality in 0.10\n        # override of gh-2370 until sorted out in 0.11\n\n        df = tm.makeCustomDataframe(\n            nrows, ncols, r_idx_nlevels=r_idx_nlevels, c_idx_nlevels=c_idx_nlevels\n        )\n\n        # This if will be removed once multi-column Excel writing\n        # is implemented. For now fixing gh-9794.\n        if c_idx_nlevels > 1:\n            msg = (\n                \"Writing to Excel with MultiIndex columns and no index \"\n                \"\\\\('index'=False\\\\) is not yet implemented.\"\n            )\n            with pytest.raises(NotImplementedError, match=msg):\n                roundtrip(df, use_headers, index=False)\n        else:\n            res = roundtrip(df, use_headers)\n\n            if use_headers:\n                assert res.shape == (nrows, ncols + r_idx_nlevels)\n            else:\n                # First row taken as columns.\n                assert res.shape == (nrows - 1, ncols + r_idx_nlevels)\n\n            # No NaNs.\n            for r in range(len(res.index)):\n                for c in range(len(res.columns)):\n                    assert res.iloc[r, c] is not np.nan\n\n    def test_duplicated_columns(self, path):\n        # see gh-5235\n        df = DataFrame([[1, 2, 3], [1, 2, 3], [1, 2, 3]], columns=[\"A\", \"B\", \"B\"])\n        df.to_excel(path, \"test1\")\n        expected = DataFrame(\n            [[1, 2, 3], [1, 2, 3], [1, 2, 3]], columns=[\"A\", \"B\", \"B.1\"]\n        )\n\n        # By default, we mangle.\n        result = pd.read_excel(path, sheet_name=\"test1\", index_col=0)\n        tm.assert_frame_equal(result, expected)\n\n        # Explicitly, we pass in the parameter.\n        result = pd.read_excel(\n            path, sheet_name=\"test1\", index_col=0, mangle_dupe_cols=True\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # see gh-11007, gh-10970\n        df = DataFrame([[1, 2, 3, 4], [5, 6, 7, 8]], columns=[\"A\", \"B\", \"A\", \"B\"])\n        df.to_excel(path, \"test1\")\n\n        result = pd.read_excel(path, sheet_name=\"test1\", index_col=0)\n        expected = DataFrame(\n            [[1, 2, 3, 4], [5, 6, 7, 8]], columns=[\"A\", \"B\", \"A.1\", \"B.1\"]\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # see gh-10982\n        df.to_excel(path, \"test1\", index=False, header=False)\n        result = pd.read_excel(path, sheet_name=\"test1\", header=None)\n\n        expected = DataFrame([[1, 2, 3, 4], [5, 6, 7, 8]])\n        tm.assert_frame_equal(result, expected)\n\n        msg = \"Setting mangle_dupe_cols=False is not supported yet\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(path, sheet_name=\"test1\", header=None, mangle_dupe_cols=False)\n\n    def test_swapped_columns(self, path):\n        # Test for issue #5427.\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2]})\n        write_frame.to_excel(path, \"test1\", columns=[\"B\", \"A\"])\n\n        read_frame = pd.read_excel(path, sheet_name=\"test1\", header=0)\n\n        tm.assert_series_equal(write_frame[\"A\"], read_frame[\"A\"])\n        tm.assert_series_equal(write_frame[\"B\"], read_frame[\"B\"])\n\n    def test_invalid_columns(self, path):\n        # see gh-10982\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2]})\n\n        with pytest.raises(KeyError, match=\"Not all names specified\"):\n            write_frame.to_excel(path, \"test1\", columns=[\"B\", \"C\"])\n\n        with pytest.raises(\n            KeyError, match=\"'passes columns are not ALL present dataframe'\"\n        ):\n            write_frame.to_excel(path, \"test1\", columns=[\"C\", \"D\"])\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, sheet_name=\"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)\n\n    def test_comment_arg(self, path):\n        # see gh-18735\n        #\n        # Test the comment argument functionality to pd.read_excel.\n\n        # Create file to read in.\n        df = DataFrame({\"A\": [\"one\", \"#one\", \"one\"], \"B\": [\"two\", \"two\", \"#two\"]})\n        df.to_excel(path, \"test_c\")\n\n        # Read file without comment arg.\n        result1 = pd.read_excel(path, sheet_name=\"test_c\", index_col=0)\n\n        result1.iloc[1, 0] = None\n        result1.iloc[1, 1] = None\n        result1.iloc[2, 1] = None\n\n        result2 = pd.read_excel(path, sheet_name=\"test_c\", comment=\"#\", index_col=0)\n        tm.assert_frame_equal(result1, result2)\n\n    def test_comment_default(self, path):\n        # Re issue #18735\n        # Test the comment argument default to pd.read_excel\n\n        # Create file to read in\n        df = DataFrame({\"A\": [\"one\", \"#one\", \"one\"], \"B\": [\"two\", \"two\", \"#two\"]})\n        df.to_excel(path, \"test_c\")\n\n        # Read file with default and explicit comment=None\n        result1 = pd.read_excel(path, sheet_name=\"test_c\")\n        result2 = pd.read_excel(path, sheet_name=\"test_c\", comment=None)\n        tm.assert_frame_equal(result1, result2)\n\n    def test_comment_used(self, path):\n        # see gh-18735\n        #\n        # Test the comment argument is working as expected when used.\n\n        # Create file to read in.\n        df = DataFrame({\"A\": [\"one\", \"#one\", \"one\"], \"B\": [\"two\", \"two\", \"#two\"]})\n        df.to_excel(path, \"test_c\")\n\n        # Test read_frame_comment against manually produced expected output.\n        expected = DataFrame({\"A\": [\"one\", None, \"one\"], \"B\": [\"two\", None, None]})\n        result = pd.read_excel(path, sheet_name=\"test_c\", comment=\"#\", index_col=0)\n        tm.assert_frame_equal(result, expected)\n\n    def test_comment_empty_line(self, path):\n        # Re issue #18735\n        # Test that pd.read_excel ignores commented lines at the end of file\n\n        df = DataFrame({\"a\": [\"1\", \"#2\"], \"b\": [\"2\", \"3\"]})\n        df.to_excel(path, index=False)\n\n        # Test that all-comment lines at EoF are ignored\n        expected = DataFrame({\"a\": [1], \"b\": [2]})\n        result = pd.read_excel(path, comment=\"#\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_datetimes(self, path):\n\n        # Test writing and reading datetimes. For issue #9139. (xref #9185)\n        datetimes = [\n            datetime(2013, 1, 13, 1, 2, 3),\n            datetime(2013, 1, 13, 2, 45, 56),\n            datetime(2013, 1, 13, 4, 29, 49),\n            datetime(2013, 1, 13, 6, 13, 42),\n            datetime(2013, 1, 13, 7, 57, 35),\n            datetime(2013, 1, 13, 9, 41, 28),\n            datetime(2013, 1, 13, 11, 25, 21),\n            datetime(2013, 1, 13, 13, 9, 14),\n            datetime(2013, 1, 13, 14, 53, 7),\n            datetime(2013, 1, 13, 16, 37, 0),\n            datetime(2013, 1, 13, 18, 20, 52),\n        ]\n\n        write_frame = DataFrame({\"A\": datetimes})\n        write_frame.to_excel(path, \"Sheet1\")\n        # GH 35029 - Default changed to openpyxl, but test is for odf/xlrd\n        engine = \"odf\" if path.endswith(\"ods\") else \"xlrd\"\n        read_frame = pd.read_excel(path, sheet_name=\"Sheet1\", header=0, engine=engine)\n\n        tm.assert_series_equal(write_frame[\"A\"], read_frame[\"A\"])\n\n    def test_bytes_io(self, engine):\n        # see gh-7074\n        bio = BytesIO()\n        df = DataFrame(np.random.randn(10, 2))\n\n        # Pass engine explicitly, as there is no file path to infer from.\n        writer = ExcelWriter(bio, engine=engine)\n        df.to_excel(writer)\n        writer.save()\n\n        bio.seek(0)\n        reread_df = pd.read_excel(bio, index_col=0)\n        tm.assert_frame_equal(df, reread_df)\n\n    def test_write_lists_dict(self, path):\n        # see gh-8188.\n        df = DataFrame(\n            {\n                \"mixed\": [\"a\", [\"b\", \"c\"], {\"d\": \"e\", \"f\": 2}],\n                \"numeric\": [1, 2, 3.0],\n                \"str\": [\"apple\", \"banana\", \"cherry\"],\n            }\n        )\n        df.to_excel(path, \"Sheet1\")\n        read = pd.read_excel(path, sheet_name=\"Sheet1\", header=0, index_col=0)\n\n        expected = df.copy()\n        expected.mixed = expected.mixed.apply(str)\n        expected.numeric = expected.numeric.astype(\"int64\")\n\n        tm.assert_frame_equal(read, expected)\n\n    def test_render_as_column_name(self, path):\n        # see gh-34331\n        df = DataFrame({\"render\": [1, 2], \"data\": [3, 4]})\n        df.to_excel(path, \"Sheet1\")\n        read = pd.read_excel(path, \"Sheet1\", index_col=0)\n        expected = df\n        tm.assert_frame_equal(read, expected)\n\n    def test_true_and_false_value_options(self, path):\n        # see gh-13347\n        df = DataFrame([[\"foo\", \"bar\"]], columns=[\"col1\", \"col2\"])\n        expected = df.replace({\"foo\": True, \"bar\": False})\n\n        df.to_excel(path)\n        read_frame = pd.read_excel(\n            path, true_values=[\"foo\"], false_values=[\"bar\"], index_col=0\n        )\n        tm.assert_frame_equal(read_frame, expected)\n\n    def test_freeze_panes(self, path):\n        # see gh-15160\n        expected = DataFrame([[1, 2], [3, 4]], columns=[\"col1\", \"col2\"])\n        expected.to_excel(path, \"Sheet1\", freeze_panes=(1, 1))\n\n        result = pd.read_excel(path, index_col=0)\n        tm.assert_frame_equal(result, expected)\n\n    def test_path_path_lib(self, engine, ext):\n        df = tm.makeDataFrame()\n        writer = partial(df.to_excel, engine=engine)\n\n        reader = partial(pd.read_excel, index_col=0)\n        result = tm.round_trip_pathlib(writer, reader, path=f\"foo{ext}\")\n        tm.assert_frame_equal(result, df)\n\n    def test_path_local_path(self, engine, ext):\n        df = tm.makeDataFrame()\n        writer = partial(df.to_excel, engine=engine)\n\n        reader = partial(pd.read_excel, index_col=0)\n        result = tm.round_trip_localpath(writer, reader, path=f\"foo{ext}\")\n        tm.assert_frame_equal(result, df)\n\n    def test_merged_cell_custom_objects(self, merge_cells, path):\n        # see GH-27006\n        mi = MultiIndex.from_tuples(\n            [\n                (pd.Period(\"2018\"), pd.Period(\"2018Q1\")),\n                (pd.Period(\"2018\"), pd.Period(\"2018Q2\")),\n            ]\n        )\n        expected = DataFrame(np.ones((2, 2)), columns=mi)\n        expected.to_excel(path)\n        result = pd.read_excel(path, header=[0, 1], index_col=0, convert_float=False)\n        # need to convert PeriodIndexes to standard Indexes for assert equal\n        expected.columns = expected.columns.set_levels(\n            [[str(i) for i in mi.levels[0]], [str(i) for i in mi.levels[1]]],\n            level=[0, 1],\n        )\n        expected.index = expected.index.astype(np.float64)\n        tm.assert_frame_equal(expected, result)\n\n    @pytest.mark.parametrize(\"dtype\", [None, object])\n    def test_raise_when_saving_timezones(self, dtype, tz_aware_fixture, path):\n        # GH 27008, GH 7056\n        tz = tz_aware_fixture\n        data = pd.Timestamp(\"2019\", tz=tz)\n        df = DataFrame([data], dtype=dtype)\n        with pytest.raises(ValueError, match=\"Excel does not support\"):\n            df.to_excel(path)\n\n        data = data.to_pydatetime()\n        df = DataFrame([data], dtype=dtype)\n        with pytest.raises(ValueError, match=\"Excel does not support\"):\n            df.to_excel(path)\n\n\nclass TestExcelWriterEngineTests:\n    @pytest.mark.parametrize(\n        \"klass,ext\",\n        [\n            pytest.param(_XlsxWriter, \".xlsx\", marks=td.skip_if_no(\"xlsxwriter\")),\n            pytest.param(_OpenpyxlWriter, \".xlsx\", marks=td.skip_if_no(\"openpyxl\")),\n            pytest.param(_XlwtWriter, \".xls\", marks=td.skip_if_no(\"xlwt\")),\n        ],\n    )\n    def test_ExcelWriter_dispatch(self, klass, ext):\n        with tm.ensure_clean(ext) as path:\n            writer = ExcelWriter(path)\n            if ext == \".xlsx\" and td.safe_import(\"xlsxwriter\"):\n                # xlsxwriter has preference over openpyxl if both installed\n                assert isinstance(writer, _XlsxWriter)\n            else:\n                assert isinstance(writer, klass)\n\n    def test_ExcelWriter_dispatch_raises(self):\n        with pytest.raises(ValueError, match=\"No engine\"):\n            ExcelWriter(\"nothing\")\n\n    def test_register_writer(self):\n        # some awkward mocking to test out dispatch and such actually works\n        called_save = []\n        called_write_cells = []\n\n        class DummyClass(ExcelWriter):\n            called_save = False\n            called_write_cells = False\n            supported_extensions = [\"xlsx\", \"xls\"]\n            engine = \"dummy\"\n\n            def save(self):\n                called_save.append(True)\n\n            def write_cells(self, *args, **kwargs):\n                called_write_cells.append(True)\n\n        def check_called(func):\n            func()\n            assert len(called_save) >= 1\n            assert len(called_write_cells) >= 1\n            del called_save[:]\n            del called_write_cells[:]\n\n        with pd.option_context(\"io.excel.xlsx.writer\", \"dummy\"):\n            path = \"something.xlsx\"\n            with tm.ensure_clean(path) as filepath:\n                register_writer(DummyClass)\n                writer = ExcelWriter(filepath)\n                assert isinstance(writer, DummyClass)\n                df = tm.makeCustomDataframe(1, 1)\n                check_called(lambda: df.to_excel(filepath))\n            with tm.ensure_clean(\"something.xls\") as filepath:\n                check_called(lambda: df.to_excel(filepath, engine=\"dummy\"))\n\n\n@td.skip_if_no(\"xlrd\")\n@td.skip_if_no(\"openpyxl\")\nclass TestFSPath:\n    def test_excelfile_fspath(self):\n        with tm.ensure_clean(\"foo.xlsx\") as path:\n            df = DataFrame({\"A\": [1, 2]})\n            df.to_excel(path)\n            xl = ExcelFile(path)\n            result = os.fspath(xl)\n            assert result == path\n\n    def test_excelwriter_fspath(self):\n        with tm.ensure_clean(\"foo.xlsx\") as path:\n            writer = ExcelWriter(path)\n            assert os.fspath(writer) == str(path)\n"
    },
    {
      "filename": "pandas/tests/io/excel/test_xlrd.py",
      "content": "import pytest\n\nfrom pandas.compat._optional import import_optional_dependency\n\nimport pandas as pd\nimport pandas._testing as tm\n\nfrom pandas.io.excel import ExcelFile\n\nxlrd = pytest.importorskip(\"xlrd\")\nxlwt = pytest.importorskip(\"xlwt\")\n\n\n@pytest.fixture(autouse=True)\ndef skip_ods_and_xlsb_files(read_ext):\n    if read_ext == \".ods\":\n        pytest.skip(\"Not valid for xlrd\")\n    if read_ext == \".xlsb\":\n        pytest.skip(\"Not valid for xlrd\")\n\n\ndef test_read_xlrd_book(read_ext, frame):\n    df = frame\n\n    engine = \"xlrd\"\n    sheet_name = \"SheetA\"\n\n    with tm.ensure_clean(read_ext) as pth:\n        df.to_excel(pth, sheet_name)\n        book = xlrd.open_workbook(pth)\n\n        with ExcelFile(book, engine=engine) as xl:\n            result = pd.read_excel(xl, sheet_name=sheet_name, index_col=0)\n            tm.assert_frame_equal(df, result)\n\n        result = pd.read_excel(book, sheet_name=sheet_name, engine=engine, index_col=0)\n        tm.assert_frame_equal(df, result)\n\n\n# TODO: test for openpyxl as well\ndef test_excel_table_sheet_by_index(datapath, read_ext):\n    path = datapath(\"io\", \"data\", \"excel\", f\"test1{read_ext}\")\n    with ExcelFile(path, engine=\"xlrd\") as excel:\n        with pytest.raises(xlrd.XLRDError):\n            pd.read_excel(excel, sheet_name=\"asdf\")\n\n\ndef test_excel_file_warning_with_xlsx_file(datapath):\n    # GH 29375\n    path = datapath(\"io\", \"data\", \"excel\", \"test1.xlsx\")\n    has_openpyxl = (\n        import_optional_dependency(\n            \"openpyxl\", raise_on_missing=False, on_version=\"ignore\"\n        )\n        is not None\n    )\n    if not has_openpyxl:\n        with tm.assert_produces_warning(\n            FutureWarning,\n            raise_on_extra_warnings=False,\n            match=\"The xlrd engine is no longer maintained\",\n        ):\n            ExcelFile(path, engine=None)\n    else:\n        with tm.assert_produces_warning(None):\n            pd.read_excel(path, \"Sheet1\", engine=None)\n\n\ndef test_read_excel_warning_with_xlsx_file(tmpdir, datapath):\n    # GH 29375\n    path = datapath(\"io\", \"data\", \"excel\", \"test1.xlsx\")\n    has_openpyxl = (\n        import_optional_dependency(\n            \"openpyxl\", raise_on_missing=False, on_version=\"ignore\"\n        )\n        is not None\n    )\n    if not has_openpyxl:\n        with tm.assert_produces_warning(\n            FutureWarning,\n            raise_on_extra_warnings=False,\n            match=\"The xlrd engine is no longer maintained\",\n        ):\n            pd.read_excel(path, \"Sheet1\", engine=None)\n    else:\n        with tm.assert_produces_warning(None):\n            pd.read_excel(path, \"Sheet1\", engine=None)\n"
    }
  ]
}