{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "54727",
  "issue_description": "# ENH: make guess_datetime_format public\n\n### Feature Type\n\n- [ ] Adding new functionality to pandas\n\n- [X] Changing existing functionality in pandas\n\n- [ ] Removing existing functionality in pandas\n\n\n### Problem Description\n\nPandas can infer datetime formats when parsing datetimes, but does not provide access to the inferred format via a public API.\n\n### Feature Description\n\nCurrently, `guess_datetime_format` is in `pandas.core.tools.datetimes` which is not public. Exporting it from a non-private module would address the issue.\n\n### Alternative Solutions\n\nAs far as I can tell, no other Python library provides this requested feature.\n\n### Additional Context\n\nAs discussed in https://github.com/dateutil/dateutil/issues/1138",
  "issue_comments": [
    {
      "id": 1692079047,
      "user": "MarcoGorelli",
      "body": "sounds good - fancy making a pull request?"
    },
    {
      "id": 1692293740,
      "user": "nikhilreddy2002",
      "body": "take"
    },
    {
      "id": 1692376436,
      "user": "nikhilreddy2002",
      "body": "Hey @joefutrelle ,\r\nI could not find `guess_datetime_format`  are you referring to `_guess_datetime_format_for_array`?"
    },
    {
      "id": 1692382911,
      "user": "joefutrelle",
      "body": "If I read this correctly, the import into `pandas.core.tools.datetimes` is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/core/tools/datetimes.py#L36) and the implementation is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/_libs/tslibs/parsing.pyx#L867)."
    },
    {
      "id": 1692430781,
      "user": "nikhilreddy2002",
      "body": "Hey @joefutrelle ,\r\nFrom what I understood the `guess_datetime_format` should be moved to `pandas.core.tools.datetimes`, is this correct or is there some other place it should be. Or should I write a function in `pandas.core.tools.datetimes` which uses `guess_datetime_format`  internally?"
    },
    {
      "id": 1693185750,
      "user": "joefutrelle",
      "body": "According to the docs, everything in `pandas.core.*` is private, so it would need to go somewhere else. `to_datetime` is at the top level and because this is related it could go there but I would defer to core developers on where the appropriate place for datetime utilities is.\r\n\r\n> The pandas.core, pandas.compat, and pandas.util top-level modules are PRIVATE. Stable functionality in such modules is not guaranteed."
    },
    {
      "id": 1693487989,
      "user": "MarcoGorelli",
      "body": "How about adding `pandas.api.tools`, and putting this in there?"
    },
    {
      "id": 1694244819,
      "user": "MarcoGorelli",
      "body": "As suggested on Slack by @mroeschke , `pandas.tseries` might be a better place"
    },
    {
      "id": 1702629610,
      "user": "Birger9",
      "body": "Hi! Is see that @nikhilreddy2002 is assigned to this issue. But I can't see any activity the last week. I would like to start contributing to this project. I'm studying an open source course at University that requires us to get involved in an open source project. So I would love to contribute to Pandas codebase :) And this issue seems like a good start for me @joefutrelle "
    },
    {
      "id": 1702672137,
      "user": "MarcoGorelli",
      "body": "Sure go ahead thanks"
    },
    {
      "id": 1710930186,
      "user": "nnlnr",
      "body": "ðŸ‘‹ Hi there @Birger9, I hope you're doing well. I noticed that this issue hasn't seen any recent activity, and was wondering if you were still working on it? If not, would it be alright if I picked it up?"
    },
    {
      "id": 1711290113,
      "user": "MarcoGorelli",
      "body": "feel free to submit a pull request"
    },
    {
      "id": 1711505350,
      "user": "nnlnr",
      "body": "ok great - thanks @MarcoGorelli!"
    },
    {
      "id": 1711505772,
      "user": "nnlnr",
      "body": "take"
    }
  ],
  "text_context": "# ENH: make guess_datetime_format public\n\n### Feature Type\n\n- [ ] Adding new functionality to pandas\n\n- [X] Changing existing functionality in pandas\n\n- [ ] Removing existing functionality in pandas\n\n\n### Problem Description\n\nPandas can infer datetime formats when parsing datetimes, but does not provide access to the inferred format via a public API.\n\n### Feature Description\n\nCurrently, `guess_datetime_format` is in `pandas.core.tools.datetimes` which is not public. Exporting it from a non-private module would address the issue.\n\n### Alternative Solutions\n\nAs far as I can tell, no other Python library provides this requested feature.\n\n### Additional Context\n\nAs discussed in https://github.com/dateutil/dateutil/issues/1138\n\nsounds good - fancy making a pull request?\n\ntake\n\nHey @joefutrelle ,\r\nI could not find `guess_datetime_format`  are you referring to `_guess_datetime_format_for_array`?\n\nIf I read this correctly, the import into `pandas.core.tools.datetimes` is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/core/tools/datetimes.py#L36) and the implementation is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/_libs/tslibs/parsing.pyx#L867).\n\nHey @joefutrelle ,\r\nFrom what I understood the `guess_datetime_format` should be moved to `pandas.core.tools.datetimes`, is this correct or is there some other place it should be. Or should I write a function in `pandas.core.tools.datetimes` which uses `guess_datetime_format`  internally?\n\nAccording to the docs, everything in `pandas.core.*` is private, so it would need to go somewhere else. `to_datetime` is at the top level and because this is related it could go there but I would defer to core developers on where the appropriate place for datetime utilities is.\r\n\r\n> The pandas.core, pandas.compat, and pandas.util top-level modules are PRIVATE. Stable functionality in such modules is not guaranteed.\n\nHow about adding `pandas.api.tools`, and putting this in there?\n\nAs suggested on Slack by @mroeschke , `pandas.tseries` might be a better place\n\nHi! Is see that @nikhilreddy2002 is assigned to this issue. But I can't see any activity the last week. I would like to start contributing to this project. I'm studying an open source course at University that requires us to get involved in an open source project. So I would love to contribute to Pandas codebase :) And this issue seems like a good start for me @joefutrelle \n\nSure go ahead thanks\n\nðŸ‘‹ Hi there @Birger9, I hope you're doing well. I noticed that this issue hasn't seen any recent activity, and was wondering if you were still working on it? If not, would it be alright if I picked it up?\n\nfeel free to submit a pull request\n\nok great - thanks @MarcoGorelli!\n\ntake",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/55079",
  "code_context": [
    {
      "filename": "pandas/_libs/tslibs/__init__.py",
      "content": "__all__ = [\n    \"dtypes\",\n    \"localize_pydatetime\",\n    \"NaT\",\n    \"NaTType\",\n    \"iNaT\",\n    \"nat_strings\",\n    \"OutOfBoundsDatetime\",\n    \"OutOfBoundsTimedelta\",\n    \"IncompatibleFrequency\",\n    \"Period\",\n    \"Resolution\",\n    \"Timedelta\",\n    \"normalize_i8_timestamps\",\n    \"is_date_array_normalized\",\n    \"dt64arr_to_periodarr\",\n    \"delta_to_nanoseconds\",\n    \"ints_to_pydatetime\",\n    \"ints_to_pytimedelta\",\n    \"get_resolution\",\n    \"Timestamp\",\n    \"tz_convert_from_utc_single\",\n    \"tz_convert_from_utc\",\n    \"to_offset\",\n    \"Tick\",\n    \"BaseOffset\",\n    \"tz_compare\",\n    \"is_unitless\",\n    \"astype_overflowsafe\",\n    \"get_unit_from_dtype\",\n    \"periods_per_day\",\n    \"periods_per_second\",\n    \"is_supported_unit\",\n    \"npy_unit_to_abbrev\",\n    \"get_supported_reso\",\n    \"guess_datetime_format\",\n]\n\nfrom pandas._libs.tslibs import dtypes  # pylint: disable=import-self\nfrom pandas._libs.tslibs.conversion import localize_pydatetime\nfrom pandas._libs.tslibs.dtypes import (\n    Resolution,\n    get_supported_reso,\n    is_supported_unit,\n    npy_unit_to_abbrev,\n    periods_per_day,\n    periods_per_second,\n)\nfrom pandas._libs.tslibs.nattype import (\n    NaT,\n    NaTType,\n    iNaT,\n    nat_strings,\n)\nfrom pandas._libs.tslibs.np_datetime import (\n    OutOfBoundsDatetime,\n    OutOfBoundsTimedelta,\n    astype_overflowsafe,\n    is_unitless,\n    py_get_unit_from_dtype as get_unit_from_dtype,\n)\nfrom pandas._libs.tslibs.offsets import (\n    BaseOffset,\n    Tick,\n    to_offset,\n)\nfrom pandas._libs.tslibs.parsing import guess_datetime_format\nfrom pandas._libs.tslibs.period import (\n    IncompatibleFrequency,\n    Period,\n)\nfrom pandas._libs.tslibs.timedeltas import (\n    Timedelta,\n    delta_to_nanoseconds,\n    ints_to_pytimedelta,\n)\nfrom pandas._libs.tslibs.timestamps import Timestamp\nfrom pandas._libs.tslibs.timezones import tz_compare\nfrom pandas._libs.tslibs.tzconversion import tz_convert_from_utc_single\nfrom pandas._libs.tslibs.vectorized import (\n    dt64arr_to_periodarr,\n    get_resolution,\n    ints_to_pydatetime,\n    is_date_array_normalized,\n    normalize_i8_timestamps,\n    tz_convert_from_utc,\n)\n"
    },
    {
      "filename": "pandas/tests/tslibs/test_api.py",
      "content": "\"\"\"Tests that the tslibs API is locked down\"\"\"\n\nfrom pandas._libs import tslibs\n\n\ndef test_namespace():\n    submodules = [\n        \"base\",\n        \"ccalendar\",\n        \"conversion\",\n        \"dtypes\",\n        \"fields\",\n        \"nattype\",\n        \"np_datetime\",\n        \"offsets\",\n        \"parsing\",\n        \"period\",\n        \"strptime\",\n        \"vectorized\",\n        \"timedeltas\",\n        \"timestamps\",\n        \"timezones\",\n        \"tzconversion\",\n    ]\n\n    api = [\n        \"BaseOffset\",\n        \"NaT\",\n        \"NaTType\",\n        \"iNaT\",\n        \"nat_strings\",\n        \"OutOfBoundsDatetime\",\n        \"OutOfBoundsTimedelta\",\n        \"Period\",\n        \"IncompatibleFrequency\",\n        \"Resolution\",\n        \"Tick\",\n        \"Timedelta\",\n        \"dt64arr_to_periodarr\",\n        \"Timestamp\",\n        \"is_date_array_normalized\",\n        \"ints_to_pydatetime\",\n        \"normalize_i8_timestamps\",\n        \"get_resolution\",\n        \"delta_to_nanoseconds\",\n        \"ints_to_pytimedelta\",\n        \"localize_pydatetime\",\n        \"tz_convert_from_utc\",\n        \"tz_convert_from_utc_single\",\n        \"to_offset\",\n        \"tz_compare\",\n        \"is_unitless\",\n        \"astype_overflowsafe\",\n        \"get_unit_from_dtype\",\n        \"periods_per_day\",\n        \"periods_per_second\",\n        \"is_supported_unit\",\n        \"get_supported_reso\",\n        \"npy_unit_to_abbrev\",\n        \"guess_datetime_format\",\n    ]\n\n    expected = set(submodules + api)\n    names = [x for x in dir(tslibs) if not x.startswith(\"__\")]\n    assert set(names) == expected\n"
    },
    {
      "filename": "pandas/tseries/api.py",
      "content": "\"\"\"\nTimeseries API\n\"\"\"\n\nfrom pandas._libs.tslibs.parsing import guess_datetime_format\n\nfrom pandas.tseries import offsets\nfrom pandas.tseries.frequencies import infer_freq\n\n__all__ = [\"infer_freq\", \"offsets\", \"guess_datetime_format\"]\n"
    }
  ],
  "questions": [
    "Hey @joefutrelle ,\r\nI could not find `guess_datetime_format`  are you referring to `_guess_datetime_format_for_array`?",
    "Hey @joefutrelle ,\r\nFrom what I understood the `guess_datetime_format` should be moved to `pandas.core.tools.datetimes`, is this correct or is there some other place it should be. Or should I write a function in `pandas.core.tools.datetimes` which uses `guess_datetime_format`  internally?",
    "How about adding `pandas.api.tools`, and putting this in there?"
  ],
  "golden_answers": [
    "If I read this correctly, the import into `pandas.core.tools.datetimes` is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/core/tools/datetimes.py#L36) and the implementation is [here](https://github.com/pandas-dev/pandas/blob/1ecfa6749d07a08d501d56b98ae60d483cf1078f/pandas/_libs/tslibs/parsing.pyx#L867).",
    "According to the docs, everything in `pandas.core.*` is private, so it would need to go somewhere else. `to_datetime` is at the top level and because this is related it could go there but I would defer to core developers on where the appropriate place for datetime utilities is.\r\n\r\n> The pandas.core, pandas.compat, and pandas.util top-level modules are PRIVATE. Stable functionality in such modules is not guaranteed.",
    "As suggested on Slack by @mroeschke , `pandas.tseries` might be a better place"
  ],
  "questions_generated": [
    "Where is the current implementation of `guess_datetime_format` located in the pandas codebase?",
    "Why is there a need to make `guess_datetime_format` a public API in pandas?",
    "What are the suggested locations for exporting the `guess_datetime_format` function to make it public?",
    "What is the significance of the `__all__` variable in the `pandas/_libs/tslibs/__init__.py` file?",
    "What challenges might arise in placing `guess_datetime_format` in `pandas.core.tools.datetimes`?"
  ],
  "golden_answers_generated": [
    "The current implementation of `guess_datetime_format` is located in `pandas/_libs/tslibs/parsing.pyx` as indicated by the import statement in `pandas/core/tools/datetimes.py`.",
    "Pandas can infer datetime formats when parsing datetimes, but it does not currently provide access to the inferred format via a public API. Making `guess_datetime_format` public would allow users to directly access the inferred datetime format.",
    "One suggestion was to create a new module `pandas.api.tools` to house the function. Another suggestion was to place it in `pandas.tseries`, which might be a better fit for datetime-related utilities.",
    "The `__all__` variable in `pandas/_libs/tslibs/__init__.py` specifies the public API of the module by listing the names of the functions and classes that should be accessible when the module is imported.",
    "Placing `guess_datetime_format` in `pandas.core.tools.datetimes` could be problematic because according to the documentation, everything in `pandas.core.*` is considered private, and stable functionality is not guaranteed. Thus, it would not provide the intended public access to the function."
  ]
}