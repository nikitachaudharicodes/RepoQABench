{
  "repo_name": "matplotlib_matplotlib",
  "issue_id": "22686",
  "issue_description": "# [Bug]: cannot give init value for RangeSlider widget\n\n### Bug summary\r\n\r\nI think `xy[4] = .25, val[0]` should be commented in /matplotlib/widgets. py\", line 915, in set_val\r\nas it prevents to initialized value for RangeSlider\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import RangeSlider\r\n\r\n# generate a fake image\r\nnp.random.seed(19680801)\r\nN = 128\r\nimg = np.random.randn(N, N)\r\n\r\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\r\nfig.subplots_adjust(bottom=0.25)\r\n\r\nim = axs[0].imshow(img)\r\naxs[1].hist(img.flatten(), bins='auto')\r\naxs[1].set_title('Histogram of pixel intensities')\r\n\r\n# Create the RangeSlider\r\nslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\r\nslider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n# Create the Vertical lines on the histogram\r\nlower_limit_line = axs[1].axvline(slider.val[0], color='k')\r\nupper_limit_line = axs[1].axvline(slider.val[1], color='k')\r\n\r\n\r\ndef update(val):\r\n    # The val passed to a callback by the RangeSlider will\r\n    # be a tuple of (min, max)\r\n\r\n    # Update the image's colormap\r\n    im.norm.vmin = val[0]\r\n    im.norm.vmax = val[1]\r\n\r\n    # Update the position of the vertical lines\r\n    lower_limit_line.set_xdata([val[0], val[0]])\r\n    upper_limit_line.set_xdata([val[1], val[1]])\r\n\r\n    # Redraw the figure to ensure it updates\r\n    fig.canvas.draw_idle()\r\n\r\n\r\nslider.on_changed(update)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```python\r\n  File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\r\n    slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\r\n    self.set_val(valinit)\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\r\n    xy[4] = val[0], .25\r\n\r\nIndexError: index 4 is out of bounds for axis 0 with size 4\r\n```\r\n\r\n### Expected outcome\r\n\r\nrange slider with user initial values\r\n\r\n### Additional information\r\n\r\nerror can be removed by commenting this line\r\n```python\r\n\r\n    def set_val(self, val):\r\n        \"\"\"\r\n        Set slider value to *val*.\r\n\r\n        Parameters\r\n        ----------\r\n        val : tuple or array-like of float\r\n        \"\"\"\r\n        val = np.sort(np.asanyarray(val))\r\n        if val.shape != (2,):\r\n            raise ValueError(\r\n                f\"val must have shape (2,) but has shape {val.shape}\"\r\n            )\r\n        val[0] = self._min_in_bounds(val[0])\r\n        val[1] = self._max_in_bounds(val[1])\r\n        xy = self.poly.xy\r\n        if self.orientation == \"vertical\":\r\n            xy[0] = .25, val[0]\r\n            xy[1] = .25, val[1]\r\n            xy[2] = .75, val[1]\r\n            xy[3] = .75, val[0]\r\n            # xy[4] = .25, val[0]\r\n        else:\r\n            xy[0] = val[0], .25\r\n            xy[1] = val[0], .75\r\n            xy[2] = val[1], .75\r\n            xy[3] = val[1], .25\r\n            # xy[4] = val[0], .25\r\n        self.poly.xy = xy\r\n        self.valtext.set_text(self._format(val))\r\n        if self.drawon:\r\n            self.ax.figure.canvas.draw_idle()\r\n        self.val = val\r\n        if self.eventson:\r\n            self._observers.process(\"changed\", val)\r\n\r\n```\r\n\r\n### Operating system\r\n\r\nOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.5.1\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip",
  "issue_comments": [
    {
      "id": 1075872580,
      "user": "WeatherGod",
      "body": "Huh, the polygon object must have changed inadvertently. Usually, you have\nto \"close\" the polygon by repeating the first vertex, but we make it\npossible for polygons to auto-close themselves. I wonder how (when?) this\nbroke?\n\nOn Tue, Mar 22, 2022 at 10:29 PM vpicouet ***@***.***> wrote:\n\n> Bug summary\n>\n> I think xy[4] = .25, val[0] should be commented in /matplotlib/widgets.\n> py\", line 915, in set_val\n> as it prevents to initialized value for RangeSlider\n> Code for reproduction\n>\n> import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.widgets import RangeSlider\n> # generate a fake imagenp.random.seed(19680801)N = 128img = np.random.randn(N, N)\n> fig, axs = plt.subplots(1, 2, figsize=(10, 5))fig.subplots_adjust(bottom=0.25)\n> im = axs[0].imshow(img)axs[1].hist(img.flatten(), bins='auto')axs[1].set_title('Histogram of pixel intensities')\n> # Create the RangeSliderslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n> # Create the Vertical lines on the histogramlower_limit_line = axs[1].axvline(slider.val[0], color='k')upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n>\n> def update(val):\n>     # The val passed to a callback by the RangeSlider will\n>     # be a tuple of (min, max)\n>\n>     # Update the image's colormap\n>     im.norm.vmin = val[0]\n>     im.norm.vmax = val[1]\n>\n>     # Update the position of the vertical lines\n>     lower_limit_line.set_xdata([val[0], val[0]])\n>     upper_limit_line.set_xdata([val[1], val[1]])\n>\n>     # Redraw the figure to ensure it updates\n>     fig.canvas.draw_idle()\n>\n> slider.on_changed(update)plt.show()\n>\n> Actual outcome\n>\n>   File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\n>     slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\n>     self.set_val(valinit)\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\n>     xy[4] = val[0], .25\n>\n> IndexError: index 4 is out of bounds for axis 0 with size 4\n>\n> Expected outcome\n>\n> range slider with user initial values\n> Additional information\n>\n> error can be\n>\n>\n>     def set_val(self, val):\n>         \"\"\"\n>         Set slider value to *val*.\n>\n>         Parameters\n>         ----------\n>         val : tuple or array-like of float\n>         \"\"\"\n>         val = np.sort(np.asanyarray(val))\n>         if val.shape != (2,):\n>             raise ValueError(\n>                 f\"val must have shape (2,) but has shape {val.shape}\"\n>             )\n>         val[0] = self._min_in_bounds(val[0])\n>         val[1] = self._max_in_bounds(val[1])\n>         xy = self.poly.xy\n>         if self.orientation == \"vertical\":\n>             xy[0] = .25, val[0]\n>             xy[1] = .25, val[1]\n>             xy[2] = .75, val[1]\n>             xy[3] = .75, val[0]\n>             # xy[4] = .25, val[0]\n>         else:\n>             xy[0] = val[0], .25\n>             xy[1] = val[0], .75\n>             xy[2] = val[1], .75\n>             xy[3] = val[1], .25\n>             # xy[4] = val[0], .25\n>         self.poly.xy = xy\n>         self.valtext.set_text(self._format(val))\n>         if self.drawon:\n>             self.ax.figure.canvas.draw_idle()\n>         self.val = val\n>         if self.eventson:\n>             self._observers.process(\"changed\", val)\n>\n>\n> Operating system\n>\n> OSX\n> Matplotlib Version\n>\n> 3.5.1\n> Matplotlib Backend\n>\n> *No response*\n> Python version\n>\n> 3.8\n> Jupyter version\n>\n> *No response*\n> Installation\n>\n> pip\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/22686>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACHF6CW2HVLKT5Q56BVZDLVBJ6X7ANCNFSM5RMUEIDQ>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n"
    },
    {
      "id": 1075873794,
      "user": "vpicouet",
      "body": "Yes, i might have been too fast, cause it allows to skip the error but then it seems that the polygon is not right...\r\nLet me know if you know how this should be solved...\r\n![Capture d’écran, le 2022-03-22 à 23 20 23](https://user-images.githubusercontent.com/37241971/159617326-44c69bfc-bf0a-4f79-ab23-925c7066f2c2.jpg)\r\n\r\n"
    },
    {
      "id": 1076492203,
      "user": "ianhi",
      "body": "So I think you found an edge case because your valinit has both values equal. This means that the poly object created by `axhspan` is not as large as the rest of the code expects. \r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/11737d0694109f71d2603ba67d764aa2fb302761/lib/matplotlib/widgets.py#L722\r\n\r\nA quick workaround is to have the valinit contain two different numbers (even if only minuscule difference)"
    },
    {
      "id": 1076494218,
      "user": "vpicouet",
      "body": "Yes you are right!\r\nThanks a lot for digging into this!!"
    },
    {
      "id": 1076495530,
      "user": "ianhi",
      "body": "Compare:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\npoly_same_valinit = ax.axvspan(0, 0, 0, 1)\r\npoly_diff_valinit = ax.axvspan(0, .5, 0, 1)\r\nprint(poly_same_valinit.xy.shape)\r\nprint(poly_diff_valinit.xy.shape)\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\n(4, 2)\r\n(5, 2)\r\n```\r\n"
    },
    {
      "id": 1076496982,
      "user": "ianhi",
      "body": "Two solutions spring to mind:\r\n\r\n1. Easier option\r\nThrow an error in init if `valinit[0] == valinit[1]`\r\n\r\n2. Maybe better option?\r\nDon't use axhspan and manually create the poly to ensure it always has the expected number of vertices"
    },
    {
      "id": 1076498455,
      "user": "vpicouet",
      "body": "Option 2 might be better yes"
    },
    {
      "id": 1076498825,
      "user": "ianhi",
      "body": "@vpicouet any interest in opening a PR?"
    },
    {
      "id": 1079387017,
      "user": "vpicouet",
      "body": "I don't think I am qualified to do so, never opened a PR yet. \r\nRangeSlider might also contain another issue. \r\nWhen I call `RangeSlider.set_val([0.0,0.1])`\r\nIt changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n![Capture d’écran, le 2022-03-25 à 15 53 44](https://user-images.githubusercontent.com/37241971/160191943-aef5fbe2-2f54-42ae-9719-23375767b212.jpg)\r\n "
    },
    {
      "id": 1079470256,
      "user": "ianhi",
      "body": "> I don't think I am qualified to do so, never opened a PR yet.\r\n\r\nThat's always true until you've opened your first one :). But I also understand that it can be intimidating.\r\n\r\n\r\n>  RangeSlider might also contain another issue.\r\n> When I call RangeSlider.set_val([0.0,0.1])\r\n> It changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n\r\n\r\noh hmm - good catch! may be worth opening a separate issue there as these are two distinct bugs and this one may be a bit more comlicated to fix."
    },
    {
      "id": 1079474197,
      "user": "vpicouet",
      "body": "Haha true! I might try when I have more time!\r\nThrowing an error at least as I have never worked with axhspan and polys.\r\nOk, openning another issue."
    },
    {
      "id": 1079714801,
      "user": "nik1097",
      "body": "Can I try working on this? @ianhi @vpicouet \r\nFrom the discussion, I could identify that a quick fix would be to use a try-except block to throw an error \r\nif valinit[0] == valinit[1]\r\n\r\nPlease let me know your thoughts."
    },
    {
      "id": 1079718200,
      "user": "vpicouet",
      "body": "Sure! "
    },
    {
      "id": 1079809383,
      "user": "ianhi",
      "body": "@nik1097 anyone can work on any issue at any point - no need to ask :) The only thing you should do is check that theres not already a PR for it.\r\n\r\n> From the discussion, I could identify that a quick fix would be to use a try-except block to throw an error\r\n> if valinit[0] == valinit[1]\r\n\r\n> Please let me know your thoughts.\r\n\r\nwhile this would have made this an explicit error I think we should use this an opportunity to improve the functionality by using option 2 from https://github.com/matplotlib/matplotlib/issues/22686#issuecomment-1076496982\r\n\r\nThat creation code will look something like what axhspan does internally ( replacing `self` with `self.ax`)\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/710fce3df95e22701bd68bf6af2c8adbc9d67a79/lib/matplotlib/axes/_axes.py#L988-L993\r\nwith the key difference that the `verts` variable should be defined as `verts = np.zeros([5,2])` and then the values should be filled the same way they are in the `set_val` method here: https://github.com/matplotlib/matplotlib/blob/2e921df22ba6b2a7782241798b042403c04cbdaf/lib/matplotlib/widgets.py#L901-L912\r\n"
    },
    {
      "id": 1079938642,
      "user": "nik1097",
      "body": "Hey, I guess the below PR should fix this issue too. If I'm not wrong, I will wait for the PR to be approved.\r\nhttps://github.com/matplotlib/matplotlib/pull/22711"
    },
    {
      "id": 1079942502,
      "user": "ianhi",
      "body": "@nik1097 that PR doesn't address this issue so no need to wait for that one"
    },
    {
      "id": 1080025685,
      "user": "nik1097",
      "body": "Yes, it makes sense now. Will get back to you asap @ianhi \r\n"
    },
    {
      "id": 1086298948,
      "user": "AnnaMastori",
      "body": "Is someone still working on this ?"
    },
    {
      "id": 1086348684,
      "user": "nik1097",
      "body": "I still am but I'm currently caught up with another project. Feel free to give it a shot, thanks! @AnnaMastori \r\n"
    },
    {
      "id": 1111092124,
      "user": "NickolasGiannatos",
      "body": "should this be the expected outcome of the solution?\r\n![Στιγμιότυπο οθόνης (104)](https://user-images.githubusercontent.com/72826029/165545175-aca35912-1b46-491d-8fb3-841e1ae4a1c4.png)\r\n"
    },
    {
      "id": 1111125953,
      "user": "ianhi",
      "body": "@NickolasGiannatos that looks like the correct starting position if you give an init value of `(0, 0)`. The next things to check are that it looks correct when you move the slider around, and that it looks correct with init values like `(.3, .5)`"
    },
    {
      "id": 1111250958,
      "user": "AnnaMastori",
      "body": "@ianhi Me and @NickolasGiannatos work together. It works for (.3, .5). Is there anything else that we should try ?\r\n![Στιγμιότυπο οθόνης (107)](https://user-images.githubusercontent.com/72812754/165580835-cc41e3f7-7761-42e2-b276-2e1f9c12fffa.png)\r\n "
    },
    {
      "id": 1111272714,
      "user": "ianhi",
      "body": "@AnnaMastori @NickolasGiannatos can you please open a PR with your changes? It makes it much easier to discuss if we can all look at the same code."
    },
    {
      "id": 1111293730,
      "user": "NickolasGiannatos",
      "body": "okay we will do it as soon as possible although it's our first time so there might be mistakes."
    },
    {
      "id": 1111294626,
      "user": "ianhi",
      "body": ">  our first time so there might be mistakes.\r\n\r\nThat's fine! I had lots of mistakes my first time"
    }
  ],
  "text_context": "# [Bug]: cannot give init value for RangeSlider widget\n\n### Bug summary\r\n\r\nI think `xy[4] = .25, val[0]` should be commented in /matplotlib/widgets. py\", line 915, in set_val\r\nas it prevents to initialized value for RangeSlider\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import RangeSlider\r\n\r\n# generate a fake image\r\nnp.random.seed(19680801)\r\nN = 128\r\nimg = np.random.randn(N, N)\r\n\r\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\r\nfig.subplots_adjust(bottom=0.25)\r\n\r\nim = axs[0].imshow(img)\r\naxs[1].hist(img.flatten(), bins='auto')\r\naxs[1].set_title('Histogram of pixel intensities')\r\n\r\n# Create the RangeSlider\r\nslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\r\nslider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n# Create the Vertical lines on the histogram\r\nlower_limit_line = axs[1].axvline(slider.val[0], color='k')\r\nupper_limit_line = axs[1].axvline(slider.val[1], color='k')\r\n\r\n\r\ndef update(val):\r\n    # The val passed to a callback by the RangeSlider will\r\n    # be a tuple of (min, max)\r\n\r\n    # Update the image's colormap\r\n    im.norm.vmin = val[0]\r\n    im.norm.vmax = val[1]\r\n\r\n    # Update the position of the vertical lines\r\n    lower_limit_line.set_xdata([val[0], val[0]])\r\n    upper_limit_line.set_xdata([val[1], val[1]])\r\n\r\n    # Redraw the figure to ensure it updates\r\n    fig.canvas.draw_idle()\r\n\r\n\r\nslider.on_changed(update)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```python\r\n  File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\r\n    slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\r\n    self.set_val(valinit)\r\n\r\n  File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\r\n    xy[4] = val[0], .25\r\n\r\nIndexError: index 4 is out of bounds for axis 0 with size 4\r\n```\r\n\r\n### Expected outcome\r\n\r\nrange slider with user initial values\r\n\r\n### Additional information\r\n\r\nerror can be removed by commenting this line\r\n```python\r\n\r\n    def set_val(self, val):\r\n        \"\"\"\r\n        Set slider value to *val*.\r\n\r\n        Parameters\r\n        ----------\r\n        val : tuple or array-like of float\r\n        \"\"\"\r\n        val = np.sort(np.asanyarray(val))\r\n        if val.shape != (2,):\r\n            raise ValueError(\r\n                f\"val must have shape (2,) but has shape {val.shape}\"\r\n            )\r\n        val[0] = self._min_in_bounds(val[0])\r\n        val[1] = self._max_in_bounds(val[1])\r\n        xy = self.poly.xy\r\n        if self.orientation == \"vertical\":\r\n            xy[0] = .25, val[0]\r\n            xy[1] = .25, val[1]\r\n            xy[2] = .75, val[1]\r\n            xy[3] = .75, val[0]\r\n            # xy[4] = .25, val[0]\r\n        else:\r\n            xy[0] = val[0], .25\r\n            xy[1] = val[0], .75\r\n            xy[2] = val[1], .75\r\n            xy[3] = val[1], .25\r\n            # xy[4] = val[0], .25\r\n        self.poly.xy = xy\r\n        self.valtext.set_text(self._format(val))\r\n        if self.drawon:\r\n            self.ax.figure.canvas.draw_idle()\r\n        self.val = val\r\n        if self.eventson:\r\n            self._observers.process(\"changed\", val)\r\n\r\n```\r\n\r\n### Operating system\r\n\r\nOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.5.1\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n\nHuh, the polygon object must have changed inadvertently. Usually, you have\nto \"close\" the polygon by repeating the first vertex, but we make it\npossible for polygons to auto-close themselves. I wonder how (when?) this\nbroke?\n\nOn Tue, Mar 22, 2022 at 10:29 PM vpicouet ***@***.***> wrote:\n\n> Bug summary\n>\n> I think xy[4] = .25, val[0] should be commented in /matplotlib/widgets.\n> py\", line 915, in set_val\n> as it prevents to initialized value for RangeSlider\n> Code for reproduction\n>\n> import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.widgets import RangeSlider\n> # generate a fake imagenp.random.seed(19680801)N = 128img = np.random.randn(N, N)\n> fig, axs = plt.subplots(1, 2, figsize=(10, 5))fig.subplots_adjust(bottom=0.25)\n> im = axs[0].imshow(img)axs[1].hist(img.flatten(), bins='auto')axs[1].set_title('Histogram of pixel intensities')\n> # Create the RangeSliderslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n> # Create the Vertical lines on the histogramlower_limit_line = axs[1].axvline(slider.val[0], color='k')upper_limit_line = axs[1].axvline(slider.val[1], color='k')\n>\n> def update(val):\n>     # The val passed to a callback by the RangeSlider will\n>     # be a tuple of (min, max)\n>\n>     # Update the image's colormap\n>     im.norm.vmin = val[0]\n>     im.norm.vmax = val[1]\n>\n>     # Update the position of the vertical lines\n>     lower_limit_line.set_xdata([val[0], val[0]])\n>     upper_limit_line.set_xdata([val[1], val[1]])\n>\n>     # Redraw the figure to ensure it updates\n>     fig.canvas.draw_idle()\n>\n> slider.on_changed(update)plt.show()\n>\n> Actual outcome\n>\n>   File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\n>     slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 778, in __init__\n>     self.set_val(valinit)\n>\n>   File \"/Users/Vincent/opt/anaconda3/envs/py38/lib/python3.8/site-packages/matplotlib/widgets.py\", line 915, in set_val\n>     xy[4] = val[0], .25\n>\n> IndexError: index 4 is out of bounds for axis 0 with size 4\n>\n> Expected outcome\n>\n> range slider with user initial values\n> Additional information\n>\n> error can be\n>\n>\n>     def set_val(self, val):\n>         \"\"\"\n>         Set slider value to *val*.\n>\n>         Parameters\n>         ----------\n>         val : tuple or array-like of float\n>         \"\"\"\n>         val = np.sort(np.asanyarray(val))\n>         if val.shape != (2,):\n>             raise ValueError(\n>                 f\"val must have shape (2,) but has shape {val.shape}\"\n>             )\n>         val[0] = self._min_in_bounds(val[0])\n>         val[1] = self._max_in_bounds(val[1])\n>         xy = self.poly.xy\n>         if self.orientation == \"vertical\":\n>             xy[0] = .25, val[0]\n>             xy[1] = .25, val[1]\n>             xy[2] = .75, val[1]\n>             xy[3] = .75, val[0]\n>             # xy[4] = .25, val[0]\n>         else:\n>             xy[0] = val[0], .25\n>             xy[1] = val[0], .75\n>             xy[2] = val[1], .75\n>             xy[3] = val[1], .25\n>             # xy[4] = val[0], .25\n>         self.poly.xy = xy\n>         self.valtext.set_text(self._format(val))\n>         if self.drawon:\n>             self.ax.figure.canvas.draw_idle()\n>         self.val = val\n>         if self.eventson:\n>             self._observers.process(\"changed\", val)\n>\n>\n> Operating system\n>\n> OSX\n> Matplotlib Version\n>\n> 3.5.1\n> Matplotlib Backend\n>\n> *No response*\n> Python version\n>\n> 3.8\n> Jupyter version\n>\n> *No response*\n> Installation\n>\n> pip\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/matplotlib/matplotlib/issues/22686>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACHF6CW2HVLKT5Q56BVZDLVBJ6X7ANCNFSM5RMUEIDQ>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n\n\nYes, i might have been too fast, cause it allows to skip the error but then it seems that the polygon is not right...\r\nLet me know if you know how this should be solved...\r\n![Capture d’écran, le 2022-03-22 à 23 20 23](https://user-images.githubusercontent.com/37241971/159617326-44c69bfc-bf0a-4f79-ab23-925c7066f2c2.jpg)\r\n\r\n\n\nSo I think you found an edge case because your valinit has both values equal. This means that the poly object created by `axhspan` is not as large as the rest of the code expects. \r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/11737d0694109f71d2603ba67d764aa2fb302761/lib/matplotlib/widgets.py#L722\r\n\r\nA quick workaround is to have the valinit contain two different numbers (even if only minuscule difference)\n\nYes you are right!\r\nThanks a lot for digging into this!!\n\nCompare:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\npoly_same_valinit = ax.axvspan(0, 0, 0, 1)\r\npoly_diff_valinit = ax.axvspan(0, .5, 0, 1)\r\nprint(poly_same_valinit.xy.shape)\r\nprint(poly_diff_valinit.xy.shape)\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\n(4, 2)\r\n(5, 2)\r\n```\r\n\n\nTwo solutions spring to mind:\r\n\r\n1. Easier option\r\nThrow an error in init if `valinit[0] == valinit[1]`\r\n\r\n2. Maybe better option?\r\nDon't use axhspan and manually create the poly to ensure it always has the expected number of vertices\n\nOption 2 might be better yes\n\n@vpicouet any interest in opening a PR?\n\nI don't think I am qualified to do so, never opened a PR yet. \r\nRangeSlider might also contain another issue. \r\nWhen I call `RangeSlider.set_val([0.0,0.1])`\r\nIt changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n![Capture d’écran, le 2022-03-25 à 15 53 44](https://user-images.githubusercontent.com/37241971/160191943-aef5fbe2-2f54-42ae-9719-23375767b212.jpg)\r\n \n\n> I don't think I am qualified to do so, never opened a PR yet.\r\n\r\nThat's always true until you've opened your first one :). But I also understand that it can be intimidating.\r\n\r\n\r\n>  RangeSlider might also contain another issue.\r\n> When I call RangeSlider.set_val([0.0,0.1])\r\n> It changes only the blue poly object and the range value on the right side of the slider not the dot:\r\n\r\n\r\noh hmm - good catch! may be worth opening a separate issue there as these are two distinct bugs and this one may be a bit more comlicated to fix.\n\nHaha true! I might try when I have more time!\r\nThrowing an error at least as I have never worked with axhspan and polys.\r\nOk, openning another issue.\n\nCan I try working on this? @ianhi @vpicouet \r\nFrom the discussion, I could identify that a quick fix would be to use a try-except block to throw an error \r\nif valinit[0] == valinit[1]\r\n\r\nPlease let me know your thoughts.\n\nSure! \n\n@nik1097 anyone can work on any issue at any point - no need to ask :) The only thing you should do is check that theres not already a PR for it.\r\n\r\n> From the discussion, I could identify that a quick fix would be to use a try-except block to throw an error\r\n> if valinit[0] == valinit[1]\r\n\r\n> Please let me know your thoughts.\r\n\r\nwhile this would have made this an explicit error I think we should use this an opportunity to improve the functionality by using option 2 from https://github.com/matplotlib/matplotlib/issues/22686#issuecomment-1076496982\r\n\r\nThat creation code will look something like what axhspan does internally ( replacing `self` with `self.ax`)\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/710fce3df95e22701bd68bf6af2c8adbc9d67a79/lib/matplotlib/axes/_axes.py#L988-L993\r\nwith the key difference that the `verts` variable should be defined as `verts = np.zeros([5,2])` and then the values should be filled the same way they are in the `set_val` method here: https://github.com/matplotlib/matplotlib/blob/2e921df22ba6b2a7782241798b042403c04cbdaf/lib/matplotlib/widgets.py#L901-L912\r\n\n\nHey, I guess the below PR should fix this issue too. If I'm not wrong, I will wait for the PR to be approved.\r\nhttps://github.com/matplotlib/matplotlib/pull/22711\n\n@nik1097 that PR doesn't address this issue so no need to wait for that one\n\nYes, it makes sense now. Will get back to you asap @ianhi \r\n\n\nIs someone still working on this ?\n\nI still am but I'm currently caught up with another project. Feel free to give it a shot, thanks! @AnnaMastori \r\n\n\nshould this be the expected outcome of the solution?\r\n![Στιγμιότυπο οθόνης (104)](https://user-images.githubusercontent.com/72826029/165545175-aca35912-1b46-491d-8fb3-841e1ae4a1c4.png)\r\n\n\n@NickolasGiannatos that looks like the correct starting position if you give an init value of `(0, 0)`. The next things to check are that it looks correct when you move the slider around, and that it looks correct with init values like `(.3, .5)`\n\n@ianhi Me and @NickolasGiannatos work together. It works for (.3, .5). Is there anything else that we should try ?\r\n![Στιγμιότυπο οθόνης (107)](https://user-images.githubusercontent.com/72812754/165580835-cc41e3f7-7761-42e2-b276-2e1f9c12fffa.png)\r\n \n\n@AnnaMastori @NickolasGiannatos can you please open a PR with your changes? It makes it much easier to discuss if we can all look at the same code.\n\nokay we will do it as soon as possible although it's our first time so there might be mistakes.\n\n>  our first time so there might be mistakes.\r\n\r\nThat's fine! I had lots of mistakes my first time",
  "pr_link": "https://github.com/matplotlib/matplotlib/pull/22711",
  "code_context": [
    {
      "filename": "lib/matplotlib/tests/test_widgets.py",
      "content": "import functools\n\nfrom matplotlib._api.deprecation import MatplotlibDeprecationWarning\nimport matplotlib.colors as mcolors\nimport matplotlib.widgets as widgets\nimport matplotlib.pyplot as plt\nfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\nfrom matplotlib.testing.widgets import (click_and_drag, do_event, get_ax,\n                                        mock_event, noop)\n\nimport numpy as np\nfrom numpy.testing import assert_allclose\n\nimport pytest\n\n\n@pytest.fixture\ndef ax():\n    return get_ax()\n\n\ndef check_rectangle(**kwargs):\n    ax = get_ax()\n\n    def onselect(epress, erelease):\n        ax._got_onselect = True\n        assert epress.xdata == 100\n        assert epress.ydata == 100\n        assert erelease.xdata == 199\n        assert erelease.ydata == 199\n\n    tool = widgets.RectangleSelector(ax, onselect, **kwargs)\n    do_event(tool, 'press', xdata=100, ydata=100, button=1)\n    do_event(tool, 'onmove', xdata=199, ydata=199, button=1)\n\n    # purposely drag outside of axis for release\n    do_event(tool, 'release', xdata=250, ydata=250, button=1)\n\n    if kwargs.get('drawtype', None) not in ['line', 'none']:\n        assert_allclose(tool.geometry,\n                        [[100., 100, 199, 199, 100],\n                         [100, 199, 199, 100, 100]],\n                        err_msg=tool.geometry)\n\n    assert ax._got_onselect\n\n\ndef test_rectangle_selector():\n    check_rectangle()\n\n    with pytest.warns(\n        MatplotlibDeprecationWarning,\n            match=\"Support for drawtype='line' is deprecated\"):\n        check_rectangle(drawtype='line', useblit=False)\n\n    check_rectangle(useblit=True, button=1)\n\n    with pytest.warns(\n        MatplotlibDeprecationWarning,\n            match=\"Support for drawtype='none' is deprecated\"):\n        check_rectangle(drawtype='none', minspanx=10, minspany=10)\n\n    check_rectangle(minspanx=10, minspany=10, spancoords='pixels')\n    check_rectangle(props=dict(fill=True))\n\n\n@pytest.mark.parametrize('spancoords', ['data', 'pixels'])\n@pytest.mark.parametrize('minspanx, x1', [[0, 10], [1, 10.5], [1, 11]])\n@pytest.mark.parametrize('minspany, y1', [[0, 10], [1, 10.5], [1, 11]])\ndef test_rectangle_minspan(spancoords, minspanx, x1, minspany, y1):\n    ax = get_ax()\n    # attribute to track number of onselect calls\n    ax._n_onselect = 0\n\n    def onselect(epress, erelease):\n        ax._n_onselect += 1\n        ax._epress = epress\n        ax._erelease = erelease\n\n    x0, y0 = (10, 10)\n    if spancoords == 'pixels':\n        minspanx, minspany = (ax.transData.transform((x1, y1)) -\n                              ax.transData.transform((x0, y0)))\n\n    tool = widgets.RectangleSelector(ax, onselect, interactive=True,\n                                     spancoords=spancoords,\n                                     minspanx=minspanx, minspany=minspany)\n    # Too small to create a selector\n    click_and_drag(tool, start=(x0, x1), end=(y0, y1))\n    assert not tool._selection_completed\n    assert ax._n_onselect == 0\n\n    click_and_drag(tool, start=(20, 20), end=(30, 30))\n    assert tool._selection_completed\n    assert ax._n_onselect == 1\n\n    # Too small to create a selector. Should clear existing selector, and\n    # trigger onselect because there was a pre-exisiting selector\n    click_and_drag(tool, start=(x0, y0), end=(x1, y1))\n    assert not tool._selection_completed\n    assert ax._n_onselect == 2\n    assert ax._epress.xdata == x0\n    assert ax._epress.ydata == y0\n    assert ax._erelease.xdata == x1\n    assert ax._erelease.ydata == y1\n\n\n@pytest.mark.parametrize('drag_from_anywhere, new_center',\n                         [[True, (60, 75)],\n                          [False, (30, 20)]])\ndef test_rectangle_drag(ax, drag_from_anywhere, new_center):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True,\n                                     drag_from_anywhere=drag_from_anywhere)\n    # Create rectangle\n    click_and_drag(tool, start=(0, 10), end=(100, 120))\n    assert tool.center == (50, 65)\n    # Drag inside rectangle, but away from centre handle\n    #\n    # If drag_from_anywhere == True, this will move the rectangle by (10, 10),\n    # giving it a new center of (60, 75)\n    #\n    # If drag_from_anywhere == False, this will create a new rectangle with\n    # center (30, 20)\n    click_and_drag(tool, start=(25, 15), end=(35, 25))\n    assert tool.center == new_center\n    # Check that in both cases, dragging outside the rectangle draws a new\n    # rectangle\n    click_and_drag(tool, start=(175, 185), end=(185, 195))\n    assert tool.center == (180, 190)\n\n\ndef test_rectangle_selector_set_props_handle_props(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True,\n                                     props=dict(facecolor='b', alpha=0.2),\n                                     handle_props=dict(alpha=0.5))\n    # Create rectangle\n    click_and_drag(tool, start=(0, 10), end=(100, 120))\n\n    artist = tool._selection_artist\n    assert artist.get_facecolor() == mcolors.to_rgba('b', alpha=0.2)\n    tool.set_props(facecolor='r', alpha=0.3)\n    assert artist.get_facecolor() == mcolors.to_rgba('r', alpha=0.3)\n\n    for artist in tool._handles_artists:\n        assert artist.get_markeredgecolor() == 'black'\n        assert artist.get_alpha() == 0.5\n    tool.set_handle_props(markeredgecolor='r', alpha=0.3)\n    for artist in tool._handles_artists:\n        assert artist.get_markeredgecolor() == 'r'\n        assert artist.get_alpha() == 0.3\n\n\ndef test_rectangle_resize(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Create rectangle\n    click_and_drag(tool, start=(0, 10), end=(100, 120))\n    assert tool.extents == (0.0, 100.0, 10.0, 120.0)\n\n    # resize NE handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[3]\n    xdata_new, ydata_new = xdata + 10, ydata + 5\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert tool.extents == (extents[0], xdata_new, extents[2], ydata_new)\n\n    # resize E handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdata_new, ydata_new = xdata + 10, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert tool.extents == (extents[0], xdata_new, extents[2], extents[3])\n\n    # resize W handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdata_new, ydata_new = xdata + 15, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert tool.extents == (xdata_new, extents[1], extents[2], extents[3])\n\n    # resize SW handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2]\n    xdata_new, ydata_new = xdata + 20, ydata + 25\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert tool.extents == (xdata_new, extents[1], ydata_new, extents[3])\n\n\ndef test_rectangle_add_state(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Create rectangle\n    click_and_drag(tool, start=(70, 65), end=(125, 130))\n\n    with pytest.raises(ValueError):\n        tool.add_state('unsupported_state')\n\n    with pytest.raises(ValueError):\n        tool.add_state('clear')\n    tool.add_state('move')\n    tool.add_state('square')\n    tool.add_state('center')\n\n\n@pytest.mark.parametrize('add_state', [True, False])\ndef test_rectangle_resize_center(ax, add_state):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Create rectangle\n    click_and_drag(tool, start=(70, 65), end=(125, 130))\n    assert tool.extents == (70.0, 125.0, 65.0, 130.0)\n\n    if add_state:\n        tool.add_state('center')\n        use_key = None\n    else:\n        use_key = 'control'\n\n    # resize NE handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[3]\n    xdiff, ydiff = 10, 5\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0] - xdiff, xdata_new,\n                            extents[2] - ydiff, ydata_new)\n\n    # resize E handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 10\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0] - xdiff, xdata_new,\n                            extents[2], extents[3])\n\n    # resize E handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -20\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0] - xdiff, xdata_new,\n                            extents[2], extents[3])\n\n    # resize W handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 15\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (xdata_new, extents[1] - xdiff,\n                            extents[2], extents[3])\n\n    # resize W handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -25\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (xdata_new, extents[1] - xdiff,\n                            extents[2], extents[3])\n\n    # resize SW handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2]\n    xdiff, ydiff = 20, 25\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (xdata_new, extents[1] - xdiff,\n                            ydata_new, extents[3] - ydiff)\n\n\n@pytest.mark.parametrize('add_state', [True, False])\ndef test_rectangle_resize_square(ax, add_state):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Create rectangle\n    click_and_drag(tool, start=(70, 65), end=(120, 115))\n    assert tool.extents == (70.0, 120.0, 65.0, 115.0)\n\n    if add_state:\n        tool.add_state('square')\n        use_key = None\n    else:\n        use_key = 'shift'\n\n    # resize NE handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[3]\n    xdiff, ydiff = 10, 5\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0], xdata_new,\n                            extents[2], extents[3] + xdiff)\n\n    # resize E handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 10\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0], xdata_new,\n                            extents[2], extents[3] + xdiff)\n\n    # resize E handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -20\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0], xdata_new,\n                            extents[2], extents[3] + xdiff)\n\n    # resize W handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 15\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (xdata_new, extents[1],\n                            extents[2], extents[3] - xdiff)\n\n    # resize W handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -25\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (xdata_new, extents[1],\n                            extents[2], extents[3] - xdiff)\n\n    # resize SW handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2]\n    xdiff, ydiff = 20, 25\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new),\n                   key=use_key)\n    assert tool.extents == (extents[0] + ydiff, extents[1],\n                            ydata_new, extents[3])\n\n\ndef test_rectangle_resize_square_center(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Create rectangle\n    click_and_drag(tool, start=(70, 65), end=(120, 115))\n    tool.add_state('square')\n    tool.add_state('center')\n    assert_allclose(tool.extents, (70.0, 120.0, 65.0, 115.0))\n\n    # resize NE handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[3]\n    xdiff, ydiff = 10, 5\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (extents[0] - xdiff, xdata_new,\n                                   extents[2] - xdiff, extents[3] + xdiff))\n\n    # resize E handle\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 10\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (extents[0] - xdiff, xdata_new,\n                                   extents[2] - xdiff, extents[3] + xdiff))\n\n    # resize E handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[1], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -20\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (extents[0] - xdiff, xdata_new,\n                                   extents[2] - xdiff, extents[3] + xdiff))\n\n    # resize W handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = 5\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (xdata_new, extents[1] - xdiff,\n                                   extents[2] + xdiff, extents[3] - xdiff))\n\n    # resize W handle negative diff\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2] + (extents[3] - extents[2]) / 2\n    xdiff = -25\n    xdata_new, ydata_new = xdata + xdiff, ydata\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (xdata_new, extents[1] - xdiff,\n                                   extents[2] + xdiff, extents[3] - xdiff))\n\n    # resize SW handle\n    extents = tool.extents\n    xdata, ydata = extents[0], extents[2]\n    xdiff, ydiff = 20, 25\n    xdata_new, ydata_new = xdata + xdiff, ydata + ydiff\n    click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n    assert_allclose(tool.extents, (extents[0] + ydiff, extents[1] - ydiff,\n                                   ydata_new, extents[3] - ydiff))\n\n\n@pytest.mark.parametrize('selector_class',\n                         [widgets.RectangleSelector, widgets.EllipseSelector])\ndef test_rectangle_rotate(ax, selector_class):\n    tool = selector_class(ax, onselect=noop, interactive=True)\n    # Draw rectangle\n    click_and_drag(tool, start=(100, 100), end=(130, 140))\n    assert tool.extents == (100, 130, 100, 140)\n    assert len(tool._state) == 0\n\n    # Rotate anticlockwise using top-right corner\n    do_event(tool, 'on_key_press', key='r')\n    assert tool._state == set(['rotate'])\n    assert len(tool._state) == 1\n    click_and_drag(tool, start=(130, 140), end=(120, 145))\n    do_event(tool, 'on_key_press', key='r')\n    assert len(tool._state) == 0\n    # Extents shouldn't change (as shape of rectangle hasn't changed)\n    assert tool.extents == (100, 130, 100, 140)\n    assert_allclose(tool.rotation, 25.56, atol=0.01)\n    tool.rotation = 45\n    assert tool.rotation == 45\n    # Corners should move\n    assert_allclose(tool.corners,\n                    np.array([[118.53, 139.75, 111.46, 90.25],\n                              [95.25, 116.46, 144.75, 123.54]]), atol=0.01)\n\n    # Scale using top-right corner\n    click_and_drag(tool, start=(110, 145), end=(110, 160))\n    assert_allclose(tool.extents, (100, 139.75, 100, 151.82), atol=0.01)\n\n    if selector_class == widgets.RectangleSelector:\n        with pytest.raises(ValueError):\n            tool._selection_artist.rotation_point = 'unvalid_value'\n\n\ndef test_rectange_add_remove_set(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    # Draw rectangle\n    click_and_drag(tool, start=(100, 100), end=(130, 140))\n    assert tool.extents == (100, 130, 100, 140)\n    assert len(tool._state) == 0\n    for state in ['rotate', 'square', 'center']:\n        tool.add_state(state)\n        assert len(tool._state) == 1\n        tool.remove_state(state)\n        assert len(tool._state) == 0\n\n\n@pytest.mark.parametrize('use_data_coordinates', [False, True])\ndef test_rectangle_resize_square_center_aspect(ax, use_data_coordinates):\n    ax.set_aspect(0.8)\n\n    tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True,\n                                     use_data_coordinates=use_data_coordinates)\n    # Create rectangle\n    click_and_drag(tool, start=(70, 65), end=(120, 115))\n    assert tool.extents == (70.0, 120.0, 65.0, 115.0)\n    tool.add_state('square')\n    tool.add_state('center')\n\n    if use_data_coordinates:\n        # resize E handle\n        extents = tool.extents\n        xdata, ydata, width = extents[1], extents[3], extents[1] - extents[0]\n        xdiff, ycenter = 10,  extents[2] + (extents[3] - extents[2]) / 2\n        xdata_new, ydata_new = xdata + xdiff, ydata\n        ychange = width / 2 + xdiff\n        click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n        assert_allclose(tool.extents, [extents[0] - xdiff, xdata_new,\n                                       ycenter - ychange, ycenter + ychange])\n    else:\n        # resize E handle\n        extents = tool.extents\n        xdata, ydata = extents[1], extents[3]\n        xdiff = 10\n        xdata_new, ydata_new = xdata + xdiff, ydata\n        ychange = xdiff * 1 / tool._aspect_ratio_correction\n        click_and_drag(tool, start=(xdata, ydata), end=(xdata_new, ydata_new))\n        assert_allclose(tool.extents, [extents[0] - xdiff, xdata_new,\n                                       46.25, 133.75])\n\n\ndef test_ellipse(ax):\n    \"\"\"For ellipse, test out the key modifiers\"\"\"\n    tool = widgets.EllipseSelector(ax, onselect=noop,\n                                   grab_range=10, interactive=True)\n    tool.extents = (100, 150, 100, 150)\n\n    # drag the rectangle\n    click_and_drag(tool, start=(125, 125), end=(145, 145))\n    assert tool.extents == (120, 170, 120, 170)\n\n    # create from center\n    click_and_drag(tool, start=(100, 100), end=(125, 125), key='control')\n    assert tool.extents == (75, 125, 75, 125)\n\n    # create a square\n    click_and_drag(tool, start=(10, 10), end=(35, 30), key='shift')\n    extents = [int(e) for e in tool.extents]\n    assert extents == [10, 35, 10, 35]\n\n    # create a square from center\n    click_and_drag(tool, start=(100, 100), end=(125, 130), key='ctrl+shift')\n    extents = [int(e) for e in tool.extents]\n    assert extents == [70, 130, 70, 130]\n\n    assert tool.geometry.shape == (2, 73)\n    assert_allclose(tool.geometry[:, 0], [70., 100])\n\n\ndef test_rectangle_handles(ax):\n    tool = widgets.RectangleSelector(ax, onselect=noop,\n                                     grab_range=10,\n                                     interactive=True,\n                                     handle_props={'markerfacecolor': 'r',\n                                                   'markeredgecolor': 'b'})\n    tool.extents = (100, 150, 100, 150)\n\n    assert_allclose(tool.corners, ((100, 150, 150, 100), (100, 100, 150, 150)))\n    assert tool.extents == (100, 150, 100, 150)\n    assert_allclose(tool.edge_centers,\n                    ((100, 125.0, 150, 125.0), (125.0, 100, 125.0, 150)))\n    assert tool.extents == (100, 150, 100, 150)\n\n    # grab a corner and move it\n    click_and_drag(tool, start=(100, 100), end=(120, 120))\n    assert tool.extents == (120, 150, 120, 150)\n\n    # grab the center and move it\n    click_and_drag(tool, start=(132, 132), end=(120, 120))\n    assert tool.extents == (108, 138, 108, 138)\n\n    # create a new rectangle\n    click_and_drag(tool, start=(10, 10), end=(100, 100))\n    assert tool.extents == (10, 100, 10, 100)\n\n    # Check that marker_props worked.\n    assert mcolors.same_color(\n        tool._corner_handles.artists[0].get_markerfacecolor(), 'r')\n    assert mcolors.same_color(\n        tool._corner_handles.artists[0].get_markeredgecolor(), 'b')\n\n\n@pytest.mark.parametrize('interactive', [True, False])\ndef test_rectangle_selector_onselect(ax, interactive):\n    # check when press and release events take place at the same position\n    def onselect(vmin, vmax):\n        ax._got_onselect = True\n\n    tool = widgets.RectangleSelector(ax, onselect, interactive=interactive)\n    # move outside of axis\n    click_and_drag(tool, start=(100, 110), end=(150, 120))\n\n    assert tool.ax._got_onselect\n    assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n\n    # Reset tool.ax._got_onselect\n    tool.ax._got_onselect = False\n    click_and_drag(tool, start=(10, 100), end=(10, 100))\n\n    assert tool.ax._got_onselect\n\n\n@pytest.mark.parametrize('ignore_event_outside', [True, False])\ndef test_rectangle_selector_ignore_outside(ax, ignore_event_outside):\n    def onselect(vmin, vmax):\n        ax._got_onselect = True\n\n    tool = widgets.RectangleSelector(ax, onselect,\n                                     ignore_event_outside=ignore_event_outside)\n    click_and_drag(tool, start=(100, 110), end=(150, 120))\n    assert tool.ax._got_onselect\n    assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n\n    # Reset\n    ax._got_onselect = False\n    # Trigger event outside of span\n    click_and_drag(tool, start=(150, 150), end=(160, 160))\n    if ignore_event_outside:\n        # event have been ignored and span haven't changed.\n        assert not ax._got_onselect\n        assert tool.extents == (100.0, 150.0, 110.0, 120.0)\n    else:\n        # A new shape is created\n        assert ax._got_onselect\n        assert tool.extents == (150.0, 160.0, 150.0, 160.0)\n\n\ndef check_span(*args, **kwargs):\n    ax = get_ax()\n\n    def onselect(vmin, vmax):\n        ax._got_onselect = True\n        assert vmin == 100\n        assert vmax == 199\n\n    def onmove(vmin, vmax):\n        assert vmin == 100\n        assert vmax == 199\n        ax._got_on_move = True\n\n    if 'onmove_callback' in kwargs:\n        kwargs['onmove_callback'] = onmove\n\n    tool = widgets.SpanSelector(ax, onselect, *args, **kwargs)\n    do_event(tool, 'press', xdata=100, ydata=100, button=1)\n    # move outside of axis\n    do_event(tool, 'onmove', xdata=199, ydata=199, button=1)\n    do_event(tool, 'release', xdata=250, ydata=250, button=1)\n\n    assert ax._got_onselect\n\n    if 'onmove_callback' in kwargs:\n        assert ax._got_on_move\n\n\ndef test_span_selector():\n    check_span('horizontal', minspan=10, useblit=True)\n    check_span('vertical', onmove_callback=True, button=1)\n    check_span('horizontal', props=dict(fill=True))\n    check_span('horizontal', interactive=True)\n\n\n@pytest.mark.parametrize('interactive', [True, False])\ndef test_span_selector_onselect(ax, interactive):\n    def onselect(vmin, vmax):\n        ax._got_onselect = True\n\n    tool = widgets.SpanSelector(ax, onselect, 'horizontal',\n                                interactive=interactive)\n    # move outside of axis\n    click_and_drag(tool, start=(100, 100), end=(150, 100))\n    assert tool.ax._got_onselect\n    assert tool.extents == (100, 150)\n\n    # Reset tool.ax._got_onselect\n    tool.ax._got_onselect = False\n    click_and_drag(tool, start=(10, 100), end=(10, 100))\n    assert tool.ax._got_onselect\n\n\n@pytest.mark.parametrize('ignore_event_outside', [True, False])\ndef test_span_selector_ignore_outside(ax, ignore_event_outside):\n    def onselect(vmin, vmax):\n        ax._got_onselect = True\n\n    def onmove(vmin, vmax):\n        ax._got_on_move = True\n\n    tool = widgets.SpanSelector(ax, onselect, 'horizontal',\n                                onmove_callback=onmove,\n                                ignore_event_outside=ignore_event_outside)\n    click_and_drag(tool, start=(100, 100), end=(125, 125))\n    assert ax._got_onselect\n    assert ax._got_on_move\n    assert tool.extents == (100, 125)\n\n    # Reset\n    ax._got_onselect = False\n    ax._got_on_move = False\n    # Trigger event outside of span\n    click_and_drag(tool, start=(150, 150), end=(160, 160))\n    if ignore_event_outside:\n        # event have been ignored and span haven't changed.\n        assert not ax._got_onselect\n        assert not ax._got_on_move\n        assert tool.extents == (100, 125)\n    else:\n        # A new shape is created\n        assert ax._got_onselect\n        assert ax._got_on_move\n        assert tool.extents == (150, 160)\n\n\n@pytest.mark.parametrize('drag_from_anywhere', [True, False])\ndef test_span_selector_drag(ax, drag_from_anywhere):\n    # Create span\n    tool = widgets.SpanSelector(ax, onselect=noop, direction='horizontal',\n                                interactive=True,\n                                drag_from_anywhere=drag_from_anywhere)\n    click_and_drag(tool, start=(10, 10), end=(100, 120))\n    assert tool.extents == (10, 100)\n    # Drag inside span\n    #\n    # If drag_from_anywhere == True, this will move the span by 10,\n    # giving new value extents = 20, 110\n    #\n    # If drag_from_anywhere == False, this will create a new span with\n    # value extents = 25, 35\n    click_and_drag(tool, start=(25, 15), end=(35, 25))\n    if drag_from_anywhere:\n        assert tool.extents == (20, 110)\n    else:\n        assert tool.extents == (25, 35)\n\n    # Check that in both cases, dragging outside the span draws a new span\n    click_and_drag(tool, start=(175, 185), end=(185, 195))\n    assert tool.extents == (175, 185)\n\n\ndef test_span_selector_direction(ax):\n    tool = widgets.SpanSelector(ax, onselect=noop, direction='horizontal',\n                                interactive=True)\n    assert tool.direction == 'horizontal'\n    assert tool._edge_handles.direction == 'horizontal'\n\n    with pytest.raises(ValueError):\n        tool = widgets.SpanSelector(ax, onselect=noop,\n                                    direction='invalid_direction')\n\n    tool.direction = 'vertical'\n    assert tool.direction == 'vertical'\n    assert tool._edge_handles.direction == 'vertical'\n\n    with pytest.raises(ValueError):\n        tool.direction = 'invalid_string'\n\n\ndef test_span_selector_set_props_handle_props(ax):\n    tool = widgets.SpanSelector(ax, onselect=noop, direction='horizontal',\n                                interactive=True,\n                                props=dict(facecolor='b', alpha=0.2),\n                                handle_props=dict(alpha=0.5))\n    # Create rectangle\n    click_and_drag(tool, start=(0, 10), end=(100, 120))\n\n    artist = tool._selection_artist\n    assert artist.get_facecolor() == mcolors.to_rgba('b', alpha=0.2)\n    tool.set_props(facecolor='r', alpha=0.3)\n    assert artist.get_facecolor() == mcolors.to_rgba('r', alpha=0.3)\n\n    for artist in tool._handles_artists:\n        assert artist.get_color() == 'b'\n        assert artist.get_alpha() == 0.5\n    tool.set_handle_props(color='r', alpha=0.3)\n    for artist in tool._handles_artists:\n        assert artist.get_color() == 'r'\n        assert artist.get_alpha() == 0.3\n\n\n@pytest.mark.parametrize('selector', ['span', 'rectangle'])\ndef test_selector_clear(ax, selector):\n    kwargs = dict(ax=ax, onselect=noop, interactive=True)\n    if selector == 'span':\n        Selector = widgets.SpanSelector\n        kwargs['direction'] = 'horizontal'\n    else:\n        Selector = widgets.RectangleSelector\n\n    tool = Selector(**kwargs)\n    click_and_drag(tool, start=(10, 10), end=(100, 120))\n\n    # press-release event outside the selector to clear the selector\n    click_and_drag(tool, start=(130, 130), end=(130, 130))\n    assert not tool._selection_completed\n\n    kwargs['ignore_event_outside'] = True\n    tool = Selector(**kwargs)\n    assert tool.ignore_event_outside\n    click_and_drag(tool, start=(10, 10), end=(100, 120))\n\n    # press-release event outside the selector ignored\n    click_and_drag(tool, start=(130, 130), end=(130, 130))\n    assert tool._selection_completed\n\n    do_event(tool, 'on_key_press', key='escape')\n    assert not tool._selection_completed\n\n\n@pytest.mark.parametrize('selector', ['span', 'rectangle'])\ndef test_selector_clear_method(ax, selector):\n    if selector == 'span':\n        tool = widgets.SpanSelector(ax, onselect=noop, direction='horizontal',\n                                    interactive=True,\n                                    ignore_event_outside=True)\n    else:\n        tool = widgets.RectangleSelector(ax, onselect=noop, interactive=True)\n    click_and_drag(tool, start=(10, 10), end=(100, 120))\n    assert tool._selection_completed\n    assert tool.visible\n    if selector == 'span':\n        assert tool.extents == (10, 100)\n\n    tool.clear()\n    assert not tool._selection_completed\n    assert not tool.visible\n\n    # Do another cycle of events to make sure we can\n    click_and_drag(tool, start=(10, 10), end=(50, 120))\n    assert tool._selection_completed\n    assert tool.visible\n    if selector == 'span':\n        assert tool.extents == (10, 50)\n\n\ndef test_span_selector_add_state(ax):\n    tool = widgets.SpanSelector(ax, noop, 'horizontal',\n                                interactive=True)\n\n    with pytest.raises(ValueError):\n        tool.add_state('unsupported_state')\n    with pytest.raises(ValueError):\n        tool.add_state('center')\n    with pytest.raises(ValueError):\n        tool.add_state('square')\n\n    tool.add_state('move')\n\n\ndef test_tool_line_handle(ax):\n    positions = [20, 30, 50]\n    tool_line_handle = widgets.ToolLineHandles(ax, positions, 'horizontal',\n                                               useblit=False)\n\n    for artist in tool_line_handle.artists:\n        assert not artist.get_animated()\n        assert not artist.get_visible()\n\n    tool_line_handle.set_visible(True)\n    tool_line_handle.set_animated(True)\n\n    for artist in tool_line_handle.artists:\n        assert artist.get_animated()\n        assert artist.get_visible()\n\n    assert tool_line_handle.positions == positions\n\n\n@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\ndef test_span_selector_bound(direction):\n    fig, ax = plt.subplots(1, 1)\n    ax.plot([10, 20], [10, 30])\n    ax.figure.canvas.draw()\n    x_bound = ax.get_xbound()\n    y_bound = ax.get_ybound()\n\n    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n    assert ax.get_xbound() == x_bound\n    assert ax.get_ybound() == y_bound\n\n    bound = x_bound if direction == 'horizontal' else y_bound\n    assert tool._edge_handles.positions == list(bound)\n\n    press_data = [10.5, 11.5]\n    move_data = [11, 13]  # Updating selector is done in onmove\n    release_data = move_data\n    click_and_drag(tool, start=press_data, end=move_data)\n\n    assert ax.get_xbound() == x_bound\n    assert ax.get_ybound() == y_bound\n\n    index = 0 if direction == 'horizontal' else 1\n    handle_positions = [press_data[index], release_data[index]]\n    assert tool._edge_handles.positions == handle_positions\n\n\n@pytest.mark.backend('QtAgg', skip_on_importerror=True)\ndef test_span_selector_animated_artists_callback():\n    \"\"\"Check that the animated artists changed in callbacks are updated.\"\"\"\n    x = np.linspace(0, 2 * np.pi, 100)\n    values = np.sin(x)\n\n    fig, ax = plt.subplots()\n    (ln,) = ax.plot(x, values, animated=True)\n    (ln2, ) = ax.plot([], animated=True)\n\n    # spin the event loop to let the backend process any pending operations\n    # before drawing artists\n    # See blitting tutorial\n    plt.pause(0.1)\n    ax.draw_artist(ln)\n    fig.canvas.blit(fig.bbox)\n\n    def mean(vmin, vmax):\n        # Return mean of values in x between *vmin* and *vmax*\n        indmin, indmax = np.searchsorted(x, (vmin, vmax))\n        v = values[indmin:indmax].mean()\n        ln2.set_data(x, v)\n\n    span = widgets.SpanSelector(ax, mean, direction='horizontal',\n                                onmove_callback=mean,\n                                interactive=True,\n                                drag_from_anywhere=True,\n                                useblit=True)\n\n    # Add span selector and check that the line is draw after it was updated\n    # by the callback\n    press_data = [1, 2]\n    move_data = [2, 2]\n    do_event(span, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n    do_event(span, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n    assert span._get_animated_artists() == (ln, ln2)\n    assert ln.stale is False\n    assert ln2.stale\n    assert ln2.get_ydata() == 0.9547335049088455\n    span.update()\n    assert ln2.stale is False\n\n    # Change span selector and check that the line is drawn/updated after its\n    # value was updated by the callback\n    press_data = [4, 2]\n    move_data = [5, 2]\n    release_data = [5, 2]\n    do_event(span, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n    do_event(span, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n    assert ln.stale is False\n    assert ln2.stale\n    assert ln2.get_ydata() == -0.9424150707548072\n    do_event(span, 'release', xdata=release_data[0],\n             ydata=release_data[1], button=1)\n    assert ln2.stale is False\n\n\ndef check_lasso_selector(**kwargs):\n    ax = get_ax()\n\n    def onselect(verts):\n        ax._got_onselect = True\n        assert verts == [(100, 100), (125, 125), (150, 150)]\n\n    tool = widgets.LassoSelector(ax, onselect, **kwargs)\n    do_event(tool, 'press', xdata=100, ydata=100, button=1)\n    do_event(tool, 'onmove', xdata=125, ydata=125, button=1)\n    do_event(tool, 'release', xdata=150, ydata=150, button=1)\n\n    assert ax._got_onselect\n\n\ndef test_lasso_selector():\n    check_lasso_selector()\n    check_lasso_selector(useblit=False, props=dict(color='red'))\n    check_lasso_selector(useblit=True, button=1)\n\n\ndef test_CheckButtons(ax):\n    check = widgets.CheckButtons(ax, ('a', 'b', 'c'), (True, False, True))\n    assert check.get_status() == [True, False, True]\n    check.set_active(0)\n    assert check.get_status() == [False, False, True]\n\n    cid = check.on_clicked(lambda: None)\n    check.disconnect(cid)\n\n\n@pytest.mark.parametrize(\"toolbar\", [\"none\", \"toolbar2\", \"toolmanager\"])\ndef test_TextBox(ax, toolbar):\n    # Avoid \"toolmanager is provisional\" warning.\n    dict.__setitem__(plt.rcParams, \"toolbar\", toolbar)\n\n    from unittest.mock import Mock\n    submit_event = Mock()\n    text_change_event = Mock()\n    tool = widgets.TextBox(ax, '')\n    tool.on_submit(submit_event)\n    tool.on_text_change(text_change_event)\n\n    assert tool.text == ''\n\n    do_event(tool, '_click')\n\n    tool.set_val('x**2')\n\n    assert tool.text == 'x**2'\n    assert text_change_event.call_count == 1\n\n    tool.begin_typing(tool.text)\n    tool.stop_typing()\n\n    assert submit_event.call_count == 2\n\n    do_event(tool, '_click')\n    do_event(tool, '_keypress', key='+')\n    do_event(tool, '_keypress', key='5')\n\n    assert text_change_event.call_count == 3\n\n\n@image_comparison(['check_radio_buttons.png'], style='mpl20', remove_text=True)\ndef test_check_radio_buttons_image():\n    ax = get_ax()\n    # Remove this line when this test image is regenerated.\n    plt.rcParams['text.kerning_factor'] = 6\n\n    plt.subplots_adjust(left=0.3)\n    rax1 = plt.axes([0.05, 0.7, 0.15, 0.15])\n    rax2 = plt.axes([0.05, 0.2, 0.15, 0.15])\n    widgets.RadioButtons(rax1, ('Radio 1', 'Radio 2', 'Radio 3'))\n    widgets.CheckButtons(rax2, ('Check 1', 'Check 2', 'Check 3'),\n                         (False, True, True))\n\n\n@image_comparison(['check_bunch_of_radio_buttons.png'],\n                  style='mpl20', remove_text=True)\ndef test_check_bunch_of_radio_buttons():\n    rax = plt.axes([0.05, 0.1, 0.15, 0.7])\n    widgets.RadioButtons(rax, ('B1', 'B2', 'B3', 'B4', 'B5', 'B6',\n                               'B7', 'B8', 'B9', 'B10', 'B11', 'B12',\n                               'B13', 'B14', 'B15'))\n\n\ndef test_slider_slidermin_slidermax_invalid():\n    fig, ax = plt.subplots()\n    # test min/max with floats\n    with pytest.raises(ValueError):\n        widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                       slidermin=10.0)\n    with pytest.raises(ValueError):\n        widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                       slidermax=10.0)\n\n\ndef test_slider_slidermin_slidermax():\n    fig, ax = plt.subplots()\n    slider_ = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                             valinit=5.0)\n\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=1.0, slidermin=slider_)\n    assert slider.val == slider_.val\n\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=10.0, slidermax=slider_)\n    assert slider.val == slider_.val\n\n\ndef test_slider_valmin_valmax():\n    fig, ax = plt.subplots()\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=-10.0)\n    assert slider.val == slider.valmin\n\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=25.0)\n    assert slider.val == slider.valmax\n\n\ndef test_slider_valstep_snapping():\n    fig, ax = plt.subplots()\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=11.4, valstep=1)\n    assert slider.val == 11\n\n    slider = widgets.Slider(ax=ax, label='', valmin=0.0, valmax=24.0,\n                            valinit=11.4, valstep=[0, 1, 5.5, 19.7])\n    assert slider.val == 5.5\n\n\ndef test_slider_horizontal_vertical():\n    fig, ax = plt.subplots()\n    slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=24,\n                            valinit=12, orientation='horizontal')\n    slider.set_val(10)\n    assert slider.val == 10\n    # check the dimension of the slider patch in axes units\n    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n    assert_allclose(box.bounds, [0, .25, 10/24, .5])\n\n    fig, ax = plt.subplots()\n    slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=24,\n                            valinit=12, orientation='vertical')\n    slider.set_val(10)\n    assert slider.val == 10\n    # check the dimension of the slider patch in axes units\n    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n    assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n\n\ndef test_slider_reset():\n    fig, ax = plt.subplots()\n    slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n    slider.set_val(0.75)\n    slider.reset()\n    assert slider.val == 0.5\n\n\n@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\ndef test_range_slider(orientation):\n    if orientation == \"vertical\":\n        idx = [1, 0, 3, 2]\n    else:\n        idx = [0, 1, 2, 3]\n\n    fig, ax = plt.subplots()\n\n    slider = widgets.RangeSlider(\n        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n        valinit=[0.1, 0.34]\n    )\n    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n    assert_allclose(box.get_points().flatten()[idx], [0.1, 0.25, 0.34, 0.75])\n\n    # Check initial value is set correctly\n    assert_allclose(slider.val, (0.1, 0.34))\n\n    def handle_positions(slider):\n        if orientation == \"vertical\":\n            return [h.get_ydata()[0] for h in slider._handles]\n        else:\n            return [h.get_xdata()[0] for h in slider._handles]\n\n    slider.set_val((0.2, 0.6))\n    assert_allclose(slider.val, (0.2, 0.6))\n    assert_allclose(handle_positions(slider), (0.2, 0.6))\n\n    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n    assert_allclose(box.get_points().flatten()[idx], [0.2, .25, 0.6, .75])\n\n    slider.set_val((0.2, 0.1))\n    assert_allclose(slider.val, (0.1, 0.2))\n    assert_allclose(handle_positions(slider), (0.1, 0.2))\n\n    slider.set_val((-1, 10))\n    assert_allclose(slider.val, (0, 1))\n    assert_allclose(handle_positions(slider), (0, 1))\n\n    slider.reset()\n    assert_allclose(slider.val, (0.1, 0.34))\n    assert_allclose(handle_positions(slider), (0.1, 0.34))\n\n\ndef check_polygon_selector(event_sequence, expected_result, selections_count,\n                           **kwargs):\n    \"\"\"\n    Helper function to test Polygon Selector.\n\n    Parameters\n    ----------\n    event_sequence : list of tuples (etype, dict())\n        A sequence of events to perform. The sequence is a list of tuples\n        where the first element of the tuple is an etype (e.g., 'onmove',\n        'press', etc.), and the second element of the tuple is a dictionary of\n         the arguments for the event (e.g., xdata=5, key='shift', etc.).\n    expected_result : list of vertices (xdata, ydata)\n        The list of vertices that are expected to result from the event\n        sequence.\n    selections_count : int\n        Wait for the tool to call its `onselect` function `selections_count`\n        times, before comparing the result to the `expected_result`\n    **kwargs\n        Keyword arguments are passed to PolygonSelector.\n    \"\"\"\n    ax = get_ax()\n\n    ax._selections_count = 0\n\n    def onselect(vertices):\n        ax._selections_count += 1\n        ax._current_result = vertices\n\n    tool = widgets.PolygonSelector(ax, onselect, **kwargs)\n\n    for (etype, event_args) in event_sequence:\n        do_event(tool, etype, **event_args)\n\n    assert ax._selections_count == selections_count\n    assert ax._current_result == expected_result\n\n\ndef polygon_place_vertex(xdata, ydata):\n    return [('onmove', dict(xdata=xdata, ydata=ydata)),\n            ('press', dict(xdata=xdata, ydata=ydata)),\n            ('release', dict(xdata=xdata, ydata=ydata))]\n\n\ndef polygon_remove_vertex(xdata, ydata):\n    return [('onmove', dict(xdata=xdata, ydata=ydata)),\n            ('press', dict(xdata=xdata, ydata=ydata, button=3)),\n            ('release', dict(xdata=xdata, ydata=ydata, button=3))]\n\n\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\ndef test_polygon_selector(draw_bounding_box):\n    check_selector = functools.partial(\n        check_polygon_selector, draw_bounding_box=draw_bounding_box)\n\n    # Simple polygon\n    expected_result = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50))\n    check_selector(event_sequence, expected_result, 1)\n\n    # Move first vertex before completing the polygon.\n    expected_result = [(75, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + [('on_key_press', dict(key='control')),\n                         ('onmove', dict(xdata=50, ydata=50)),\n                         ('press', dict(xdata=50, ydata=50)),\n                         ('onmove', dict(xdata=75, ydata=50)),\n                         ('release', dict(xdata=75, ydata=50)),\n                         ('on_key_release', dict(key='control'))]\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(75, 50))\n    check_selector(event_sequence, expected_result, 1)\n\n    # Move first two vertices at once before completing the polygon.\n    expected_result = [(50, 75), (150, 75), (50, 150)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + [('on_key_press', dict(key='shift')),\n                         ('onmove', dict(xdata=100, ydata=100)),\n                         ('press', dict(xdata=100, ydata=100)),\n                         ('onmove', dict(xdata=100, ydata=125)),\n                         ('release', dict(xdata=100, ydata=125)),\n                         ('on_key_release', dict(key='shift'))]\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 75))\n    check_selector(event_sequence, expected_result, 1)\n\n    # Move first vertex after completing the polygon.\n    expected_result = [(75, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50)\n                      + [('onmove', dict(xdata=50, ydata=50)),\n                         ('press', dict(xdata=50, ydata=50)),\n                         ('onmove', dict(xdata=75, ydata=50)),\n                         ('release', dict(xdata=75, ydata=50))])\n    check_selector(event_sequence, expected_result, 2)\n\n    # Move all vertices after completing the polygon.\n    expected_result = [(75, 75), (175, 75), (75, 175)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50)\n                      + [('on_key_press', dict(key='shift')),\n                         ('onmove', dict(xdata=100, ydata=100)),\n                         ('press', dict(xdata=100, ydata=100)),\n                         ('onmove', dict(xdata=125, ydata=125)),\n                         ('release', dict(xdata=125, ydata=125)),\n                         ('on_key_release', dict(key='shift'))])\n    check_selector(event_sequence, expected_result, 2)\n\n    # Try to move a vertex and move all before placing any vertices.\n    expected_result = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = ([('on_key_press', dict(key='control')),\n                       ('onmove', dict(xdata=100, ydata=100)),\n                       ('press', dict(xdata=100, ydata=100)),\n                       ('onmove', dict(xdata=125, ydata=125)),\n                       ('release', dict(xdata=125, ydata=125)),\n                       ('on_key_release', dict(key='control')),\n                       ('on_key_press', dict(key='shift')),\n                       ('onmove', dict(xdata=100, ydata=100)),\n                       ('press', dict(xdata=100, ydata=100)),\n                       ('onmove', dict(xdata=125, ydata=125)),\n                       ('release', dict(xdata=125, ydata=125)),\n                       ('on_key_release', dict(key='shift'))]\n                      + polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50))\n    check_selector(event_sequence, expected_result, 1)\n\n    # Try to place vertex out-of-bounds, then reset, and start a new polygon.\n    expected_result = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(250, 50)\n                      + [('on_key_press', dict(key='escape')),\n                         ('on_key_release', dict(key='escape'))]\n                      + polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50))\n    check_selector(event_sequence, expected_result, 1)\n\n\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\ndef test_polygon_selector_set_props_handle_props(ax, draw_bounding_box):\n    ax._selections_count = 0\n\n    def onselect(vertices):\n        ax._selections_count += 1\n        ax._current_result = vertices\n\n    tool = widgets.PolygonSelector(ax, onselect,\n                                   props=dict(color='b', alpha=0.2),\n                                   handle_props=dict(alpha=0.5),\n                                   draw_bounding_box=draw_bounding_box)\n\n    event_sequence = (polygon_place_vertex(50, 50)\n                      + polygon_place_vertex(150, 50)\n                      + polygon_place_vertex(50, 150)\n                      + polygon_place_vertex(50, 50))\n\n    for (etype, event_args) in event_sequence:\n        do_event(tool, etype, **event_args)\n\n    artist = tool._selection_artist\n    assert artist.get_color() == 'b'\n    assert artist.get_alpha() == 0.2\n    tool.set_props(color='r', alpha=0.3)\n    assert artist.get_color() == 'r'\n    assert artist.get_alpha() == 0.3\n\n    for artist in tool._handles_artists:\n        assert artist.get_color() == 'b'\n        assert artist.get_alpha() == 0.5\n    tool.set_handle_props(color='r', alpha=0.3)\n    for artist in tool._handles_artists:\n        assert artist.get_color() == 'r'\n        assert artist.get_alpha() == 0.3\n\n\n@check_figures_equal()\ndef test_rect_visibility(fig_test, fig_ref):\n    # Check that requesting an invisible selector makes it invisible\n    ax_test = fig_test.subplots()\n    _ = fig_ref.subplots()\n\n    tool = widgets.RectangleSelector(ax_test, onselect=noop,\n                                     props={'visible': False})\n    tool.extents = (0.2, 0.8, 0.3, 0.7)\n\n\n# Change the order that the extra point is inserted in\n@pytest.mark.parametrize('idx', [1, 2, 3])\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\ndef test_polygon_selector_remove(idx, draw_bounding_box):\n    verts = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = [polygon_place_vertex(*verts[0]),\n                      polygon_place_vertex(*verts[1]),\n                      polygon_place_vertex(*verts[2]),\n                      # Finish the polygon\n                      polygon_place_vertex(*verts[0])]\n    # Add an extra point\n    event_sequence.insert(idx, polygon_place_vertex(200, 200))\n    # Remove the extra point\n    event_sequence.append(polygon_remove_vertex(200, 200))\n    # Flatten list of lists\n    event_sequence = sum(event_sequence, [])\n    check_polygon_selector(event_sequence, verts, 2,\n                           draw_bounding_box=draw_bounding_box)\n\n\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\ndef test_polygon_selector_remove_first_point(draw_bounding_box):\n    verts = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(*verts[0]) +\n                      polygon_place_vertex(*verts[1]) +\n                      polygon_place_vertex(*verts[2]) +\n                      polygon_place_vertex(*verts[0]) +\n                      polygon_remove_vertex(*verts[0]))\n    check_polygon_selector(event_sequence, verts[1:], 2,\n                           draw_bounding_box=draw_bounding_box)\n\n\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\ndef test_polygon_selector_redraw(ax, draw_bounding_box):\n    verts = [(50, 50), (150, 50), (50, 150)]\n    event_sequence = (polygon_place_vertex(*verts[0]) +\n                      polygon_place_vertex(*verts[1]) +\n                      polygon_place_vertex(*verts[2]) +\n                      polygon_place_vertex(*verts[0]) +\n                      # Polygon completed, now remove first two verts\n                      polygon_remove_vertex(*verts[1]) +\n                      polygon_remove_vertex(*verts[2]) +\n                      # At this point the tool should be reset so we can add\n                      # more vertices\n                      polygon_place_vertex(*verts[1]))\n\n    tool = widgets.PolygonSelector(ax, onselect=noop,\n                                   draw_bounding_box=draw_bounding_box)\n    for (etype, event_args) in event_sequence:\n        do_event(tool, etype, **event_args)\n    # After removing two verts, only one remains, and the\n    # selector should be automatically resete\n    assert tool.verts == verts[0:2]\n\n\n@pytest.mark.parametrize('draw_bounding_box', [False, True])\n@check_figures_equal(extensions=['png'])\ndef test_polygon_selector_verts_setter(fig_test, fig_ref, draw_bounding_box):\n    verts = [(0.1, 0.4), (0.5, 0.9), (0.3, 0.2)]\n    ax_test = fig_test.add_subplot()\n\n    tool_test = widgets.PolygonSelector(\n        ax_test, onselect=noop, draw_bounding_box=draw_bounding_box)\n    tool_test.verts = verts\n    assert tool_test.verts == verts\n\n    ax_ref = fig_ref.add_subplot()\n    tool_ref = widgets.PolygonSelector(\n        ax_ref, onselect=noop, draw_bounding_box=draw_bounding_box)\n    event_sequence = (polygon_place_vertex(*verts[0]) +\n                      polygon_place_vertex(*verts[1]) +\n                      polygon_place_vertex(*verts[2]) +\n                      polygon_place_vertex(*verts[0]))\n    for (etype, event_args) in event_sequence:\n        do_event(tool_ref, etype, **event_args)\n\n\ndef test_polygon_selector_box(ax):\n    # Create a diamond shape\n    verts = [(20, 0), (0, 20), (20, 40), (40, 20)]\n    event_sequence = (polygon_place_vertex(*verts[0]) +\n                      polygon_place_vertex(*verts[1]) +\n                      polygon_place_vertex(*verts[2]) +\n                      polygon_place_vertex(*verts[3]) +\n                      polygon_place_vertex(*verts[0]))\n\n    # Create selector\n    tool = widgets.PolygonSelector(ax, onselect=noop, draw_bounding_box=True)\n    for (etype, event_args) in event_sequence:\n        do_event(tool, etype, **event_args)\n\n    # In order to trigger the correct callbacks, trigger events on the canvas\n    # instead of the individual tools\n    t = ax.transData\n    canvas = ax.figure.canvas\n\n    # Scale to half size using the top right corner of the bounding box\n    canvas.button_press_event(*t.transform((40, 40)), 1)\n    canvas.motion_notify_event(*t.transform((20, 20)))\n    canvas.button_release_event(*t.transform((20, 20)), 1)\n    np.testing.assert_allclose(\n        tool.verts, [(10, 0), (0, 10), (10, 20), (20, 10)])\n\n    # Move using the center of the bounding box\n    canvas.button_press_event(*t.transform((10, 10)), 1)\n    canvas.motion_notify_event(*t.transform((30, 30)))\n    canvas.button_release_event(*t.transform((30, 30)), 1)\n    np.testing.assert_allclose(\n        tool.verts, [(30, 20), (20, 30), (30, 40), (40, 30)])\n\n    # Remove a point from the polygon and check that the box extents update\n    np.testing.assert_allclose(\n        tool._box.extents, (20.0, 40.0, 20.0, 40.0))\n\n    canvas.button_press_event(*t.transform((30, 20)), 3)\n    canvas.button_release_event(*t.transform((30, 20)), 3)\n    np.testing.assert_allclose(\n        tool.verts, [(20, 30), (30, 40), (40, 30)])\n    np.testing.assert_allclose(\n        tool._box.extents, (20.0, 40.0, 30.0, 40.0))\n\n\n@pytest.mark.parametrize(\n    \"horizOn, vertOn\",\n    [(True, True), (True, False), (False, True)],\n)\ndef test_MultiCursor(horizOn, vertOn):\n    fig, (ax1, ax2, ax3) = plt.subplots(3, sharex=True)\n\n    # useblit=false to avoid having to draw the figure to cache the renderer\n    multi = widgets.MultiCursor(\n        fig.canvas, (ax1, ax2), useblit=False, horizOn=horizOn, vertOn=vertOn\n    )\n\n    # Only two of the axes should have a line drawn on them.\n    if vertOn:\n        assert len(multi.vlines) == 2\n    if horizOn:\n        assert len(multi.hlines) == 2\n\n    # mock a motion_notify_event\n    # Can't use `do_event` as that helper requires the widget\n    # to have a single .ax attribute.\n    event = mock_event(ax1, xdata=.5, ydata=.25)\n    multi.onmove(event)\n\n    # the lines in the first two ax should both move\n    for l in multi.vlines:\n        assert l.get_xdata() == (.5, .5)\n    for l in multi.hlines:\n        assert l.get_ydata() == (.25, .25)\n\n    # test a move event in an Axes not part of the MultiCursor\n    # the lines in ax1 and ax2 should not have moved.\n    event = mock_event(ax3, xdata=.75, ydata=.75)\n    multi.onmove(event)\n    for l in multi.vlines:\n        assert l.get_xdata() == (.5, .5)\n    for l in multi.hlines:\n        assert l.get_ydata() == (.25, .25)\n"
    },
    {
      "filename": "lib/matplotlib/widgets.py",
      "content": "\"\"\"\nGUI neutral widgets\n===================\n\nWidgets that are designed to work for any of the GUI backends.\nAll of these widgets require you to predefine a `matplotlib.axes.Axes`\ninstance and pass that as the first parameter.  Matplotlib doesn't try to\nbe too smart with respect to layout -- you will have to figure out how\nwide and tall you want your Axes to be to accommodate your widget.\n\"\"\"\n\nfrom contextlib import ExitStack\nimport copy\nfrom numbers import Integral, Number\n\nimport numpy as np\n\nimport matplotlib as mpl\nfrom . import (_api, _docstring, backend_tools, cbook, colors, ticker,\n               transforms)\nfrom .lines import Line2D\nfrom .patches import Circle, Rectangle, Ellipse\nfrom .transforms import TransformedPatchPath, Affine2D\n\n\nclass LockDraw:\n    \"\"\"\n    Some widgets, like the cursor, draw onto the canvas, and this is not\n    desirable under all circumstances, like when the toolbar is in zoom-to-rect\n    mode and drawing a rectangle.  To avoid this, a widget can acquire a\n    canvas' lock with ``canvas.widgetlock(widget)`` before drawing on the\n    canvas; this will prevent other widgets from doing so at the same time (if\n    they also try to acquire the lock first).\n    \"\"\"\n\n    def __init__(self):\n        self._owner = None\n\n    def __call__(self, o):\n        \"\"\"Reserve the lock for *o*.\"\"\"\n        if not self.available(o):\n            raise ValueError('already locked')\n        self._owner = o\n\n    def release(self, o):\n        \"\"\"Release the lock from *o*.\"\"\"\n        if not self.available(o):\n            raise ValueError('you do not own this lock')\n        self._owner = None\n\n    def available(self, o):\n        \"\"\"Return whether drawing is available to *o*.\"\"\"\n        return not self.locked() or self.isowner(o)\n\n    def isowner(self, o):\n        \"\"\"Return whether *o* owns this lock.\"\"\"\n        return self._owner is o\n\n    def locked(self):\n        \"\"\"Return whether the lock is currently held by an owner.\"\"\"\n        return self._owner is not None\n\n\nclass Widget:\n    \"\"\"\n    Abstract base class for GUI neutral widgets.\n    \"\"\"\n    drawon = True\n    eventson = True\n    _active = True\n\n    def set_active(self, active):\n        \"\"\"Set whether the widget is active.\"\"\"\n        self._active = active\n\n    def get_active(self):\n        \"\"\"Get whether the widget is active.\"\"\"\n        return self._active\n\n    # set_active is overridden by SelectorWidgets.\n    active = property(get_active, set_active, doc=\"Is the widget active?\")\n\n    def ignore(self, event):\n        \"\"\"\n        Return whether *event* should be ignored.\n\n        This method should be called at the beginning of any event callback.\n        \"\"\"\n        return not self.active\n\n\nclass AxesWidget(Widget):\n    \"\"\"\n    Widget connected to a single `~matplotlib.axes.Axes`.\n\n    To guarantee that the widget remains responsive and not garbage-collected,\n    a reference to the object should be maintained by the user.\n\n    This is necessary because the callback registry\n    maintains only weak-refs to the functions, which are member\n    functions of the widget.  If there are no references to the widget\n    object it may be garbage collected which will disconnect the callbacks.\n\n    Attributes\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    canvas : `~matplotlib.backend_bases.FigureCanvasBase`\n        The parent figure canvas for the widget.\n    active : bool\n        If False, the widget does not respond to events.\n    \"\"\"\n\n    cids = _api.deprecated(\"3.4\")(property(lambda self: self._cids))\n\n    def __init__(self, ax):\n        self.ax = ax\n        self.canvas = ax.figure.canvas\n        self._cids = []\n\n    def connect_event(self, event, callback):\n        \"\"\"\n        Connect a callback function with an event.\n\n        This should be used in lieu of ``figure.canvas.mpl_connect`` since this\n        function stores callback ids for later clean up.\n        \"\"\"\n        cid = self.canvas.mpl_connect(event, callback)\n        self._cids.append(cid)\n\n    def disconnect_events(self):\n        \"\"\"Disconnect all events created by this widget.\"\"\"\n        for c in self._cids:\n            self.canvas.mpl_disconnect(c)\n\n\nclass Button(AxesWidget):\n    \"\"\"\n    A GUI neutral button.\n\n    For the button to remain responsive you must keep a reference to it.\n    Call `.on_clicked` to connect to the button.\n\n    Attributes\n    ----------\n    ax\n        The `matplotlib.axes.Axes` the button renders into.\n    label\n        A `matplotlib.text.Text` instance.\n    color\n        The color of the button when not hovering.\n    hovercolor\n        The color of the button when hovering.\n    \"\"\"\n\n    cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n        lambda self: len(self._observers.callbacks['clicked'])))\n    observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['clicked']))\n\n    def __init__(self, ax, label, image=None,\n                 color='0.85', hovercolor='0.95'):\n        \"\"\"\n        Parameters\n        ----------\n        ax : `~matplotlib.axes.Axes`\n            The `~.axes.Axes` instance the button will be placed into.\n        label : str\n            The button text.\n        image : array-like or PIL Image\n            The image to place in the button, if not *None*.  The parameter is\n            directly forwarded to `~matplotlib.axes.Axes.imshow`.\n        color : color\n            The color of the button when not activated.\n        hovercolor : color\n            The color of the button when the mouse is over it.\n        \"\"\"\n        super().__init__(ax)\n\n        if image is not None:\n            ax.imshow(image)\n        self.label = ax.text(0.5, 0.5, label,\n                             verticalalignment='center',\n                             horizontalalignment='center',\n                             transform=ax.transAxes)\n\n        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n\n        self.connect_event('button_press_event', self._click)\n        self.connect_event('button_release_event', self._release)\n        self.connect_event('motion_notify_event', self._motion)\n        ax.set_navigate(False)\n        ax.set_facecolor(color)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        self.color = color\n        self.hovercolor = hovercolor\n\n    def _click(self, event):\n        if self.ignore(event) or event.inaxes != self.ax or not self.eventson:\n            return\n        if event.canvas.mouse_grabber != self.ax:\n            event.canvas.grab_mouse(self.ax)\n\n    def _release(self, event):\n        if self.ignore(event) or event.canvas.mouse_grabber != self.ax:\n            return\n        event.canvas.release_mouse(self.ax)\n        if self.eventson and event.inaxes == self.ax:\n            self._observers.process('clicked', event)\n\n    def _motion(self, event):\n        if self.ignore(event):\n            return\n        c = self.hovercolor if event.inaxes == self.ax else self.color\n        if not colors.same_color(c, self.ax.get_facecolor()):\n            self.ax.set_facecolor(c)\n            if self.drawon:\n                self.ax.figure.canvas.draw()\n\n    def on_clicked(self, func):\n        \"\"\"\n        Connect the callback function *func* to button click events.\n\n        Returns a connection id, which can be used to disconnect the callback.\n        \"\"\"\n        return self._observers.connect('clicked', lambda event: func(event))\n\n    def disconnect(self, cid):\n        \"\"\"Remove the callback function with connection id *cid*.\"\"\"\n        self._observers.disconnect(cid)\n\n\nclass SliderBase(AxesWidget):\n    \"\"\"\n    The base class for constructing Slider widgets. Not intended for direct\n    usage.\n\n    For the slider to remain responsive you must maintain a reference to it.\n    \"\"\"\n    def __init__(self, ax, orientation, closedmin, closedmax,\n                 valmin, valmax, valfmt, dragging, valstep):\n        if ax.name == '3d':\n            raise ValueError('Sliders cannot be added to 3D Axes')\n\n        super().__init__(ax)\n        _api.check_in_list(['horizontal', 'vertical'], orientation=orientation)\n\n        self.orientation = orientation\n        self.closedmin = closedmin\n        self.closedmax = closedmax\n        self.valmin = valmin\n        self.valmax = valmax\n        self.valstep = valstep\n        self.drag_active = False\n        self.valfmt = valfmt\n\n        if orientation == \"vertical\":\n            ax.set_ylim((valmin, valmax))\n            axis = ax.yaxis\n        else:\n            ax.set_xlim((valmin, valmax))\n            axis = ax.xaxis\n\n        self._fmt = axis.get_major_formatter()\n        if not isinstance(self._fmt, ticker.ScalarFormatter):\n            self._fmt = ticker.ScalarFormatter()\n            self._fmt.set_axis(axis)\n        self._fmt.set_useOffset(False)  # No additive offset.\n        self._fmt.set_useMathText(True)  # x sign before multiplicative offset.\n\n        ax.set_axis_off()\n        ax.set_navigate(False)\n\n        self.connect_event(\"button_press_event\", self._update)\n        self.connect_event(\"button_release_event\", self._update)\n        if dragging:\n            self.connect_event(\"motion_notify_event\", self._update)\n        self._observers = cbook.CallbackRegistry(signals=[\"changed\"])\n\n    def _stepped_value(self, val):\n        \"\"\"Return *val* coerced to closest number in the ``valstep`` grid.\"\"\"\n        if isinstance(self.valstep, Number):\n            val = (self.valmin\n                   + round((val - self.valmin) / self.valstep) * self.valstep)\n        elif self.valstep is not None:\n            valstep = np.asanyarray(self.valstep)\n            if valstep.ndim != 1:\n                raise ValueError(\n                    f\"valstep must have 1 dimension but has {valstep.ndim}\"\n                )\n            val = valstep[np.argmin(np.abs(valstep - val))]\n        return val\n\n    def disconnect(self, cid):\n        \"\"\"\n        Remove the observer with connection id *cid*.\n\n        Parameters\n        ----------\n        cid : int\n            Connection id of the observer to be removed.\n        \"\"\"\n        self._observers.disconnect(cid)\n\n    def reset(self):\n        \"\"\"Reset the slider to the initial value.\"\"\"\n        if np.any(self.val != self.valinit):\n            self.set_val(self.valinit)\n\n\nclass Slider(SliderBase):\n    \"\"\"\n    A slider representing a floating point range.\n\n    Create a slider from *valmin* to *valmax* in Axes *ax*. For the slider to\n    remain responsive you must maintain a reference to it. Call\n    :meth:`on_changed` to connect to the slider event.\n\n    Attributes\n    ----------\n    val : float\n        Slider value.\n    \"\"\"\n\n    cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n        lambda self: len(self._observers.callbacks['changed'])))\n    observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['changed']))\n\n    def __init__(self, ax, label, valmin, valmax, valinit=0.5, valfmt=None,\n                 closedmin=True, closedmax=True, slidermin=None,\n                 slidermax=None, dragging=True, valstep=None,\n                 orientation='horizontal', *, initcolor='r',\n                 track_color='lightgrey', handle_style=None, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        ax : Axes\n            The Axes to put the slider in.\n\n        label : str\n            Slider label.\n\n        valmin : float\n            The minimum value of the slider.\n\n        valmax : float\n            The maximum value of the slider.\n\n        valinit : float, default: 0.5\n            The slider initial position.\n\n        valfmt : str, default: None\n            %-format string used to format the slider value.  If None, a\n            `.ScalarFormatter` is used instead.\n\n        closedmin : bool, default: True\n            Whether the slider interval is closed on the bottom.\n\n        closedmax : bool, default: True\n            Whether the slider interval is closed on the top.\n\n        slidermin : Slider, default: None\n            Do not allow the current slider to have a value less than\n            the value of the Slider *slidermin*.\n\n        slidermax : Slider, default: None\n            Do not allow the current slider to have a value greater than\n            the value of the Slider *slidermax*.\n\n        dragging : bool, default: True\n            If True the slider can be dragged by the mouse.\n\n        valstep : float or array-like, default: None\n            If a float, the slider will snap to multiples of *valstep*.\n            If an array the slider will snap to the values in the array.\n\n        orientation : {'horizontal', 'vertical'}, default: 'horizontal'\n            The orientation of the slider.\n\n        initcolor : color, default: 'r'\n            The color of the line at the *valinit* position. Set to ``'none'``\n            for no line.\n\n        track_color : color, default: 'lightgrey'\n            The color of the background track. The track is accessible for\n            further styling via the *track* attribute.\n\n        handle_style : dict\n            Properties of the slider handle. Default values are\n\n            ========= ===== ======= ========================================\n            Key       Value Default Description\n            ========= ===== ======= ========================================\n            facecolor color 'white' The facecolor of the slider handle.\n            edgecolor color '.75'   The edgecolor of the slider handle.\n            size      int   10      The size of the slider handle in points.\n            ========= ===== ======= ========================================\n\n            Other values will be transformed as marker{foo} and passed to the\n            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will\n            result in ``markerstyle = 'x'``.\n\n        Notes\n        -----\n        Additional kwargs are passed on to ``self.poly`` which is the\n        `~matplotlib.patches.Polygon` that draws the slider knob.  See the\n        `.Polygon` documentation for valid property names (``facecolor``,\n        ``edgecolor``, ``alpha``, etc.).\n        \"\"\"\n        super().__init__(ax, orientation, closedmin, closedmax,\n                         valmin, valmax, valfmt, dragging, valstep)\n\n        if slidermin is not None and not hasattr(slidermin, 'val'):\n            raise ValueError(\n                f\"Argument slidermin ({type(slidermin)}) has no 'val'\")\n        if slidermax is not None and not hasattr(slidermax, 'val'):\n            raise ValueError(\n                f\"Argument slidermax ({type(slidermax)}) has no 'val'\")\n        self.slidermin = slidermin\n        self.slidermax = slidermax\n        valinit = self._value_in_bounds(valinit)\n        if valinit is None:\n            valinit = valmin\n        self.val = valinit\n        self.valinit = valinit\n\n        defaults = {'facecolor': 'white', 'edgecolor': '.75', 'size': 10}\n        handle_style = {} if handle_style is None else handle_style\n        marker_props = {\n            f'marker{k}': v for k, v in {**defaults, **handle_style}.items()\n        }\n\n        if orientation == 'vertical':\n            self.track = Rectangle(\n                (.25, 0), .5, 1,\n                transform=ax.transAxes,\n                facecolor=track_color\n            )\n            ax.add_patch(self.track)\n            self.poly = ax.axhspan(valmin, valinit, .25, .75, **kwargs)\n            # Drawing a longer line and clipping it to the track avoids\n            # pixellization-related asymmetries.\n            self.hline = ax.axhline(valinit, 0, 1, color=initcolor, lw=1,\n                                    clip_path=TransformedPatchPath(self.track))\n            handleXY = [[0.5], [valinit]]\n        else:\n            self.track = Rectangle(\n                (0, .25), 1, .5,\n                transform=ax.transAxes,\n                facecolor=track_color\n            )\n            ax.add_patch(self.track)\n            self.poly = ax.axvspan(valmin, valinit, .25, .75, **kwargs)\n            self.vline = ax.axvline(valinit, 0, 1, color=initcolor, lw=1,\n                                    clip_path=TransformedPatchPath(self.track))\n            handleXY = [[valinit], [0.5]]\n        self._handle, = ax.plot(\n            *handleXY,\n            \"o\",\n            **marker_props,\n            clip_on=False\n        )\n\n        if orientation == 'vertical':\n            self.label = ax.text(0.5, 1.02, label, transform=ax.transAxes,\n                                 verticalalignment='bottom',\n                                 horizontalalignment='center')\n\n            self.valtext = ax.text(0.5, -0.02, self._format(valinit),\n                                   transform=ax.transAxes,\n                                   verticalalignment='top',\n                                   horizontalalignment='center')\n        else:\n            self.label = ax.text(-0.02, 0.5, label, transform=ax.transAxes,\n                                 verticalalignment='center',\n                                 horizontalalignment='right')\n\n            self.valtext = ax.text(1.02, 0.5, self._format(valinit),\n                                   transform=ax.transAxes,\n                                   verticalalignment='center',\n                                   horizontalalignment='left')\n\n        self.set_val(valinit)\n\n    def _value_in_bounds(self, val):\n        \"\"\"Makes sure *val* is with given bounds.\"\"\"\n        val = self._stepped_value(val)\n\n        if val <= self.valmin:\n            if not self.closedmin:\n                return\n            val = self.valmin\n        elif val >= self.valmax:\n            if not self.closedmax:\n                return\n            val = self.valmax\n\n        if self.slidermin is not None and val <= self.slidermin.val:\n            if not self.closedmin:\n                return\n            val = self.slidermin.val\n\n        if self.slidermax is not None and val >= self.slidermax.val:\n            if not self.closedmax:\n                return\n            val = self.slidermax.val\n        return val\n\n    def _update(self, event):\n        \"\"\"Update the slider position.\"\"\"\n        if self.ignore(event) or event.button != 1:\n            return\n\n        if event.name == 'button_press_event' and event.inaxes == self.ax:\n            self.drag_active = True\n            event.canvas.grab_mouse(self.ax)\n\n        if not self.drag_active:\n            return\n\n        elif ((event.name == 'button_release_event') or\n              (event.name == 'button_press_event' and\n               event.inaxes != self.ax)):\n            self.drag_active = False\n            event.canvas.release_mouse(self.ax)\n            return\n        if self.orientation == 'vertical':\n            val = self._value_in_bounds(event.ydata)\n        else:\n            val = self._value_in_bounds(event.xdata)\n        if val not in [None, self.val]:\n            self.set_val(val)\n\n    def _format(self, val):\n        \"\"\"Pretty-print *val*.\"\"\"\n        if self.valfmt is not None:\n            return self.valfmt % val\n        else:\n            _, s, _ = self._fmt.format_ticks([self.valmin, val, self.valmax])\n            # fmt.get_offset is actually the multiplicative factor, if any.\n            return s + self._fmt.get_offset()\n\n    def set_val(self, val):\n        \"\"\"\n        Set slider value to *val*.\n\n        Parameters\n        ----------\n        val : float\n        \"\"\"\n        xy = self.poly.xy\n        if self.orientation == 'vertical':\n            xy[1] = .25, val\n            xy[2] = .75, val\n            self._handle.set_ydata([val])\n        else:\n            xy[2] = val, .75\n            xy[3] = val, .25\n            self._handle.set_xdata([val])\n        self.poly.xy = xy\n        self.valtext.set_text(self._format(val))\n        if self.drawon:\n            self.ax.figure.canvas.draw_idle()\n        self.val = val\n        if self.eventson:\n            self._observers.process('changed', val)\n\n    def on_changed(self, func):\n        \"\"\"\n        Connect *func* as callback function to changes of the slider value.\n\n        Parameters\n        ----------\n        func : callable\n            Function to call when slider is changed.\n            The function must accept a single float as its arguments.\n\n        Returns\n        -------\n        int\n            Connection id (which can be used to disconnect *func*).\n        \"\"\"\n        return self._observers.connect('changed', lambda val: func(val))\n\n\nclass RangeSlider(SliderBase):\n    \"\"\"\n    A slider representing a range of floating point values. Defines the min and\n    max of the range via the *val* attribute as a tuple of (min, max).\n\n    Create a slider that defines a range contained within [*valmin*, *valmax*]\n    in Axes *ax*. For the slider to remain responsive you must maintain a\n    reference to it. Call :meth:`on_changed` to connect to the slider event.\n\n    Attributes\n    ----------\n    val : tuple of float\n        Slider value.\n    \"\"\"\n\n    def __init__(\n        self,\n        ax,\n        label,\n        valmin,\n        valmax,\n        valinit=None,\n        valfmt=None,\n        closedmin=True,\n        closedmax=True,\n        dragging=True,\n        valstep=None,\n        orientation=\"horizontal\",\n        track_color='lightgrey',\n        handle_style=None,\n        **kwargs,\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        ax : Axes\n            The Axes to put the slider in.\n\n        label : str\n            Slider label.\n\n        valmin : float\n            The minimum value of the slider.\n\n        valmax : float\n            The maximum value of the slider.\n\n        valinit : tuple of float or None, default: None\n            The initial positions of the slider. If None the initial positions\n            will be at the 25th and 75th percentiles of the range.\n\n        valfmt : str, default: None\n            %-format string used to format the slider values.  If None, a\n            `.ScalarFormatter` is used instead.\n\n        closedmin : bool, default: True\n            Whether the slider interval is closed on the bottom.\n\n        closedmax : bool, default: True\n            Whether the slider interval is closed on the top.\n\n        dragging : bool, default: True\n            If True the slider can be dragged by the mouse.\n\n        valstep : float, default: None\n            If given, the slider will snap to multiples of *valstep*.\n\n        orientation : {'horizontal', 'vertical'}, default: 'horizontal'\n            The orientation of the slider.\n\n        track_color : color, default: 'lightgrey'\n            The color of the background track. The track is accessible for\n            further styling via the *track* attribute.\n\n        handle_style : dict\n            Properties of the slider handles. Default values are\n\n            ========= ===== ======= =========================================\n            Key       Value Default Description\n            ========= ===== ======= =========================================\n            facecolor color 'white' The facecolor of the slider handles.\n            edgecolor color '.75'   The edgecolor of the slider handles.\n            size      int   10      The size of the slider handles in points.\n            ========= ===== ======= =========================================\n\n            Other values will be transformed as marker{foo} and passed to the\n            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will\n            result in ``markerstyle = 'x'``.\n\n        Notes\n        -----\n        Additional kwargs are passed on to ``self.poly`` which is the\n        `~matplotlib.patches.Polygon` that draws the slider knob.  See the\n        `.Polygon` documentation for valid property names (``facecolor``,\n        ``edgecolor``, ``alpha``, etc.).\n        \"\"\"\n        super().__init__(ax, orientation, closedmin, closedmax,\n                         valmin, valmax, valfmt, dragging, valstep)\n\n        # Set a value to allow _value_in_bounds() to work.\n        self.val = [valmin, valmax]\n        if valinit is None:\n            # Place at the 25th and 75th percentiles\n            extent = valmax - valmin\n            valinit = np.array([valmin + extent * 0.25,\n                                valmin + extent * 0.75])\n        else:\n            valinit = self._value_in_bounds(valinit)\n        self.val = valinit\n        self.valinit = valinit\n\n        defaults = {'facecolor': 'white', 'edgecolor': '.75', 'size': 10}\n        handle_style = {} if handle_style is None else handle_style\n        marker_props = {\n            f'marker{k}': v for k, v in {**defaults, **handle_style}.items()\n        }\n\n        if orientation == \"vertical\":\n            self.track = Rectangle(\n                (.25, 0), .5, 2,\n                transform=ax.transAxes,\n                facecolor=track_color\n            )\n            ax.add_patch(self.track)\n            self.poly = ax.axhspan(valinit[0], valinit[1], 0, 1, **kwargs)\n            handleXY_1 = [.5, valinit[0]]\n            handleXY_2 = [.5, valinit[1]]\n        else:\n            self.track = Rectangle(\n                (0, .25), 1, .5,\n                transform=ax.transAxes,\n                facecolor=track_color\n            )\n            ax.add_patch(self.track)\n            self.poly = ax.axvspan(valinit[0], valinit[1], 0, 1, **kwargs)\n            handleXY_1 = [valinit[0], .5]\n            handleXY_2 = [valinit[1], .5]\n        self._handles = [\n            ax.plot(\n                *handleXY_1,\n                \"o\",\n                **marker_props,\n                clip_on=False\n            )[0],\n            ax.plot(\n                *handleXY_2,\n                \"o\",\n                **marker_props,\n                clip_on=False\n            )[0]\n        ]\n\n        if orientation == \"vertical\":\n            self.label = ax.text(\n                0.5,\n                1.02,\n                label,\n                transform=ax.transAxes,\n                verticalalignment=\"bottom\",\n                horizontalalignment=\"center\",\n            )\n\n            self.valtext = ax.text(\n                0.5,\n                -0.02,\n                self._format(valinit),\n                transform=ax.transAxes,\n                verticalalignment=\"top\",\n                horizontalalignment=\"center\",\n            )\n        else:\n            self.label = ax.text(\n                -0.02,\n                0.5,\n                label,\n                transform=ax.transAxes,\n                verticalalignment=\"center\",\n                horizontalalignment=\"right\",\n            )\n\n            self.valtext = ax.text(\n                1.02,\n                0.5,\n                self._format(valinit),\n                transform=ax.transAxes,\n                verticalalignment=\"center\",\n                horizontalalignment=\"left\",\n            )\n\n        self._active_handle = None\n        self.set_val(valinit)\n\n    def _min_in_bounds(self, min):\n        \"\"\"Ensure the new min value is between valmin and self.val[1].\"\"\"\n        if min <= self.valmin:\n            if not self.closedmin:\n                return self.val[0]\n            min = self.valmin\n\n        if min > self.val[1]:\n            min = self.val[1]\n        return self._stepped_value(min)\n\n    def _max_in_bounds(self, max):\n        \"\"\"Ensure the new max value is between valmax and self.val[0].\"\"\"\n        if max >= self.valmax:\n            if not self.closedmax:\n                return self.val[1]\n            max = self.valmax\n\n        if max <= self.val[0]:\n            max = self.val[0]\n        return self._stepped_value(max)\n\n    def _value_in_bounds(self, vals):\n        \"\"\"Clip min, max values to the bounds.\"\"\"\n        return (self._min_in_bounds(vals[0]), self._max_in_bounds(vals[1]))\n\n    def _update_val_from_pos(self, pos):\n        \"\"\"Update the slider value based on a given position.\"\"\"\n        idx = np.argmin(np.abs(self.val - pos))\n        if idx == 0:\n            val = self._min_in_bounds(pos)\n            self.set_min(val)\n        else:\n            val = self._max_in_bounds(pos)\n            self.set_max(val)\n        if self._active_handle:\n            if self.orientation == \"vertical\":\n                self._active_handle.set_ydata([val])\n            else:\n                self._active_handle.set_xdata([val])\n\n    def _update(self, event):\n        \"\"\"Update the slider position.\"\"\"\n        if self.ignore(event) or event.button != 1:\n            return\n\n        if event.name == \"button_press_event\" and event.inaxes == self.ax:\n            self.drag_active = True\n            event.canvas.grab_mouse(self.ax)\n\n        if not self.drag_active:\n            return\n\n        elif (event.name == \"button_release_event\") or (\n            event.name == \"button_press_event\" and event.inaxes != self.ax\n        ):\n            self.drag_active = False\n            event.canvas.release_mouse(self.ax)\n            self._active_handle = None\n            return\n\n        # determine which handle was grabbed\n        if self.orientation == \"vertical\":\n            handle_index = np.argmin(\n                np.abs([h.get_ydata()[0] - event.ydata for h in self._handles])\n            )\n        else:\n            handle_index = np.argmin(\n                np.abs([h.get_xdata()[0] - event.xdata for h in self._handles])\n            )\n        handle = self._handles[handle_index]\n\n        # these checks ensure smooth behavior if the handles swap which one\n        # has a higher value. i.e. if one is dragged over and past the other.\n        if handle is not self._active_handle:\n            self._active_handle = handle\n\n        if self.orientation == \"vertical\":\n            self._update_val_from_pos(event.ydata)\n        else:\n            self._update_val_from_pos(event.xdata)\n\n    def _format(self, val):\n        \"\"\"Pretty-print *val*.\"\"\"\n        if self.valfmt is not None:\n            return f\"({self.valfmt % val[0]}, {self.valfmt % val[1]})\"\n        else:\n            _, s1, s2, _ = self._fmt.format_ticks(\n                [self.valmin, *val, self.valmax]\n            )\n            # fmt.get_offset is actually the multiplicative factor, if any.\n            s1 += self._fmt.get_offset()\n            s2 += self._fmt.get_offset()\n            # Use f string to avoid issues with backslashes when cast to a str\n            return f\"({s1}, {s2})\"\n\n    def set_min(self, min):\n        \"\"\"\n        Set the lower value of the slider to *min*.\n\n        Parameters\n        ----------\n        min : float\n        \"\"\"\n        self.set_val((min, self.val[1]))\n\n    def set_max(self, max):\n        \"\"\"\n        Set the lower value of the slider to *max*.\n\n        Parameters\n        ----------\n        max : float\n        \"\"\"\n        self.set_val((self.val[0], max))\n\n    def set_val(self, val):\n        \"\"\"\n        Set slider value to *val*.\n\n        Parameters\n        ----------\n        val : tuple or array-like of float\n        \"\"\"\n        val = np.sort(val)\n        _api.check_shape((2,), val=val)\n        val[0] = self._min_in_bounds(val[0])\n        val[1] = self._max_in_bounds(val[1])\n        xy = self.poly.xy\n        if self.orientation == \"vertical\":\n            xy[0] = .25, val[0]\n            xy[1] = .25, val[1]\n            xy[2] = .75, val[1]\n            xy[3] = .75, val[0]\n            xy[4] = .25, val[0]\n\n            self._handles[0].set_ydata([val[0]])\n            self._handles[1].set_ydata([val[1]])\n        else:\n            xy[0] = val[0], .25\n            xy[1] = val[0], .75\n            xy[2] = val[1], .75\n            xy[3] = val[1], .25\n            xy[4] = val[0], .25\n\n            self._handles[0].set_xdata([val[0]])\n            self._handles[1].set_xdata([val[1]])\n\n        self.poly.xy = xy\n        self.valtext.set_text(self._format(val))\n\n        if self.drawon:\n            self.ax.figure.canvas.draw_idle()\n        self.val = val\n        if self.eventson:\n            self._observers.process(\"changed\", val)\n\n    def on_changed(self, func):\n        \"\"\"\n        Connect *func* as callback function to changes of the slider value.\n\n        Parameters\n        ----------\n        func : callable\n            Function to call when slider is changed. The function\n            must accept a numpy array with shape (2,) as its argument.\n\n        Returns\n        -------\n        int\n            Connection id (which can be used to disconnect *func*).\n        \"\"\"\n        return self._observers.connect('changed', lambda val: func(val))\n\n\nclass CheckButtons(AxesWidget):\n    r\"\"\"\n    A GUI neutral set of check buttons.\n\n    For the check buttons to remain responsive you must keep a\n    reference to this object.\n\n    Connect to the CheckButtons with the `.on_clicked` method.\n\n    Attributes\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    labels : list of `.Text`\n\n    rectangles : list of `.Rectangle`\n\n    lines : list of (`.Line2D`, `.Line2D`) pairs\n        List of lines for the x's in the check boxes.  These lines exist for\n        each box, but have ``set_visible(False)`` when its box is not checked.\n    \"\"\"\n\n    cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n        lambda self: len(self._observers.callbacks['clicked'])))\n    observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['clicked']))\n\n    def __init__(self, ax, labels, actives=None):\n        \"\"\"\n        Add check buttons to `matplotlib.axes.Axes` instance *ax*.\n\n        Parameters\n        ----------\n        ax : `~matplotlib.axes.Axes`\n            The parent Axes for the widget.\n\n        labels : list of str\n            The labels of the check buttons.\n\n        actives : list of bool, optional\n            The initial check states of the buttons. The list must have the\n            same length as *labels*. If not given, all buttons are unchecked.\n        \"\"\"\n        super().__init__(ax)\n\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_navigate(False)\n\n        if actives is None:\n            actives = [False] * len(labels)\n\n        if len(labels) > 1:\n            dy = 1. / (len(labels) + 1)\n            ys = np.linspace(1 - dy, dy, len(labels))\n        else:\n            dy = 0.25\n            ys = [0.5]\n\n        axcolor = ax.get_facecolor()\n\n        self.labels = []\n        self.lines = []\n        self.rectangles = []\n\n        lineparams = {'color': 'k', 'linewidth': 1.25,\n                      'transform': ax.transAxes, 'solid_capstyle': 'butt'}\n        for y, label, active in zip(ys, labels, actives):\n            t = ax.text(0.25, y, label, transform=ax.transAxes,\n                        horizontalalignment='left',\n                        verticalalignment='center')\n\n            w, h = dy / 2, dy / 2\n            x, y = 0.05, y - h / 2\n\n            p = Rectangle(xy=(x, y), width=w, height=h, edgecolor='black',\n                          facecolor=axcolor, transform=ax.transAxes)\n\n            l1 = Line2D([x, x + w], [y + h, y], **lineparams)\n            l2 = Line2D([x, x + w], [y, y + h], **lineparams)\n\n            l1.set_visible(active)\n            l2.set_visible(active)\n            self.labels.append(t)\n            self.rectangles.append(p)\n            self.lines.append((l1, l2))\n            ax.add_patch(p)\n            ax.add_line(l1)\n            ax.add_line(l2)\n\n        self.connect_event('button_press_event', self._clicked)\n\n        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n\n    def _clicked(self, event):\n        if self.ignore(event) or event.button != 1 or event.inaxes != self.ax:\n            return\n        for i, (p, t) in enumerate(zip(self.rectangles, self.labels)):\n            if (t.get_window_extent().contains(event.x, event.y) or\n                    p.get_window_extent().contains(event.x, event.y)):\n                self.set_active(i)\n                break\n\n    def set_active(self, index):\n        \"\"\"\n        Toggle (activate or deactivate) a check button by index.\n\n        Callbacks will be triggered if :attr:`eventson` is True.\n\n        Parameters\n        ----------\n        index : int\n            Index of the check button to toggle.\n\n        Raises\n        ------\n        ValueError\n            If *index* is invalid.\n        \"\"\"\n        if index not in range(len(self.labels)):\n            raise ValueError(f'Invalid CheckButton index: {index}')\n\n        l1, l2 = self.lines[index]\n        l1.set_visible(not l1.get_visible())\n        l2.set_visible(not l2.get_visible())\n\n        if self.drawon:\n            self.ax.figure.canvas.draw()\n\n        if self.eventson:\n            self._observers.process('clicked', self.labels[index].get_text())\n\n    def get_status(self):\n        \"\"\"\n        Return a tuple of the status (True/False) of all of the check buttons.\n        \"\"\"\n        return [l1.get_visible() for (l1, l2) in self.lines]\n\n    def on_clicked(self, func):\n        \"\"\"\n        Connect the callback function *func* to button click events.\n\n        Returns a connection id, which can be used to disconnect the callback.\n        \"\"\"\n        return self._observers.connect('clicked', lambda text: func(text))\n\n    def disconnect(self, cid):\n        \"\"\"Remove the observer with connection id *cid*.\"\"\"\n        self._observers.disconnect(cid)\n\n\nclass TextBox(AxesWidget):\n    \"\"\"\n    A GUI neutral text input box.\n\n    For the text box to remain responsive you must keep a reference to it.\n\n    Call `.on_text_change` to be updated whenever the text changes.\n\n    Call `.on_submit` to be updated whenever the user hits enter or\n    leaves the text entry field.\n\n    Attributes\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    label : `.Text`\n\n    color : color\n        The color of the text box when not hovering.\n    hovercolor : color\n        The color of the text box when hovering.\n    \"\"\"\n\n    cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n        lambda self: sum(len(d) for d in self._observers.callbacks.values())))\n    change_observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['change']))\n    submit_observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['submit']))\n    DIST_FROM_LEFT = _api.deprecate_privatize_attribute(\"3.5\")\n\n    def __init__(self, ax, label, initial='',\n                 color='.95', hovercolor='1', label_pad=.01,\n                 textalignment=\"left\"):\n        \"\"\"\n        Parameters\n        ----------\n        ax : `~matplotlib.axes.Axes`\n            The `~.axes.Axes` instance the button will be placed into.\n        label : str\n            Label for this text box.\n        initial : str\n            Initial value in the text box.\n        color : color\n            The color of the box.\n        hovercolor : color\n            The color of the box when the mouse is over it.\n        label_pad : float\n            The distance between the label and the right side of the textbox.\n        textalignment : {'left', 'center', 'right'}\n            The horizontal location of the text.\n        \"\"\"\n        super().__init__(ax)\n\n        self._DIST_FROM_LEFT = .05\n\n        self._text_position = _api.check_getitem(\n            {\"left\": 0.05, \"center\": 0.5, \"right\": 0.95},\n            textalignment=textalignment)\n\n        self.label = ax.text(\n            -label_pad, 0.5, label, transform=ax.transAxes,\n            verticalalignment='center', horizontalalignment='right')\n\n        # TextBox's text object should not parse mathtext at all.\n        self.text_disp = self.ax.text(\n            self._text_position, 0.5, initial, transform=self.ax.transAxes,\n            verticalalignment='center', horizontalalignment=textalignment,\n            parse_math=False)\n\n        self._observers = cbook.CallbackRegistry(signals=[\"change\", \"submit\"])\n\n        ax.set(\n            xlim=(0, 1), ylim=(0, 1),  # s.t. cursor appears from first click.\n            navigate=False, facecolor=color,\n            xticks=[], yticks=[])\n\n        self.cursor_index = 0\n\n        self.cursor = ax.vlines(0, 0, 0, visible=False, color=\"k\", lw=1,\n                                transform=mpl.transforms.IdentityTransform())\n\n        self.connect_event('button_press_event', self._click)\n        self.connect_event('button_release_event', self._release)\n        self.connect_event('motion_notify_event', self._motion)\n        self.connect_event('key_press_event', self._keypress)\n        self.connect_event('resize_event', self._resize)\n\n        self.color = color\n        self.hovercolor = hovercolor\n\n        self.capturekeystrokes = False\n\n    @property\n    def text(self):\n        return self.text_disp.get_text()\n\n    def _rendercursor(self):\n        # this is a hack to figure out where the cursor should go.\n        # we draw the text up to where the cursor should go, measure\n        # and save its dimensions, draw the real text, then put the cursor\n        # at the saved dimensions\n\n        # This causes a single extra draw if the figure has never been rendered\n        # yet, which should be fine as we're going to repeatedly re-render the\n        # figure later anyways.\n        if self.ax.figure._cachedRenderer is None:\n            self.ax.figure.canvas.draw()\n\n        text = self.text_disp.get_text()  # Save value before overwriting it.\n        widthtext = text[:self.cursor_index]\n\n        bb_text = self.text_disp.get_window_extent()\n        self.text_disp.set_text(widthtext or \",\")\n        bb_widthtext = self.text_disp.get_window_extent()\n\n        if bb_text.y0 == bb_text.y1:  # Restoring the height if no text.\n            bb_text.y0 -= bb_widthtext.height / 2\n            bb_text.y1 += bb_widthtext.height / 2\n        elif not widthtext:  # Keep width to 0.\n            bb_text.x1 = bb_text.x0\n        else:  # Move the cursor using width of bb_widthtext.\n            bb_text.x1 = bb_text.x0 + bb_widthtext.width\n\n        self.cursor.set(\n            segments=[[(bb_text.x1, bb_text.y0), (bb_text.x1, bb_text.y1)]],\n            visible=True)\n        self.text_disp.set_text(text)\n\n        self.ax.figure.canvas.draw()\n\n    def _release(self, event):\n        if self.ignore(event):\n            return\n        if event.canvas.mouse_grabber != self.ax:\n            return\n        event.canvas.release_mouse(self.ax)\n\n    def _keypress(self, event):\n        if self.ignore(event):\n            return\n        if self.capturekeystrokes:\n            key = event.key\n            text = self.text\n            if len(key) == 1:\n                text = (text[:self.cursor_index] + key +\n                        text[self.cursor_index:])\n                self.cursor_index += 1\n            elif key == \"right\":\n                if self.cursor_index != len(text):\n                    self.cursor_index += 1\n            elif key == \"left\":\n                if self.cursor_index != 0:\n                    self.cursor_index -= 1\n            elif key == \"home\":\n                self.cursor_index = 0\n            elif key == \"end\":\n                self.cursor_index = len(text)\n            elif key == \"backspace\":\n                if self.cursor_index != 0:\n                    text = (text[:self.cursor_index - 1] +\n                            text[self.cursor_index:])\n                    self.cursor_index -= 1\n            elif key == \"delete\":\n                if self.cursor_index != len(self.text):\n                    text = (text[:self.cursor_index] +\n                            text[self.cursor_index + 1:])\n            self.text_disp.set_text(text)\n            self._rendercursor()\n            if self.eventson:\n                self._observers.process('change', self.text)\n                if key in [\"enter\", \"return\"]:\n                    self._observers.process('submit', self.text)\n\n    def set_val(self, val):\n        newval = str(val)\n        if self.text == newval:\n            return\n        self.text_disp.set_text(newval)\n        self._rendercursor()\n        if self.eventson:\n            self._observers.process('change', self.text)\n            self._observers.process('submit', self.text)\n\n    def begin_typing(self, x):\n        self.capturekeystrokes = True\n        # Disable keypress shortcuts, which may otherwise cause the figure to\n        # be saved, closed, etc., until the user stops typing.  The way to\n        # achieve this depends on whether toolmanager is in use.\n        stack = ExitStack()  # Register cleanup actions when user stops typing.\n        self._on_stop_typing = stack.close\n        toolmanager = getattr(\n            self.ax.figure.canvas.manager, \"toolmanager\", None)\n        if toolmanager is not None:\n            # If using toolmanager, lock keypresses, and plan to release the\n            # lock when typing stops.\n            toolmanager.keypresslock(self)\n            stack.callback(toolmanager.keypresslock.release, self)\n        else:\n            # If not using toolmanager, disable all keypress-related rcParams.\n            # Avoid spurious warnings if keymaps are getting deprecated.\n            with _api.suppress_matplotlib_deprecation_warning():\n                stack.enter_context(mpl.rc_context(\n                    {k: [] for k in mpl.rcParams if k.startswith(\"keymap.\")}))\n\n    def stop_typing(self):\n        if self.capturekeystrokes:\n            self._on_stop_typing()\n            self._on_stop_typing = None\n            notifysubmit = True\n        else:\n            notifysubmit = False\n        self.capturekeystrokes = False\n        self.cursor.set_visible(False)\n        self.ax.figure.canvas.draw()\n        if notifysubmit and self.eventson:\n            # Because process() might throw an error in the user's code, only\n            # call it once we've already done our cleanup.\n            self._observers.process('submit', self.text)\n\n    def position_cursor(self, x):\n        # now, we have to figure out where the cursor goes.\n        # approximate it based on assuming all characters the same length\n        if len(self.text) == 0:\n            self.cursor_index = 0\n        else:\n            bb = self.text_disp.get_window_extent()\n            ratio = np.clip((x - bb.x0) / bb.width, 0, 1)\n            self.cursor_index = int(len(self.text) * ratio)\n        self._rendercursor()\n\n    def _click(self, event):\n        if self.ignore(event):\n            return\n        if event.inaxes != self.ax:\n            self.stop_typing()\n            return\n        if not self.eventson:\n            return\n        if event.canvas.mouse_grabber != self.ax:\n            event.canvas.grab_mouse(self.ax)\n        if not self.capturekeystrokes:\n            self.begin_typing(event.x)\n        self.position_cursor(event.x)\n\n    def _resize(self, event):\n        self.stop_typing()\n\n    def _motion(self, event):\n        if self.ignore(event):\n            return\n        c = self.hovercolor if event.inaxes == self.ax else self.color\n        if not colors.same_color(c, self.ax.get_facecolor()):\n            self.ax.set_facecolor(c)\n            if self.drawon:\n                self.ax.figure.canvas.draw()\n\n    def on_text_change(self, func):\n        \"\"\"\n        When the text changes, call this *func* with event.\n\n        A connection id is returned which can be used to disconnect.\n        \"\"\"\n        return self._observers.connect('change', lambda text: func(text))\n\n    def on_submit(self, func):\n        \"\"\"\n        When the user hits enter or leaves the submission box, call this\n        *func* with event.\n\n        A connection id is returned which can be used to disconnect.\n        \"\"\"\n        return self._observers.connect('submit', lambda text: func(text))\n\n    def disconnect(self, cid):\n        \"\"\"Remove the observer with connection id *cid*.\"\"\"\n        self._observers.disconnect(cid)\n\n\nclass RadioButtons(AxesWidget):\n    \"\"\"\n    A GUI neutral radio button.\n\n    For the buttons to remain responsive you must keep a reference to this\n    object.\n\n    Connect to the RadioButtons with the `.on_clicked` method.\n\n    Attributes\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    activecolor : color\n        The color of the selected button.\n    labels : list of `.Text`\n        The button labels.\n    circles : list of `~.patches.Circle`\n        The buttons.\n    value_selected : str\n        The label text of the currently selected button.\n    \"\"\"\n\n    def __init__(self, ax, labels, active=0, activecolor='blue'):\n        \"\"\"\n        Add radio buttons to an `~.axes.Axes`.\n\n        Parameters\n        ----------\n        ax : `~matplotlib.axes.Axes`\n            The Axes to add the buttons to.\n        labels : list of str\n            The button labels.\n        active : int\n            The index of the initially selected button.\n        activecolor : color\n            The color of the selected button.\n        \"\"\"\n        super().__init__(ax)\n        self.activecolor = activecolor\n        self.value_selected = None\n\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_navigate(False)\n        dy = 1. / (len(labels) + 1)\n        ys = np.linspace(1 - dy, dy, len(labels))\n        cnt = 0\n        axcolor = ax.get_facecolor()\n\n        # scale the radius of the circle with the spacing between each one\n        circle_radius = dy / 2 - 0.01\n        # default to hard-coded value if the radius becomes too large\n        circle_radius = min(circle_radius, 0.05)\n\n        self.labels = []\n        self.circles = []\n        for y, label in zip(ys, labels):\n            t = ax.text(0.25, y, label, transform=ax.transAxes,\n                        horizontalalignment='left',\n                        verticalalignment='center')\n\n            if cnt == active:\n                self.value_selected = label\n                facecolor = activecolor\n            else:\n                facecolor = axcolor\n\n            p = Circle(xy=(0.15, y), radius=circle_radius, edgecolor='black',\n                       facecolor=facecolor, transform=ax.transAxes)\n\n            self.labels.append(t)\n            self.circles.append(p)\n            ax.add_patch(p)\n            cnt += 1\n\n        self.connect_event('button_press_event', self._clicked)\n\n        self._observers = cbook.CallbackRegistry(signals=[\"clicked\"])\n\n    cnt = _api.deprecated(\"3.4\")(property(  # Not real, but close enough.\n        lambda self: len(self._observers.callbacks['clicked'])))\n    observers = _api.deprecated(\"3.4\")(property(\n        lambda self: self._observers.callbacks['clicked']))\n\n    def _clicked(self, event):\n        if self.ignore(event) or event.button != 1 or event.inaxes != self.ax:\n            return\n        pclicked = self.ax.transAxes.inverted().transform((event.x, event.y))\n        distances = {}\n        for i, (p, t) in enumerate(zip(self.circles, self.labels)):\n            if (t.get_window_extent().contains(event.x, event.y)\n                    or np.linalg.norm(pclicked - p.center) < p.radius):\n                distances[i] = np.linalg.norm(pclicked - p.center)\n        if len(distances) > 0:\n            closest = min(distances, key=distances.get)\n            self.set_active(closest)\n\n    def set_active(self, index):\n        \"\"\"\n        Select button with number *index*.\n\n        Callbacks will be triggered if :attr:`eventson` is True.\n        \"\"\"\n        if index not in range(len(self.labels)):\n            raise ValueError(f'Invalid RadioButton index: {index}')\n\n        self.value_selected = self.labels[index].get_text()\n\n        for i, p in enumerate(self.circles):\n            if i == index:\n                color = self.activecolor\n            else:\n                color = self.ax.get_facecolor()\n            p.set_facecolor(color)\n\n        if self.drawon:\n            self.ax.figure.canvas.draw()\n\n        if self.eventson:\n            self._observers.process('clicked', self.labels[index].get_text())\n\n    def on_clicked(self, func):\n        \"\"\"\n        Connect the callback function *func* to button click events.\n\n        Returns a connection id, which can be used to disconnect the callback.\n        \"\"\"\n        return self._observers.connect('clicked', func)\n\n    def disconnect(self, cid):\n        \"\"\"Remove the observer with connection id *cid*.\"\"\"\n        self._observers.disconnect(cid)\n\n\nclass SubplotTool(Widget):\n    \"\"\"\n    A tool to adjust the subplot params of a `matplotlib.figure.Figure`.\n    \"\"\"\n\n    def __init__(self, targetfig, toolfig):\n        \"\"\"\n        Parameters\n        ----------\n        targetfig : `.Figure`\n            The figure instance to adjust.\n        toolfig : `.Figure`\n            The figure instance to embed the subplot tool into.\n        \"\"\"\n\n        self.figure = toolfig\n        self.targetfig = targetfig\n        toolfig.subplots_adjust(left=0.2, right=0.9)\n        toolfig.suptitle(\"Click on slider to adjust subplot param\")\n\n        self._sliders = []\n        names = [\"left\", \"bottom\", \"right\", \"top\", \"wspace\", \"hspace\"]\n        # The last subplot, removed below, keeps space for the \"Reset\" button.\n        for name, ax in zip(names, toolfig.subplots(len(names) + 1)):\n            ax.set_navigate(False)\n            slider = Slider(ax, name,\n                            0, 1, getattr(targetfig.subplotpars, name))\n            slider.on_changed(self._on_slider_changed)\n            self._sliders.append(slider)\n        toolfig.axes[-1].remove()\n        (self.sliderleft, self.sliderbottom, self.sliderright, self.slidertop,\n         self.sliderwspace, self.sliderhspace) = self._sliders\n        for slider in [self.sliderleft, self.sliderbottom,\n                       self.sliderwspace, self.sliderhspace]:\n            slider.closedmax = False\n        for slider in [self.sliderright, self.slidertop]:\n            slider.closedmin = False\n\n        # constraints\n        self.sliderleft.slidermax = self.sliderright\n        self.sliderright.slidermin = self.sliderleft\n        self.sliderbottom.slidermax = self.slidertop\n        self.slidertop.slidermin = self.sliderbottom\n\n        bax = toolfig.add_axes([0.8, 0.05, 0.15, 0.075])\n        self.buttonreset = Button(bax, 'Reset')\n        self.buttonreset.on_clicked(self._on_reset)\n\n    def _on_slider_changed(self, _):\n        self.targetfig.subplots_adjust(\n            **{slider.label.get_text(): slider.val\n               for slider in self._sliders})\n        if self.drawon:\n            self.targetfig.canvas.draw()\n\n    def _on_reset(self, event):\n        with ExitStack() as stack:\n            # Temporarily disable drawing on self and self's sliders, and\n            # disconnect slider events (as the subplotparams can be temporarily\n            # invalid, depending on the order in which they are restored).\n            stack.enter_context(cbook._setattr_cm(self, drawon=False))\n            for slider in self._sliders:\n                stack.enter_context(\n                    cbook._setattr_cm(slider, drawon=False, eventson=False))\n            # Reset the slider to the initial position.\n            for slider in self._sliders:\n                slider.reset()\n        if self.drawon:\n            event.canvas.draw()  # Redraw the subplottool canvas.\n        self._on_slider_changed(None)  # Apply changes to the target window.\n\n\nclass Cursor(AxesWidget):\n    \"\"\"\n    A crosshair cursor that spans the Axes and moves with mouse cursor.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes`\n        The `~.axes.Axes` to attach the cursor to.\n    horizOn : bool, default: True\n        Whether to draw the horizontal line.\n    vertOn : bool, default: True\n        Whether to draw the vertical line.\n    useblit : bool, default: False\n        Use blitting for faster drawing if supported by the backend.\n        See the tutorial :doc:`/tutorials/advanced/blitting` for details.\n\n    Other Parameters\n    ----------------\n    **lineprops\n        `.Line2D` properties that control the appearance of the lines.\n        See also `~.Axes.axhline`.\n\n    Examples\n    --------\n    See :doc:`/gallery/widgets/cursor`.\n    \"\"\"\n\n    def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,\n                 **lineprops):\n        super().__init__(ax)\n\n        self.connect_event('motion_notify_event', self.onmove)\n        self.connect_event('draw_event', self.clear)\n\n        self.visible = True\n        self.horizOn = horizOn\n        self.vertOn = vertOn\n        self.useblit = useblit and self.canvas.supports_blit\n\n        if self.useblit:\n            lineprops['animated'] = True\n        self.lineh = ax.axhline(ax.get_ybound()[0], visible=False, **lineprops)\n        self.linev = ax.axvline(ax.get_xbound()[0], visible=False, **lineprops)\n\n        self.background = None\n        self.needclear = False\n\n    def clear(self, event):\n        \"\"\"Internal event handler to clear the cursor.\"\"\"\n        if self.ignore(event):\n            return\n        if self.useblit:\n            self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n        self.linev.set_visible(False)\n        self.lineh.set_visible(False)\n\n    def onmove(self, event):\n        \"\"\"Internal event handler to draw the cursor when the mouse moves.\"\"\"\n        if self.ignore(event):\n            return\n        if not self.canvas.widgetlock.available(self):\n            return\n        if event.inaxes != self.ax:\n            self.linev.set_visible(False)\n            self.lineh.set_visible(False)\n\n            if self.needclear:\n                self.canvas.draw()\n                self.needclear = False\n            return\n        self.needclear = True\n        if not self.visible:\n            return\n        self.linev.set_xdata((event.xdata, event.xdata))\n\n        self.lineh.set_ydata((event.ydata, event.ydata))\n        self.linev.set_visible(self.visible and self.vertOn)\n        self.lineh.set_visible(self.visible and self.horizOn)\n\n        self._update()\n\n    def _update(self):\n        if self.useblit:\n            if self.background is not None:\n                self.canvas.restore_region(self.background)\n            self.ax.draw_artist(self.linev)\n            self.ax.draw_artist(self.lineh)\n            self.canvas.blit(self.ax.bbox)\n        else:\n            self.canvas.draw_idle()\n        return False\n\n\nclass MultiCursor(Widget):\n    \"\"\"\n    Provide a vertical (default) and/or horizontal line cursor shared between\n    multiple Axes.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Parameters\n    ----------\n    canvas : `matplotlib.backend_bases.FigureCanvasBase`\n        The FigureCanvas that contains all the Axes.\n\n    axes : list of `matplotlib.axes.Axes`\n        The `~.axes.Axes` to attach the cursor to.\n\n    useblit : bool, default: True\n        Use blitting for faster drawing if supported by the backend.\n        See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n\n    horizOn : bool, default: False\n        Whether to draw the horizontal line.\n\n    vertOn : bool, default: True\n        Whether to draw the vertical line.\n\n    Other Parameters\n    ----------------\n    **lineprops\n        `.Line2D` properties that control the appearance of the lines.\n        See also `~.Axes.axhline`.\n\n    Examples\n    --------\n    See :doc:`/gallery/widgets/multicursor`.\n    \"\"\"\n\n    def __init__(self, canvas, axes, useblit=True, horizOn=False, vertOn=True,\n                 **lineprops):\n        self.canvas = canvas\n        self.axes = axes\n        self.horizOn = horizOn\n        self.vertOn = vertOn\n\n        xmin, xmax = axes[-1].get_xlim()\n        ymin, ymax = axes[-1].get_ylim()\n        xmid = 0.5 * (xmin + xmax)\n        ymid = 0.5 * (ymin + ymax)\n\n        self.visible = True\n        self.useblit = useblit and self.canvas.supports_blit\n        self.background = None\n        self.needclear = False\n\n        if self.useblit:\n            lineprops['animated'] = True\n\n        if vertOn:\n            self.vlines = [ax.axvline(xmid, visible=False, **lineprops)\n                           for ax in axes]\n        else:\n            self.vlines = []\n\n        if horizOn:\n            self.hlines = [ax.axhline(ymid, visible=False, **lineprops)\n                           for ax in axes]\n        else:\n            self.hlines = []\n\n        self.connect()\n\n    def connect(self):\n        \"\"\"Connect events.\"\"\"\n        self._cidmotion = self.canvas.mpl_connect('motion_notify_event',\n                                                  self.onmove)\n        self._ciddraw = self.canvas.mpl_connect('draw_event', self.clear)\n\n    def disconnect(self):\n        \"\"\"Disconnect events.\"\"\"\n        self.canvas.mpl_disconnect(self._cidmotion)\n        self.canvas.mpl_disconnect(self._ciddraw)\n\n    def clear(self, event):\n        \"\"\"Clear the cursor.\"\"\"\n        if self.ignore(event):\n            return\n        if self.useblit:\n            self.background = (\n                self.canvas.copy_from_bbox(self.canvas.figure.bbox))\n        for line in self.vlines + self.hlines:\n            line.set_visible(False)\n\n    def onmove(self, event):\n        if self.ignore(event):\n            return\n        if event.inaxes not in self.axes:\n            return\n        if not self.canvas.widgetlock.available(self):\n            return\n        self.needclear = True\n        if not self.visible:\n            return\n        if self.vertOn:\n            for line in self.vlines:\n                line.set_xdata((event.xdata, event.xdata))\n                line.set_visible(self.visible)\n        if self.horizOn:\n            for line in self.hlines:\n                line.set_ydata((event.ydata, event.ydata))\n                line.set_visible(self.visible)\n        self._update()\n\n    def _update(self):\n        if self.useblit:\n            if self.background is not None:\n                self.canvas.restore_region(self.background)\n            if self.vertOn:\n                for ax, line in zip(self.axes, self.vlines):\n                    ax.draw_artist(line)\n            if self.horizOn:\n                for ax, line in zip(self.axes, self.hlines):\n                    ax.draw_artist(line)\n            self.canvas.blit()\n        else:\n            self.canvas.draw_idle()\n\n\nclass _SelectorWidget(AxesWidget):\n\n    def __init__(self, ax, onselect, useblit=False, button=None,\n                 state_modifier_keys=None, use_data_coordinates=False):\n        super().__init__(ax)\n\n        self.visible = True\n        self.onselect = onselect\n        self.useblit = useblit and self.canvas.supports_blit\n        self.connect_default_events()\n\n        self._state_modifier_keys = dict(move=' ', clear='escape',\n                                         square='shift', center='control',\n                                         rotate='r')\n        self._state_modifier_keys.update(state_modifier_keys or {})\n        self._use_data_coordinates = use_data_coordinates\n\n        self.background = None\n\n        if isinstance(button, Integral):\n            self.validButtons = [button]\n        else:\n            self.validButtons = button\n\n        # Set to True when a selection is completed, otherwise is False\n        self._selection_completed = False\n\n        # will save the data (position at mouseclick)\n        self._eventpress = None\n        # will save the data (pos. at mouserelease)\n        self._eventrelease = None\n        self._prev_event = None\n        self._state = set()\n\n    eventpress = _api.deprecate_privatize_attribute(\"3.5\")\n    eventrelease = _api.deprecate_privatize_attribute(\"3.5\")\n    state = _api.deprecate_privatize_attribute(\"3.5\")\n    state_modifier_keys = _api.deprecate_privatize_attribute(\"3.6\")\n\n    def set_active(self, active):\n        super().set_active(active)\n        if active:\n            self.update_background(None)\n\n    def _get_animated_artists(self):\n        \"\"\"\n        Convenience method to get all animated artists of the figure containing\n        this widget, excluding those already present in self.artists.\n        The returned tuple is not sorted by 'z_order': z_order sorting is\n        valid only when considering all artists and not only a subset of all\n        artists.\n        \"\"\"\n        return tuple(a for ax_ in self.ax.get_figure().get_axes()\n                     for a in ax_.get_children()\n                     if a.get_animated() and a not in self.artists)\n\n    def update_background(self, event):\n        \"\"\"Force an update of the background.\"\"\"\n        # If you add a call to `ignore` here, you'll want to check edge case:\n        # `release` can call a draw event even when `ignore` is True.\n        if not self.useblit:\n            return\n        # Make sure that widget artists don't get accidentally included in the\n        # background, by re-rendering the background if needed (and then\n        # re-re-rendering the canvas with the visible widget artists).\n        # We need to remove all artists which will be drawn when updating\n        # the selector: if we have animated artists in the figure, it is safer\n        # to redrawn by default, in case they have updated by the callback\n        # zorder needs to be respected when redrawing\n        artists = sorted(self.artists + self._get_animated_artists(),\n                         key=lambda a: a.get_zorder())\n        needs_redraw = any(artist.get_visible() for artist in artists)\n        with ExitStack() as stack:\n            if needs_redraw:\n                for artist in artists:\n                    stack.enter_context(artist._cm_set(visible=False))\n                self.canvas.draw()\n            self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n        if needs_redraw:\n            for artist in artists:\n                self.ax.draw_artist(artist)\n\n    def connect_default_events(self):\n        \"\"\"Connect the major canvas events to methods.\"\"\"\n        self.connect_event('motion_notify_event', self.onmove)\n        self.connect_event('button_press_event', self.press)\n        self.connect_event('button_release_event', self.release)\n        self.connect_event('draw_event', self.update_background)\n        self.connect_event('key_press_event', self.on_key_press)\n        self.connect_event('key_release_event', self.on_key_release)\n        self.connect_event('scroll_event', self.on_scroll)\n\n    def ignore(self, event):\n        # docstring inherited\n        if not self.active or not self.ax.get_visible():\n            return True\n        # If canvas was locked\n        if not self.canvas.widgetlock.available(self):\n            return True\n        if not hasattr(event, 'button'):\n            event.button = None\n        # Only do rectangle selection if event was triggered\n        # with a desired button\n        if (self.validButtons is not None\n                and event.button not in self.validButtons):\n            return True\n        # If no button was pressed yet ignore the event if it was out\n        # of the Axes\n        if self._eventpress is None:\n            return event.inaxes != self.ax\n        # If a button was pressed, check if the release-button is the same.\n        if event.button == self._eventpress.button:\n            return False\n        # If a button was pressed, check if the release-button is the same.\n        return (event.inaxes != self.ax or\n                event.button != self._eventpress.button)\n\n    def update(self):\n        \"\"\"Draw using blit() or draw_idle(), depending on ``self.useblit``.\"\"\"\n        if not self.ax.get_visible() or self.ax.figure._cachedRenderer is None:\n            return False\n        if self.useblit:\n            if self.background is not None:\n                self.canvas.restore_region(self.background)\n            else:\n                self.update_background(None)\n            # We need to draw all artists, which are not included in the\n            # background, therefore we also draw self._get_animated_artists()\n            # and we make sure that we respect z_order\n            artists = sorted(self.artists + self._get_animated_artists(),\n                             key=lambda a: a.get_zorder())\n            for artist in artists:\n                self.ax.draw_artist(artist)\n            self.canvas.blit(self.ax.bbox)\n        else:\n            self.canvas.draw_idle()\n        return False\n\n    def _get_data(self, event):\n        \"\"\"Get the xdata and ydata for event, with limits.\"\"\"\n        if event.xdata is None:\n            return None, None\n        xdata = np.clip(event.xdata, *self.ax.get_xbound())\n        ydata = np.clip(event.ydata, *self.ax.get_ybound())\n        return xdata, ydata\n\n    def _clean_event(self, event):\n        \"\"\"\n        Preprocess an event:\n\n        - Replace *event* by the previous event if *event* has no ``xdata``.\n        - Clip ``xdata`` and ``ydata`` to the axes limits.\n        - Update the previous event.\n        \"\"\"\n        if event.xdata is None:\n            event = self._prev_event\n        else:\n            event = copy.copy(event)\n        event.xdata, event.ydata = self._get_data(event)\n        self._prev_event = event\n        return event\n\n    def press(self, event):\n        \"\"\"Button press handler and validator.\"\"\"\n        if not self.ignore(event):\n            event = self._clean_event(event)\n            self._eventpress = event\n            self._prev_event = event\n            key = event.key or ''\n            key = key.replace('ctrl', 'control')\n            # move state is locked in on a button press\n            if key == self._state_modifier_keys['move']:\n                self._state.add('move')\n            self._press(event)\n            return True\n        return False\n\n    def _press(self, event):\n        \"\"\"Button press event handler.\"\"\"\n\n    def release(self, event):\n        \"\"\"Button release event handler and validator.\"\"\"\n        if not self.ignore(event) and self._eventpress:\n            event = self._clean_event(event)\n            self._eventrelease = event\n            self._release(event)\n            self._eventpress = None\n            self._eventrelease = None\n            self._state.discard('move')\n            return True\n        return False\n\n    def _release(self, event):\n        \"\"\"Button release event handler.\"\"\"\n\n    def onmove(self, event):\n        \"\"\"Cursor move event handler and validator.\"\"\"\n        if not self.ignore(event) and self._eventpress:\n            event = self._clean_event(event)\n            self._onmove(event)\n            return True\n        return False\n\n    def _onmove(self, event):\n        \"\"\"Cursor move event handler.\"\"\"\n\n    def on_scroll(self, event):\n        \"\"\"Mouse scroll event handler and validator.\"\"\"\n        if not self.ignore(event):\n            self._on_scroll(event)\n\n    def _on_scroll(self, event):\n        \"\"\"Mouse scroll event handler.\"\"\"\n\n    def on_key_press(self, event):\n        \"\"\"Key press event handler and validator for all selection widgets.\"\"\"\n        if self.active:\n            key = event.key or ''\n            key = key.replace('ctrl', 'control')\n            if key == self._state_modifier_keys['clear']:\n                self.clear()\n                return\n            for (state, modifier) in self._state_modifier_keys.items():\n                if modifier in key.split('+'):\n                    # 'rotate' is changing _state on press and is not removed\n                    # from _state when releasing\n                    if state == 'rotate':\n                        if state in self._state:\n                            self._state.discard(state)\n                        else:\n                            self._state.add(state)\n                    else:\n                        self._state.add(state)\n            self._on_key_press(event)\n\n    def _on_key_press(self, event):\n        \"\"\"Key press event handler - for widget-specific key press actions.\"\"\"\n\n    def on_key_release(self, event):\n        \"\"\"Key release event handler and validator.\"\"\"\n        if self.active:\n            key = event.key or ''\n            for (state, modifier) in self._state_modifier_keys.items():\n                # 'rotate' is changing _state on press and is not removed\n                # from _state when releasing\n                if modifier in key.split('+') and state != 'rotate':\n                    self._state.discard(state)\n            self._on_key_release(event)\n\n    def _on_key_release(self, event):\n        \"\"\"Key release event handler.\"\"\"\n\n    def set_visible(self, visible):\n        \"\"\"Set the visibility of our artists.\"\"\"\n        self.visible = visible\n        for artist in self.artists:\n            artist.set_visible(visible)\n\n    def clear(self):\n        \"\"\"Clear the selection and set the selector ready to make a new one.\"\"\"\n        self._selection_completed = False\n        self.set_visible(False)\n        self.update()\n\n    @property\n    def artists(self):\n        \"\"\"Tuple of the artists of the selector.\"\"\"\n        handles_artists = getattr(self, '_handles_artists', ())\n        return (self._selection_artist,) + handles_artists\n\n    def set_props(self, **props):\n        \"\"\"\n        Set the properties of the selector artist. See the `props` argument\n        in the selector docstring to know which properties are supported.\n        \"\"\"\n        artist = self._selection_artist\n        props = cbook.normalize_kwargs(props, artist)\n        artist.set(**props)\n        if self.useblit:\n            self.update()\n        self._props.update(props)\n\n    def set_handle_props(self, **handle_props):\n        \"\"\"\n        Set the properties of the handles selector artist. See the\n        `handle_props` argument in the selector docstring to know which\n        properties are supported.\n        \"\"\"\n        if not hasattr(self, '_handles_artists'):\n            raise NotImplementedError(\"This selector doesn't have handles.\")\n\n        artist = self._handles_artists[0]\n        handle_props = cbook.normalize_kwargs(handle_props, artist)\n        for handle in self._handles_artists:\n            handle.set(**handle_props)\n        if self.useblit:\n            self.update()\n        self._handle_props.update(handle_props)\n\n    def _validate_state(self, state):\n        supported_state = [\n            key for key, value in self._state_modifier_keys.items()\n            if key != 'clear' and value != 'not-applicable'\n            ]\n        _api.check_in_list(supported_state, state=state)\n\n    def add_state(self, state):\n        \"\"\"\n        Add a state to define the widget's behavior. See the\n        `state_modifier_keys` parameters for details.\n\n        Parameters\n        ----------\n        state : str\n            Must be a supported state of the selector. See the\n            `state_modifier_keys` parameters for details.\n\n        Raises\n        ------\n        ValueError\n            When the state is not supported by the selector.\n\n        \"\"\"\n        self._validate_state(state)\n        self._state.add(state)\n\n    def remove_state(self, state):\n        \"\"\"\n        Remove a state to define the widget's behavior. See the\n        `state_modifier_keys` parameters for details.\n\n        Parameters\n        ----------\n        value : str\n            Must be a supported state of the selector. See the\n            `state_modifier_keys` parameters for details.\n\n        Raises\n        ------\n        ValueError\n            When the state is not supported by the selector.\n\n        \"\"\"\n        self._validate_state(state)\n        self._state.remove(state)\n\n\nclass SpanSelector(_SelectorWidget):\n    \"\"\"\n    Visually select a min/max range on a single axis and call a function with\n    those values.\n\n    To guarantee that the selector remains responsive, keep a reference to it.\n\n    In order to turn off the SpanSelector, set ``span_selector.active`` to\n    False.  To turn it back on, set it to True.\n\n    Press and release events triggered at the same coordinates outside the\n    selection will clear the selector, except when\n    ``ignore_event_outside=True``.\n\n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes`\n\n    onselect : callable\n        A callback function that is called after a release event and the\n        selection is created, changed or removed.\n        It must have the signature::\n\n            def on_select(min: float, max: float) -> Any\n\n    direction : {\"horizontal\", \"vertical\"}\n        The direction along which to draw the span selector.\n\n    minspan : float, default: 0\n        If selection is less than or equal to *minspan*, the selection is\n        removed (when already existing) or cancelled.\n\n    useblit : bool, default: False\n        If True, use the backend-dependent blitting features for faster\n        canvas updates. See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n\n    props : dict, optional\n        Dictionary of `matplotlib.patches.Patch` properties.\n        Default:\n\n            ``dict(facecolor='red', alpha=0.5)``\n\n    onmove_callback : func(min, max), min/max are floats, default: None\n        Called on mouse move while the span is being selected.\n\n    span_stays : bool, default: False\n        If True, the span stays visible after the mouse is released.\n        Deprecated, use *interactive* instead.\n\n    interactive : bool, default: False\n        Whether to draw a set of handles that allow interaction with the\n        widget after it is drawn.\n\n    button : `.MouseButton` or list of `.MouseButton`, default: all buttons\n        The mouse buttons which activate the span selector.\n\n    handle_props : dict, default: None\n        Properties of the handle lines at the edges of the span. Only used\n        when *interactive* is True. See `matplotlib.lines.Line2D` for valid\n        properties.\n\n    grab_range : float, default: 10\n        Distance in pixels within which the interactive tool handles can be\n        activated.\n\n    state_modifier_keys : dict, optional\n        Keyboard modifiers which affect the widget's behavior.  Values\n        amend the defaults, which are:\n\n        - \"clear\": Clear the current shape, default: \"escape\".\n\n    drag_from_anywhere : bool, default: False\n        If `True`, the widget can be moved by clicking anywhere within\n        its bounds.\n\n    ignore_event_outside : bool, default: False\n        If `True`, the event triggered outside the span selector will be\n        ignored.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> import matplotlib.widgets as mwidgets\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot([1, 2, 3], [10, 50, 100])\n    >>> def onselect(vmin, vmax):\n    ...     print(vmin, vmax)\n    >>> span = mwidgets.SpanSelector(ax, onselect, 'horizontal',\n    ...                              props=dict(facecolor='blue', alpha=0.5))\n    >>> fig.show()\n\n    See also: :doc:`/gallery/widgets/span_selector`\n    \"\"\"\n\n    @_api.rename_parameter(\"3.5\", \"rectprops\", \"props\")\n    @_api.rename_parameter(\"3.5\", \"span_stays\", \"interactive\")\n    def __init__(self, ax, onselect, direction, minspan=0, useblit=False,\n                 props=None, onmove_callback=None, interactive=False,\n                 button=None, handle_props=None, grab_range=10,\n                 state_modifier_keys=None, drag_from_anywhere=False,\n                 ignore_event_outside=False):\n\n        if state_modifier_keys is None:\n            state_modifier_keys = dict(clear='escape',\n                                       square='not-applicable',\n                                       center='not-applicable',\n                                       rotate='not-applicable')\n        super().__init__(ax, onselect, useblit=useblit, button=button,\n                         state_modifier_keys=state_modifier_keys)\n\n        if props is None:\n            props = dict(facecolor='red', alpha=0.5)\n\n        props['animated'] = self.useblit\n\n        self.direction = direction\n\n        self.visible = True\n        self._extents_on_press = None\n\n        # self._pressv is deprecated and we don't use it internally anymore\n        # but we maintain it until it is removed\n        self._pressv = None\n\n        self._props = props\n        self.onmove_callback = onmove_callback\n        self.minspan = minspan\n\n        self.grab_range = grab_range\n        self._interactive = interactive\n        self._edge_handles = None\n        self.drag_from_anywhere = drag_from_anywhere\n        self.ignore_event_outside = ignore_event_outside\n\n        # Reset canvas so that `new_axes` connects events.\n        self.canvas = None\n        self.new_axes(ax)\n\n        # Setup handles\n        self._handle_props = {\n            'color': props.get('facecolor', 'r'),\n            **cbook.normalize_kwargs(handle_props, Line2D)}\n\n        if self._interactive:\n            self._edge_order = ['min', 'max']\n            self._setup_edge_handles(self._handle_props)\n\n        self._active_handle = None\n\n        # prev attribute is deprecated but we still need to maintain it\n        self._prev = (0, 0)\n\n    rect = _api.deprecated(\"3.5\")(\n        property(lambda self: self._selection_artist)\n        )\n\n    rectprops = _api.deprecated(\"3.5\")(\n        property(lambda self: self._props)\n        )\n\n    active_handle = _api.deprecate_privatize_attribute(\"3.5\")\n\n    pressv = _api.deprecate_privatize_attribute(\"3.5\")\n\n    span_stays = _api.deprecated(\"3.5\")(\n        property(lambda self: self._interactive)\n        )\n\n    prev = _api.deprecate_privatize_attribute(\"3.5\")\n\n    def new_axes(self, ax):\n        \"\"\"Set SpanSelector to operate on a new Axes.\"\"\"\n        self.ax = ax\n        if self.canvas is not ax.figure.canvas:\n            if self.canvas is not None:\n                self.disconnect_events()\n\n            self.canvas = ax.figure.canvas\n            self.connect_default_events()\n\n        # Reset\n        self._selection_completed = False\n\n        if self.direction == 'horizontal':\n            trans = ax.get_xaxis_transform()\n            w, h = 0, 1\n        else:\n            trans = ax.get_yaxis_transform()\n            w, h = 1, 0\n        rect_artist = Rectangle((0, 0), w, h,\n                                transform=trans,\n                                visible=False,\n                                **self._props)\n\n        self.ax.add_patch(rect_artist)\n        self._selection_artist = rect_artist\n\n    def _setup_edge_handles(self, props):\n        # Define initial position using the axis bounds to keep the same bounds\n        if self.direction == 'horizontal':\n            positions = self.ax.get_xbound()\n        else:\n            positions = self.ax.get_ybound()\n        self._edge_handles = ToolLineHandles(self.ax, positions,\n                                             direction=self.direction,\n                                             line_props=props,\n                                             useblit=self.useblit)\n\n    @property\n    def _handles_artists(self):\n        if self._edge_handles is not None:\n            return self._edge_handles.artists\n        else:\n            return ()\n\n    def _set_cursor(self, enabled):\n        \"\"\"Update the canvas cursor based on direction of the selector.\"\"\"\n        if enabled:\n            cursor = (backend_tools.Cursors.RESIZE_HORIZONTAL\n                      if self.direction == 'horizontal' else\n                      backend_tools.Cursors.RESIZE_VERTICAL)\n        else:\n            cursor = backend_tools.Cursors.POINTER\n\n        self.ax.figure.canvas.set_cursor(cursor)\n\n    def connect_default_events(self):\n        # docstring inherited\n        super().connect_default_events()\n        if getattr(self, '_interactive', False):\n            self.connect_event('motion_notify_event', self._hover)\n\n    def _press(self, event):\n        \"\"\"Button press event handler.\"\"\"\n        self._set_cursor(True)\n        if self._interactive and self._selection_artist.get_visible():\n            self._set_active_handle(event)\n        else:\n            self._active_handle = None\n\n        if self._active_handle is None or not self._interactive:\n            # Clear previous rectangle before drawing new rectangle.\n            self.update()\n\n        v = event.xdata if self.direction == 'horizontal' else event.ydata\n        # self._pressv and self._prev are deprecated but we still need to\n        # maintain them\n        self._pressv = v\n        self._prev = self._get_data(event)\n\n        if self._active_handle is None and not self.ignore_event_outside:\n            # when the press event outside the span, we initially set the\n            # visibility to False and extents to (v, v)\n            # update will be called when setting the extents\n            self.visible = False\n            self.extents = v, v\n            # We need to set the visibility back, so the span selector will be\n            # drawn when necessary (span width > 0)\n            self.visible = True\n        else:\n            self.set_visible(True)\n\n        return False\n\n    @property\n    def direction(self):\n        \"\"\"Direction of the span selector: 'vertical' or 'horizontal'.\"\"\"\n        return self._direction\n\n    @direction.setter\n    def direction(self, direction):\n        \"\"\"Set the direction of the span selector.\"\"\"\n        _api.check_in_list(['horizontal', 'vertical'], direction=direction)\n        if hasattr(self, '_direction') and direction != self._direction:\n            # remove previous artists\n            self._selection_artist.remove()\n            if self._interactive:\n                self._edge_handles.remove()\n            self._direction = direction\n            self.new_axes(self.ax)\n            if self._interactive:\n                self._setup_edge_handles(self._handle_props)\n        else:\n            self._direction = direction\n\n    def _release(self, event):\n        \"\"\"Button release event handler.\"\"\"\n        self._set_cursor(False)\n        # self._pressv is deprecated but we still need to maintain it\n        self._pressv = None\n\n        if not self._interactive:\n            self._selection_artist.set_visible(False)\n\n        if (self._active_handle is None and self._selection_completed and\n                self.ignore_event_outside):\n            return\n\n        vmin, vmax = self.extents\n        span = vmax - vmin\n\n        if span <= self.minspan:\n            # Remove span and set self._selection_completed = False\n            self.set_visible(False)\n            if self._selection_completed:\n                # Call onselect, only when the span is already existing\n                self.onselect(vmin, vmax)\n            self._selection_completed = False\n        else:\n            self.onselect(vmin, vmax)\n            self._selection_completed = True\n\n        self.update()\n\n        self._active_handle = None\n\n        return False\n\n    def _hover(self, event):\n        \"\"\"Update the canvas cursor if it's over a handle.\"\"\"\n        if self.ignore(event):\n            return\n\n        if self._active_handle is not None or not self._selection_completed:\n            # Do nothing if button is pressed and a handle is active, which may\n            # occur with drag_from_anywhere=True.\n            # Do nothing if selection is not completed, which occurs when\n            # a selector has been cleared\n            return\n\n        _, e_dist = self._edge_handles.closest(event.x, event.y)\n        self._set_cursor(e_dist <= self.grab_range)\n\n    def _onmove(self, event):\n        \"\"\"Motion notify event handler.\"\"\"\n\n        # self._prev are deprecated but we still need to maintain it\n        self._prev = self._get_data(event)\n\n        v = event.xdata if self.direction == 'horizontal' else event.ydata\n        if self.direction == 'horizontal':\n            vpress = self._eventpress.xdata\n        else:\n            vpress = self._eventpress.ydata\n\n        # move existing span\n        # When \"dragging from anywhere\", `self._active_handle` is set to 'C'\n        # (match notation used in the RectangleSelector)\n        if self._active_handle == 'C' and self._extents_on_press is not None:\n            vmin, vmax = self._extents_on_press\n            dv = v - vpress\n            vmin += dv\n            vmax += dv\n\n        # resize an existing shape\n        elif self._active_handle and self._active_handle != 'C':\n            vmin, vmax = self._extents_on_press\n            if self._active_handle == 'min':\n                vmin = v\n            else:\n                vmax = v\n        # new shape\n        else:\n            # Don't create a new span if there is already one when\n            # ignore_event_outside=True\n            if self.ignore_event_outside and self._selection_completed:\n                return\n            vmin, vmax = vpress, v\n            if vmin > vmax:\n                vmin, vmax = vmax, vmin\n\n        self.extents = vmin, vmax\n\n        if self.onmove_callback is not None:\n            self.onmove_callback(vmin, vmax)\n\n        return False\n\n    def _draw_shape(self, vmin, vmax):\n        if vmin > vmax:\n            vmin, vmax = vmax, vmin\n        if self.direction == 'horizontal':\n            self._selection_artist.set_x(vmin)\n            self._selection_artist.set_width(vmax - vmin)\n        else:\n            self._selection_artist.set_y(vmin)\n            self._selection_artist.set_height(vmax - vmin)\n\n    def _set_active_handle(self, event):\n        \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n        # Note: event.xdata/ydata in data coordinates, event.x/y in pixels\n        e_idx, e_dist = self._edge_handles.closest(event.x, event.y)\n\n        # Prioritise center handle over other handles\n        # Use 'C' to match the notation used in the RectangleSelector\n        if 'move' in self._state:\n            self._active_handle = 'C'\n        elif e_dist > self.grab_range:\n            # Not close to any handles\n            self._active_handle = None\n            if self.drag_from_anywhere and self._contains(event):\n                # Check if we've clicked inside the region\n                self._active_handle = 'C'\n                self._extents_on_press = self.extents\n            else:\n                self._active_handle = None\n                return\n        else:\n            # Closest to an edge handle\n            self._active_handle = self._edge_order[e_idx]\n\n        # Save coordinates of rectangle at the start of handle movement.\n        self._extents_on_press = self.extents\n\n    def _contains(self, event):\n        \"\"\"Return True if event is within the patch.\"\"\"\n        return self._selection_artist.contains(event, radius=0)[0]\n\n    @property\n    def extents(self):\n        \"\"\"Return extents of the span selector.\"\"\"\n        if self.direction == 'horizontal':\n            vmin = self._selection_artist.get_x()\n            vmax = vmin + self._selection_artist.get_width()\n        else:\n            vmin = self._selection_artist.get_y()\n            vmax = vmin + self._selection_artist.get_height()\n        return vmin, vmax\n\n    @extents.setter\n    def extents(self, extents):\n        # Update displayed shape\n        self._draw_shape(*extents)\n        if self._interactive:\n            # Update displayed handles\n            self._edge_handles.set_data(self.extents)\n        self.set_visible(self.visible)\n        self.update()\n\n\nclass ToolLineHandles:\n    \"\"\"\n    Control handles for canvas tools.\n\n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes`\n        Matplotlib Axes where tool handles are displayed.\n    positions : 1D array\n        Positions of handles in data coordinates.\n    direction : {\"horizontal\", \"vertical\"}\n        Direction of handles, either 'vertical' or 'horizontal'\n    line_props : dict, optional\n        Additional line properties. See `matplotlib.lines.Line2D`.\n    useblit : bool, default: True\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n    \"\"\"\n\n    def __init__(self, ax, positions, direction, line_props=None,\n                 useblit=True):\n        self.ax = ax\n\n        _api.check_in_list(['horizontal', 'vertical'], direction=direction)\n        self._direction = direction\n\n        if line_props is None:\n            line_props = {}\n        line_props.update({'visible': False, 'animated': useblit})\n\n        line_fun = ax.axvline if self.direction == 'horizontal' else ax.axhline\n\n        self._artists = [line_fun(p, **line_props) for p in positions]\n\n    @property\n    def artists(self):\n        return tuple(self._artists)\n\n    @property\n    def positions(self):\n        \"\"\"Positions of the handle in data coordinates.\"\"\"\n        method = 'get_xdata' if self.direction == 'horizontal' else 'get_ydata'\n        return [getattr(line, method)()[0] for line in self.artists]\n\n    @property\n    def direction(self):\n        \"\"\"Direction of the handle: 'vertical' or 'horizontal'.\"\"\"\n        return self._direction\n\n    def set_data(self, positions):\n        \"\"\"\n        Set x or y positions of handles, depending if the lines are vertical\n        of horizontal.\n\n        Parameters\n        ----------\n        positions : tuple of length 2\n            Set the positions of the handle in data coordinates\n        \"\"\"\n        method = 'set_xdata' if self.direction == 'horizontal' else 'set_ydata'\n        for line, p in zip(self.artists, positions):\n            getattr(line, method)([p, p])\n\n    def set_visible(self, value):\n        \"\"\"Set the visibility state of the handles artist.\"\"\"\n        for artist in self.artists:\n            artist.set_visible(value)\n\n    def set_animated(self, value):\n        \"\"\"Set the animated state of the handles artist.\"\"\"\n        for artist in self.artists:\n            artist.set_animated(value)\n\n    def remove(self):\n        \"\"\"Remove the handles artist from the figure.\"\"\"\n        for artist in self._artists:\n            artist.remove()\n\n    def closest(self, x, y):\n        \"\"\"\n        Return index and pixel distance to closest handle.\n\n        Parameters\n        ----------\n        x, y : float\n            x, y position from which the distance will be calculated to\n            determinate the closest handle\n\n        Returns\n        -------\n        index, distance : index of the handle and its distance from\n            position x, y\n        \"\"\"\n        if self.direction == 'horizontal':\n            p_pts = np.array([\n                self.ax.transData.transform((p, 0))[0] for p in self.positions\n                ])\n            dist = abs(p_pts - x)\n        else:\n            p_pts = np.array([\n                self.ax.transData.transform((0, p))[1] for p in self.positions\n                ])\n            dist = abs(p_pts - y)\n        index = np.argmin(dist)\n        return index, dist[index]\n\n\nclass ToolHandles:\n    \"\"\"\n    Control handles for canvas tools.\n\n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes`\n        Matplotlib Axes where tool handles are displayed.\n    x, y : 1D arrays\n        Coordinates of control handles.\n    marker : str, default: 'o'\n        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.\n    marker_props : dict, optional\n        Additional marker properties. See `matplotlib.lines.Line2D`.\n    useblit : bool, default: True\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n    \"\"\"\n\n    def __init__(self, ax, x, y, marker='o', marker_props=None, useblit=True):\n        self.ax = ax\n        props = {'marker': marker, 'markersize': 7, 'markerfacecolor': 'w',\n                 'linestyle': 'none', 'alpha': 0.5, 'visible': False,\n                 'label': '_nolegend_',\n                 **cbook.normalize_kwargs(marker_props, Line2D._alias_map)}\n        self._markers = Line2D(x, y, animated=useblit, **props)\n        self.ax.add_line(self._markers)\n\n    @property\n    def x(self):\n        return self._markers.get_xdata()\n\n    @property\n    def y(self):\n        return self._markers.get_ydata()\n\n    @property\n    def artists(self):\n        return (self._markers, )\n\n    def set_data(self, pts, y=None):\n        \"\"\"Set x and y positions of handles.\"\"\"\n        if y is not None:\n            x = pts\n            pts = np.array([x, y])\n        self._markers.set_data(pts)\n\n    def set_visible(self, val):\n        self._markers.set_visible(val)\n\n    def set_animated(self, val):\n        self._markers.set_animated(val)\n\n    def closest(self, x, y):\n        \"\"\"Return index and pixel distance to closest index.\"\"\"\n        pts = np.column_stack([self.x, self.y])\n        # Transform data coordinates to pixel coordinates.\n        pts = self.ax.transData.transform(pts)\n        diff = pts - [x, y]\n        dist = np.hypot(*diff.T)\n        min_index = np.argmin(dist)\n        return min_index, dist[min_index]\n\n\n_RECTANGLESELECTOR_PARAMETERS_DOCSTRING = \\\n    r\"\"\"\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent axes for the widget.\n\n    onselect : function\n        A callback function that is called after a release event and the\n        selection is created, changed or removed.\n        It must have the signature::\n\n            def onselect(eclick: MouseEvent, erelease: MouseEvent)\n\n        where *eclick* and *erelease* are the mouse click and release\n        `.MouseEvent`\\s that start and complete the selection.\n\n    minspanx : float, default: 0\n        Selections with an x-span less than or equal to *minspanx* are removed\n        (when already existing) or cancelled.\n\n    minspany : float, default: 0\n        Selections with an y-span less than or equal to *minspanx* are removed\n        (when already existing) or cancelled.\n\n    useblit : bool, default: False\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n\n    props : dict, optional\n        Properties with which the __ARTIST_NAME__ is drawn. See\n        `matplotlib.patches.Patch` for valid properties.\n        Default:\n\n        ``dict(facecolor='red', edgecolor='black', alpha=0.2, fill=True)``\n\n    spancoords : {\"data\", \"pixels\"}, default: \"data\"\n        Whether to interpret *minspanx* and *minspany* in data or in pixel\n        coordinates.\n\n    button : `.MouseButton`, list of `.MouseButton`, default: all buttons\n        Button(s) that trigger rectangle selection.\n\n    grab_range : float, default: 10\n        Distance in pixels within which the interactive tool handles can be\n        activated.\n\n    handle_props : dict, optional\n        Properties with which the interactive handles (marker artists) are\n        drawn. See the marker arguments in `matplotlib.lines.Line2D` for valid\n        properties.  Default values are defined in ``mpl.rcParams`` except for\n        the default value of ``markeredgecolor`` which will be the same as the\n        ``edgecolor`` property in *props*.\n\n    interactive : bool, default: False\n        Whether to draw a set of handles that allow interaction with the\n        widget after it is drawn.\n\n    state_modifier_keys : dict, optional\n        Keyboard modifiers which affect the widget's behavior.  Values\n        amend the defaults, which are:\n\n        - \"move\": Move the existing shape, default: no modifier.\n        - \"clear\": Clear the current shape, default: \"escape\".\n        - \"square\": Make the shape square, default: \"shift\".\n        - \"center\": change the shape around its center, default: \"ctrl\".\n        - \"rotate\": Rotate the shape around its center between -45° and 45°,\n          default: \"r\".\n\n        \"square\" and \"center\" can be combined. The square shape can be defined\n        in data or display coordinates as determined by the\n        ``use_data_coordinates`` argument specified when creating the selector.\n\n    drag_from_anywhere : bool, default: False\n        If `True`, the widget can be moved by clicking anywhere within\n        its bounds.\n\n    ignore_event_outside : bool, default: False\n        If `True`, the event triggered outside the span selector will be\n        ignored.\n\n    use_data_coordinates : bool, default: False\n        If `True`, the \"square\" shape of the selector is defined in\n        data coordinates instead of display coordinates.\n    \"\"\"\n\n\n@_docstring.Substitution(_RECTANGLESELECTOR_PARAMETERS_DOCSTRING.replace(\n    '__ARTIST_NAME__', 'rectangle'))\nclass RectangleSelector(_SelectorWidget):\n    \"\"\"\n    Select a rectangular region of an Axes.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Press and release events triggered at the same coordinates outside the\n    selection will clear the selector, except when\n    ``ignore_event_outside=True``.\n\n    %s\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> import matplotlib.widgets as mwidgets\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot([1, 2, 3], [10, 50, 100])\n    >>> def onselect(eclick, erelease):\n    ...     print(eclick.xdata, eclick.ydata)\n    ...     print(erelease.xdata, erelease.ydata)\n    >>> props = dict(facecolor='blue', alpha=0.5)\n    >>> rect = mwidgets.RectangleSelector(ax, onselect, interactive=True,\n                                          props=props)\n    >>> fig.show()\n\n    >>> selector.add_state('square')\n\n    See also: :doc:`/gallery/widgets/rectangle_selector`\n    \"\"\"\n\n    @_api.rename_parameter(\"3.5\", \"maxdist\", \"grab_range\")\n    @_api.rename_parameter(\"3.5\", \"marker_props\", \"handle_props\")\n    @_api.rename_parameter(\"3.5\", \"rectprops\", \"props\")\n    @_api.delete_parameter(\"3.5\", \"drawtype\")\n    @_api.delete_parameter(\"3.5\", \"lineprops\")\n    def __init__(self, ax, onselect, drawtype='box',\n                 minspanx=0, minspany=0, useblit=False,\n                 lineprops=None, props=None, spancoords='data',\n                 button=None, grab_range=10, handle_props=None,\n                 interactive=False, state_modifier_keys=None,\n                 drag_from_anywhere=False, ignore_event_outside=False,\n                 use_data_coordinates=False):\n        super().__init__(ax, onselect, useblit=useblit, button=button,\n                         state_modifier_keys=state_modifier_keys,\n                         use_data_coordinates=use_data_coordinates)\n\n        self.visible = True\n        self._interactive = interactive\n        self.drag_from_anywhere = drag_from_anywhere\n        self.ignore_event_outside = ignore_event_outside\n        self._rotation = 0.0\n        self._aspect_ratio_correction = 1.0\n\n        # State to allow the option of an interactive selector that can't be\n        # interactively drawn. This is used in PolygonSelector as an\n        # interactive bounding box to allow the polygon to be easily resized\n        self._allow_creation = True\n\n        if drawtype == 'none':  # draw a line but make it invisible\n            _api.warn_deprecated(\n                \"3.5\", message=\"Support for drawtype='none' is deprecated \"\n                               \"since %(since)s and will be removed \"\n                               \"%(removal)s.\"\n                               \"Use props=dict(visible=False) instead.\")\n            drawtype = 'line'\n            self.visible = False\n\n        if drawtype == 'box':\n            if props is None:\n                props = dict(facecolor='red', edgecolor='black',\n                             alpha=0.2, fill=True)\n            props['animated'] = self.useblit\n            self.visible = props.pop('visible', self.visible)\n            self._props = props\n            to_draw = self._init_shape(**self._props)\n            self.ax.add_patch(to_draw)\n        if drawtype == 'line':\n            _api.warn_deprecated(\n                \"3.5\", message=\"Support for drawtype='line' is deprecated \"\n                               \"since %(since)s and will be removed \"\n                               \"%(removal)s.\")\n            if lineprops is None:\n                lineprops = dict(color='black', linestyle='-',\n                                 linewidth=2, alpha=0.5)\n            lineprops['animated'] = self.useblit\n            self._props = lineprops\n            to_draw = Line2D([0, 0], [0, 0], visible=False, **self._props)\n            self.ax.add_line(to_draw)\n\n        self._selection_artist = to_draw\n        self._set_aspect_ratio_correction()\n\n        self.minspanx = minspanx\n        self.minspany = minspany\n\n        _api.check_in_list(['data', 'pixels'], spancoords=spancoords)\n        self.spancoords = spancoords\n        self._drawtype = drawtype\n\n        self.grab_range = grab_range\n\n        if self._interactive:\n            self._handle_props = {\n                'markeredgecolor': (self._props or {}).get(\n                    'edgecolor', 'black'),\n                **cbook.normalize_kwargs(handle_props, Line2D)}\n\n            self._corner_order = ['SW', 'SE', 'NE', 'NW']\n            xc, yc = self.corners\n            self._corner_handles = ToolHandles(self.ax, xc, yc,\n                                               marker_props=self._handle_props,\n                                               useblit=self.useblit)\n\n            self._edge_order = ['W', 'S', 'E', 'N']\n            xe, ye = self.edge_centers\n            self._edge_handles = ToolHandles(self.ax, xe, ye, marker='s',\n                                             marker_props=self._handle_props,\n                                             useblit=self.useblit)\n\n            xc, yc = self.center\n            self._center_handle = ToolHandles(self.ax, [xc], [yc], marker='s',\n                                              marker_props=self._handle_props,\n                                              useblit=self.useblit)\n\n            self._active_handle = None\n\n        self._extents_on_press = None\n\n    to_draw = _api.deprecated(\"3.5\")(\n        property(lambda self: self._selection_artist)\n        )\n\n    drawtype = _api.deprecate_privatize_attribute(\"3.5\")\n\n    active_handle = _api.deprecate_privatize_attribute(\"3.5\")\n\n    interactive = _api.deprecate_privatize_attribute(\"3.5\")\n\n    maxdist = _api.deprecated(\"3.5\", name=\"maxdist\", alternative=\"grab_range\")(\n        property(lambda self: self.grab_range,\n                 lambda self, value: setattr(self, \"grab_range\", value)))\n\n    @property\n    def _handles_artists(self):\n        return (*self._center_handle.artists, *self._corner_handles.artists,\n                *self._edge_handles.artists)\n\n    def _init_shape(self, **props):\n        return Rectangle((0, 0), 0, 1, visible=False,\n                         rotation_point='center', **props)\n\n    def _press(self, event):\n        \"\"\"Button press event handler.\"\"\"\n        # make the drawn box/line visible get the click-coordinates,\n        # button, ...\n        if self._interactive and self._selection_artist.get_visible():\n            self._set_active_handle(event)\n        else:\n            self._active_handle = None\n\n        if ((self._active_handle is None or not self._interactive) and\n                self._allow_creation):\n            # Clear previous rectangle before drawing new rectangle.\n            self.update()\n\n        if (self._active_handle is None and not self.ignore_event_outside and\n                self._allow_creation):\n            x = event.xdata\n            y = event.ydata\n            self.visible = False\n            self.extents = x, x, y, y\n            self.visible = True\n        else:\n            self.set_visible(True)\n\n        self._extents_on_press = self.extents\n        self._rotation_on_press = self._rotation\n        self._set_aspect_ratio_correction()\n\n        return False\n\n    def _release(self, event):\n        \"\"\"Button release event handler.\"\"\"\n        if not self._interactive:\n            self._selection_artist.set_visible(False)\n\n        if (self._active_handle is None and self._selection_completed and\n                self.ignore_event_outside):\n            return\n\n        # update the eventpress and eventrelease with the resulting extents\n        x0, x1, y0, y1 = self.extents\n        self._eventpress.xdata = x0\n        self._eventpress.ydata = y0\n        xy0 = self.ax.transData.transform([x0, y0])\n        self._eventpress.x, self._eventpress.y = xy0\n\n        self._eventrelease.xdata = x1\n        self._eventrelease.ydata = y1\n        xy1 = self.ax.transData.transform([x1, y1])\n        self._eventrelease.x, self._eventrelease.y = xy1\n\n        # calculate dimensions of box or line\n        if self.spancoords == 'data':\n            spanx = abs(self._eventpress.xdata - self._eventrelease.xdata)\n            spany = abs(self._eventpress.ydata - self._eventrelease.ydata)\n        elif self.spancoords == 'pixels':\n            spanx = abs(self._eventpress.x - self._eventrelease.x)\n            spany = abs(self._eventpress.y - self._eventrelease.y)\n        else:\n            _api.check_in_list(['data', 'pixels'],\n                               spancoords=self.spancoords)\n        # check if drawn distance (if it exists) is not too small in\n        # either x or y-direction\n        minspanxy = (spanx <= self.minspanx or spany <= self.minspany)\n        if (self._drawtype != 'none' and minspanxy):\n            for artist in self.artists:\n                artist.set_visible(False)\n            if self._selection_completed:\n                # Call onselect, only when the selection is already existing\n                self.onselect(self._eventpress, self._eventrelease)\n            self._selection_completed = False\n        else:\n            self.onselect(self._eventpress, self._eventrelease)\n            self._selection_completed = True\n\n        self.update()\n        self._active_handle = None\n        self._extents_on_press = None\n\n        return False\n\n    def _onmove(self, event):\n        \"\"\"\n        Motion notify event handler.\n\n        This can do one of four things:\n        - Translate\n        - Rotate\n        - Re-size\n        - Continue the creation of a new shape\n        \"\"\"\n        eventpress = self._eventpress\n        # The calculations are done for rotation at zero: we apply inverse\n        # transformation to events except when we rotate and move\n        state = self._state\n        rotate = ('rotate' in state and\n                  self._active_handle in self._corner_order)\n        move = self._active_handle == 'C'\n        resize = self._active_handle and not move\n\n        if resize:\n            inv_tr = self._get_rotation_transform().inverted()\n            event.xdata, event.ydata = inv_tr.transform(\n                [event.xdata, event.ydata])\n            eventpress.xdata, eventpress.ydata = inv_tr.transform(\n                [eventpress.xdata, eventpress.ydata]\n                )\n\n        dx = event.xdata - eventpress.xdata\n        dy = event.ydata - eventpress.ydata\n        # refmax is used when moving the corner handle with the square state\n        # and is the maximum between refx and refy\n        refmax = None\n        if self._use_data_coordinates:\n            refx, refy = dx, dy\n        else:\n            # Get dx/dy in display coordinates\n            refx = event.x - eventpress.x\n            refy = event.y - eventpress.y\n\n        x0, x1, y0, y1 = self._extents_on_press\n        # rotate an existing shape\n        if rotate:\n            # calculate angle abc\n            a = np.array([eventpress.xdata, eventpress.ydata])\n            b = np.array(self.center)\n            c = np.array([event.xdata, event.ydata])\n            angle = (np.arctan2(c[1]-b[1], c[0]-b[0]) -\n                     np.arctan2(a[1]-b[1], a[0]-b[0]))\n            self.rotation = np.rad2deg(self._rotation_on_press + angle)\n\n        elif resize:\n            size_on_press = [x1 - x0, y1 - y0]\n            center = [x0 + size_on_press[0] / 2, y0 + size_on_press[1] / 2]\n\n            # Keeping the center fixed\n            if 'center' in state:\n                # hh, hw are half-height and half-width\n                if 'square' in state:\n                    # when using a corner, find which reference to use\n                    if self._active_handle in self._corner_order:\n                        refmax = max(refx, refy, key=abs)\n                    if self._active_handle in ['E', 'W'] or refmax == refx:\n                        hw = event.xdata - center[0]\n                        hh = hw / self._aspect_ratio_correction\n                    else:\n                        hh = event.ydata - center[1]\n                        hw = hh * self._aspect_ratio_correction\n                else:\n                    hw = size_on_press[0] / 2\n                    hh = size_on_press[1] / 2\n                    # cancel changes in perpendicular direction\n                    if self._active_handle in ['E', 'W'] + self._corner_order:\n                        hw = abs(event.xdata - center[0])\n                    if self._active_handle in ['N', 'S'] + self._corner_order:\n                        hh = abs(event.ydata - center[1])\n\n                x0, x1, y0, y1 = (center[0] - hw, center[0] + hw,\n                                  center[1] - hh, center[1] + hh)\n\n            else:\n                # change sign of relative changes to simplify calculation\n                # Switch variables so that x1 and/or y1 are updated on move\n                if 'W' in self._active_handle:\n                    x0 = x1\n                if 'S' in self._active_handle:\n                    y0 = y1\n                if self._active_handle in ['E', 'W'] + self._corner_order:\n                    x1 = event.xdata\n                if self._active_handle in ['N', 'S'] + self._corner_order:\n                    y1 = event.ydata\n                if 'square' in state:\n                    # when using a corner, find which reference to use\n                    if self._active_handle in self._corner_order:\n                        refmax = max(refx, refy, key=abs)\n                    if self._active_handle in ['E', 'W'] or refmax == refx:\n                        sign = np.sign(event.ydata - y0)\n                        y1 = y0 + sign * abs(x1 - x0) / \\\n                            self._aspect_ratio_correction\n                    else:\n                        sign = np.sign(event.xdata - x0)\n                        x1 = x0 + sign * abs(y1 - y0) * \\\n                            self._aspect_ratio_correction\n\n        elif move:\n            x0, x1, y0, y1 = self._extents_on_press\n            dx = event.xdata - eventpress.xdata\n            dy = event.ydata - eventpress.ydata\n            x0 += dx\n            x1 += dx\n            y0 += dy\n            y1 += dy\n\n        else:\n            # Create a new shape\n            self._rotation = 0\n            # Don't create a new rectangle if there is already one when\n            # ignore_event_outside=True\n            if ((self.ignore_event_outside and self._selection_completed) or\n                    not self._allow_creation):\n                return\n            center = [eventpress.xdata, eventpress.ydata]\n            dx = (event.xdata - center[0]) / 2.\n            dy = (event.ydata - center[1]) / 2.\n\n            # square shape\n            if 'square' in state:\n                refmax = max(refx, refy, key=abs)\n                if refmax == refx:\n                    dy = np.sign(dy) * abs(dx) / self._aspect_ratio_correction\n                else:\n                    dx = np.sign(dx) * abs(dy) * self._aspect_ratio_correction\n\n            # from center\n            if 'center' in state:\n                dx *= 2\n                dy *= 2\n\n            # from corner\n            else:\n                center[0] += dx\n                center[1] += dy\n\n            x0, x1, y0, y1 = (center[0] - dx, center[0] + dx,\n                              center[1] - dy, center[1] + dy)\n\n        self.extents = x0, x1, y0, y1\n\n    @property\n    def _rect_bbox(self):\n        if self._drawtype == 'box':\n            return self._selection_artist.get_bbox().bounds\n        else:\n            x, y = self._selection_artist.get_data()\n            x0, x1 = min(x), max(x)\n            y0, y1 = min(y), max(y)\n            return x0, y0, x1 - x0, y1 - y0\n\n    def _set_aspect_ratio_correction(self):\n        aspect_ratio = self.ax._get_aspect_ratio()\n        if not hasattr(self._selection_artist, '_aspect_ratio_correction'):\n            # Aspect ratio correction is not supported with deprecated\n            # drawtype='line'. Remove this block in matplotlib 3.7\n            self._aspect_ratio_correction = 1\n            return\n\n        self._selection_artist._aspect_ratio_correction = aspect_ratio\n        if self._use_data_coordinates:\n            self._aspect_ratio_correction = 1\n        else:\n            self._aspect_ratio_correction = aspect_ratio\n\n    def _get_rotation_transform(self):\n        aspect_ratio = self.ax._get_aspect_ratio()\n        return Affine2D().translate(-self.center[0], -self.center[1]) \\\n                .scale(1, aspect_ratio) \\\n                .rotate(self._rotation) \\\n                .scale(1, 1 / aspect_ratio) \\\n                .translate(*self.center)\n\n    @property\n    def corners(self):\n        \"\"\"\n        Corners of rectangle in data coordinates from lower left,\n        moving clockwise.\n        \"\"\"\n        x0, y0, width, height = self._rect_bbox\n        xc = x0, x0 + width, x0 + width, x0\n        yc = y0, y0, y0 + height, y0 + height\n        transform = self._get_rotation_transform()\n        coords = transform.transform(np.array([xc, yc]).T).T\n        return coords[0], coords[1]\n\n    @property\n    def edge_centers(self):\n        \"\"\"\n        Midpoint of rectangle edges in data coordinates from left,\n        moving anti-clockwise.\n        \"\"\"\n        x0, y0, width, height = self._rect_bbox\n        w = width / 2.\n        h = height / 2.\n        xe = x0, x0 + w, x0 + width, x0 + w\n        ye = y0 + h, y0, y0 + h, y0 + height\n        transform = self._get_rotation_transform()\n        coords = transform.transform(np.array([xe, ye]).T).T\n        return coords[0], coords[1]\n\n    @property\n    def center(self):\n        \"\"\"Center of rectangle in data coordinates.\"\"\"\n        x0, y0, width, height = self._rect_bbox\n        return x0 + width / 2., y0 + height / 2.\n\n    @property\n    def extents(self):\n        \"\"\"\n        Return (xmin, xmax, ymin, ymax) in data coordinates as defined by the\n        bounding box before rotation.\n        \"\"\"\n        x0, y0, width, height = self._rect_bbox\n        xmin, xmax = sorted([x0, x0 + width])\n        ymin, ymax = sorted([y0, y0 + height])\n        return xmin, xmax, ymin, ymax\n\n    @extents.setter\n    def extents(self, extents):\n        # Update displayed shape\n        self._draw_shape(extents)\n        if self._interactive:\n            # Update displayed handles\n            self._corner_handles.set_data(*self.corners)\n            self._edge_handles.set_data(*self.edge_centers)\n            self._center_handle.set_data(*self.center)\n        self.set_visible(self.visible)\n        self.update()\n\n    @property\n    def rotation(self):\n        \"\"\"\n        Rotation in degree in interval [-45°, 45°]. The rotation is limited in\n        range to keep the implementation simple.\n        \"\"\"\n        return np.rad2deg(self._rotation)\n\n    @rotation.setter\n    def rotation(self, value):\n        # Restrict to a limited range of rotation [-45°, 45°] to avoid changing\n        # order of handles\n        if -45 <= value and value <= 45:\n            self._rotation = np.deg2rad(value)\n            # call extents setter to draw shape and update handles positions\n            self.extents = self.extents\n\n    draw_shape = _api.deprecate_privatize_attribute('3.5')\n\n    def _draw_shape(self, extents):\n        x0, x1, y0, y1 = extents\n        xmin, xmax = sorted([x0, x1])\n        ymin, ymax = sorted([y0, y1])\n        xlim = sorted(self.ax.get_xlim())\n        ylim = sorted(self.ax.get_ylim())\n\n        xmin = max(xlim[0], xmin)\n        ymin = max(ylim[0], ymin)\n        xmax = min(xmax, xlim[1])\n        ymax = min(ymax, ylim[1])\n\n        if self._drawtype == 'box':\n            self._selection_artist.set_x(xmin)\n            self._selection_artist.set_y(ymin)\n            self._selection_artist.set_width(xmax - xmin)\n            self._selection_artist.set_height(ymax - ymin)\n            self._selection_artist.set_angle(self.rotation)\n\n        elif self._drawtype == 'line':\n            self._selection_artist.set_data([xmin, xmax], [ymin, ymax])\n\n    def _set_active_handle(self, event):\n        \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n        # Note: event.xdata/ydata in data coordinates, event.x/y in pixels\n        c_idx, c_dist = self._corner_handles.closest(event.x, event.y)\n        e_idx, e_dist = self._edge_handles.closest(event.x, event.y)\n        m_idx, m_dist = self._center_handle.closest(event.x, event.y)\n\n        if 'move' in self._state:\n            self._active_handle = 'C'\n        # Set active handle as closest handle, if mouse click is close enough.\n        elif m_dist < self.grab_range * 2:\n            # Prioritise center handle over other handles\n            self._active_handle = 'C'\n        elif c_dist > self.grab_range and e_dist > self.grab_range:\n            # Not close to any handles\n            if self.drag_from_anywhere and self._contains(event):\n                # Check if we've clicked inside the region\n                self._active_handle = 'C'\n            else:\n                self._active_handle = None\n                return\n        elif c_dist < e_dist:\n            # Closest to a corner handle\n            self._active_handle = self._corner_order[c_idx]\n        else:\n            # Closest to an edge handle\n            self._active_handle = self._edge_order[e_idx]\n\n    def _contains(self, event):\n        \"\"\"Return True if event is within the patch.\"\"\"\n        return self._selection_artist.contains(event, radius=0)[0]\n\n    @property\n    def geometry(self):\n        \"\"\"\n        Return an array of shape (2, 5) containing the\n        x (``RectangleSelector.geometry[1, :]``) and\n        y (``RectangleSelector.geometry[0, :]``) data coordinates of the four\n        corners of the rectangle starting and ending in the top left corner.\n        \"\"\"\n        if hasattr(self._selection_artist, 'get_verts'):\n            xfm = self.ax.transData.inverted()\n            y, x = xfm.transform(self._selection_artist.get_verts()).T\n            return np.array([x, y])\n        else:\n            return np.array(self._selection_artist.get_data())\n\n\n@_docstring.Substitution(_RECTANGLESELECTOR_PARAMETERS_DOCSTRING.replace(\n    '__ARTIST_NAME__', 'ellipse'))\nclass EllipseSelector(RectangleSelector):\n    \"\"\"\n    Select an elliptical region of an Axes.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Press and release events triggered at the same coordinates outside the\n    selection will clear the selector, except when\n    ``ignore_event_outside=True``.\n\n    %s\n\n    Examples\n    --------\n    :doc:`/gallery/widgets/rectangle_selector`\n    \"\"\"\n\n    draw_shape = _api.deprecate_privatize_attribute('3.5')\n\n    def _init_shape(self, **props):\n        return Ellipse((0, 0), 0, 1, visible=False, **props)\n\n    def _draw_shape(self, extents):\n        x0, x1, y0, y1 = extents\n        xmin, xmax = sorted([x0, x1])\n        ymin, ymax = sorted([y0, y1])\n        center = [x0 + (x1 - x0) / 2., y0 + (y1 - y0) / 2.]\n        a = (xmax - xmin) / 2.\n        b = (ymax - ymin) / 2.\n\n        if self._drawtype == 'box':\n            self._selection_artist.center = center\n            self._selection_artist.width = 2 * a\n            self._selection_artist.height = 2 * b\n            self._selection_artist.angle = self.rotation\n        else:\n            rad = np.deg2rad(np.arange(31) * 12)\n            x = a * np.cos(rad) + center[0]\n            y = b * np.sin(rad) + center[1]\n            self._selection_artist.set_data(x, y)\n\n    @property\n    def _rect_bbox(self):\n        if self._drawtype == 'box':\n            x, y = self._selection_artist.center\n            width = self._selection_artist.width\n            height = self._selection_artist.height\n            return x - width / 2., y - height / 2., width, height\n        else:\n            x, y = self._selection_artist.get_data()\n            x0, x1 = min(x), max(x)\n            y0, y1 = min(y), max(y)\n            return x0, y0, x1 - x0, y1 - y0\n\n\nclass LassoSelector(_SelectorWidget):\n    \"\"\"\n    Selection curve of an arbitrary shape.\n\n    For the selector to remain responsive you must keep a reference to it.\n\n    The selected path can be used in conjunction with `~.Path.contains_point`\n    to select data points from an image.\n\n    In contrast to `Lasso`, `LassoSelector` is written with an interface\n    similar to `RectangleSelector` and `SpanSelector`, and will continue to\n    interact with the Axes until disconnected.\n\n    Example usage::\n\n        ax = plt.subplot()\n        ax.plot(x, y)\n\n        def onselect(verts):\n            print(verts)\n        lasso = LassoSelector(ax, onselect)\n\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    onselect : function\n        Whenever the lasso is released, the *onselect* function is called and\n        passed the vertices of the selected path.\n    useblit : bool, default: True\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n    props : dict, optional\n        Properties with which the line is drawn, see `matplotlib.lines.Line2D`\n        for valid properties. Default values are defined in ``mpl.rcParams``.\n    button : `.MouseButton` or list of `.MouseButton`, optional\n        The mouse buttons used for rectangle selection.  Default is ``None``,\n        which corresponds to all buttons.\n    \"\"\"\n\n    @_api.rename_parameter(\"3.5\", \"lineprops\", \"props\")\n    def __init__(self, ax, onselect=None, useblit=True, props=None,\n                 button=None):\n        super().__init__(ax, onselect, useblit=useblit, button=button)\n        self.verts = None\n        if props is None:\n            props = dict()\n        # self.useblit may be != useblit, if the canvas doesn't support blit.\n        props.update(animated=self.useblit, visible=False)\n        line = Line2D([], [], **props)\n        self.ax.add_line(line)\n        self._selection_artist = line\n\n    @_api.deprecated(\"3.5\", alternative=\"press\")\n    def onpress(self, event):\n        self.press(event)\n\n    def _press(self, event):\n        self.verts = [self._get_data(event)]\n        self._selection_artist.set_visible(True)\n\n    @_api.deprecated(\"3.5\", alternative=\"release\")\n    def onrelease(self, event):\n        self.release(event)\n\n    def _release(self, event):\n        if self.verts is not None:\n            self.verts.append(self._get_data(event))\n            self.onselect(self.verts)\n        self._selection_artist.set_data([[], []])\n        self._selection_artist.set_visible(False)\n        self.verts = None\n\n    def _onmove(self, event):\n        if self.verts is None:\n            return\n        self.verts.append(self._get_data(event))\n        self._selection_artist.set_data(list(zip(*self.verts)))\n\n        self.update()\n\n\nclass PolygonSelector(_SelectorWidget):\n    \"\"\"\n    Select a polygon region of an Axes.\n\n    Place vertices with each mouse click, and make the selection by completing\n    the polygon (clicking on the first vertex). Once drawn individual vertices\n    can be moved by clicking and dragging with the left mouse button, or\n    removed by clicking the right mouse button.\n\n    In addition, the following modifier keys can be used:\n\n    - Hold *ctrl* and click and drag a vertex to reposition it before the\n      polygon has been completed.\n    - Hold the *shift* key and click and drag anywhere in the Axes to move\n      all vertices.\n    - Press the *esc* key to start a new polygon.\n\n    For the selector to remain responsive you must keep a reference to it.\n\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n\n    onselect : function\n        When a polygon is completed or modified after completion,\n        the *onselect* function is called and passed a list of the vertices as\n        ``(xdata, ydata)`` tuples.\n\n    useblit : bool, default: False\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n\n    props : dict, optional\n        Properties with which the line is drawn, see `matplotlib.lines.Line2D`\n        for valid properties.\n        Default:\n\n            ``dict(color='k', linestyle='-', linewidth=2, alpha=0.5)``\n\n    handle_props : dict, optional\n        Artist properties for the markers drawn at the vertices of the polygon.\n        See the marker arguments in `matplotlib.lines.Line2D` for valid\n        properties.  Default values are defined in ``mpl.rcParams`` except for\n        the default value of ``markeredgecolor`` which will be the same as the\n        ``color`` property in *props*.\n\n    grab_range : float, default: 10\n        A vertex is selected (to complete the polygon or to move a vertex) if\n        the mouse click is within *grab_range* pixels of the vertex.\n\n    draw_bounding_box : bool, optional\n        If `True`, a bounding box will be drawn around the polygon selector\n        once it is complete. This box can be used to move and resize the\n        selector.\n\n    box_handle_props : dict, optional\n        Properties to set for the box handles. See the documentation for the\n        *handle_props* argument to `RectangleSelector` for more info.\n\n    box_props : dict, optional\n        Properties to set for the box. See the documentation for the *props*\n        argument to `RectangleSelector` for more info.\n\n    Examples\n    --------\n    :doc:`/gallery/widgets/polygon_selector_simple`\n    :doc:`/gallery/widgets/polygon_selector_demo`\n\n    Notes\n    -----\n    If only one point remains after removing points, the selector reverts to an\n    incomplete state and you can start drawing a new polygon from the existing\n    point.\n    \"\"\"\n\n    @_api.rename_parameter(\"3.5\", \"lineprops\", \"props\")\n    @_api.rename_parameter(\"3.5\", \"markerprops\", \"handle_props\")\n    @_api.rename_parameter(\"3.5\", \"vertex_select_radius\", \"grab_range\")\n    def __init__(self, ax, onselect, useblit=False,\n                 props=None, handle_props=None, grab_range=10, *,\n                 draw_bounding_box=False, box_handle_props=None,\n                 box_props=None):\n        # The state modifiers 'move', 'square', and 'center' are expected by\n        # _SelectorWidget but are not supported by PolygonSelector\n        # Note: could not use the existing 'move' state modifier in-place of\n        # 'move_all' because _SelectorWidget automatically discards 'move'\n        # from the state on button release.\n        state_modifier_keys = dict(clear='escape', move_vertex='control',\n                                   move_all='shift', move='not-applicable',\n                                   square='not-applicable',\n                                   center='not-applicable',\n                                   rotate='not-applicable')\n        super().__init__(ax, onselect, useblit=useblit,\n                         state_modifier_keys=state_modifier_keys)\n\n        self._xys = [(0, 0)]\n\n        if props is None:\n            props = dict(color='k', linestyle='-', linewidth=2, alpha=0.5)\n        props['animated'] = self.useblit\n        self._props = props\n        self._selection_artist = line = Line2D([], [], **self._props)\n        self.ax.add_line(line)\n\n        if handle_props is None:\n            handle_props = dict(markeredgecolor='k',\n                                markerfacecolor=self._props.get('color', 'k'))\n        self._handle_props = handle_props\n        self._polygon_handles = ToolHandles(self.ax, [], [],\n                                            useblit=self.useblit,\n                                            marker_props=self._handle_props)\n\n        self._active_handle_idx = -1\n        self.grab_range = grab_range\n\n        self.set_visible(True)\n        self._draw_box = draw_bounding_box\n        self._box = None\n\n        if box_handle_props is None:\n            box_handle_props = {}\n        self._box_handle_props = self._handle_props.update(box_handle_props)\n        self._box_props = box_props\n\n    def _get_bbox(self):\n        return self._selection_artist.get_bbox()\n\n    def _add_box(self):\n        self._box = RectangleSelector(self.ax,\n                                      onselect=lambda *args, **kwargs: None,\n                                      useblit=self.useblit,\n                                      grab_range=self.grab_range,\n                                      handle_props=self._box_handle_props,\n                                      props=self._box_props,\n                                      interactive=True)\n        self._box._state_modifier_keys.pop('rotate')\n        self._box.connect_event('motion_notify_event', self._scale_polygon)\n        self._update_box()\n        # Set state that prevents the RectangleSelector from being created\n        # by the user\n        self._box._allow_creation = False\n        self._box._selection_completed = True\n        self._draw_polygon()\n\n    def _remove_box(self):\n        if self._box is not None:\n            self._box.set_visible(False)\n            self._box = None\n\n    def _update_box(self):\n        # Update selection box extents to the extents of the polygon\n        if self._box is not None:\n            bbox = self._get_bbox()\n            self._box.extents = [bbox.x0, bbox.x1, bbox.y0, bbox.y1]\n            # Save a copy\n            self._old_box_extents = self._box.extents\n\n    def _scale_polygon(self, event):\n        \"\"\"\n        Scale the polygon selector points when the bounding box is moved or\n        scaled.\n\n        This is set as a callback on the bounding box RectangleSelector.\n        \"\"\"\n        if not self._selection_completed:\n            return\n\n        if self._old_box_extents == self._box.extents:\n            return\n\n        # Create transform from old box to new box\n        x1, y1, w1, h1 = self._box._rect_bbox\n        old_bbox = self._get_bbox()\n        t = (transforms.Affine2D()\n             .translate(-old_bbox.x0, -old_bbox.y0)\n             .scale(1 / old_bbox.width, 1 / old_bbox.height)\n             .scale(w1, h1)\n             .translate(x1, y1))\n\n        # Update polygon verts.  Must be a list of tuples for consistency.\n        new_verts = [(x, y) for x, y in t.transform(np.array(self.verts))]\n        self._xys = [*new_verts, new_verts[0]]\n        self._draw_polygon()\n        self._old_box_extents = self._box.extents\n\n    line = _api.deprecated(\"3.5\")(\n        property(lambda self: self._selection_artist)\n        )\n\n    vertex_select_radius = _api.deprecated(\"3.5\", name=\"vertex_select_radius\",\n                                           alternative=\"grab_range\")(\n        property(lambda self: self.grab_range,\n                 lambda self, value: setattr(self, \"grab_range\", value))\n        )\n\n    @property\n    def _handles_artists(self):\n        return self._polygon_handles.artists\n\n    def _remove_vertex(self, i):\n        \"\"\"Remove vertex with index i.\"\"\"\n        if (len(self._xys) > 2 and\n                self._selection_completed and\n                i in (0, len(self._xys) - 1)):\n            # If selecting the first or final vertex, remove both first and\n            # last vertex as they are the same for a closed polygon\n            self._xys.pop(0)\n            self._xys.pop(-1)\n            # Close the polygon again by appending the new first vertex to the\n            # end\n            self._xys.append(self._xys[0])\n        else:\n            self._xys.pop(i)\n        if len(self._xys) <= 2:\n            # If only one point left, return to incomplete state to let user\n            # start drawing again\n            self._selection_completed = False\n            self._remove_box()\n\n    def _press(self, event):\n        \"\"\"Button press event handler.\"\"\"\n        # Check for selection of a tool handle.\n        if ((self._selection_completed or 'move_vertex' in self._state)\n                and len(self._xys) > 0):\n            h_idx, h_dist = self._polygon_handles.closest(event.x, event.y)\n            if h_dist < self.grab_range:\n                self._active_handle_idx = h_idx\n        # Save the vertex positions at the time of the press event (needed to\n        # support the 'move_all' state modifier).\n        self._xys_at_press = self._xys.copy()\n\n    def _release(self, event):\n        \"\"\"Button release event handler.\"\"\"\n        # Release active tool handle.\n        if self._active_handle_idx >= 0:\n            if event.button == 3:\n                self._remove_vertex(self._active_handle_idx)\n                self._draw_polygon()\n            self._active_handle_idx = -1\n\n        # Complete the polygon.\n        elif len(self._xys) > 3 and self._xys[-1] == self._xys[0]:\n            self._selection_completed = True\n            if self._draw_box and self._box is None:\n                self._add_box()\n\n        # Place new vertex.\n        elif (not self._selection_completed\n              and 'move_all' not in self._state\n              and 'move_vertex' not in self._state):\n            self._xys.insert(-1, (event.xdata, event.ydata))\n\n        if self._selection_completed:\n            self.onselect(self.verts)\n\n    def onmove(self, event):\n        \"\"\"Cursor move event handler and validator.\"\"\"\n        # Method overrides _SelectorWidget.onmove because the polygon selector\n        # needs to process the move callback even if there is no button press.\n        # _SelectorWidget.onmove include logic to ignore move event if\n        # _eventpress is None.\n        if not self.ignore(event):\n            event = self._clean_event(event)\n            self._onmove(event)\n            return True\n        return False\n\n    def _onmove(self, event):\n        \"\"\"Cursor move event handler.\"\"\"\n        # Move the active vertex (ToolHandle).\n        if self._active_handle_idx >= 0:\n            idx = self._active_handle_idx\n            self._xys[idx] = event.xdata, event.ydata\n            # Also update the end of the polygon line if the first vertex is\n            # the active handle and the polygon is completed.\n            if idx == 0 and self._selection_completed:\n                self._xys[-1] = event.xdata, event.ydata\n\n        # Move all vertices.\n        elif 'move_all' in self._state and self._eventpress:\n            dx = event.xdata - self._eventpress.xdata\n            dy = event.ydata - self._eventpress.ydata\n            for k in range(len(self._xys)):\n                x_at_press, y_at_press = self._xys_at_press[k]\n                self._xys[k] = x_at_press + dx, y_at_press + dy\n\n        # Do nothing if completed or waiting for a move.\n        elif (self._selection_completed\n              or 'move_vertex' in self._state or 'move_all' in self._state):\n            return\n\n        # Position pending vertex.\n        else:\n            # Calculate distance to the start vertex.\n            x0, y0 = \\\n                self._selection_artist.get_transform().transform(self._xys[0])\n            v0_dist = np.hypot(x0 - event.x, y0 - event.y)\n            # Lock on to the start vertex if near it and ready to complete.\n            if len(self._xys) > 3 and v0_dist < self.grab_range:\n                self._xys[-1] = self._xys[0]\n            else:\n                self._xys[-1] = event.xdata, event.ydata\n\n        self._draw_polygon()\n\n    def _on_key_press(self, event):\n        \"\"\"Key press event handler.\"\"\"\n        # Remove the pending vertex if entering the 'move_vertex' or\n        # 'move_all' mode\n        if (not self._selection_completed\n                and ('move_vertex' in self._state or\n                     'move_all' in self._state)):\n            self._xys.pop()\n            self._draw_polygon()\n\n    def _on_key_release(self, event):\n        \"\"\"Key release event handler.\"\"\"\n        # Add back the pending vertex if leaving the 'move_vertex' or\n        # 'move_all' mode (by checking the released key)\n        if (not self._selection_completed\n                and\n                (event.key == self._state_modifier_keys.get('move_vertex')\n                 or event.key == self._state_modifier_keys.get('move_all'))):\n            self._xys.append((event.xdata, event.ydata))\n            self._draw_polygon()\n        # Reset the polygon if the released key is the 'clear' key.\n        elif event.key == self._state_modifier_keys.get('clear'):\n            event = self._clean_event(event)\n            self._xys = [(event.xdata, event.ydata)]\n            self._selection_completed = False\n            self._remove_box()\n            self.set_visible(True)\n\n    def _draw_polygon(self):\n        \"\"\"Redraw the polygon based on the new vertex positions.\"\"\"\n        xs, ys = zip(*self._xys) if self._xys else ([], [])\n        self._selection_artist.set_data(xs, ys)\n        self._update_box()\n        # Only show one tool handle at the start and end vertex of the polygon\n        # if the polygon is completed or the user is locked on to the start\n        # vertex.\n        if (self._selection_completed\n                or (len(self._xys) > 3\n                    and self._xys[-1] == self._xys[0])):\n            self._polygon_handles.set_data(xs[:-1], ys[:-1])\n        else:\n            self._polygon_handles.set_data(xs, ys)\n        self.update()\n\n    @property\n    def verts(self):\n        \"\"\"The polygon vertices, as a list of ``(x, y)`` pairs.\"\"\"\n        return self._xys[:-1]\n\n    @verts.setter\n    def verts(self, xys):\n        \"\"\"\n        Set the polygon vertices.\n\n        This will remove any pre-existing vertices, creating a complete polygon\n        with the new vertices.\n        \"\"\"\n        self._xys = [*xys, xys[0]]\n        self._selection_completed = True\n        self.set_visible(True)\n        if self._draw_box and self._box is None:\n            self._add_box()\n        self._draw_polygon()\n\n\nclass Lasso(AxesWidget):\n    \"\"\"\n    Selection curve of an arbitrary shape.\n\n    The selected path can be used in conjunction with\n    `~matplotlib.path.Path.contains_point` to select data points from an image.\n\n    Unlike `LassoSelector`, this must be initialized with a starting\n    point *xy*, and the `Lasso` events are destroyed upon release.\n\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n        The parent Axes for the widget.\n    xy : (float, float)\n        Coordinates of the start of the lasso.\n    useblit : bool, default: True\n        Whether to use blitting for faster drawing (if supported by the\n        backend). See the tutorial :doc:`/tutorials/advanced/blitting`\n        for details.\n    callback : callable\n        Whenever the lasso is released, the *callback* function is called and\n        passed the vertices of the selected path.\n    \"\"\"\n\n    def __init__(self, ax, xy, callback=None, useblit=True):\n        super().__init__(ax)\n\n        self.useblit = useblit and self.canvas.supports_blit\n        if self.useblit:\n            self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n\n        x, y = xy\n        self.verts = [(x, y)]\n        self.line = Line2D([x], [y], linestyle='-', color='black', lw=2)\n        self.ax.add_line(self.line)\n        self.callback = callback\n        self.connect_event('button_release_event', self.onrelease)\n        self.connect_event('motion_notify_event', self.onmove)\n\n    def onrelease(self, event):\n        if self.ignore(event):\n            return\n        if self.verts is not None:\n            self.verts.append((event.xdata, event.ydata))\n            if len(self.verts) > 2:\n                self.callback(self.verts)\n            self.ax.lines.remove(self.line)\n        self.verts = None\n        self.disconnect_events()\n\n    def onmove(self, event):\n        if self.ignore(event):\n            return\n        if self.verts is None:\n            return\n        if event.inaxes != self.ax:\n            return\n        if event.button != 1:\n            return\n        self.verts.append((event.xdata, event.ydata))\n\n        self.line.set_data(list(zip(*self.verts)))\n\n        if self.useblit:\n            self.canvas.restore_region(self.background)\n            self.ax.draw_artist(self.line)\n            self.canvas.blit(self.ax.bbox)\n        else:\n            self.canvas.draw_idle()\n"
    }
  ]
}