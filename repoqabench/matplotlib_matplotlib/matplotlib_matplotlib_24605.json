{
  "repo_name": "matplotlib_matplotlib",
  "issue_id": "24605",
  "issue_description": "# [Bug]: Validation not performed for `loc` argument to `legend`\n\n### Bug summary\n\nWhen passing non-str `loc` values to `legend`, validation is not performed. So even for invalid inputs, errors are raised only when we call `show()`\n\n### Code for reproduction\n\n```python\n>>> import matplotlib.pyplot as plt\r\n>>> import matplotlib as mpl\r\n>>> xs, ys = [1,2,3], [2,3,1]\r\n>>> fig, ax = plt.subplots(3)\r\n>>> ax[0].scatter(xs, ys, label='loc-tuple-arg')\r\n<matplotlib.collections.PathCollection object at 0x0000019D4099ED60>\r\n>>> ax[0].legend(loc=(1.1, .5, 1.1, \"abc\"))\r\n<matplotlib.legend.Legend object at 0x0000019D4099EF10>\r\n>>> plt.show()\n```\n\n\n### Actual outcome\n\n```\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\n```\n\n### Expected outcome\n\nErrors should be raised when invalid arguments are passed to `loc`. Similar to what we get when we pass an invalid string value as shown:\r\n```\r\n>>> ax[0].legend(loc=\"abcd\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_axes.py\", line 307, in legend\r\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 454, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 470, in __init__\r\n    loc = _api.check_getitem(self.codes, loc=loc)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\__init__.py\", line 190, in check_getitem\r\n    raise ValueError(\r\nValueError: 'abcd' is not a valid value for loc; supported values are 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'\r\n```\n\n### Additional information\n\n- Do you know why this bug is happening?\r\nhttps://github.com/matplotlib/matplotlib/blob/ab7917a89dc56165d695fa4b90200f2cacafcd59/lib/matplotlib/legend.py#L608-L615\r\n\r\nNo validation is done when setting values for `_loc_real`. We do check strings on line 473, which is why we don't face this issue there.\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\n'TkAgg'\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip",
  "issue_comments": [
    {
      "id": 1336536471,
      "user": "tacaswell",
      "body": "The work here is to :\r\n\r\n - sort out what the validation _should be_ (read the code where the above traceback starts)\r\n - add logic to `Legend.__init__` to validate loc\r\n - add tests\r\n - update docstring to legend (in both `Legend` and `Axes.legend`)\r\n\r\nThis is a good first issue because it should only require understanding a narrow section of the code and no API design (it is already broken for these inputs, we just want it to break _better_)."
    },
    {
      "id": 1337012227,
      "user": "keyvan-dadash",
      "body": "Hi. can i try this?"
    },
    {
      "id": 1337539178,
      "user": "tacaswell",
      "body": "@sod-lol Please do!  We do not really assign issues or require you to get permission before you start working on an issue."
    },
    {
      "id": 1375624122,
      "user": "Gairick52",
      "body": "@tacaswell hello sir can you give me some resources to work on this issue"
    },
    {
      "id": 1375936064,
      "user": "Gairick52",
      "body": "@tacaswell i want to work on this,please assign this issue to me"
    },
    {
      "id": 1375942051,
      "user": "jklymak",
      "body": "@Gairick52 there is already a PR for this...."
    },
    {
      "id": 1377297006,
      "user": "Gairick52",
      "body": "@iofall  Hello sir,i want to work on this issue,please assign this to me"
    },
    {
      "id": 1377632655,
      "user": "iofall",
      "body": "> @iofall Hello sir,i want to work on this issue,please assign this to me\r\n\r\nOnly maintainers can assign people to issues. Also, there is already a PR linked to this issue. You can try finding other issues to work on or provide any inputs if you have to the already linked PR."
    },
    {
      "id": 1380195226,
      "user": "Gairick52",
      "body": "@iofall please share me beginner's  developer's guide"
    },
    {
      "id": 1382102603,
      "user": "iofall",
      "body": "> @iofall please share me beginner's developer's guide\r\n\r\nHere is the link to the contributing guide - https://matplotlib.org/devdocs/devel/contributing.html"
    },
    {
      "id": 1439454437,
      "user": "robrighter",
      "body": "I picked up this ticket, continuing the previous work of @jpjepko (The new PR has him as a co-author).\r\n\r\nI added the new check to allow the numeric mappings to string values. Because words are hard,  the value error message that is raised is a bit awkward. I'm not sure what to call the valid option of a string numeric value in the error message. It is currently omitted in the error message. Let me know if anyone has a suggestion or if I should just leave it like it is."
    },
    {
      "id": 1464012770,
      "user": "adityasingh22",
      "body": "I see this issue is still open. Does the PR https://github.com/matplotlib/matplotlib/pull/25281 not fix this? Can someone help elucidate me on it?"
    },
    {
      "id": 1464076141,
      "user": "rcomer",
      "body": "Hi @adityasingh22, this issue will close when #25281 is merged."
    }
  ],
  "text_context": "# [Bug]: Validation not performed for `loc` argument to `legend`\n\n### Bug summary\n\nWhen passing non-str `loc` values to `legend`, validation is not performed. So even for invalid inputs, errors are raised only when we call `show()`\n\n### Code for reproduction\n\n```python\n>>> import matplotlib.pyplot as plt\r\n>>> import matplotlib as mpl\r\n>>> xs, ys = [1,2,3], [2,3,1]\r\n>>> fig, ax = plt.subplots(3)\r\n>>> ax[0].scatter(xs, ys, label='loc-tuple-arg')\r\n<matplotlib.collections.PathCollection object at 0x0000019D4099ED60>\r\n>>> ax[0].legend(loc=(1.1, .5, 1.1, \"abc\"))\r\n<matplotlib.legend.Legend object at 0x0000019D4099EF10>\r\n>>> plt.show()\n```\n\n\n### Actual outcome\n\n```\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 1892, in __call__\r\n    return self.func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\tkinter\\__init__.py\", line 814, in callit\r\n    func(*args)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 251, in idle_draw\r\n    self.draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_tkagg.py\", line 10, in draw\r\n    super().draw()\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\figure.py\", line 3071, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3107, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 641, in draw\r\n    bbox = self._legend_box.get_window_extent(renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 354, in get_window_extent\r\n    px, py = self.get_offset(w, h, xd, yd, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 291, in get_offset\r\n    return (self._offset(width, height, xdescent, ydescent, renderer)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 617, in _findoffset\r\n    fx, fy = self._loc\r\nValueError: too many values to unpack (expected 2)\r\n```\n\n### Expected outcome\n\nErrors should be raised when invalid arguments are passed to `loc`. Similar to what we get when we pass an invalid string value as shown:\r\n```\r\n>>> ax[0].legend(loc=\"abcd\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\axes\\_axes.py\", line 307, in legend\r\n    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 454, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\legend.py\", line 470, in __init__\r\n    loc = _api.check_getitem(self.codes, loc=loc)\r\n  File \"C:\\Users\\Me\\anaconda3\\envs\\MPL\\lib\\site-packages\\matplotlib\\_api\\__init__.py\", line 190, in check_getitem\r\n    raise ValueError(\r\nValueError: 'abcd' is not a valid value for loc; supported values are 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'\r\n```\n\n### Additional information\n\n- Do you know why this bug is happening?\r\nhttps://github.com/matplotlib/matplotlib/blob/ab7917a89dc56165d695fa4b90200f2cacafcd59/lib/matplotlib/legend.py#L608-L615\r\n\r\nNo validation is done when setting values for `_loc_real`. We do check strings on line 473, which is why we don't face this issue there.\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\n'TkAgg'\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n\nThe work here is to :\r\n\r\n - sort out what the validation _should be_ (read the code where the above traceback starts)\r\n - add logic to `Legend.__init__` to validate loc\r\n - add tests\r\n - update docstring to legend (in both `Legend` and `Axes.legend`)\r\n\r\nThis is a good first issue because it should only require understanding a narrow section of the code and no API design (it is already broken for these inputs, we just want it to break _better_).\n\nHi. can i try this?\n\n@sod-lol Please do!  We do not really assign issues or require you to get permission before you start working on an issue.\n\n@tacaswell hello sir can you give me some resources to work on this issue\n\n@tacaswell i want to work on this,please assign this issue to me\n\n@Gairick52 there is already a PR for this....\n\n@iofall  Hello sir,i want to work on this issue,please assign this to me\n\n> @iofall Hello sir,i want to work on this issue,please assign this to me\r\n\r\nOnly maintainers can assign people to issues. Also, there is already a PR linked to this issue. You can try finding other issues to work on or provide any inputs if you have to the already linked PR.\n\n@iofall please share me beginner's  developer's guide\n\n> @iofall please share me beginner's developer's guide\r\n\r\nHere is the link to the contributing guide - https://matplotlib.org/devdocs/devel/contributing.html\n\nI picked up this ticket, continuing the previous work of @jpjepko (The new PR has him as a co-author).\r\n\r\nI added the new check to allow the numeric mappings to string values. Because words are hard,  the value error message that is raised is a bit awkward. I'm not sure what to call the valid option of a string numeric value in the error message. It is currently omitted in the error message. Let me know if anyone has a suggestion or if I should just leave it like it is.\n\nI see this issue is still open. Does the PR https://github.com/matplotlib/matplotlib/pull/25281 not fix this? Can someone help elucidate me on it?\n\nHi @adityasingh22, this issue will close when #25281 is merged.",
  "pr_link": "https://github.com/matplotlib/matplotlib/pull/25281",
  "code_context": [
    {
      "filename": "lib/matplotlib/legend.py",
      "content": "\"\"\"\nThe legend module defines the Legend class, which is responsible for\ndrawing legends associated with axes and/or figures.\n\n.. important::\n\n    It is unlikely that you would ever create a Legend instance manually.\n    Most users would normally create a legend via the `~.Axes.legend`\n    function. For more details on legends there is also a :doc:`legend guide\n    </tutorials/intermediate/legend_guide>`.\n\nThe `Legend` class is a container of legend handles and legend texts.\n\nThe legend handler map specifies how to create legend handles from artists\n(lines, patches, etc.) in the axes or figures. Default legend handlers are\ndefined in the :mod:`~matplotlib.legend_handler` module. While not all artist\ntypes are covered by the default legend handlers, custom legend handlers can be\ndefined to support arbitrary objects.\n\nSee the :doc:`legend guide </tutorials/intermediate/legend_guide>` for more\ninformation.\n\"\"\"\n\nimport itertools\nimport logging\nimport numbers\nimport time\n\nimport numpy as np\n\nimport matplotlib as mpl\nfrom matplotlib import _api, _docstring, colors, offsetbox\nfrom matplotlib.artist import Artist, allow_rasterization\nfrom matplotlib.cbook import silent_list\nfrom matplotlib.font_manager import FontProperties\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n                                StepPatch)\nfrom matplotlib.collections import (\n    Collection, CircleCollection, LineCollection, PathCollection,\n    PolyCollection, RegularPolyCollection)\nfrom matplotlib.text import Text\nfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\nfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\nfrom matplotlib.offsetbox import (\n    AnchoredOffsetbox, DraggableOffsetBox,\n    HPacker, VPacker,\n    DrawingArea, TextArea,\n)\nfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\nfrom . import legend_handler\n\n\nclass DraggableLegend(DraggableOffsetBox):\n    def __init__(self, legend, use_blit=False, update=\"loc\"):\n        \"\"\"\n        Wrapper around a `.Legend` to support mouse dragging.\n\n        Parameters\n        ----------\n        legend : `.Legend`\n            The `.Legend` instance to wrap.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n            If \"bbox\", update the *bbox_to_anchor* parameter.\n        \"\"\"\n        self.legend = legend\n\n        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n        self._update = update\n\n        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n\n    def finalize_offset(self):\n        if self._update == \"loc\":\n            self._update_loc(self.get_loc_in_canvas())\n        elif self._update == \"bbox\":\n            self._bbox_to_anchor(self.get_loc_in_canvas())\n\n    def _update_loc(self, loc_in_canvas):\n        bbox = self.legend.get_bbox_to_anchor()\n        # if bbox has zero width or height, the transformation is\n        # ill-defined. Fall back to the default bbox_to_anchor.\n        if bbox.width == 0 or bbox.height == 0:\n            self.legend.set_bbox_to_anchor(None)\n            bbox = self.legend.get_bbox_to_anchor()\n        _bbox_transform = BboxTransformFrom(bbox)\n        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n\n    def _update_bbox_to_anchor(self, loc_in_canvas):\n        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n        self.legend.set_bbox_to_anchor(loc_in_bbox)\n\n\n_legend_kw_doc_base = \"\"\"\nbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n    Box that is used to position the legend in conjunction with *loc*.\n    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n    placement of the legend.\n\n    Bbox coordinates are interpreted in the coordinate system given by\n    *bbox_transform*, with the default transform\n    Axes or Figure coordinates, depending on which ``legend`` is called.\n\n    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n    ``(x, y, width, height)`` that the legend is placed in.\n    To put the legend in the best location in the bottom right\n    quadrant of the axes (or figure)::\n\n        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n\n    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n    x, y.  For example, to put the legend's upper right-hand corner in the\n    center of the axes (or figure) the following keywords can be used::\n\n        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n\nncols : int, default: 1\n    The number of columns that the legend has.\n\n    For backward compatibility, the spelling *ncol* is also supported\n    but it is discouraged. If both are given, *ncols* takes precedence.\n\nprop : None or `matplotlib.font_manager.FontProperties` or dict\n    The font properties of the legend. If None (default), the current\n    :data:`matplotlib.rcParams` will be used.\n\nfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n'x-large', 'xx-large'}\n    The font size of the legend. If the value is numeric the size will be the\n    absolute font size in points. String values are relative to the current\n    default font size. This argument is only used if *prop* is not specified.\n\nlabelcolor : str or list, default: :rc:`legend.labelcolor`\n    The color of the text in the legend. Either a valid color string\n    (for example, 'red'), or a list of color strings. The labelcolor can\n    also be made to match the color of the line or marker using 'linecolor',\n    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n\n    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n    use :rc:`text.color`.\n\nnumpoints : int, default: :rc:`legend.numpoints`\n    The number of marker points in the legend when creating a legend\n    entry for a `.Line2D` (line).\n\nscatterpoints : int, default: :rc:`legend.scatterpoints`\n    The number of marker points in the legend when creating\n    a legend entry for a `.PathCollection` (scatter plot).\n\nscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n    The vertical offset (relative to the font size) for the markers\n    created for a scatter plot legend entry. 0.0 is at the base the\n    legend text, and 1.0 is at the top. To draw all markers at the\n    same height, set to ``[0.5]``.\n\nmarkerscale : float, default: :rc:`legend.markerscale`\n    The relative size of legend markers compared with the originally\n    drawn ones.\n\nmarkerfirst : bool, default: True\n    If *True*, legend marker is placed to the left of the legend label.\n    If *False*, legend marker is placed to the right of the legend label.\n\nreverse : bool, default: False\n    If *True*, the legend labels are displayed in reverse order from the input.\n    If *False*, the legend labels are displayed in the same order as the input.\n\n    .. versionadded:: 3.7\n\nframeon : bool, default: :rc:`legend.frameon`\n    Whether the legend should be drawn on a patch (frame).\n\nfancybox : bool, default: :rc:`legend.fancybox`\n    Whether round edges should be enabled around the `.FancyBboxPatch` which\n    makes up the legend's background.\n\nshadow : bool, default: :rc:`legend.shadow`\n    Whether to draw a shadow behind the legend.\n\nframealpha : float, default: :rc:`legend.framealpha`\n    The alpha transparency of the legend's background.\n    If *shadow* is activated and *framealpha* is ``None``, the default value is\n    ignored.\n\nfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n    The legend's background color.\n    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n\nedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n    The legend's background patch edge color.\n    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n\nmode : {\"expand\", None}\n    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n    expanded to fill the axes area (or *bbox_to_anchor* if defines\n    the legend's size).\n\nbbox_transform : None or `matplotlib.transforms.Transform`\n    The transform for the bounding box (*bbox_to_anchor*). For a value\n    of ``None`` (default) the Axes'\n    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n\ntitle : str or None\n    The legend's title. Default is no title (``None``).\n\ntitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n    The font properties of the legend's title. If None (default), the\n    *title_fontsize* argument will be used if present; if *title_fontsize* is\n    also None, the current :rc:`legend.title_fontsize` will be used.\n\ntitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n    The font size of the legend's title.\n    Note: This cannot be combined with *title_fontproperties*. If you want\n    to set the fontsize alongside other font properties, use the *size*\n    parameter in *title_fontproperties*.\n\nalignment : {'center', 'left', 'right'}, default: 'center'\n    The alignment of the legend title and the box of entries. The entries\n    are aligned as a single block, so that markers always lined up.\n\nborderpad : float, default: :rc:`legend.borderpad`\n    The fractional whitespace inside the legend border, in font-size units.\n\nlabelspacing : float, default: :rc:`legend.labelspacing`\n    The vertical space between the legend entries, in font-size units.\n\nhandlelength : float, default: :rc:`legend.handlelength`\n    The length of the legend handles, in font-size units.\n\nhandleheight : float, default: :rc:`legend.handleheight`\n    The height of the legend handles, in font-size units.\n\nhandletextpad : float, default: :rc:`legend.handletextpad`\n    The pad between the legend handle and text, in font-size units.\n\nborderaxespad : float, default: :rc:`legend.borderaxespad`\n    The pad between the axes and legend border, in font-size units.\n\ncolumnspacing : float, default: :rc:`legend.columnspacing`\n    The spacing between columns, in font-size units.\n\nhandler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\ndraggable : bool, default: False\n    Whether the legend can be dragged with the mouse.\n\"\"\"\n\n_loc_doc_base = \"\"\"\nloc : str or pair of floats, {0}\n    The location of the legend.\n\n    The strings\n    ``'upper left', 'upper right', 'lower left', 'lower right'``\n    place the legend at the corresponding corner of the axes/figure.\n\n    The strings\n    ``'upper center', 'lower center', 'center left', 'center right'``\n    place the legend at the center of the corresponding edge of the\n    axes/figure.\n\n    The string ``'center'`` places the legend at the center of the axes/figure.\n\n    The string ``'best'`` places the legend at the location, among the nine\n    locations defined so far, with the minimum overlap with other drawn\n    artists.  This option can be quite slow for plots with large amounts of\n    data; your plotting speed may benefit from providing a specific location.\n\n    The location can also be a 2-tuple giving the coordinates of the lower-left\n    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n    will be ignored).\n\n    For back-compatibility, ``'center right'`` (but no other location) can also\n    be spelled ``'right'``, and each \"string\" locations can also be given as a\n    numeric value:\n\n        ===============   =============\n        Location String   Location Code\n        ===============   =============\n        'best'            0\n        'upper right'     1\n        'upper left'      2\n        'lower left'      3\n        'lower right'     4\n        'right'           5\n        'center left'     6\n        'center right'    7\n        'lower center'    8\n        'upper center'    9\n        'center'          10\n        ===============   =============\n    {1}\"\"\"\n\n_legend_kw_axes_st = (_loc_doc_base.format(\"default: :rc:`legend.loc`\", '') +\n                      _legend_kw_doc_base)\n_docstring.interpd.update(_legend_kw_axes=_legend_kw_axes_st)\n\n_outside_doc = \"\"\"\n    If a figure is using the constrained layout manager, the string codes\n    of the *loc* keyword argument can get better layout behaviour using the\n    prefix 'outside'. There is ambiguity at the corners, so 'outside\n    upper right' will make space for the legend above the rest of the\n    axes in the layout, and 'outside right upper' will make space on the\n    right side of the layout.  In addition to the values of *loc*\n    listed above, we have 'outside right upper', 'outside right lower',\n    'outside left upper', and 'outside left lower'.  See\n    :doc:`/tutorials/intermediate/legend_guide` for more details.\n\"\"\"\n\n_legend_kw_figure_st = (_loc_doc_base.format(\"default: 'upper right'\",\n                                             _outside_doc) +\n                        _legend_kw_doc_base)\n_docstring.interpd.update(_legend_kw_figure=_legend_kw_figure_st)\n\n_legend_kw_both_st = (\n    _loc_doc_base.format(\"default: 'best' for axes, 'upper right' for figures\",\n                         _outside_doc) +\n    _legend_kw_doc_base)\n_docstring.interpd.update(_legend_kw_doc=_legend_kw_both_st)\n\n\nclass Legend(Artist):\n    \"\"\"\n    Place a legend on the axes at location loc.\n    \"\"\"\n\n    # 'best' is only implemented for axes legends\n    codes = {'best': 0, **AnchoredOffsetbox.codes}\n    zorder = 5\n\n    def __str__(self):\n        return \"Legend\"\n\n    @_api.make_keyword_only(\"3.6\", \"loc\")\n    @_docstring.dedent_interpd\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        reverse=False,       # reverse ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1,  # synonym for ncols (backward compatibility)\n        draggable=False  # whether the legend can be dragged with the mouse\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        parent : `~matplotlib.axes.Axes` or `.Figure`\n            The artist that contains the legend.\n\n        handles : list of `.Artist`\n            A list of Artists (lines, patches) to be added to the legend.\n\n        labels : list of str\n            A list of labels to show next to the artists. The length of handles\n            and labels should be the same. If they are not, they are truncated\n            to the length of the shorter list.\n\n        Other Parameters\n        ----------------\n        %(_legend_kw_doc)s\n\n        Attributes\n        ----------\n        legend_handles\n            List of `.Artist` objects added as legend entries.\n\n            .. versionadded:: 3.7\n\n        Notes\n        -----\n        Users can specify any arbitrary location for the legend using the\n        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n        See `set_bbox_to_anchor` for more detail.\n\n        The legend location can be specified by setting *loc* with a tuple of\n        2 floats, which is interpreted as the lower-left corner of the legend\n        in the normalized axes coordinate.\n        \"\"\"\n        # local import only to avoid circularity\n        from matplotlib.axes import Axes\n        from matplotlib.figure import FigureBase\n\n        super().__init__()\n\n        if prop is None:\n            if fontsize is not None:\n                self.prop = FontProperties(size=fontsize)\n            else:\n                self.prop = FontProperties(\n                    size=mpl.rcParams[\"legend.fontsize\"])\n        else:\n            self.prop = FontProperties._from_any(prop)\n            if isinstance(prop, dict) and \"size\" not in prop:\n                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n\n        self._fontsize = self.prop.get_size_in_points()\n\n        self.texts = []\n        self.legend_handles = []\n        self._legend_title_box = None\n\n        #: A dictionary with the extra handler mappings for this Legend\n        #: instance.\n        self._custom_handler_map = handler_map\n\n        def val_or_rc(val, rc_name):\n            return val if val is not None else mpl.rcParams[rc_name]\n\n        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n        self.shadow = val_or_rc(shadow, 'legend.shadow')\n        # trim handles and labels if illegal label...\n        _lab, _hand = [], []\n        for label, handle in zip(labels, handles):\n            if isinstance(label, str) and label.startswith('_'):\n                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n                                   \"with '_'. It is thus excluded from the \"\n                                   \"legend.\")\n            else:\n                _lab.append(label)\n                _hand.append(handle)\n        labels, handles = _lab, _hand\n\n        if reverse:\n            labels.reverse()\n            handles.reverse()\n\n        if len(handles) < 2:\n            ncols = 1\n        self._ncols = ncols if ncols != 1 else ncol\n\n        if self.numpoints <= 0:\n            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n\n        # introduce y-offset for handles of the scatter plot\n        if scatteryoffsets is None:\n            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n        else:\n            self._scatteryoffsets = np.asarray(scatteryoffsets)\n        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n                                        reps)[:self.scatterpoints]\n\n        # _legend_box is a VPacker instance that contains all\n        # legend items and will be initialized from _init_legend_box()\n        # method.\n        self._legend_box = None\n\n        if isinstance(parent, Axes):\n            self.isaxes = True\n            self.axes = parent\n            self.set_figure(parent.figure)\n        elif isinstance(parent, FigureBase):\n            self.isaxes = False\n            self.set_figure(parent)\n        else:\n            raise TypeError(\n                \"Legend needs either Axes or FigureBase as parent\"\n            )\n        self.parent = parent\n\n        loc0 = loc\n        self._loc_used_default = loc is None\n        if loc is None:\n            loc = mpl.rcParams[\"legend.loc\"]\n            if not self.isaxes and loc in [0, 'best']:\n                loc = 'upper right'\n\n        type_err_message = (\"loc must be string, coordinate tuple, or\"\n                            f\" an integer 0-10, not {loc!r}\")\n\n        # handle outside legends:\n        self._outside_loc = None\n        if isinstance(loc, str):\n            if loc.split()[0] == 'outside':\n                # strip outside:\n                loc = loc.split('outside ')[1]\n                # strip \"center\" at the beginning\n                self._outside_loc = loc.replace('center ', '')\n                # strip first\n                self._outside_loc = self._outside_loc.split()[0]\n                locs = loc.split()\n                if len(locs) > 1 and locs[0] in ('right', 'left'):\n                    # locs doesn't accept \"left upper\", etc, so swap\n                    if locs[0] != 'center':\n                        locs = locs[::-1]\n                    loc = locs[0] + ' ' + locs[1]\n            # check that loc is in acceptable strings\n            loc = _api.check_getitem(self.codes, loc=loc)\n        elif np.iterable(loc):\n            # coerce iterable into tuple\n            loc = tuple(loc)\n            # validate the tuple represents Real coordinates\n            if len(loc) != 2 or not all(isinstance(e, numbers.Real) for e in loc):\n                raise ValueError(type_err_message)\n        elif isinstance(loc, int):\n            # validate the integer represents a string numeric value\n            if loc < 0 or loc > 10:\n                raise ValueError(type_err_message)\n        else:\n            # all other cases are invalid values of loc\n            raise ValueError(type_err_message)\n\n        if self.isaxes and self._outside_loc:\n            raise ValueError(\n                f\"'outside' option for loc='{loc0}' keyword argument only \"\n                \"works for figure legends\")\n\n        if not self.isaxes and loc == 0:\n            raise ValueError(\n                \"Automatic legend placement (loc='best') not implemented for \"\n                \"figure legend\")\n\n        self._mode = mode\n        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n\n        # We use FancyBboxPatch to draw a legend frame. The location\n        # and size of the box will be updated during the drawing time.\n\n        if facecolor is None:\n            facecolor = mpl.rcParams[\"legend.facecolor\"]\n        if facecolor == 'inherit':\n            facecolor = mpl.rcParams[\"axes.facecolor\"]\n\n        if edgecolor is None:\n            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n        if edgecolor == 'inherit':\n            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n\n        if fancybox is None:\n            fancybox = mpl.rcParams[\"legend.fancybox\"]\n\n        self.legendPatch = FancyBboxPatch(\n            xy=(0, 0), width=1, height=1,\n            facecolor=facecolor, edgecolor=edgecolor,\n            # If shadow is used, default to alpha=1 (#8943).\n            alpha=(framealpha if framealpha is not None\n                   else 1 if shadow\n                   else mpl.rcParams[\"legend.framealpha\"]),\n            # The width and height of the legendPatch will be set (in draw())\n            # to the length that includes the padding. Thus we set pad=0 here.\n            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n                      else \"square,pad=0\"),\n            mutation_scale=self._fontsize,\n            snap=True,\n            visible=(frameon if frameon is not None\n                     else mpl.rcParams[\"legend.frameon\"])\n        )\n        self._set_artist_props(self.legendPatch)\n\n        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n        self._alignment = alignment\n\n        # init with null renderer\n        self._init_legend_box(handles, labels, markerfirst)\n\n        tmp = self._loc_used_default\n        self._set_loc(loc)\n        self._loc_used_default = tmp  # ignore changes done by _set_loc\n\n        # figure out title font properties:\n        if title_fontsize is not None and title_fontproperties is not None:\n            raise ValueError(\n                \"title_fontsize and title_fontproperties can't be specified \"\n                \"at the same time. Only use one of them. \")\n        title_prop_fp = FontProperties._from_any(title_fontproperties)\n        if isinstance(title_fontproperties, dict):\n            if \"size\" not in title_fontproperties:\n                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n                title_prop_fp.set_size(title_fontsize)\n        elif title_fontsize is not None:\n            title_prop_fp.set_size(title_fontsize)\n        elif not isinstance(title_fontproperties, FontProperties):\n            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n            title_prop_fp.set_size(title_fontsize)\n\n        self.set_title(title, prop=title_prop_fp)\n\n        self._draggable = None\n        self.set_draggable(state=draggable)\n\n        # set the text color\n\n        color_getters = {  # getter function depends on line or patch\n            'linecolor':       ['get_color',           'get_facecolor'],\n            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n        }\n        if labelcolor is None:\n            if mpl.rcParams['legend.labelcolor'] is not None:\n                labelcolor = mpl.rcParams['legend.labelcolor']\n            else:\n                labelcolor = mpl.rcParams['text.color']\n        if isinstance(labelcolor, str) and labelcolor in color_getters:\n            getter_names = color_getters[labelcolor]\n            for handle, text in zip(self.legend_handles, self.texts):\n                try:\n                    if handle.get_array() is not None:\n                        continue\n                except AttributeError:\n                    pass\n                for getter_name in getter_names:\n                    try:\n                        color = getattr(handle, getter_name)()\n                        if isinstance(color, np.ndarray):\n                            if (\n                                    color.shape[0] == 1\n                                    or np.isclose(color, color[0]).all()\n                            ):\n                                text.set_color(color[0])\n                            else:\n                                pass\n                        else:\n                            text.set_color(color)\n                        break\n                    except AttributeError:\n                        pass\n        elif isinstance(labelcolor, str) and labelcolor == 'none':\n            for text in self.texts:\n                text.set_color(labelcolor)\n        elif np.iterable(labelcolor):\n            for text, color in zip(self.texts,\n                                   itertools.cycle(\n                                       colors.to_rgba_array(labelcolor))):\n                text.set_color(color)\n        else:\n            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n\n    legendHandles = _api.deprecated('3.7', alternative=\"legend_handles\")(\n        property(lambda self: self.legend_handles))\n\n    def _set_artist_props(self, a):\n        \"\"\"\n        Set the boilerplate props for artists added to axes.\n        \"\"\"\n        a.set_figure(self.figure)\n        if self.isaxes:\n            # a.set_axes(self.axes)\n            a.axes = self.axes\n\n        a.set_transform(self.get_transform())\n\n    def _set_loc(self, loc):\n        # find_offset function will be provided to _legend_box and\n        # _legend_box will draw itself at the location of the return\n        # value of the find_offset.\n        self._loc_used_default = False\n        self._loc_real = loc\n        self.stale = True\n        self._legend_box.set_offset(self._findoffset)\n\n    def set_ncols(self, ncols):\n        \"\"\"Set the number of columns.\"\"\"\n        self._ncols = ncols\n\n    def _get_loc(self):\n        return self._loc_real\n\n    _loc = property(_get_loc, _set_loc)\n\n    def _findoffset(self, width, height, xdescent, ydescent, renderer):\n        \"\"\"Helper function to locate the legend.\"\"\"\n\n        if self._loc == 0:  # \"best\".\n            x, y = self._find_best_position(width, height, renderer)\n        elif self._loc in Legend.codes.values():  # Fixed location.\n            bbox = Bbox.from_bounds(0, 0, width, height)\n            x, y = self._get_anchored_bbox(self._loc, bbox,\n                                           self.get_bbox_to_anchor(),\n                                           renderer)\n        else:  # Axes or figure coordinates.\n            fx, fy = self._loc\n            bbox = self.get_bbox_to_anchor()\n            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy\n\n        return x + xdescent, y + ydescent\n\n    @allow_rasterization\n    def draw(self, renderer):\n        # docstring inherited\n        if not self.get_visible():\n            return\n\n        renderer.open_group('legend', gid=self.get_gid())\n\n        fontsize = renderer.points_to_pixels(self._fontsize)\n\n        # if mode == fill, set the width of the legend_box to the\n        # width of the parent (minus pads)\n        if self._mode in [\"expand\"]:\n            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n\n        # update the location and size of the legend. This needs to\n        # be done in any case to clip the figure right.\n        bbox = self._legend_box.get_window_extent(renderer)\n        self.legendPatch.set_bounds(bbox.bounds)\n        self.legendPatch.set_mutation_scale(fontsize)\n\n        if self.shadow:\n            Shadow(self.legendPatch, 2, -2).draw(renderer)\n\n        self.legendPatch.draw(renderer)\n        self._legend_box.draw(renderer)\n\n        renderer.close_group('legend')\n        self.stale = False\n\n    # _default_handler_map defines the default mapping between plot\n    # elements and the legend handlers.\n\n    _default_handler_map = {\n        StemContainer: legend_handler.HandlerStem(),\n        ErrorbarContainer: legend_handler.HandlerErrorbar(),\n        Line2D: legend_handler.HandlerLine2D(),\n        Patch: legend_handler.HandlerPatch(),\n        StepPatch: legend_handler.HandlerStepPatch(),\n        LineCollection: legend_handler.HandlerLineCollection(),\n        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),\n        CircleCollection: legend_handler.HandlerCircleCollection(),\n        BarContainer: legend_handler.HandlerPatch(\n            update_func=legend_handler.update_from_first_child),\n        tuple: legend_handler.HandlerTuple(),\n        PathCollection: legend_handler.HandlerPathCollection(),\n        PolyCollection: legend_handler.HandlerPolyCollection()\n        }\n\n    # (get|set|update)_default_handler_maps are public interfaces to\n    # modify the default handler map.\n\n    @classmethod\n    def get_default_handler_map(cls):\n        \"\"\"Return the global default handler map, shared by all legends.\"\"\"\n        return cls._default_handler_map\n\n    @classmethod\n    def set_default_handler_map(cls, handler_map):\n        \"\"\"Set the global default handler map, shared by all legends.\"\"\"\n        cls._default_handler_map = handler_map\n\n    @classmethod\n    def update_default_handler_map(cls, handler_map):\n        \"\"\"Update the global default handler map, shared by all legends.\"\"\"\n        cls._default_handler_map.update(handler_map)\n\n    def get_legend_handler_map(self):\n        \"\"\"Return this legend instance's handler map.\"\"\"\n        default_handler_map = self.get_default_handler_map()\n        return ({**default_handler_map, **self._custom_handler_map}\n                if self._custom_handler_map else default_handler_map)\n\n    @staticmethod\n    def get_legend_handler(legend_handler_map, orig_handle):\n        \"\"\"\n        Return a legend handler from *legend_handler_map* that\n        corresponds to *orig_handler*.\n\n        *legend_handler_map* should be a dictionary object (that is\n        returned by the get_legend_handler_map method).\n\n        It first checks if the *orig_handle* itself is a key in the\n        *legend_handler_map* and return the associated value.\n        Otherwise, it checks for each of the classes in its\n        method-resolution-order. If no matching key is found, it\n        returns ``None``.\n        \"\"\"\n        try:\n            return legend_handler_map[orig_handle]\n        except (TypeError, KeyError):  # TypeError if unhashable.\n            pass\n        for handle_type in type(orig_handle).mro():\n            try:\n                return legend_handler_map[handle_type]\n            except KeyError:\n                pass\n        return None\n\n    def _init_legend_box(self, handles, labels, markerfirst=True):\n        \"\"\"\n        Initialize the legend_box. The legend_box is an instance of\n        the OffsetBox, which is packed with legend handles and\n        texts. Once packed, their location is calculated during the\n        drawing time.\n        \"\"\"\n\n        fontsize = self._fontsize\n\n        # legend_box is a HPacker, horizontally packed with columns.\n        # Each column is a VPacker, vertically packed with legend items.\n        # Each legend item is a HPacker packed with:\n        # - handlebox: a DrawingArea which contains the legend handle.\n        # - labelbox: a TextArea which contains the legend text.\n\n        text_list = []  # the list of text instances\n        handle_list = []  # the list of handle instances\n        handles_and_labels = []\n\n        # The approximate height and descent of text. These values are\n        # only used for plotting the legend handle.\n        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.\n        height = fontsize * self.handleheight - descent\n        # each handle needs to be drawn inside a box of (x, y, w, h) =\n        # (0, -descent, width, height).  And their coordinates should\n        # be given in the display coordinates.\n\n        # The transformation of each handle will be automatically set\n        # to self.get_transform(). If the artist does not use its\n        # default transform (e.g., Collections), you need to\n        # manually set their transform to the self.get_transform().\n        legend_handler_map = self.get_legend_handler_map()\n\n        for orig_handle, label in zip(handles, labels):\n            handler = self.get_legend_handler(legend_handler_map, orig_handle)\n            if handler is None:\n                _api.warn_external(\n                             \"Legend does not support handles for \"\n                             f\"{type(orig_handle).__name__} \"\n                             \"instances.\\nA proxy artist may be used \"\n                             \"instead.\\nSee: https://matplotlib.org/\"\n                             \"stable/tutorials/intermediate/legend_guide.html\"\n                             \"#controlling-the-legend-entries\")\n                # No handle for this artist, so we just defer to None.\n                handle_list.append(None)\n            else:\n                textbox = TextArea(label, multilinebaseline=True,\n                                   textprops=dict(\n                                       verticalalignment='baseline',\n                                       horizontalalignment='left',\n                                       fontproperties=self.prop))\n                handlebox = DrawingArea(width=self.handlelength * fontsize,\n                                        height=height,\n                                        xdescent=0., ydescent=descent)\n\n                text_list.append(textbox._text)\n                # Create the artist for the legend which represents the\n                # original artist/handle.\n                handle_list.append(handler.legend_artist(self, orig_handle,\n                                                         fontsize, handlebox))\n                handles_and_labels.append((handlebox, textbox))\n\n        columnbox = []\n        # array_split splits n handles_and_labels into ncols columns, with the\n        # first n%ncols columns having an extra entry.  filter(len, ...)\n        # handles the case where n < ncols: the last ncols-n columns are empty\n        # and get filtered out.\n        for handles_and_labels_column in filter(\n                len, np.array_split(handles_and_labels, self._ncols)):\n            # pack handlebox and labelbox into itembox\n            itemboxes = [HPacker(pad=0,\n                                 sep=self.handletextpad * fontsize,\n                                 children=[h, t] if markerfirst else [t, h],\n                                 align=\"baseline\")\n                         for h, t in handles_and_labels_column]\n            # pack columnbox\n            alignment = \"baseline\" if markerfirst else \"right\"\n            columnbox.append(VPacker(pad=0,\n                                     sep=self.labelspacing * fontsize,\n                                     align=alignment,\n                                     children=itemboxes))\n\n        mode = \"expand\" if self._mode == \"expand\" else \"fixed\"\n        sep = self.columnspacing * fontsize\n        self._legend_handle_box = HPacker(pad=0,\n                                          sep=sep, align=\"baseline\",\n                                          mode=mode,\n                                          children=columnbox)\n        self._legend_title_box = TextArea(\"\")\n        self._legend_box = VPacker(pad=self.borderpad * fontsize,\n                                   sep=self.labelspacing * fontsize,\n                                   align=self._alignment,\n                                   children=[self._legend_title_box,\n                                             self._legend_handle_box])\n        self._legend_box.set_figure(self.figure)\n        self._legend_box.axes = self.axes\n        self.texts = text_list\n        self.legend_handles = handle_list\n\n    def _auto_legend_data(self):\n        \"\"\"\n        Return display coordinates for hit testing for \"best\" positioning.\n\n        Returns\n        -------\n        bboxes\n            List of bounding boxes of all patches.\n        lines\n            List of `.Path` corresponding to each line.\n        offsets\n            List of (x, y) offsets of all collection.\n        \"\"\"\n        assert self.isaxes  # always holds, as this is only called internally\n        bboxes = []\n        lines = []\n        offsets = []\n        for artist in self.parent._children:\n            if isinstance(artist, Line2D):\n                lines.append(\n                    artist.get_transform().transform_path(artist.get_path()))\n            elif isinstance(artist, Rectangle):\n                bboxes.append(\n                    artist.get_bbox().transformed(artist.get_data_transform()))\n            elif isinstance(artist, Patch):\n                lines.append(\n                    artist.get_transform().transform_path(artist.get_path()))\n            elif isinstance(artist, Collection):\n                transform, transOffset, hoffsets, _ = artist._prepare_points()\n                if len(hoffsets):\n                    for offset in transOffset.transform(hoffsets):\n                        offsets.append(offset)\n\n        return bboxes, lines, offsets\n\n    def get_children(self):\n        # docstring inherited\n        return [self._legend_box, self.get_frame()]\n\n    def get_frame(self):\n        \"\"\"Return the `~.patches.Rectangle` used to frame the legend.\"\"\"\n        return self.legendPatch\n\n    def get_lines(self):\n        r\"\"\"Return the list of `~.lines.Line2D`\\s in the legend.\"\"\"\n        return [h for h in self.legend_handles if isinstance(h, Line2D)]\n\n    def get_patches(self):\n        r\"\"\"Return the list of `~.patches.Patch`\\s in the legend.\"\"\"\n        return silent_list('Patch',\n                           [h for h in self.legend_handles\n                            if isinstance(h, Patch)])\n\n    def get_texts(self):\n        r\"\"\"Return the list of `~.text.Text`\\s in the legend.\"\"\"\n        return silent_list('Text', self.texts)\n\n    def set_alignment(self, alignment):\n        \"\"\"\n        Set the alignment of the legend title and the box of entries.\n\n        The entries are aligned as a single block, so that markers always\n        lined up.\n\n        Parameters\n        ----------\n        alignment : {'center', 'left', 'right'}.\n\n        \"\"\"\n        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n        self._alignment = alignment\n        self._legend_box.align = alignment\n\n    def get_alignment(self):\n        \"\"\"Get the alignment value of the legend box\"\"\"\n        return self._legend_box.align\n\n    def set_title(self, title, prop=None):\n        \"\"\"\n        Set legend title and title style.\n\n        Parameters\n        ----------\n        title : str\n            The legend title.\n\n        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`\n            The font properties of the legend title.\n            If a `str`, it is interpreted as a fontconfig pattern parsed by\n            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the\n            absolute path to a font file.\n\n        \"\"\"\n        self._legend_title_box._text.set_text(title)\n        if title:\n            self._legend_title_box._text.set_visible(True)\n            self._legend_title_box.set_visible(True)\n        else:\n            self._legend_title_box._text.set_visible(False)\n            self._legend_title_box.set_visible(False)\n\n        if prop is not None:\n            self._legend_title_box._text.set_fontproperties(prop)\n\n        self.stale = True\n\n    def get_title(self):\n        \"\"\"Return the `.Text` instance for the legend title.\"\"\"\n        return self._legend_title_box._text\n\n    def get_window_extent(self, renderer=None):\n        # docstring inherited\n        if renderer is None:\n            renderer = self.figure._get_renderer()\n        return self._legend_box.get_window_extent(renderer=renderer)\n\n    def get_tightbbox(self, renderer=None):\n        # docstring inherited\n        return self._legend_box.get_window_extent(renderer)\n\n    def get_frame_on(self):\n        \"\"\"Get whether the legend box patch is drawn.\"\"\"\n        return self.legendPatch.get_visible()\n\n    def set_frame_on(self, b):\n        \"\"\"\n        Set whether the legend box patch is drawn.\n\n        Parameters\n        ----------\n        b : bool\n        \"\"\"\n        self.legendPatch.set_visible(b)\n        self.stale = True\n\n    draw_frame = set_frame_on  # Backcompat alias.\n\n    def get_bbox_to_anchor(self):\n        \"\"\"Return the bbox that the legend will be anchored to.\"\"\"\n        if self._bbox_to_anchor is None:\n            return self.parent.bbox\n        else:\n            return self._bbox_to_anchor\n\n    def set_bbox_to_anchor(self, bbox, transform=None):\n        \"\"\"\n        Set the bbox that the legend will be anchored to.\n\n        Parameters\n        ----------\n        bbox : `~matplotlib.transforms.BboxBase` or tuple\n            The bounding box can be specified in the following ways:\n\n            - A `.BboxBase` instance\n            - A tuple of ``(left, bottom, width, height)`` in the given\n              transform (normalized axes coordinate if None)\n            - A tuple of ``(left, bottom)`` where the width and height will be\n              assumed to be zero.\n            - *None*, to remove the bbox anchoring, and use the parent bbox.\n\n        transform : `~matplotlib.transforms.Transform`, optional\n            A transform to apply to the bounding box. If not specified, this\n            will use a transform to the bounding box of the parent.\n        \"\"\"\n        if bbox is None:\n            self._bbox_to_anchor = None\n            return\n        elif isinstance(bbox, BboxBase):\n            self._bbox_to_anchor = bbox\n        else:\n            try:\n                l = len(bbox)\n            except TypeError as err:\n                raise ValueError(f\"Invalid bbox: {bbox}\") from err\n\n            if l == 2:\n                bbox = [bbox[0], bbox[1], 0, 0]\n\n            self._bbox_to_anchor = Bbox.from_bounds(*bbox)\n\n        if transform is None:\n            transform = BboxTransformTo(self.parent.bbox)\n\n        self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,\n                                               transform)\n        self.stale = True\n\n    def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):\n        \"\"\"\n        Place the *bbox* inside the *parentbbox* according to a given\n        location code. Return the (x, y) coordinate of the bbox.\n\n        Parameters\n        ----------\n        loc : int\n            A location code in range(1, 11). This corresponds to the possible\n            values for ``self._loc``, excluding \"best\".\n        bbox : `~matplotlib.transforms.Bbox`\n            bbox to be placed, in display coordinates.\n        parentbbox : `~matplotlib.transforms.Bbox`\n            A parent box which will contain the bbox, in display coordinates.\n        \"\"\"\n        return offsetbox._get_anchored_bbox(\n            loc, bbox, parentbbox,\n            self.borderaxespad * renderer.points_to_pixels(self._fontsize))\n\n    def _find_best_position(self, width, height, renderer, consider=None):\n        \"\"\"\n        Determine the best location to place the legend.\n\n        *consider* is a list of ``(x, y)`` pairs to consider as a potential\n        lower-left corner of the legend. All are display coords.\n        \"\"\"\n        assert self.isaxes  # always holds, as this is only called internally\n\n        start_time = time.perf_counter()\n\n        bboxes, lines, offsets = self._auto_legend_data()\n\n        bbox = Bbox.from_bounds(0, 0, width, height)\n        if consider is None:\n            consider = [self._get_anchored_bbox(x, bbox,\n                                                self.get_bbox_to_anchor(),\n                                                renderer)\n                        for x in range(1, len(self.codes))]\n\n        candidates = []\n        for idx, (l, b) in enumerate(consider):\n            legendBox = Bbox.from_bounds(l, b, width, height)\n            badness = 0\n            # XXX TODO: If markers are present, it would be good to take them\n            # into account when checking vertex overlaps in the next line.\n            badness = (sum(legendBox.count_contains(line.vertices)\n                           for line in lines)\n                       + legendBox.count_contains(offsets)\n                       + legendBox.count_overlaps(bboxes)\n                       + sum(line.intersects_bbox(legendBox, filled=False)\n                             for line in lines))\n            if badness == 0:\n                return l, b\n            # Include the index to favor lower codes in case of a tie.\n            candidates.append((badness, idx, (l, b)))\n\n        _, _, (l, b) = min(candidates)\n\n        if self._loc_used_default and time.perf_counter() - start_time > 1:\n            _api.warn_external(\n                'Creating legend with loc=\"best\" can be slow with large '\n                'amounts of data.')\n\n        return l, b\n\n    def contains(self, event):\n        inside, info = self._default_contains(event)\n        if inside is not None:\n            return inside, info\n        return self.legendPatch.contains(event)\n\n    def set_draggable(self, state, use_blit=False, update='loc'):\n        \"\"\"\n        Enable or disable mouse dragging support of the legend.\n\n        Parameters\n        ----------\n        state : bool\n            Whether mouse dragging is enabled.\n        use_blit : bool, optional\n            Use blitting for faster image composition. For details see\n            :ref:`func-animation`.\n        update : {'loc', 'bbox'}, optional\n            The legend parameter to be changed when dragged:\n\n            - 'loc': update the *loc* parameter of the legend\n            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n\n        Returns\n        -------\n        `.DraggableLegend` or *None*\n            If *state* is ``True`` this returns the `.DraggableLegend` helper\n            instance. Otherwise this returns *None*.\n        \"\"\"\n        if state:\n            if self._draggable is None:\n                self._draggable = DraggableLegend(self,\n                                                  use_blit,\n                                                  update=update)\n        else:\n            if self._draggable is not None:\n                self._draggable.disconnect()\n            self._draggable = None\n        return self._draggable\n\n    def get_draggable(self):\n        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n        return self._draggable is not None\n\n\n# Helper functions to parse legend arguments for both `figure.legend` and\n# `axes.legend`:\ndef _get_legend_handles(axs, legend_handler_map=None):\n    \"\"\"Yield artists that can be used as handles in a legend.\"\"\"\n    handles_original = []\n    for ax in axs:\n        handles_original += [\n            *(a for a in ax._children\n              if isinstance(a, (Line2D, Patch, Collection, Text))),\n            *ax.containers]\n        # support parasite axes:\n        if hasattr(ax, 'parasites'):\n            for axx in ax.parasites:\n                handles_original += [\n                    *(a for a in axx._children\n                      if isinstance(a, (Line2D, Patch, Collection, Text))),\n                    *axx.containers]\n\n    handler_map = {**Legend.get_default_handler_map(),\n                   **(legend_handler_map or {})}\n    has_handler = Legend.get_legend_handler\n    for handle in handles_original:\n        label = handle.get_label()\n        if label != '_nolegend_' and has_handler(handler_map, handle):\n            yield handle\n        elif (label and not label.startswith('_') and\n                not has_handler(handler_map, handle)):\n            _api.warn_external(\n                             \"Legend does not support handles for \"\n                             f\"{type(handle).__name__} \"\n                             \"instances.\\nSee: https://matplotlib.org/stable/\"\n                             \"tutorials/intermediate/legend_guide.html\"\n                             \"#implementing-a-custom-legend-handler\")\n            continue\n\n\ndef _get_legend_handles_labels(axs, legend_handler_map=None):\n    \"\"\"Return handles and labels for legend.\"\"\"\n    handles = []\n    labels = []\n    for handle in _get_legend_handles(axs, legend_handler_map):\n        label = handle.get_label()\n        if label and not label.startswith('_'):\n            handles.append(handle)\n            labels.append(label)\n    return handles, labels\n\n\ndef _parse_legend_args(axs, *args, handles=None, labels=None, **kwargs):\n    \"\"\"\n    Get the handles and labels from the calls to either ``figure.legend``\n    or ``axes.legend``.\n\n    The parser is a bit involved because we support::\n\n        legend()\n        legend(labels)\n        legend(handles, labels)\n        legend(labels=labels)\n        legend(handles=handles)\n        legend(handles=handles, labels=labels)\n\n    The behavior for a mixture of positional and keyword handles and labels\n    is undefined and issues a warning.\n\n    Parameters\n    ----------\n    axs : list of `.Axes`\n        If handles are not given explicitly, the artists in these Axes are\n        used as handles.\n    *args : tuple\n        Positional parameters passed to ``legend()``.\n    handles\n        The value of the keyword argument ``legend(handles=...)``, or *None*\n        if that keyword argument was not used.\n    labels\n        The value of the keyword argument ``legend(labels=...)``, or *None*\n        if that keyword argument was not used.\n    **kwargs\n        All other keyword arguments passed to ``legend()``.\n\n    Returns\n    -------\n    handles : list of `.Artist`\n        The legend handles.\n    labels : list of str\n        The legend labels.\n    extra_args : tuple\n        *args* with positional handles and labels removed.\n    kwargs : dict\n        *kwargs* with keywords handles and labels removed.\n\n    \"\"\"\n    log = logging.getLogger(__name__)\n\n    handlers = kwargs.get('handler_map')\n    extra_args = ()\n\n    if (handles is not None or labels is not None) and args:\n        _api.warn_external(\"You have mixed positional and keyword arguments, \"\n                           \"some input may be discarded.\")\n\n    # if got both handles and labels as kwargs, make same length\n    if handles and labels:\n        handles, labels = zip(*zip(handles, labels))\n\n    elif handles is not None and labels is None:\n        labels = [handle.get_label() for handle in handles]\n\n    elif labels is not None and handles is None:\n        # Get as many handles as there are labels.\n        handles = [handle for handle, label\n                   in zip(_get_legend_handles(axs, handlers), labels)]\n\n    # No arguments - automatically detect labels and handles.\n    elif len(args) == 0:\n        handles, labels = _get_legend_handles_labels(axs, handlers)\n        if not handles:\n            log.warning(\n                \"No artists with labels found to put in legend.  Note that \"\n                \"artists whose label start with an underscore are ignored \"\n                \"when legend() is called with no argument.\")\n\n    # One argument. User defined labels - automatic handle detection.\n    elif len(args) == 1:\n        labels, = args\n        if any(isinstance(l, Artist) for l in labels):\n            raise TypeError(\"A single argument passed to legend() must be a \"\n                            \"list of labels, but found an Artist in there.\")\n\n        # Get as many handles as there are labels.\n        handles = [handle for handle, label\n                   in zip(_get_legend_handles(axs, handlers), labels)]\n\n    # Two arguments:\n    #   * user defined handles and labels\n    elif len(args) >= 2:\n        handles, labels = args[:2]\n        extra_args = args[2:]\n\n    else:\n        raise TypeError('Invalid arguments to legend.')\n\n    return handles, labels, extra_args, kwargs\n"
    },
    {
      "filename": "lib/matplotlib/tests/test_legend.py",
      "content": "import collections\nimport platform\nfrom unittest import mock\nimport warnings\n\nimport numpy as np\nfrom numpy.testing import assert_allclose\nimport pytest\n\nfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\nfrom matplotlib.testing._markers import needs_usetex\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.patches as mpatches\nimport matplotlib.transforms as mtransforms\nimport matplotlib.collections as mcollections\nimport matplotlib.lines as mlines\nfrom matplotlib.legend_handler import HandlerTuple\nimport matplotlib.legend as mlegend\nfrom matplotlib import rc_context\nfrom matplotlib.font_manager import FontProperties\n\n\ndef test_legend_ordereddict():\n    # smoketest that ordereddict inputs work...\n\n    X = np.random.randn(10)\n    Y = np.random.randn(10)\n    labels = ['a'] * 5 + ['b'] * 5\n    colors = ['r'] * 5 + ['g'] * 5\n\n    fig, ax = plt.subplots()\n    for x, y, label, color in zip(X, Y, labels, colors):\n        ax.scatter(x, y, label=label, c=color)\n\n    handles, labels = ax.get_legend_handles_labels()\n    legend = collections.OrderedDict(zip(labels, handles))\n    ax.legend(legend.values(), legend.keys(),\n              loc='center left', bbox_to_anchor=(1, .5))\n\n\n@image_comparison(['legend_auto1'], remove_text=True)\ndef test_legend_auto1():\n    \"\"\"Test automatic legend placement\"\"\"\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    ax.plot(x, 50 - x, 'o', label='y=1')\n    ax.plot(x, x - 50, 'o', label='y=-1')\n    ax.legend(loc='best')\n\n\n@image_comparison(['legend_auto2'], remove_text=True)\ndef test_legend_auto2():\n    \"\"\"Test automatic legend placement\"\"\"\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    b1 = ax.bar(x, x, align='edge', color='m')\n    b2 = ax.bar(x, x[::-1], align='edge', color='g')\n    ax.legend([b1[0], b2[0]], ['up', 'down'], loc='best')\n\n\n@image_comparison(['legend_auto3'])\ndef test_legend_auto3():\n    \"\"\"Test automatic legend placement\"\"\"\n    fig, ax = plt.subplots()\n    x = [0.9, 0.1, 0.1, 0.9, 0.9, 0.5]\n    y = [0.95, 0.95, 0.05, 0.05, 0.5, 0.5]\n    ax.plot(x, y, 'o-', label='line')\n    ax.set_xlim(0.0, 1.0)\n    ax.set_ylim(0.0, 1.0)\n    ax.legend(loc='best')\n\n\ndef test_legend_auto4():\n    \"\"\"\n    Check that the legend location with automatic placement is the same,\n    whatever the histogram type is. Related to issue #9580.\n    \"\"\"\n    # NB: barstacked is pointless with a single dataset.\n    fig, axs = plt.subplots(ncols=3, figsize=(6.4, 2.4))\n    leg_bboxes = []\n    for ax, ht in zip(axs.flat, ('bar', 'step', 'stepfilled')):\n        ax.set_title(ht)\n        # A high bar on the left but an even higher one on the right.\n        ax.hist([0] + 5*[9], bins=range(10), label=\"Legend\", histtype=ht)\n        leg = ax.legend(loc=\"best\")\n        fig.canvas.draw()\n        leg_bboxes.append(\n            leg.get_window_extent().transformed(ax.transAxes.inverted()))\n\n    # The histogram type \"bar\" is assumed to be the correct reference.\n    assert_allclose(leg_bboxes[1].bounds, leg_bboxes[0].bounds)\n    assert_allclose(leg_bboxes[2].bounds, leg_bboxes[0].bounds)\n\n\ndef test_legend_auto5():\n    \"\"\"\n    Check that the automatic placement handle a rather complex\n    case with non rectangular patch. Related to issue #9580.\n    \"\"\"\n    fig, axs = plt.subplots(ncols=2, figsize=(9.6, 4.8))\n\n    leg_bboxes = []\n    for ax, loc in zip(axs.flat, (\"center\", \"best\")):\n        # An Ellipse patch at the top, a U-shaped Polygon patch at the\n        # bottom and a ring-like Wedge patch: the correct placement of\n        # the legend should be in the center.\n        for _patch in [\n                mpatches.Ellipse(\n                    xy=(0.5, 0.9), width=0.8, height=0.2, fc=\"C1\"),\n                mpatches.Polygon(np.array([\n                    [0, 1], [0, 0], [1, 0], [1, 1], [0.9, 1.0], [0.9, 0.1],\n                    [0.1, 0.1], [0.1, 1.0], [0.1, 1.0]]), fc=\"C1\"),\n                mpatches.Wedge((0.5, 0.5), 0.5, 0, 360, width=0.05, fc=\"C0\")\n                ]:\n            ax.add_patch(_patch)\n\n        ax.plot([0.1, 0.9], [0.9, 0.9], label=\"A segment\")  # sthg to label\n\n        leg = ax.legend(loc=loc)\n        fig.canvas.draw()\n        leg_bboxes.append(\n            leg.get_window_extent().transformed(ax.transAxes.inverted()))\n\n    assert_allclose(leg_bboxes[1].bounds, leg_bboxes[0].bounds)\n\n\n@image_comparison(['legend_various_labels'], remove_text=True)\ndef test_various_labels():\n    # tests all sorts of label types\n    fig = plt.figure()\n    ax = fig.add_subplot(121)\n    ax.plot(np.arange(4), 'o', label=1)\n    ax.plot(np.linspace(4, 4.1), 'o', label='Développés')\n    ax.plot(np.arange(4, 1, -1), 'o', label='__nolegend__')\n    ax.legend(numpoints=1, loc='best')\n\n\ndef test_legend_label_with_leading_underscore():\n    \"\"\"\n    Test that artists with labels starting with an underscore are not added to\n    the legend, and that a warning is issued if one tries to add them\n    explicitly.\n    \"\"\"\n    fig, ax = plt.subplots()\n    line, = ax.plot([0, 1], label='_foo')\n    with pytest.warns(UserWarning,\n                      match=r\"starts with '_'.*excluded from the legend.\"):\n        legend = ax.legend(handles=[line])\n    assert len(legend.legend_handles) == 0\n\n\n@image_comparison(['legend_labels_first.png'], remove_text=True)\ndef test_labels_first():\n    # test labels to left of markers\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), '-o', label=1)\n    ax.plot(np.ones(10)*5, ':x', label=\"x\")\n    ax.plot(np.arange(20, 10, -1), 'd', label=\"diamond\")\n    ax.legend(loc='best', markerfirst=False)\n\n\n@image_comparison(['legend_multiple_keys.png'], remove_text=True)\ndef test_multiple_keys():\n    # test legend entries with multiple keys\n    fig, ax = plt.subplots()\n    p1, = ax.plot([1, 2, 3], '-o')\n    p2, = ax.plot([2, 3, 4], '-x')\n    p3, = ax.plot([3, 4, 5], '-d')\n    ax.legend([(p1, p2), (p2, p1), p3], ['two keys', 'pad=0', 'one key'],\n              numpoints=1,\n              handler_map={(p1, p2): HandlerTuple(ndivide=None),\n                           (p2, p1): HandlerTuple(ndivide=None, pad=0)})\n\n\n@image_comparison(['rgba_alpha.png'], remove_text=True,\n                  tol=0 if platform.machine() == 'x86_64' else 0.01)\ndef test_alpha_rgba():\n    fig, ax = plt.subplots()\n    ax.plot(range(10), lw=5)\n    leg = plt.legend(['Longlabel that will go away'], loc='center')\n    leg.legendPatch.set_facecolor([1, 0, 0, 0.5])\n\n\n@image_comparison(['rcparam_alpha.png'], remove_text=True,\n                  tol=0 if platform.machine() == 'x86_64' else 0.01)\ndef test_alpha_rcparam():\n    fig, ax = plt.subplots()\n    ax.plot(range(10), lw=5)\n    with mpl.rc_context(rc={'legend.framealpha': .75}):\n        leg = plt.legend(['Longlabel that will go away'], loc='center')\n        # this alpha is going to be over-ridden by the rcparam with\n        # sets the alpha of the patch to be non-None which causes the alpha\n        # value of the face color to be discarded.  This behavior may not be\n        # ideal, but it is what it is and we should keep track of it changing\n        leg.legendPatch.set_facecolor([1, 0, 0, 0.5])\n\n\n@image_comparison(['fancy'], remove_text=True)\ndef test_fancy():\n    # using subplot triggers some offsetbox functionality untested elsewhere\n    plt.subplot(121)\n    plt.plot([5] * 10, 'o--', label='XX')\n    plt.scatter(np.arange(10), np.arange(10, 0, -1), label='XX\\nXX')\n    plt.errorbar(np.arange(10), np.arange(10), xerr=0.5,\n                 yerr=0.5, label='XX')\n    plt.legend(loc=\"center left\", bbox_to_anchor=[1.0, 0.5],\n               ncols=2, shadow=True, title=\"My legend\", numpoints=1)\n\n\n@image_comparison(['framealpha'], remove_text=True,\n                  tol=0 if platform.machine() == 'x86_64' else 0.02)\ndef test_framealpha():\n    x = np.linspace(1, 100, 100)\n    y = x\n    plt.plot(x, y, label='mylabel', lw=10)\n    plt.legend(framealpha=0.5)\n\n\n@image_comparison(['scatter_rc3', 'scatter_rc1'], remove_text=True)\ndef test_rc():\n    # using subplot triggers some offsetbox functionality untested elsewhere\n    plt.figure()\n    ax = plt.subplot(121)\n    ax.scatter(np.arange(10), np.arange(10, 0, -1), label='three')\n    ax.legend(loc=\"center left\", bbox_to_anchor=[1.0, 0.5],\n              title=\"My legend\")\n\n    mpl.rcParams['legend.scatterpoints'] = 1\n    plt.figure()\n    ax = plt.subplot(121)\n    ax.scatter(np.arange(10), np.arange(10, 0, -1), label='one')\n    ax.legend(loc=\"center left\", bbox_to_anchor=[1.0, 0.5],\n              title=\"My legend\")\n\n\n@image_comparison(['legend_expand'], remove_text=True)\ndef test_legend_expand():\n    \"\"\"Test expand mode\"\"\"\n    legend_modes = [None, \"expand\"]\n    fig, axs = plt.subplots(len(legend_modes), 1)\n    x = np.arange(100)\n    for ax, mode in zip(axs, legend_modes):\n        ax.plot(x, 50 - x, 'o', label='y=1')\n        l1 = ax.legend(loc='upper left', mode=mode)\n        ax.add_artist(l1)\n        ax.plot(x, x - 50, 'o', label='y=-1')\n        l2 = ax.legend(loc='right', mode=mode)\n        ax.add_artist(l2)\n        ax.legend(loc='lower left', mode=mode, ncols=2)\n\n\n@image_comparison(['hatching'], remove_text=True, style='default')\ndef test_hatching():\n    # Remove this line when this test image is regenerated.\n    plt.rcParams['text.kerning_factor'] = 6\n\n    fig, ax = plt.subplots()\n\n    # Patches\n    patch = plt.Rectangle((0, 0), 0.3, 0.3, hatch='xx',\n                          label='Patch\\ndefault color\\nfilled')\n    ax.add_patch(patch)\n    patch = plt.Rectangle((0.33, 0), 0.3, 0.3, hatch='||', edgecolor='C1',\n                          label='Patch\\nexplicit color\\nfilled')\n    ax.add_patch(patch)\n    patch = plt.Rectangle((0, 0.4), 0.3, 0.3, hatch='xx', fill=False,\n                          label='Patch\\ndefault color\\nunfilled')\n    ax.add_patch(patch)\n    patch = plt.Rectangle((0.33, 0.4), 0.3, 0.3, hatch='||', fill=False,\n                          edgecolor='C1',\n                          label='Patch\\nexplicit color\\nunfilled')\n    ax.add_patch(patch)\n\n    # Paths\n    ax.fill_between([0, .15, .3], [.8, .8, .8], [.9, 1.0, .9],\n                    hatch='+', label='Path\\ndefault color')\n    ax.fill_between([.33, .48, .63], [.8, .8, .8], [.9, 1.0, .9],\n                    hatch='+', edgecolor='C2', label='Path\\nexplicit color')\n\n    ax.set_xlim(-0.01, 1.1)\n    ax.set_ylim(-0.01, 1.1)\n    ax.legend(handlelength=4, handleheight=4)\n\n\ndef test_legend_remove():\n    fig, ax = plt.subplots()\n    lines = ax.plot(range(10))\n    leg = fig.legend(lines, \"test\")\n    leg.remove()\n    assert fig.legends == []\n    leg = ax.legend(\"test\")\n    leg.remove()\n    assert ax.get_legend() is None\n\n\ndef test_reverse_legend_handles_and_labels():\n    \"\"\"Check that the legend handles and labels are reversed.\"\"\"\n    fig, ax = plt.subplots()\n    x = 1\n    y = 1\n    labels = [\"First label\", \"Second label\", \"Third label\"]\n    markers = ['.', ',', 'o']\n\n    ax.plot(x, y, markers[0], label=labels[0])\n    ax.plot(x, y, markers[1], label=labels[1])\n    ax.plot(x, y, markers[2], label=labels[2])\n    leg = ax.legend(reverse=True)\n    actual_labels = [t.get_text() for t in leg.get_texts()]\n    actual_markers = [h.get_marker() for h in leg.legend_handles]\n    assert actual_labels == list(reversed(labels))\n    assert actual_markers == list(reversed(markers))\n\n\n@check_figures_equal(extensions=[\"png\"])\ndef test_reverse_legend_display(fig_test, fig_ref):\n    \"\"\"Check that the rendered legend entries are reversed\"\"\"\n    ax = fig_test.subplots()\n    ax.plot([1], 'ro', label=\"first\")\n    ax.plot([2], 'bx', label=\"second\")\n    ax.legend(reverse=True)\n\n    ax = fig_ref.subplots()\n    ax.plot([2], 'bx', label=\"second\")\n    ax.plot([1], 'ro', label=\"first\")\n    ax.legend()\n\n\nclass TestLegendFunction:\n    # Tests the legend function on the Axes and pyplot.\n    def test_legend_no_args(self):\n        lines = plt.plot(range(10), label='hello world')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            plt.legend()\n        Legend.assert_called_with(plt.gca(), lines, ['hello world'])\n\n    def test_legend_positional_handles_labels(self):\n        lines = plt.plot(range(10))\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            plt.legend(lines, ['hello world'])\n        Legend.assert_called_with(plt.gca(), lines, ['hello world'])\n\n    def test_legend_positional_handles_only(self):\n        lines = plt.plot(range(10))\n        with pytest.raises(TypeError, match='but found an Artist'):\n            # a single arg is interpreted as labels\n            # it's a common error to just pass handles\n            plt.legend(lines)\n\n    def test_legend_positional_labels_only(self):\n        lines = plt.plot(range(10), label='hello world')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            plt.legend(['foobar'])\n        Legend.assert_called_with(plt.gca(), lines, ['foobar'])\n\n    def test_legend_three_args(self):\n        lines = plt.plot(range(10), label='hello world')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            plt.legend(lines, ['foobar'], loc='right')\n        Legend.assert_called_with(plt.gca(), lines, ['foobar'], loc='right')\n\n    def test_legend_handler_map(self):\n        lines = plt.plot(range(10), label='hello world')\n        with mock.patch('matplotlib.legend.'\n                        '_get_legend_handles_labels') as handles_labels:\n            handles_labels.return_value = lines, ['hello world']\n            plt.legend(handler_map={'1': 2})\n        handles_labels.assert_called_with([plt.gca()], {'1': 2})\n\n    def test_legend_kwargs_handles_only(self):\n        fig, ax = plt.subplots()\n        x = np.linspace(0, 1, 11)\n        ln1, = ax.plot(x, x, label='x')\n        ln2, = ax.plot(x, 2*x, label='2x')\n        ln3, = ax.plot(x, 3*x, label='3x')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            ax.legend(handles=[ln3, ln2])  # reversed and not ln1\n        Legend.assert_called_with(ax, [ln3, ln2], ['3x', '2x'])\n\n    def test_legend_kwargs_labels_only(self):\n        fig, ax = plt.subplots()\n        x = np.linspace(0, 1, 11)\n        ln1, = ax.plot(x, x)\n        ln2, = ax.plot(x, 2*x)\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            ax.legend(labels=['x', '2x'])\n        Legend.assert_called_with(ax, [ln1, ln2], ['x', '2x'])\n\n    def test_legend_kwargs_handles_labels(self):\n        fig, ax = plt.subplots()\n        th = np.linspace(0, 2*np.pi, 1024)\n        lns, = ax.plot(th, np.sin(th), label='sin')\n        lnc, = ax.plot(th, np.cos(th), label='cos')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            # labels of lns, lnc are overwritten with explicit ('a', 'b')\n            ax.legend(labels=('a', 'b'), handles=(lnc, lns))\n        Legend.assert_called_with(ax, (lnc, lns), ('a', 'b'))\n\n    def test_warn_mixed_args_and_kwargs(self):\n        fig, ax = plt.subplots()\n        th = np.linspace(0, 2*np.pi, 1024)\n        lns, = ax.plot(th, np.sin(th), label='sin')\n        lnc, = ax.plot(th, np.cos(th), label='cos')\n        with pytest.warns(UserWarning) as record:\n            ax.legend((lnc, lns), labels=('a', 'b'))\n        assert len(record) == 1\n        assert str(record[0].message) == (\n            \"You have mixed positional and keyword arguments, some input may \"\n            \"be discarded.\")\n\n    def test_parasite(self):\n        from mpl_toolkits.axes_grid1 import host_subplot\n\n        host = host_subplot(111)\n        par = host.twinx()\n\n        p1, = host.plot([0, 1, 2], [0, 1, 2], label=\"Density\")\n        p2, = par.plot([0, 1, 2], [0, 3, 2], label=\"Temperature\")\n\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            plt.legend()\n        Legend.assert_called_with(host, [p1, p2], ['Density', 'Temperature'])\n\n\nclass TestLegendFigureFunction:\n    # Tests the legend function for figure\n    def test_legend_handle_label(self):\n        fig, ax = plt.subplots()\n        lines = ax.plot(range(10))\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            fig.legend(lines, ['hello world'])\n        Legend.assert_called_with(fig, lines, ['hello world'],\n                                  bbox_transform=fig.transFigure)\n\n    def test_legend_no_args(self):\n        fig, ax = plt.subplots()\n        lines = ax.plot(range(10), label='hello world')\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            fig.legend()\n        Legend.assert_called_with(fig, lines, ['hello world'],\n                                  bbox_transform=fig.transFigure)\n\n    def test_legend_label_arg(self):\n        fig, ax = plt.subplots()\n        lines = ax.plot(range(10))\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            fig.legend(['foobar'])\n        Legend.assert_called_with(fig, lines, ['foobar'],\n                                  bbox_transform=fig.transFigure)\n\n    def test_legend_label_three_args(self):\n        fig, ax = plt.subplots()\n        lines = ax.plot(range(10))\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            fig.legend(lines, ['foobar'], 'right')\n        Legend.assert_called_with(fig, lines, ['foobar'], 'right',\n                                  bbox_transform=fig.transFigure)\n\n    def test_legend_label_three_args_pluskw(self):\n        # test that third argument and loc=  called together give\n        # Exception\n        fig, ax = plt.subplots()\n        lines = ax.plot(range(10))\n        with pytest.raises(Exception):\n            fig.legend(lines, ['foobar'], 'right', loc='left')\n\n    def test_legend_kw_args(self):\n        fig, axs = plt.subplots(1, 2)\n        lines = axs[0].plot(range(10))\n        lines2 = axs[1].plot(np.arange(10) * 2.)\n        with mock.patch('matplotlib.legend.Legend') as Legend:\n            fig.legend(loc='right', labels=('a', 'b'), handles=(lines, lines2))\n        Legend.assert_called_with(\n            fig, (lines, lines2), ('a', 'b'), loc='right',\n            bbox_transform=fig.transFigure)\n\n    def test_warn_args_kwargs(self):\n        fig, axs = plt.subplots(1, 2)\n        lines = axs[0].plot(range(10))\n        lines2 = axs[1].plot(np.arange(10) * 2.)\n        with pytest.warns(UserWarning) as record:\n            fig.legend((lines, lines2), labels=('a', 'b'))\n        assert len(record) == 1\n        assert str(record[0].message) == (\n            \"You have mixed positional and keyword arguments, some input may \"\n            \"be discarded.\")\n\n\ndef test_figure_legend_outside():\n    todos = ['upper ' + pos for pos in ['left', 'center', 'right']]\n    todos += ['lower ' + pos for pos in ['left', 'center', 'right']]\n    todos += ['left ' + pos for pos in ['lower', 'center', 'upper']]\n    todos += ['right ' + pos for pos in ['lower', 'center', 'upper']]\n\n    upperext = [20.347556,  27.722556, 790.583, 545.499]\n    lowerext = [20.347556,  71.056556, 790.583, 588.833]\n    leftext = [151.681556, 27.722556, 790.583, 588.833]\n    rightext = [20.347556,  27.722556, 659.249, 588.833]\n    axbb = [upperext, upperext, upperext,\n            lowerext, lowerext, lowerext,\n            leftext, leftext, leftext,\n            rightext, rightext, rightext]\n\n    legbb = [[10., 555., 133., 590.],     # upper left\n             [338.5, 555., 461.5, 590.],  # upper center\n             [667, 555., 790.,  590.],    # upper right\n             [10., 10., 133.,  45.],      # lower left\n             [338.5, 10., 461.5,  45.],   # lower center\n             [667., 10., 790.,  45.],     # lower right\n             [10., 10., 133., 45.],       # left lower\n             [10., 282.5, 133., 317.5],   # left center\n             [10., 555., 133., 590.],     # left upper\n             [667, 10., 790., 45.],       # right lower\n             [667., 282.5, 790., 317.5],  # right center\n             [667., 555., 790., 590.]]    # right upper\n\n    for nn, todo in enumerate(todos):\n        print(todo)\n        fig, axs = plt.subplots(constrained_layout=True, dpi=100)\n        axs.plot(range(10), label='Boo1')\n        leg = fig.legend(loc='outside ' + todo)\n        fig.draw_without_rendering()\n\n        assert_allclose(axs.get_window_extent().extents,\n                        axbb[nn])\n        assert_allclose(leg.get_window_extent().extents,\n                        legbb[nn])\n\n\n@image_comparison(['legend_stackplot.png'])\ndef test_legend_stackplot():\n    \"\"\"Test legend for PolyCollection using stackplot.\"\"\"\n    # related to #1341, #1943, and PR #3303\n    fig, ax = plt.subplots()\n    x = np.linspace(0, 10, 10)\n    y1 = 1.0 * x\n    y2 = 2.0 * x + 1\n    y3 = 3.0 * x + 2\n    ax.stackplot(x, y1, y2, y3, labels=['y1', 'y2', 'y3'])\n    ax.set_xlim((0, 10))\n    ax.set_ylim((0, 70))\n    ax.legend(loc='best')\n\n\ndef test_cross_figure_patch_legend():\n    fig, ax = plt.subplots()\n    fig2, ax2 = plt.subplots()\n\n    brs = ax.bar(range(3), range(3))\n    fig2.legend(brs, 'foo')\n\n\ndef test_nanscatter():\n    fig, ax = plt.subplots()\n\n    h = ax.scatter([np.nan], [np.nan], marker=\"o\",\n                   facecolor=\"r\", edgecolor=\"r\", s=3)\n\n    ax.legend([h], [\"scatter\"])\n\n    fig, ax = plt.subplots()\n    for color in ['red', 'green', 'blue']:\n        n = 750\n        x, y = np.random.rand(2, n)\n        scale = 200.0 * np.random.rand(n)\n        ax.scatter(x, y, c=color, s=scale, label=color,\n                   alpha=0.3, edgecolors='none')\n\n    ax.legend()\n    ax.grid(True)\n\n\ndef test_legend_repeatcheckok():\n    fig, ax = plt.subplots()\n    ax.scatter(0.0, 1.0, color='k', marker='o', label='test')\n    ax.scatter(0.5, 0.0, color='r', marker='v', label='test')\n    ax.legend()\n    hand, lab = mlegend._get_legend_handles_labels([ax])\n    assert len(lab) == 2\n    fig, ax = plt.subplots()\n    ax.scatter(0.0, 1.0, color='k', marker='o', label='test')\n    ax.scatter(0.5, 0.0, color='k', marker='v', label='test')\n    ax.legend()\n    hand, lab = mlegend._get_legend_handles_labels([ax])\n    assert len(lab) == 2\n\n\n@image_comparison(['not_covering_scatter.png'])\ndef test_not_covering_scatter():\n    colors = ['b', 'g', 'r']\n\n    for n in range(3):\n        plt.scatter([n], [n], color=colors[n])\n\n    plt.legend(['foo', 'foo', 'foo'], loc='best')\n    plt.gca().set_xlim(-0.5, 2.2)\n    plt.gca().set_ylim(-0.5, 2.2)\n\n\n@image_comparison(['not_covering_scatter_transform.png'])\ndef test_not_covering_scatter_transform():\n    # Offsets point to top left, the default auto position\n    offset = mtransforms.Affine2D().translate(-20, 20)\n    x = np.linspace(0, 30, 1000)\n    plt.plot(x, x)\n\n    plt.scatter([20], [10], transform=offset + plt.gca().transData)\n\n    plt.legend(['foo', 'bar'], loc='best')\n\n\ndef test_linecollection_scaled_dashes():\n    lines1 = [[(0, .5), (.5, 1)], [(.3, .6), (.2, .2)]]\n    lines2 = [[[0.7, .2], [.8, .4]], [[.5, .7], [.6, .1]]]\n    lines3 = [[[0.6, .2], [.8, .4]], [[.5, .7], [.1, .1]]]\n    lc1 = mcollections.LineCollection(lines1, linestyles=\"--\", lw=3)\n    lc2 = mcollections.LineCollection(lines2, linestyles=\"-.\")\n    lc3 = mcollections.LineCollection(lines3, linestyles=\":\", lw=.5)\n\n    fig, ax = plt.subplots()\n    ax.add_collection(lc1)\n    ax.add_collection(lc2)\n    ax.add_collection(lc3)\n\n    leg = ax.legend([lc1, lc2, lc3], [\"line1\", \"line2\", 'line 3'])\n    h1, h2, h3 = leg.legend_handles\n\n    for oh, lh in zip((lc1, lc2, lc3), (h1, h2, h3)):\n        assert oh.get_linestyles()[0] == lh._dash_pattern\n\n\ndef test_handler_numpoints():\n    \"\"\"Test legend handler with numpoints <= 1.\"\"\"\n    # related to #6921 and PR #8478\n    fig, ax = plt.subplots()\n    ax.plot(range(5), label='test')\n    ax.legend(numpoints=0.5)\n\n\ndef test_text_nohandler_warning():\n    \"\"\"Test that Text artists with labels raise a warning\"\"\"\n    fig, ax = plt.subplots()\n    ax.text(x=0, y=0, s=\"text\", label=\"label\")\n    with pytest.warns(UserWarning) as record:\n        ax.legend()\n    assert len(record) == 1\n\n    # this should _not_ warn:\n    f, ax = plt.subplots()\n    ax.pcolormesh(np.random.uniform(0, 1, (10, 10)))\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"error\")\n        ax.get_legend_handles_labels()\n\n\ndef test_empty_bar_chart_with_legend():\n    \"\"\"Test legend when bar chart is empty with a label.\"\"\"\n    # related to issue #13003. Calling plt.legend() should not\n    # raise an IndexError.\n    plt.bar([], [], label='test')\n    plt.legend()\n\n\ndef test_shadow_framealpha():\n    # Test if framealpha is activated when shadow is True\n    # and framealpha is not explicitly passed'''\n    fig, ax = plt.subplots()\n    ax.plot(range(100), label=\"test\")\n    leg = ax.legend(shadow=True, facecolor='w')\n    assert leg.get_frame().get_alpha() == 1\n\n\ndef test_legend_title_empty():\n    # test that if we don't set the legend title, that\n    # it comes back as an empty string, and that it is not\n    # visible:\n    fig, ax = plt.subplots()\n    ax.plot(range(10))\n    leg = ax.legend()\n    assert leg.get_title().get_text() == \"\"\n    assert not leg.get_title().get_visible()\n\n\ndef test_legend_proper_window_extent():\n    # test that legend returns the expected extent under various dpi...\n    fig, ax = plt.subplots(dpi=100)\n    ax.plot(range(10), label='Aardvark')\n    leg = ax.legend()\n    x01 = leg.get_window_extent(fig.canvas.get_renderer()).x0\n\n    fig, ax = plt.subplots(dpi=200)\n    ax.plot(range(10), label='Aardvark')\n    leg = ax.legend()\n    x02 = leg.get_window_extent(fig.canvas.get_renderer()).x0\n    assert pytest.approx(x01*2, 0.1) == x02\n\n\ndef test_window_extent_cached_renderer():\n    fig, ax = plt.subplots(dpi=100)\n    ax.plot(range(10), label='Aardvark')\n    leg = ax.legend()\n    leg2 = fig.legend()\n    fig.canvas.draw()\n    # check that get_window_extent will use the cached renderer\n    leg.get_window_extent()\n    leg2.get_window_extent()\n\n\ndef test_legend_title_fontprop_fontsize():\n    # test the title_fontsize kwarg\n    plt.plot(range(10))\n    with pytest.raises(ValueError):\n        plt.legend(title='Aardvark', title_fontsize=22,\n                   title_fontproperties={'family': 'serif', 'size': 22})\n\n    leg = plt.legend(title='Aardvark', title_fontproperties=FontProperties(\n                                       family='serif', size=22))\n    assert leg.get_title().get_size() == 22\n\n    fig, axes = plt.subplots(2, 3, figsize=(10, 6))\n    axes = axes.flat\n    axes[0].plot(range(10))\n    leg0 = axes[0].legend(title='Aardvark', title_fontsize=22)\n    assert leg0.get_title().get_fontsize() == 22\n    axes[1].plot(range(10))\n    leg1 = axes[1].legend(title='Aardvark',\n                          title_fontproperties={'family': 'serif', 'size': 22})\n    assert leg1.get_title().get_fontsize() == 22\n    axes[2].plot(range(10))\n    mpl.rcParams['legend.title_fontsize'] = None\n    leg2 = axes[2].legend(title='Aardvark',\n                          title_fontproperties={'family': 'serif'})\n    assert leg2.get_title().get_fontsize() == mpl.rcParams['font.size']\n    axes[3].plot(range(10))\n    leg3 = axes[3].legend(title='Aardvark')\n    assert leg3.get_title().get_fontsize() == mpl.rcParams['font.size']\n    axes[4].plot(range(10))\n    mpl.rcParams['legend.title_fontsize'] = 20\n    leg4 = axes[4].legend(title='Aardvark',\n                          title_fontproperties={'family': 'serif'})\n    assert leg4.get_title().get_fontsize() == 20\n    axes[5].plot(range(10))\n    leg5 = axes[5].legend(title='Aardvark')\n    assert leg5.get_title().get_fontsize() == 20\n\n\n@pytest.mark.parametrize('alignment', ('center', 'left', 'right'))\ndef test_legend_alignment(alignment):\n    fig, ax = plt.subplots()\n    ax.plot(range(10), label='test')\n    leg = ax.legend(title=\"Aardvark\", alignment=alignment)\n    assert leg.get_children()[0].align == alignment\n    assert leg.get_alignment() == alignment\n\n\n@pytest.mark.parametrize('alignment', ('center', 'left', 'right'))\ndef test_legend_set_alignment(alignment):\n    fig, ax = plt.subplots()\n    ax.plot(range(10), label='test')\n    leg = ax.legend()\n    leg.set_alignment(alignment)\n    assert leg.get_children()[0].align == alignment\n    assert leg.get_alignment() == alignment\n\n\n@pytest.mark.parametrize('color', ('red', 'none', (.5, .5, .5)))\ndef test_legend_labelcolor_single(color):\n    # test labelcolor for a single color\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3')\n\n    leg = ax.legend(labelcolor=color)\n    for text in leg.get_texts():\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_list():\n    # test labelcolor for a list of colors\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3')\n\n    leg = ax.legend(labelcolor=['r', 'g', 'b'])\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_linecolor():\n    # test the labelcolor for labelcolor='linecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', color='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', color='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', color='b')\n\n    leg = ax.legend(labelcolor='linecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_linecolor():\n    # test the labelcolor for labelcolor='linecolor' on PathCollection\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', c='r')\n    ax.scatter(np.arange(10), np.arange(10)*2, label='#2', c='g')\n    ax.scatter(np.arange(10), np.arange(10)*3, label='#3', c='b')\n\n    leg = ax.legend(labelcolor='linecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_linecolor_iterable():\n    # test the labelcolor for labelcolor='linecolor' on PathCollection\n    # with iterable colors\n    fig, ax = plt.subplots()\n    colors = np.random.default_rng().choice(['r', 'g', 'b'], 10)\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', c=colors)\n\n    leg = ax.legend(labelcolor='linecolor')\n    text, = leg.get_texts()\n    assert mpl.colors.same_color(text.get_color(), 'black')\n\n\ndef test_legend_pathcollection_labelcolor_linecolor_cmap():\n    # test the labelcolor for labelcolor='linecolor' on PathCollection\n    # with a colormap\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(10), np.arange(10), c=np.arange(10), label='#1')\n\n    leg = ax.legend(labelcolor='linecolor')\n    text, = leg.get_texts()\n    assert mpl.colors.same_color(text.get_color(), 'black')\n\n\ndef test_legend_labelcolor_markeredgecolor():\n    # test the labelcolor for labelcolor='markeredgecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n\n    leg = ax.legend(labelcolor='markeredgecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markeredgecolor():\n    # test the labelcolor for labelcolor='markeredgecolor' on PathCollection\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', edgecolor='r')\n    ax.scatter(np.arange(10), np.arange(10)*2, label='#2', edgecolor='g')\n    ax.scatter(np.arange(10), np.arange(10)*3, label='#3', edgecolor='b')\n\n    leg = ax.legend(labelcolor='markeredgecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markeredgecolor_iterable():\n    # test the labelcolor for labelcolor='markeredgecolor' on PathCollection\n    # with iterable colors\n    fig, ax = plt.subplots()\n    colors = np.random.default_rng().choice(['r', 'g', 'b'], 10)\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', edgecolor=colors)\n\n    leg = ax.legend(labelcolor='markeredgecolor')\n    for text, color in zip(leg.get_texts(), ['k']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markeredgecolor_cmap():\n    # test the labelcolor for labelcolor='markeredgecolor' on PathCollection\n    # with a colormap\n    fig, ax = plt.subplots()\n    edgecolors = mpl.cm.viridis(np.random.rand(10))\n    ax.scatter(\n        np.arange(10),\n        np.arange(10),\n        label='#1',\n        c=np.arange(10),\n        edgecolor=edgecolors,\n        cmap=\"Reds\"\n    )\n\n    leg = ax.legend(labelcolor='markeredgecolor')\n    for text, color in zip(leg.get_texts(), ['k']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_markerfacecolor():\n    # test the labelcolor for labelcolor='markerfacecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n\n    leg = ax.legend(labelcolor='markerfacecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markerfacecolor():\n    # test the labelcolor for labelcolor='markerfacecolor' on PathCollection\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', facecolor='r')\n    ax.scatter(np.arange(10), np.arange(10)*2, label='#2', facecolor='g')\n    ax.scatter(np.arange(10), np.arange(10)*3, label='#3', facecolor='b')\n\n    leg = ax.legend(labelcolor='markerfacecolor')\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markerfacecolor_iterable():\n    # test the labelcolor for labelcolor='markerfacecolor' on PathCollection\n    # with iterable colors\n    fig, ax = plt.subplots()\n    colors = np.random.default_rng().choice(['r', 'g', 'b'], 10)\n    ax.scatter(np.arange(10), np.arange(10)*1, label='#1', facecolor=colors)\n\n    leg = ax.legend(labelcolor='markerfacecolor')\n    for text, color in zip(leg.get_texts(), ['k']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_pathcollection_labelcolor_markfacecolor_cmap():\n    # test the labelcolor for labelcolor='markerfacecolor' on PathCollection\n    # with colormaps\n    fig, ax = plt.subplots()\n    facecolors = mpl.cm.viridis(np.random.rand(10))\n    ax.scatter(\n        np.arange(10),\n        np.arange(10),\n        label='#1',\n        c=np.arange(10),\n        facecolor=facecolors\n    )\n\n    leg = ax.legend(labelcolor='markerfacecolor')\n    for text, color in zip(leg.get_texts(), ['k']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\n@pytest.mark.parametrize('color', ('red', 'none', (.5, .5, .5)))\ndef test_legend_labelcolor_rcparam_single(color):\n    # test the rcParams legend.labelcolor for a single color\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3')\n\n    mpl.rcParams['legend.labelcolor'] = color\n    leg = ax.legend()\n    for text in leg.get_texts():\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_rcparam_linecolor():\n    # test the rcParams legend.labelcolor for a linecolor\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', color='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', color='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', color='b')\n\n    mpl.rcParams['legend.labelcolor'] = 'linecolor'\n    leg = ax.legend()\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_rcparam_markeredgecolor():\n    # test the labelcolor for labelcolor='markeredgecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n\n    mpl.rcParams['legend.labelcolor'] = 'markeredgecolor'\n    leg = ax.legend()\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_rcparam_markeredgecolor_short():\n    # test the labelcolor for labelcolor='markeredgecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n\n    mpl.rcParams['legend.labelcolor'] = 'mec'\n    leg = ax.legend()\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_rcparam_markerfacecolor():\n    # test the labelcolor for labelcolor='markeredgecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n\n    mpl.rcParams['legend.labelcolor'] = 'markerfacecolor'\n    leg = ax.legend()\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_legend_labelcolor_rcparam_markerfacecolor_short():\n    # test the labelcolor for labelcolor='markeredgecolor'\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n\n    mpl.rcParams['legend.labelcolor'] = 'mfc'\n    leg = ax.legend()\n    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n        assert mpl.colors.same_color(text.get_color(), color)\n\n\ndef test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()\n\n\n@pytest.mark.parametrize('draggable', (True, False))\ndef test_legend_draggable(draggable):\n    fig, ax = plt.subplots()\n    ax.plot(range(10), label='shabnams')\n    leg = ax.legend(draggable=draggable)\n    assert leg.get_draggable() is draggable\n\n\ndef test_alpha_handles():\n    x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n    legend = plt.legend()\n    for lh in legend.legend_handles:\n        lh.set_alpha(1.0)\n    assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n    assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n\n\n@needs_usetex\ndef test_usetex_no_warn(caplog):\n    mpl.rcParams['font.family'] = 'serif'\n    mpl.rcParams['font.serif'] = 'Computer Modern'\n    mpl.rcParams['text.usetex'] = True\n\n    fig, ax = plt.subplots()\n    ax.plot(0, 0, label='input')\n    ax.legend(title=\"My legend\")\n\n    fig.canvas.draw()\n    assert \"Font family ['serif'] not found.\" not in caplog.text\n\n\ndef test_warn_big_data_best_loc():\n    fig, ax = plt.subplots()\n    fig.canvas.draw()  # So that we can call draw_artist later.\n    for idx in range(1000):\n        ax.plot(np.arange(5000), label=idx)\n    with rc_context({'legend.loc': 'best'}):\n        legend = ax.legend()\n    with pytest.warns(UserWarning) as records:\n        fig.draw_artist(legend)  # Don't bother drawing the lines -- it's slow.\n    # The _find_best_position method of Legend is called twice, duplicating\n    # the warning message.\n    assert len(records) == 2\n    for record in records:\n        assert str(record.message) == (\n            'Creating legend with loc=\"best\" can be slow with large '\n            'amounts of data.')\n\n\ndef test_no_warn_big_data_when_loc_specified():\n    fig, ax = plt.subplots()\n    fig.canvas.draw()\n    for idx in range(1000):\n        ax.plot(np.arange(5000), label=idx)\n    legend = ax.legend('best')\n    fig.draw_artist(legend)  # Check that no warning is emitted.\n\n\n@pytest.mark.parametrize('label_array', [['low', 'high'],\n                                         ('low', 'high'),\n                                         np.array(['low', 'high'])])\ndef test_plot_multiple_input_multiple_label(label_array):\n    # test ax.plot() with multidimensional input\n    # and multiple labels\n    x = [1, 2, 3]\n    y = [[1, 2],\n         [2, 5],\n         [4, 9]]\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=label_array)\n    leg = ax.legend()\n    legend_texts = [entry.get_text() for entry in leg.get_texts()]\n    assert legend_texts == ['low', 'high']\n\n\n@pytest.mark.parametrize('label', ['one', 1, int])\ndef test_plot_multiple_input_single_label(label):\n    # test ax.plot() with multidimensional input\n    # and single label\n    x = [1, 2, 3]\n    y = [[1, 2],\n         [2, 5],\n         [4, 9]]\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=label)\n    leg = ax.legend()\n    legend_texts = [entry.get_text() for entry in leg.get_texts()]\n    assert legend_texts == [str(label)] * 2\n\n\n@pytest.mark.parametrize('label_array', [['low', 'high'],\n                                         ('low', 'high'),\n                                         np.array(['low', 'high'])])\ndef test_plot_single_input_multiple_label(label_array):\n    # test ax.plot() with 1D array like input\n    # and iterable label\n    x = [1, 2, 3]\n    y = [2, 5, 6]\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=label_array)\n    leg = ax.legend()\n    assert len(leg.get_texts()) == 1\n    assert leg.get_texts()[0].get_text() == str(label_array)\n\n\ndef test_plot_multiple_label_incorrect_length_exception():\n    # check that exception is raised if multiple labels\n    # are given, but number of on labels != number of lines\n    with pytest.raises(ValueError):\n        x = [1, 2, 3]\n        y = [[1, 2],\n             [2, 5],\n             [4, 9]]\n        label = ['high', 'low', 'medium']\n        fig, ax = plt.subplots()\n        ax.plot(x, y, label=label)\n\n\ndef test_legend_face_edgecolor():\n    # Smoke test for PolyCollection legend handler with 'face' edgecolor.\n    fig, ax = plt.subplots()\n    ax.fill_between([0, 1, 2], [1, 2, 3], [2, 3, 4],\n                    facecolor='r', edgecolor='face', label='Fill')\n    ax.legend()\n\n\ndef test_legend_text_axes():\n    fig, ax = plt.subplots()\n    ax.plot([1, 2], [3, 4], label='line')\n    leg = ax.legend()\n\n    assert leg.axes is ax\n    assert leg.get_texts()[0].axes is ax\n\n\ndef test_handlerline2d():\n    # Test marker consistency for monolithic Line2D legend handler (#11357).\n    fig, ax = plt.subplots()\n    ax.scatter([0, 1], [0, 1], marker=\"v\")\n    handles = [mlines.Line2D([0], [0], marker=\"v\")]\n    leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n    assert handles[0].get_marker() == leg.legend_handles[0].get_marker()\n\n\ndef test_subfigure_legend():\n    # Test that legend can be added to subfigure (#20723)\n    subfig = plt.figure().subfigures()\n    ax = subfig.subplots()\n    ax.plot([0, 1], [0, 1], label=\"line\")\n    leg = subfig.legend()\n    assert leg.figure is subfig\n\n\ndef test_setting_alpha_keeps_polycollection_color():\n    pc = plt.fill_between([0, 1], [2, 3], color='#123456', label='label')\n    patch = plt.legend().get_patches()[0]\n    patch.set_alpha(0.5)\n    assert patch.get_facecolor()[:3] == tuple(pc.get_facecolor()[0][:3])\n    assert patch.get_edgecolor()[:3] == tuple(pc.get_edgecolor()[0][:3])\n\n\ndef test_legend_markers_from_line2d():\n    # Test that markers can be copied for legend lines (#17960)\n    _markers = ['.', '*', 'v']\n    fig, ax = plt.subplots()\n    lines = [mlines.Line2D([0], [0], ls='None', marker=mark)\n             for mark in _markers]\n    labels = [\"foo\", \"bar\", \"xyzzy\"]\n    markers = [line.get_marker() for line in lines]\n    legend = ax.legend(lines, labels)\n\n    new_markers = [line.get_marker() for line in legend.get_lines()]\n    new_labels = [text.get_text() for text in legend.get_texts()]\n\n    assert markers == new_markers == _markers\n    assert labels == new_labels\n\n\n@check_figures_equal()\ndef test_ncol_ncols(fig_test, fig_ref):\n    # Test that both ncol and ncols work\n    strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    ncols = 3\n    fig_test.legend(strings, ncol=ncols)\n    fig_ref.legend(strings, ncols=ncols)\n\n\ndef test_loc_invalid_tuple_exception():\n    # check that exception is raised if the loc arg\n    # of legend is not a 2-tuple of numbers\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not \\\\(1.1,\\\\)')):\n        ax.legend(loc=(1.1, ))\n\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not \\\\(0.481, 0.4227, 0.4523\\\\)')):\n        ax.legend(loc=(0.481, 0.4227, 0.4523))\n\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not \\\\(0.481, \\'go blue\\'\\\\)')):\n        ax.legend(loc=(0.481, \"go blue\"))\n\n\ndef test_loc_valid_tuple():\n    fig, ax = plt.subplots()\n    ax.legend(loc=(0.481, 0.442))\n    ax.legend(loc=(1, 2))\n\n\ndef test_loc_valid_list():\n    fig, ax = plt.subplots()\n    ax.legend(loc=[0.481, 0.442])\n    ax.legend(loc=[1, 2])\n\n\ndef test_loc_invalid_list_exception():\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not \\\\[1.1, 2.2, 3.3\\\\]')):\n        ax.legend(loc=[1.1, 2.2, 3.3])\n\n\ndef test_loc_invalid_type():\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError, match=(\"loc must be string, coordinate \"\n                       \"tuple, or an integer 0-10, not {'not': True}\")):\n        ax.legend(loc={'not': True})\n\n\ndef test_loc_validation_numeric_value():\n    fig, ax = plt.subplots()\n    ax.legend(loc=0)\n    ax.legend(loc=1)\n    ax.legend(loc=5)\n    ax.legend(loc=10)\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not 11')):\n        ax.legend(loc=11)\n\n    with pytest.raises(ValueError, match=('loc must be string, coordinate '\n                       'tuple, or an integer 0-10, not -1')):\n        ax.legend(loc=-1)\n\n\ndef test_loc_validation_string_value():\n    fig, ax = plt.subplots()\n    ax.legend(loc='best')\n    ax.legend(loc='upper right')\n    ax.legend(loc='best')\n    ax.legend(loc='upper right')\n    ax.legend(loc='upper left')\n    ax.legend(loc='lower left')\n    ax.legend(loc='lower right')\n    ax.legend(loc='right')\n    ax.legend(loc='center left')\n    ax.legend(loc='center right')\n    ax.legend(loc='lower center')\n    ax.legend(loc='upper center')\n    with pytest.raises(ValueError, match=\"'wrong' is not a valid value for\"):\n        ax.legend(loc='wrong')\n"
    }
  ],
  "questions": [
    "- Do you know why this bug is happening?\r\nhttps://github.com/matplotlib/matplotlib/blob/ab7917a89dc56165d695fa4b90200f2cacafcd59/lib/matplotlib/legend.py#L608-L615\r\n\r\nNo validation is done when setting values for `_loc_real`. We do check strings on line 473, which is why we don't face this issue there."
  ],
  "golden_answers": [
    "The work here is to :\r\n\r\n - sort out what the validation _should be_ (read the code where the above traceback starts)\r\n - add logic to `Legend.__init__` to validate loc\r\n - add tests\r\n - update docstring to legend (in both `Legend` and `Axes.legend`)\r\n\r\nThis is a good first issue because it should only require understanding a narrow section of the code and no API design (it is already broken for these inputs, we just want it to break _better_)."
  ],
  "questions_generated": [
    "What is the main issue identified in the Matplotlib repository regarding the 'loc' argument in the 'legend' function?",
    "Why does the error occur only when 'plt.show()' is called and not immediately when the 'legend' function is called?",
    "How does the current implementation handle string values for the 'loc' argument differently compared to tuples or other non-string values?",
    "What part of the 'matplotlib/legend.py' file is responsible for setting the '_loc_real' attribute without performing validation?",
    "What could be a potential solution to address the bug related to the 'loc' argument validation in the 'legend' function?"
  ],
  "golden_answers_generated": [
    "The main issue is that when passing non-string values to the 'loc' argument in the 'legend' function, validation is not performed. As a result, invalid inputs do not raise errors immediately but instead cause exceptions later during the 'show()' call.",
    "The error occurs during the 'plt.show()' call because the invalid 'loc' argument is not validated when passed to the 'legend' function. It only causes an exception when the rendering process tries to unpack the 'loc' values, expecting a specific format, leading to a 'ValueError'.",
    "For string values, the current implementation performs validation by checking if the provided value is one of the supported options, such as 'best', 'upper right', etc. This validation is performed using the '_api.check_getitem' function, which raises an error if the string is not valid. However, this validation is not applied to tuples or non-string values.",
    "The section responsible for this is lines 608-615 in the 'matplotlib/legend.py' file. This part assigns the 'loc' argument to the '_loc_real' attribute without performing any checks to validate the format or content of the argument.",
    "A potential solution could involve implementing additional validation logic for non-string 'loc' values, similar to the existing validation for string values. This could involve checking the format and content of tuple values to ensure they meet expected criteria before proceeding with the legend creation."
  ]
}