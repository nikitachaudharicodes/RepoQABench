{
  "repo_name": "matplotlib_matplotlib",
  "issue_id": "17918",
  "issue_description": "# Extend hatch reference\n\nFollowup to #17884.\r\n\r\nðŸ˜² I just learned that you can\r\n\r\n- repeat symbols to increase density, e.g. `hatch='//'`\r\n- combine symbols, e.g. `hatch='/-'` for a rhomic pattern\r\n\r\nTo do:\r\n\r\n- Add both variants to the hatch style reference. I'd go for description + example below the existing overview.\r\n- For the existing overview reduce the figure size to (9, 4.5). The figure is currently larger than the available horizontal space and is thus scaled down resulting in a blurred appearance.\r\n\r\nPing @forrestm: You might be interested in picking this up.",
  "issue_comments": [
    {
      "id": 658175503,
      "user": "forrestm",
      "body": "Absolutely, thanks. "
    },
    {
      "id": 658186919,
      "user": "jklymak",
      "body": "See https://github.com/matplotlib/matplotlib/pull/17917"
    },
    {
      "id": 658187481,
      "user": "WeatherGod",
      "body": "I think this lends credence to the argument that there should be two separate things, a quick-to-grok reference of the available hatches (which was recently merged into the documentation), and a demo showcasing what is possible with the hatches like this. The first is a useful reference table, while the second is showcasing via code how to use hatches."
    },
    {
      "id": 658191757,
      "user": "timhoffm",
      "body": "I would split it slightly differently:\r\n\r\n- Reference: \"Which hatches can I use?\". This includes the basic hatches as well as repetition and composition rules.\r\n- Example: \"How do I apply hatches?\". Example plot(s) using selected hatches. "
    },
    {
      "id": 658197927,
      "user": "jklymak",
      "body": "I'd just put the \"reference only\" on a cheatsheet.  \r\n\r\nThe fundamental problem is too many examples.  If I were organizing the examples featuring \"hatch\" I'd just put them all on one page and call it \"hatching\".  Then if someone wants to add hatches to a contour or a bar, they would find their example there.  To me this would be much more sensible than one hatch examples in \"lines, bars and markers\", one in \"images contours and fields\" and, now, two in \"shapes and collections\".  \r\n\r\nBut clearly I am outvoted on this...  "
    },
    {
      "id": 658268107,
      "user": "story645",
      "body": "> I'd just put them all on one page and call it \"hatching\". Then if someone wants to add hatches to a contour or a bar, they would find their example there. To me this would be much more sensible than one hatch examples in \"lines, bars and markers\", one in \"images contours and fields\" and, now, two in \"shapes and collections\".\r\n\r\nI actually agree w/ you here, but I think it's a question of what's the focus of the example, and also the real solution here probably is if we could tag examples and then the user could filter down to just the tags they're interested in. "
    },
    {
      "id": 658270891,
      "user": "jklymak",
      "body": "... again, I don't think there is any benefit to examples being restricted to only one \"focus\", \"purpose\", or type of user.  We are needlessly segmenting information.  "
    },
    {
      "id": 658285457,
      "user": "story645",
      "body": ">... again, I don't think there is any benefit to examples being restricted to only one \"focus\", \"purpose\", or type of user. We are needlessly segmenting information.\r\n\r\nI find it sometimes really hard w/ some of the more complex examples to parse out which piece of code is doing the thing I'm interested in and that's fundamentally why I want the smaller examples to scaffold the more complex ones (that I think should more often be smallish tutorials of building block, building block, composite). And maybe you're right that the reference examples shouldn't really live in the gallery but that seems to be the first place many users look. \r\n\r\nAlso the drum I keep banging is that it's a discoverability problem - is the user looking for hatches or are they looking for images and see oh hatching might be cool, do they know we call colormapping normalization, etc? Especially w/ the gallery having so many images, a skim often isn't enough to find the thing you're after...and I think the complex examples risk obscuring that even more. "
    },
    {
      "id": 658307021,
      "user": "forrestm",
      "body": "I have created the PR-- Added density and combination hatching examples #17921 . I created the combination examples shown below. Let me know if different combinations are preferred.\r\n![download-1](https://user-images.githubusercontent.com/11200528/87456228-3ddb3d80-c5cc-11ea-98ae-a2f813a1bc94.png)\r\n "
    },
    {
      "id": 658307215,
      "user": "jklymak",
      "body": "> I find it sometimes really hard w/ some of the more complex examples to parse out which piece of code is doing the thing I'm interested in and that's fundamentally why I want the smaller examples to scaffold the more complex ones\r\n\r\nI would address that by having the individual examples increase in complexity, versus having multiple examples.  \r\n\r\n> Also the drum I keep banging is that it's a discoverability problem \r\n\r\nThats a good drum to bang.  But I would still say its easier to discover things if the library features are laid out concisely.  "
    },
    {
      "id": 658335423,
      "user": "story645",
      "body": "Thanks @forrestm - I particularly like '+o' ðŸ˜‰ \r\n\r\n> I would address that by having the individual examples increase in complexity, versus having multiple examples.\r\n\r\nMy concern their is users would focus on the final figure in the example and not realize that the building blocks they also need are in there...and we can't cover every possible fully fleshed out figure. "
    },
    {
      "id": 658349976,
      "user": "jklymak",
      "body": "> My concern their is users would focus on the final figure in the example\r\n\r\nExamples can have multiple figures.  I don't know why users would fixate on the final figure and not the first.  "
    },
    {
      "id": 658362578,
      "user": "story645",
      "body": "> Examples can have multiple figures. I don't know why users would fixate on the final figure and not the first.\r\n\r\nbecause that's usually the thumbnail being used to generate the sphinx gallery preview which is what folks are using to browse the gallery. "
    },
    {
      "id": 658364989,
      "user": "jklymak",
      "body": "The thumbnail is the first figure by [default](https://sphinx-gallery.github.io/stable/configuration.html#choosing-the-thumbnail-image), and you can change which figure gets the thumbnail with a comment near the top:\r\n\r\n```\r\n# sphinx_gallery_thumbnail_number = 7\r\n```"
    },
    {
      "id": 658403556,
      "user": "story645",
      "body": "In the example/gallery case, what would you choose as the thumbnail/title combination to fully convey that the example has all those steps? "
    },
    {
      "id": 658409163,
      "user": "timhoffm",
      "body": "Closed by #17921.\r\n\r\nI propose to leave the example / reference organization discussion for another time. Possibly with a separate issue or in the dev call."
    }
  ],
  "text_context": "# Extend hatch reference\n\nFollowup to #17884.\r\n\r\nðŸ˜² I just learned that you can\r\n\r\n- repeat symbols to increase density, e.g. `hatch='//'`\r\n- combine symbols, e.g. `hatch='/-'` for a rhomic pattern\r\n\r\nTo do:\r\n\r\n- Add both variants to the hatch style reference. I'd go for description + example below the existing overview.\r\n- For the existing overview reduce the figure size to (9, 4.5). The figure is currently larger than the available horizontal space and is thus scaled down resulting in a blurred appearance.\r\n\r\nPing @forrestm: You might be interested in picking this up.\n\nAbsolutely, thanks. \n\nSee https://github.com/matplotlib/matplotlib/pull/17917\n\nI think this lends credence to the argument that there should be two separate things, a quick-to-grok reference of the available hatches (which was recently merged into the documentation), and a demo showcasing what is possible with the hatches like this. The first is a useful reference table, while the second is showcasing via code how to use hatches.\n\nI would split it slightly differently:\r\n\r\n- Reference: \"Which hatches can I use?\". This includes the basic hatches as well as repetition and composition rules.\r\n- Example: \"How do I apply hatches?\". Example plot(s) using selected hatches. \n\nI'd just put the \"reference only\" on a cheatsheet.  \r\n\r\nThe fundamental problem is too many examples.  If I were organizing the examples featuring \"hatch\" I'd just put them all on one page and call it \"hatching\".  Then if someone wants to add hatches to a contour or a bar, they would find their example there.  To me this would be much more sensible than one hatch examples in \"lines, bars and markers\", one in \"images contours and fields\" and, now, two in \"shapes and collections\".  \r\n\r\nBut clearly I am outvoted on this...  \n\n> I'd just put them all on one page and call it \"hatching\". Then if someone wants to add hatches to a contour or a bar, they would find their example there. To me this would be much more sensible than one hatch examples in \"lines, bars and markers\", one in \"images contours and fields\" and, now, two in \"shapes and collections\".\r\n\r\nI actually agree w/ you here, but I think it's a question of what's the focus of the example, and also the real solution here probably is if we could tag examples and then the user could filter down to just the tags they're interested in. \n\n... again, I don't think there is any benefit to examples being restricted to only one \"focus\", \"purpose\", or type of user.  We are needlessly segmenting information.  \n\n>... again, I don't think there is any benefit to examples being restricted to only one \"focus\", \"purpose\", or type of user. We are needlessly segmenting information.\r\n\r\nI find it sometimes really hard w/ some of the more complex examples to parse out which piece of code is doing the thing I'm interested in and that's fundamentally why I want the smaller examples to scaffold the more complex ones (that I think should more often be smallish tutorials of building block, building block, composite). And maybe you're right that the reference examples shouldn't really live in the gallery but that seems to be the first place many users look. \r\n\r\nAlso the drum I keep banging is that it's a discoverability problem - is the user looking for hatches or are they looking for images and see oh hatching might be cool, do they know we call colormapping normalization, etc? Especially w/ the gallery having so many images, a skim often isn't enough to find the thing you're after...and I think the complex examples risk obscuring that even more. \n\nI have created the PR-- Added density and combination hatching examples #17921 . I created the combination examples shown below. Let me know if different combinations are preferred.\r\n![download-1](https://user-images.githubusercontent.com/11200528/87456228-3ddb3d80-c5cc-11ea-98ae-a2f813a1bc94.png)\r\n \n\n> I find it sometimes really hard w/ some of the more complex examples to parse out which piece of code is doing the thing I'm interested in and that's fundamentally why I want the smaller examples to scaffold the more complex ones\r\n\r\nI would address that by having the individual examples increase in complexity, versus having multiple examples.  \r\n\r\n> Also the drum I keep banging is that it's a discoverability problem \r\n\r\nThats a good drum to bang.  But I would still say its easier to discover things if the library features are laid out concisely.  \n\nThanks @forrestm - I particularly like '+o' ðŸ˜‰ \r\n\r\n> I would address that by having the individual examples increase in complexity, versus having multiple examples.\r\n\r\nMy concern their is users would focus on the final figure in the example and not realize that the building blocks they also need are in there...and we can't cover every possible fully fleshed out figure. \n\n> My concern their is users would focus on the final figure in the example\r\n\r\nExamples can have multiple figures.  I don't know why users would fixate on the final figure and not the first.  \n\n> Examples can have multiple figures. I don't know why users would fixate on the final figure and not the first.\r\n\r\nbecause that's usually the thumbnail being used to generate the sphinx gallery preview which is what folks are using to browse the gallery. \n\nThe thumbnail is the first figure by [default](https://sphinx-gallery.github.io/stable/configuration.html#choosing-the-thumbnail-image), and you can change which figure gets the thumbnail with a comment near the top:\r\n\r\n```\r\n# sphinx_gallery_thumbnail_number = 7\r\n```\n\nIn the example/gallery case, what would you choose as the thumbnail/title combination to fully convey that the example has all those steps? \n\nClosed by #17921.\r\n\r\nI propose to leave the example / reference organization discussion for another time. Possibly with a separate issue or in the dev call.",
  "pr_link": "https://github.com/matplotlib/matplotlib/pull/17917",
  "code_context": [
    {
      "filename": "examples/shapes_and_collections/hatch_demo.py",
      "content": "\"\"\"\n=======\nHatches\n=======\n\nHatching (pattern filled polygons) is currently supported in the backends\nPS, PDF, SVG and Agg. The backends OSX, WX and Cairo ignore hatching.\n\nSee also :doc:`/gallery/images_contours_and_fields/contourf_hatching` for\nan example using `~.Axes.contourf`.\n\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Ellipse, Polygon, Rectangle\n\nx = np.arange(1, 5)\ny1 = np.arange(1, 5)\ny2 = np.ones(y1.shape) * 4\n\nfig = plt.figure()\naxs = fig.subplot_mosaic([['bar1', 'patches'], ['bar2', 'patches']])\n\nax = axs['bar1']\nax.bar(x, y1, edgecolor='black', hatch=\"/\")\nax.bar(x, y2, bottom=y1, edgecolor='black', hatch='//')\n\nax = axs['bar2']\nax.bar(x, y1, edgecolor='black', hatch=['-', '+', 'x', '\\\\'])\nax.bar(x, y2, bottom=y1, edgecolor='black', hatch=['*', 'o', 'O', '.'])\n\nax = axs['patches']\nax.add_patch(Ellipse((4, 50), 10, 10, fill=True, hatch='*', facecolor='y'))\nax.add_patch(Polygon([(10, 20), (30, 50), (50, 10)], hatch='\\\\/...',\n                     facecolor='g'))\nx = np.arange(0, 40, 0.2)\nax.fill_between(x, np.sin(x) * 4 + 30, y2=0, hatch='///', zorder=2, fc='c')\nax.set_xlim([0, 40])\nax.set_ylim([10, 60])\nax.set_aspect(1)\nplt.show()\n\n##############################################################################\n# Hatch style reference\n# ---------------------\n#\n# For convenience we document the 9 different possible hatch styles using the\n# code below.  Note that repeating the hatch character increases the density of\n# of the hatches, as shown in the first row and with \"++\".  Note also that\n# hatches can be combined (\"/+O\" in the first row).\n\nfig, axs = plt.subplots(3, 4, constrained_layout=True, figsize=(5, 4))\n\nhatches = ['/', '///', '/+O', '\\\\',\n           '|', '-', '++', 'x',\n           'o', 'O', '.', '*']\n\nfor ax, h in zip(axs.flat, hatches):\n    ax.add_patch(Rectangle((0, 0), 2, 2, fill=False, hatch=h))\n    ax.text(1, -0.5, f\"' {h} '\", size=10, ha=\"center\")\n    ax.axis('equal')\n    ax.axis('off')\nplt.show()\n\n\n#############################################################################\n#\n# ------------\n#\n# References\n# \"\"\"\"\"\"\"\"\"\"\n#\n# The use of the following functions, methods, classes and modules is shown\n# in this example:\n\nimport matplotlib\nmatplotlib.patches\nmatplotlib.patches.Ellipse\nmatplotlib.patches.Polygon\nmatplotlib.axes.Axes.add_patch\nmatplotlib.patches.Patch.set_hatch\nmatplotlib.axes.Axes.bar\nmatplotlib.pyplot.bar\n"
    }
  ]
}