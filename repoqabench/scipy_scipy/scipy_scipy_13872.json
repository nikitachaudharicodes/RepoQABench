{
  "repo_name": "scipy_scipy",
  "issue_id": "13872",
  "issue_description": "# Add method details or reference to `scipy.integrate.dblquad`\n\n**Is your feature request related to a problem? Please describe.**\r\nThe documentation for `scipy.integrate.dblquad` doesn't explain or have a reference to the numerical algorithm(s) used to carry out the integration. (https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad)\r\n\r\n**Describe the solution you'd like**\r\nAdd method details or reference to the documentation of `scipy.integrate.dblquad`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context (e.g. screenshots)**\r\n",
  "issue_comments": [
    {
      "id": 820965333,
      "user": "tupui",
      "body": "Hi, improvement to the documentation is always welcomed. Are you proposing to help here?\r\n\r\nIn this case we should probably refer to the main function `scipy.integrate.quad` for more details."
    },
    {
      "id": 839318476,
      "user": "mdhaber",
      "body": "Good first issue, I think: confirm that `dblquad` uses QUADPACK, research QUADPACK, add relevant findings to documentation (of `dblquad`, `tplquad`, etc.)."
    },
    {
      "id": 850505773,
      "user": "Uttam-Singhh",
      "body": "Hello, I would love to work on this issue!\r\nPlease assign me this if no one is working.\r\nAlso, I am new to Open source and Scipy so please guide me more on this if possible."
    },
    {
      "id": 1103191802,
      "user": "mdhaber",
      "body": "@Kai-Striega here's another task that doesn't necessarily need domain knowledge from the outset - research the find out what the quadrature functions use for integration and add references. "
    },
    {
      "id": 1103274385,
      "user": "Kai-Striega",
      "body": "@mdhaber I'll get started with this one. At the moment I'm looking at working on SciPy Tuesday and Thursday nights (+ maybe some weekends).  "
    },
    {
      "id": 1105079860,
      "user": "Kai-Striega",
      "body": "@mdhaber I can confirm that these functions all (eventually) use QUADPACK functions. `nquad` can call any of them, `dblquad` and `tplquad` call either ` _qagse` or `_qagie` (I'm not sure which one, yet)\r\n\r\nIt gets a bit complicated from here. `dblquad` and `tplquad` both wrap the function `nquad` which is itself a wrapper around `quad` (1d case). `quad` then wraps both `_quad` and `_quad_weighted` that decide which QUADPACK function to call."
    },
    {
      "id": 1105238134,
      "user": "mdhaber",
      "body": "Thanks for working on this!\r\nCould you tell what algorithms they use? It would be great if we could cite QUADPACK documentation and original algorithms papers. Please see Ralf's comments [here] (https://github.com/scipy/scipy/pull/14249#issuecomment-864392575)."
    },
    {
      "id": 1107352722,
      "user": "Kai-Striega",
      "body": "The algorithms used by `dblquad`, `tplquad` etc. use different algorithms depending on what boundary values are given. But I think it would be ok if we listed out both methods with references. Saying that I'm having some problems finding the original references.\r\n\r\nI've listed the conditions for each function to be called in this [google sheet](https://docs.google.com/spreadsheets/d/1b_3azJGi300XdceJIaGl6GDkXFbN6uTIFJUhzYErSy8/edit?usp=sharing). Note that this includes both `_quad` and `_quad_weighted`.\r\n\r\n"
    },
    {
      "id": 1107523101,
      "user": "mdhaber",
      "body": "I think this might be helpful:\r\nhttps://maxima.sourceforge.io/docs/manual/maxima_99.html\r\nThe primary reference seems to be \"QUADPACK: A Subroutine Package for Automatic Integration\" but I haven't yet found a free copy."
    },
    {
      "id": 1107777635,
      "user": "Kai-Striega",
      "body": "I've found a [copy](https://github.com/scipy/scipy/files/8549172/quadpack-a-subroutine-package-for-automatic-integration_compress.pdf) of \"QUADPACK: A Subroutine Package for Automatic Integration\". I haven't read through the whole book. There's a summary of the routines starting at page 56 which I think will give a good starting point. This does not reference the implementation of each function.\r\n\r\nI think referencing the algorithm used by each function could be difficult as some functions use many different algorithms. Figure 6.1 (page 129) shows the inner structure of the package showing that many of the functions actually use multiple different algorithms depending on certain choices.\r\n\r\nGoing back to the original problem of `dblquad`, `tplquad`, `nquad` etc. I think it would be better to explain that they are using QUADPACK and which functions are being under what circumstances.  And to possibly give a short summary of what the algorithm does as outlined on page 56.\r\n"
    },
    {
      "id": 1108605465,
      "user": "mdhaber",
      "body": "gh-16043 started but didn't quite close this.\r\nWhat's the plan for the higher dimensional quadrature? Since these don't accept weights, we probably don't want to repeat the whole table."
    },
    {
      "id": 1109143134,
      "user": "Kai-Striega",
      "body": "sorry I planned to keep working on gh-16043 before merging it. I opened a PR but it should have been a draft. My bad. \r\n\r\nI don't think we need the whole table. Using `dblquad` as an example, it does not take `weight` or `points` arguments. This leaves only `qagse` and `qagie`. "
    }
  ],
  "text_context": "# Add method details or reference to `scipy.integrate.dblquad`\n\n**Is your feature request related to a problem? Please describe.**\r\nThe documentation for `scipy.integrate.dblquad` doesn't explain or have a reference to the numerical algorithm(s) used to carry out the integration. (https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad)\r\n\r\n**Describe the solution you'd like**\r\nAdd method details or reference to the documentation of `scipy.integrate.dblquad`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context (e.g. screenshots)**\r\n\n\nHi, improvement to the documentation is always welcomed. Are you proposing to help here?\r\n\r\nIn this case we should probably refer to the main function `scipy.integrate.quad` for more details.\n\nGood first issue, I think: confirm that `dblquad` uses QUADPACK, research QUADPACK, add relevant findings to documentation (of `dblquad`, `tplquad`, etc.).\n\nHello, I would love to work on this issue!\r\nPlease assign me this if no one is working.\r\nAlso, I am new to Open source and Scipy so please guide me more on this if possible.\n\n@Kai-Striega here's another task that doesn't necessarily need domain knowledge from the outset - research the find out what the quadrature functions use for integration and add references. \n\n@mdhaber I'll get started with this one. At the moment I'm looking at working on SciPy Tuesday and Thursday nights (+ maybe some weekends).  \n\n@mdhaber I can confirm that these functions all (eventually) use QUADPACK functions. `nquad` can call any of them, `dblquad` and `tplquad` call either ` _qagse` or `_qagie` (I'm not sure which one, yet)\r\n\r\nIt gets a bit complicated from here. `dblquad` and `tplquad` both wrap the function `nquad` which is itself a wrapper around `quad` (1d case). `quad` then wraps both `_quad` and `_quad_weighted` that decide which QUADPACK function to call.\n\nThanks for working on this!\r\nCould you tell what algorithms they use? It would be great if we could cite QUADPACK documentation and original algorithms papers. Please see Ralf's comments [here] (https://github.com/scipy/scipy/pull/14249#issuecomment-864392575).\n\nThe algorithms used by `dblquad`, `tplquad` etc. use different algorithms depending on what boundary values are given. But I think it would be ok if we listed out both methods with references. Saying that I'm having some problems finding the original references.\r\n\r\nI've listed the conditions for each function to be called in this [google sheet](https://docs.google.com/spreadsheets/d/1b_3azJGi300XdceJIaGl6GDkXFbN6uTIFJUhzYErSy8/edit?usp=sharing). Note that this includes both `_quad` and `_quad_weighted`.\r\n\r\n\n\nI think this might be helpful:\r\nhttps://maxima.sourceforge.io/docs/manual/maxima_99.html\r\nThe primary reference seems to be \"QUADPACK: A Subroutine Package for Automatic Integration\" but I haven't yet found a free copy.\n\nI've found a [copy](https://github.com/scipy/scipy/files/8549172/quadpack-a-subroutine-package-for-automatic-integration_compress.pdf) of \"QUADPACK: A Subroutine Package for Automatic Integration\". I haven't read through the whole book. There's a summary of the routines starting at page 56 which I think will give a good starting point. This does not reference the implementation of each function.\r\n\r\nI think referencing the algorithm used by each function could be difficult as some functions use many different algorithms. Figure 6.1 (page 129) shows the inner structure of the package showing that many of the functions actually use multiple different algorithms depending on certain choices.\r\n\r\nGoing back to the original problem of `dblquad`, `tplquad`, `nquad` etc. I think it would be better to explain that they are using QUADPACK and which functions are being under what circumstances.  And to possibly give a short summary of what the algorithm does as outlined on page 56.\r\n\n\ngh-16043 started but didn't quite close this.\r\nWhat's the plan for the higher dimensional quadrature? Since these don't accept weights, we probably don't want to repeat the whole table.\n\nsorry I planned to keep working on gh-16043 before merging it. I opened a PR but it should have been a draft. My bad. \r\n\r\nI don't think we need the whole table. Using `dblquad` as an example, it does not take `weight` or `points` arguments. This leaves only `qagse` and `qagie`. ",
  "pr_link": "https://github.com/scipy/scipy/pull/14249",
  "code_context": [
    {
      "filename": "scipy/integrate/quadpack.py",
      "content": "# Author: Travis Oliphant 2001\n# Author: Nathan Woods 2013 (nquad &c)\nimport sys\nimport warnings\nfrom functools import partial\n\nfrom . import _quadpack\nimport numpy\nfrom numpy import Inf\n\n__all__ = ['quad', 'dblquad', 'tplquad', 'nquad', 'quad_explain',\n           'IntegrationWarning']\n\n\nerror = _quadpack.error\n\nclass IntegrationWarning(UserWarning):\n    \"\"\"\n    Warning on issues during integration.\n    \"\"\"\n    pass\n\n\ndef quad_explain(output=sys.stdout):\n    \"\"\"\n    Print extra information about integrate.quad() parameters and returns.\n\n    Parameters\n    ----------\n    output : instance with \"write\" method, optional\n        Information about `quad` is passed to ``output.write()``.\n        Default is ``sys.stdout``.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    We can show detailed information of the `integrate.quad` function in stdout:\n\n    >>> from scipy.integrate import quad_explain\n    >>> quad_explain()\n\n    \"\"\"\n    output.write(quad.__doc__)\n\n\ndef quad(func, a, b, args=(), full_output=0, epsabs=1.49e-8, epsrel=1.49e-8,\n         limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50,\n         limlst=50):\n    \"\"\"\n    Compute a definite integral.\n\n    Integrate func from `a` to `b` (possibly infinite interval) using a\n    technique from the Fortran library QUADPACK.\n\n    Parameters\n    ----------\n    func : {function, scipy.LowLevelCallable}\n        A Python function or method to integrate. If `func` takes many\n        arguments, it is integrated along the axis corresponding to the\n        first argument.\n\n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n\n            double func(double x)\n            double func(double x, void *user_data)\n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n\n        The ``user_data`` is the data contained in the `scipy.LowLevelCallable`.\n        In the call forms with ``xx``,  ``n`` is the length of the ``xx``\n        array which contains ``xx[0] == x`` and the rest of the items are\n        numbers contained in the ``args`` argument of quad.\n\n        In addition, certain ctypes call signatures are supported for\n        backward compatibility, but those should not be used in new code.\n    a : float\n        Lower limit of integration (use -numpy.inf for -infinity).\n    b : float\n        Upper limit of integration (use numpy.inf for +infinity).\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    full_output : int, optional\n        Non-zero to return a dictionary of integration information.\n        If non-zero, warning messages are also suppressed and the\n        message is appended to the output tuple.\n\n    Returns\n    -------\n    y : float\n        The integral of func from `a` to `b`.\n    abserr : float\n        An estimate of the absolute error in the result.\n    infodict : dict\n        A dictionary containing additional information.\n        Run scipy.integrate.quad_explain() for more information.\n    message\n        A convergence message.\n    explain\n        Appended only with 'cos' or 'sin' weighting and infinite\n        integration limits, it contains an explanation of the codes in\n        infodict['ierlst']\n\n    Other Parameters\n    ----------------\n    epsabs : float or int, optional\n        Absolute error tolerance. Default is 1.49e-8. `quad` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = integral of `func` from `a` to `b`, and ``result`` is the\n        numerical approximation. See `epsrel` below.\n    epsrel : float or int, optional\n        Relative error tolerance. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n    limit : float or int, optional\n        An upper bound on the number of subintervals used in the adaptive\n        algorithm.\n    points : (sequence of floats,ints), optional\n        A sequence of break points in the bounded integration interval\n        where local difficulties of the integrand may occur (e.g.,\n        singularities, discontinuities). The sequence does not have\n        to be sorted. Note that this option cannot be used in conjunction\n        with ``weight``.\n    weight : float or int, optional\n        String indicating weighting function. Full explanation for this\n        and the remaining arguments can be found below.\n    wvar : optional\n        Variables for use with weighting functions.\n    wopts : optional\n        Optional input for reusing Chebyshev moments.\n    maxp1 : float or int, optional\n        An upper bound on the number of Chebyshev moments.\n    limlst : int, optional\n        Upper bound on the number of cycles (>=3) for use with a sinusoidal\n        weighting and an infinite end-point.\n\n    See Also\n    --------\n    dblquad : double integral\n    tplquad : triple integral\n    nquad : n-dimensional integrals (uses `quad` recursively)\n    fixed_quad : fixed-order Gaussian quadrature\n    quadrature : adaptive Gaussian quadrature\n    odeint : ODE integrator\n    ode : ODE integrator\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n\n    Notes\n    -----\n\n    **Extra information for quad() inputs and outputs**\n\n    If full_output is non-zero, then the third output argument\n    (infodict) is a dictionary with entries as tabulated below. For\n    infinite limits, the range is transformed to (0,1) and the\n    optional outputs are given with respect to this transformed range.\n    Let M be the input argument limit and let K be infodict['last'].\n    The entries are:\n\n    'neval'\n        The number of function evaluations.\n    'last'\n        The number, K, of subintervals produced in the subdivision process.\n    'alist'\n        A rank-1 array of length M, the first K elements of which are the\n        left end points of the subintervals in the partition of the\n        integration range.\n    'blist'\n        A rank-1 array of length M, the first K elements of which are the\n        right end points of the subintervals.\n    'rlist'\n        A rank-1 array of length M, the first K elements of which are the\n        integral approximations on the subintervals.\n    'elist'\n        A rank-1 array of length M, the first K elements of which are the\n        moduli of the absolute error estimates on the subintervals.\n    'iord'\n        A rank-1 integer array of length M, the first L elements of\n        which are pointers to the error estimates over the subintervals\n        with ``L=K`` if ``K<=M/2+2`` or ``L=M+1-K`` otherwise. Let I be the\n        sequence ``infodict['iord']`` and let E be the sequence\n        ``infodict['elist']``.  Then ``E[I[1]], ..., E[I[L]]`` forms a\n        decreasing sequence.\n\n    If the input argument points is provided (i.e., it is not None),\n    the following additional outputs are placed in the output\n    dictionary. Assume the points sequence is of length P.\n\n    'pts'\n        A rank-1 array of length P+2 containing the integration limits\n        and the break points of the intervals in ascending order.\n        This is an array giving the subintervals over which integration\n        will occur.\n    'level'\n        A rank-1 integer array of length M (=limit), containing the\n        subdivision levels of the subintervals, i.e., if (aa,bb) is a\n        subinterval of ``(pts[1], pts[2])`` where ``pts[0]`` and ``pts[2]``\n        are adjacent elements of ``infodict['pts']``, then (aa,bb) has level l\n        if ``|bb-aa| = |pts[2]-pts[1]| * 2**(-l)``.\n    'ndin'\n        A rank-1 integer array of length P+2. After the first integration\n        over the intervals (pts[1], pts[2]), the error estimates over some\n        of the intervals may have been increased artificially in order to\n        put their subdivision forward. This array has ones in slots\n        corresponding to the subintervals for which this happens.\n\n    **Weighting the integrand**\n\n    The input variables, *weight* and *wvar*, are used to weight the\n    integrand by a select list of functions. Different integration\n    methods are used to compute the integral with these weighting\n    functions, and these do not support specifying break points. The\n    possible values of weight and the corresponding weighting functions are.\n\n    ==========  ===================================   =====================\n    ``weight``  Weight function used                  ``wvar``\n    ==========  ===================================   =====================\n    'cos'       cos(w*x)                              wvar = w\n    'sin'       sin(w*x)                              wvar = w\n    'alg'       g(x) = ((x-a)**alpha)*((b-x)**beta)   wvar = (alpha, beta)\n    'alg-loga'  g(x)*log(x-a)                         wvar = (alpha, beta)\n    'alg-logb'  g(x)*log(b-x)                         wvar = (alpha, beta)\n    'alg-log'   g(x)*log(x-a)*log(b-x)                wvar = (alpha, beta)\n    'cauchy'    1/(x-c)                               wvar = c\n    ==========  ===================================   =====================\n\n    wvar holds the parameter w, (alpha, beta), or c depending on the weight\n    selected. In these expressions, a and b are the integration limits.\n\n    For the 'cos' and 'sin' weighting, additional inputs and outputs are\n    available.\n\n    For finite integration limits, the integration is performed using a\n    Clenshaw-Curtis method which uses Chebyshev moments. For repeated\n    calculations, these moments are saved in the output dictionary:\n\n    'momcom'\n        The maximum level of Chebyshev moments that have been computed,\n        i.e., if ``M_c`` is ``infodict['momcom']`` then the moments have been\n        computed for intervals of length ``|b-a| * 2**(-l)``,\n        ``l=0,1,...,M_c``.\n    'nnlog'\n        A rank-1 integer array of length M(=limit), containing the\n        subdivision levels of the subintervals, i.e., an element of this\n        array is equal to l if the corresponding subinterval is\n        ``|b-a|* 2**(-l)``.\n    'chebmo'\n        A rank-2 array of shape (25, maxp1) containing the computed\n        Chebyshev moments. These can be passed on to an integration\n        over the same interval by passing this array as the second\n        element of the sequence wopts and passing infodict['momcom'] as\n        the first element.\n\n    If one of the integration limits is infinite, then a Fourier integral is\n    computed (assuming w neq 0). If full_output is 1 and a numerical error\n    is encountered, besides the error message attached to the output tuple,\n    a dictionary is also appended to the output tuple which translates the\n    error codes in the array ``info['ierlst']`` to English messages. The\n    output information dictionary contains the following entries instead of\n    'last', 'alist', 'blist', 'rlist', and 'elist':\n\n    'lst'\n        The number of subintervals needed for the integration (call it ``K_f``).\n    'rslst'\n        A rank-1 array of length M_f=limlst, whose first ``K_f`` elements\n        contain the integral contribution over the interval\n        ``(a+(k-1)c, a+kc)`` where ``c = (2*floor(|w|) + 1) * pi / |w|``\n        and ``k=1,2,...,K_f``.\n    'erlst'\n        A rank-1 array of length ``M_f`` containing the error estimate\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.\n    'ierlst'\n        A rank-1 integer array of length ``M_f`` containing an error flag\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.  See the explanation dictionary (last entry\n        in the output tuple) for the meaning of the codes.\n\n    Examples\n    --------\n    Calculate :math:`\\\\int^4_0 x^2 dx` and compare with an analytic result\n\n    >>> from scipy import integrate\n    >>> x2 = lambda x: x**2\n    >>> integrate.quad(x2, 0, 4)\n    (21.333333333333332, 2.3684757858670003e-13)\n    >>> print(4**3 / 3.)  # analytical result\n    21.3333333333\n\n    Calculate :math:`\\\\int^\\\\infty_0 e^{-x} dx`\n\n    >>> invexp = lambda x: np.exp(-x)\n    >>> integrate.quad(invexp, 0, np.inf)\n    (1.0, 5.842605999138044e-11)\n\n    >>> f = lambda x,a : a*x\n    >>> y, err = integrate.quad(f, 0, 1, args=(1,))\n    >>> y\n    0.5\n    >>> y, err = integrate.quad(f, 0, 1, args=(3,))\n    >>> y\n    1.5\n\n    Calculate :math:`\\\\int^1_0 x^2 + y^2 dx` with ctypes, holding\n    y parameter as 1::\n\n        testlib.c =>\n            double func(int n, double args[n]){\n                return args[0]*args[0] + args[1]*args[1];}\n        compile to library testlib.*\n\n    ::\n\n       from scipy import integrate\n       import ctypes\n       lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\n       lib.func.restype = ctypes.c_double\n       lib.func.argtypes = (ctypes.c_int,ctypes.c_double)\n       integrate.quad(lib.func,0,1,(1))\n       #(1.3333333333333333, 1.4802973661668752e-14)\n       print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result\n       # 1.3333333333333333\n\n    Be aware that pulse shapes and other sharp features as compared to the\n    size of the integration interval may not be integrated correctly using\n    this method. A simplified example of this limitation is integrating a\n    y-axis reflected step function with many zero values within the integrals\n    bounds.\n\n    >>> y = lambda x: 1 if x<=0 else 0\n    >>> integrate.quad(y, -1, 1)\n    (1.0, 1.1102230246251565e-14)\n    >>> integrate.quad(y, -1, 100)\n    (1.0000000002199108, 1.0189464580163188e-08)\n    >>> integrate.quad(y, -1, 10000)\n    (0.0, 0.0)\n\n    \"\"\"\n    if not isinstance(args, tuple):\n        args = (args,)\n\n    # check the limits of integration: \\int_a^b, expect a < b\n    flip, a, b = b < a, min(a, b), max(a, b)\n\n    if weight is None:\n        retval = _quad(func, a, b, args, full_output, epsabs, epsrel, limit,\n                       points)\n    else:\n        if points is not None:\n            msg = (\"Break points cannot be specified when using weighted integrand.\\n\"\n                   \"Continuing, ignoring specified points.\")\n            warnings.warn(msg, IntegrationWarning, stacklevel=2)\n        retval = _quad_weight(func, a, b, args, full_output, epsabs, epsrel,\n                              limlst, limit, maxp1, weight, wvar, wopts)\n\n    if flip:\n        retval = (-retval[0],) + retval[1:]\n\n    ier = retval[-1]\n    if ier == 0:\n        return retval[:-1]\n\n    msgs = {80: \"A Python error occurred possibly while calling the function.\",\n             1: \"The maximum number of subdivisions (%d) has been achieved.\\n  If increasing the limit yields no improvement it is advised to analyze \\n  the integrand in order to determine the difficulties.  If the position of a \\n  local difficulty can be determined (singularity, discontinuity) one will \\n  probably gain from splitting up the interval and calling the integrator \\n  on the subranges.  Perhaps a special-purpose integrator should be used.\" % limit,\n             2: \"The occurrence of roundoff error is detected, which prevents \\n  the requested tolerance from being achieved.  The error may be \\n  underestimated.\",\n             3: \"Extremely bad integrand behavior occurs at some points of the\\n  integration interval.\",\n             4: \"The algorithm does not converge.  Roundoff error is detected\\n  in the extrapolation table.  It is assumed that the requested tolerance\\n  cannot be achieved, and that the returned result (if full_output = 1) is \\n  the best which can be obtained.\",\n             5: \"The integral is probably divergent, or slowly convergent.\",\n             6: \"The input is invalid.\",\n             7: \"Abnormal termination of the routine.  The estimates for result\\n  and error are less reliable.  It is assumed that the requested accuracy\\n  has not been achieved.\",\n            'unknown': \"Unknown error.\"}\n\n    if weight in ['cos','sin'] and (b == Inf or a == -Inf):\n        msgs[1] = \"The maximum number of cycles allowed has been achieved., e.e.\\n  of subintervals (a+(k-1)c, a+kc) where c = (2*int(abs(omega)+1))\\n  *pi/abs(omega), for k = 1, 2, ..., lst.  One can allow more cycles by increasing the value of limlst.  Look at info['ierlst'] with full_output=1.\"\n        msgs[4] = \"The extrapolation table constructed for convergence acceleration\\n  of the series formed by the integral contributions over the cycles, \\n  does not converge to within the requested accuracy.  Look at \\n  info['ierlst'] with full_output=1.\"\n        msgs[7] = \"Bad integrand behavior occurs within one or more of the cycles.\\n  Location and type of the difficulty involved can be determined from \\n  the vector info['ierlist'] obtained with full_output=1.\"\n        explain = {1: \"The maximum number of subdivisions (= limit) has been \\n  achieved on this cycle.\",\n                   2: \"The occurrence of roundoff error is detected and prevents\\n  the tolerance imposed on this cycle from being achieved.\",\n                   3: \"Extremely bad integrand behavior occurs at some points of\\n  this cycle.\",\n                   4: \"The integral over this cycle does not converge (to within the required accuracy) due to roundoff in the extrapolation procedure invoked on this cycle.  It is assumed that the result on this interval is the best which can be obtained.\",\n                   5: \"The integral over this cycle is probably divergent or slowly convergent.\"}\n\n    try:\n        msg = msgs[ier]\n    except KeyError:\n        msg = msgs['unknown']\n\n    if ier in [1,2,3,4,5,7]:\n        if full_output:\n            if weight in ['cos', 'sin'] and (b == Inf or a == -Inf):\n                return retval[:-1] + (msg, explain)\n            else:\n                return retval[:-1] + (msg,)\n        else:\n            warnings.warn(msg, IntegrationWarning, stacklevel=2)\n            return retval[:-1]\n\n    elif ier == 6:  # Forensic decision tree when QUADPACK throws ier=6\n        if epsabs <= 0:  # Small error tolerance - applies to all methods\n            if epsrel < max(50 * sys.float_info.epsilon, 5e-29):\n                msg = (\"If 'epsabs'<=0, 'epsrel' must be greater than both\"\n                       \" 5e-29 and 50*(machine epsilon).\")\n            elif weight in ['sin', 'cos'] and (abs(a) + abs(b) == Inf):\n                msg = (\"Sine or cosine weighted intergals with infinite domain\"\n                       \" must have 'epsabs'>0.\")\n\n        elif weight is None:\n            if points is None:  # QAGSE/QAGIE\n                msg = (\"Invalid 'limit' argument. There must be\"\n                       \" at least one subinterval\")\n            else:  # QAGPE\n                if not (min(a, b) <= min(points) <= max(points) <= max(a, b)):\n                    msg = (\"All break points in 'points' must lie within the\"\n                           \" integration limits.\")\n                elif len(points) >= limit:\n                    msg = (\"Number of break points ({:d})\"\n                           \" must be less than subinterval\"\n                           \" limit ({:d})\").format(len(points), limit)\n\n        else:\n            if maxp1 < 1:\n                msg = \"Chebyshev moment limit maxp1 must be >=1.\"\n\n            elif weight in ('cos', 'sin') and abs(a+b) == Inf:  # QAWFE\n                msg = \"Cycle limit limlst must be >=3.\"\n\n            elif weight.startswith('alg'):  # QAWSE\n                if min(wvar) < -1:\n                    msg = \"wvar parameters (alpha, beta) must both be >= -1.\"\n                if b < a:\n                    msg = \"Integration limits a, b must satistfy a<b.\"\n\n            elif weight == 'cauchy' and wvar in (a, b):\n                msg = (\"Parameter 'wvar' must not equal\"\n                       \" integration limits 'a' or 'b'.\")\n\n    raise ValueError(msg)\n\n\ndef _quad(func,a,b,args,full_output,epsabs,epsrel,limit,points):\n    infbounds = 0\n    if (b != Inf and a != -Inf):\n        pass   # standard integration\n    elif (b == Inf and a != -Inf):\n        infbounds = 1\n        bound = a\n    elif (b == Inf and a == -Inf):\n        infbounds = 2\n        bound = 0     # ignored\n    elif (b != Inf and a == -Inf):\n        infbounds = -1\n        bound = b\n    else:\n        raise RuntimeError(\"Infinity comparisons don't work for you.\")\n\n    if points is None:\n        if infbounds == 0:\n            return _quadpack._qagse(func,a,b,args,full_output,epsabs,epsrel,limit)\n        else:\n            return _quadpack._qagie(func,bound,infbounds,args,full_output,epsabs,epsrel,limit)\n    else:\n        if infbounds != 0:\n            raise ValueError(\"Infinity inputs cannot be used with break points.\")\n        else:\n            #Duplicates force function evaluation at singular points\n            the_points = numpy.unique(points)\n            the_points = the_points[a < the_points]\n            the_points = the_points[the_points < b]\n            the_points = numpy.concatenate((the_points, (0., 0.)))\n            return _quadpack._qagpe(func,a,b,the_points,args,full_output,epsabs,epsrel,limit)\n\n\ndef _quad_weight(func,a,b,args,full_output,epsabs,epsrel,limlst,limit,maxp1,weight,wvar,wopts):\n    if weight not in ['cos','sin','alg','alg-loga','alg-logb','alg-log','cauchy']:\n        raise ValueError(\"%s not a recognized weighting function.\" % weight)\n\n    strdict = {'cos':1,'sin':2,'alg':1,'alg-loga':2,'alg-logb':3,'alg-log':4}\n\n    if weight in ['cos','sin']:\n        integr = strdict[weight]\n        if (b != Inf and a != -Inf):  # finite limits\n            if wopts is None:         # no precomputed Chebyshev moments\n                return _quadpack._qawoe(func, a, b, wvar, integr, args, full_output,\n                                        epsabs, epsrel, limit, maxp1,1)\n            else:                     # precomputed Chebyshev moments\n                momcom = wopts[0]\n                chebcom = wopts[1]\n                return _quadpack._qawoe(func, a, b, wvar, integr, args, full_output,\n                                        epsabs, epsrel, limit, maxp1, 2, momcom, chebcom)\n\n        elif (b == Inf and a != -Inf):\n            return _quadpack._qawfe(func, a, wvar, integr, args, full_output,\n                                    epsabs,limlst,limit,maxp1)\n        elif (b != Inf and a == -Inf):  # remap function and interval\n            if weight == 'cos':\n                def thefunc(x,*myargs):\n                    y = -x\n                    func = myargs[0]\n                    myargs = (y,) + myargs[1:]\n                    return func(*myargs)\n            else:\n                def thefunc(x,*myargs):\n                    y = -x\n                    func = myargs[0]\n                    myargs = (y,) + myargs[1:]\n                    return -func(*myargs)\n            args = (func,) + args\n            return _quadpack._qawfe(thefunc, -b, wvar, integr, args,\n                                    full_output, epsabs, limlst, limit, maxp1)\n        else:\n            raise ValueError(\"Cannot integrate with this weight from -Inf to +Inf.\")\n    else:\n        if a in [-Inf,Inf] or b in [-Inf,Inf]:\n            raise ValueError(\"Cannot integrate with this weight over an infinite interval.\")\n\n        if weight.startswith('alg'):\n            integr = strdict[weight]\n            return _quadpack._qawse(func, a, b, wvar, integr, args,\n                                    full_output, epsabs, epsrel, limit)\n        else:  # weight == 'cauchy'\n            return _quadpack._qawce(func, a, b, wvar, args, full_output,\n                                    epsabs, epsrel, limit)\n\n\ndef dblquad(func, a, b, gfun, hfun, args=(), epsabs=1.49e-8, epsrel=1.49e-8):\n    \"\"\"\n    Compute a double (definite) integral.\n\n    Wraps `nquad` to compute double integral.\n    Return the double (definite) integral of ``func(y, x)`` from ``x = a..b``\n    and ``y = gfun(x)..hfun(x)``.\n\n    Parameters\n    ----------\n    func : callable\n        A Python function or method of at least two variables: y must be the\n        first argument and x the second argument.\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : callable or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : callable or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    args : sequence, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the inner 1-D quadrature\n        integration. Default is 1.49e-8. `dblquad`` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = inner integral of ``func(y, x)`` from ``gfun(x)``\n        to ``hfun(x)``, and ``result`` is the numerical approximation.\n        See `epsrel` below.\n    epsrel : float, optional\n        Relative tolerance of the inner 1-D integrals. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n\n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n\n    See also\n    --------\n    quad : single integral\n    tplquad : triple integral\n    nquad : N-dimensional integrals\n    fixed_quad : fixed-order Gaussian quadrature\n    quadrature : adaptive Gaussian quadrature\n    odeint : ODE integrator\n    ode : ODE integrator\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n\n    Examples\n    --------\n\n    Compute the double integral of ``x * y**2`` over the box\n    ``x`` ranging from 0 to 2 and ``y`` ranging from 0 to 1.\n\n    >>> from scipy import integrate\n    >>> f = lambda y, x: x*y**2\n    >>> integrate.dblquad(f, 0, 2, lambda x: 0, lambda x: 1)\n        (0.6666666666666667, 7.401486830834377e-15)\n\n    \"\"\"\n\n    def temp_ranges(*args):\n        return [gfun(args[0]) if callable(gfun) else gfun,\n                hfun(args[0]) if callable(hfun) else hfun]\n\n    return nquad(func, [temp_ranges, [a, b]], args=args,\n            opts={\"epsabs\": epsabs, \"epsrel\": epsrel})\n\n\ndef tplquad(func, a, b, gfun, hfun, qfun, rfun, args=(), epsabs=1.49e-8,\n            epsrel=1.49e-8):\n    \"\"\"\n    Compute a triple (definite) integral.\n\n    Wraps `nquad` to compute triple integral.\n    Return the triple integral of ``func(z, y, x)`` from ``x = a..b``,\n    ``y = gfun(x)..hfun(x)``, and ``z = qfun(x,y)..rfun(x,y)``.\n\n    Parameters\n    ----------\n    func : function\n        A Python function or method of at least three variables in the\n        order (z, y, x).\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : function or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : function or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    qfun : function or float\n        The lower boundary surface in z.  It must be a function that takes\n        two floats in the order (x, y) and returns a float or a float\n        indicating a constant boundary surface.\n    rfun : function or float\n        The upper boundary surface in z. (Same requirements as `qfun`.)\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the innermost 1-D quadrature\n        integration. Default is 1.49e-8.\n    epsrel : float, optional\n        Relative tolerance of the innermost 1-D integrals. Default is 1.49e-8.\n\n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n\n    See Also\n    --------\n    quad: Adaptive quadrature using QUADPACK\n    quadrature: Adaptive Gaussian quadrature\n    fixed_quad: Fixed-order Gaussian quadrature\n    dblquad: Double integrals\n    nquad : N-dimensional integrals\n    romb: Integrators for sampled data\n    simpson: Integrators for sampled data\n    ode: ODE integrators\n    odeint: ODE integrators\n    scipy.special: For coefficients and roots of orthogonal polynomials\n\n    Examples\n    --------\n\n    Compute the triple integral of ``x * y * z``, over ``x`` ranging\n    from 1 to 2, ``y`` ranging from 2 to 3, ``z`` ranging from 0 to 1.\n\n    >>> from scipy import integrate\n    >>> f = lambda z, y, x: x*y*z\n    >>> integrate.tplquad(f, 1, 2, lambda x: 2, lambda x: 3,\n    ...                   lambda x, y: 0, lambda x, y: 1)\n    (1.8750000000000002, 3.324644794257407e-14)\n\n\n    \"\"\"\n    # f(z, y, x)\n    # qfun/rfun (x, y)\n    # gfun/hfun(x)\n    # nquad will hand (y, x, t0, ...) to ranges0\n    # nquad will hand (x, t0, ...) to ranges1\n    # Stupid different API...\n\n    def ranges0(*args):\n        return [qfun(args[1], args[0]) if callable(qfun) else qfun,\n                rfun(args[1], args[0]) if callable(rfun) else rfun]\n\n    def ranges1(*args):\n        return [gfun(args[0]) if callable(gfun) else gfun,\n                hfun(args[0]) if callable(hfun) else hfun]\n\n    ranges = [ranges0, ranges1, [a, b]]\n    return nquad(func, ranges, args=args,\n            opts={\"epsabs\": epsabs, \"epsrel\": epsrel})\n\n\ndef nquad(func, ranges, args=None, opts=None, full_output=False):\n    \"\"\"\n    Integration over multiple variables.\n\n    Wraps `quad` to enable integration over multiple variables.\n    Various options allow improved integration of discontinuous functions, as\n    well as the use of weighted integration, and generally finer control of the\n    integration process.\n\n    Parameters\n    ----------\n    func : {callable, scipy.LowLevelCallable}\n        The function to be integrated. Has arguments of ``x0, ... xn``,\n        ``t0, ... tm``, where integration is carried out over ``x0, ... xn``,\n        which must be floats.  Where ```t0, ... tm``` are extra arguments\n        passed in args.\n        Function signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``.\n        Integration is carried out in order.  That is, integration over ``x0``\n        is the innermost integral, and ``xn`` is the outermost.\n\n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n\n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n\n        where ``n`` is the number of variables and args.  The ``xx`` array\n        contains the coordinates and extra arguments. ``user_data`` is the data\n        contained in the `scipy.LowLevelCallable`.\n    ranges : iterable object\n        Each element of ranges may be either a sequence  of 2 numbers, or else\n        a callable that returns such a sequence. ``ranges[0]`` corresponds to\n        integration over x0, and so on. If an element of ranges is a callable,\n        then it will be called with all of the integration arguments available,\n        as well as any parametric arguments. e.g., if\n        ``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as\n        either ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``.\n    args : iterable object, optional\n        Additional arguments ``t0, ..., tn``, required by `func`, `ranges`, and\n        ``opts``.\n    opts : iterable object or dict, optional\n        Options to be passed to `quad`. May be empty, a dict, or\n        a sequence of dicts or functions that return a dict. If empty, the\n        default options from scipy.integrate.quad are used. If a dict, the same\n        options are used for all levels of integraion. If a sequence, then each\n        element of the sequence corresponds to a particular integration. e.g.,\n        opts[0] corresponds to integration over x0, and so on. If a callable,\n        the signature must be the same as for ``ranges``. The available\n        options together with their default values are:\n\n          - epsabs = 1.49e-08\n          - epsrel = 1.49e-08\n          - limit  = 50\n          - points = None\n          - weight = None\n          - wvar   = None\n          - wopts  = None\n\n        For more information on these options, see `quad` and `quad_explain`.\n\n    full_output : bool, optional\n        Partial implementation of ``full_output`` from scipy.integrate.quad.\n        The number of integrand function evaluations ``neval`` can be obtained\n        by setting ``full_output=True`` when calling nquad.\n\n    Returns\n    -------\n    result : float\n        The result of the integration.\n    abserr : float\n        The maximum of the estimates of the absolute error in the various\n        integration results.\n    out_dict : dict, optional\n        A dict containing additional information on the integration.\n\n    See Also\n    --------\n    quad : 1-D numerical integration\n    dblquad, tplquad : double and triple integrals (wrap `nquad`)\n    fixed_quad : fixed-order Gaussian quadrature\n    quadrature : adaptive Gaussian quadrature\n\n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> func = lambda x0,x1,x2,x3 : x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n    ...                                 1 if (x0-.2*x3-.5-.25*x1>0) else 0)\n    >>> def opts0(*args, **kwargs):\n    ...     return {'points':[0.2*args[2] + 0.5 + 0.25*args[0]]}\n    >>> integrate.nquad(func, [[0,1], [-1,1], [.13,.8], [-.15,1]],\n    ...                 opts=[opts0,{},{},{}], full_output=True)\n    (1.5267454070738633, 2.9437360001402324e-14, {'neval': 388962})\n\n    >>> scale = .1\n    >>> def func2(x0, x1, x2, x3, t0, t1):\n    ...     return x0*x1*x3**2 + np.sin(x2) + 1 + (1 if x0+t1*x1-t0>0 else 0)\n    >>> def lim0(x1, x2, x3, t0, t1):\n    ...     return [scale * (x1**2 + x2 + np.cos(x3)*t0*t1 + 1) - 1,\n    ...             scale * (x1**2 + x2 + np.cos(x3)*t0*t1 + 1) + 1]\n    >>> def lim1(x2, x3, t0, t1):\n    ...     return [scale * (t0*x2 + t1*x3) - 1,\n    ...             scale * (t0*x2 + t1*x3) + 1]\n    >>> def lim2(x3, t0, t1):\n    ...     return [scale * (x3 + t0**2*t1**3) - 1,\n    ...             scale * (x3 + t0**2*t1**3) + 1]\n    >>> def lim3(t0, t1):\n    ...     return [scale * (t0+t1) - 1, scale * (t0+t1) + 1]\n    >>> def opts0(x1, x2, x3, t0, t1):\n    ...     return {'points' : [t0 - t1*x1]}\n    >>> def opts1(x2, x3, t0, t1):\n    ...     return {}\n    >>> def opts2(x3, t0, t1):\n    ...     return {}\n    >>> def opts3(t0, t1):\n    ...     return {}\n    >>> integrate.nquad(func2, [lim0, lim1, lim2, lim3], args=(0,0),\n    ...                 opts=[opts0, opts1, opts2, opts3])\n    (25.066666666666666, 2.7829590483937256e-13)\n\n    \"\"\"\n    depth = len(ranges)\n    ranges = [rng if callable(rng) else _RangeFunc(rng) for rng in ranges]\n    if args is None:\n        args = ()\n    if opts is None:\n        opts = [dict([])] * depth\n\n    if isinstance(opts, dict):\n        opts = [_OptFunc(opts)] * depth\n    else:\n        opts = [opt if callable(opt) else _OptFunc(opt) for opt in opts]\n    return _NQuad(func, ranges, opts, full_output).integrate(*args)\n\n\nclass _RangeFunc:\n    def __init__(self, range_):\n        self.range_ = range_\n\n    def __call__(self, *args):\n        \"\"\"Return stored value.\n\n        *args needed because range_ can be float or func, and is called with\n        variable number of parameters.\n        \"\"\"\n        return self.range_\n\n\nclass _OptFunc:\n    def __init__(self, opt):\n        self.opt = opt\n\n    def __call__(self, *args):\n        \"\"\"Return stored dict.\"\"\"\n        return self.opt\n\n\nclass _NQuad:\n    def __init__(self, func, ranges, opts, full_output):\n        self.abserr = 0\n        self.func = func\n        self.ranges = ranges\n        self.opts = opts\n        self.maxdepth = len(ranges)\n        self.full_output = full_output\n        if self.full_output:\n            self.out_dict = {'neval': 0}\n\n    def integrate(self, *args, **kwargs):\n        depth = kwargs.pop('depth', 0)\n        if kwargs:\n            raise ValueError('unexpected kwargs')\n\n        # Get the integration range and options for this depth.\n        ind = -(depth + 1)\n        fn_range = self.ranges[ind]\n        low, high = fn_range(*args)\n        fn_opt = self.opts[ind]\n        opt = dict(fn_opt(*args))\n\n        if 'points' in opt:\n            opt['points'] = [x for x in opt['points'] if low <= x <= high]\n        if depth + 1 == self.maxdepth:\n            f = self.func\n        else:\n            f = partial(self.integrate, depth=depth+1)\n        quad_r = quad(f, low, high, args=args, full_output=self.full_output,\n                      **opt)\n        value = quad_r[0]\n        abserr = quad_r[1]\n        if self.full_output:\n            infodict = quad_r[2]\n            # The 'neval' parameter in full_output returns the total\n            # number of times the integrand function was evaluated.\n            # Therefore, only the innermost integration loop counts.\n            if depth + 1 == self.maxdepth:\n                self.out_dict['neval'] += infodict['neval']\n        self.abserr = max(self.abserr, abserr)\n        if depth > 0:\n            return value\n        else:\n            # Final result of N-D integration with error\n            if self.full_output:\n                return value, self.abserr, self.out_dict\n            else:\n                return value, self.abserr\n"
    }
  ],
  "questions": [
    "Hi, improvement to the documentation is always welcomed. Are you proposing to help here?\r\n\r\nIn this case we should probably refer to the main function `scipy.integrate.quad` for more details.",
    "Thanks for working on this!\r\nCould you tell what algorithms they use? It would be great if we could cite QUADPACK documentation and original algorithms papers. Please see Ralf's comments [here] (https://github.com/scipy/scipy/pull/14249#issuecomment-864392575).",
    "The algorithms used by `dblquad`, `tplquad` etc. use different algorithms depending on what boundary values are given. But I think it would be ok if we listed out both methods with references. Saying that I'm having some problems finding the original references.\r\n\r\nI've listed the conditions for each function to be called in this [google sheet](https://docs.google.com/spreadsheets/d/1b_3azJGi300XdceJIaGl6GDkXFbN6uTIFJUhzYErSy8/edit?usp=sharing). Note that this includes both `_quad` and `_quad_weighted`.",
    "**Is your feature request related to a problem? Please describe.**\r\nThe documentation for `scipy.integrate.dblquad` doesn't explain or have a reference to the numerical algorithm(s) used to carry out the integration. (https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad)\r\n\r\n**Describe the solution you'd like**\r\nAdd method details or reference to the documentation of `scipy.integrate.dblquad`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context (e.g. screenshots)**"
  ],
  "golden_answers": [
    "Good first issue, I think: confirm that `dblquad` uses QUADPACK, research QUADPACK, add relevant findings to documentation (of `dblquad`, `tplquad`, etc.).",
    "The algorithms used by `dblquad`, `tplquad` etc. use different algorithms depending on what boundary values are given. But I think it would be ok if we listed out both methods with references. Saying that I'm having some problems finding the original references.\r\n\r\nI've listed the conditions for each function to be called in this [google sheet](https://docs.google.com/spreadsheets/d/1b_3azJGi300XdceJIaGl6GDkXFbN6uTIFJUhzYErSy8/edit?usp=sharing). Note that this includes both `_quad` and `_quad_weighted`.",
    "I've found a [copy](https://github.com/scipy/scipy/files/8549172/quadpack-a-subroutine-package-for-automatic-integration_compress.pdf) of \"QUADPACK: A Subroutine Package for Automatic Integration\". I haven't read through the whole book. There's a summary of the routines starting at page 56 which I think will give a good starting point. This does not reference the implementation of each function.\r\n\r\nI think referencing the algorithm used by each function could be difficult as some functions use many different algorithms. Figure 6.1 (page 129) shows the inner structure of the package showing that many of the functions actually use multiple different algorithms depending on certain choices.\r\n\r\nGoing back to the original problem of `dblquad`, `tplquad`, `nquad` etc. I think it would be better to explain that they are using QUADPACK and which functions are being under what circumstances.  And to possibly give a short summary of what the algorithm does as outlined on page 56.",
    "Hi, improvement to the documentation is always welcomed. Are you proposing to help here?\r\n\r\nIn this case we should probably refer to the main function `scipy.integrate.quad` for more details."
  ],
  "questions_generated": [
    "What is the main issue identified in the documentation of `scipy.integrate.dblquad`?",
    "Which function is `scipy.integrate.dblquad` suggested to refer to for more details on the integration technique used?",
    "What is the underlying Fortran library used by the `quad`, `dblquad`, and `tplquad` functions for integration?",
    "What are the conditions under which `dblquad` and `tplquad` choose different QUADPACK functions for integration?",
    "What are the potential challenges in documenting the numerical algorithms used by `dblquad`, and how can these be addressed?"
  ],
  "golden_answers_generated": [
    "The main issue is that the documentation for `scipy.integrate.dblquad` does not explain or reference the numerical algorithms used to carry out the integration.",
    "It is suggested that `scipy.integrate.dblquad` should refer to the main function `scipy.integrate.quad` for more details on the integration technique used.",
    "The underlying Fortran library used by the `quad`, `dblquad`, and `tplquad` functions is QUADPACK.",
    "The choice of QUADPACK function by `dblquad` and `tplquad` depends on the boundary values provided. They both wrap the function `nquad`, which decides which QUADPACK function to call based on these conditions. The specific conditions are documented in a shared Google Sheet referenced in the discussion.",
    "The challenges include identifying the specific algorithms used by QUADPACK, as the functions use different algorithms depending on boundary values. These can be addressed by researching QUADPACK documentation, citing the primary reference 'QUADPACK: A Subroutine Package for Automatic Integration', and including algorithm references in the documentation."
  ]
}