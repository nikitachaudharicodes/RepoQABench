{
  "repo_name": "scrapy_scrapy",
  "issue_id": "2733",
  "issue_description": "# Import Request in the Template file\n\nI have been creating many spiders recently, and I noticed I had to add below line every time\r\n\r\n`from scrapy.http import Request`\r\n\r\nI think for most cases we need the Request to crawl to other pages, only for very simple spider we don't need that. Is it possible to include that line to the template?",
  "issue_comments": [
    {
      "id": 300322595,
      "user": "kmike",
      "body": "The intention is for users to use `scrapy.Request`, `import scrapy` is already in the template. Does it work for you?"
    },
    {
      "id": 300325502,
      "user": "zhongdai",
      "body": "Thanks for the quick the response. I didn't noticed `Request` has been declared on the top level, I checked the API document and always use it from` scrapy.http`.\r\n\r\nThat is fair enough, and please close this issue."
    },
    {
      "id": 300418192,
      "user": "kmike",
      "body": "Yeah, it'd be nice to mention the shortcut in API docs for Request object: https://doc.scrapy.org/en/latest/topics/request-response.html."
    },
    {
      "id": 719815552,
      "user": "keremgocen",
      "body": "I'd like to grab this if that's ok"
    },
    {
      "id": 818215319,
      "user": "marlenachatzigrigoriou",
      "body": "Hello! Is this issue still open? Does @keremgocen carry this? If not, could you give me some guidance on what needs to be done (as it was reopened) in order to contribute? "
    },
    {
      "id": 818587362,
      "user": "Gallaecio",
      "body": "This is still open indeed, and it seems like there has been no attempt to address it after https://github.com/scrapy/scrapy/pull/2757, which seems abandoned."
    },
    {
      "id": 818641399,
      "user": "marlenachatzigrigoriou",
      "body": "Great. Could you give me more guidance on what I should do? I saw your comment https://github.com/scrapy/scrapy/pull/2757#discussion_r263744493 and I assume that I have to begin from this point. "
    },
    {
      "id": 818651071,
      "user": "Gallaecio",
      "body": "Yes.\r\n\r\nIt’s relatively hard to find what I mention in this comment, but referencing all import paths looks like this:\r\n\r\n```python\r\n.. class:: scrapy.http.request.Request\r\n.. class:: scrapy.http.Request\r\n.. class:: scrapy.Request(…)\r\n```\r\n\r\nThen there are some possible additional changes to make, but it’s up to you whether to make them or not, since they are not covered by this issue report:\r\n\r\n- The same could be done for other classes that have a top-level import in https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py\r\n- In addition to covering all import paths in the reference documentation, you could search the documentation (and even the docstrings in code) for references to the longer import paths, and switch those usages to the short import path, as the shortest import path should probably be the recommendation in the documentation."
    },
    {
      "id": 818916723,
      "user": "marlenachatzigrigoriou",
      "body": "So, the purpose is to change every long import path in the documentation files, such as: `.. class:: scrapy.http.request.Request` and `.. class:: scrapy.http.Request` to: `.. class:: scrapy.Request(…)` ?\r\nAnd this change should be applied to every class declared as top-level in  https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py:\r\n```\r\n# Declare top-level shortcuts\r\nfrom scrapy.spiders import Spider\r\nfrom scrapy.http import Request, FormRequest\r\nfrom scrapy.selector import Selector\r\nfrom scrapy.item import Item, Field\r\n```\r\nFor example, in [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) line 42 (`:meth:` `~scrapy.spiders.Spider.parse` ` method will be used.`) should become: ` meth: ` `~scrapy.Spider.parse` `  method will be used.`  ?\r\n"
    },
    {
      "id": 818919721,
      "user": "Gallaecio",
      "body": "Yes.\r\n\r\nThe long import paths should only appear once, right above the APi member reference documentation (`.. class:: scrapy.Request(…`), just so that it’s clear that those import paths exist, and so that documentation linking to the Scrapy documentation using InterSphinx continues to work even if it uses the long import paths for API references."
    },
    {
      "id": 818966185,
      "user": "marlenachatzigrigoriou",
      "body": "Regarding the APi member reference documentation, you mean that, for example: in  [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) in line 491: ` .. class:: FormRequest(url, [formdata, ...])` should turn into: `.. class:: scrapy.FormRequest(url, [formdata, ...]) ` ?  "
    },
    {
      "id": 818995918,
      "user": "Gallaecio",
      "body": "Yes. And in addition to that, lines should be added above that line with the other import paths, as in [my example above](https://github.com/scrapy/scrapy/issues/2733#issuecomment-818651071)."
    },
    {
      "id": 832623222,
      "user": "keremgocen",
      "body": "Hey @marlenachatzigrigoriou, sorry I had to drop this. Feel free to drop a comment here if there are any blockers I'm sure someone will help."
    }
  ],
  "text_context": "# Import Request in the Template file\n\nI have been creating many spiders recently, and I noticed I had to add below line every time\r\n\r\n`from scrapy.http import Request`\r\n\r\nI think for most cases we need the Request to crawl to other pages, only for very simple spider we don't need that. Is it possible to include that line to the template?\n\nThe intention is for users to use `scrapy.Request`, `import scrapy` is already in the template. Does it work for you?\n\nThanks for the quick the response. I didn't noticed `Request` has been declared on the top level, I checked the API document and always use it from` scrapy.http`.\r\n\r\nThat is fair enough, and please close this issue.\n\nYeah, it'd be nice to mention the shortcut in API docs for Request object: https://doc.scrapy.org/en/latest/topics/request-response.html.\n\nI'd like to grab this if that's ok\n\nHello! Is this issue still open? Does @keremgocen carry this? If not, could you give me some guidance on what needs to be done (as it was reopened) in order to contribute? \n\nThis is still open indeed, and it seems like there has been no attempt to address it after https://github.com/scrapy/scrapy/pull/2757, which seems abandoned.\n\nGreat. Could you give me more guidance on what I should do? I saw your comment https://github.com/scrapy/scrapy/pull/2757#discussion_r263744493 and I assume that I have to begin from this point. \n\nYes.\r\n\r\nIt’s relatively hard to find what I mention in this comment, but referencing all import paths looks like this:\r\n\r\n```python\r\n.. class:: scrapy.http.request.Request\r\n.. class:: scrapy.http.Request\r\n.. class:: scrapy.Request(…)\r\n```\r\n\r\nThen there are some possible additional changes to make, but it’s up to you whether to make them or not, since they are not covered by this issue report:\r\n\r\n- The same could be done for other classes that have a top-level import in https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py\r\n- In addition to covering all import paths in the reference documentation, you could search the documentation (and even the docstrings in code) for references to the longer import paths, and switch those usages to the short import path, as the shortest import path should probably be the recommendation in the documentation.\n\nSo, the purpose is to change every long import path in the documentation files, such as: `.. class:: scrapy.http.request.Request` and `.. class:: scrapy.http.Request` to: `.. class:: scrapy.Request(…)` ?\r\nAnd this change should be applied to every class declared as top-level in  https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py:\r\n```\r\n# Declare top-level shortcuts\r\nfrom scrapy.spiders import Spider\r\nfrom scrapy.http import Request, FormRequest\r\nfrom scrapy.selector import Selector\r\nfrom scrapy.item import Item, Field\r\n```\r\nFor example, in [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) line 42 (`:meth:` `~scrapy.spiders.Spider.parse` ` method will be used.`) should become: ` meth: ` `~scrapy.Spider.parse` `  method will be used.`  ?\r\n\n\nYes.\r\n\r\nThe long import paths should only appear once, right above the APi member reference documentation (`.. class:: scrapy.Request(…`), just so that it’s clear that those import paths exist, and so that documentation linking to the Scrapy documentation using InterSphinx continues to work even if it uses the long import paths for API references.\n\nRegarding the APi member reference documentation, you mean that, for example: in  [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) in line 491: ` .. class:: FormRequest(url, [formdata, ...])` should turn into: `.. class:: scrapy.FormRequest(url, [formdata, ...]) ` ?  \n\nYes. And in addition to that, lines should be added above that line with the other import paths, as in [my example above](https://github.com/scrapy/scrapy/issues/2733#issuecomment-818651071).\n\nHey @marlenachatzigrigoriou, sorry I had to drop this. Feel free to drop a comment here if there are any blockers I'm sure someone will help.",
  "pr_link": "https://github.com/scrapy/scrapy/pull/2757",
  "code_context": [],
  "questions": [
    "The intention is for users to use `scrapy.Request`, `import scrapy` is already in the template. Does it work for you?",
    "Great. Could you give me more guidance on what I should do? I saw your comment https://github.com/scrapy/scrapy/pull/2757#discussion_r263744493 and I assume that I have to begin from this point.",
    "So, the purpose is to change every long import path in the documentation files, such as: `.. class:: scrapy.http.request.Request` and `.. class:: scrapy.http.Request` to: `.. class:: scrapy.Request(…)` ?\r\nAnd this change should be applied to every class declared as top-level in  https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py:\r\n```\r\n# Declare top-level shortcuts\r\nfrom scrapy.spiders import Spider\r\nfrom scrapy.http import Request, FormRequest\r\nfrom scrapy.selector import Selector\r\nfrom scrapy.item import Item, Field\r\n```\r\nFor example, in [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) line 42 (`:meth:` `~scrapy.spiders.Spider.parse` ` method will be used.`) should become: ` meth: ` `~scrapy.Spider.parse` `  method will be used.`  ?",
    "Regarding the APi member reference documentation, you mean that, for example: in  [request-response.rst](https://github.com/scrapy/scrapy/blob/master/docs/topics/request-response.rst) in line 491: ` .. class:: FormRequest(url, [formdata, ...])` should turn into: `.. class:: scrapy.FormRequest(url, [formdata, ...]) ` ?",
    "I have been creating many spiders recently, and I noticed I had to add below line every time\r\n\r\n`from scrapy.http import Request`\r\n\r\nI think for most cases we need the Request to crawl to other pages, only for very simple spider we don't need that. Is it possible to include that line to the template?"
  ],
  "golden_answers": [
    "Thanks for the quick the response. I didn't noticed `Request` has been declared on the top level, I checked the API document and always use it from` scrapy.http`.\r\n\r\nThat is fair enough, and please close this issue.",
    "Yes.\r\n\r\nIt’s relatively hard to find what I mention in this comment, but referencing all import paths looks like this:\r\n\r\n```python\r\n.. class:: scrapy.http.request.Request\r\n.. class:: scrapy.http.Request\r\n.. class:: scrapy.Request(…)\r\n```\r\n\r\nThen there are some possible additional changes to make, but it’s up to you whether to make them or not, since they are not covered by this issue report:\r\n\r\n- The same could be done for other classes that have a top-level import in https://github.com/scrapy/scrapy/blob/master/scrapy/__init__.py\r\n- In addition to covering all import paths in the reference documentation, you could search the documentation (and even the docstrings in code) for references to the longer import paths, and switch those usages to the short import path, as the shortest import path should probably be the recommendation in the documentation.",
    "Yes.\r\n\r\nThe long import paths should only appear once, right above the APi member reference documentation (`.. class:: scrapy.Request(…`), just so that it’s clear that those import paths exist, and so that documentation linking to the Scrapy documentation using InterSphinx continues to work even if it uses the long import paths for API references.",
    "Yes. And in addition to that, lines should be added above that line with the other import paths, as in [my example above](https://github.com/scrapy/scrapy/issues/2733#issuecomment-818651071).",
    "The intention is for users to use `scrapy.Request`, `import scrapy` is already in the template. Does it work for you?"
  ],
  "questions_generated": [
    "Why is it suggested to import `Request` directly from `scrapy` rather than `scrapy.http` in Scrapy spiders?",
    "What changes are suggested to the Scrapy documentation regarding the import paths for top-level classes like `Request`?",
    "What is the purpose of declaring certain imports as top-level shortcuts in `scrapy/__init__.py`?",
    "How would you modify the Scrapy documentation to reflect the proper usage of top-level imports?",
    "What additional steps could be taken beyond changing the import paths in the documentation to improve Scrapy's usage guidelines?"
  ],
  "golden_answers_generated": [
    "Importing `Request` directly from `scrapy` is recommended because it is declared as a top-level shortcut in `scrapy/__init__.py`. This makes the import path shorter and more convenient. It also aligns with the intention of the Scrapy developers to provide a simplified interface for commonly used classes.",
    "The suggested changes to the Scrapy documentation involve referencing all import paths with the shortest possible path. For instance, changing instances of `scrapy.http.request.Request` and `scrapy.http.Request` to `scrapy.Request`. This applies to any top-level imports declared in `scrapy/__init__.py`, including other classes like `Spider`, `FormRequest`, `Selector`, `Item`, and `Field`.",
    "The purpose of declaring certain imports as top-level shortcuts in `scrapy/__init__.py` is to simplify the usage of frequently used classes and functions in Scrapy. This allows users to import these classes directly from `scrapy`, making the import statements more concise and the code more readable.",
    "To modify the Scrapy documentation to reflect the proper usage of top-level imports, you would search for all occurrences of long import paths like `scrapy.http.request.Request` and replace them with the shorter, top-level import path `scrapy.Request`. Additionally, you could apply this change to other classes with top-level shortcuts, such as `Spider`, `FormRequest`, `Selector`, `Item`, and `Field`, ensuring that the shorter paths are used consistently throughout the documentation.",
    "Beyond changing the import paths in the documentation, additional steps could include updating any code examples or docstrings that reference longer import paths, ensuring they use the top-level shortcuts. This would reinforce the recommended usage pattern. Moreover, the API documentation could explicitly mention these shortcuts, guiding users towards using them in their projects. Finally, reviewing and updating code comments to reflect these changes could further standardize the recommended practices."
  ]
}