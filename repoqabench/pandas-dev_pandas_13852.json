{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "13852",
  "issue_description": "# Series.replace and DataFrame.replace have same docstring?\n\n```\nIn [4]: pd.__version__\nOut[4]: u'0.18.1'\n```\n\nThe docstring for Series.replace refers to looking up column names, which AFAIK doesn't make sense for the Series version of `replace`.  It seems like the Series function is just blindly inheriting the DataFrame docstring?\n\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html?highlight=replace#pandas.Series.replace\n\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html?highlight=replace#pandas.DataFrame.replace\n\nFor example, the following trivial example of `Series.replace()` does not agree with the docstring:\n\n```\nimport pandas as pd\n\nx = pd.DataFrame([dict(A=1, B=2, C=3), dict(A=2, B=3, C=4), dict(A=3, B=4, C=5)])\n\nprint(x.A.replace({1:0}))\nprint(x.A)\n\n0    0\n1    2\n2    3\nName: A, dtype: int64\n0    1\n1    2\n2    3\nName: A, dtype: int64\n```\n",
  "issue_comments": [
    {
      "id": 236383051,
      "user": "kyleabeauchamp",
      "body": "One other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though.\n"
    },
    {
      "id": 236388992,
      "user": "sinhrks",
      "body": "Thanks for the report. Yeah doc improvement is appreciated. It should be re-defined in `Series/DateFrame` to show correct signature as docstring. You can find an example here.\n\n-https://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L2219\n- https://github.com/pydata/pandas/blob/master/pandas/core/series.py#L2315\n\nI think the empty case should be supported to do nothing like other methods. \n\n```\nx.rename({})\n#    A  B  C\n# 0  1  2  3\n# 1  2  3  4\n# 2  3  4  5\n```\n"
    },
    {
      "id": 321339216,
      "user": "RaghavBatra",
      "body": "Hey, I am interested! How should I go about solving this?"
    },
    {
      "id": 321342190,
      "user": "gfyoung",
      "body": "@RaghavBatra : I think the comment by @sinhrks <a href=\"https://github.com/pandas-dev/pandas/issues/13852#issuecomment-236388992\">above</a> nicely describes what needs to be done.  \r\n\r\nIf you can write a new docstring for `Series.replace` that properly reflects the behavior of the method, that will be great!"
    },
    {
      "id": 321452813,
      "user": "RaghavBatra",
      "body": "@gfyoung, I looked at the counter example @kyleabeauchamp gave above and I don't see any problem with it: \r\n{1: 0} implies you replace the 1 with 0, which the code does!\r\n\r\n0    1\r\n1    2\r\n2    3\r\nName: A, dtype: int64\r\n0    0\r\n1    2\r\n2    3\r\nName: A, dtype: int64"
    },
    {
      "id": 321455852,
      "user": "gfyoung",
      "body": "@RaghavBatra : Can you confirm that passing in both `{1: 0}` and `{}` don't break anything?"
    },
    {
      "id": 321458386,
      "user": "RaghavBatra",
      "body": "@gfyoung, yes it **works** for the DataFrame counterexample above.\r\n\r\nI also tried the Series.replace function. That worked as well!\r\n\r\n>>> ser = pd.Series([1, 2, 3, 4])\r\n>>> ser\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({1:0})\r\n0    0\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({})\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64"
    },
    {
      "id": 321458699,
      "user": "gfyoung",
      "body": "@sinhrks @jreback : It seems like the behavior matches the docs now.  Closing in light of this development."
    },
    {
      "id": 321458758,
      "user": "gfyoung",
      "body": "@RaghavBatra : Thanks for looking into this!"
    },
    {
      "id": 321458882,
      "user": "RaghavBatra",
      "body": "@gfyoung glad to be of help!\r\nLet me know if there are other beginner level issues to work on!"
    },
    {
      "id": 321459134,
      "user": "gfyoung",
      "body": "@RaghavBatra : https://github.com/pandas-dev/pandas/issues lists all open issues that you are more than welcome to tackle!"
    },
    {
      "id": 321497073,
      "user": "jorisvandenbossche",
      "body": "For me, this issue was about the doctring in general, and not only that specific issue. The docstring of `Series.replace` still mentions dataframe specific things that do not work for Series (eg the explanation for a dict only mentions nested dicts). \r\nSo I would say to either make two separate docstrings (or make separate versions of part of the docstring), or either reword the docstring so it reads fine (and includes explanation) for both DataFrame and Series. \r\nAlso the mention of `NDFrame` should be removed (or replaced by Series / DataFrame appropriately).\r\n\r\n"
    },
    {
      "id": 321642951,
      "user": "RaghavBatra",
      "body": "OK, so I downloaded and built the documentation. I even found the HTML version of the Series.replace function. \r\nMy question is how do I go about changing the actual documentation now?\r\nAny help would be appreciated!"
    },
    {
      "id": 321645237,
      "user": "gfyoung",
      "body": "Do a GitHub search in this repository for a portion of the docstring, and you should be able to figure out where it is."
    },
    {
      "id": 321732150,
      "user": "RaghavBatra",
      "body": "That only seems to bring up the HTML generated doc! Any other tips?"
    },
    {
      "id": 321732244,
      "user": "gfyoung",
      "body": "The docstring can be found in `core/generic.py`"
    },
    {
      "id": 321732944,
      "user": "RaghavBatra",
      "body": "Nope, still don't see it. :("
    },
    {
      "id": 321734817,
      "user": "gfyoung",
      "body": "It's right <a href=\"https://github.com/pandas-dev/pandas/blob/556effcba52f4712fed21b269e9782f1a309ea93/pandas/core/generic.py#L4083\">here</a> (just click the hyperlink)"
    },
    {
      "id": 321788288,
      "user": "RaghavBatra",
      "body": "Done!"
    }
  ],
  "text_context": "# Series.replace and DataFrame.replace have same docstring?\n\n```\nIn [4]: pd.__version__\nOut[4]: u'0.18.1'\n```\n\nThe docstring for Series.replace refers to looking up column names, which AFAIK doesn't make sense for the Series version of `replace`.  It seems like the Series function is just blindly inheriting the DataFrame docstring?\n\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html?highlight=replace#pandas.Series.replace\n\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html?highlight=replace#pandas.DataFrame.replace\n\nFor example, the following trivial example of `Series.replace()` does not agree with the docstring:\n\n```\nimport pandas as pd\n\nx = pd.DataFrame([dict(A=1, B=2, C=3), dict(A=2, B=3, C=4), dict(A=3, B=4, C=5)])\n\nprint(x.A.replace({1:0}))\nprint(x.A)\n\n0    0\n1    2\n2    3\nName: A, dtype: int64\n0    1\n1    2\n2    3\nName: A, dtype: int64\n```\n\n\nOne other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though.\n\n\nThanks for the report. Yeah doc improvement is appreciated. It should be re-defined in `Series/DateFrame` to show correct signature as docstring. You can find an example here.\n\n-https://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L2219\n- https://github.com/pydata/pandas/blob/master/pandas/core/series.py#L2315\n\nI think the empty case should be supported to do nothing like other methods. \n\n```\nx.rename({})\n#    A  B  C\n# 0  1  2  3\n# 1  2  3  4\n# 2  3  4  5\n```\n\n\nHey, I am interested! How should I go about solving this?\n\n@RaghavBatra : I think the comment by @sinhrks <a href=\"https://github.com/pandas-dev/pandas/issues/13852#issuecomment-236388992\">above</a> nicely describes what needs to be done.  \r\n\r\nIf you can write a new docstring for `Series.replace` that properly reflects the behavior of the method, that will be great!\n\n@gfyoung, I looked at the counter example @kyleabeauchamp gave above and I don't see any problem with it: \r\n{1: 0} implies you replace the 1 with 0, which the code does!\r\n\r\n0    1\r\n1    2\r\n2    3\r\nName: A, dtype: int64\r\n0    0\r\n1    2\r\n2    3\r\nName: A, dtype: int64\n\n@RaghavBatra : Can you confirm that passing in both `{1: 0}` and `{}` don't break anything?\n\n@gfyoung, yes it **works** for the DataFrame counterexample above.\r\n\r\nI also tried the Series.replace function. That worked as well!\r\n\r\n>>> ser = pd.Series([1, 2, 3, 4])\r\n>>> ser\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({1:0})\r\n0    0\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({})\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\n\n@sinhrks @jreback : It seems like the behavior matches the docs now.  Closing in light of this development.\n\n@RaghavBatra : Thanks for looking into this!\n\n@gfyoung glad to be of help!\r\nLet me know if there are other beginner level issues to work on!\n\n@RaghavBatra : https://github.com/pandas-dev/pandas/issues lists all open issues that you are more than welcome to tackle!\n\nFor me, this issue was about the doctring in general, and not only that specific issue. The docstring of `Series.replace` still mentions dataframe specific things that do not work for Series (eg the explanation for a dict only mentions nested dicts). \r\nSo I would say to either make two separate docstrings (or make separate versions of part of the docstring), or either reword the docstring so it reads fine (and includes explanation) for both DataFrame and Series. \r\nAlso the mention of `NDFrame` should be removed (or replaced by Series / DataFrame appropriately).\r\n\r\n\n\nOK, so I downloaded and built the documentation. I even found the HTML version of the Series.replace function. \r\nMy question is how do I go about changing the actual documentation now?\r\nAny help would be appreciated!\n\nDo a GitHub search in this repository for a portion of the docstring, and you should be able to figure out where it is.\n\nThat only seems to bring up the HTML generated doc! Any other tips?\n\nThe docstring can be found in `core/generic.py`\n\nNope, still don't see it. :(\n\nIt's right <a href=\"https://github.com/pandas-dev/pandas/blob/556effcba52f4712fed21b269e9782f1a309ea93/pandas/core/generic.py#L4083\">here</a> (just click the hyperlink)\n\nDone!",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/18100",
  "code_context": [
    {
      "filename": "pandas/core/frame.py",
      "content": "\"\"\"\nDataFrame\n---------\nAn efficient 2D container for potentially mixed-type time series or other\nlabeled data series.\n\nSimilar to its R counterpart, data.frame, except providing automatic data\nalignment and a host of useful data manipulation methods having to do with the\nlabeling information\n\"\"\"\nfrom __future__ import division\n# pylint: disable=E1101,E1103\n# pylint: disable=W0212,W0231,W0703,W0622\n\nimport functools\nimport collections\nimport itertools\nimport sys\nimport types\nimport warnings\nfrom textwrap import dedent\n\nimport numpy as np\nimport numpy.ma as ma\n\nfrom pandas.core.accessor import CachedAccessor\nfrom pandas.core.dtypes.cast import (\n    maybe_upcast,\n    cast_scalar_to_array,\n    maybe_cast_to_datetime,\n    maybe_infer_to_datetimelike,\n    maybe_convert_platform,\n    maybe_downcast_to_dtype,\n    invalidate_string_dtypes,\n    coerce_to_dtypes,\n    maybe_upcast_putmask,\n    find_common_type)\nfrom pandas.core.dtypes.common import (\n    is_categorical_dtype,\n    is_object_dtype,\n    is_extension_type,\n    is_datetimetz,\n    is_datetime64_any_dtype,\n    is_datetime64tz_dtype,\n    is_bool_dtype,\n    is_integer_dtype,\n    is_float_dtype,\n    is_integer,\n    is_scalar,\n    is_dtype_equal,\n    needs_i8_conversion,\n    _get_dtype_from_object,\n    _ensure_float,\n    _ensure_float64,\n    _ensure_int64,\n    _ensure_platform_int,\n    is_list_like,\n    is_nested_list_like,\n    is_iterator,\n    is_sequence,\n    is_named_tuple)\nfrom pandas.core.dtypes.missing import isna, notna\n\n\nfrom pandas.core.generic import NDFrame, _shared_docs\nfrom pandas.core.index import (Index, MultiIndex, _ensure_index,\n                               _ensure_index_from_sequences)\nfrom pandas.core.indexing import (maybe_droplevels, convert_to_index_sliceable,\n                                  check_bool_indexer)\nfrom pandas.core.internals import (BlockManager,\n                                   create_block_manager_from_arrays,\n                                   create_block_manager_from_blocks)\nfrom pandas.core.series import Series\nfrom pandas.core.arrays import Categorical\nimport pandas.core.algorithms as algorithms\nfrom pandas.compat import (range, map, zip, lrange, lmap, lzip, StringIO, u,\n                           OrderedDict, raise_with_traceback)\nfrom pandas import compat\nfrom pandas.compat import PY36\nfrom pandas.compat.numpy import function as nv\nfrom pandas.util._decorators import (Appender, Substitution,\n                                     rewrite_axis_style_signature)\nfrom pandas.util._validators import (validate_bool_kwarg,\n                                     validate_axis_style_args)\n\nfrom pandas.core.indexes.period import PeriodIndex\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.timedeltas import TimedeltaIndex\n\nimport pandas.core.common as com\nimport pandas.core.nanops as nanops\nimport pandas.core.ops as ops\nimport pandas.io.formats.format as fmt\nimport pandas.io.formats.console as console\nfrom pandas.io.formats.printing import pprint_thing\nimport pandas.plotting._core as gfx\n\nfrom pandas._libs import lib, algos as libalgos\n\nfrom pandas.core.config import get_option\n\n# ---------------------------------------------------------------------\n# Docstring templates\n\n_shared_doc_kwargs = dict(\n    axes='index, columns', klass='DataFrame',\n    axes_single_arg=\"{0 or 'index', 1 or 'columns'}\",\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names to sort by.\n\n            - if `axis` is 0 or `'index'` then `by` may contain index\n              levels and/or column labels\n            - if `axis` is 1 or `'columns'` then `by` may contain column\n              levels and/or index labels\n\n        .. versionmodified:: 0.23.0\n           Allow specifying index or column level names.\"\"\",\n    versionadded_to_excel='',\n    optional_labels=\"\"\"labels : array-like, optional\n            New labels / index to conform the axis specified by 'axis' to.\"\"\",\n    optional_axis=\"\"\"axis : int or str, optional\n            Axis to target. Can be either the axis name ('index', 'columns')\n            or number (0, 1).\"\"\",\n)\n\n_numeric_only_doc = \"\"\"numeric_only : boolean, default None\n    Include only float, int, boolean data. If None, will attempt to use\n    everything, then use only numeric data\n\"\"\"\n\n_merge_doc = \"\"\"\nMerge DataFrame objects by performing a database-style join operation by\ncolumns or indexes.\n\nIf joining columns on columns, the DataFrame indexes *will be\nignored*. Otherwise if joining indexes on indexes or indexes on a column or\ncolumns, the index will be passed on.\n\nParameters\n----------%s\nright : DataFrame\nhow : {'left', 'right', 'outer', 'inner'}, default 'inner'\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : boolean, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels\nright_index : boolean, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index\nsort : boolean, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword)\nsuffixes : 2-length sequence (tuple, list, ...)\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively\ncopy : boolean, default True\n    If False, do not copy data unnecessarily\nindicator : boolean or string, default False\n    If True, adds a column to output DataFrame called \"_merge\" with\n    information on the source of each row.\n    If string, column with information on source of each row will be added to\n    output DataFrame, and column will be named value of string.\n    Information column is Categorical-type and takes on a value of \"left_only\"\n    for observations whose merge key only appears in 'left' DataFrame,\n    \"right_only\" for observations whose merge key only appears in 'right'\n    DataFrame, and \"both\" if the observation's merge key is found in both.\n\nvalidate : string, default None\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\n    .. versionadded:: 0.21.0\n\nNotes\n-----\nSupport for specifying index levels as the `on`, `left_on`, and\n`right_on` parameters was added in version 0.23.0\n\nExamples\n--------\n\n>>> A              >>> B\n    lkey value         rkey value\n0   foo  1         0   foo  5\n1   bar  2         1   bar  6\n2   baz  3         2   qux  7\n3   foo  4         3   bar  8\n\n>>> A.merge(B, left_on='lkey', right_on='rkey', how='outer')\n   lkey  value_x  rkey  value_y\n0  foo   1        foo   5\n1  foo   4        foo   5\n2  bar   2        bar   6\n3  bar   2        bar   8\n4  baz   3        NaN   NaN\n5  NaN   NaN      qux   7\n\nReturns\n-------\nmerged : DataFrame\n    The output type will the be same as 'left', if it is a subclass\n    of DataFrame.\n\nSee also\n--------\nmerge_ordered\nmerge_asof\n\n\"\"\"\n\n# -----------------------------------------------------------------------\n# DataFrame class\n\n\nclass DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : numpy ndarray (structured or homogeneous), dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n    index : Index or array-like\n        Index to use for resulting frame. Will default to np.arange(n) if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        np.arange(n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.random.randint(low=0, high=10, size=(5, 5)),\n    ...                    columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df2\n        a   b   c   d   e\n    0   2   8   8   3   4\n    1   4   2   9   0   9\n    2   1   0   7   8   0\n    3   5   1   7   1   3\n    4   6   0   2   4   2\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(\n        ['sortlevel', 'get_value', 'set_value', 'from_csv', 'from_items'])\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n                 copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n                                 dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                                               copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                         copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                                      dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                         copy=copy)\n        elif isinstance(data, (list, types.GeneratorType)):\n            if isinstance(data, types.GeneratorType):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = _ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = com._default_index(len(data[0]))\n                        else:\n                            index = com._default_index(len(data))\n\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                                         dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                             copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        elif isinstance(data, collections.Iterator):\n            raise TypeError(\"data argument can't be an iterator\")\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError('DataFrame constructor called with '\n                                'incompatible data and dtype: %s' % e)\n                raise_with_traceback(exc)\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                                              data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns,\n                                         dtype=values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            columns = _ensure_index(columns)\n\n            # GH10856\n            # raise ValueError if only scalars in dict\n            if index is None:\n                extract_index(list(data.values()))\n\n            # prefilter if columns passed\n            data = {k: v for k, v in compat.iteritems(data) if k in columns}\n\n            if index is None:\n                index = extract_index(list(data.values()))\n\n            else:\n                index = _ensure_index(index)\n\n            arrays = []\n            data_names = []\n            for k in columns:\n                if k not in data:\n                    # no obvious \"empty\" int column\n                    if dtype is not None and issubclass(dtype.type,\n                                                        np.integer):\n                        continue\n\n                    if dtype is None:\n                        # 1783\n                        v = np.empty(len(index), dtype=object)\n                    elif np.issubdtype(dtype, np.flexible):\n                        v = np.empty(len(index), dtype=object)\n                    else:\n                        v = np.empty(len(index), dtype=dtype)\n\n                    v.fill(np.nan)\n                else:\n                    v = data[k]\n                data_names.append(k)\n                arrays.append(v)\n\n        else:\n            keys = list(data.keys())\n            if not isinstance(data, OrderedDict):\n                keys = com._try_sort(keys)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        # input must be a ndarray, list, Series, index\n\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n            # zero len case (GH #2234)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        # helper to create the axes as indexes\n        def _get_axes(N, K, index=index, columns=columns):\n            # return axes or defaults\n\n            if index is None:\n                index = com._default_index(N)\n            else:\n                index = _ensure_index(index)\n\n            if columns is None:\n                columns = com._default_index(K)\n            else:\n                columns = _ensure_index(columns)\n            return index, columns\n\n        # we could have a categorical type passed or coerced to 'category'\n        # recast this to an _arrays_to_mgr\n        if (is_categorical_dtype(getattr(values, 'dtype', None)) or\n                is_categorical_dtype(dtype)):\n\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns,\n                                  dtype=dtype)\n        elif is_datetimetz(values):\n            # GH19157\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns,\n                                  dtype=dtype)\n\n        # by definition an array here\n        # the dtypes will be coerced to a single dtype\n        values = _prep_ndarray(values, copy=copy)\n\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\"failed to cast to '%s' (Exception was: %s)\"\n                                   % (dtype, orig))\n                    raise_with_traceback(e)\n\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n\n        # if we don't have a dtype specified, then try to convert objects\n        # on the entire block; this is to convert if we have datetimelike's\n        # embedded in an object type\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list with the row axis labels and column axis labels as the\n        only members. They are returned in that order.\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option(\"display.max_rows\")\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n\n        width, height = console.get_console_size()\n        max_columns = get_option(\"display.max_columns\")\n        nb_columns = len(self.columns)\n\n        # exceed max columns\n        if ((max_columns and nb_columns > max_columns) or\n                ((not ignore_width) and width and nb_columns > (width // 2))):\n            return False\n\n        # used by repr_html under IPython notebook or scripts ignore terminal\n        # dims\n        if ignore_width or not com.in_interactive_session():\n            return True\n\n        if (get_option('display.width') is not None or\n                com.in_ipython_frontend()):\n            # check at least the column row for excessive width\n            max_rows = 1\n        else:\n            max_rows = get_option(\"display.max_rows\")\n\n        # when auto-detecting, so width=None and not in ipython front end\n        # check whether repr fits horizontal by actually checking\n        # the width of the rendered repr\n        buf = StringIO()\n\n        # only care about the stuff we'll actually print out\n        # and to_string on entire frame may be expensive\n        d = self\n\n        if not (max_rows is None):  # unlimited rows\n            # min of two, where one may be None\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = (get_option(\"display.large_repr\") == \"info\")\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n                                         self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(\"\"))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n\n        max_rows = get_option(\"display.max_rows\")\n        max_cols = get_option(\"display.max_columns\")\n        show_dimensions = get_option(\"display.show_dimensions\")\n        if get_option(\"display.expand_frame_repr\"):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n                       line_width=width, show_dimensions=show_dimensions)\n\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        # qtconsole doesn't report its line width, and also\n        # behaves badly when outputting an HTML table\n        # that doesn't fit the window, so disable it.\n        # XXX: In IPython 3.x and above, the Qt console will not attempt to\n        # display HTML, so this check can be removed when support for\n        # IPython 2.x is no longer needed.\n        if com.in_qtconsole():\n            # 'HTML output is disabled in QtConsole'\n            return None\n\n        if self._info_repr():\n            buf = StringIO(u(\"\"))\n            self.info(buf=buf)\n            # need to escape the <class>, should be the first line.\n            val = buf.getvalue().replace('<', r'&lt;', 1)\n            val = val.replace('>', r'&gt;', 1)\n            return '<pre>' + val + '</pre>'\n\n        if get_option(\"display.notebook_repr_html\"):\n            max_rows = get_option(\"display.max_rows\")\n            max_cols = get_option(\"display.max_columns\")\n            show_dimensions = get_option(\"display.show_dimensions\")\n\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name=\"Pandas\"):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append(\"Index\")\n\n        # use integer indexing because of possible duplicate column names\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n        # Python 3 supports at most 255 arguments to constructor, and\n        # things get slow with this many fields in Python 2\n        if name is not None and len(self.columns) + index < 256:\n            # `rename` is unsupported in Python 2.6\n            try:\n                itertuple = collections.namedtuple(name,\n                                                   fields + list(self.columns),\n                                                   rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n\n        # fallback to regular tuples\n        return zip(*arrays)\n\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if (len(common) > len(self.columns) or\n                    len(common) > len(other.index)):\n                raise ValueError('matrices are not aligned')\n\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, %s vs %s' %\n                                 (lvals.shape, rvals.shape))\n\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                                     columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    # ----------------------------------------------------------------------\n    # IO methods (to / from other formats)\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts\n\n        Parameters\n        ----------\n        data : dict\n            {field : array-like} or {field : dict}\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        index, columns = None, None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                # TODO speed up Series case\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient != 'columns':  # pragma: no cover\n            raise ValueError('only recognize index or columns for orient')\n\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"Convert DataFrame to dictionary.\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - dict (default) : dict like {column -> {index -> value}}\n            - list : dict like {column -> [values]}\n            - series : dict like {column -> Series(values)}\n            - split : dict like\n              {index -> [index], columns -> [columns], data -> [values]}\n            - records : list like\n              [{column -> value}, ... , {column -> value}]\n            - index : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n                {'col1': [1, 2], 'col2': [0.5, 0.75]}, index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n        b    2\n        Name: col1, dtype: int64, 'col2': a    0.50\n        b    0.75\n        Name: col2, dtype: float64}\n        >>> df.to_dict('split')\n        {'columns': ['col1', 'col2'],\n        'data': [[1.0, 0.5], [2.0, 0.75]],\n        'index': ['a', 'b']}\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                   ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<type 'list'>, {'col2': 0.5, 'col1': 1.0}),\n        defaultdict(<type 'list'>, {'col2': 0.75, 'col1': 2.0})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\"DataFrame columns are not unique, some \"\n                          \"columns will be omitted.\", UserWarning,\n                          stacklevel=2)\n        # GH16122\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c(\n                (k, v.to_dict(into)) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()),\n                           ('columns', self.columns.tolist()),\n                           ('data', lib.map_infer(self.values.ravel(),\n                                                  com._maybe_box_datetimelike)\n                            .reshape(self.values.shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com._maybe_box_datetimelike(v))\n                          for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com._maybe_box_datetimelike(v))\n                           for k, v in zip(self.columns, np.atleast_1d(row)))\n                    for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((k, v.to_dict(into)) for k, v in self.iterrows())\n        else:\n            raise ValueError(\"orient '%s' not understood\" % orient)\n\n    def to_gbq(self, destination_table, project_id, chunksize=10000,\n               verbose=True, reauth=False, if_exists='fail', private_key=None):\n        \"\"\"Write a DataFrame to a Google BigQuery table.\n\n        The main method a user calls to export pandas DataFrame contents to\n        Google BigQuery table.\n\n        Google BigQuery API Client Library v2 for Python is used.\n        Documentation is available `here\n        <https://developers.google.com/api-client-library/python/apis/bigquery/v2>`__\n\n        Authentication to the Google BigQuery service is via OAuth 2.0.\n\n        - If \"private_key\" is not provided:\n\n          By default \"application default credentials\" are used.\n\n          If default application credentials are not found or are restrictive,\n          user account credentials are used. In this case, you will be asked to\n          grant permissions for product name 'pandas GBQ'.\n\n        - If \"private_key\" is provided:\n\n          Service account credentials will be used to authenticate.\n\n        Parameters\n        ----------\n        dataframe : DataFrame\n            DataFrame to be written\n        destination_table : string\n            Name of table to be written, in the form 'dataset.tablename'\n        project_id : str\n            Google BigQuery Account project ID.\n        chunksize : int (default 10000)\n            Number of rows to be inserted in each chunk from the dataframe.\n        verbose : boolean (default True)\n            Show percentage complete\n        reauth : boolean (default False)\n            Force Google BigQuery to reauthenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            'fail': If table exists, do nothing.\n            'replace': If table exists, drop it, recreate it, and insert data.\n            'append': If table exists, insert data. Create if does not exist.\n        private_key : str (optional)\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. jupyter iPython notebook on remote host)\n        \"\"\"\n\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n                          chunksize=chunksize, verbose=verbose, reauth=reauth,\n                          if_exists=if_exists, private_key=private_key)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n                     coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n\n        # Make a copy of the input columns so we can modify it\n        if columns is not None:\n            columns = _ensure_index(columns)\n\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n\n            values = [first_row]\n\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = _ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                                                      columns)\n\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns,\n                                             coerce_float=coerce_float)\n\n            arr_columns = _ensure_index(arr_columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            else:\n                columns = arr_columns\n\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n\n        result_index = None\n        if index is not None:\n            if (isinstance(index, compat.string_types) or\n                    not hasattr(index, \"__iter__\")):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = _ensure_index_from_sequences(index_data,\n                                                                names=index)\n\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=True):\n        \"\"\"\n        Convert DataFrame to record array. Index will be put in the\n        'index' field of the record array if requested\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field\n        convert_datetime64 : boolean, default True\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex\n\n        Returns\n        -------\n        y : recarray\n        \"\"\"\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            else:\n                if isinstance(self.index, MultiIndex):\n                    # array of tuples to numpy cols. copy copy copy\n                    ix_vals = lmap(np.array, zip(*self.index.values))\n                else:\n                    ix_vals = [self.index.values]\n\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = (lmap(compat.text_type, index_names) +\n                     lmap(compat.text_type, self.columns))\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(\n            arrays,\n            dtype={'names': names, 'formats': formats}\n        )\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"\n        .. deprecated:: 0.23.0\n            from_items is deprecated and will be removed in a\n            future version. Use :meth:`DataFrame.from_dict(dict())`\n            instead. :meth:`DataFrame.from_dict(OrderedDict(...))` may be used\n            to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n\n        warnings.warn(\"from_items is deprecated. Please use \"\n                      \"DataFrame.from_dict(dict()) instead. \"\n                      \"DataFrame.from_dict(OrderedDict()) may be used to \"\n                      \"preserve the key order.\",\n                      FutureWarning, stacklevel=2)\n\n        keys, values = lzip(*items)\n\n        if orient == 'columns':\n            if columns is not None:\n                columns = _ensure_index(columns)\n\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(_ensure_index(keys)):\n                        raise ValueError('With non-unique item names, passed '\n                                         'columns must be identical')\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = _ensure_index(keys)\n                arrays = values\n\n            # GH 17312\n            # Provide more informative error msg when scalar values passed\n            try:\n                return cls._from_arrays(arrays, columns, None)\n\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError('The value in each (key, value) pair '\n                                     'must be an array, Series, or dict')\n\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n\n            keys = _ensure_index(keys)\n\n            # GH 17312\n            # Provide more informative error msg when scalar values passed\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError('The value in each (key, value) pair '\n                                     'must be an array, Series, or dict')\n\n        else:  # pragma: no cover\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=True,\n                 encoding=None, tupleize_cols=None,\n                 infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n\n        warnings.warn(\"from_csv is deprecated. Please use read_csv(...) \"\n                      \"instead. Note that some of the default arguments are \"\n                      \"different, so please refer to the documentation \"\n                      \"for from_csv when changing your function calls\",\n                      FutureWarning, stacklevel=2)\n\n        from pandas.io.parsers import read_table\n        return read_table(path, header=header, sep=sep,\n                          parse_dates=parse_dates, index_col=index_col,\n                          encoding=encoding, tupleize_cols=tupleize_cols,\n                          infer_datetime_format=infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame\n\n        Parameters\n        ----------\n        fill_value : float, default NaN\n        kind : {'block', 'integer'}\n\n        Returns\n        -------\n        y : SparseDataFrame\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index,\n                               columns=self.columns, default_kind=kind,\n                               default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        # only support this kind for now\n        if (not isinstance(self.index, MultiIndex) or  # pragma: no cover\n                len(self.index.levels) != 2):\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n\n        if not self.index.is_unique:\n            raise ValueError(\"Can't convert non-uniquely indexed \"\n                             \"DataFrame to Panel\")\n\n        self._consolidate_inplace()\n\n        # minor axis must be sorted\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n\n        # preserve names, if any\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n\n        # create new axes\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n\n        # create new manager\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes,\n                                              labels=[major_labels,\n                                                      minor_labels],\n                                              shape=shape,\n                                              ref_items=selfsorted.columns)\n\n        return self._constructor_expanddim(new_mgr)\n\n    def to_csv(self, path_or_buf=None, sep=\",\", na_rep='', float_format=None,\n               columns=None, header=True, index=True, index_label=None,\n               mode='w', encoding=None, compression=None, quoting=None,\n               quotechar='\"', line_terminator='\\n', chunksize=None,\n               tupleize_cols=None, date_format=None, doublequote=True,\n               escapechar=None, decimal='.'):\n        r\"\"\"Write DataFrame to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        sep : character, default ','\n            Field delimiter for the output file.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        columns : sequence, optional\n            Columns to write\n        header : boolean or list of string, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.  If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R\n        mode : str\n            Python write mode, default 'w'\n        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        compression : string, optional\n            a string representing the compression to use in the output file,\n            allowed values are 'gzip', 'bz2', 'xz',\n            only used when the first argument is a filename\n        line_terminator : string, default ``'\\n'``\n            The newline character or character sequence to use in the output\n            file\n        quoting : optional constant from csv module\n            defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric\n        quotechar : string (length 1), default '\\\"'\n            character used to quote fields\n        doublequote : boolean, default True\n            Control quoting of `quotechar` inside a field\n        escapechar : string (length 1), default None\n            character used to escape `sep` and `quotechar` when appropriate\n        chunksize : int or None\n            rows to write at a time\n        tupleize_cols : boolean, default False\n            .. deprecated:: 0.21.0\n               This argument will be removed and will always write each row\n               of the multi-index as a separate row in the CSV file.\n\n            Write MultiIndex columns as a list of tuples (if True) or in\n            the new, expanded format, where each MultiIndex column is a row\n            in the CSV (if False).\n        date_format : string, default None\n            Format string for datetime objects\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n\n        \"\"\"\n\n        if tupleize_cols is not None:\n            warnings.warn(\"The 'tupleize_cols' parameter is deprecated and \"\n                          \"will be removed in a future version\",\n                          FutureWarning, stacklevel=2)\n        else:\n            tupleize_cols = False\n\n        formatter = fmt.CSVFormatter(self, path_or_buf,\n                                     line_terminator=line_terminator, sep=sep,\n                                     encoding=encoding,\n                                     compression=compression, quoting=quoting,\n                                     na_rep=na_rep, float_format=float_format,\n                                     cols=columns, header=header, index=index,\n                                     index_label=index_label, mode=mode,\n                                     chunksize=chunksize, quotechar=quotechar,\n                                     tupleize_cols=tupleize_cols,\n                                     date_format=date_format,\n                                     doublequote=doublequote,\n                                     escapechar=escapechar, decimal=decimal)\n        formatter.save()\n\n        if path_or_buf is None:\n            return formatter.path_or_buf.getvalue()\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,\n                 merge_cells=True, encoding=None, inf_rep='inf', verbose=True,\n                 freeze_panes=None):\n\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n                                   header=header,\n                                   float_format=float_format, index=index,\n                                   index_label=index_label,\n                                   merge_cells=merge_cells,\n                                   inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=startrow,\n                        startcol=startcol, freeze_panes=freeze_panes,\n                        engine=engine)\n\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n                 encoding=\"latin-1\", byteorder=None, time_stamp=None,\n                 data_label=None, variable_labels=None):\n        \"\"\"\n        A class for writing Stata binary dta files from array-like objects\n\n        Parameters\n        ----------\n        fname : str or buffer\n            String path of file-like object\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        dataset_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        Examples\n        --------\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        Or with dates\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        from pandas.io.stata import StataWriter\n        writer = StataWriter(fname, self, convert_dates=convert_dates,\n                             encoding=encoding, byteorder=byteorder,\n                             time_stamp=time_stamp, data_label=data_label,\n                             write_index=write_index,\n                             variable_labels=variable_labels)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy',\n                   **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet reader library to use. If 'auto', then the option\n            'io.parquet.engine' is used. If 'auto', then the first\n            library to be installed is used.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        kwargs\n            Additional keyword arguments passed to the engine\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine,\n                   compression=compression, **kwargs)\n\n    @Substitution(header='Write out the column names. If a list of strings '\n                         'is given, it is assumed to be aliases for the '\n                         'column names')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n                  index=True, na_rep='NaN', formatters=None, float_format=None,\n                  sparsify=None, index_names=True, justify=None,\n                  line_width=None, max_rows=None, max_cols=None,\n                  show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        \"\"\"\n\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n                                           col_space=col_space, na_rep=na_rep,\n                                           formatters=formatters,\n                                           float_format=float_format,\n                                           sparsify=sparsify, justify=justify,\n                                           index_names=index_names,\n                                           header=header, index=index,\n                                           line_width=line_width,\n                                           max_rows=max_rows,\n                                           max_cols=max_cols,\n                                           show_dimensions=show_dimensions)\n        formatter.to_string()\n\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n                index=True, na_rep='NaN', formatters=None, float_format=None,\n                sparsify=None, index_names=True, justify=None, bold_rows=True,\n                classes=None, escape=True, max_rows=None, max_cols=None,\n                show_dimensions=False, notebook=False, decimal='.',\n                border=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        `to_html`-specific options:\n\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        max_cols : int, optional\n            Maximum number of columns to show before truncating. If None, show\n            all.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n        \"\"\"\n\n        if (justify is not None and\n                justify not in fmt._VALID_JUSTIFY_PARAMETERS):\n            raise ValueError(\"Invalid value for justify parameter\")\n\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n                                           col_space=col_space, na_rep=na_rep,\n                                           formatters=formatters,\n                                           float_format=float_format,\n                                           sparsify=sparsify, justify=justify,\n                                           index_names=index_names,\n                                           header=header, index=index,\n                                           bold_rows=bold_rows, escape=escape,\n                                           max_rows=max_rows,\n                                           max_cols=max_cols,\n                                           show_dimensions=show_dimensions,\n                                           decimal=decimal)\n        # TODO: a generic formatter wld b in DataFrameFormatter\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n             null_counts=None):\n        \"\"\"\n        Concise summary of a DataFrame.\n\n        Parameters\n        ----------\n        verbose : {None, True, False}, optional\n            Whether to print the full summary.\n            None follows the `display.max_info_columns` setting.\n            True or False overrides the `display.max_info_columns` setting.\n        buf : writable buffer, defaults to sys.stdout\n        max_cols : int, default None\n            Determines whether full summary or short summary is printed.\n            None follows the `display.max_info_columns` setting.\n        memory_usage : boolean/string, default None\n            Specifies whether total memory usage of the DataFrame\n            elements (including index) should be displayed. None follows\n            the `display.memory_usage` setting. True or False overrides\n            the `display.memory_usage` setting. A value of 'deep' is equivalent\n            of True, with deep introspection. Memory usage is shown in\n            human-readable units (base-2 representation).\n        null_counts : boolean, default None\n            Whether to show the non-null counts\n\n            - If None, then only show if the frame is smaller than\n              max_info_rows and max_info_columns.\n            - If True, always show counts.\n            - If False, never show counts.\n\n        \"\"\"\n        from pandas.io.formats.format import _put_lines\n\n        if buf is None:  # pragma: no cover\n            buf = sys.stdout\n\n        lines = []\n\n        lines.append(str(type(self)))\n        lines.append(self.index.summary())\n\n        if len(self.columns) == 0:\n            lines.append('Empty %s' % type(self).__name__)\n            _put_lines(buf, lines)\n            return\n\n        cols = self.columns\n\n        # hack\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns',\n                                  len(self.columns) + 1)\n\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n\n        if null_counts is None:\n            show_counts = ((len(self.columns) <= max_cols) and\n                           (len(self) < max_rows))\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' %\n                         len(self.columns))\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n\n            tmpl = \"%s%s\"\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):  # pragma: no cover\n                    raise AssertionError('Columns must equal counts (%d != %d)'\n                                         % (len(cols), len(counts)))\n                tmpl = \"%s non-null %s\"\n\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n\n                count = \"\"\n                if show_counts:\n                    count = counts.iloc[i]\n\n                lines.append(_put_str(col, space) + tmpl % (count, dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns.summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            # returns size in human readable format\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return \"%3.1f%s %s\" % (num, size_qualifier, x)\n                num /= 1024.0\n            return \"%3.1f%s %s\" % (num, size_qualifier, 'PB')\n\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:  # specifically set to False, not nesc None\n            _non_verbose_repr()\n        else:\n            if exceeds_info_cols:\n                _non_verbose_repr()\n            else:\n                _verbose_repr()\n\n        counts = self.get_dtype_counts()\n        dtypes = ['%s(%d)' % k for k in sorted(compat.iteritems(counts))]\n        lines.append('dtypes: %s' % ', '.join(dtypes))\n\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            # append memory usage of df to display\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                # size_qualifier is just a best effort; not guaranteed to catch\n                # all cases (e.g., it misses categorical data even with object\n                # categories)\n                deep = False\n                if ('object' in counts or\n                        self.index._is_memory_usage_qualified()):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append(\"memory usage: %s\\n\" %\n                         _sizeof_fmt(mem_usage, size_qualifier))\n        _put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"Memory usage of DataFrame columns.\n\n        Parameters\n        ----------\n        index : bool\n            Specifies whether to include memory usage of DataFrame's\n            index in returned Series. If `index=True` (default is False)\n            the first index of the Series is `Index`.\n        deep : bool\n            Introspect the data deeply, interrogate\n            `object` dtypes for system-level memory consumption\n\n        Returns\n        -------\n        sizes : Series\n            A series with column names as index and memory usage of\n            columns with units of bytes.\n\n        Notes\n        -----\n        Memory usage does not include memory consumed by elements that\n        are not components of the array if deep=False\n\n        See Also\n        --------\n        numpy.ndarray.nbytes\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep)\n                         for col, c in self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep),\n                            index=['Index']).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"Transpose index and columns\"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n\n    T = property(transpose)\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    # legacy pickle formats\n    def _unpickle_frame_compat(self, state):  # pragma: no cover\n        if len(state) == 2:  # pragma: no cover\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):  # pragma: no cover\n        # old unpickling\n        (vals, idx, cols), object_state = state\n\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n                       copy=False)\n\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index,\n                                columns=com._unpickle_array(ocols), copy=False)\n\n            dm = dm.join(objects)\n\n        self._data = dm._data\n\n    # ----------------------------------------------------------------------\n    # Getting and setting elements\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n\n        warnings.warn(\"get_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com._maybe_box_datetimelike(series._values[index])\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n\n            # we cannot handle direct indexing\n            # use positional\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\"set_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n\n            # set using a non-recursive method & reset the cache\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n\n        # irow\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    # a location index by definition\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n\n                    # if we are a copy, mark as such\n                    copy = (isinstance(new_values, np.ndarray) and\n                            new_values.base is None)\n                    result = self._constructor_sliced(new_values,\n                                                      index=self.columns,\n                                                      name=self.index[i],\n                                                      dtype=new_values.dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n\n        # icol\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n\n            label = self.columns[i]\n            if isinstance(i, slice):\n                # need to return view\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1, convert=True)\n\n                index_len = len(self.index)\n\n                # if the values returned are not the same length\n                # as the index (iow a not found value), iget returns\n                # a 0-len ndarray. This is effectively catching\n                # a numpy error (as numpy should really raise)\n                values = self._data.iget(i)\n\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._constructor_sliced._from_array(\n                    values, index=self.index, name=label, fastpath=True)\n\n                # this is a cached value, mark it so\n                result._set_as_cached(label, self)\n\n                return result\n\n    def __getitem__(self, key):\n        key = com._apply_if_callable(key, self)\n\n        # shortcut if we are an actual column\n        is_mi_columns = isinstance(self.columns, MultiIndex)\n        try:\n            if key in self.columns and not is_mi_columns:\n                return self._getitem_column(key)\n        except:\n            pass\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._getitem_slice(indexer)\n\n        if isinstance(key, (Series, np.ndarray, Index, list)):\n            # either boolean or fancy integer index\n            return self._getitem_array(key)\n        elif isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        elif is_mi_columns:\n            return self._getitem_multilevel(key)\n        else:\n            return self._getitem_column(key)\n\n    def _getitem_column(self, key):\n        \"\"\" return the actual column \"\"\"\n\n        # get column\n        if self.columns.is_unique:\n            return self._get_item_cache(key)\n\n        # duplicate columns & possible reduce dimensionality\n        result = self._constructor(self._data.get(key))\n        if result.columns.is_unique:\n            result = result[key]\n\n        return result\n\n    def _getitem_slice(self, key):\n        return self._slice(key, axis=0)\n\n    def _getitem_array(self, key):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            # warning here just in case -- previously __setitem__ was\n            # reindexing but __getitem__ was not; it seems more reasonable to\n            # go with the __setitem__ behavior since that is more consistent\n            # with all other indexing behavior\n            if isinstance(key, Series) and not key.index.equals(self.index):\n                warnings.warn(\"Boolean Series key will be reindexed to match \"\n                              \"DataFrame index.\", UserWarning, stacklevel=3)\n            elif len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d.' %\n                                 (len(key), len(self.index)))\n            # check_bool_indexer will throw exception if Series key cannot\n            # be reindexed to match DataFrame rows\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            return self._take(indexer, axis=0, convert=False)\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            return self._take(indexer, axis=1, convert=True)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                                           columns=result_columns)\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result,\n                                                          index=self.index,\n                                                          name=key)\n\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> from numpy.random import randn\n        >>> from pandas import DataFrame\n        >>> df = pd.DataFrame(randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"Evaluate an expression in the context of the calling DataFrame\n        instance.\n\n        Parameters\n        ----------\n        expr : string\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ret : ndarray, scalar, or pandas object\n\n        See Also\n        --------\n        pandas.DataFrame.query\n        pandas.DataFrame.assign\n        pandas.eval\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> from numpy.random import randn\n        >>> from pandas import DataFrame\n        >>> df = pd.DataFrame(randn(10, 2), columns=list('ab'))\n        >>> df.eval('a + b')\n        >>> df.eval('c = a + b')\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"Return a subset of a DataFrame including/excluding columns based on\n        their ``dtype``.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': np.random.randn(6).astype('f4'),\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0  0.3962   True  1.0\n        1  0.1459  False  2.0\n        2  0.2623   True  1.0\n        3  0.0764  False  2.0\n        4 -0.9703   True  1.0\n        5 -1.2094  False  2.0\n        >>> df.select_dtypes(include='bool')\n           c\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n        >>> df.select_dtypes(exclude=['floating'])\n               b\n        0   True\n        1  False\n        2   True\n        3  False\n        4   True\n        5  False\n        \"\"\"\n\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = tuple(map(frozenset, (include, exclude)))\n\n        if not any(selection):\n            raise ValueError('at least one of include or exclude must be '\n                             'nonempty')\n\n        # convert the myriad valid dtypes object to a single representation\n        include, exclude = map(\n            lambda x: frozenset(map(_get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on %s' %\n                             (include & exclude))\n\n        # empty include/exclude -> defaults to True\n        # three cases (we've already raised if both are empty)\n        # case 1: empty include, nonempty exclude\n        # we have True, True, ... True for include, same for exclude\n        # in the loop below we get the excluded\n        # and when we call '&' below we get only the excluded\n        # case 2: nonempty include, empty exclude\n        # same as case 1, but with include\n        # case 3: both nonempty\n        # the \"union\" of the logic of case 1 and case 2:\n        # we get the included and excluded, and return their logical and\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(column, dtype):\n            return column, functools.partial(issubclass, dtype.type)\n\n        for column, f in itertools.starmap(is_dtype_instance_mapper,\n                                           self.dtypes.iteritems()):\n            if include:  # checks for the case of empty include or exclude\n                include_these[column] = any(map(f, include))\n            if exclude:\n                exclude_these[column] = not any(map(f, exclude))\n\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com._get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        return self._constructor_sliced._from_array(values, index=self.index,\n                                                    name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com._apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' %\n                                 (len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        else:\n            if isinstance(value, DataFrame):\n                if len(value.columns) != len(key):\n                    raise ValueError('Columns must be same length as key')\n                for k1, k2 in zip(key, value.columns):\n                    self[k1] = value[k2]\n            else:\n                indexer = self.loc._convert_to_indexer(key, axis=1)\n                self._check_setitem_copy()\n                self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        # support boolean setting with DataFrame input, e.g.\n        # df[df > df2] = 0\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError(\n                    'Array conditional must be same shape as self'\n                )\n            key = self._constructor(key, **self._construct_axes_dict())\n\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only'\n            )\n\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError('Cannot set a frame with no defined index '\n                                 'and a value that cannot be converted to a '\n                                 'Series')\n\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                                                 fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value,\n                          allow_duplicates=allow_duplicates)\n\n    def assign(self, **kwargs):\n        r\"\"\"\n        Assign new columns to a DataFrame, returning a new object\n        (a copy) with all the original columns in addition to the new ones.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            keywords are the column names. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        For python 3.6 and above, the columns are inserted in the order of\n        \\*\\*kwargs. For python 3.5 and earlier, since \\*\\*kwargs is unordered,\n        the columns are inserted in alphabetical order at the end of your\n        DataFrame.  Assigning multiple columns within the same ``assign``\n        is possible, but you cannot reference other columns created within\n        the same ``assign`` call.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n        \"\"\"\n        data = self.copy()\n\n        # do all calculations first...\n        results = OrderedDict()\n        for k, v in kwargs.items():\n            results[k] = com._apply_if_callable(v, data)\n\n        # preserve order for 3.6 and later, but sort by key for 3.5 and earlier\n        if PY36:\n            results = results.items()\n        else:\n            results = sorted(results.items())\n        # ... and then assign\n        for k, v in results:\n            data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n\n                    # duplicate axis\n                    if not value.index.is_unique:\n                        raise e\n\n                    # other\n                    raise TypeError('incompatible index of inserted column '\n                                    'with frame index')\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, Categorical):\n            value = value.copy()\n\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n\n            # turn me into an ndarray\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com._asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # upcast the scalar\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, value.dtype)\n\n        # return internal types directly\n        if is_extension_type(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if (not self.columns.is_unique or\n                    isinstance(self.columns, MultiIndex)):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                                  name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n\n        return result\n\n    # ----------------------------------------------------------------------\n    # Reindexing and alignment\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n                      copy):\n        frame = self\n\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                                           fill_value, limit, tolerance)\n\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                                         fill_value, limit, tolerance)\n\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.nan,\n                       limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n                                                level=level, limit=limit,\n                                                tolerance=tolerance)\n        return self._reindex_with_indexers({0: [new_index, indexer]},\n                                           copy=copy, fill_value=fill_value,\n                                           allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level,\n                         fill_value=np.nan, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=method,\n                                                    level=level, limit=limit,\n                                                    tolerance=tolerance)\n        return self._reindex_with_indexers({1: [new_columns, indexer]},\n                                           copy=copy, fill_value=fill_value,\n                                           allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                                                  fill_value=fill_value)\n            return self._constructor(new_values, index=new_index,\n                                     columns=new_columns)\n        else:\n            return self._reindex_with_indexers({0: [new_index, row_indexer],\n                                                1: [new_columns, col_indexer]},\n                                               copy=copy,\n                                               fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n                                            level=level, copy=copy,\n                                            fill_value=fill_value,\n                                            method=method, limit=limit,\n                                            fill_axis=fill_axis,\n                                            broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None),\n                                             ('copy', True),\n                                             ('level', None),\n                                             ('fill_value', np.nan),\n                                             ('limit', None),\n                                             ('tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels',\n                                        'reindex')\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=True,\n                     limit=None, fill_value=np.nan):\n        return super(DataFrame,\n                     self).reindex_axis(labels=labels, axis=axis,\n                                        method=method, level=level, copy=copy,\n                                        limit=limit, fill_value=fill_value)\n\n    @rewrite_axis_style_signature('mapper', [('copy', True),\n                                             ('inplace', False),\n                                             ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Appender(_shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None, **kwargs):\n        return super(DataFrame,\n                     self).fillna(value=value, method=method, axis=axis,\n                                  inplace=inplace, limit=limit,\n                                  downcast=downcast, **kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        return super(DataFrame, self).replace(to_replace=to_replace,\n                                              value=value, inplace=inplace,\n                                              limit=limit, regex=regex,\n                                              method=method, axis=axis)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n                                            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n                  verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                # append all but the last column so we don't have to modify\n                # the end of this loop\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n\n        index = _ensure_index_from_sequences(arrays, names)\n\n        if verify_integrity and not index.is_unique:\n            duplicates = index.get_duplicates()\n            raise ValueError('Index has duplicate keys: %s' % duplicates)\n\n        for c in to_remove:\n            del frame[c]\n\n        # clear up memory usage\n        index._cleanup()\n\n        frame.index = index\n\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=0,\n                    col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            if isinstance(index, PeriodIndex):\n                values = index.astype(object).values\n            elif isinstance(index, DatetimeIndex) and index.tz is not None:\n                values = index\n            else:\n                values = index.values\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(\n                            values, mask, np.nan)\n            return values\n\n        new_index = com._default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if isinstance(self.index, MultiIndex):\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [n if n is not None else ('level_%d' % i)\n                         for (i, n) in enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = ([default] if self.index.name is None\n                         else [self.index.name])\n                to_insert = ((self.index, None),)\n\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = (list(name) if isinstance(name, tuple)\n                                else [name])\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\"col_fill=None is incompatible \"\n                                             \"with incomplete column name \"\n                                             \"{}\".format(name))\n                        col_fill = col_name[0]\n\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                # to ndarray and maybe infer different dtype\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    # ----------------------------------------------------------------------\n    # Reindex-based selection methods\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None,\n               inplace=False):\n        \"\"\"\n        Return object with labels on given axis omitted where alternately any\n        or all of the data are missing\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, or tuple/list thereof\n            Pass tuple or list to drop on multiple axes\n        how : {'any', 'all'}\n            * any : if any NA values are present, drop that label\n            * all : if all values are NA, drop that label\n        thresh : int, default None\n            int value : require that many non-NA values\n        subset : array-like\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include\n        inplace : boolean, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        dropped : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0], [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5]],\n        ...                   columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n\n        Drop the columns where all elements are nan:\n\n        >>> df.dropna(axis=1, how='all')\n             A    B  D\n        0  NaN  2.0  0\n        1  3.0  4.0  1\n        2  NaN  NaN  5\n\n        Drop the columns where any of the elements is nan\n\n        >>> df.dropna(axis=1, how='any')\n           D\n        0  0\n        1  1\n        2  5\n\n        Drop the rows where all of the elements are nan\n        (there is no row to drop, so df stays the same):\n\n        >>> df.dropna(axis=0, how='all')\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n\n        Keep only the rows with at least 2 non-na values:\n\n        >>> df.dropna(thresh=2)\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=subset,\n                                       axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n\n            count = agg_obj.count(axis=agg_axis)\n\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            else:\n                if how is not None:\n                    raise ValueError('invalid how option: %s' % how)\n                else:\n                    raise TypeError('must specify how or thresh')\n\n            result = self._take(mask.nonzero()[0], axis=axis, convert=False)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n\n        if subset is None:\n            subset = self.columns\n        elif (not np.iterable(subset) or\n              isinstance(subset, compat.string_types) or\n              isinstance(subset, tuple) and subset in self.columns):\n            subset = subset,\n\n        vals = (col.values for name, col in self.iteritems()\n                if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    # ----------------------------------------------------------------------\n    # Sorting\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2  # Number of stack levels from df.sort_values\n\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError('Length of ascending (%d) != length of by (%d)' %\n                             (len(ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                                                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending,\n                                      na_position=na_position)\n            indexer = _ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis,\n                                                stacklevel=stacklevel)\n\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        new_data = self._data.take(indexer,\n                                   axis=self._get_block_manager_axis(axis),\n                                   verify=False)\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True,\n                   by=None):\n\n        # TODO: this can be combined with Series.sort_index impl as\n        # almost identical\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        # 10726\n        if by is not None:\n            warnings.warn(\"by argument to sort_index is deprecated, \"\n                          \"please use .sort_values(by=...)\",\n                          FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError(\"unable to simultaneously sort by and level\")\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                                    inplace=inplace)\n\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n\n        if level:\n\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                                                 sort_remaining=sort_remaining)\n\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            # make sure that the axis is lexsorted to start\n            # if not we need to reconstruct to get the correct indexer\n            labels = labels._sort_levels_monotonic()\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                                      orders=ascending,\n                                      na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if ((ascending and labels.is_monotonic_increasing) or\n                    (not ascending and labels.is_monotonic_decreasing)):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer,\n                                   axis=baxis,\n                                   verify=False)\n\n        # reconstruct axis if needed\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n                  sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn(\"sortlevel is deprecated, use sort_index(level= ...)\",\n                      FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n                               inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` largest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df.nlargest(3, 'a')\n            a  b   c\n        3  11  c   3\n        1  10  b   2\n        2   8  d NaN\n        \"\"\"\n        return algorithms.SelectNFrame(self,\n                                       n=n,\n                                       keep=keep,\n                                       columns=columns).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df.nsmallest(3, 'a')\n           a  b   c\n        4 -1  e   4\n        0  1  a   1\n        2  8  d NaN\n        \"\"\"\n        return algorithms.SelectNFrame(self,\n                                       n=n,\n                                       keep=keep,\n                                       columns=columns).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis),\n                          MultiIndex):  # pragma: no cover\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n\n        result = self.copy()\n\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    # ----------------------------------------------------------------------\n    # Arithmetic / combination related\n\n    def _combine_frame(self, other, func, fill_value=None, level=None,\n                       try_cast=True):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            if fill_value is not None:\n                left_mask = isna(left)\n                right_mask = isna(right)\n                left = left.copy()\n                right = right.copy()\n\n                # one but not both\n                mask = left_mask ^ right_mask\n                left[left_mask & mask] = fill_value\n                right[right_mask & mask] = fill_value\n\n            return func(left, right)\n\n        if this._is_mixed_type or other._is_mixed_type:\n\n            # unique\n            if this.columns.is_unique:\n\n                def f(col):\n                    r = _arith_op(this[col].values, other[col].values)\n                    return self._constructor_sliced(r, index=new_index,\n                                                    dtype=r.dtype)\n\n                result = {col: f(col) for col in this}\n\n            # non-unique\n            else:\n\n                def f(i):\n                    r = _arith_op(this.iloc[:, i].values,\n                                  other.iloc[:, i].values)\n                    return self._constructor_sliced(r, index=new_index,\n                                                    dtype=r.dtype)\n\n                result = {i: f(i) for i, col in enumerate(this.columns)}\n                result = self._constructor(result, index=new_index, copy=False)\n                result.columns = new_columns\n                return result\n\n        else:\n            result = _arith_op(this.values, other.values)\n\n        return self._constructor(result, index=new_index, columns=new_columns,\n                                 copy=False)\n\n    def _combine_series(self, other, func, fill_value=None, axis=None,\n                        level=None, try_cast=True):\n        if axis is not None:\n            axis = self._get_axis_name(axis)\n            if axis == 'index':\n                return self._combine_match_index(other, func, level=level,\n                                                 fill_value=fill_value,\n                                                 try_cast=try_cast)\n            else:\n                return self._combine_match_columns(other, func, level=level,\n                                                   fill_value=fill_value,\n                                                   try_cast=try_cast)\n        return self._combine_series_infer(other, func, level=level,\n                                          fill_value=fill_value,\n                                          try_cast=try_cast)\n\n    def _combine_series_infer(self, other, func, level=None,\n                              fill_value=None, try_cast=True):\n        if len(other) == 0:\n            return self * np.nan\n\n        if len(self) == 0:\n            # Ambiguous case, use _series so works with DataFrame\n            return self._constructor(data=self._series, index=self.index,\n                                     columns=self.columns)\n\n        return self._combine_match_columns(other, func, level=level,\n                                           fill_value=fill_value,\n                                           try_cast=try_cast)\n\n    def _combine_match_index(self, other, func, level=None,\n                             fill_value=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n                                 copy=False)\n        if fill_value is not None:\n            raise NotImplementedError(\"fill_value %r not supported.\" %\n                                      fill_value)\n        return self._constructor(func(left.values.T, right.values).T,\n                                 index=left.index, columns=self.columns,\n                                 copy=False)\n\n    def _combine_match_columns(self, other, func, level=None,\n                               fill_value=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n                                 copy=False)\n        if fill_value is not None:\n            raise NotImplementedError(\"fill_value %r not supported\" %\n                                      fill_value)\n\n        new_data = left._data.eval(func=func, other=right,\n                                   axes=[left.columns, self.index],\n                                   try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        new_data = self._data.eval(func=func, other=other,\n                                   errors=errors,\n                                   try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame_evaluate(self, other, func, str_rep, try_cast=True):\n\n        import pandas.core.computation.expressions as expressions\n        # unique\n        if self.columns.is_unique:\n\n            def _compare(a, b):\n                return {col: func(a[col], b[col]) for col in a.columns}\n\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            return self._constructor(data=new_data, index=self.index,\n                                     columns=self.columns, copy=False)\n        # non-unique\n        else:\n\n            def _compare(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[:, i])\n                        for i, col in enumerate(a.columns)}\n\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            result = self._constructor(data=new_data, index=self.index,\n                                       copy=False)\n            result.columns = self.columns\n            return result\n\n    def _compare_frame(self, other, func, str_rep, try_cast=True):\n        if not self._indexed_same(other):\n            raise ValueError('Can only compare identically-labeled '\n                             'DataFrame objects')\n        return self._compare_frame_evaluate(other, func, str_rep,\n                                            try_cast=try_cast)\n\n    def _flex_compare_frame(self, other, func, str_rep, level, try_cast=True):\n        if not self._indexed_same(other):\n            self, other = self.align(other, 'outer', level=level, copy=False)\n        return self._compare_frame_evaluate(other, func, str_rep,\n                                            try_cast=try_cast)\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Add two DataFrame objects and do not propagate NaN values, so if for a\n        (column, time) one frame is missing a value, it will default to the\n        other frame's value (which might be NaN as well)\n\n        Parameters\n        ----------\n        other : DataFrame\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar\n        fill_value : scalar value\n        overwrite : boolean, default True\n            If True then overwrite values for common keys in the calling frame\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        >>> df1 = DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, lambda s1, s2: s1 if s1.sum() < s2.sum() else s2)\n           A  B\n        0  0  3\n        1  0  3\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)  # save for compare\n\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n\n        # sorts if possible\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n\n            # don't overwrite columns unecessarily\n            # DO propagate if this column is not in the intersection\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n\n            # if we have different dtypes, possibly promote\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n\n            # see if we need to be represented as i8 (datetimelike)\n            # try to keep us at this dtype\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n\n            if do_fill:\n                arr = _ensure_float(arr)\n                arr[this_mask & other_mask] = np.nan\n\n            # try to downcast back to the original dtype\n            if needs_i8_conversion_i:\n                # ToDo: This conversion should be handled in\n                # _maybe_cast_to_datetime but the change affects lot...\n                if is_datetime64tz_dtype(new_dtype):\n                    arr = DatetimeIndex._simple_new(arr, tz=new_dtype.tz)\n                else:\n                    arr = maybe_cast_to_datetime(arr, new_dtype)\n            else:\n                arr = maybe_downcast_to_dtype(arr, this_dtype)\n\n            result[col] = arr\n\n        # convert_objects just in case\n        return self._constructor(result, index=new_index,\n                                 columns=new_columns)._convert(datetime=True,\n                                                               copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine two DataFrame objects and default to non-null values in frame\n        calling the method. Result index columns will be the union of the\n        respective indexes and columns\n\n        Parameters\n        ----------\n        other : DataFrame\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n        df1's values prioritized, use values from df2 to fill holes:\n\n        >>> df1 = pd.DataFrame([[1, np.nan]])\n        >>> df2 = pd.DataFrame([[3, 4]])\n        >>> df1.combine_first(df2)\n           0    1\n        0  1  4.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n\n            return expressions.where(mask, y_values, x_values)\n\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n               raise_conflict=False):\n        \"\"\"\n        Modify DataFrame in place using non-NA values from passed\n        DataFrame. Aligns on indices\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n        join : {'left'}, default 'left'\n        overwrite : boolean, default True\n            If True then overwrite values for common keys in the calling frame\n        filter_func : callable(1d-array) -> 1d-array<boolean>, default None\n            Can choose to replace values other than NA. Return True for values\n            that should be updated\n        raise_conflict : boolean\n            If True, will raise an error if the DataFrame and other both\n            contain data in the same place.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If ``other`` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        # TODO: Support other joins\n        if join != 'left':  # pragma: no cover\n            raise NotImplementedError(\"Only left join is supported\")\n\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n\n        other = other.reindex_like(self)\n\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError(\"Data overlaps.\")\n\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n\n            # don't overwrite columns unecessarily\n            if mask.all():\n                continue\n\n            self[col] = expressions.where(mask, this, that)\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    def _get_valid_indices(self):\n        is_valid = self.count(1) > 0\n        return self.index[is_valid]\n\n    @Appender(_shared_docs['valid_index'] % {\n        'position': 'first', 'klass': 'DataFrame'})\n    def first_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        valid_indices = self._get_valid_indices()\n        return valid_indices[0] if len(valid_indices) else None\n\n    @Appender(_shared_docs['valid_index'] % {\n        'position': 'last', 'klass': 'DataFrame'})\n    def last_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        valid_indices = self._get_valid_indices()\n        return valid_indices[-1] if len(valid_indices) else None\n\n    # ----------------------------------------------------------------------\n    # Data reshaping\n\n    def pivot(self, index=None, columns=None, values=None):\n        \"\"\"\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from index / columns to form axes of the resulting\n        DataFrame.\n\n        Parameters\n        ----------\n        index : string or object, optional\n            Column name to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column name to use to make new frame's columns\n        values : string or object, optional\n            Column name to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns\n\n        Returns\n        -------\n        pivoted : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair\n        DataFrame.unstack : pivot based on the index values instead of a\n            column\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'foo': ['one','one','one','two','two','two'],\n                               'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                               'baz': [1, 2, 3, 4, 5, 6]})\n        >>> df\n            foo   bar  baz\n        0   one   A    1\n        1   one   B    2\n        2   one   C    3\n        3   two   A    4\n        4   two   B    5\n        5   two   C    6\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n             A   B   C\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n             A   B   C\n        one  1   2   3\n        two  4   5   6\n\n\n        \"\"\"\n        from pandas.core.reshape.reshape import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None,\n                    aggfunc='mean', fill_value=None, margins=False,\n                    dropna=True, margins_name='All'):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=columns,\n                           aggfunc=aggfunc, fill_value=fill_value,\n                           margins=margins, dropna=dropna,\n                           margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Pivot a level of the (possibly hierarchical) column labels, returning a\n        DataFrame (or Series in the case of an object with a single level of\n        column labels) having a hierarchical index with a new inner-most level\n        of row labels.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default last level\n            Level(s) to stack, can pass level name\n        dropna : boolean, default True\n            Whether to drop rows in the resulting Frame/Series with no valid\n            values\n\n        Examples\n        ----------\n        >>> s\n             a   b\n        one  1.  2.\n        two  3.  4.\n\n        >>> s.stack()\n        one a    1\n            b    2\n        two a    3\n            b    4\n\n        Returns\n        -------\n        stacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n\n    _shared_docs['melt'] = (\"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\")\n\n    @Appender(_shared_docs['melt'] %\n              dict(caller='df.melt(',\n                   versionadded='.. versionadded:: 0.20.0\\n',\n                   other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None,\n             value_name='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars,\n                    var_name=var_name, value_name=value_name,\n                    col_level=col_level)\n\n    # ----------------------------------------------------------------------\n    # Time series-related\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        1st discrete difference of object\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming difference\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1\n\n        Returns\n        -------\n        diffed : DataFrame\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    # ----------------------------------------------------------------------\n    # Function application\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n\n        # TODO: _shallow_copy(subset)?\n        return self[key]\n\n    _agg_doc = dedent(\"\"\"\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    >>> df.iloc[3:7] = np.nan\n\n    Aggregate these functions across all columns\n\n    >>> df.agg(['sum', 'min'])\n                A         B         C\n    sum -0.182253 -0.614014 -2.909534\n    min -1.916563 -1.460076 -1.568297\n\n    Different aggregations per column\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n                A         B\n    max       NaN  1.514318\n    min -1.916563 -1.460076\n    sum -0.182253       NaN\n\n    See also\n    --------\n    pandas.DataFrame.apply\n    pandas.DataFrame.transform\n    pandas.DataFrame.groupby.aggregate\n    pandas.DataFrame.resample.aggregate\n    pandas.DataFrame.rolling.aggregate\n\n    \"\"\")\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(\n        versionadded='.. versionadded:: 0.20.0',\n        **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n\n        # TODO: flipped axis\n        result = None\n        if axis == 0:\n            try:\n                result, how = self._aggregate(func, axis=0, *args, **kwargs)\n            except TypeError:\n                pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    agg = aggregate\n\n    def apply(self, func, axis=0, broadcast=False, raw=False, reduce=None,\n              args=(), **kwds):\n        \"\"\"Applies function along input axis of DataFrame.\n\n        Objects passed to functions are Series objects having index\n        either the DataFrame's index (axis=0) or the columns (axis=1).\n        Return type depends on whether passed function aggregates, or the\n        reduce argument if the DataFrame is empty.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column/row\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index': apply function to each column\n            * 1 or 'columns': apply function to each row\n        broadcast : boolean, default False\n            For aggregation functions, return object of same size with values\n            propagated\n        raw : boolean, default False\n            If False, convert each row or column into a Series. If raw=True the\n            passed function will receive ndarray objects instead. If you are\n            just applying a NumPy reduction function this will achieve much\n            better performance\n        reduce : boolean or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            apply will use reduce to determine whether the result should be a\n            Series or a DataFrame. If reduce is None (the default), apply's\n            return value will be guessed by calling func an empty Series (note:\n            while guessing, exceptions raised by func will be ignored). If\n            reduce is True a Series will always be returned, and if False a\n            DataFrame will always be returned.\n        args : tuple\n            Positional arguments to pass to function in addition to the\n            array/series\n        Additional keyword arguments will be passed as keywords to the function\n\n        Notes\n        -----\n        In the current implementation apply calls func twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if func has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        Examples\n        --------\n        >>> df.apply(numpy.sqrt) # returns DataFrame\n        >>> df.apply(numpy.sum, axis=0) # equiv to df.sum(0)\n        >>> df.apply(numpy.sum, axis=1) # equiv to df.sum(1)\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transformating type operations\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self,\n                         func=func,\n                         axis=axis,\n                         broadcast=broadcast,\n                         raw=raw,\n                         reduce=reduce,\n                         args=args, **kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a DataFrame that is intended to operate\n        elementwise, i.e. like doing map(func, series) for each series in the\n        DataFrame\n\n        Parameters\n        ----------\n        func : function\n            Python function, returns a single value from a single value\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.random.randn(3, 3))\n        >>> df\n            0         1          2\n        0  -0.029638  1.081563   1.280300\n        1   0.647747  0.831136  -1.549481\n        2   0.513416 -0.884417   0.195343\n        >>> df = df.applymap(lambda x: '%.2f' % x)\n        >>> df\n            0         1          2\n        0  -0.03      1.08       1.28\n        1   0.65      0.83      -1.55\n        2   0.51     -0.88       0.20\n\n        Returns\n        -------\n        applied : DataFrame\n\n        See also\n        --------\n        DataFrame.apply : For operations on rows/columns\n\n        \"\"\"\n\n        # if we have a dtype == 'M8[ns]', provide boxed values\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n\n        return self.apply(infer)\n\n    # ----------------------------------------------------------------------\n    # Merging / joining methods\n\n    def append(self, other, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Append rows of `other` to the end of this frame, returning a new\n        object. Columns not in this frame are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError('Can only append a Series if ignore_index=True'\n                                ' or if the Series has a name')\n\n            if other.name is None:\n                index = None\n            else:\n                # other must have the same index name as self, otherwise\n                # index name will be reset\n                index = Index([other.name], name=self.index.name)\n\n            combined_columns = self.columns.tolist() + self.columns.union(\n                other.index).difference(self.columns).tolist()\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))),\n                              index=index,\n                              columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n                      verify_integrity=verify_integrity)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='',\n             sort=False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        # For SparseDataFrame's benefit\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n                                 rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='',\n                     sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how,\n                         left_index=on is None, right_index=True,\n                         suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError('Joining multiple DataFrames only supported'\n                                 ' for joining on index')\n\n            # join indexes only using concat\n            if how == 'left':\n                how = 'outer'\n                join_axes = [self.index]\n            else:\n                join_axes = None\n\n            frames = [self] + list(other)\n\n            can_concat = all(df.index.is_unique for df in frames)\n\n            if can_concat:\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                              verify_integrity=True)\n\n            joined = frames[0]\n\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                               right_index=True)\n\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=None,\n              left_index=False, right_index=False, sort=False,\n              suffixes=('_x', '_y'), copy=True, indicator=False,\n              validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on,\n                     right_on=right_on, left_index=left_index,\n                     right_index=right_index, sort=sort, suffixes=suffixes,\n                     copy=copy, indicator=indicator, validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n\n        nv.validate_round(args, kwargs)\n\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError(\"Index of decimals must be unique\")\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            # Dispatch to Series.round\n            new_cols = [_series_round(v, decimals)\n                        for _, v in self.iteritems()]\n        else:\n            raise TypeError(\"decimals must be an integer, a dict-like or a \"\n                            \"Series\")\n\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1),\n                                     index=self.index,\n                                     columns=self.columns)\n        else:\n            return self\n\n    # ----------------------------------------------------------------------\n    # Statistical methods, etc.\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n\n        if method == 'pearson':\n            correl = libalgos.nancorr(_ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(_ensure_float64(mat),\n                                               minp=min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = _ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        y : DataFrame\n\n        Notes\n        -----\n        `y` contains the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1 (unbiased estimator).\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(_ensure_float64(mat), cov=True,\n                                       minp=min_periods)\n\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n\n        other = other._get_numeric_data()\n\n        left, right = this.align(other, join='inner', copy=False)\n\n        # mask missing values\n        left = left + right * 0\n        right = right + left * 0\n\n        if axis == 1:\n            left = left.T\n            right = right.T\n\n        # demeaned data\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n\n        correl = num / dom\n\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n\n        return correl\n\n    # ----------------------------------------------------------------------\n    # ndarray-like stats methods\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Return Series with number of non-NA/null observations over requested\n        axis. Works with non-floating point data as well (detects NaN and None)\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a DataFrame\n        numeric_only : boolean, default False\n            Include only float, int, boolean data\n\n        Returns\n        -------\n        count : Series (or DataFrame if level specified)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis,\n                                     numeric_only=numeric_only)\n\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        # GH #423\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        else:\n            if frame._is_mixed_type:\n                result = notna(frame).sum(axis=axis)\n            else:\n                counts = notna(frame.values).sum(axis=axis)\n                result = Series(counts, index=frame._get_agg_axis(axis))\n\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError(\"Can only count levels on hierarchical %s.\" %\n                            self._get_axis_name(axis))\n\n        if frame._is_mixed_type:\n            # Since we have mixed types, calling notna(frame.values) might\n            # upcast everything to object\n            mask = notna(frame).values\n        else:\n            # But use the speedup when we have homogeneous dtypes\n            mask = notna(frame.values)\n\n        if axis == 1:\n            # We're transposing the mask rather than frame to avoid potential\n            # upcasts to object, which induces a ~20x slowdown\n            mask = mask.T\n\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n\n        level_index = count_axis.levels[level]\n        labels = _ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n\n        if axis == 1:\n            # Undo our earlier transpose\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n                filter_type=None, **kwds):\n        axis = self._get_axis_number(axis)\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        labels = self._get_agg_axis(axis)\n\n        # exclude timedelta/datetime unless we are uniform types\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n            except Exception as e:\n\n                # try by-column first\n                if filter_type is None and axis == 0:\n                    try:\n\n                        # this can end up with a non-reduction\n                        # but not always. if the types are mixed\n                        # with datelike then need to make sure a series\n\n                        # we only end up here if we have not specified\n                        # numeric_only and yet we have tried a\n                        # column-by-column reduction, where we have mixed type.\n                        # So let's just do what we can\n                        result = self.apply(f, reduce=False,\n                                            ignore_failures=True)\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except:\n                        pass\n\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:  # pragma: no cover\n                    e = NotImplementedError(\"Handling exception with filter_\"\n                                            \"type %s not implemented.\" %\n                                            filter_type)\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:  # pragma: no cover\n                    msg = (\"Generating numeric_only data with filter_type %s\"\n                           \"not supported.\" % filter_type)\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        return Series(result, index=labels)\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode()\n\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True,\n                 interpolation='linear'):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                           columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n        \"\"\"\n        self._check_percentile(q)\n\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n\n        if is_transposed:\n            data = data.T\n\n        result = data._data.quantile(qs=q,\n                                     axis=1,\n                                     interpolation=interpolation,\n                                     transposed=is_transposed)\n\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n\n        if is_transposed:\n            result = result.T\n\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:  # pragma: no cover\n            raise AssertionError('Axis must be 0 or 1. Got %s' % str(axis))\n\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:  # pragma: no cover\n            raise AssertionError('Axis must be 0 or 1. Got %s' % str(axis))\n\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> other = DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(other)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `other` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col])\n                           for i, col in enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError(\"cannot compute isin with \"\n                                 \"a duplicate axis.\")\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError(\"cannot compute isin with \"\n                                 \"a duplicate axis.\")\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\"only list-like or dict-like objects are \"\n                                \"allowed to be passed to DataFrame.isin(), \"\n                                \"you passed a \"\n                                \"{0!r}\".format(type(values).__name__))\n            return DataFrame(\n                algorithms.isin(self.values.ravel(),\n                                values).reshape(self.shape), self.index,\n                self.columns)\n\n    # ----------------------------------------------------------------------\n    # Add plotting methods to DataFrame\n    plot = CachedAccessor(\"plot\", gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n\n\nDataFrame._setup_axes(['index', 'columns'], info_axis=1, stat_axis=0,\n                      axes_are_reversed=True, aliases={'rows': 0})\nDataFrame._add_numeric_operations()\nDataFrame._add_series_or_dataframe_operations()\n\nops.add_flex_arithmetic_methods(DataFrame, **ops.frame_flex_funcs)\nops.add_special_arithmetic_methods(DataFrame, **ops.frame_special_funcs)\n\n\ndef _arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = _ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [_ensure_index(columns), _ensure_index(index)]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)\n\n\ndef extract_index(data):\n    from pandas.core.index import _union_indexes\n\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for v in data:\n            if isinstance(v, Series):\n                have_series = True\n                indexes.append(v.index)\n            elif isinstance(v, dict):\n                have_dicts = True\n                indexes.append(list(v.keys()))\n            elif is_list_like(v) and getattr(v, 'ndim', 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(v))\n\n        if not indexes and not raw_lengths:\n            raise ValueError('If using all scalar values, you must pass'\n                             ' an index')\n\n        if have_series or have_dicts:\n            index = _union_indexes(indexes)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError('arrays must all be same length')\n\n            if have_dicts:\n                raise ValueError('Mixing dicts with non-Series may lead to '\n                                 'ambiguous ordering.')\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = ('array length %d does not match index length %d' %\n                           (lengths[0], len(index)))\n                    raise ValueError(msg)\n            else:\n                index = com._default_index(lengths[0])\n\n    return _ensure_index(index)\n\n\ndef _prep_ndarray(values, copy=True):\n    if not isinstance(values, (np.ndarray, Series, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], 'len'):\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except:\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError('Must pass 2-d input')\n\n    return values\n\n\ndef _to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"\n    Return list of arrays, columns\n    \"\"\"\n    if isinstance(data, DataFrame):\n        if columns is not None:\n            arrays = [data._ixs(i, axis=1).values\n                      for i, col in enumerate(data.columns) if col in columns]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float,\n                               dtype=dtype)\n    elif isinstance(data[0], collections.Mapping):\n        return _list_of_dict_to_arrays(data, columns,\n                                       coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], Series):\n        return _list_of_series_to_arrays(data, columns,\n                                         coerce_float=coerce_float,\n                                         dtype=dtype)\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = com._default_index(len(data))\n        return data, columns\n    elif (isinstance(data, (np.ndarray, Series, Index)) and\n          data.dtype.names is not None):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = lmap(tuple, data)\n        return _list_to_arrays(data, columns, coerce_float=coerce_float,\n                               dtype=dtype)\n\n\ndef _masked_rec_array_to_mgr(data, index, columns, dtype, copy):\n    \"\"\" extract from a masked rec array and create the manager \"\"\"\n\n    # essentially process a record array then fill it\n    fill_value = data.fill_value\n    fdata = ma.getdata(data)\n    if index is None:\n        index = _get_names_from_index(fdata)\n        if index is None:\n            index = com._default_index(len(data))\n    index = _ensure_index(index)\n\n    if columns is not None:\n        columns = _ensure_index(columns)\n    arrays, arr_columns = _to_arrays(fdata, columns)\n\n    # fill if needed\n    new_arrays = []\n    for fv, arr, col in zip(fill_value, arrays, arr_columns):\n        mask = ma.getmaskarray(data[col])\n        if mask.any():\n            arr, fv = maybe_upcast(arr, fill_value=fv, copy=True)\n            arr[mask] = fv\n        new_arrays.append(arr)\n\n    # create the manager\n    arrays, arr_columns = _reorder_arrays(new_arrays, arr_columns, columns)\n    if columns is None:\n        columns = arr_columns\n\n    mgr = _arrays_to_mgr(arrays, arr_columns, index, columns)\n\n    if copy:\n        mgr = mgr.copy()\n    return mgr\n\n\ndef _reorder_arrays(arrays, arr_columns, columns):\n    # reorder according to the columns\n    if (columns is not None and len(columns) and arr_columns is not None and\n            len(arr_columns)):\n        indexer = _ensure_index(arr_columns).get_indexer(columns)\n        arr_columns = _ensure_index([arr_columns[i] for i in indexer])\n        arrays = [arrays[i] for i in indexer]\n    return arrays, arr_columns\n\n\ndef _list_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    return _convert_object_array(content, columns, dtype=dtype,\n                                 coerce_float=coerce_float)\n\n\ndef _list_of_series_to_arrays(data, columns, coerce_float=False, dtype=None):\n    from pandas.core.index import _get_objs_combined_axis\n\n    if columns is None:\n        columns = _get_objs_combined_axis(data)\n\n    indexer_cache = {}\n\n    aligned_values = []\n    for s in data:\n        index = getattr(s, 'index', None)\n        if index is None:\n            index = com._default_index(len(s))\n\n        if id(index) in indexer_cache:\n            indexer = indexer_cache[id(index)]\n        else:\n            indexer = indexer_cache[id(index)] = index.get_indexer(columns)\n\n        values = com._values_from_object(s)\n        aligned_values.append(algorithms.take_1d(values, indexer))\n\n    values = np.vstack(aligned_values)\n\n    if values.dtype == np.object_:\n        content = list(values.T)\n        return _convert_object_array(content, columns, dtype=dtype,\n                                     coerce_float=coerce_float)\n    else:\n        return values.T, columns\n\n\ndef _list_of_dict_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        gen = (list(x.keys()) for x in data)\n        sort = not any(isinstance(d, OrderedDict) for d in data)\n        columns = lib.fast_unique_multiple_list_gen(gen, sort=sort)\n\n    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)\n    return _convert_object_array(content, columns, dtype=dtype,\n                                 coerce_float=coerce_float)\n\n\ndef _convert_object_array(content, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        columns = com._default_index(len(content))\n    else:\n        if len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError('%d columns passed, passed data had %s '\n                                 'columns' % (len(columns), len(content)))\n\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays, columns\n\n\ndef _get_names_from_index(data):\n    has_some_name = any(getattr(s, 'name', None) is not None for s in data)\n    if not has_some_name:\n        return com._default_index(len(data))\n\n    index = lrange(len(data))\n    count = 0\n    for i, s in enumerate(data):\n        n = getattr(s, 'name', None)\n        if n is not None:\n            index[i] = n\n        else:\n            index[i] = 'Unnamed %d' % count\n            count += 1\n\n    return index\n\n\ndef _homogenize(data, index, dtype=None):\n    from pandas.core.series import _sanitize_array\n\n    oindex = None\n    homogenized = []\n\n    for v in data:\n        if isinstance(v, Series):\n            if dtype is not None:\n                v = v.astype(dtype)\n            if v.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                v = v.reindex(index, copy=False)\n        else:\n            if isinstance(v, dict):\n                if oindex is None:\n                    oindex = index.astype('O')\n\n                if isinstance(index, (DatetimeIndex, TimedeltaIndex)):\n                    v = com._dict_compat(v)\n                else:\n                    v = dict(v)\n                v = lib.fast_multiget(v, oindex.values, default=np.nan)\n            v = _sanitize_array(v, index, dtype=dtype, copy=False,\n                                raise_cast_failure=False)\n\n        homogenized.append(v)\n\n    return homogenized\n\n\ndef _from_nested_dict(data):\n    # TODO: this should be seriously cythonized\n    new_data = OrderedDict()\n    for index, s in compat.iteritems(data):\n        for col, v in compat.iteritems(s):\n            new_data[col] = new_data.get(col, OrderedDict())\n            new_data[col][index] = v\n    return new_data\n\n\ndef _put_str(s, space):\n    return ('%s' % s)[:space].ljust(space)\n"
    },
    {
      "filename": "pandas/core/generic.py",
      "content": "# pylint: disable=W0231,E1101\nimport collections\nimport functools\nimport warnings\nimport operator\nimport weakref\nimport gc\nimport json\n\nimport numpy as np\nimport pandas as pd\n\nfrom pandas._libs import tslib, properties\nfrom pandas.core.dtypes.common import (\n    _ensure_int64,\n    _ensure_object,\n    is_scalar,\n    is_number,\n    is_integer, is_bool,\n    is_bool_dtype,\n    is_numeric_dtype,\n    is_datetime64_dtype,\n    is_timedelta64_dtype,\n    is_datetime64tz_dtype,\n    is_list_like,\n    is_dict_like,\n    is_re_compilable,\n    pandas_dtype)\nfrom pandas.core.dtypes.cast import maybe_promote, maybe_upcast_putmask\nfrom pandas.core.dtypes.inference import is_hashable\nfrom pandas.core.dtypes.missing import isna, notna\nfrom pandas.core.dtypes.generic import ABCSeries, ABCPanel, ABCDataFrame\n\nfrom pandas.core.base import PandasObject, SelectionMixin\nfrom pandas.core.index import (Index, MultiIndex, _ensure_index,\n                               InvalidIndexError, RangeIndex)\nimport pandas.core.indexing as indexing\nfrom pandas.core.indexing import maybe_convert_indices\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.period import PeriodIndex, Period\nfrom pandas.core.internals import BlockManager\nimport pandas.core.algorithms as algos\nimport pandas.core.common as com\nimport pandas.core.missing as missing\nfrom pandas.io.formats.printing import pprint_thing\nfrom pandas.io.formats.format import format_percentiles, DataFrameFormatter\nfrom pandas.tseries.frequencies import to_offset\nfrom pandas import compat\nfrom pandas.compat.numpy import function as nv\nfrom pandas.compat import (map, zip, lzip, lrange, string_types, to_str,\n                           isidentifier, set_function_name, cPickle as pkl)\nfrom pandas.core.ops import _align_method_FRAME\nimport pandas.core.nanops as nanops\nfrom pandas.util._decorators import (Appender, Substitution,\n                                     deprecate_kwarg)\nfrom pandas.util._validators import validate_bool_kwarg\nfrom pandas.core import config\n\n# goal is to be able to define the docs close to function, while still being\n# able to share\n_shared_docs = dict()\n_shared_doc_kwargs = dict(\n    axes='keywords for axes', klass='NDFrame',\n    axes_single_arg='int or labels for object',\n    args_transpose='axes to permute (int or label for object)',\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names to sort by\"\"\")\n\n\ndef _single_replace(self, to_replace, method, inplace, limit):\n    \"\"\"\n    Replaces values in a Series using the fill method specified when no\n    replacement value is given in the replace method\n    \"\"\"\n    if self.ndim != 1:\n        raise TypeError('cannot replace {0} with method {1} on a {2}'\n                        .format(to_replace, method, type(self).__name__))\n\n    orig_dtype = self.dtype\n    result = self if inplace else self.copy()\n    fill_f = missing.get_fill_func(method)\n\n    mask = missing.mask_missing(result.values, to_replace)\n    values = fill_f(result.values, limit=limit, mask=mask)\n\n    if values.dtype == orig_dtype and inplace:\n        return\n\n    result = pd.Series(values, index=self.index,\n                       dtype=self.dtype).__finalize__(self)\n\n    if inplace:\n        self._update_inplace(result._data)\n        return\n\n    return result\n\n\nclass NDFrame(PandasObject, SelectionMixin):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : boolean, default False\n    \"\"\"\n    _internal_names = ['_data', '_cacher', '_item_cache', '_cache', '_is_copy',\n                       '_subtyp', '_name', '_index', '_default_kind',\n                       '_default_fill_value', '_metadata', '__array_struct__',\n                       '__array_interface__']\n    _internal_names_set = set(_internal_names)\n    _accessors = frozenset([])\n    _deprecations = frozenset(['as_blocks', 'blocks',\n                               'consolidate', 'convert_objects', 'is_copy'])\n    _metadata = []\n    _is_copy = None\n\n    def __init__(self, data, axes=None, copy=False, dtype=None,\n                 fastpath=False):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, '_is_copy', None)\n        object.__setattr__(self, '_data', data)\n        object.__setattr__(self, '_item_cache', {})\n\n    @property\n    def is_copy(self):\n        warnings.warn(\"Attribute 'is_copy' is deprecated and will be removed \"\n                      \"in a future version.\", FutureWarning, stacklevel=2)\n        return self._is_copy\n\n    @is_copy.setter\n    def is_copy(self, msg):\n        warnings.warn(\"Attribute 'is_copy' is deprecated and will be removed \"\n                      \"in a future version.\", FutureWarning, stacklevel=2)\n        self._is_copy = msg\n\n    def _repr_data_resource_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):\n            data = self.head(config.get_option('display.max_rows'))\n            payload = json.loads(data.to_json(orient='table'),\n                                 object_pairs_hook=collections.OrderedDict)\n            return payload\n\n    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == 'V':\n                raise NotImplementedError(\"compound dtypes are not implemented\"\n                                          \" in the {0} constructor\"\n                                          .format(self.__class__.__name__))\n\n        return dtype\n\n    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(axe,\n                                       axis=self._get_block_manager_axis(a),\n                                       copy=False)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    # ----------------------------------------------------------------------\n    # Construction\n\n    @property\n    def _constructor(self):\n        \"\"\"Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    def __unicode__(self):\n        # unicode representation based upon iterating over self\n        # (since, by definition, `PandasContainers` are iterable)\n        prepr = '[%s]' % ','.join(map(pprint_thing, self))\n        return '%s(%s)' % (self.__class__.__name__, prepr)\n\n    def _dir_additions(self):\n        \"\"\" add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = set(\n            [c for c in self._info_axis.unique(level=0)[:100]\n             if isinstance(c, string_types) and isidentifier(c)])\n        return super(NDFrame, self)._dir_additions().union(additions)\n\n    @property\n    def _constructor_sliced(self):\n        \"\"\"Used when a manipulation result has one lower dimension(s) as the\n        original, such as DataFrame single columns slicing.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    @property\n    def _constructor_expanddim(self):\n        \"\"\"Used when a manipulation result has one higher dimension as the\n        original, such as Series.to_frame() and DataFrame.to_panel()\n        \"\"\"\n        raise NotImplementedError\n\n    # ----------------------------------------------------------------------\n    # Axis\n\n    @classmethod\n    def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,\n                    slicers=None, axes_are_reversed=False, build_axes=True,\n                    ns=None):\n        \"\"\"Provide axes setup for the major PandasObjects.\n\n        Parameters\n        ----------\n        axes : the names of the axes in order (lowest to highest)\n        info_axis_num : the axis of the selector dimension (int)\n        stat_axis_num : the number of axis for the default stats (int)\n        aliases : other names for a single axis (dict)\n        slicers : how axes slice to others (dict)\n        axes_are_reversed : boolean whether to treat passed axes as\n            reversed (DataFrame)\n        build_axes : setup the axis properties (default True)\n        \"\"\"\n\n        cls._AXIS_ORDERS = axes\n        cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n        cls._AXIS_LEN = len(axes)\n        cls._AXIS_ALIASES = aliases or dict()\n        cls._AXIS_IALIASES = {v: k for k, v in cls._AXIS_ALIASES.items()}\n        cls._AXIS_NAMES = dict(enumerate(axes))\n        cls._AXIS_SLICEMAP = slicers or None\n        cls._AXIS_REVERSED = axes_are_reversed\n\n        # typ\n        setattr(cls, '_typ', cls.__name__.lower())\n\n        # indexing support\n        cls._ix = None\n\n        if info_axis is not None:\n            cls._info_axis_number = info_axis\n            cls._info_axis_name = axes[info_axis]\n\n        if stat_axis is not None:\n            cls._stat_axis_number = stat_axis\n            cls._stat_axis_name = axes[stat_axis]\n\n        # setup the actual axis\n        if build_axes:\n\n            def set_axis(a, i):\n                setattr(cls, a, properties.AxisProperty(i))\n                cls._internal_names_set.add(a)\n\n            if axes_are_reversed:\n                m = cls._AXIS_LEN - 1\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, m - i)\n            else:\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, i)\n\n        # addtl parms\n        if isinstance(ns, dict):\n            for k, v in ns.items():\n                setattr(cls, k, v)\n\n    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d\n\n    @staticmethod\n    def _construct_axes_dict_from(self, axes, **kwargs):\n        \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n        d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_dict_for_slice(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {self._AXIS_SLICEMAP[a]: self._get_axis(a)\n             for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_from_arguments(self, args, kwargs, require_all=False):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # if we have an alias for this axis\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\"arguments are mutually exclusive \"\n                                        \"for [%s,%s]\" % (a, alias))\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments \"\n                                        \"specified!\")\n\n        axes = {a: kwargs.pop(a, None) for a in self._AXIS_ORDERS}\n        return axes, kwargs\n\n    @classmethod\n    def _from_axes(cls, data, axes, **kwargs):\n        # for construction from BlockManager\n        if isinstance(data, BlockManager):\n            return cls(data, **kwargs)\n        else:\n            if cls._AXIS_REVERSED:\n                axes = axes[::-1]\n            d = cls._construct_axes_dict_from(cls, axes, copy=False)\n            d.update(kwargs)\n            return cls(data, **d)\n\n    def _get_axis_number(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in self._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return self._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis_name(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, string_types):\n            if axis in self._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return self._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'\n                         .format(axis, type(self)))\n\n    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)\n\n    def _get_block_manager_axis(self, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = self._get_axis_number(axis)\n        if self._AXIS_REVERSED:\n            m = self._AXIS_LEN - 1\n            return m - axis\n        return axis\n\n    def _get_axis_resolvers(self, axis):\n        # index or columns\n        axis_index = getattr(self, axis)\n        d = dict()\n        prefix = axis[0]\n\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                # prefix with 'i' or 'c' depending on the input axis\n                # e.g., you must do ilevel_0 for the 0th level of an unnamed\n                # multiiindex\n                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)\n                level = i\n\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n\n        # put the index/columns itself in the dict\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n\n        d[axis] = dindex\n        return d\n\n    def _get_index_resolvers(self):\n        d = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n        return d\n\n    @property\n    def _info_axis(self):\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def _stat_axis(self):\n        return getattr(self, self._stat_axis_name)\n\n    @property\n    def shape(self):\n        \"\"\"Return a tuple of axis dimensions\"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self):\n        \"\"\"Return index label(s) of the internal NDFrame\"\"\"\n        # we do it this way because if we have reversed axes, then\n        # the block manager shows then reversed\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @property\n    def ndim(self):\n        \"\"\"Number of axes / array dimensions\"\"\"\n        return self._data.ndim\n\n    @property\n    def size(self):\n        \"\"\"number of elements in the NDFrame\"\"\"\n        return np.prod(self.shape)\n\n    @property\n    def _selected_obj(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    @property\n    def _obj_with_exclusions(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    def _expand_axes(self, key):\n        new_axes = []\n        for k, ax in zip(key, self.axes):\n            if k not in ax:\n                if type(k) != ax.dtype.type:\n                    ax = ax.astype('O')\n                new_axes.append(ax.insert(len(ax), k))\n            else:\n                new_axes.append(ax)\n\n        return new_axes\n\n    _shared_docs['set_axis'] = \"\"\"Assign desired index to given axis\n\n        Parameters\n        ----------\n        labels: list-like or Index\n            The values for the new index\n        axis : int or string, default 0\n        inplace : boolean, default None\n            Whether to return a new %(klass)s instance.\n\n            WARNING: inplace=None currently falls back to to True, but\n            in a future version, will default to False.  Use inplace=True\n            explicitly rather than relying on the default.\n\n        .. versionadded:: 0.21.0\n            The signature is make consistent to the rest of the API.\n            Previously, the \"axis\" and \"labels\" arguments were respectively\n            the first and second positional arguments.\n\n        Returns\n        -------\n        renamed : %(klass)s or None\n            An object of same type as caller if inplace=False, None otherwise.\n\n        See Also\n        --------\n        pandas.NDFrame.rename\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.set_axis(['a', 'b', 'c'], axis=0, inplace=False)\n        a    1\n        b    2\n        c    3\n        dtype: int64\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.set_axis(['a', 'b', 'c'], axis=0, inplace=False)\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n        >>> df.set_axis(['I', 'II'], axis=1, inplace=False)\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6\n        >>> df.set_axis(['i', 'ii'], axis=1, inplace=True)\n        >>> df\n           i  ii\n        0  1   4\n        1  2   5\n        2  3   6\n\n        \"\"\"\n\n    @Appender(_shared_docs['set_axis'] % dict(klass='NDFrame'))\n    def set_axis(self, labels, axis=0, inplace=None):\n        if is_scalar(labels):\n            warnings.warn(\n                'set_axis now takes \"labels\" as first argument, and '\n                '\"axis\" as named parameter. The old form, with \"axis\" as '\n                'first parameter and \\\"labels\\\" as second, is still supported '\n                'but will be deprecated in a future version of pandas.',\n                FutureWarning, stacklevel=2)\n            labels, axis = axis, labels\n\n        if inplace is None:\n            warnings.warn(\n                'set_axis currently defaults to operating inplace.\\nThis '\n                'will change in a future version of pandas, use '\n                'inplace=True to avoid this warning.',\n                FutureWarning, stacklevel=2)\n            inplace = True\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            obj = self.copy()\n            obj.set_axis(labels, axis=axis, inplace=True)\n            return obj\n\n    def _set_axis(self, axis, labels):\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()\n\n    _shared_docs['transpose'] = \"\"\"\n        Permute the dimensions of the %(klass)s\n\n        Parameters\n        ----------\n        args : %(args_transpose)s\n        copy : boolean, default False\n            Make a copy of the underlying data. Mixed-dtype data will\n            always result in a copy\n\n        Examples\n        --------\n        >>> p.transpose(2, 0, 1)\n        >>> p.transpose(2, 0, 1, copy=True)\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n\n    @Appender(_shared_docs['transpose'] % _shared_doc_kwargs)\n    def transpose(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs,\n                                                           require_all=True)\n        axes_names = tuple(self._get_axis_name(axes[a])\n                           for a in self._AXIS_ORDERS)\n        axes_numbers = tuple(self._get_axis_number(axes[a])\n                             for a in self._AXIS_ORDERS)\n\n        # we must have unique axes\n        if len(axes) != len(set(axes)):\n            raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)\n\n        new_axes = self._construct_axes_dict_from(self, [self._get_axis(x)\n                                                         for x in axes_names])\n        new_values = self.values.transpose(axes_numbers)\n        if kwargs.pop('copy', None) or (len(args) and args[-1]):\n            new_values = new_values.copy()\n\n        nv.validate_transpose_for_generic(self, kwargs)\n        return self._constructor(new_values, **new_axes).__finalize__(self)\n\n    def swapaxes(self, axis1, axis2, copy=True):\n        \"\"\"\n        Interchange axes and swap values axes appropriately\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n        i = self._get_axis_number(axis1)\n        j = self._get_axis_number(axis2)\n\n        if i == j:\n            if copy:\n                return self.copy()\n            return self\n\n        mapping = {i: j, j: i}\n\n        new_axes = (self._get_axis(mapping.get(k, k))\n                    for k in range(self._AXIS_LEN))\n        new_values = self.values.swapaxes(i, j)\n        if copy:\n            new_values = new_values.copy()\n\n        return self._constructor(new_values, *new_axes).__finalize__(self)\n\n    def pop(self, item):\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n\n        Parameters\n        ----------\n        item : str\n            Column label to be popped\n\n        Returns\n        -------\n        popped : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n        ...                    ('parrot', 'bird',     24.0),\n        ...                    ('lion',   'mammal',   80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=('name', 'class', 'max_speed'))\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        >>> df.pop('class')\n        0      bird\n        1      bird\n        2    mammal\n        3    mammal\n        Name: class, dtype: object\n\n        >>> df\n             name  max_speed\n        0  falcon      389.0\n        1  parrot       24.0\n        2    lion       80.5\n        3  monkey        NaN\n        \"\"\"\n        result = self[item]\n        del self[item]\n        try:\n            result._reset_cacher()\n        except AttributeError:\n            pass\n\n        return result\n\n    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze length 1 dimensions.\n\n        Parameters\n        ----------\n        axis : None, integer or string axis name, optional\n            The axis to squeeze if 1-sized.\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        scalar if 1-sized, else original object\n        \"\"\"\n        axis = (self._AXIS_NAMES if axis is None else\n                (self._get_axis_number(axis),))\n        try:\n            return self.iloc[\n                tuple(0 if i in axis and len(a) == 1 else slice(None)\n                      for i, a in enumerate(self.axes))]\n        except Exception:\n            return self\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        result = self.copy()\n        labels = result._data.axes[axis]\n        result._data.set_axis(axis, labels.swaplevel(i, j))\n        return result\n\n    # ----------------------------------------------------------------------\n    # Rename\n\n    # TODO: define separate funcs for DataFrame, Series and Panel so you can\n    # get completion on keyword arguments.\n    _shared_docs['rename'] = \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(optional_mapper)s\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        %(optional_axis)s\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        See Also\n        --------\n        pandas.NDFrame.rename_axis\n\n        Examples\n        --------\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        Since ``DataFrame`` doesn't have a ``.name`` attribute,\n        only mapping-type arguments are allowed.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n\n        See the :ref:`user guide <basics.rename>` for more.\n        \"\"\"\n\n    @Appender(_shared_docs['rename'] % dict(axes='axes keywords for this'\n                                            ' object', klass='NDFrame',\n                                            optional_mapper='',\n                                            optional_axis=''))\n    def rename(self, *args, **kwargs):\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        copy = kwargs.pop('copy', True)\n        inplace = kwargs.pop('inplace', False)\n        level = kwargs.pop('level', None)\n\n        if kwargs:\n            raise TypeError('rename() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        if com._count_not_none(*axes.values()) == 0:\n            raise TypeError('must pass an index to rename')\n\n        # renamer function if passed a dict\n        def _get_rename_function(mapper):\n            if isinstance(mapper, (dict, ABCSeries)):\n\n                def f(x):\n                    if x in mapper:\n                        return mapper[x]\n                    else:\n                        return x\n            else:\n                f = mapper\n\n            return f\n\n        self._consolidate_inplace()\n        result = self if inplace else self.copy(deep=copy)\n\n        # start in the axis order to eliminate too many copies\n        for axis in lrange(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is None:\n                continue\n            f = _get_rename_function(v)\n\n            baxis = self._get_block_manager_axis(axis)\n            if level is not None:\n                level = self.axes[axis]._get_level_number(level)\n            result._data = result._data.rename_axis(f, axis=baxis, copy=copy,\n                                                    level=level)\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result._data)\n        else:\n            return result.__finalize__(self)\n\n    rename.__doc__ = _shared_docs['rename']\n\n    def rename_axis(self, mapper, axis=0, copy=True, inplace=False):\n        \"\"\"Alter the name of the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n        axis : int or string, default 0\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n\n        Returns\n        -------\n        renamed : type of caller or None if inplace=True\n\n        Notes\n        -----\n        Prior to version 0.21.0, ``rename_axis`` could also be used to change\n        the axis *labels* by passing a mapping or scalar. This behavior is\n        deprecated and will be removed in a future version. Use ``rename``\n        instead.\n\n        See Also\n        --------\n        pandas.Series.rename, pandas.DataFrame.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename_axis(\"foo\")\n             A  B\n        foo\n        0    1  4\n        1    2  5\n        2    3  6\n\n        >>> df.rename_axis(\"bar\", axis=\"columns\")\n        bar  A  B\n        0    1  4\n        1    2  5\n        2    3  6\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        non_mapper = is_scalar(mapper) or (is_list_like(mapper) and not\n                                           is_dict_like(mapper))\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            msg = (\"Using 'rename_axis' to alter labels is deprecated. \"\n                   \"Use '.rename' instead\")\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            axis = self._get_axis_name(axis)\n            d = {'copy': copy, 'inplace': inplace}\n            d[axis] = mapper\n            return self.rename(**d)\n\n    def _set_axis_name(self, name, axis=0, inplace=False):\n        \"\"\"\n        Alter the name or names of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name for the Index, or list of names for the MultiIndex\n        axis : int or str\n           0 or 'index' for the index; 1 or 'columns' for the columns\n        inplace : bool\n            whether to modify `self` directly or return a copy\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        renamed : type of caller or None if inplace=True\n\n        See Also\n        --------\n        pandas.DataFrame.rename\n        pandas.Series.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n        >>> df._set_axis_name(\"foo\")\n             A\n        foo\n        0    1\n        1    2\n        2    3\n        >>> df.index = pd.MultiIndex.from_product([['A'], ['a', 'b', 'c']])\n        >>> df._set_axis_name([\"bar\", \"baz\"])\n                 A\n        bar baz\n        A   a    1\n            b    2\n            c    3\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(idx, axis=axis, inplace=True)\n        if not inplace:\n            return renamed\n\n    # ----------------------------------------------------------------------\n    # Comparisons\n\n    def _indexed_same(self, other):\n        return all(self._get_axis(a).equals(other._get_axis(a))\n                   for a in self._AXIS_ORDERS)\n\n    def __neg__(self):\n        values = com._values_from_object(self)\n        if values.dtype == np.bool_:\n            arr = operator.inv(values)\n        else:\n            arr = operator.neg(values)\n        return self.__array_wrap__(arr)\n\n    def __invert__(self):\n        try:\n            arr = operator.inv(com._values_from_object(self))\n            return self.__array_wrap__(arr)\n        except Exception:\n\n            # inv fails with 0 len\n            if not np.prod(self.shape):\n                return self\n\n            raise\n\n    def equals(self, other):\n        \"\"\"\n        Determines if two NDFrame objects contain the same elements. NaNs in\n        the same location are considered equal.\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)\n\n    # -------------------------------------------------------------------------\n    # Label or Level Combination Helpers\n    #\n    # A collection of helper methods for DataFrame/Series operations that\n    # accept a combination of column/index labels and levels.  All such\n    # operations should utilize/extend these methods when possible so that we\n    # have consistent precedence and validation logic throughout the library.\n\n    def _is_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key: str\n            Potential level name for the given axis\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_level_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (key is not None and\n                is_hashable(key) and\n                key in self.axes[axis].names and\n                not self._is_label_reference(key, axis=axis))\n\n    def _is_label_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key: str\n            Potential label name\n        axis: int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (key is not None and\n                is_hashable(key) and\n                any(key in self.axes[ax] for ax in other_axes))\n\n    def _is_label_or_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key: str\n            Potential label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_label_or_level: bool\n        \"\"\"\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_is_label_or_level_reference is not implemented for {type}\"\n                .format(type=type(self)))\n\n        return (self._is_level_reference(key, axis=axis) or\n                self._is_label_reference(key, axis=axis))\n\n    def _check_label_or_level_ambiguity(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Check whether `key` matches both a level of the input `axis` and a\n        label of the other axis and raise a ``FutureWarning`` if this is the\n        case.\n\n        Note: This method will be altered to raise an ambiguity exception in\n        a future version.\n\n        Parameters\n        ----------\n        key: str or object\n            label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        ambiguous: bool\n\n        Raises\n        ------\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_check_label_or_level_ambiguity is not implemented for {type}\"\n                .format(type=type(self)))\n\n        if (key is not None and\n                is_hashable(key) and\n                key in self.axes[axis].names and\n                any(key in self.axes[ax] for ax in other_axes)):\n\n            # Build an informative and grammatical warning\n            level_article, level_type = (('an', 'index')\n                                         if axis == 0 else\n                                         ('a', 'column'))\n\n            label_article, label_type = (('a', 'column')\n                                         if axis == 0 else\n                                         ('an', 'index'))\n\n            msg = (\"'{key}' is both {level_article} {level_type} level and \"\n                   \"{label_article} {label_type} label.\\n\"\n                   \"Defaulting to {label_type}, but this will raise an \"\n                   \"ambiguity error in a future version\"\n                   ).format(key=key,\n                            level_article=level_article,\n                            level_type=level_type,\n                            label_article=label_article,\n                            label_type=label_type)\n\n            warnings.warn(msg, FutureWarning, stacklevel=stacklevel + 1)\n            return True\n        else:\n            return False\n\n    def _get_label_or_level_values(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key: str\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        values: np.ndarray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_get_label_or_level_values is not implemented for {type}\"\n                .format(type=type(self)))\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis,\n                                                 stacklevel=stacklevel + 1)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n\n            if other_axes and isinstance(\n                    self._get_axis(other_axes[0]), MultiIndex):\n                multi_message = ('\\n'\n                                 'For a multi-index, the label must be a '\n                                 'tuple with elements corresponding to '\n                                 'each level.')\n            else:\n                multi_message = ''\n\n            label_axis_name = 'column' if axis == 0 else 'index'\n            raise ValueError((\"The {label_axis_name} label '{key}' \"\n                              \"is not unique.{multi_message}\")\n                             .format(key=key,\n                                     label_axis_name=label_axis_name,\n                                     multi_message=multi_message))\n\n        return values\n\n    def _drop_labels_or_levels(self, keys, axis=0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys: str or list of str\n            labels or levels to drop\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            raise NotImplementedError(\n                \"_drop_labels_or_levels is not implemented for {type}\"\n                .format(type=type(self)))\n\n        # Validate keys\n        keys = com._maybe_make_list(keys)\n        invalid_keys = [k for k in keys if not\n                        self._is_label_or_level_reference(k, axis=axis)]\n\n        if invalid_keys:\n            raise ValueError((\"The following keys are not valid labels or \"\n                              \"levels for axis {axis}: {invalid_keys}\")\n                             .format(axis=axis,\n                                     invalid_keys=invalid_keys))\n\n        # Compute levels and labels to drop\n        levels_to_drop = [k for k in keys\n                          if self._is_level_reference(k, axis=axis)]\n\n        labels_to_drop = [k for k in keys\n                          if not self._is_level_reference(k, axis=axis)]\n\n        # Perform copy upfront and then use inplace operations below.\n        # This ensures that we always perform exactly one copy.\n        # ``copy`` and/or ``inplace`` options could be added in the future.\n        dropped = self.copy()\n\n        if axis == 0:\n            # Handle dropping index levels\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n            # Handle dropping columns labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            # Handle dropping column levels\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    # Drop the specified levels from the MultiIndex\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    # Drop the last level of Index by replacing with\n                    # a RangeIndex\n                    dropped.columns = RangeIndex(dropped.columns.size)\n\n            # Handle dropping index labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n        return dropped\n\n    # ----------------------------------------------------------------------\n    # Iteration\n\n    def __hash__(self):\n        raise TypeError('{0!r} objects are mutable, thus they cannot be'\n                        ' hashed'.format(self.__class__.__name__))\n\n    def __iter__(self):\n        \"\"\"Iterate over infor axis\"\"\"\n        return iter(self._info_axis)\n\n    # can we get a better explanation of this?\n    def keys(self):\n        \"\"\"Get the 'info axis' (see Indexing for more)\n\n        This is index for Series, columns for DataFrame and major_axis for\n        Panel.\n        \"\"\"\n        return self._info_axis\n\n    def iteritems(self):\n        \"\"\"Iterate over (label, values) on info axis\n\n        This is index for Series, columns for DataFrame, major_axis for Panel,\n        and so on.\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    def __len__(self):\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self):\n        \"\"\"True if NDFrame is entirely empty [no items], meaning any of the\n        axes are of length 0.\n\n        Notes\n        -----\n        If NDFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        See also\n        --------\n        pandas.Series.dropna\n        pandas.DataFrame.dropna\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    def __nonzero__(self):\n        raise ValueError(\"The truth value of a {0} is ambiguous. \"\n                         \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n                         .format(self.__class__.__name__))\n\n    __bool__ = __nonzero__\n\n    def bool(self):\n        \"\"\"Return the bool of a single element PandasObject.\n\n        This must be a boolean scalar value, either True or False.  Raise a\n        ValueError if the PandasObject does not have exactly 1 element, or that\n        element is not boolean\n        \"\"\"\n        v = self.squeeze()\n        if isinstance(v, (bool, np.bool_)):\n            return bool(v)\n        elif is_scalar(v):\n            raise ValueError(\"bool cannot act on a non-boolean single element \"\n                             \"{0}\".format(self.__class__.__name__))\n\n        self.__nonzero__()\n\n    def __abs__(self):\n        return self.abs()\n\n    def __round__(self, decimals=0):\n        return self.round(decimals)\n\n    # ----------------------------------------------------------------------\n    # Array Interface\n\n    def __array__(self, dtype=None):\n        return com._values_from_object(self)\n\n    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)\n\n    # ideally we would define this to avoid the getattr checks, but\n    # is slower\n    # @property\n    # def __array_interface__(self):\n    #    \"\"\" provide numpy array interface method \"\"\"\n    #    values = self.values\n    #    return dict(typestr=values.dtype.str,shape=values.shape,data=values)\n\n    def to_dense(self):\n        \"\"\"Return dense representation of NDFrame (as opposed to sparse)\"\"\"\n        # compat\n        return self\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    def __getstate__(self):\n        meta = {k: getattr(self, k, None) for k in self._metadata}\n        return dict(_data=self._data, _typ=self._typ, _metadata=self._metadata,\n                    **meta)\n\n    def __setstate__(self, state):\n\n        if isinstance(state, BlockManager):\n            self._data = state\n        elif isinstance(state, dict):\n            typ = state.get('_typ')\n            if typ is not None:\n\n                # set in the order of internal names\n                # to avoid definitional recursion\n                # e.g. say fill_value needing _data to be\n                # defined\n                meta = set(self._internal_names + self._metadata)\n                for k in list(meta):\n                    if k in state:\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n\n            else:\n                self._unpickle_series_compat(state)\n        elif isinstance(state[0], dict):\n            if len(state) == 5:\n                self._unpickle_sparse_frame_compat(state)\n            else:\n                self._unpickle_frame_compat(state)\n        elif len(state) == 4:\n            self._unpickle_panel_compat(state)\n        elif len(state) == 2:\n            self._unpickle_series_compat(state)\n        else:  # pragma: no cover\n            # old pickling format, for compatibility\n            self._unpickle_matrix_compat(state)\n\n        self._item_cache = {}\n\n    # ----------------------------------------------------------------------\n    # IO\n\n    def _repr_latex_(self):\n        \"\"\"\n        Returns a LaTeX representation for a particular object.\n        Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n        \"\"\"\n        if config.get_option('display.latex.repr'):\n            return self.to_latex()\n        else:\n            return None\n\n    # ----------------------------------------------------------------------\n    # I/O Methods\n\n    _shared_docs['to_excel'] = \"\"\"\n    Write %(klass)s to an excel sheet\n    %(versionadded_to_excel)s\n\n    Parameters\n    ----------\n    excel_writer : string or ExcelWriter object\n        File path or existing ExcelWriter\n    sheet_name : string, default 'Sheet1'\n        Name of sheet which will contain DataFrame\n    na_rep : string, default ''\n        Missing data representation\n    float_format : string, default None\n        Format string for floating point numbers\n    columns : sequence, optional\n        Columns to write\n    header : boolean or list of string, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names\n    index : boolean, default True\n        Write row names (index)\n    index_label : string or sequence, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the DataFrame uses MultiIndex.\n    startrow :\n        upper left cell row to dump data frame\n    startcol :\n        upper left cell column to dump data frame\n    engine : string, default None\n        write engine to use - you can also set this via the options\n        ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n        ``io.excel.xlsm.writer``.\n    merge_cells : boolean, default True\n        Write MultiIndex and Hierarchical Rows as merged cells.\n    encoding: string, default None\n        encoding of the resulting excel file. Only necessary for xlwt,\n        other writers support unicode natively.\n    inf_rep : string, default 'inf'\n        Representation for infinity (there is no native representation for\n        infinity in Excel)\n    freeze_panes : tuple of integer (length 2), default None\n        Specifies the one-based bottommost row and rightmost column that\n        is to be frozen\n\n        .. versionadded:: 0.20.0\n\n    Notes\n    -----\n    If passing an existing ExcelWriter object, then the sheet will be added\n    to the existing workbook.  This can be used to save different\n    DataFrames to one workbook:\n\n    >>> writer = pd.ExcelWriter('output.xlsx')\n    >>> df1.to_excel(writer,'Sheet1')\n    >>> df2.to_excel(writer,'Sheet2')\n    >>> writer.save()\n\n    For compatibility with to_csv, to_excel serializes lists and dicts to\n    strings before writing.\n    \"\"\"\n\n    def to_json(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False, compression=None,\n                index=True):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : the path or buffer to write the result string\n            if this is None, return the converted string\n        orient : string\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values'}\n\n            * The format of the JSON string\n\n              - split : dict like\n                {index -> [index], columns -> [columns], data -> [values]}\n              - records : list like\n                [{column -> value}, ... , {column -> value}]\n              - index : dict like {index -> {column -> value}}\n              - columns : dict like {column -> {index -> value}}\n              - values : just the values array\n              - table : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. `epoch` = epoch milliseconds,\n            `iso` = ISO8601. The default depends on the `orient`. For\n            `orient='table'`, the default is `'iso'`. For all other orients,\n            the default is `'epoch'`.\n        double_precision : The number of decimal places to use when encoding\n            floating point values, default 10.\n        force_ascii : force encoded string to be ASCII, default True.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : boolean, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {None, 'gzip', 'bz2', 'xz'}\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename\n\n            .. versionadded:: 0.21.0\n\n        index : boolean, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        same type as input object with filtered info axis\n\n        See Also\n        --------\n        pd.read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)\n\n    def to_hdf(self, path_or_buf, key, **kwargs):\n        \"\"\"Write the contained data to an HDF5 file using HDFStore.\n\n        Parameters\n        ----------\n        path_or_buf : the path (string) or HDFStore object\n        key : string\n            identifier for the group in the store\n        mode : optional, {'a', 'w', 'r+'}, default 'a'\n\n          ``'w'``\n              Write; a new file is created (an existing file with the same\n              name would be deleted).\n          ``'a'``\n              Append; an existing file is opened for reading and writing,\n              and if the file does not exist it is created.\n          ``'r+'``\n              It is similar to ``'a'``, but the file must already exist.\n        format : 'fixed(f)|table(t)', default is 'fixed'\n            fixed(f) : Fixed format\n                       Fast writing/reading. Not-appendable, nor searchable\n            table(t) : Table format\n                       Write as a PyTables Table structure which may perform\n                       worse but allow more flexible operations like searching\n                       / selecting subsets of the data\n        append : boolean, default False\n            For Table formats, append the input data to the existing\n        data_columns :  list of columns, or True, default None\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See `here\n            <http://pandas.pydata.org/pandas-docs/stable/io.html#query-via-data-columns>`__.\n\n            Applicable only to format='table'.\n        complevel : int, 0-9, default None\n            Specifies a compression level for data.\n            A value of 0 disables compression.\n        complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n            Specifies the compression library to be used.\n            As of v0.20.2 these additional compressors for Blosc are supported\n            (default if no compressor specified: 'blosc:blosclz'):\n            {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n            'blosc:zlib', 'blosc:zstd'}.\n            Specifying a compression library which is not available issues\n            a ValueError.\n        fletcher32 : bool, default False\n            If applying compression use the fletcher32 checksum\n        dropna : boolean, default False.\n            If true, ALL nan rows will not be written to store.\n        \"\"\"\n\n        from pandas.io import pytables\n        return pytables.to_hdf(path_or_buf, key, self, **kwargs)\n\n    def to_msgpack(self, path_or_buf=None, encoding='utf-8', **kwargs):\n        \"\"\"\n        msgpack (serialize) object to input file path\n\n        THIS IS AN EXPERIMENTAL LIBRARY and the storage format\n        may not be stable until a future release.\n\n        Parameters\n        ----------\n        path : string File path, buffer-like, or None\n            if None, return generated string\n        append : boolean whether to append to an existing msgpack\n            (default is False)\n        compress : type of compressor (zlib or blosc), default to None (no\n            compression)\n        \"\"\"\n\n        from pandas.io import packers\n        return packers.to_msgpack(path_or_buf, self, encoding=encoding,\n                                  **kwargs)\n\n    def to_sql(self, name, con, schema=None, if_exists='fail', index=True,\n               index_label=None, chunksize=None, dtype=None):\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Parameters\n        ----------\n        name : string\n            Name of SQL table\n        con : SQLAlchemy engine or DBAPI2 connection (legacy mode)\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. If a DBAPI2 object, only sqlite3 is supported.\n        schema : string, default None\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            - fail: If table exists, do nothing.\n            - replace: If table exists, drop it, recreate it, and insert data.\n            - append: If table exists, insert data. Create if does not exist.\n        index : boolean, default True\n            Write DataFrame index as a column.\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, default None\n            If not None, then rows will be written in batches of this size at a\n            time.  If None, all rows will be written at once.\n        dtype : dict of column name to SQL type, default None\n            Optional specifying the datatype for columns. The SQL type should\n            be a SQLAlchemy type, or a string for sqlite3 fallback connection.\n\n        \"\"\"\n        from pandas.io import sql\n        sql.to_sql(self, name, con, schema=schema, if_exists=if_exists,\n                   index=index, index_label=index_label, chunksize=chunksize,\n                   dtype=dtype)\n\n    def to_pickle(self, path, compression='infer',\n                  protocol=pkl.HIGHEST_PROTOCOL):\n        \"\"\"\n        Pickle (serialize) object to input file path.\n\n        Parameters\n        ----------\n        path : string\n            File path\n        compression : {'infer', 'gzip', 'bz2', 'xz', None}, default 'infer'\n            a string representing the compression to use in the output file\n\n            .. versionadded:: 0.20.0\n        protocol : int\n            Int which indicates which protocol should be used by the pickler,\n            default HIGHEST_PROTOCOL (see [1], paragraph 12.1.2). The possible\n            values for this parameter depend on the version of Python. For\n            Python 2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a\n            valid value. For Python >= 3.4, 4 is a valid value.A negative value\n            for the protocol parameter is equivalent to setting its value to\n            HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html\n            .. versionadded:: 0.21.0\n\n        \"\"\"\n        from pandas.io.pickle import to_pickle\n        return to_pickle(self, path, compression=compression,\n                         protocol=protocol)\n\n    def to_clipboard(self, excel=True, sep=None, **kwargs):\n        \"\"\"\n        Attempt to write text representation of object to the system clipboard\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : boolean, defaults to True\n                if True, use the provided separator, writing in a csv\n                format for allowing easy pasting into excel.\n                if False, write a string representation of the object\n                to the clipboard\n        sep : optional, defaults to tab\n        other keywords are passed to to_csv\n\n        Notes\n        -----\n        Requirements for your platform\n          - Linux: xclip, or xsel (with gtk or PyQt4 modules)\n          - Windows: none\n          - OS X: none\n        \"\"\"\n        from pandas.io import clipboards\n        clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        a DataArray for a Series\n        a Dataset for a DataFrame\n        a DataArray for higher dims\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)})\n        >>> df\n           A    B    C\n        0  1  foo  4.0\n        1  1  bar  5.0\n        2  2  foo  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (index: 3)\n        Coordinates:\n          * index    (index) int64 0 1 2\n        Data variables:\n            A        (index) int64 1 1 2\n            B        (index) object 'foo' 'bar' 'foo'\n            C        (index) float64 4.0 5.0 6.0\n\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)}\n                             ).set_index(['B','A'])\n        >>> df\n                 C\n        B   A\n        foo 1  4.0\n        bar 1  5.0\n        foo 2  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (A: 2, B: 2)\n        Coordinates:\n          * B        (B) object 'bar' 'foo'\n          * A        (A) int64 1 2\n        Data variables:\n            C        (B, A) float64 5.0 nan 4.0 6.0\n\n        >>> p = pd.Panel(np.arange(24).reshape(4,3,2),\n                         items=list('ABCD'),\n                         major_axis=pd.date_range('20130101', periods=3),\n                         minor_axis=['first', 'second'])\n        >>> p\n        <class 'pandas.core.panel.Panel'>\n        Dimensions: 4 (items) x 3 (major_axis) x 2 (minor_axis)\n        Items axis: A to D\n        Major_axis axis: 2013-01-01 00:00:00 to 2013-01-03 00:00:00\n        Minor_axis axis: first to second\n\n        >>> p.to_xarray()\n        <xarray.DataArray (items: 4, major_axis: 3, minor_axis: 2)>\n        array([[[ 0,  1],\n                [ 2,  3],\n                [ 4,  5]],\n               [[ 6,  7],\n                [ 8,  9],\n                [10, 11]],\n               [[12, 13],\n                [14, 15],\n                [16, 17]],\n               [[18, 19],\n                [20, 21],\n                [22, 23]]])\n        Coordinates:\n          * items       (items) object 'A' 'B' 'C' 'D'\n          * major_axis  (major_axis) datetime64[ns] 2013-01-01 2013-01-02 2013-01-03  # noqa\n          * minor_axis  (minor_axis) object 'first' 'second'\n\n        Notes\n        -----\n        See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n        \"\"\"\n\n        try:\n            import xarray\n        except ImportError:\n            # Give a nice error message\n            raise ImportError(\"the xarray library is not installed\\n\"\n                              \"you can install via conda\\n\"\n                              \"conda install xarray\\n\"\n                              \"or via pip\\n\"\n                              \"pip install xarray\\n\")\n\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        elif self.ndim == 2:\n            return xarray.Dataset.from_dataframe(self)\n\n        # > 2 dims\n        coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS]\n        return xarray.DataArray(self,\n                                coords=coords,\n                                )\n\n    _shared_docs['to_latex'] = r\"\"\"\n        Render an object to a tabular environment table. You can splice\n        this into a LaTeX document. Requires \\\\usepackage{booktabs}.\n\n        .. versionchanged:: 0.20.2\n           Added to Series\n\n        `to_latex`-specific options:\n\n        bold_rows : boolean, default False\n            Make the row labels bold in the output\n        column_format : str, default None\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3\n            columns\n        longtable : boolean, default will be read from the pandas config module\n            Default: False.\n            Use a longtable environment instead of tabular. Requires adding\n            a \\\\usepackage{longtable} to your LaTeX preamble.\n        escape : boolean, default will be read from the pandas config module\n            Default: True.\n            When set to False prevents from escaping latex special\n            characters in column names.\n        encoding : str, default None\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n\n            .. versionadded:: 0.18.0\n\n        multicolumn : boolean, default True\n            Use \\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multicolumn_format : str, default 'l'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multirow : boolean, default False\n            Use \\multirow to enhance MultiIndex rows.\n            Requires adding a \\\\usepackage{multirow} to your LaTeX preamble.\n            Will print centered labels (instead of top-aligned)\n            across the contained rows, separating groups via clines.\n            The default will be read from the pandas config module.\n\n            .. versionadded:: 0.20.0\n            \"\"\"\n\n    @Substitution(header='Write out the column names. If a list of strings '\n                         'is given, it is assumed to be aliases for the '\n                         'column names.')\n    @Appender(_shared_docs['to_latex'] % _shared_doc_kwargs)\n    def to_latex(self, buf=None, columns=None, col_space=None, header=True,\n                 index=True, na_rep='NaN', formatters=None, float_format=None,\n                 sparsify=None, index_names=True, bold_rows=False,\n                 column_format=None, longtable=None, escape=None,\n                 encoding=None, decimal='.', multicolumn=None,\n                 multicolumn_format=None, multirow=None):\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()\n        if longtable is None:\n            longtable = config.get_option(\"display.latex.longtable\")\n        if escape is None:\n            escape = config.get_option(\"display.latex.escape\")\n        if multicolumn is None:\n            multicolumn = config.get_option(\"display.latex.multicolumn\")\n        if multicolumn_format is None:\n            multicolumn_format = config.get_option(\n                \"display.latex.multicolumn_format\")\n        if multirow is None:\n            multirow = config.get_option(\"display.latex.multirow\")\n\n        formatter = DataFrameFormatter(self, buf=buf, columns=columns,\n                                       col_space=col_space, na_rep=na_rep,\n                                       header=header, index=index,\n                                       formatters=formatters,\n                                       float_format=float_format,\n                                       bold_rows=bold_rows,\n                                       sparsify=sparsify,\n                                       index_names=index_names,\n                                       escape=escape, decimal=decimal)\n        formatter.to_latex(column_format=column_format, longtable=longtable,\n                           encoding=encoding, multicolumn=multicolumn,\n                           multicolumn_format=multicolumn_format,\n                           multirow=multirow)\n\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    # ----------------------------------------------------------------------\n    # Fancy Indexing\n\n    @classmethod\n    def _create_indexer(cls, name, indexer):\n        \"\"\"Create an indexer like _name in the class.\"\"\"\n        if getattr(cls, name, None) is None:\n            _indexer = functools.partial(indexer, name)\n            setattr(cls, name, property(_indexer, doc=indexer.__doc__))\n\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (DataFrame column, Panel slice,\n        etc.). Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : type of items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    def __getitem__(self, item):\n        return self._get_item_cache(item)\n\n    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res\n\n    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))\n\n    def _reset_cacher(self):\n        \"\"\"Reset the cacher.\"\"\"\n        if hasattr(self, '_cacher'):\n            del self._cacher\n\n    def _iget_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n        ax = self._info_axis\n        if ax.is_unique:\n            lower = self._get_item_cache(ax[item])\n        else:\n            lower = self._take(item, axis=self._info_axis_number,\n                               convert=True)\n        return lower\n\n    def _box_item_values(self, key, values):\n        raise com.AbstractMethodError(self)\n\n    def _maybe_cache_changed(self, item, value):\n        \"\"\"The object has called back to us saying maybe it has changed.\n        \"\"\"\n        self._data.set(item, value, check=False)\n\n    @property\n    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, '_cacher', None) is not None\n\n    def _get_cacher(self):\n        \"\"\"return my cacher or None\"\"\"\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            cacher = cacher[1]()\n        return cacher\n\n    @property\n    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view\n\n    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : boolean, default False\n            clear the item cache\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except Exception:\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t='referant')\n\n        if clear:\n            self._clear_item_cache()\n\n    def _clear_item_cache(self, i=None):\n        if i is not None:\n            self._item_cache.pop(i, None)\n        else:\n            self._item_cache.clear()\n\n    def _slice(self, slobj, axis=0, kind=None):\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result\n\n    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()\n\n    def _set_is_copy(self, ref=None, copy=True):\n        if not copy:\n            self._is_copy = None\n        else:\n            if ref is not None:\n                self._is_copy = weakref.ref(ref)\n            else:\n                self._is_copy = None\n\n    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False\n\n    def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : integer, default 4\n           the level to show of the stack when the error is output\n        t : string, the type of setting error\n        force : boolean, default False\n           if True, then force showing an error\n\n        validate if we are doing a settitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        if force or self._is_copy:\n\n            value = config.get_option('mode.chained_assignment')\n            if value is None:\n                return\n\n            # see if the copy is not actually referred; if so, then dissolve\n            # the copy weakref\n            try:\n                gc.collect(2)\n                if not gc.get_referents(self._is_copy()):\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n\n            # we might be a false positive\n            try:\n                if self._is_copy().shape == self.shape:\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n\n            # a custom message\n            if isinstance(self._is_copy, string_types):\n                t = self._is_copy\n\n            elif t == 'referant':\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame\\n\\n\"\n                     \"See the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            else:\n                t = (\"\\n\"\n                     \"A value is trying to be set on a copy of a slice from a \"\n                     \"DataFrame.\\n\"\n                     \"Try using .loc[row_indexer,col_indexer] = value \"\n                     \"instead\\n\\nSee the caveats in the documentation: \"\n                     \"http://pandas.pydata.org/pandas-docs/stable/\"\n                     \"indexing.html#indexing-view-versus-copy\"\n                     )\n\n            if value == 'raise':\n                raise com.SettingWithCopyError(t)\n            elif value == 'warn':\n                warnings.warn(t, com.SettingWithCopyWarning,\n                              stacklevel=stacklevel)\n\n    def __delitem__(self, key):\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if hasattr(self, 'columns') and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key, )\n            for col in self.columns:\n                if isinstance(col, tuple) and col[:len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            self._data.delete(key)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass\n\n    _shared_docs['_take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        This is the internal version of ``.take()`` and will contain a wider\n        selection of parameters useful for internal use but not as suitable\n        for public usage.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : int, default 0\n            The axis on which to select elements. \"0\" means that we are\n            selecting rows, \"1\" means that we are selecting columns, etc.\n        convert : bool, default True\n            Whether to convert negative indices into positive ones.\n            For example, ``-1`` would map to the ``len(axis) - 1``.\n            The conversions are similar to the behavior of indexing a\n            regular Python list.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        numpy.ndarray.take\n        numpy.take\n        \"\"\"\n\n    @Appender(_shared_docs['_take'])\n    def _take(self, indices, axis=0, convert=True, is_copy=True):\n        self._consolidate_inplace()\n\n        if convert:\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n\n        new_data = self._data.take(indices,\n                                   axis=self._get_block_manager_axis(axis),\n                                   verify=True)\n        result = self._constructor(new_data).__finalize__(self)\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result\n\n    _shared_docs['take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : int, default 0\n            The axis on which to select elements. \"0\" means that we are\n            selecting rows, \"1\" means that we are selecting columns, etc.\n        convert : bool, default True\n            .. deprecated:: 0.21.0\n               In the future, negative indices will always be converted.\n\n            Whether to convert negative indices into positive ones.\n            For example, ``-1`` would map to the ``len(axis) - 1``.\n            The conversions are similar to the behavior of indexing a\n            regular Python list.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n                               ('parrot', 'bird',     24.0),\n                               ('lion',   'mammal',   80.5),\n                               ('monkey', 'mammal', np.nan)],\n                              columns=('name', 'class', 'max_speed'),\n                              index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        numpy.ndarray.take\n        numpy.take\n        \"\"\"\n\n    @Appender(_shared_docs['take'])\n    def take(self, indices, axis=0, convert=None, is_copy=True, **kwargs):\n        if convert is not None:\n            msg = (\"The 'convert' parameter is deprecated \"\n                   \"and will be removed in a future version.\")\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n        else:\n            convert = True\n\n        convert = nv.validate_take(tuple(), kwargs)\n        return self._take(indices, axis=axis, convert=convert, is_copy=is_copy)\n\n    def xs(self, key, axis=0, level=None, drop_level=True):\n        \"\"\"\n        Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame. Defaults to cross-section on the rows (axis=0).\n\n        Parameters\n        ----------\n        key : object\n            Some label contained in the index, or partially in a MultiIndex\n        axis : int, default 0\n            Axis to retrieve cross-section on\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n\n        Examples\n        --------\n        >>> df\n           A  B  C\n        a  4  5  2\n        b  4  0  9\n        c  9  7  3\n        >>> df.xs('a')\n        A    4\n        B    5\n        C    2\n        Name: a\n        >>> df.xs('C', axis=1)\n        a    2\n        b    9\n        c    3\n        Name: C\n\n        >>> df\n                            A  B  C  D\n        first second third\n        bar   one    1      4  1  8  9\n              two    1      7  5  5  0\n        baz   one    1      6  6  8  0\n              three  2      5  3  5  3\n        >>> df.xs(('baz', 'three'))\n               A  B  C  D\n        third\n        2      5  3  5  3\n        >>> df.xs('one', level=1)\n                     A  B  C  D\n        first third\n        bar   1      4  1  8  9\n        baz   1      6  6  8  0\n        >>> df.xs(('baz', 2), level=[0, 'third'])\n                A  B  C  D\n        second\n        three   5  3  5  3\n\n        Returns\n        -------\n        xs : Series or DataFrame\n\n        Notes\n        -----\n        xs is only for getting, not setting values.\n\n        MultiIndex Slicers is a generic way to get/set values on any level or\n        levels.  It is a superset of xs functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level,\n                                               drop_level=drop_level)\n\n            # create the tuple of the indexer\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = loc\n            indexer = tuple(indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key,\n                                                      drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    inds, = loc.nonzero()\n                    return self._take(inds, axis=axis, convert=False)\n                else:\n                    return self._take(loc, axis=axis, convert=True)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            new_values = self._data.fast_xs(loc)\n\n            # may need to box a datelike-scalar\n            #\n            # if we encounter an array-like and we only have 1 dim\n            # that means that their are list/ndarrays inside the Series!\n            # so just return them (GH 6394)\n            if not is_list_like(new_values) or self.ndim == 1:\n                return com._maybe_box_datetimelike(new_values)\n\n            result = self._constructor_sliced(\n                new_values, index=self.columns,\n                name=self.index[loc], dtype=new_values.dtype)\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view slicable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result\n\n    _xs = xs\n\n    def select(self, crit, axis=0):\n        \"\"\"Return data corresponding to axis labels matching criteria\n\n        .. deprecated:: 0.21.0\n            Use df.loc[df.index.map(crit)] to select via labels\n\n        Parameters\n        ----------\n        crit : function\n            To be called on each index (label). Should return True or False\n        axis : int\n\n        Returns\n        -------\n        selection : type of caller\n        \"\"\"\n        warnings.warn(\"'select' is deprecated and will be removed in a \"\n                      \"future release. You can use \"\n                      \".loc[labels.map(crit)] as a replacement\",\n                      FutureWarning, stacklevel=2)\n\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis)\n\n        if len(axis_values) > 0:\n            new_axis = axis_values[\n                np.asarray([bool(crit(label)) for label in axis_values])]\n        else:\n            new_axis = axis_values\n\n        return self.reindex(**{axis_name: new_axis})\n\n    def reindex_like(self, other, method=None, copy=True, limit=None,\n                     tolerance=None):\n        \"\"\"Return an object with matching indices to myself.\n\n        Parameters\n        ----------\n        other : Object\n        method : string or None\n        copy : boolean, default True\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches. Can be list-like.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Notes\n        -----\n        Like calling s.reindex(index=other.index, columns=other.columns,\n                               method=...)\n\n        Returns\n        -------\n        reindexed : same as input\n        \"\"\"\n        d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=method,\n                                       copy=copy, limit=limit,\n                                       tolerance=tolerance)\n\n        return self.reindex(**d)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=None,\n             inplace=False, errors='raise'):\n        \"\"\"\n        Return new object with labels in requested axis removed.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : int or axis name\n            Whether to drop labels from the index (0 / 'index') or\n            columns (1 / 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying `axis` (``labels, axis=1`` is\n            equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, default None\n            For MultiIndex\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        Returns\n        -------\n        dropped : type of caller\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n                              columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Notes\n        -----\n        Specifying both `labels` and `index` or `columns` will raise a\n        ValueError.\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and \"\n                                 \"'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\"Need to specify at least one of 'labels', \"\n                             \"'index' or 'columns'\")\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n        else:\n            return obj\n\n    def _drop_axis(self, labels, axis, level=None, errors='raise'):\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis, axis_ = self._get_axis(axis), axis\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            dropped = self.reindex(**{axis_name: new_axis})\n            try:\n                dropped.axes[axis_].set_names(axis.names, inplace=True)\n            except AttributeError:\n                pass\n            result = dropped\n\n        else:\n            labels = _ensure_object(com._index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                indexer = ~axis.get_level_values(level).isin(labels)\n            else:\n                indexer = ~axis.isin(labels)\n\n            if errors == 'raise' and indexer.all():\n                raise KeyError('{} not found in axis'.format(labels))\n\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n\n            result = self.loc[tuple(slicer)]\n\n        return result\n\n    def _update_inplace(self, result, verify_is_copy=True):\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, '_data', result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)\n\n    def add_prefix(self, prefix):\n        \"\"\"\n        Concatenate prefix string with panel items names.\n\n        Parameters\n        ----------\n        prefix : string\n\n        Returns\n        -------\n        with_prefix : type of caller\n        \"\"\"\n        new_data = self._data.add_prefix(prefix)\n        return self._constructor(new_data).__finalize__(self)\n\n    def add_suffix(self, suffix):\n        \"\"\"\n        Concatenate suffix string with panel items names.\n\n        Parameters\n        ----------\n        suffix : string\n\n        Returns\n        -------\n        with_suffix : type of caller\n        \"\"\"\n        new_data = self._data.add_suffix(suffix)\n        return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n             Axis to be sorted\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\n        ...     'col1' : ['A', 'A', 'B', np.nan, 'D', 'C'],\n        ...     'col2' : [2, 1, 9, 8, 7, 4],\n        ...     'col3': [0, 1, 9, 4, 2, 3],\n        ... })\n        >>> df\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n\n        Sort by col1\n\n        >>> df.sort_values(by=['col1'])\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort by multiple columns\n\n        >>> df.sort_values(by=['col1', 'col2'])\n            col1 col2 col3\n        1   A    1    1\n        0   A    2    0\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort Descending\n\n        >>> df.sort_values(by='col1', ascending=False)\n            col1 col2 col3\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        3   NaN  8    4\n\n        Putting NAs first\n\n        >>> df.sort_values(by='col1', ascending=False, na_position='first')\n            col1 col2 col3\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        \"\"\"\n\n    def sort_values(self, by=None, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n        \"\"\"\n        NOT IMPLEMENTED: do not call this method, as sorting values is not\n        supported for Panel objects and will raise an error.\n        \"\"\"\n        raise NotImplementedError(\"sort_values has not been implemented \"\n                                  \"on Panel or Panel4D objects.\")\n\n    _shared_docs['sort_index'] = \"\"\"\n        Sort object by labels (along an axis)\n\n        Parameters\n        ----------\n        axis : %(axes)s to direct sorting\n        level : int or level name or list of ints or list of level names\n            if not None, sort on values in specified index level(s)\n        ascending : boolean, default True\n            Sort ascending vs. descending\n        inplace : bool, default False\n            if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end.\n             Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            if true and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['sort_index'] % dict(axes=\"axes\", klass=\"NDFrame\"))\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        labels = self._get_axis(axis)\n\n        if level is not None:\n            raise NotImplementedError(\"level is not implemented\")\n        if inplace:\n            raise NotImplementedError(\"inplace is not implemented\")\n\n        sort_index = labels.argsort()\n        if not ascending:\n            sort_index = sort_index[::-1]\n\n        new_axis = labels.take(sort_index)\n        return self.reindex(**{axis_name: new_axis})\n\n    _shared_docs['reindex'] = \"\"\"\n        Conform %(klass)s to new index with optional filling logic, placing\n        NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        copy=False\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional (should be specified using keywords)\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to backpropagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29     100\n        2009-12-30     100\n        2009-12-31     100\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\"\n\n    # TODO: Decide if we care about having different examples for different\n    #       kinds\n\n    @Appender(_shared_docs['reindex'] % dict(axes=\"axes\", klass=\"NDFrame\",\n                                             optional_labels=\"\",\n                                             optional_axis=\"\"))\n    def reindex(self, *args, **kwargs):\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n        level = kwargs.pop('level', None)\n        copy = kwargs.pop('copy', True)\n        limit = kwargs.pop('limit', None)\n        tolerance = kwargs.pop('tolerance', None)\n        fill_value = kwargs.pop('fill_value', np.nan)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError('reindex() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(self._get_axis(axis).identical(ax)\n               for axis, ax in axes.items() if ax is not None):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            try:\n                return self._reindex_multi(axes, copy, fill_value)\n            except Exception:\n                pass\n\n        # perform the reindex on the axes\n        return self._reindex_axes(axes, level, limit, tolerance, method,\n                                  fill_value, copy).__finalize__(self)\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n                      copy):\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(labels, level=level, limit=limit,\n                                            tolerance=tolerance, method=method)\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers({axis: [new_index, indexer]},\n                                             fill_value=fill_value,\n                                             copy=copy, allow_dups=False)\n\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return ((com._count_not_none(*axes.values()) == self._AXIS_LEN) and\n                method is None and level is None and not self._is_mixed_type)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        return NotImplemented\n\n    _shared_docs[\n        'reindex_axis'] = (\"\"\"Conform input object to new index with optional\n        filling logic, placing NA/NaN in locations having no value in the\n        previous index. A new object is produced unless the new index is\n        equivalent to the current one and copy=False\n\n        Parameters\n        ----------\n        labels : array-like\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        axis : %(axes_single_arg)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            Method to use for filling holes in reindexed DataFrame:\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)\n\n        See Also\n        --------\n        reindex, reindex_like\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\")\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=True,\n                     limit=None, fill_value=np.nan):\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        self._consolidate_inplace()\n\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis_name)\n        method = missing.clean_reindex_fill_method(method)\n        warnings.warn(msg, FutureWarning, stacklevel=3)\n        new_index, indexer = axis_values.reindex(labels, method, level,\n                                                 limit=limit)\n        return self._reindex_with_indexers({axis: [new_index, indexer]},\n                                           fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers, fill_value=np.nan, copy=False,\n                               allow_dups=False):\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = _ensure_index(index)\n            if indexer is not None:\n                indexer = _ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,\n                                                fill_value=fill_value,\n                                                allow_dups=allow_dups,\n                                                copy=copy)\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def _reindex_axis(self, new_index, fill_method, axis, copy):\n        new_data = self._data.reindex_axis(new_index, axis=axis,\n                                           method=fill_method, copy=copy)\n\n        if new_data is self._data and not copy:\n            return self\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def filter(self, items=None, like=None, regex=None, axis=None):\n        \"\"\"\n        Subset rows or columns of dataframe according to labels in\n        the specified index.\n\n        Note that this routine does not filter a dataframe on its\n        contents. The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            List of info axis to restrict to (must not all be present)\n        like : string\n            Keep info axis where \"arg in col == True\"\n        regex : string (regular expression)\n            Keep info axis with re.search(regex, col) == True\n        axis : int or string axis name\n            The axis to filter on.  By default this is the info axis,\n            'index' for Series, 'columns' for DataFrame\n\n        Returns\n        -------\n        same type as input object\n\n        Examples\n        --------\n        >>> df\n        one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=['one', 'three'])\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex='e$', axis=1)\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like='bbi', axis=0)\n        one  two  three\n        rabbit    4    5      6\n\n        See Also\n        --------\n        pandas.DataFrame.loc\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n        \"\"\"\n        import re\n\n        nkw = com._count_not_none(items, like, regex)\n        if nkw > 1:\n            raise TypeError('Keyword arguments `items`, `like`, or `regex` '\n                            'are mutually exclusive')\n\n        if axis is None:\n            axis = self._info_axis_name\n        labels = self._get_axis(axis)\n\n        if items is not None:\n            name = self._get_axis_name(axis)\n            return self.reindex(\n                **{name: [r for r in items if r in labels]})\n        elif like:\n            def f(x):\n                return like in to_str(x)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        elif regex:\n            def f(x):\n                return matcher.search(to_str(x)) is not None\n            matcher = re.compile(regex)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        else:\n            raise TypeError('Must pass either `items`, `like`, or `regex`')\n\n    def head(self, n=5):\n        \"\"\"\n        Return the first n rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        obj_head : type of caller\n            The first n rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.tail\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first n lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        \"\"\"\n\n        return self.iloc[:n]\n\n    def tail(self, n=5):\n        \"\"\"\n        Return the last n rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        obj_tail : type of caller\n            The last n rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.head\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the last 5 lines\n\n        >>> df.tail()\n           animal\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n\n        Viewing the last n lines (three in this case)\n\n        >>> df.tail(3)\n          animal\n        6  shark\n        7  whale\n        8  zebra\n        \"\"\"\n\n        if n == 0:\n            return self.iloc[0:0]\n        return self.iloc[-n:]\n\n    def sample(self, n=None, frac=None, replace=False, weights=None,\n               random_state=None, axis=None):\n        \"\"\"\n        Returns a random sample of items from an axis of object.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : boolean, optional\n            Sample with or without replacement. Default = False.\n        weights : str or ndarray-like, optional\n            Default 'None' results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            inf and -inf values not allowed.\n        random_state : int or numpy.random.RandomState, optional\n            Seed for the random number generator (if int), or numpy RandomState\n            object.\n        axis : int or string, optional\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type (0 for Series and DataFrames, 1 for Panels).\n\n        Returns\n        -------\n        A new object of same type as caller.\n\n        Examples\n        --------\n\n        Generate an example ``Series`` and ``DataFrame``:\n\n        >>> s = pd.Series(np.random.randn(50))\n        >>> s.head()\n        0   -0.038497\n        1    1.820773\n        2   -0.972766\n        3   -1.598270\n        4   -1.095526\n        dtype: float64\n        >>> df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n        >>> df.head()\n                  A         B         C         D\n        0  0.016443 -2.318952 -0.566372 -1.028078\n        1 -1.051921  0.438836  0.658280 -0.175797\n        2 -1.243569 -0.364626 -0.215065  0.057736\n        3  1.768216  0.404512 -0.385604 -1.457834\n        4  1.072446 -1.137172  0.314194 -0.046661\n\n        Next extract a random sample from both of these objects...\n\n        3 random elements from the ``Series``:\n\n        >>> s.sample(n=3)\n        27   -0.994689\n        55   -1.049016\n        67   -0.224565\n        dtype: float64\n\n        And a random 10% of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.1, replace=True)\n                   A         B         C         D\n        35  1.981780  0.142106  1.817165 -0.290805\n        49 -1.336199 -0.448634 -0.789640  0.217116\n        40  0.823173 -0.078816  1.009536  1.015108\n        15  1.421154 -0.055301 -1.922594 -0.019696\n        6  -0.148339  0.832938  1.787600 -1.383767\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n\n        axis = self._get_axis_number(axis)\n        axis_length = self.shape[axis]\n\n        # Process random_state argument\n        rs = com._random_state(random_state)\n\n        # Check weights for compliance\n        if weights is not None:\n\n            # If a series, align with frame\n            if isinstance(weights, pd.Series):\n                weights = weights.reindex(self.axes[axis])\n\n            # Strings acceptable if a dataframe and axis = 0\n            if isinstance(weights, string_types):\n                if isinstance(self, pd.DataFrame):\n                    if axis == 0:\n                        try:\n                            weights = self[weights]\n                        except KeyError:\n                            raise KeyError(\"String passed to weights not a \"\n                                           \"valid column\")\n                    else:\n                        raise ValueError(\"Strings can only be passed to \"\n                                         \"weights when sampling from rows on \"\n                                         \"a DataFrame\")\n                else:\n                    raise ValueError(\"Strings cannot be passed as weights \"\n                                     \"when sampling from a Series or Panel.\")\n\n            weights = pd.Series(weights, dtype='float64')\n\n            if len(weights) != axis_length:\n                raise ValueError(\"Weights and axis to be sampled must be of \"\n                                 \"same length\")\n\n            if (weights == np.inf).any() or (weights == -np.inf).any():\n                raise ValueError(\"weight vector may not include `inf` values\")\n\n            if (weights < 0).any():\n                raise ValueError(\"weight vector many not include negative \"\n                                 \"values\")\n\n            # If has nan, set to zero.\n            weights = weights.fillna(0)\n\n            # Renormalize if don't sum to 1\n            if weights.sum() != 1:\n                if weights.sum() != 0:\n                    weights = weights / weights.sum()\n                else:\n                    raise ValueError(\"Invalid weights: weights sum to zero\")\n\n            weights = weights.values\n\n        # If no frac or n, default to n=1.\n        if n is None and frac is None:\n            n = 1\n        elif n is not None and frac is None and n % 1 != 0:\n            raise ValueError(\"Only integers accepted as `n` values\")\n        elif n is None and frac is not None:\n            n = int(round(frac * axis_length))\n        elif n is not None and frac is not None:\n            raise ValueError('Please enter a value for `frac` OR `n`, not '\n                             'both')\n\n        # Check for negative sizes\n        if n < 0:\n            raise ValueError(\"A negative number of rows requested. Please \"\n                             \"provide positive value.\")\n\n        locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n        return self.take(locs, axis=axis, is_copy=False)\n\n    _shared_docs['pipe'] = (r\"\"\"\n        Apply func(self, \\*args, \\*\\*kwargs)\n\n        Parameters\n        ----------\n        func : function\n            function to apply to the %(klass)s.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the %(klass)s.\n        args : iterable, optional\n            positional arguments passed into ``func``.\n        kwargs : mapping, optional\n            a dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        object : the return type of ``func``.\n\n        Notes\n        -----\n\n        Use ``.pipe`` when chaining together functions that expect\n        Series, DataFrames or GroupBy objects. Instead of writing\n\n        >>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\n        You can write\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``f`` takes its data as ``arg2``:\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n        ...  )\n\n        See Also\n        --------\n        pandas.DataFrame.apply\n        pandas.DataFrame.applymap\n        pandas.Series.map\n    \"\"\")\n\n    @Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\n    def pipe(self, func, *args, **kwargs):\n        return com._pipe(self, func, *args, **kwargs)\n\n    _shared_docs['aggregate'] = (\"\"\"\n    Aggregate using callable, string, dict, or list of string/callables\n\n    %(versionadded)s\n\n    Parameters\n    ----------\n    func : callable, string, dictionary, or list of string/callables\n        Function to use for aggregating the data. If a function, must either\n        work when passed a %(klass)s or when passed to %(klass)s.apply. For\n        a DataFrame, can pass a dict, if the keys are DataFrame column names.\n\n        Accepted Combinations are:\n\n        - string function name\n        - function\n        - list of functions\n        - dict of column names -> functions (or list of functions)\n\n    Notes\n    -----\n    Numpy functions mean/median/prod/sum/std/var are special cased so the\n    default behavior is applying the function along axis=0\n    (e.g., np.mean(arr_2d, axis=0)) as opposed to\n    mimicking the default Numpy behavior (e.g., np.mean(arr_2d)).\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Returns\n    -------\n    aggregated : %(klass)s\n    \"\"\")\n\n    _shared_docs['transform'] = (\"\"\"\n    Call function producing a like-indexed %(klass)s\n    and return a %(klass)s with the transformed values\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    func : callable, string, dictionary, or list of string/callables\n        To apply to column\n\n        Accepted Combinations are:\n\n        - string function name\n        - function\n        - list of functions\n        - dict of column names -> functions (or list of functions)\n\n    Returns\n    -------\n    transformed : %(klass)s\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    df.iloc[3:7] = np.nan\n\n    >>> df.transform(lambda x: (x - x.mean()) / x.std())\n                       A         B         C\n    2000-01-01  0.579457  1.236184  0.123424\n    2000-01-02  0.370357 -0.605875 -1.231325\n    2000-01-03  1.455756 -0.277446  0.288967\n    2000-01-04       NaN       NaN       NaN\n    2000-01-05       NaN       NaN       NaN\n    2000-01-06       NaN       NaN       NaN\n    2000-01-07       NaN       NaN       NaN\n    2000-01-08 -0.498658  1.274522  1.642524\n    2000-01-09 -0.540524 -1.012676 -0.828968\n    2000-01-10 -1.366388 -0.614710  0.005378\n\n    See also\n    --------\n    pandas.%(klass)s.aggregate\n    pandas.%(klass)s.apply\n\n    \"\"\")\n\n    # ----------------------------------------------------------------------\n    # Attribute access\n\n    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self\n\n    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (name in self._internal_names_set or name in self._metadata or\n                name in self._accessors):\n            return object.__getattribute__(self, name)\n        else:\n            if name in self._info_axis:\n                return self[name]\n            return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\"Pandas doesn't allow columns to be \"\n                                  \"created via a new attribute name - see \"\n                                  \"https://pandas.pydata.org/pandas-docs/\"\n                                  \"stable/indexing.html#attribute-access\",\n                                  stacklevel=2)\n                object.__setattr__(self, name, value)\n\n    # ----------------------------------------------------------------------\n    # Getting and setting elements\n\n    # ----------------------------------------------------------------------\n    # Consolidation of internals\n\n    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result\n\n    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)\n\n    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : boolean, default False\n            If False return new object, otherwise modify existing object\n\n        Returns\n        -------\n        consolidated : type of caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)\n\n    def consolidate(self, inplace=False):\n        \"\"\"Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        .. deprecated:: 0.20.0\n            Consolidate will be an internal implementation only.\n        \"\"\"\n        # 15483\n        warnings.warn(\"consolidate is deprecated and will be removed in a \"\n                      \"future release.\", FutureWarning, stacklevel=2)\n        return self._consolidate(inplace)\n\n    @property\n    def _is_mixed_type(self):\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_numeric_mixed_type(self):\n        f = lambda: self._data.is_numeric_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_datelike_mixed_type(self):\n        f = lambda: self._data.is_datelike_mixed_type\n        return self._protect_consolidate(f)\n\n    def _check_inplace_setting(self, value):\n        \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n\n        if self._is_mixed_type:\n            if not self._is_numeric_mixed_type:\n\n                # allow an actual np.nan thru\n                try:\n                    if np.isnan(value):\n                        return True\n                except Exception:\n                    pass\n\n                raise TypeError('Cannot do inplace boolean setting on '\n                                'mixed-types with a non np.nan value')\n\n        return True\n\n    def _get_numeric_data(self):\n        return self._constructor(\n            self._data.get_numeric_data()).__finalize__(self)\n\n    def _get_bool_data(self):\n        return self._constructor(self._data.get_bool_data()).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    def as_matrix(self, columns=None):\n        \"\"\"Convert the frame to its Numpy-array representation.\n\n        .. deprecated:: 0.23.0\n            Use :meth:`DataFrame.values` instead.\n\n        Parameters\n        ----------\n        columns: list, optional, default:None\n            If None, return all columns, otherwise, returns specified columns.\n\n        Returns\n        -------\n        values : ndarray\n            If the caller is heterogeneous and contains booleans or objects,\n            the result will be of dtype=object. See Notes.\n\n\n        Notes\n        -----\n        Return is NOT a Numpy-matrix, rather, a Numpy-array.\n\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcase to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a flot64 dtype.\n\n        This method is provided for backwards compatibility. Generally,\n        it is recommended to use '.values'.\n\n        See Also\n        --------\n        pandas.DataFrame.values\n        \"\"\"\n        warnings.warn(\"Method .as_matrix will be removed in a future version. \"\n                      \"Use .values instead.\", FutureWarning, stacklevel=2)\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED,\n                                   items=columns)\n\n    @property\n    def values(self):\n        \"\"\"Numpy representation of NDFrame\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a flot64 dtype.\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)\n\n    @property\n    def _values(self):\n        \"\"\"internal implementation\"\"\"\n        return self.values\n\n    @property\n    def _get_values(self):\n        # compat\n        return self.values\n\n    def get_values(self):\n        \"\"\"same as values (but handles sparseness conversions)\"\"\"\n        return self.values\n\n    def get_dtype_counts(self):\n        \"\"\"Return the counts of dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtype_counts())\n\n    def get_ftype_counts(self):\n        \"\"\"Return the counts of ftypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftype_counts())\n\n    @property\n    def dtypes(self):\n        \"\"\"Return the dtypes in this object.\"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    @property\n    def ftypes(self):\n        \"\"\"\n        Return the ftypes (indication of sparse/dense and dtype)\n        in this object.\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftypes(), index=self._info_axis,\n                      dtype=np.object_)\n\n    def as_blocks(self, copy=True):\n        \"\"\"\n        Convert the frame to a dict of dtype -> Constructor Types that each has\n        a homogeneous dtype.\n\n        .. deprecated:: 0.21.0\n\n        NOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n              as_matrix)\n\n        Parameters\n        ----------\n        copy : boolean, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> Constructor Types\n        \"\"\"\n        warnings.warn(\"as_blocks is deprecated and will \"\n                      \"be removed in a future version\",\n                      FutureWarning, stacklevel=2)\n        return self._to_dict_of_blocks(copy=copy)\n\n    @property\n    def blocks(self):\n        \"\"\"\n        Internal property, property synonym for as_blocks()\n\n        .. deprecated:: 0.21.0\n        \"\"\"\n        return self.as_blocks()\n\n    def _to_dict_of_blocks(self, copy=True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {k: self._constructor(v).__finalize__(self)\n                for k, v, in self._data.to_dict(copy=copy).items()}\n\n    @deprecate_kwarg(old_arg_name='raise_on_error', new_arg_name='errors',\n                     mapping={True: 'raise', False: 'ignore'})\n    def astype(self, dtype, copy=True, errors='raise', **kwargs):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True.\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            .. versionadded:: 0.20.0\n\n        raise_on_error : raise on invalid input\n            .. deprecated:: 0.20.0\n               Use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns\n        -------\n        casted : type of caller\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> ser.astype('category', ordered=True, categories=[2, 1])\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1,2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n\n        See also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError('Only the Series name can be used for '\n                                   'the key in Series dtype mappings.')\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors, **kwargs)\n            elif self.ndim > 2:\n                raise NotImplementedError(\n                    'astype() only accepts a dtype arg of type dict when '\n                    'invoked on Series and DataFrames. A single dtype must be '\n                    'specified when invoked on a Panel.'\n                )\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError('Only a column name can be used for the '\n                                   'key in a dtype mappings argument.')\n            from pandas import concat\n            results = []\n            for col_name, col in self.iteritems():\n                if col_name in dtype:\n                    results.append(col.astype(dtype[col_name], copy=copy))\n                else:\n                    results.append(results.append(col.copy() if copy else col))\n            return concat(results, axis=1, copy=False)\n\n        # else, only a single dtype is given\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,\n                                     **kwargs)\n        return self._constructor(new_data).__finalize__(self)\n\n    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this objects data.\n\n        Parameters\n        ----------\n        deep : boolean or string, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices or the data are copied.\n\n            Note that when ``deep=True`` data is copied, actual python objects\n            will not be copied recursively, only the reference to the object.\n            This is in contrast to ``copy.deepcopy`` in the Standard Library,\n            which recursively copies object data.\n\n        Returns\n        -------\n        copy : type of caller\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)\n\n    def __copy__(self, deep=True):\n        return self.copy(deep=deep)\n\n    def __deepcopy__(self, memo=None):\n        if memo is None:\n            memo = {}\n        return self.copy(deep=True)\n\n    def _convert(self, datetime=False, numeric=False, timedelta=False,\n                 coerce=False, copy=True):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : boolean, default False\n            If True, convert to date where possible.\n        numeric : boolean, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : boolean, default False\n            If True, convert to timedelta where possible.\n        coerce : boolean, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT)\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        return self._constructor(\n            self._data.convert(datetime=datetime, numeric=numeric,\n                               timedelta=timedelta, coerce=coerce,\n                               copy=copy)).__finalize__(self)\n\n    def convert_objects(self, convert_dates=True, convert_numeric=False,\n                        convert_timedeltas=True, copy=True):\n        \"\"\"Attempt to infer better dtype for object columns.\n\n        .. deprecated:: 0.21.0\n\n        Parameters\n        ----------\n        convert_dates : boolean, default True\n            If True, convert to date where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        convert_numeric : boolean, default False\n            If True, attempt to coerce to numbers (including strings), with\n            unconvertible values becoming NaN.\n        convert_timedeltas : boolean, default True\n            If True, convert to timedelta where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Return a fixed frequency timedelta index,\n            with day as the default.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        msg = (\"convert_objects is deprecated.  To re-infer data dtypes for \"\n               \"object columns, use {klass}.infer_objects()\\nFor all \"\n               \"other conversions use the data-type specific converters \"\n               \"pd.to_datetime, pd.to_timedelta and pd.to_numeric.\"\n               ).format(klass=self.__class__.__name__)\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self._constructor(\n            self._data.convert(convert_dates=convert_dates,\n                               convert_numeric=convert_numeric,\n                               convert_timedeltas=convert_timedeltas,\n                               copy=copy)).__finalize__(self)\n\n    def infer_objects(self):\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to numeric typeR\n\n        Returns\n        -------\n        converted : same type as input object\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        # numeric=False necessary to only soft convert;\n        # python objects will still be converted to\n        # native numpy numeric types\n        return self._constructor(\n            self._data.convert(datetime=True, numeric=False,\n                               timedelta=True, coerce=False,\n                               copy=True)).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Filling NA's\n\n    _shared_docs['fillna'] = (\"\"\"\n        Fill NA/NaN values using the specified method\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame). (values not\n            in the dict/Series/DataFrame will not be filled). This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        axis : %(axes_single_arg)s\n        inplace : boolean, default False\n            If True, fill in place. Note: this will modify any\n            other views on this object, (e.g. a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            a dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible)\n\n        See Also\n        --------\n        reindex, asfreq\n\n        Returns\n        -------\n        filled : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                    columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\")\n\n    @Appender(_shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if isinstance(value, (list, tuple)):\n            raise TypeError('\"value\" parameter must be a scalar or dict, but '\n                            'you passed a \"{0}\"'.format(type(value).__name__))\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n        method = missing.clean_fill_method(method)\n        from pandas import DataFrame\n        if value is None:\n            if method is None:\n                raise ValueError('must specify a fill method or value')\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._data = result._data.downcast()\n\n                return result\n\n            # > 3d\n            if self.ndim > 3:\n                raise NotImplementedError('Cannot fillna with a method for > '\n                                          '3dims')\n\n            # 3d\n            elif self.ndim == 3:\n\n                # fill in 2d chunks\n                result = {col: s.fillna(method=method, value=value)\n                          for col, s in self.iteritems()}\n                new_obj = self._constructor.\\\n                    from_dict(result).__finalize__(self)\n                new_data = new_obj._data\n\n            else:\n                # 2d or less\n                method = missing.clean_fill_method(method)\n                new_data = self._data.interpolate(method=method, axis=axis,\n                                                  limit=limit, inplace=inplace,\n                                                  coerce=True,\n                                                  downcast=downcast)\n        else:\n            if method is not None:\n                raise ValueError('cannot specify both a fill method and value')\n\n            if len(self._get_axis(axis)) == 0:\n                return self\n\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    from pandas import Series\n                    value = Series(value)\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError('\"value\" parameter must be a scalar, dict '\n                                    'or Series, but you passed a '\n                                    '\"{0}\"'.format(type(value).__name__))\n\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError('Currently only can fill '\n                                              'with dict/Series column '\n                                              'by column')\n\n                result = self if inplace else self.copy()\n                for k, v in compat.iteritems(value):\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                new_data = self._data.fillna(value=value, limit=limit,\n                                             inplace=inplace,\n                                             downcast=downcast)\n            elif isinstance(value, DataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)\n            else:\n                raise ValueError(\"invalid fill value with a %s\" % type(value))\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def ffill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='ffill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='ffill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    def bfill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='bfill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='bfill', axis=axis, inplace=inplace,\n                           limit=limit, downcast=downcast)\n\n    _shared_docs['replace'] = (\"\"\"\n        Replace values given in 'to_replace' with 'value'.\n\n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, numeric, or None\n\n            * numeric, str or regex:\n\n                - numeric: numeric values equal to ``to_replace`` will be\n                  replaced with ``value``\n                - str: string exactly matching ``to_replace`` will be replaced\n                  with ``value``\n                - regex: regexs matching ``to_replace`` will be replaced with\n                  ``value``\n\n            * list of str, regex, or numeric:\n\n                - First, if ``to_replace`` and ``value`` are both lists, they\n                  **must** be the same length.\n                - Second, if ``regex=True`` then all of the strings in **both**\n                  lists will be interpreted as regexs otherwise they will match\n                  directly. This doesn't matter much for ``value`` since there\n                  are only a few possible substitution regexes you can use.\n                - str, regex and numeric rules apply as above.\n\n            * dict:\n\n                - Dicts can be used to specify different replacement values\n                  for different existing values. For example,\n                  {'a': 'b', 'y': 'z'} replaces the value 'a' with 'b' and\n                  'y' with 'z'. To use a dict in this way the ``value``\n                  parameter should be ``None``.\n                - For a DataFrame a dict can specify that different values\n                  should be replaced in different columns. For example,\n                  {'a': 1, 'b': 'z'} looks for the value 1 in column 'a' and\n                  the value 'z' in column 'b' and replaces these values with\n                  whatever is specified in ``value``. The ``value`` parameter\n                  should not be ``None`` in this case. You can treat this as a\n                  special case of passing two lists except that you are\n                  specifying the column to search in.\n                - For a DataFrame nested dictionaries, e.g.,\n                  {'a': {'b': np.nan}}, are read as follows: look in column 'a'\n                  for the value 'b' and replace it with NaN. The ``value``\n                  parameter should be ``None`` to use a nested dict in this\n                  way. You can nest regular expressions as well. Note that\n                  column names (the top-level dictionary keys in a nested\n                  dictionary) **cannot** be regular expressions.\n\n            * None:\n\n                - This means that the ``regex`` argument must be a string,\n                  compiled regular expression, or list, dict, ndarray or Series\n                  of such elements. If ``value`` is also ``None`` then this\n                  **must** be a nested dictionary or ``Series``.\n\n            See the examples section for examples of each of these.\n        value : scalar, dict, list, str, regex, default None\n            Value to replace any values matching ``to_replace`` with.\n            For a DataFrame a dict of values can be used to specify which\n            value to use for each column (columns not in the dict will not be\n            filled). Regular expressions, strings and lists or dicts of such\n            objects are also allowed.\n        inplace : boolean, default False\n            If True, in place. Note: this will modify any\n            other views on this object (e.g. a column from a DataFrame).\n            Returns the caller if this is True.\n        limit : int, default None\n            Maximum size gap to forward or backward fill\n        regex : bool or same types as ``to_replace``, default False\n            Whether to interpret ``to_replace`` and/or ``value`` as regular\n            expressions. If this is ``True`` then ``to_replace`` *must* be a\n            string. Alternatively, this could be a regular expression or a\n            list, dict, or array of regular expressions in which case\n            ``to_replace`` must be ``None``.\n        method : string, optional, {'pad', 'ffill', 'bfill'}\n            The method to use when for replacement, when ``to_replace`` is a\n            ``list``.\n\n        See Also\n        --------\n        %(klass)s.fillna : Fill NA/NaN values\n        %(klass)s.where : Replace values based on boolean condition\n\n        Returns\n        -------\n        filled : %(klass)s\n\n        Raises\n        ------\n        AssertionError\n            * If ``regex`` is not a ``bool`` and ``to_replace`` is not\n              ``None``.\n        TypeError\n            * If ``to_replace`` is a ``dict`` and ``value`` is not a ``list``,\n              ``dict``, ``ndarray``, or ``Series``\n            * If ``to_replace`` is ``None`` and ``regex`` is not compilable\n              into a regular expression or is a list, dict, ndarray, or\n              Series.\n            * When replacing multiple ``bool`` or ``datetime64`` objects and\n              the arguments to ``to_replace`` does not match the type of the\n              value being replaced\n        ValueError\n            * If a ``list`` or an ``ndarray`` is passed to ``to_replace`` and\n              `value` but they are not the same length.\n\n        Notes\n        -----\n        * Regex substitution is performed under the hood with ``re.sub``. The\n          rules for substitution for ``re.sub`` are the same.\n        * Regular expressions will only substitute on strings, meaning you\n          cannot provide, for example, a regular expression matching floating\n          point numbers and expect the columns in your frame that have a\n          numeric dtype to be matched. However, if those floating point\n          numbers *are* strings, then you can do this.\n        * This method has *a lot* of options. You are encouraged to experiment\n          and play with this method to gain intuition about how it works.\n\n        Examples\n        --------\n\n        >>> s = pd.Series([0, 1, 2, 3, 4])\n        >>> s.replace(0, 5)\n        0    5\n        1    1\n        2    2\n        3    3\n        4    4\n        dtype: int64\n        >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n        ...                    'B': [5, 6, 7, 8, 9],\n        ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n        >>> df.replace(0, 5)\n           A  B  C\n        0  5  5  a\n        1  1  6  b\n        2  2  7  c\n        3  3  8  d\n        4  4  9  e\n\n        >>> df.replace([0, 1, 2, 3], 4)\n           A  B  C\n        0  4  5  a\n        1  4  6  b\n        2  4  7  c\n        3  4  8  d\n        4  4  9  e\n        >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n           A  B  C\n        0  4  5  a\n        1  3  6  b\n        2  2  7  c\n        3  1  8  d\n        4  4  9  e\n        >>> s.replace([1, 2], method='bfill')\n        0    0\n        1    3\n        2    3\n        3    3\n        4    4\n        dtype: int64\n\n        >>> df.replace({0: 10, 1: 100})\n             A  B  C\n        0   10  5  a\n        1  100  6  b\n        2    2  7  c\n        3    3  8  d\n        4    4  9  e\n        >>> df.replace({'A': 0, 'B': 5}, 100)\n             A    B  C\n        0  100  100  a\n        1    1    6  b\n        2    2    7  c\n        3    3    8  d\n        4    4    9  e\n        >>> df.replace({'A': {0: 100, 4: 400}})\n             A  B  C\n        0  100  5  a\n        1    1  6  b\n        2    2  7  c\n        3    3  8  d\n        4  400  9  e\n\n        >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n        ...                    'B': ['abc', 'bar', 'xyz']})\n        >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n        >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n              A    B\n        0   new  abc\n        1   foo  bar\n        2  bait  xyz\n        >>> df.replace(regex=r'^ba.$', value='new')\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n        >>> df.replace(regex={r'^ba.$':'new', 'foo':'xyz'})\n              A    B\n        0   new  abc\n        1   xyz  new\n        2  bait  xyz\n        >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n              A    B\n        0   new  abc\n        1   new  new\n        2  bait  xyz\n\n        Note that when replacing multiple ``bool`` or ``datetime64`` objects,\n        the data types in the ``to_replace`` parameter must match the data\n        type of the value being replaced:\n\n        >>> df = pd.DataFrame({'A': [True, False, True],\n        ...                    'B': [False, True, False]})\n        >>> df.replace({'a string': 'new value', True: False})  # raises\n        TypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\n        This raises a ``TypeError`` because one of the ``dict`` keys is not of\n        the correct type for replacement.\n    \"\"\")\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\"'to_replace' must be 'None' if 'regex' is \"\n                                 \"not a bool\")\n        if axis is not None:\n            warnings.warn('the \"axis\" argument is deprecated '\n                          'and will be removed in'\n                          'v0.13; this argument has no effect')\n\n        self._consolidate_inplace()\n\n        if value is None:\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                return _single_replace(self, to_replace, method, inplace,\n                                       limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError('If \"to_replace\" and \"value\" are both None'\n                                    ' and \"to_replace\" is not a list, then '\n                                    'regex must be a mapping')\n                to_replace = regex\n                regex = True\n\n            items = list(compat.iteritems(to_replace))\n            keys, values = lzip(*items) or ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\"If a nested mapping is passed, all values\"\n                                    \" of the top level mapping must be \"\n                                    \"mappings\")\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = lzip(*v.items()) or ([], [])\n                    if set(keys) & set(values):\n                        raise ValueError(\"Replacement not allowed with \"\n                                         \"overlapping keys and values\")\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(to_replace, value, inplace=inplace,\n                                limit=limit, regex=regex)\n        else:\n\n            # need a non-zero len on all axes\n            for a in self._AXIS_ORDERS:\n                if not len(self._get_axis(a)):\n                    return self\n\n            new_data = self._data\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    res = self if inplace else self.copy()\n                    for c, src in compat.iteritems(to_replace):\n                        if c in value and c in self:\n                            # object conversion is handled in\n                            # series.replace which is called recursivelly\n                            res[c] = res[c].replace(to_replace=src,\n                                                    value=value[c],\n                                                    inplace=False,\n                                                    regex=regex)\n                    return None if inplace else res\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    keys = [(k, src) for k, src in compat.iteritems(to_replace)\n                            if k in self]\n                    keys_len = len(keys) - 1\n                    for i, (k, src) in enumerate(keys):\n                        convert = i == keys_len\n                        new_data = new_data.replace(to_replace=src,\n                                                    value=value,\n                                                    filter=[k],\n                                                    inplace=inplace,\n                                                    regex=regex,\n                                                    convert=convert)\n                else:\n                    raise TypeError('value argument must be scalar, dict, or '\n                                    'Series')\n\n            elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError('Replacement lists must match '\n                                         'in length. Expecting %d got %d ' %\n                                         (len(to_replace), len(value)))\n\n                    new_data = self._data.replace_list(src_list=to_replace,\n                                                       dest_list=value,\n                                                       inplace=inplace,\n                                                       regex=regex)\n\n                else:  # [NA, ''] -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n            elif to_replace is None:\n                if not (is_re_compilable(regex) or\n                        is_list_like(regex) or is_dict_like(regex)):\n                    raise TypeError(\"'regex' must be a string or a compiled \"\n                                    \"regular expression or a list or dict of \"\n                                    \"strings or regular expressions, you \"\n                                    \"passed a\"\n                                    \" {0!r}\".format(type(regex).__name__))\n                return self.replace(regex, value, inplace=inplace, limit=limit,\n                                    regex=True)\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    new_data = self._data\n\n                    for k, v in compat.iteritems(value):\n                        if k in self:\n                            new_data = new_data.replace(to_replace=to_replace,\n                                                        value=v, filter=[k],\n                                                        inplace=inplace,\n                                                        regex=regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    new_data = self._data.replace(to_replace=to_replace,\n                                                  value=value, inplace=inplace,\n                                                  regex=regex)\n                else:\n                    msg = ('Invalid \"to_replace\" type: '\n                           '{0!r}').format(type(to_replace).__name__)\n                    raise TypeError(msg)  # pragma: no cover\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['interpolate'] = \"\"\"\n        Please note that only ``method='linear'`` is supported for\n        DataFrames/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\n                  'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\n                  'polynomial', 'spline', 'piecewise_polynomial',\n                  'from_derivatives', 'pchip', 'akima'}\n\n            * 'linear': ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n              default\n            * 'time': interpolation works on daily and higher resolution\n              data to interpolate given length of interval\n            * 'index', 'values': use the actual numerical values of the index\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n              'barycentric', 'polynomial' is passed to\n              ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\n              require that you also specify an `order` (int),\n              e.g. df.interpolate(method='polynomial', order=4).\n              These use the actual numerical values of the index.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n              are all wrappers around the scipy interpolation methods of\n              similar names. These use the actual numerical values of the\n              index. For more information on their behavior, see the\n              `scipy documentation\n              <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\n              and `tutorial documentation\n              <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__\n            * 'from_derivatives' refers to BPoly.from_derivatives which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18\n\n            .. versionadded:: 0.18.1\n\n               Added support for the 'akima' method\n               Added interpolate method 'from_derivatives' which replaces\n               'piecewise_polynomial' in scipy 0.18; backwards-compatible with\n               scipy < 0.18\n\n        axis : {0, 1}, default 0\n            * 0: fill column-by-column\n            * 1: fill row-by-row\n        limit : int, default None.\n            Maximum number of consecutive NaNs to fill. Must be greater than 0.\n        limit_direction : {'forward', 'backward', 'both'}, default 'forward'\n        limit_area : {'inside', 'outside'}, default None\n            * None: (default) no fill restriction\n            * 'inside' Only fill NaNs surrounded by valid values (interpolate).\n            * 'outside' Only fill NaNs outside valid values (extrapolate).\n            .. versionadded:: 0.21.0\n\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n        inplace : bool, default False\n            Update the NDFrame in place if possible.\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        kwargs : keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame of same shape interpolated at the NaNs\n\n        See Also\n        --------\n        reindex, replace, fillna\n\n        Examples\n        --------\n\n        Filling in NaNs\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s.interpolate()\n        0    0\n        1    1\n        2    2\n        3    3\n        dtype: float64\n\n        \"\"\"\n\n    @Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\n    def interpolate(self, method='linear', axis=0, limit=None, inplace=False,\n                    limit_direction='forward', limit_area=None,\n                    downcast=None, **kwargs):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        if self.ndim > 2:\n            raise NotImplementedError(\"Interpolate has not been implemented \"\n                                      \"on Panel and Panel 4D objects.\")\n\n        if axis == 0:\n            ax = self._info_axis_name\n            _maybe_transposed_self = self\n        elif axis == 1:\n            _maybe_transposed_self = self.T\n            ax = 1\n        else:\n            _maybe_transposed_self = self\n        ax = _maybe_transposed_self._get_axis_number(ax)\n\n        if _maybe_transposed_self.ndim == 2:\n            alt_ax = 1 - ax\n        else:\n            alt_ax = ax\n\n        if (isinstance(_maybe_transposed_self.index, MultiIndex) and\n                method != 'linear'):\n            raise ValueError(\"Only `method=linear` interpolation is supported \"\n                             \"on MultiIndexes.\")\n\n        if _maybe_transposed_self._data.get_dtype_counts().get(\n                'object') == len(_maybe_transposed_self.T):\n            raise TypeError(\"Cannot interpolate with all NaNs.\")\n\n        # create/use the index\n        if method == 'linear':\n            # prior default\n            index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n        else:\n            index = _maybe_transposed_self._get_axis(alt_ax)\n\n        if isna(index).any():\n            raise NotImplementedError(\"Interpolation with NaNs in the index \"\n                                      \"has not been implemented. Try filling \"\n                                      \"those NaNs before interpolating.\")\n        data = _maybe_transposed_self._data\n        new_data = data.interpolate(method=method, axis=ax, index=index,\n                                    values=_maybe_transposed_self, limit=limit,\n                                    limit_direction=limit_direction,\n                                    limit_area=limit_area,\n                                    inplace=inplace, downcast=downcast,\n                                    **kwargs)\n\n        if inplace:\n            if axis == 1:\n                new_data = self._constructor(new_data).T._data\n            self._update_inplace(new_data)\n        else:\n            res = self._constructor(new_data).__finalize__(self)\n            if axis == 1:\n                res = res.T\n            return res\n\n    # ----------------------------------------------------------------------\n    # Timeseries methods Methods\n\n    def asof(self, where, subset=None):\n        \"\"\"\n        The last row without any NaN is taken (or the last row without\n        NaN considering only the subset of columns in the case of a DataFrame)\n\n        .. versionadded:: 0.19.0 For DataFrame\n\n        If there is no good value, NaN is returned for a Series\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array of dates\n        subset : string or list of strings, default None\n           if not None use these columns for NaN propagation\n\n        Notes\n        -----\n        Dates are assumed to be sorted\n        Raises if this is not the case\n\n        Returns\n        -------\n        where is scalar\n\n          - value or NaN if input is Series\n          - Series if input is DataFrame\n\n        where is Index: same shape object as input\n\n        See Also\n        --------\n        merge_asof\n\n        \"\"\"\n\n        if isinstance(where, compat.string_types):\n            from pandas import to_datetime\n            where = to_datetime(where)\n\n        if not self.index.is_monotonic:\n            raise ValueError(\"asof requires a sorted index\")\n\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError(\"subset is not valid for Series\")\n        elif self.ndim > 2:\n            raise NotImplementedError(\"asof is not implemented \"\n                                      \"for {type}\".format(type=type(self)))\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq).ordinal\n                start = start.ordinal\n\n            if where < start:\n                if not is_series:\n                    from pandas import Series\n                    return Series(index=self.columns, name=where)\n                return np.nan\n\n            # It's always much faster to use a *while* loop here for\n            # Series than pre-computing all the NAs. However a\n            # *while* loop is extremely expensive for DataFrame\n            # so we later pre-compute all the NAs and use the same\n            # code path whether *where* is a scalar or list.\n            # See PR: https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side='right')\n                if loc > 0:\n                    loc -= 1\n\n                values = self._values\n                while loc > 0 and isna(values[loc]):\n                    loc -= 1\n                return values[loc]\n\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n\n        nulls = self.isna() if is_series else self[subset].isna().any(1)\n        if nulls.all():\n            if is_series:\n                return self._constructor(np.nan, index=where, name=self.name)\n            elif is_list:\n                from pandas import DataFrame\n                return DataFrame(np.nan, index=where, columns=self.columns)\n            else:\n                from pandas import Series\n                return Series(np.nan, index=self.columns, name=where[0])\n\n        locs = self.index.asof_locs(where, ~(nulls.values))\n\n        # mask the missing\n        missing = locs == -1\n        data = self.take(locs, is_copy=False)\n        data.index = where\n        data.loc[missing] = np.nan\n        return data if is_list else data.iloc[-1]\n\n    # ----------------------------------------------------------------------\n    # Action Methods\n\n    _shared_docs['isna'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are NA.\n\n        See Also\n        --------\n        %(klass)s.notna : boolean inverse of isna\n        %(klass)s.isnull : alias of isna\n        isna : top-level isna\n        \"\"\"\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return isna(self).__finalize__(self)\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return isna(self).__finalize__(self)\n\n    _shared_docs['notna'] = \"\"\"\n        Return a boolean same-sized object indicating if the values are\n        not NA.\n\n        See Also\n        --------\n        %(klass)s.isna : boolean inverse of notna\n        %(klass)s.notnull : alias of notna\n        notna : top-level notna\n        \"\"\"\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return notna(self).__finalize__(self)\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return notna(self).__finalize__(self)\n\n    def _clip_with_scalar(self, lower, upper, inplace=False):\n        if ((lower is not None and np.any(isna(lower))) or\n                (upper is not None and np.any(isna(upper)))):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        result = self.values\n        mask = isna(result)\n\n        with np.errstate(all='ignore'):\n            if upper is not None:\n                result = np.where(result >= upper, upper, result)\n            if lower is not None:\n                result = np.where(result <= lower, lower, result)\n        if np.any(mask):\n            result[mask] = np.nan\n\n        axes_dict = self._construct_axes_dict()\n        result = self._constructor(result, **axes_dict).__finalize__(self)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def _clip_with_one_bound(self, threshold, method, axis, inplace):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == 'le':\n                return self._clip_with_scalar(None, threshold, inplace=inplace)\n            return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n        subset = method(threshold, axis=axis) | isna(self)\n\n        # GH #15390\n        # In order for where method to work, the threshold must\n        # be transformed to NDFrame from other array like structure.\n        if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n            if isinstance(self, ABCSeries):\n                threshold = pd.Series(threshold, index=self.index)\n            else:\n                threshold = _align_method_FRAME(self, np.asarray(threshold),\n                                                axis)\n        return self.where(subset, threshold, axis=axis, inplace=inplace)\n\n    def clip(self, lower=None, upper=None, axis=None, inplace=False,\n             *args, **kwargs):\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Parameters\n        ----------\n        lower : float or array_like, default None\n        upper : float or array_like, default None\n        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        clipped : Series\n\n        Examples\n        --------\n        >>> df\n                  0         1\n        0  0.335232 -1.256177\n        1 -1.367855  0.746646\n        2  0.027753 -1.176076\n        3  0.230930 -0.679613\n        4  1.261967  0.570967\n\n        >>> df.clip(-1.0, 0.5)\n                  0         1\n        0  0.335232 -1.000000\n        1 -1.000000  0.500000\n        2  0.027753 -1.000000\n        3  0.230930 -0.679613\n        4  0.500000  0.500000\n\n        >>> t\n        0   -0.3\n        1   -0.2\n        2   -0.1\n        3    0.0\n        4    0.1\n        dtype: float64\n\n        >>> df.clip(t, t + 1, axis=0)\n                  0         1\n        0  0.335232 -0.300000\n        1 -0.200000  0.746646\n        2  0.027753 -0.100000\n        3  0.230930  0.000000\n        4  1.100000  0.570967\n        \"\"\"\n        if isinstance(self, ABCPanel):\n            raise NotImplementedError(\"clip is not supported yet for panels\")\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        axis = nv.validate_clip_with_axis(axis, args, kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # GH 17276\n        # numpy doesn't like NaN as a clip value\n        # so ignore\n        if np.any(pd.isnull(lower)):\n            lower = None\n        if np.any(pd.isnull(upper)):\n            upper = None\n\n        # GH 2747 (arguments were reversed)\n        if lower is not None and upper is not None:\n            if is_scalar(lower) and is_scalar(upper):\n                lower, upper = min(lower, upper), max(lower, upper)\n\n        # fast-path for scalars\n        if ((lower is None or (is_scalar(lower) and is_number(lower))) and\n                (upper is None or (is_scalar(upper) and is_number(upper)))):\n            return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n        result = self\n        if lower is not None:\n            result = result.clip_lower(lower, axis, inplace=inplace)\n        if upper is not None:\n            if inplace:\n                result = self\n            result = result.clip_upper(upper, axis, inplace=inplace)\n\n        return result\n\n    def clip_upper(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of input with values above given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.le,\n                                         axis=axis, inplace=inplace)\n\n    def clip_lower(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of the input with values below given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n                .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.ge,\n                                         axis=axis, inplace=inplace)\n\n    def groupby(self, by=None, axis=0, level=None, as_index=True, sort=True,\n                group_keys=True, squeeze=False, **kwargs):\n        \"\"\"\n        Group series using mapper (dict or key function, apply given function\n        to group, return result as series) or by a series of columns.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it's called on each value of the object's\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted a (single) key.\n        axis : int, default 0\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels\n        as_index : boolean, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output\n        sort : boolean, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group.  groupby preserves the order of rows within each group.\n        group_keys : boolean, default True\n            When calling apply, add group keys to index to identify pieces\n        squeeze : boolean, default False\n            reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type\n\n        Examples\n        --------\n        DataFrame results\n\n        >>> data.groupby(func, axis=0).mean()\n        >>> data.groupby(['col1', 'col2'])['col3'].mean()\n\n        DataFrame with hierarchical index\n\n        >>> data.groupby(['col1', 'col2']).mean()\n\n        Returns\n        -------\n        GroupBy object\n\n        \"\"\"\n        from pandas.core.groupby import groupby\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n        return groupby(self, by=by, axis=axis, level=level, as_index=as_index,\n                       sort=sort, group_keys=group_keys, squeeze=squeeze,\n                       **kwargs)\n\n    def asfreq(self, freq, method=None, how=None, normalize=False,\n               fill_value=None):\n        \"\"\"\n        Convert TimeSeries to specified frequency.\n\n        Optionally provide filling method to pad/backfill missing values.\n\n        Returns the original data conformed to a new index with the specified\n        frequency. ``resample`` is more appropriate if an operation, such as\n        summarization, is necessary to represent the data at the new frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset object, or string\n        method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid\n            * 'backfill' / 'bfill': use NEXT valid observation to fill\n        how : {'start', 'end'}, default end\n            For PeriodIndex only, see PeriodIndex.asfreq\n        normalize : bool, default False\n            Whether to reset output index to midnight\n        fill_value: scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        converted : type of caller\n\n        Examples\n        --------\n\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({'s':series})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq='30S')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq='30S', fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq='30S', method='bfill')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n\n        See Also\n        --------\n        reindex\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n        \"\"\"\n        from pandas.core.resample import asfreq\n        return asfreq(self, freq, method=method, how=how, normalize=normalize,\n                      fill_value=fill_value)\n\n    def at_time(self, time, asof=False):\n        \"\"\"\n        Select values at particular time of day (e.g. 9:30AM).\n\n        Parameters\n        ----------\n        time : datetime.time or string\n\n        Returns\n        -------\n        values_at_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_at_time(time, asof=asof)\n            return self._take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def between_time(self, start_time, end_time, include_start=True,\n                     include_end=True):\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        Parameters\n        ----------\n        start_time : datetime.time or string\n        end_time : datetime.time or string\n        include_start : boolean, default True\n        include_end : boolean, default True\n\n        Returns\n        -------\n        values_between_time : type of caller\n        \"\"\"\n        try:\n            indexer = self.index.indexer_between_time(\n                start_time, end_time, include_start=include_start,\n                include_end=include_end)\n            return self._take(indexer, convert=False)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def resample(self, rule, how=None, axis=0, fill_method=None, closed=None,\n                 label=None, convention='start', kind=None, loffset=None,\n                 limit=None, base=0, on=None, level=None):\n        \"\"\"\n        Convenience method for frequency conversion and resampling of time\n        series.  Object must have a datetime-like index (DatetimeIndex,\n        PeriodIndex, or TimedeltaIndex), or pass datetime-like values\n        to the on or level keyword.\n\n        Parameters\n        ----------\n        rule : string\n            the offset string or object representing target conversion\n        axis : int, optional, default 0\n        closed : {'right', 'left'}\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {'right', 'left'}\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {'start', 'end', 's', 'e'}\n            For PeriodIndex only, controls whether to use the start or end of\n            `rule`\n        kind: {'timestamp', 'period'}, optional\n            Pass 'timestamp' to convert the resulting index to a\n            ``DateTimeIndex`` or 'period' to convert it to a ``PeriodIndex``.\n            By default the input representation is retained.\n        loffset : timedelta\n            Adjust the resampled time labels\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0\n        on : string, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        level : string or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling.  Level must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        Notes\n        -----\n        To learn more about the offset strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5] #select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like)+5\n\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n                                                        freq='A',\n                                                        periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n\n        Resample by month using 'start' `convention`. Values are assigned to\n        the first month of the period.\n\n        >>> s.resample('M', convention='start').asfreq().head()\n        2012-01    1.0\n        2012-02    NaN\n        2012-03    NaN\n        2012-04    NaN\n        2012-05    NaN\n        Freq: M, dtype: float64\n\n        Resample by month using 'end' `convention`. Values are assigned to\n        the last month of the period.\n\n        >>> s.resample('M', convention='end').asfreq()\n        2012-12    1.0\n        2013-01    NaN\n        2013-02    NaN\n        2013-03    NaN\n        2013-04    NaN\n        2013-05    NaN\n        2013-06    NaN\n        2013-07    NaN\n        2013-08    NaN\n        2013-09    NaN\n        2013-10    NaN\n        2013-11    NaN\n        2013-12    2.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword ``on`` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> df = pd.DataFrame(data=9*[range(4)], columns=['a', 'b', 'c', 'd'])\n        >>> df['time'] = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> df.resample('3T', on='time').sum()\n                             a  b  c  d\n        time\n        2000-01-01 00:00:00  0  3  6  9\n        2000-01-01 00:03:00  0  3  6  9\n        2000-01-01 00:06:00  0  3  6  9\n\n        For a DataFrame with MultiIndex, the keyword ``level`` can be used to\n        specify on level the resampling needs to take place.\n\n        >>> time = pd.date_range('1/1/2000', periods=5, freq='T')\n        >>> df2 = pd.DataFrame(data=10*[range(4)],\n                               columns=['a', 'b', 'c', 'd'],\n                               index=pd.MultiIndex.from_product([time, [1, 2]])\n                               )\n        >>> df2.resample('3T', level=0).sum()\n                             a  b   c   d\n        2000-01-01 00:00:00  0  6  12  18\n        2000-01-01 00:03:00  0  4   8  12\n        \"\"\"\n        from pandas.core.resample import (resample,\n                                          _maybe_process_deprecations)\n        axis = self._get_axis_number(axis)\n        r = resample(self, freq=rule, label=label, closed=closed,\n                     axis=axis, kind=kind, loffset=loffset,\n                     convention=convention,\n                     base=base, key=on, level=level)\n        return _maybe_process_deprecations(r,\n                                           how=how,\n                                           fill_method=fill_method,\n                                           limit=limit)\n\n    def first(self, offset):\n        \"\"\"\n        Convenience method for subsetting initial periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.first('10D') -> First 10 days\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'first' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n        end_date = end = self.index[0] + offset\n\n        # Tick-like, e.g. 3 weeks\n        if not offset.isAnchored() and hasattr(offset, '_inc'):\n            if end_date in self.index:\n                end = self.index.searchsorted(end_date, side='left')\n                return self.iloc[:end]\n\n        return self.loc[:end]\n\n    def last(self, offset):\n        \"\"\"\n        Convenience method for subsetting final periods of time series data\n        based on a date offset.\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        ts.last('5M') -> Last 5 months\n\n        Returns\n        -------\n        subset : type of caller\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise NotImplementedError(\"'last' only supports a DatetimeIndex \"\n                                      \"index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n\n        start_date = self.index[-1] - offset\n        start = self.index.searchsorted(start_date, side='right')\n        return self.iloc[start:]\n\n    def rank(self, axis=0, method='average', numeric_only=None,\n             na_option='keep', ascending=True, pct=False):\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis. Equal values are\n        assigned a rank that is the average of the ranks of those values\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            index to direct ranking\n        method : {'average', 'min', 'max', 'first', 'dense'}\n            * average: average rank of group\n            * min: lowest rank in group\n            * max: highest rank in group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups\n        numeric_only : boolean, default None\n            Include only float, int, boolean data. Valid only for DataFrame or\n            Panel objects\n        na_option : {'keep', 'top', 'bottom'}\n            * keep: leave NA values where they are\n            * top: smallest rank if ascending\n            * bottom: smallest rank if descending\n        ascending : boolean, default True\n            False for ranks by high (1) to low (N)\n        pct : boolean, default False\n            Computes percentage rank of data\n\n        Returns\n        -------\n        ranks : same type as caller\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if self.ndim > 2:\n            msg = \"rank does not make sense when ndim > 2\"\n            raise NotImplementedError(msg)\n\n        def ranker(data):\n            ranks = algos.rank(data.values, axis=axis, method=method,\n                               ascending=ascending, na_option=na_option,\n                               pct=pct)\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self)\n\n        # if numeric_only is None, and we can't get anything, we try with\n        # numeric_only=True\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)\n\n    _shared_docs['align'] = (\"\"\"\n        Align two objects on their axes with the\n        specified join method for each axis Index\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None)\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        copy : boolean, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        method : str, default None\n        limit : int, default None\n        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions\n\n        Returns\n        -------\n        (left, right) : (%(klass)s, type of other)\n            Aligned objects\n        \"\"\")\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        from pandas import DataFrame, Series\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, Series):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons({c: self for c in other.columns},\n                          **other._construct_axes_dict())\n                return df._align_frame(other, join=join, axis=axis,\n                                       level=level, copy=copy,\n                                       fill_value=fill_value, method=method,\n                                       limit=limit, fill_axis=fill_axis)\n            elif isinstance(other, Series):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons({c: other for c in self.columns},\n                          **self._construct_axes_dict())\n                return self._align_frame(df, join=join, axis=axis, level=level,\n                                         copy=copy, fill_value=fill_value,\n                                         method=method, limit=limit,\n                                         fill_axis=fill_axis)\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, DataFrame):\n            return self._align_frame(other, join=join, axis=axis, level=level,\n                                     copy=copy, fill_value=fill_value,\n                                     method=method, limit=limit,\n                                     fill_axis=fill_axis)\n        elif isinstance(other, Series):\n            return self._align_series(other, join=join, axis=axis, level=level,\n                                      copy=copy, fill_value=fill_value,\n                                      method=method, limit=limit,\n                                      fill_axis=fill_axis)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    def _align_frame(self, other, join='outer', axis=None, level=None,\n                     copy=True, fill_value=np.nan, method=None, limit=None,\n                     fill_axis=0):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True)\n\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(\n                    other.columns, how=join, level=level, return_indexers=True)\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(reindexers, copy=copy,\n                                           fill_value=fill_value,\n                                           allow_dups=True)\n        # other must be always DataFrame\n        right = other._reindex_with_indexers({0: [join_index, iridx],\n                                              1: [join_columns, cridx]},\n                                             copy=copy, fill_value=fill_value,\n                                             allow_dups=True)\n\n        if method is not None:\n            left = left.fillna(axis=fill_axis, method=method, limit=limit)\n            right = right.fillna(axis=fill_axis, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _align_series(self, other, join='outer', axis=None, level=None,\n                      copy=True, fill_value=None, method=None, limit=None,\n                      fill_axis=0):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError('cannot align series to a series other than '\n                                 'axis 0')\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(other.index, how=join,\n                                                         level=level,\n                                                         return_indexers=True)\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level,\n                        return_indexers=True)\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError('Must specify axis=0 or 1')\n\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit,\n                               axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n               errors='raise', try_cast=False):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n\n        # align the cond to same shape as myself\n        cond = com._apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join='right', broadcast_axis=1)\n        else:\n            if not hasattr(cond, 'shape'):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as '\n                                 'self')\n            cond = self._constructor(cond, **self._construct_axes_dict())\n\n        # make sure we are boolean\n        fill_value = True if inplace else False\n        cond = cond.fillna(fill_value)\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not isinstance(cond, pd.DataFrame):\n            # This is a single-dimensional object.\n            if not is_bool_dtype(cond):\n                raise ValueError(msg.format(dtype=cond.dtype))\n        else:\n            for dt in cond.dtypes:\n                if not is_bool_dtype(dt):\n                    raise ValueError(msg.format(dtype=dt))\n\n        cond = cond.astype(bool, copy=False)\n        cond = -cond if inplace else cond\n\n        # try to align with other\n        try_quick = True\n        if hasattr(other, 'align'):\n\n            # align with me\n            if other.ndim <= self.ndim:\n\n                _, other = self.align(other, join='left', axis=axis,\n                                      level=level, fill_value=np.nan)\n\n                # if we are NOT aligned, raise as we cannot where index\n                if (axis is None and\n                        not all(other._get_axis(i).equals(ax)\n                                for i, ax in enumerate(self.axes))):\n                    raise InvalidIndexError\n\n            # slice me out of the other\n            else:\n                raise NotImplementedError(\"cannot align with a higher \"\n                                          \"dimensional NDFrame\")\n\n        if isinstance(other, np.ndarray):\n\n            if other.shape != self.shape:\n\n                if self.ndim == 1:\n\n                    icond = cond.values\n\n                    # GH 2745 / GH 4192\n                    # treat like a scalar\n                    if len(other) == 1:\n                        other = np.array(other[0])\n\n                    # GH 3235\n                    # match True cond to other\n                    elif len(cond[icond]) == len(other):\n\n                        # try to not change dtype at first (if try_quick)\n                        if try_quick:\n\n                            try:\n                                new_other = com._values_from_object(self)\n                                new_other = new_other.copy()\n                                new_other[icond] = other\n                                other = new_other\n                            except Exception:\n                                try_quick = False\n\n                        # let's create a new (if we failed at the above\n                        # or not try_quick\n                        if not try_quick:\n\n                            dtype, fill_value = maybe_promote(other.dtype)\n                            new_other = np.empty(len(icond), dtype=dtype)\n                            new_other.fill(fill_value)\n                            maybe_upcast_putmask(new_other, icond, other)\n                            other = new_other\n\n                    else:\n                        raise ValueError('Length of replacements must equal '\n                                         'series length')\n\n                else:\n                    raise ValueError('other must be the same shape as self '\n                                     'when an ndarray')\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, 'ndim', 0):\n            align = True\n        else:\n            align = (self._get_axis_number(axis) == 1)\n\n        block_axis = self._get_block_manager_axis(axis)\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            self._check_inplace_setting(other)\n            new_data = self._data.putmask(mask=cond, new=other, align=align,\n                                          inplace=True, axis=block_axis,\n                                          transpose=self._AXIS_REVERSED)\n            self._update_inplace(new_data)\n\n        else:\n            new_data = self._data.where(other=other, cond=cond, align=align,\n                                        errors=errors,\n                                        try_cast=try_cast, axis=block_axis,\n                                        transpose=self._AXIS_REVERSED)\n\n            return self._constructor(new_data).__finalize__(self)\n\n    _shared_docs['where'] = (\"\"\"\n        Return an object of same shape as self and whose corresponding\n        entries are from self where `cond` is %(cond)s and otherwise are from\n        `other`.\n\n        Parameters\n        ----------\n        cond : boolean %(klass)s, array-like, or callable\n            Where `cond` is %(cond)s, keep the original value. Where\n            %(cond_rev)s, replace with corresponding value from `other`.\n            If `cond` is callable, it is computed on the %(klass)s and\n            should return boolean %(klass)s or array. The callable must\n            not change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as cond.\n\n        other : scalar, %(klass)s, or callable\n            Entries where `cond` is %(cond_rev)s are replaced with\n            corresponding value from `other`.\n            If other is callable, it is computed on the %(klass)s and\n            should return scalar or %(klass)s. The callable must not\n            change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as other.\n\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n        axis : alignment axis if needed, default None\n        level : alignment level if needed, default None\n        errors : str, {'raise', 'ignore'}, default 'raise'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            Note that currently this parameter won't affect\n            the results and will always coerce to a suitable dtype.\n\n        try_cast : boolean, default False\n            try to cast the result back to the input type (if possible),\n        raise_on_error : boolean, default True\n            Whether to raise on invalid data types (e.g. trying to where on\n            strings)\n\n            .. deprecated:: 0.21.0\n\n        Returns\n        -------\n        wh : same type as caller\n\n        Notes\n        -----\n        The %(name)s method is an application of the if-then idiom. For each\n        element in the calling DataFrame, if ``cond`` is ``%(cond)s`` the\n        element is used; otherwise the corresponding element from the DataFrame\n        ``other`` is used.\n\n        The signature for :func:`DataFrame.where` differs from\n        :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n        ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``%(name)s`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> s.mask(s > 0)\n        0    0.0\n        1    NaN\n        2    NaN\n        3    NaN\n        4    NaN\n\n        >>> s.where(s > 1, 10)\n        0    10.0\n        1    10.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n        >>> m = df %% 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n\n        See Also\n        --------\n        :func:`DataFrame.%(name_other)s`\n        \"\"\")\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"True\",\n                                           cond_rev=\"False\", name='where',\n                                           name_other='mask'))\n    def where(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n              errors='raise', try_cast=False, raise_on_error=None):\n\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in \"\n                \"favor of errors='raise|ignore'\",\n                FutureWarning, stacklevel=2)\n\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n\n        other = com._apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level,\n                           errors=errors, try_cast=try_cast)\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond=\"False\",\n                                           cond_rev=\"True\", name='mask',\n                                           name_other='where'))\n    def mask(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n             errors='raise', try_cast=False, raise_on_error=None):\n\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in \"\n                \"favor of errors='raise|ignore'\",\n                FutureWarning, stacklevel=2)\n\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cond = com._apply_if_callable(cond, self)\n\n        return self.where(~cond, other=other, inplace=inplace, axis=axis,\n                          level=level, try_cast=try_cast,\n                          errors=errors)\n\n    _shared_docs['shift'] = (\"\"\"\n        Shift index by desired number of periods with an optional time freq\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, optional\n            Increment to use from the tseries module or time rule (e.g. 'EOM').\n            See Notes.\n        axis : %(axes_single_arg)s\n\n        Notes\n        -----\n        If freq is specified then the index values are shifted but the data\n        is not realigned. That is, use freq if you would like to extend the\n        index when shifting and preserve the original data.\n\n        Returns\n        -------\n        shifted : %(klass)s\n    \"\"\")\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        if periods == 0:\n            return self\n\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._data.shift(periods=periods, axis=block_axis)\n        else:\n            return self.tshift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.\n\n        Returns\n        -------\n        shifted : same type as caller\n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n        return new_obj.__finalize__(self)\n\n    def tshift(self, periods=1, freq=None, axis=0):\n        \"\"\"\n        Shift the time index, using the index's frequency if available.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, default None\n            Increment to use from the tseries module or time rule (e.g. 'EOM')\n        axis : int or basestring\n            Corresponds to the axis that contains the Index\n\n        Notes\n        -----\n        If freq is not specified then tries to use the freq or inferred_freq\n        attributes of the index. If neither of those attributes exist, a\n        ValueError is thrown\n\n        Returns\n        -------\n        shifted : NDFrame\n        \"\"\"\n\n        index = self._get_axis(axis)\n        if freq is None:\n            freq = getattr(index, 'freq', None)\n\n        if freq is None:\n            freq = getattr(index, 'inferred_freq', None)\n\n        if freq is None:\n            msg = 'Freq was not given and was not set in the index'\n            raise ValueError(msg)\n\n        if periods == 0:\n            return self\n\n        if isinstance(freq, string_types):\n            freq = to_offset(freq)\n\n        block_axis = self._get_block_manager_axis(axis)\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq == orig_freq:\n                new_data = self._data.copy()\n                new_data.axes[block_axis] = index.shift(periods)\n            else:\n                msg = ('Given freq %s does not match PeriodIndex freq %s' %\n                       (freq.rule_code, orig_freq.rule_code))\n                raise ValueError(msg)\n        else:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods, freq)\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def truncate(self, before=None, after=None, axis=None, copy=True):\n        \"\"\"\n        Truncates a sorted DataFrame/Series before and/or after some\n        particular index value. If the axis contains only datetime values,\n        before/after parameters are converted to datetime values.\n\n        Parameters\n        ----------\n        before : date, string, int\n            Truncate all rows before this index value\n        after : date, string, int\n            Truncate all rows after this index value\n        axis : {0 or 'index', 1 or 'columns'}\n\n            * 0 or 'index': apply truncation to rows\n            * 1 or 'columns': apply truncation to columns\n\n            Default is stat axis for given data type (0 for Series and\n            DataFrames, 1 for Panels)\n        copy : boolean, default is True,\n            return a copy of the truncated section\n\n        Returns\n        -------\n        truncated : type of caller\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n        ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n        ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n        ...                    index=[1, 2, 3, 4, 5])\n        >>> df.truncate(before=2, after=4)\n           A  B  C\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4, 5],\n        ...                    'B': [6, 7, 8, 9, 10],\n        ...                    'C': [11, 12, 13, 14, 15]},\n        ...                    index=['a', 'b', 'c', 'd', 'e'])\n        >>> df.truncate(before='b', after='d')\n           A  B   C\n        b  2  7  12\n        c  3  8  13\n        d  4  9  14\n\n        The index values in ``truncate`` can be datetimes or string\n        dates. Note that ``truncate`` assumes a 0 value for any unspecified\n        date component in a ``DatetimeIndex`` in contrast to slicing which\n        returns any partially matching dates.\n\n        >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n        >>> df = pd.DataFrame(index=dates, data={'A': 1})\n        >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n        >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                             A\n        2016-01-10 23:59:55  1\n        2016-01-10 23:59:56  1\n        2016-01-10 23:59:57  1\n        2016-01-10 23:59:58  1\n        2016-01-10 23:59:59  1\n        \"\"\"\n\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # GH 17935\n        # Check that index is sorted\n        if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n            raise ValueError(\"truncate requires a sorted index\")\n\n        # if we have a date index, convert to dates, otherwise\n        # treat like a slice\n        if ax.is_all_dates:\n            from pandas.core.tools.datetimes import to_datetime\n            before = to_datetime(before)\n            after = to_datetime(after)\n\n        if before is not None and after is not None:\n            if before > after:\n                raise ValueError('Truncate: %s must be after %s' %\n                                 (after, before))\n\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis),\n                    ax.truncate(before, after))\n\n        if copy:\n            result = result.copy()\n\n        return result\n\n    def tz_convert(self, tz, axis=0, level=None, copy=True):\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to convert\n        level : int, str, default None\n            If axis ia a MultiIndex, convert a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, 'tz_convert'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_convert(ax, tz)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    @deprecate_kwarg(old_arg_name='infer_dst', new_arg_name='ambiguous',\n                     mapping={True: 'infer',\n                              False: 'raise'})\n    def tz_localize(self, tz, axis=0, level=None, copy=True,\n                    ambiguous='raise'):\n        \"\"\"\n        Localize tz-naive TimeSeries to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times\n        infer_dst : boolean, default False\n            .. deprecated:: 0.15.0\n               Attempt to infer fall dst-transition hours based on order\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous):\n            if not hasattr(ax, 'tz_localize'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError('%s is not a valid DatetimeIndex or '\n                                    'PeriodIndex' % ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(\"The level {0} is not valid\".format(level))\n            ax = _tz_localize(ax, tz, ambiguous)\n\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Numeric Methods\n    def abs(self):\n        \"\"\"\n        Return an object with absolute value taken--only applicable to objects\n        that are all numeric.\n\n        Returns\n        -------\n        abs: type of caller\n        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\"\n        Generates descriptive statistics that summarize the central tendency,\n        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        summary:  Series/DataFrame of summary statistics\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the dataframe consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                       3\n        unique                      2\n        top       2010-01-01 00:00:00\n        freq                        2\n        first     2000-01-01 00:00:00\n        last      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame({ 'object': ['a', 'b', 'c'],\n        ...                     'numeric': [1, 2, 3],\n        ...                     'categorical': pd.Categorical(['d','e','f'])\n        ...                   })\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')\n                categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      c\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.object])\n               object\n        count       3\n        unique      3\n        top         c\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=['category'])\n               categorical\n        count            3\n        unique           3\n        top              f\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      c\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.object])\n                categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n\n        See Also\n        --------\n        DataFrame.count\n        DataFrame.max\n        DataFrame.min\n        DataFrame.mean\n        DataFrame.std\n        DataFrame.select_dtypes\n        \"\"\"\n        if self.ndim >= 3:\n            msg = \"describe is not implemented on Panel objects.\"\n            raise NotImplementedError(msg)\n        elif self.ndim == 2 and self.columns.size == 0:\n            raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n        if percentiles is not None:\n            # explicit conversion of `percentiles` to list\n            percentiles = list(percentiles)\n\n            # get them all to be in [0, 1]\n            self._check_percentile(percentiles)\n\n            # median should always be included\n            if 0.5 not in percentiles:\n                percentiles.append(0.5)\n            percentiles = np.asarray(percentiles)\n        else:\n            percentiles = np.array([0.25, 0.5, 0.75])\n\n        # sort and check for duplicates\n        unique_pcts = np.unique(percentiles)\n        if len(unique_pcts) < len(percentiles):\n            raise ValueError(\"percentiles cannot contain duplicates\")\n        percentiles = unique_pcts\n\n        formatted_percentiles = format_percentiles(percentiles)\n\n        def describe_numeric_1d(series):\n            stat_index = (['count', 'mean', 'std', 'min'] +\n                          formatted_percentiles + ['max'])\n            d = ([series.count(), series.mean(), series.std(), series.min()] +\n                 [series.quantile(x) for x in percentiles] + [series.max()])\n            return pd.Series(d, index=stat_index, name=series.name)\n\n        def describe_categorical_1d(data):\n            names = ['count', 'unique']\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n\n                if is_datetime64_dtype(data):\n                    asint = data.dropna().values.view('i8')\n                    names += ['top', 'freq', 'first', 'last']\n                    result += [tslib.Timestamp(top), freq,\n                               tslib.Timestamp(asint.min()),\n                               tslib.Timestamp(asint.max())]\n                else:\n                    names += ['top', 'freq']\n                    result += [top, freq]\n\n            return pd.Series(result, index=names, name=data.name)\n\n        def describe_1d(data):\n            if is_bool_dtype(data):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_timedelta64_dtype(data):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)\n\n        if self.ndim == 1:\n            return describe_1d(self)\n        elif (include is None) and (exclude is None):\n            # when some numerics are found, keep only numerics\n            data = self.select_dtypes(include=[np.number])\n            if len(data.columns) == 0:\n                data = self\n        elif include == 'all':\n            if exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self\n        else:\n            data = self.select_dtypes(include=include, exclude=exclude)\n\n        ldesc = [describe_1d(s) for _, s in data.iteritems()]\n        # set a convenient order for rows\n        names = []\n        ldesc_indexes = sorted([x.index for x in ldesc], key=len)\n        for idxnames in ldesc_indexes:\n            for name in idxnames:\n                if name not in names:\n                    names.append(name)\n\n        d = pd.concat(ldesc, join_axes=pd.Index([names]), axis=1)\n        d.columns = data.columns.copy()\n        return d\n\n    def _check_percentile(self, q):\n        \"\"\"Validate percentiles (used by describe and quantile).\"\"\"\n\n        msg = (\"percentiles should all be in the interval [0, 1]. \"\n               \"Try {0} instead.\")\n        q = np.asarray(q)\n        if q.ndim == 0:\n            if not 0 <= q <= 1:\n                raise ValueError(msg.format(q / 100.0))\n        else:\n            if not all(0 <= qs <= 1 for qs in q):\n                raise ValueError(msg.format(q / 100.0))\n        return q\n\n    _shared_docs['pct_change'] = \"\"\"\n        Percent change over given number of periods.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change\n        fill_method : str, default 'pad'\n            How to handle NAs before computing percent changes\n        limit : int, default None\n            The number of consecutive NAs to fill before stopping\n        freq : DateOffset, timedelta, or offset alias string, optional\n            Increment to use from time series API (e.g. 'M' or BDay())\n\n        Returns\n        -------\n        chg : %(klass)s\n\n        Notes\n        -----\n\n        By default, the percentage change is calculated along the stat\n        axis: 0, or ``Index``, for ``DataFrame`` and 1, or ``minor`` for\n        ``Panel``. You can change this with the ``axis`` keyword argument.\n        \"\"\"\n\n    @Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\n    def pct_change(self, periods=1, fill_method='pad', limit=None, freq=None,\n                   **kwargs):\n        # TODO: Not sure if above is correct - need someone to confirm.\n        axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n        rs = (data.div(data.shift(periods=periods, freq=freq, axis=axis,\n                                  **kwargs)) - 1)\n        rs = rs.reindex_like(data)\n        if freq is None:\n            mask = isna(com._values_from_object(self))\n            np.putmask(rs.values, mask, np.nan)\n        return rs\n\n    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)\n\n    @classmethod\n    def _add_numeric_operations(cls):\n        \"\"\"Add the operations to the cls; evaluate the doc strings again\"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        cls.any = _make_logical_function(\n            cls, 'any', name, name2, axis_descr,\n            'Return whether any element is True over requested axis',\n            nanops.nanany)\n        cls.all = _make_logical_function(\n            cls, 'all', name, name2, axis_descr,\n            'Return whether all elements are True over requested axis',\n            nanops.nanall)\n\n        @Substitution(outname='mad',\n                      desc=\"Return the mean absolute deviation of the values \"\n                           \"for the requested axis\",\n                      name1=name, name2=name2, axis_descr=axis_descr,\n                      min_count='', examples='')\n        @Appender(_num_doc)\n        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level('mad', axis=axis, level=level,\n                                          skipna=skipna)\n\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n        cls.mad = mad\n\n        cls.sem = _make_stat_function_ddof(\n            cls, 'sem', name, name2, axis_descr,\n            \"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\",\n            nanops.nansem)\n        cls.var = _make_stat_function_ddof(\n            cls, 'var', name, name2, axis_descr,\n            \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument\",\n            nanops.nanvar)\n        cls.std = _make_stat_function_ddof(\n            cls, 'std', name, name2, axis_descr,\n            \"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument\",\n            nanops.nanstd)\n\n        @Substitution(outname='compounded',\n                      desc=\"Return the compound percentage of the values for \"\n                      \"the requested axis\", name1=name, name2=name2,\n                      axis_descr=axis_descr,\n                      min_count='', examples='')\n        @Appender(_num_doc)\n        def compound(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            return (1 + self).prod(axis=axis, skipna=skipna, level=level) - 1\n\n        cls.compound = compound\n\n        cls.cummin = _make_cum_function(\n            cls, 'cummin', name, name2, axis_descr, \"cumulative minimum\",\n            lambda y, axis: np.minimum.accumulate(y, axis), \"min\",\n            np.inf, np.nan)\n        cls.cumsum = _make_cum_function(\n            cls, 'cumsum', name, name2, axis_descr, \"cumulative sum\",\n            lambda y, axis: y.cumsum(axis), \"sum\", 0., np.nan)\n        cls.cumprod = _make_cum_function(\n            cls, 'cumprod', name, name2, axis_descr, \"cumulative product\",\n            lambda y, axis: y.cumprod(axis), \"prod\", 1., np.nan)\n        cls.cummax = _make_cum_function(\n            cls, 'cummax', name, name2, axis_descr, \"cumulative max\",\n            lambda y, axis: np.maximum.accumulate(y, axis), \"max\",\n            -np.inf, np.nan)\n\n        cls.sum = _make_min_count_stat_function(\n            cls, 'sum', name, name2, axis_descr,\n            'Return the sum of the values for the requested axis',\n            nanops.nansum, _sum_examples)\n        cls.mean = _make_stat_function(\n            cls, 'mean', name, name2, axis_descr,\n            'Return the mean of the values for the requested axis',\n            nanops.nanmean)\n        cls.skew = _make_stat_function(\n            cls, 'skew', name, name2, axis_descr,\n            'Return unbiased skew over requested axis\\nNormalized by N-1',\n            nanops.nanskew)\n        cls.kurt = _make_stat_function(\n            cls, 'kurt', name, name2, axis_descr,\n            \"Return unbiased kurtosis over requested axis using Fisher's \"\n            \"definition of\\nkurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1\\n\",\n            nanops.nankurt)\n        cls.kurtosis = cls.kurt\n        cls.prod = _make_min_count_stat_function(\n            cls, 'prod', name, name2, axis_descr,\n            'Return the product of the values for the requested axis',\n            nanops.nanprod, _prod_examples)\n        cls.product = cls.prod\n        cls.median = _make_stat_function(\n            cls, 'median', name, name2, axis_descr,\n            'Return the median of the values for the requested axis',\n            nanops.nanmedian)\n        cls.max = _make_stat_function(\n            cls, 'max', name, name2, axis_descr,\n            \"\"\"This method returns the maximum of the values in the object.\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\",\n            nanops.nanmax)\n        cls.min = _make_stat_function(\n            cls, 'min', name, name2, axis_descr,\n            \"\"\"This method returns the minimum of the values in the object.\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\",\n            nanops.nanmin)\n\n    @classmethod\n    def _add_series_only_operations(cls):\n        \"\"\"Add the series only operations to the cls; evaluate the doc\n        strings again.\n        \"\"\"\n\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        def nanptp(values, axis=0, skipna=True):\n            nmax = nanops.nanmax(values, axis, skipna)\n            nmin = nanops.nanmin(values, axis, skipna)\n            return nmax - nmin\n\n        cls.ptp = _make_stat_function(\n            cls, 'ptp', name, name2, axis_descr,\n            \"\"\"Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\"\"\",\n            nanptp)\n\n    @classmethod\n    def _add_series_or_dataframe_operations(cls):\n        \"\"\"Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.\n        \"\"\"\n\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, center=False,\n                    win_type=None, on=None, axis=0, closed=None):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window,\n                                   min_periods=min_periods,\n                                   center=center, win_type=win_type,\n                                   on=on, axis=axis, closed=closed)\n\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods,\n                                     center=center, axis=axis)\n\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n                min_periods=0, adjust=True, ignore_na=False,\n                axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                               alpha=alpha, min_periods=min_periods,\n                               adjust=adjust, ignore_na=ignore_na, axis=axis)\n\n        cls.ewm = ewm\n\n        @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n        def transform(self, func, *args, **kwargs):\n            result = self.agg(func, *args, **kwargs)\n            if is_scalar(result) or len(result) != len(self):\n                raise ValueError(\"transforms cannot produce \"\n                                 \"aggregated results\")\n\n            return result\n\n        cls.transform = transform\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    _shared_docs['valid_index'] = \"\"\"\n        Return index for %(position)s non-NA/null value.\n\n        Notes\n        --------\n        If all elements are non-NA/null, returns None.\n        Also returns None for empty %(klass)s.\n\n        Returns\n        --------\n        scalar : type of index\n        \"\"\"\n\n\ndef _doc_parms(cls):\n    \"\"\"Return a tuple of the doc parms.\"\"\"\n    axis_descr = \"{%s}\" % ', '.join([\"{0} ({1})\".format(a, i)\n                                     for i, a in enumerate(cls._AXIS_ORDERS)])\n    name = (cls._constructor_sliced.__name__\n            if cls._AXIS_LEN > 1 else 'scalar')\n    name2 = cls.__name__\n    return axis_descr, name, name2\n\n\n_num_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n%(min_count)s\\\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\n\n%(examples)s\"\"\"\n\n_num_ddof_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nddof : int, default 1\n    degrees of freedom\nnumeric_only : boolean, default None\n    Include only float, int, boolean columns. If None, will attempt to use\n    everything, then use only numeric data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_bool_doc = \"\"\"\n\n%(desc)s\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a %(name1)s\nbool_only : boolean, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\n\nReturns\n-------\n%(outname)s : %(name1)s or %(name2)s (if level specified)\\n\"\"\"\n\n_cnum_doc = \"\"\"\n\nParameters\n----------\naxis : %(axis_descr)s\nskipna : boolean, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA\n\nReturns\n-------\n%(outname)s : %(name1)s\\n\n\n\nSee also\n--------\npandas.core.window.Expanding.%(accum_func_name)s : Similar functionality\n    but ignores ``NaN`` values.\n\n\"\"\"\n\n\n_sum_examples = \"\"\"\\\nExamples\n--------\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([]).sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([]).sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan\n\"\"\"\n\n_prod_examples = \"\"\"\\\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([]).prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([]).prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan\n\"\"\"\n\n\n_min_count_stub = \"\"\"\\\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\n    .. versionadded :: 0.22.0\n\n       Added with the default being 1. This means the sum or product\n       of an all-NA or empty series is ``NaN``.\n\"\"\"\n\n\ndef _make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc,\n                                  f, examples):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, min_count=_min_count_stub,\n                  examples=examples)\n    @Appender(_num_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, numeric_only=None,\n                  min_count=0,\n                  **kwargs):\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna, min_count=min_count)\n        return self._reduce(f, name, axis=axis, skipna=skipna,\n                            numeric_only=numeric_only, min_count=min_count)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_stat_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, min_count='', examples='')\n    @Appender(_num_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, numeric_only=None,\n                  **kwargs):\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, name, axis=axis, skipna=skipna,\n                            numeric_only=numeric_only)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(self, axis=None, skipna=None, level=None, ddof=1,\n                  numeric_only=None, **kwargs):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna, ddof=ddof)\n        return self._reduce(f, name, axis=axis, numeric_only=numeric_only,\n                            skipna=skipna, ddof=ddof)\n\n    return set_function_name(stat_func, name, cls)\n\n\ndef _make_cum_function(cls, name, name1, name2, axis_descr, desc,\n                       accum_func, accum_func_name, mask_a, mask_b):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr, accum_func_name=accum_func_name)\n    @Appender(\"Return {0} over requested axis.\".format(desc) +\n              _cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        y = com._values_from_object(self).copy()\n\n        if (skipna and\n                issubclass(y.dtype.type, (np.datetime64, np.timedelta64))):\n            result = accum_func(y, axis)\n            mask = isna(self)\n            np.putmask(result, mask, tslib.iNaT)\n        elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):\n            mask = isna(self)\n            np.putmask(y, mask, mask_a)\n            result = accum_func(y, axis)\n            np.putmask(result, mask, mask_b)\n        else:\n            result = accum_func(y, axis)\n\n        d = self._construct_axes_dict()\n        d['copy'] = False\n        return self._constructor(result, **d).__finalize__(self)\n\n    return set_function_name(cum_func, name, cls)\n\n\ndef _make_logical_function(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(outname=name, desc=desc, name1=name1, name2=name2,\n                  axis_descr=axis_descr)\n    @Appender(_bool_doc)\n    def logical_func(self, axis=None, bool_only=None, skipna=None, level=None,\n                     **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\"Option bool_only is not \"\n                                          \"implemented with option level.\")\n            return self._agg_by_level(name, axis=axis, level=level,\n                                      skipna=skipna)\n        return self._reduce(f, axis=axis, skipna=skipna,\n                            numeric_only=bool_only, filter_type='bool',\n                            name=name)\n\n    return set_function_name(logical_func, name, cls)\n\n\n# install the indexes\nfor _name, _indexer in indexing.get_indexers_list():\n    NDFrame._create_indexer(_name, _indexer)\n"
    },
    {
      "filename": "pandas/core/series.py",
      "content": "\"\"\"\nData structure for 1-dimensional cross-sectional and time series data\n\"\"\"\nfrom __future__ import division\n\n# pylint: disable=E1101,E1103\n# pylint: disable=W0703,W0622,W0613,W0201\n\nimport types\nimport warnings\nfrom textwrap import dedent\n\nimport numpy as np\nimport numpy.ma as ma\n\nfrom pandas.core.accessor import CachedAccessor\nfrom pandas.core.dtypes.common import (\n    is_categorical_dtype,\n    is_bool,\n    is_integer, is_integer_dtype,\n    is_float_dtype,\n    is_extension_type,\n    is_datetime64tz_dtype,\n    is_timedelta64_dtype,\n    is_list_like,\n    is_hashable,\n    is_iterator,\n    is_dict_like,\n    is_scalar,\n    _is_unorderable_exception,\n    _ensure_platform_int,\n    pandas_dtype)\nfrom pandas.core.dtypes.generic import (\n    ABCSparseArray, ABCDataFrame, ABCIndexClass)\nfrom pandas.core.dtypes.cast import (\n    maybe_upcast, infer_dtype_from_scalar,\n    maybe_convert_platform,\n    maybe_cast_to_datetime, maybe_castable,\n    construct_1d_arraylike_from_scalar)\nfrom pandas.core.dtypes.missing import isna, notna, remove_na_arraylike\n\nfrom pandas.core.index import (Index, MultiIndex, InvalidIndexError,\n                               Float64Index, _ensure_index)\nfrom pandas.core.indexing import check_bool_indexer, maybe_convert_indices\nfrom pandas.core import generic, base\nfrom pandas.core.internals import SingleBlockManager\nfrom pandas.core.arrays.categorical import Categorical, CategoricalAccessor\nfrom pandas.core.indexes.accessors import CombinedDatetimelikeProperties\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.timedeltas import TimedeltaIndex\nfrom pandas.core.indexes.period import PeriodIndex\nfrom pandas import compat\nfrom pandas.io.formats.terminal import get_terminal_size\nfrom pandas.compat import (\n    zip, u, OrderedDict, StringIO, range, get_range_parameters)\nfrom pandas.compat.numpy import function as nv\n\nimport pandas.core.ops as ops\nimport pandas.core.algorithms as algorithms\n\nimport pandas.core.common as com\nimport pandas.core.nanops as nanops\nimport pandas.io.formats.format as fmt\nfrom pandas.util._decorators import (\n    Appender, deprecate, deprecate_kwarg, Substitution)\nfrom pandas.util._validators import validate_bool_kwarg\n\nfrom pandas._libs import index as libindex, tslib as libts, lib, iNaT\nfrom pandas.core.config import get_option\nfrom pandas.core.strings import StringMethods\n\nimport pandas.plotting._core as gfx\n\n__all__ = ['Series']\n\n_shared_doc_kwargs = dict(\n    axes='index', klass='Series', axes_single_arg=\"{0, 'index'}\",\n    inplace=\"\"\"inplace : boolean, default False\n        If True, performs operation inplace and returns None.\"\"\",\n    unique='np.ndarray', duplicated='Series',\n    optional_by='', optional_mapper='', optional_labels='', optional_axis='',\n    versionadded_to_excel='\\n    .. versionadded:: 0.20.0\\n')\n\n\n# see gh-16971\ndef remove_na(arr):\n    \"\"\"Remove null values from array like structure.\n\n    .. deprecated:: 0.21.0\n        Use s[s.notnull()] instead.\n    \"\"\"\n\n    warnings.warn(\"remove_na is deprecated and is a private \"\n                  \"function. Do not use.\", FutureWarning, stacklevel=2)\n    return remove_na_arraylike(arr)\n\n\ndef _coerce_method(converter):\n    \"\"\" install the scalar coercion methods \"\"\"\n\n    def wrapper(self):\n        if len(self) == 1:\n            return converter(self.iloc[0])\n        raise TypeError(\"cannot convert the series to \"\n                        \"{0}\".format(str(converter)))\n\n    return wrapper\n\n# ----------------------------------------------------------------------\n# Series class\n\n\nclass Series(base.IndexOpsMixin, generic.NDFrame):\n    \"\"\"\n    One-dimensional ndarray with axis labels (including time series).\n\n    Labels need not be unique but must be a hashable type. The object\n    supports both integer- and label-based indexing and provides a host of\n    methods for performing operations involving the index. Statistical\n    methods from ndarray have been overridden to automatically exclude\n    missing data (currently represented as NaN).\n\n    Operations between Series (+, -, /, *, **) align values based on their\n    associated index values-- they need not be the same length. The result\n    index will be the sorted union of the two indexes.\n\n    Parameters\n    ----------\n    data : array-like, dict, or scalar value\n        Contains data stored in Series\n    index : array-like or Index (1d)\n        Values must be hashable and have the same length as `data`.\n        Non-unique index values are allowed. Will default to\n        RangeIndex(len(data)) if not provided. If both a dict and index\n        sequence are used, the index will override the keys found in the\n        dict.\n    dtype : numpy.dtype or None\n        If None, dtype will be inferred\n    copy : boolean, default False\n        Copy input data\n    \"\"\"\n    _metadata = ['name']\n    _accessors = frozenset(['dt', 'cat', 'str'])\n    _deprecations = generic.NDFrame._deprecations | frozenset(\n        ['asobject', 'sortlevel', 'reshape', 'get_value', 'set_value',\n         'from_csv', 'valid'])\n\n    def __init__(self, data=None, index=None, dtype=None, name=None,\n                 copy=False, fastpath=False):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            if index is not None:\n                index = _ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\"initializing a Series from a \"\n                                          \"MultiIndex is not supported\")\n            elif isinstance(data, Index):\n                # need to copy to avoid aliasing issues\n                if name is None:\n                    name = data.name\n\n                data = data._to_embed(keep_tz=True, dtype=dtype)\n                copy = False\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, Series):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError('Cannot pass both SingleBlockManager '\n                                         '`data` argument and a different '\n                                         '`index` argument.  `copy` must '\n                                         'be False.')\n            elif isinstance(data, Categorical):\n                # GH12574: Allow dtype=category only, otherwise error\n                if ((dtype is not None) and\n                        not is_categorical_dtype(dtype)):\n                    raise ValueError(\"cannot specify a dtype with a \"\n                                     \"Categorical unless \"\n                                     \"dtype='category'\")\n            elif (isinstance(data, types.GeneratorType) or\n                  (compat.PY3 and isinstance(data, map))):\n                data = list(data)\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(\"{0!r} type is unordered\"\n                                \"\".format(data.__class__.__name__))\n            else:\n\n                # handle sparse passed here (and force conversion)\n                if isinstance(data, ABCSparseArray):\n                    data = data.to_dense()\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = com._default_index(len(data))\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors='ignore',\n                                       copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = _sanitize_array(data, index, dtype, copy,\n                                       raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n\n        self.name = name\n        self._set_axis(0, index, fastpath=True)\n\n    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series\n        index : Index or index-like, default None\n            index for the new Series: if None, use dict keys\n        dtype : dtype, default None\n            dtype for the new Series: if None, infer from data\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*compat.iteritems(data))\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n        s = Series(values, index=keys, dtype=dtype)\n\n        # Now we just make sure the order is respected, if any\n        if index is not None:\n            s = s.reindex(index, copy=False)\n        elif not isinstance(data, OrderedDict):\n            try:\n                s = s.sort_index()\n            except TypeError:\n                pass\n        return s._data, s.index\n\n    @classmethod\n    def from_array(cls, arr, index=None, name=None, dtype=None, copy=False,\n                   fastpath=False):\n        \"\"\"Construct Series from array.\n\n        .. deprecated :: 0.23.0\n            Use pd.Series(..) constructor instead.\n\n        \"\"\"\n        warnings.warn(\"'from_array' is deprecated and will be removed in a \"\n                      \"future version. Please use the pd.Series(..) \"\n                      \"constructor instead.\", FutureWarning, stacklevel=2)\n        return cls._from_array(arr, index=index, name=name, dtype=dtype,\n                               copy=copy, fastpath=fastpath)\n\n    @classmethod\n    def _from_array(cls, arr, index=None, name=None, dtype=None, copy=False,\n                    fastpath=False):\n        \"\"\"\n        Internal method used in DataFrame.__setitem__/__getitem__.\n        Difference with Series(..) is that this method checks if a sparse\n        array is passed.\n\n        \"\"\"\n        # return a sparse series here\n        if isinstance(arr, ABCSparseArray):\n            from pandas.core.sparse.series import SparseSeries\n            cls = SparseSeries\n\n        return cls(arr, index=index, name=name, dtype=dtype, copy=copy,\n                   fastpath=fastpath)\n\n    @property\n    def _constructor(self):\n        return Series\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n        return DataFrame\n\n    # types\n    @property\n    def _can_hold_na(self):\n        return self._data._can_hold_na\n\n    _index = None\n\n    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\" override generic, we want to set the _typ here \"\"\"\n\n        if not fastpath:\n            labels = _ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels,\n                              (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (libts.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, '_index', labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)\n\n    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, '_subtyp', 'time_series')\n        else:\n            object.__setattr__(self, '_subtyp', 'series')\n\n    def _update_inplace(self, result, **kwargs):\n        # we want to call the generic version and not the IndexOpsMixin\n        return generic.NDFrame._update_inplace(self, result, **kwargs)\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if value is not None and not is_hashable(value):\n            raise TypeError('Series.name must be a hashable type')\n        object.__setattr__(self, '_name', value)\n\n    # ndarray compatibility\n    @property\n    def dtype(self):\n        \"\"\" return the dtype object of the underlying data \"\"\"\n        return self._data.dtype\n\n    @property\n    def dtypes(self):\n        \"\"\" return the dtype object of the underlying data \"\"\"\n        return self._data.dtype\n\n    @property\n    def ftype(self):\n        \"\"\" return if the data is sparse|dense \"\"\"\n        return self._data.ftype\n\n    @property\n    def ftypes(self):\n        \"\"\" return if the data is sparse|dense \"\"\"\n        return self._data.ftype\n\n    @property\n    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like\n        depending on the dtype\n\n        Returns\n        -------\n        arr : numpy.ndarray or ndarray-like\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n\n        \"\"\"\n        return self._data.external_values()\n\n    @property\n    def _values(self):\n        \"\"\" return the internal repr of this data \"\"\"\n        return self._data.internal_values()\n\n    def _formatting_values(self):\n        \"\"\"Return the values that can be formatted (used by SeriesFormatter\n        and DataFrameFormatter)\n        \"\"\"\n        return self._data.formatting_values()\n\n    def get_values(self):\n        \"\"\" same as values (but handles sparseness conversions); is a view \"\"\"\n        return self._data.get_values()\n\n    @property\n    def asobject(self):\n        \"\"\"Return object Series which contains boxed values.\n\n        .. deprecated :: 0.23.0\n            Use ``astype(object) instead.\n\n\n        *this is an internal non-public method*\n        \"\"\"\n        warnings.warn(\"'asobject' is deprecated. Use 'astype(object)'\"\n                      \" instead\", FutureWarning, stacklevel=2)\n        return self.astype(object).values\n\n    # ops\n    def ravel(self, order='C'):\n        \"\"\"\n        Return the flattened underlying data as an ndarray\n\n        See also\n        --------\n        numpy.ndarray.ravel\n        \"\"\"\n        return self._values.ravel(order=order)\n\n    def compress(self, condition, *args, **kwargs):\n        \"\"\"\n        Return selected slices of an array along given axis as a Series\n\n        See also\n        --------\n        numpy.ndarray.compress\n        \"\"\"\n        nv.validate_compress(args, kwargs)\n        return self[condition]\n\n    def nonzero(self):\n        \"\"\"\n        Return the *integer* indices of the elements that are non-zero\n\n        This method is equivalent to calling `numpy.nonzero` on the\n        series data. For compatibility with NumPy, the return value is\n        the same (a tuple with an array of indices for each dimension),\n        but it will always be a one-item tuple because series only have\n        one dimension.\n\n        Examples\n        --------\n        >>> s = pd.Series([0, 3, 0, 4])\n        >>> s.nonzero()\n        (array([1, 3]),)\n        >>> s.iloc[s.nonzero()[0]]\n        1    3\n        3    4\n        dtype: int64\n\n        >>> s = pd.Series([0, 3, 0, 4], index=['a', 'b', 'c', 'd'])\n        # same return although index of s is different\n        >>> s.nonzero()\n        (array([1, 3]),)\n        >>> s.iloc[s.nonzero()[0]]\n        b    3\n        d    4\n        dtype: int64\n\n        See Also\n        --------\n        numpy.nonzero\n        \"\"\"\n        return self._values.nonzero()\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n        Applies the `put` method to its `values` attribute\n        if it has one.\n\n        See also\n        --------\n        numpy.ndarray.put\n        \"\"\"\n        self._values.put(*args, **kwargs)\n\n    def __len__(self):\n        \"\"\"\n        return the length of the Series\n        \"\"\"\n        return len(self._data)\n\n    def view(self, dtype=None):\n        return self._constructor(self._values.view(dtype),\n                                 index=self.index).__finalize__(self)\n\n    def __array__(self, result=None):\n        \"\"\"\n        the array interface, return my values\n        \"\"\"\n        return self.get_values()\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc\n        \"\"\"\n        return self._constructor(result, index=self.index,\n                                 copy=False).__finalize__(self)\n\n    def __array_prepare__(self, result, context=None):\n        \"\"\"\n        Gets called prior to a ufunc\n        \"\"\"\n\n        # nice error message for non-ufunc types\n        if context is not None and not isinstance(self._values, np.ndarray):\n            obj = context[1][0]\n            raise TypeError(\"{obj} with dtype {dtype} cannot perform \"\n                            \"the numpy op {op}\".format(\n                                obj=type(obj).__name__,\n                                dtype=getattr(obj, 'dtype', None),\n                                op=context[0].__name__))\n        return result\n\n    # complex\n    @property\n    def real(self):\n        return self.values.real\n\n    @real.setter\n    def real(self, v):\n        self.values.real = v\n\n    @property\n    def imag(self):\n        return self.values.imag\n\n    @imag.setter\n    def imag(self, v):\n        self.values.imag = v\n\n    # coercion\n    __float__ = _coerce_method(float)\n    __long__ = _coerce_method(int)\n    __int__ = _coerce_method(int)\n\n    def _unpickle_series_compat(self, state):\n        if isinstance(state, dict):\n            self._data = state['_data']\n            self.name = state['name']\n            self.index = self._data.index\n\n        elif isinstance(state, tuple):\n\n            # < 0.12 series pickle\n\n            nd_state, own_state = state\n\n            # recreate the ndarray\n            data = np.empty(nd_state[1], dtype=nd_state[2])\n            np.ndarray.__setstate__(data, nd_state)\n\n            # backwards compat\n            index, name = own_state[0], None\n            if len(own_state) > 1:\n                name = own_state[1]\n\n            # recreate\n            self._data = SingleBlockManager(data, index, fastpath=True)\n            self._index = index\n            self.name = name\n\n        else:\n            raise Exception(\"cannot unpickle legacy formats -> [%s]\" % state)\n\n    # indexers\n    @property\n    def axes(self):\n        \"\"\"Return a list of the row axis labels\"\"\"\n        return [self.index]\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        Return the i-th value or values in the Series by location\n\n        Parameters\n        ----------\n        i : int, slice, or sequence of integers\n\n        Returns\n        -------\n        value : scalar (int) or Series (slice, sequence)\n        \"\"\"\n        try:\n\n            # dispatch to the values if we need\n            values = self._values\n            if isinstance(values, np.ndarray):\n                return libindex.get_value_at(values, i)\n            else:\n                return values[i]\n        except IndexError:\n            raise\n        except Exception:\n            if isinstance(i, slice):\n                indexer = self.index._convert_slice_indexer(i, kind='iloc')\n                return self._get_values(indexer)\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    return self.take(i, axis=axis, convert=True)\n                else:\n                    return libindex.get_value_at(self, i)\n\n    @property\n    def _is_mixed_type(self):\n        return False\n\n    def _slice(self, slobj, axis=0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj,\n                                                  kind=kind or 'getitem')\n        return self._get_values(slobj)\n\n    def __getitem__(self, key):\n        key = com._apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if loc of the key isn't scalar here\n                    # otherwise have inline ndarray/lists\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(\n                                result, index=[key] * len(result),\n                                dtype=self.dtype).__finalize__(self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key,\n                                                             kind='getitem')\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        except Exception:\n            raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)\n\n    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._get_values(indexer)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError('Indexing a Series with DataFrame is not '\n                            'supported, use the appropriate DataFrame column')\n        else:\n            if isinstance(key, tuple):\n                try:\n                    return self._get_values_tuple(key)\n                except Exception:\n                    if len(key) == 1:\n                        key = key[0]\n                        if isinstance(key, slice):\n                            return self._get_values(key)\n                    raise\n\n            # pragma: no cover\n            if not isinstance(key, (list, np.ndarray, Series, Index)):\n                key = list(key)\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n            else:\n                key_type = lib.infer_dtype(key)\n\n            if key_type == 'integer':\n                if self.index.is_integer() or self.index.is_floating():\n                    return self.loc[key]\n                else:\n                    return self._get_values(key)\n            elif key_type == 'boolean':\n                return self._get_values(key)\n            else:\n                try:\n                    # handle the dup indexing case (GH 4246)\n                    if isinstance(key, (list, tuple)):\n                        return self.loc[key]\n\n                    return self.reindex(key)\n                except Exception:\n                    # [slice(0, 5, None)] will break if you convert to ndarray,\n                    # e.g. as requested by np.median\n                    # hack\n                    if isinstance(key[0], slice):\n                        return self._get_values(key)\n                    raise\n\n    def _get_values_tuple(self, key):\n        # mpl hackaround\n        if com._any_none(*key):\n            return self._get_values(key)\n\n        if not isinstance(self.index, MultiIndex):\n            raise ValueError('Can only tuple-index with a MultiIndex')\n\n        # If key is contained, would have returned by now\n        indexer, new_index = self.index.get_loc_level(key)\n        return self._constructor(self._values[indexer],\n                                 index=new_index).__finalize__(self)\n\n    def _get_values(self, indexer):\n        try:\n            return self._constructor(self._data.get_slice(indexer),\n                                     fastpath=True).__finalize__(self)\n        except Exception:\n            return self._values[indexer]\n\n    def __setitem__(self, key, value):\n        key = com._apply_if_callable(key, self)\n\n        def setitem(key, value):\n            try:\n                self._set_with_engine(key, value)\n                return\n            except com.SettingWithCopyError:\n                raise\n            except (KeyError, ValueError):\n                values = self._values\n                if (is_integer(key) and\n                        not self.index.inferred_type == 'integer'):\n\n                    values[key] = value\n                    return\n                elif key is Ellipsis:\n                    self[:] = value\n                    return\n                elif com.is_bool_indexer(key):\n                    pass\n                elif is_timedelta64_dtype(self.dtype):\n                    # reassign a null value to iNaT\n                    if isna(value):\n                        value = iNaT\n\n                        try:\n                            self.index._engine.set_value(self._values, key,\n                                                         value)\n                            return\n                        except TypeError:\n                            pass\n\n                self.loc[key] = value\n                return\n\n            except TypeError as e:\n                if (isinstance(key, tuple) and\n                        not isinstance(self.index, MultiIndex)):\n                    raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n                # python 3 type errors should be raised\n                if _is_unorderable_exception(e):\n                    raise IndexError(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n\n            self._set_with(key, value)\n\n        # do the setitem\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n        setitem(key, value)\n        if cacher_needs_updating:\n            self._maybe_update_cacher()\n\n    def _set_with_engine(self, key, value):\n        values = self._values\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return\n\n    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._set_values(indexer, value)\n        else:\n            if isinstance(key, tuple):\n                try:\n                    self._set_values(key, value)\n                except Exception:\n                    pass\n\n            if not isinstance(key, (list, Series, np.ndarray, Series)):\n                try:\n                    key = list(key)\n                except Exception:\n                    key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n            else:\n                key_type = lib.infer_dtype(key)\n\n            if key_type == 'integer':\n                if self.index.inferred_type == 'integer':\n                    self._set_labels(key, value)\n                else:\n                    return self._set_values(key, value)\n            elif key_type == 'boolean':\n                self._set_values(key.astype(np.bool_), value)\n            else:\n                self._set_labels(key, value)\n\n    def _set_labels(self, key, value):\n        if isinstance(key, Index):\n            key = key.values\n        else:\n            key = com._asarray_tuplesafe(key)\n        indexer = self.index.get_indexer(key)\n        mask = indexer == -1\n        if mask.any():\n            raise ValueError('%s not contained in the index' % str(key[mask]))\n        self._set_values(indexer, value)\n\n    def _set_values(self, key, value):\n        if isinstance(key, Series):\n            key = key._values\n        self._data = self._data.setitem(indexer=key, value=value)\n        self._maybe_update_cacher()\n\n    @deprecate_kwarg(old_arg_name='reps', new_arg_name='repeats')\n    def repeat(self, repeats, *args, **kwargs):\n        \"\"\"\n        Repeat elements of an Series. Refer to `numpy.ndarray.repeat`\n        for more information about the `repeats` argument.\n\n        See also\n        --------\n        numpy.ndarray.repeat\n        \"\"\"\n        nv.validate_repeat(args, kwargs)\n        new_index = self.index.repeat(repeats)\n        new_values = self._values.repeat(repeats)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    def get_value(self, label, takeable=False):\n        \"\"\"Quickly retrieve single value at passed index label\n\n        .. deprecated:: 0.21.0\n            Please use .at[] or .iat[] accessors.\n\n        Parameters\n        ----------\n        label : object\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\"get_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._get_value(label, takeable=takeable)\n\n    def _get_value(self, label, takeable=False):\n        if takeable is True:\n            return com._maybe_box_datetimelike(self._values[label])\n        return self.index.get_value(self._values, label)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, label, value, takeable=False):\n        \"\"\"Quickly set single value at passed label. If label is not contained,\n        a new object is created with the label placed at the end of the result\n        index.\n\n        .. deprecated:: 0.21.0\n            Please use .at[] or .iat[] accessors.\n\n        Parameters\n        ----------\n        label : object\n            Partial indexing with MultiIndex not allowed\n        value : object\n            Scalar value\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        series : Series\n            If label is contained, will be reference to calling Series,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\"set_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._set_value(label, value, takeable=takeable)\n\n    def _set_value(self, label, value, takeable=False):\n        try:\n            if takeable:\n                self._values[label] = value\n            else:\n                self.index._engine.set_value(self._values, label, value)\n        except KeyError:\n\n            # set using a non-recursive method\n            self.loc[label] = value\n\n        return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Analogous to the :meth:`pandas.DataFrame.reset_index` function, see\n        docstring there.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns\n        name : object, default None\n            The name of the column corresponding to the Series values\n        inplace : boolean, default False\n            Modify the Series in place (do not create a new object)\n\n        Returns\n        ----------\n        resetted : DataFrame, or Series if drop == True\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4], index=pd.Index(['a', 'b', 'c', 'd'],\n        ...                                            name = 'idx'))\n        >>> s.reset_index()\n           index  0\n        0      0  1\n        1      1  2\n        2      2  3\n        3      3  4\n\n        >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz', 'foo',\n        ...                     'foo', 'qux', 'qux']),\n        ...           np.array(['one', 'two', 'one', 'two', 'one', 'two',\n        ...                     'one', 'two'])]\n        >>> s2 = pd.Series(\n        ...     np.random.randn(8),\n        ...     index=pd.MultiIndex.from_arrays(arrays,\n        ...                                     names=['a', 'b']))\n        >>> s2.reset_index(level='a')\n               a         0\n        b\n        one  bar -0.286320\n        two  bar -0.587934\n        one  baz  0.710491\n        two  baz -1.429006\n        one  foo  0.790700\n        two  foo  0.824863\n        one  qux -0.718963\n        two  qux -0.055028\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if drop:\n            new_index = com._default_index(len(self))\n            if level is not None and isinstance(self.index, MultiIndex):\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < len(self.index.levels):\n                    new_index = self.index.droplevel(level)\n\n            if inplace:\n                self.index = new_index\n                # set name if it was passed, otherwise, keep the previous name\n                self.name = name or self.name\n            else:\n                return self._constructor(self._values.copy(),\n                                         index=new_index).__finalize__(self)\n        elif inplace:\n            raise TypeError('Cannot reset_index inplace on a Series '\n                            'to create a DataFrame')\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(\"\"))\n        width, height = get_terminal_size()\n        max_rows = (height if get_option(\"display.max_rows\") == 0 else\n                    get_option(\"display.max_rows\"))\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        self.to_string(buf=buf, name=self.name, dtype=self.dtype,\n                       max_rows=max_rows, length=show_dimensions)\n        result = buf.getvalue()\n\n        return result\n\n    def to_string(self, buf=None, na_rep='NaN', float_format=None, header=True,\n                  index=True, length=False, dtype=False, name=False,\n                  max_rows=None):\n        \"\"\"\n        Render a string representation of the Series\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            buffer to write to\n        na_rep : string, optional\n            string representation of NAN to use, default 'NaN'\n        float_format : one-parameter function, optional\n            formatter function to apply to columns' elements if they are floats\n            default None\n        header: boolean, default True\n            Add the Series header (index name)\n        index : bool, optional\n            Add index (row) labels, default True\n        length : boolean, default False\n            Add the Series length\n        dtype : boolean, default False\n            Add the Series dtype\n        name : boolean, default False\n            Add the Series name if not None\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n\n        Returns\n        -------\n        formatted : string (if not buffer passed)\n        \"\"\"\n\n        formatter = fmt.SeriesFormatter(self, name=name, length=length,\n                                        header=header, index=index,\n                                        dtype=dtype, na_rep=na_rep,\n                                        float_format=float_format,\n                                        max_rows=max_rows)\n        result = formatter.to_string()\n\n        # catch contract violations\n        if not isinstance(result, compat.text_type):\n            raise AssertionError(\"result must be of type unicode, type\"\n                                 \" of result is {0!r}\"\n                                 \"\".format(result.__class__.__name__))\n\n        if buf is None:\n            return result\n        else:\n            try:\n                buf.write(result)\n            except AttributeError:\n                with open(buf, 'w') as f:\n                    f.write(result)\n\n    def iteritems(self):\n        \"\"\"\n        Lazily iterate over (index, value) tuples\n        \"\"\"\n        return zip(iter(self.index), iter(self))\n\n    items = iteritems\n\n    # ----------------------------------------------------------------------\n    # Misc public methods\n\n    def keys(self):\n        \"\"\"Alias for index\"\"\"\n        return self.index\n\n    def to_dict(self, into=dict):\n        \"\"\"\n        Convert Series to {label -> value} dict or dict-like object.\n\n        Parameters\n        ----------\n        into : class, default dict\n            The collections.Mapping subclass to use as the return\n            object. Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        value_dict : collections.Mapping\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.to_dict()\n        {0: 1, 1: 2, 2: 3, 3: 4}\n        >>> from collections import OrderedDict, defaultdict\n        >>> s.to_dict(OrderedDict)\n        OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n        >>> dd = defaultdict(list)\n        >>> s.to_dict(dd)\n        defaultdict(<type 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})\n        \"\"\"\n        # GH16122\n        into_c = com.standardize_mapping(into)\n        return into_c(compat.iteritems(self))\n\n    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        data_frame : DataFrame\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df\n\n    def to_sparse(self, kind='block', fill_value=None):\n        \"\"\"\n        Convert Series to SparseSeries\n\n        Parameters\n        ----------\n        kind : {'block', 'integer'}\n        fill_value : float, defaults to NaN (missing)\n\n        Returns\n        -------\n        sp : SparseSeries\n        \"\"\"\n        from pandas.core.sparse.series import SparseSeries\n        return SparseSeries(self, kind=kind,\n                            fill_value=fill_value).__finalize__(self)\n\n    def _set_name(self, name, inplace=False):\n        \"\"\"\n        Set the Series name.\n\n        Parameters\n        ----------\n        name : str\n        inplace : bool\n            whether to modify `self` directly or return a copy\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        ser = self if inplace else self.copy()\n        ser.name = name\n        return ser\n\n    # ----------------------------------------------------------------------\n    # Statistics, overridden ndarray methods\n\n    # TODO: integrate bottleneck\n\n    def count(self, level=None):\n        \"\"\"\n        Return number of non-NA/null observations in the Series\n\n        Parameters\n        ----------\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a smaller Series\n\n        Returns\n        -------\n        nobs : int or Series (if level specified)\n        \"\"\"\n        from pandas.core.index import _get_na_value\n\n        if level is None:\n            return notna(com._values_from_object(self)).sum()\n\n        if isinstance(level, compat.string_types):\n            level = self.index._get_level_number(level)\n\n        lev = self.index.levels[level]\n        lab = np.array(self.index.labels[level], subok=False, copy=True)\n\n        mask = lab == -1\n        if mask.any():\n            lab[mask] = cnt = len(lev)\n            lev = lev.insert(cnt, _get_na_value(lev.dtype.type))\n\n        obs = lab[notna(self.values)]\n        out = np.bincount(obs, minlength=len(lev) or None)\n        return self._constructor(out, index=lev,\n                                 dtype='int64').__finalize__(self)\n\n    def mode(self):\n        \"\"\"Return the mode(s) of the dataset.\n\n        Always returns Series even if only one value is returned.\n\n        Returns\n        -------\n        modes : Series (sorted)\n        \"\"\"\n        # TODO: Add option for bins like value_counts()\n        return algorithms.mode(self)\n\n    @Appender(base._shared_docs['unique'] % _shared_doc_kwargs)\n    def unique(self):\n        result = super(Series, self).unique()\n\n        if is_datetime64tz_dtype(self.dtype):\n            # we are special casing datetime64tz_dtype\n            # to return an object array of tz-aware Timestamps\n\n            # TODO: it must return DatetimeArray with tz in pandas 2.0\n            result = result.astype(object).values\n\n        return result\n\n    @Appender(base._shared_docs['drop_duplicates'] % _shared_doc_kwargs)\n    def drop_duplicates(self, keep='first', inplace=False):\n        return super(Series, self).drop_duplicates(keep=keep, inplace=inplace)\n\n    @Appender(base._shared_docs['duplicated'] % _shared_doc_kwargs)\n    def duplicated(self, keep='first'):\n        return super(Series, self).duplicated(keep=keep)\n\n    def idxmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Index *label* of the first occurrence of minimum of values.\n\n        Parameters\n        ----------\n        skipna : boolean, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the Series is empty\n\n        Returns\n        -------\n        idxmin : Index of minimum of values\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmin``. This method\n        returns the label of the minimum, while ``ndarray.argmin`` returns\n        the position. To get the position, use ``series.values.argmin()``.\n\n        See Also\n        --------\n        DataFrame.idxmin\n        numpy.ndarray.argmin\n        \"\"\"\n        skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmin(com._values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n\n    def idxmax(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Index *label* of the first occurrence of maximum of values.\n\n        Parameters\n        ----------\n        skipna : boolean, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the Series is empty\n\n        Returns\n        -------\n        idxmax : Index of maximum of values\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmax``. This method\n        returns the label of the maximum, while ``ndarray.argmax`` returns\n        the position. To get the position, use ``series.values.argmax()``.\n\n        See Also\n        --------\n        DataFrame.idxmax\n        numpy.ndarray.argmax\n        \"\"\"\n        skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmax(com._values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n\n    # ndarray compat\n    argmin = deprecate('argmin', idxmin, '0.21.0',\n                       msg=\"'argmin' is deprecated, use 'idxmin' instead. \"\n                           \"The behavior of 'argmin' will be corrected to \"\n                           \"return the positional minimum in the future. \"\n                           \"Use 'series.values.argmin' to get the position of \"\n                           \"the minimum now.\")\n    argmax = deprecate('argmax', idxmax, '0.21.0',\n                       msg=\"'argmax' is deprecated, use 'idxmax' instead. \"\n                           \"The behavior of 'argmax' will be corrected to \"\n                           \"return the positional maximum in the future. \"\n                           \"Use 'series.values.argmax' to get the position of \"\n                           \"the maximum now.\")\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round each value in a Series to the given number of decimals.\n\n        Parameters\n        ----------\n        decimals : int\n            Number of decimal places to round to (default: 0).\n            If decimals is negative, it specifies the number of\n            positions to the left of the decimal point.\n\n        Returns\n        -------\n        Series object\n\n        See Also\n        --------\n        numpy.around\n        DataFrame.round\n\n        \"\"\"\n        nv.validate_round(args, kwargs)\n        result = com._values_from_object(self).round(decimals)\n        result = self._constructor(result, index=self.index).__finalize__(self)\n\n        return result\n\n    def quantile(self, q=0.5, interpolation='linear'):\n        \"\"\"\n        Return value at the given quantile, a la numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n                * linear: `i + (j - i) * fraction`, where `fraction` is the\n                  fractional part of the index surrounded by `i` and `j`.\n                * lower: `i`.\n                * higher: `j`.\n                * nearest: `i` or `j` whichever is nearest.\n                * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantile : float or Series\n            if ``q`` is an array, a Series will be returned where the\n            index is ``q`` and the values are the quantiles.\n\n        Examples\n        --------\n        >>> s = Series([1, 2, 3, 4])\n        >>> s.quantile(.5)\n        2.5\n        >>> s.quantile([.25, .5, .75])\n        0.25    1.75\n        0.50    2.50\n        0.75    3.25\n        dtype: float64\n\n        \"\"\"\n\n        self._check_percentile(q)\n\n        result = self._data.quantile(qs=q, interpolation=interpolation)\n\n        if is_list_like(q):\n            return self._constructor(result,\n                                     index=Float64Index(q),\n                                     name=self.name)\n        else:\n            # scalar\n            return result\n\n    def corr(self, other, method='pearson', min_periods=None):\n        \"\"\"\n        Compute correlation with `other` Series, excluding missing values\n\n        Parameters\n        ----------\n        other : Series\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result\n\n\n        Returns\n        -------\n        correlation : float\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        return nanops.nancorr(this.values, other.values, method=method,\n                              min_periods=min_periods)\n\n    def cov(self, other, min_periods=None):\n        \"\"\"\n        Compute covariance with Series, excluding missing values\n\n        Parameters\n        ----------\n        other : Series\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result\n\n        Returns\n        -------\n        covariance : float\n\n        Normalized by N-1 (unbiased estimator).\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        return nanops.nancov(this.values, other.values,\n                             min_periods=min_periods)\n\n    def diff(self, periods=1):\n        \"\"\"\n        1st discrete difference of object\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming difference\n\n        Returns\n        -------\n        diffed : Series\n        \"\"\"\n        result = algorithms.diff(com._values_from_object(self), periods)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def autocorr(self, lag=1):\n        \"\"\"\n        Lag-N autocorrelation\n\n        Parameters\n        ----------\n        lag : int, default 1\n            Number of lags to apply before performing autocorrelation.\n\n        Returns\n        -------\n        autocorr : float\n        \"\"\"\n        return self.corr(self.shift(lag))\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or inner-product with Series\n        objects\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n\n        Returns\n        -------\n        dot_product : scalar or Series\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        if isinstance(other, (Series, DataFrame)):\n            common = self.index.union(other.index)\n            if (len(common) > len(self.index) or\n                    len(common) > len(other.index)):\n                raise ValueError('matrices are not aligned')\n\n            left = self.reindex(index=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[0] != rvals.shape[0]:\n                raise Exception('Dot product shape mismatch, %s vs %s' %\n                                (lvals.shape, rvals.shape))\n\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals),\n                                     index=other.columns).__finalize__(self)\n        elif isinstance(other, Series):\n            return np.dot(lvals, rvals)\n        elif isinstance(rvals, np.ndarray):\n            return np.dot(lvals, rvals)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    @Substitution(klass='Series')\n    @Appender(base._shared_docs['searchsorted'])\n    @deprecate_kwarg(old_arg_name='v', new_arg_name='value')\n    def searchsorted(self, value, side='left', sorter=None):\n        if sorter is not None:\n            sorter = _ensure_platform_int(sorter)\n        return self._values.searchsorted(Series(value)._values,\n                                         side=side, sorter=sorter)\n\n    # -------------------------------------------------------------------\n    # Combination\n\n    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n\n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n\n            .. versionadded:: 0.19.0\n\n        verify_integrity : boolean, default False\n            If True, raise Exception on creating index with duplicates\n\n        Notes\n        -----\n        Iteratively appending to a Series can be more computationally intensive\n        than a single concatenate. A better solution is to append values to a\n        list and then concatenate the list with the original Series all at\n        once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Returns\n        -------\n        appended : Series\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3,4,5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `ignore_index` set to True:\n\n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `verify_integrity` set to True:\n\n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n\n\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(to_append, (list, tuple)):\n            to_concat = [self] + to_append\n        else:\n            to_concat = [self, to_append]\n        return concat(to_concat, ignore_index=ignore_index,\n                      verify_integrity=verify_integrity)\n\n    def _binop(self, other, func, level=None, fill_value=None):\n        \"\"\"\n        Perform generic binary operation with optional fill value\n\n        Parameters\n        ----------\n        other : Series\n        func : binary operator\n        fill_value : float or object\n            Value to substitute for NA/null values. If both Series are NA in a\n            location, the result will be NA regardless of the passed fill value\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n\n        Returns\n        -------\n        combined : Series\n        \"\"\"\n        if not isinstance(other, Series):\n            raise AssertionError('Other operand must be Series')\n\n        new_index = self.index\n        this = self\n\n        if not self.index.equals(other.index):\n            this, other = self.align(other, level=level, join='outer',\n                                     copy=False)\n            new_index = this.index\n\n        this_vals = this.values\n        other_vals = other.values\n\n        if fill_value is not None:\n            this_mask = isna(this_vals)\n            other_mask = isna(other_vals)\n            this_vals = this_vals.copy()\n            other_vals = other_vals.copy()\n\n            # one but not both\n            mask = this_mask ^ other_mask\n            this_vals[this_mask & mask] = fill_value\n            other_vals[other_mask & mask] = fill_value\n\n        with np.errstate(all='ignore'):\n            result = func(this_vals, other_vals)\n        name = com._maybe_match_name(self, other)\n        result = self._constructor(result, index=new_index, name=name)\n        result = result.__finalize__(self)\n        if name is None:\n            # When name is None, __finalize__ overwrites current name\n            result.name = None\n        return result\n\n    def combine(self, other, func, fill_value=np.nan):\n        \"\"\"\n        Perform elementwise binary operation on two Series using given function\n        with optional fill value when an index is missing from one Series or\n        the other\n\n        Parameters\n        ----------\n        other : Series or scalar value\n        func : function\n            Function that takes two scalars as inputs and return a scalar\n        fill_value : scalar value\n\n        Returns\n        -------\n        result : Series\n\n        Examples\n        --------\n        >>> s1 = Series([1, 2])\n        >>> s2 = Series([0, 3])\n        >>> s1.combine(s2, lambda x1, x2: x1 if x1 < x2 else x2)\n        0    0\n        1    2\n        dtype: int64\n\n        See Also\n        --------\n        Series.combine_first : Combine Series values, choosing the calling\n            Series's values first\n        \"\"\"\n        if isinstance(other, Series):\n            new_index = self.index.union(other.index)\n            new_name = com._maybe_match_name(self, other)\n            new_values = np.empty(len(new_index), dtype=self.dtype)\n            for i, idx in enumerate(new_index):\n                lv = self.get(idx, fill_value)\n                rv = other.get(idx, fill_value)\n                with np.errstate(all='ignore'):\n                    new_values[i] = func(lv, rv)\n        else:\n            new_index = self.index\n            with np.errstate(all='ignore'):\n                new_values = func(self._values, other)\n            new_name = self.name\n        return self._constructor(new_values, index=new_index, name=new_name)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine Series values, choosing the calling Series's values\n        first. Result index will be the union of the two indexes\n\n        Parameters\n        ----------\n        other : Series\n\n        Returns\n        -------\n        combined : Series\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, np.nan])\n        >>> s2 = pd.Series([3, 4])\n        >>> s1.combine_first(s2)\n        0    1.0\n        1    4.0\n        dtype: float64\n\n        See Also\n        --------\n        Series.combine : Perform elementwise operation on two Series\n            using a given function\n        \"\"\"\n        new_index = self.index.union(other.index)\n        this = self.reindex(new_index, copy=False)\n        other = other.reindex(new_index, copy=False)\n        # TODO: do we need name?\n        name = com._maybe_match_name(self, other)  # noqa\n        rs_vals = com._where_compat(isna(this), other._values, this._values)\n        return self._constructor(rs_vals, index=new_index).__finalize__(self)\n\n    def update(self, other):\n        \"\"\"\n        Modify Series in place using non-NA values from passed\n        Series. Aligns on index\n\n        Parameters\n        ----------\n        other : Series\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, 5, 6]))\n        >>> s\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s = pd.Series(['a', 'b', 'c'])\n        >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n        >>> s\n        0    d\n        1    b\n        2    e\n        dtype: object\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, 5, 6, 7, 8]))\n        >>> s\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        If ``other`` contains NaNs the corresponding values are not updated\n        in the original Series.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, np.nan, 6]))\n        >>> s\n        0    4\n        1    2\n        2    6\n        dtype: int64\n\n        \"\"\"\n        other = other.reindex_like(self)\n        mask = notna(other)\n\n        self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n        self._maybe_update_cacher()\n\n    # ----------------------------------------------------------------------\n    # Reindexing, sorting\n\n    @Appender(generic._shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n\n        # GH 5856/5853\n        if inplace and self._is_cached:\n            raise ValueError(\"This Series is a view of some other array, to \"\n                             \"sort in-place you must create a copy\")\n\n        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind='quicksort')\n\n        arr = self._values\n        sortedIdx = np.empty(len(self), dtype=np.int32)\n\n        bad = isna(arr)\n\n        good = ~bad\n        idx = com._default_index(len(self))\n\n        argsorted = _try_kind_sort(arr[good])\n\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError('Length of ascending (%d) must be 1 '\n                                 'for Series' % (len(ascending)))\n            ascending = ascending[0]\n\n        if not is_bool(ascending):\n            raise ValueError('ascending must be boolean')\n\n        if not ascending:\n            argsorted = argsorted[::-1]\n\n        if na_position == 'last':\n            n = good.sum()\n            sortedIdx[:n] = idx[good][argsorted]\n            sortedIdx[n:] = idx[bad]\n        elif na_position == 'first':\n            n = bad.sum()\n            sortedIdx[n:] = idx[good][argsorted]\n            sortedIdx[:n] = idx[bad]\n        else:\n            raise ValueError('invalid na_position: {!r}'.format(na_position))\n\n        result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    @Appender(generic._shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True):\n\n        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        index = self.index\n\n        if level:\n            new_index, indexer = index.sortlevel(level, ascending=ascending,\n                                                 sort_remaining=sort_remaining)\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            labels = index._sort_levels_monotonic()\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                                      orders=ascending,\n                                      na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if ((ascending and index.is_monotonic_increasing) or\n                    (not ascending and index.is_monotonic_decreasing)):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(index, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        indexer = _ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    def argsort(self, axis=0, kind='quicksort', order=None):\n        \"\"\"\n        Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,\n        and places the result in the same locations as the non-NA values\n\n        Parameters\n        ----------\n        axis : int (can only be zero)\n        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See np.sort for more\n            information. 'mergesort' is the only stable algorithm\n        order : ignored\n\n        Returns\n        -------\n        argsorted : Series, with -1 indicated where nan values are present\n\n        See also\n        --------\n        numpy.ndarray.argsort\n        \"\"\"\n        values = self._values\n        mask = isna(values)\n\n        if mask.any():\n            result = Series(-1, index=self.index, name=self.name,\n                            dtype='int64')\n            notmask = ~mask\n            result[notmask] = np.argsort(values[notmask], kind=kind)\n            return self._constructor(result,\n                                     index=self.index).__finalize__(self)\n        else:\n            return self._constructor(\n                np.argsort(values, kind=kind), index=self.index,\n                dtype='int64').__finalize__(self)\n\n    def nlargest(self, n=5, keep='first'):\n        \"\"\"\n        Return the largest `n` elements.\n\n        Parameters\n        ----------\n        n : int\n            Return this many descending sorted values\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        top_n : Series\n            The n largest values in the Series, in sorted order\n\n        Notes\n        -----\n        Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n        relative to the size of the ``Series`` object.\n\n        See Also\n        --------\n        Series.nsmallest\n\n        Examples\n        --------\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> s = pd.Series(np.random.randn(10**6))\n        >>> s.nlargest(10)  # only sorts up to the N requested\n        219921    4.644710\n        82124     4.608745\n        421689    4.564644\n        425277    4.447014\n        718691    4.414137\n        43154     4.403520\n        283187    4.313922\n        595519    4.273635\n        503969    4.250236\n        121637    4.240952\n        dtype: float64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nlargest()\n\n    def nsmallest(self, n=5, keep='first'):\n        \"\"\"\n        Return the smallest `n` elements.\n\n        Parameters\n        ----------\n        n : int\n            Return this many ascending sorted values\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        bottom_n : Series\n            The n smallest values in the Series, in sorted order\n\n        Notes\n        -----\n        Faster than ``.sort_values().head(n)`` for small `n` relative to\n        the size of the ``Series`` object.\n\n        See Also\n        --------\n        Series.nlargest\n\n        Examples\n        --------\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> s = pd.Series(np.random.randn(10**6))\n        >>> s.nsmallest(10)  # only sorts up to the N requested\n        288532   -4.954580\n        732345   -4.835960\n        64803    -4.812550\n        446457   -4.609998\n        501225   -4.483945\n        669476   -4.472935\n        973615   -4.401699\n        621279   -4.355126\n        773916   -4.347355\n        359919   -4.331927\n        dtype: float64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nsmallest()\n\n    def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n        \"\"\"Sort Series with MultiIndex by chosen level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order),\n\n        .. deprecated:: 0.20.0\n            Use :meth:`Series.sort_index`\n\n        Parameters\n        ----------\n        level : int or level name, default None\n        ascending : bool, default True\n\n        Returns\n        -------\n        sorted : Series\n\n        See Also\n        --------\n        Series.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn(\"sortlevel is deprecated, use sort_index(level=...)\",\n                      FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, ascending=ascending,\n                               sort_remaining=sort_remaining)\n\n    def swaplevel(self, i=-2, j=-1, copy=True):\n        \"\"\"\n        Swap levels i and j in a MultiIndex\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : Series\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        new_index = self.index.swaplevel(i, j)\n        return self._constructor(self._values, index=new_index,\n                                 copy=copy).__finalize__(self)\n\n    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange index levels using input order. May not drop or duplicate\n        levels\n\n        Parameters\n        ----------\n        order : list of int representing new level order.\n               (reference level by number or key)\n        axis : where to reorder levels\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        if not isinstance(self.index, MultiIndex):  # pragma: no cover\n            raise Exception('Can only reorder levels on a hierarchical axis.')\n\n        result = self.copy()\n        result.index = result.index.reorder_levels(order)\n        return result\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default last level\n            Level(s) to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4],\n        ...     index=pd.MultiIndex.from_product([['one', 'two'], ['a', 'b']]))\n        >>> s\n        one  a    1\n             b    2\n        two  a    3\n             b    4\n        dtype: int64\n\n        >>> s.unstack(level=-1)\n             a  b\n        one  1  2\n        two  3  4\n\n        >>> s.unstack(level=0)\n           one  two\n        a    1    3\n        b    2    4\n\n        Returns\n        -------\n        unstacked : DataFrame\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n\n    # ----------------------------------------------------------------------\n    # function application\n\n    def map(self, arg, na_action=None):\n        \"\"\"\n        Map values of Series using input correspondence (which can be\n        a dict, Series, or function)\n\n        Parameters\n        ----------\n        arg : function, dict, or Series\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        y : Series\n            same index as caller\n\n        Examples\n        --------\n\n        Map inputs to outputs (both of type `Series`)\n\n        >>> x = pd.Series([1,2,3], index=['one', 'two', 'three'])\n        >>> x\n        one      1\n        two      2\n        three    3\n        dtype: int64\n\n        >>> y = pd.Series(['foo', 'bar', 'baz'], index=[1,2,3])\n        >>> y\n        1    foo\n        2    bar\n        3    baz\n\n        >>> x.map(y)\n        one   foo\n        two   bar\n        three baz\n\n        If `arg` is a dictionary, return a new Series with values converted\n        according to the dictionary's mapping:\n\n        >>> z = {1: 'A', 2: 'B', 3: 'C'}\n\n        >>> x.map(z)\n        one   A\n        two   B\n        three C\n\n        Use na_action to control whether NA values are affected by the mapping\n        function.\n\n        >>> s = pd.Series([1, 2, 3, np.nan])\n\n        >>> s2 = s.map('this is a string {}'.format, na_action=None)\n        0    this is a string 1.0\n        1    this is a string 2.0\n        2    this is a string 3.0\n        3    this is a string nan\n        dtype: object\n\n        >>> s3 = s.map('this is a string {}'.format, na_action='ignore')\n        0    this is a string 1.0\n        1    this is a string 2.0\n        2    this is a string 3.0\n        3                     NaN\n        dtype: object\n\n        See Also\n        --------\n        Series.apply: For applying more complex functions on a Series\n        DataFrame.apply: Apply a function row-/column-wise\n        DataFrame.applymap: Apply a function elementwise on a whole DataFrame\n\n        Notes\n        -----\n        When `arg` is a dictionary, values in Series that are not in the\n        dictionary (as keys) are converted to ``NaN``. However, if the\n        dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n        provides a method for default values), then this default is used\n        rather than ``NaN``:\n\n        >>> from collections import Counter\n        >>> counter = Counter()\n        >>> counter['bar'] += 1\n        >>> y.map(counter)\n        1    0\n        2    1\n        3    0\n        dtype: int64\n        \"\"\"\n        new_values = super(Series, self)._map_values(\n            arg, na_action=na_action)\n        return self._constructor(new_values,\n                                 index=self.index).__finalize__(self)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        return self\n\n    _agg_doc = dedent(\"\"\"\n    Examples\n    --------\n\n    >>> s = Series(np.random.randn(10))\n\n    >>> s.agg('min')\n    -1.3018049988556679\n\n    >>> s.agg(['min', 'max'])\n    min   -1.301805\n    max    1.127688\n    dtype: float64\n\n    See also\n    --------\n    pandas.Series.apply\n    pandas.Series.transform\n\n    \"\"\")\n\n    @Appender(_agg_doc)\n    @Appender(generic._shared_docs['aggregate'] % dict(\n        versionadded='.. versionadded:: 0.20.0',\n        **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result, how = self._aggregate(func, *args, **kwargs)\n        if result is None:\n\n            # we can be called from an inner function which\n            # passes this meta-data\n            kwargs.pop('_axis', None)\n            kwargs.pop('_level', None)\n\n            # try a regular apply, this evaluates lambdas\n            # row-by-row; however if the lambda is expected a Series\n            # expression, e.g.: lambda x: x-x.quantile(0.25)\n            # this will fail, so we can try a vectorized evaluation\n\n            # we cannot FIRST try the vectorized evaluation, because\n            # then .agg and .apply would have different semantics if the\n            # operation is actually defined on the Series, e.g. str\n            try:\n                result = self.apply(func, *args, **kwargs)\n            except (ValueError, AttributeError, TypeError):\n                result = func(self, *args, **kwargs)\n\n        return result\n\n    agg = aggregate\n\n    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series. Can be ufunc (a NumPy function\n        that applies to the entire Series) or a Python function that only works\n        on single values\n\n        Parameters\n        ----------\n        func : function\n        convert_dtype : boolean, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object\n        args : tuple\n            Positional arguments to pass to function in addition to the value\n        Additional keyword arguments will be passed as keywords to the function\n\n        Returns\n        -------\n        y : Series or DataFrame if func returns a Series\n\n        See also\n        --------\n        Series.map: For element-wise operations\n        Series.agg: only perform aggregating type operations\n        Series.transform: only perform transformating type operations\n\n        Examples\n        --------\n\n        Create a series with typical summer temperatures for each city.\n\n        >>> import pandas as pd\n        >>> import numpy as np\n        >>> series = pd.Series([20, 21, 12], index=['London',\n        ... 'New York','Helsinki'])\n        >>> series\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x**2\n        >>> series.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> series.apply(lambda x: x**2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x-custom_value\n\n        >>> series.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x+=kwargs[month]\n        ...         return x\n\n        >>> series.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> series.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n\n\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype,\n                                     index=self.index).__finalize__(self)\n\n        # dispatch to agg\n        if isinstance(func, (list, dict)):\n            return self.aggregate(func, *args, **kwds)\n\n        # if we are a string, try to dispatch\n        if isinstance(func, compat.string_types):\n            return self._try_aggregate_string_function(func, *args, **kwds)\n\n        # handle ufuncs and lambdas\n        if kwds or args and not isinstance(func, np.ufunc):\n            f = lambda x: func(x, *args, **kwds)\n        else:\n            f = func\n\n        with np.errstate(all='ignore'):\n            if isinstance(f, np.ufunc):\n                return f(self)\n\n            # row-wise access\n            if is_extension_type(self.dtype):\n                mapped = self._values.map(f)\n            else:\n                values = self.astype(object).values\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n        if len(mapped) and isinstance(mapped[0], Series):\n            from pandas.core.frame import DataFrame\n            return DataFrame(mapped.tolist(), index=self.index)\n        else:\n            return self._constructor(mapped,\n                                     index=self.index).__finalize__(self)\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n                filter_type=None, **kwds):\n        \"\"\"\n        perform a reduction operation\n\n        if we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object\n\n        \"\"\"\n        delegate = self._values\n        if isinstance(delegate, np.ndarray):\n            # Validate that 'axis' is consistent with Series's single axis.\n            self._get_axis_number(axis)\n            if numeric_only:\n                raise NotImplementedError('Series.{0} does not implement '\n                                          'numeric_only.'.format(name))\n            with np.errstate(all='ignore'):\n                return op(delegate, skipna=skipna, **kwds)\n\n        return delegate._reduce(op=op, name=name, axis=axis, skipna=skipna,\n                                numeric_only=numeric_only,\n                                filter_type=filter_type, **kwds)\n\n    def _reindex_indexer(self, new_index, indexer, copy):\n        if indexer is None:\n            if copy:\n                return self.copy()\n            return self\n\n        # be subclass-friendly\n        new_values = algorithms.take_1d(self.get_values(), indexer)\n        return self._constructor(new_values, index=new_index)\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\" check if we do need a multi reindex; this is for compat with\n        higher dims\n        \"\"\"\n        return False\n\n    @Appender(generic._shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        return super(Series, self).align(other, join=join, axis=axis,\n                                         level=level, copy=copy,\n                                         fill_value=fill_value, method=method,\n                                         limit=limit, fill_axis=fill_axis,\n                                         broadcast_axis=broadcast_axis)\n\n    def rename(self, index=None, **kwargs):\n        \"\"\"Alter Series index labels or name\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        Alternatively, change ``Series.name`` with a scalar value.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        index : scalar, hashable sequence, dict-like or function, optional\n            dict-like or functions are transformations to apply to\n            the index.\n            Scalar or hashable sequence-like will alter the ``Series.name``\n            attribute.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : Series (new object)\n\n        See Also\n        --------\n        pandas.Series.rename_axis\n\n        Examples\n        --------\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        \"\"\"\n        kwargs['inplace'] = validate_bool_kwarg(kwargs.get('inplace', False),\n                                                'inplace')\n\n        non_mapping = is_scalar(index) or (is_list_like(index) and\n                                           not is_dict_like(index))\n        if non_mapping:\n            return self._set_name(index, inplace=kwargs.get('inplace'))\n        return super(Series, self).rename(index=index, **kwargs)\n\n    @Appender(generic._shared_docs['reindex'] % _shared_doc_kwargs)\n    def reindex(self, index=None, **kwargs):\n        return super(Series, self).reindex(index=index, **kwargs)\n\n    @Appender(generic._shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None, **kwargs):\n        return super(Series, self).fillna(value=value, method=method,\n                                          axis=axis, inplace=inplace,\n                                          limit=limit, downcast=downcast,\n                                          **kwargs)\n\n    @Appender(generic._shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        return super(Series, self).replace(to_replace=to_replace, value=value,\n                                           inplace=inplace, limit=limit,\n                                           regex=regex, method=method,\n                                           axis=axis)\n\n    @Appender(generic._shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(Series, self).shift(periods=periods, freq=freq, axis=axis)\n\n    def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\"Conform Series to new index with optional filling logic.\n\n        .. deprecated:: 0.21.0\n            Use ``Series.reindex`` instead.\n        \"\"\"\n        # for compatibility with higher dims\n        if axis != 0:\n            raise ValueError(\"cannot reindex series on non-zero axis!\")\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self.reindex(index=labels, **kwargs)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"Memory usage of the Series\n\n        Parameters\n        ----------\n        index : bool\n            Specifies whether to include memory usage of Series index\n        deep : bool\n            Introspect the data deeply, interrogate\n            `object` dtypes for system-level memory consumption\n\n        Returns\n        -------\n        scalar bytes of memory consumed\n\n        Notes\n        -----\n        Memory usage does not include memory consumed by elements that\n        are not components of the array if deep=False\n\n        See Also\n        --------\n        numpy.ndarray.nbytes\n        \"\"\"\n        v = super(Series, self).memory_usage(deep=deep)\n        if index:\n            v += self.index.memory_usage(deep=deep)\n        return v\n\n    @Appender(generic._shared_docs['_take'])\n    def _take(self, indices, axis=0, convert=True, is_copy=False):\n        if convert:\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n\n        indices = _ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n        new_values = self._values.take(indices)\n\n        result = (self._constructor(new_values, index=new_index,\n                                    fastpath=True).__finalize__(self))\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result\n\n    def isin(self, values):\n        \"\"\"\n        Return a boolean :class:`~pandas.Series` showing whether each element\n        in the :class:`~pandas.Series` is exactly contained in the passed\n        sequence of ``values``.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            ``list`` of one element.\n\n            .. versionadded:: 0.18.1\n\n            Support for values as a set\n\n        Returns\n        -------\n        isin : Series (bool dtype)\n\n        Raises\n        ------\n        TypeError\n          * If ``values`` is a string\n\n        See Also\n        --------\n        pandas.DataFrame.isin\n\n        Examples\n        --------\n\n        >>> s = pd.Series(list('abc'))\n        >>> s.isin(['a', 'c', 'e'])\n        0     True\n        1    False\n        2     True\n        dtype: bool\n\n        Passing a single string as ``s.isin('a')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['a'])\n        0     True\n        1    False\n        2    False\n        dtype: bool\n\n        \"\"\"\n        result = algorithms.isin(com._values_from_object(self), values)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def between(self, left, right, inclusive=True):\n        \"\"\"\n        Return boolean Series equivalent to left <= series <= right. NA values\n        will be treated as False\n\n        Parameters\n        ----------\n        left : scalar\n            Left boundary\n        right : scalar\n            Right boundary\n\n        Returns\n        -------\n        is_between : Series\n        \"\"\"\n        if inclusive:\n            lmask = self >= left\n            rmask = self <= right\n        else:\n            lmask = self > left\n            rmask = self < right\n\n        return lmask & rmask\n\n    @classmethod\n    def from_csv(cls, path, sep=',', parse_dates=True, header=None,\n                 index_col=0, encoding=None, infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a time Series.\n\n        This method only differs from :func:`pandas.read_csv` in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `header` is ``None`` instead of ``0`` (the first row is not used as\n          the column names)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        With :func:`pandas.read_csv`, the option ``squeeze=True`` can be used\n        to return a Series like ``from_csv``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        sep : string, default ','\n            Field delimiter\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        header : int, default None\n            Row to use as header (skip prior rows)\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        encoding : string, optional\n            a string representing the encoding to use if the contents are\n            non-ascii, for python versions prior to 3\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : Series\n        \"\"\"\n\n        # We're calling `DataFrame.from_csv` in the implementation,\n        # which will propagate a warning regarding `from_csv` deprecation.\n        from pandas.core.frame import DataFrame\n        df = DataFrame.from_csv(path, header=header, index_col=index_col,\n                                sep=sep, parse_dates=parse_dates,\n                                encoding=encoding,\n                                infer_datetime_format=infer_datetime_format)\n        result = df.iloc[:, 0]\n        if header is None:\n            result.index.name = result.name = None\n\n        return result\n\n    def to_csv(self, path=None, index=True, sep=\",\", na_rep='',\n               float_format=None, header=False, index_label=None,\n               mode='w', encoding=None, compression=None, date_format=None,\n               decimal='.'):\n        \"\"\"\n        Write Series to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        header : boolean, default False\n            Write out series name\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.\n        mode : Python write mode, default 'w'\n        sep : character, default \",\"\n            Field delimiter for the output file.\n        encoding : string, optional\n            a string representing the encoding to use if the contents are\n            non-ascii, for python versions prior to 3\n        compression : string, optional\n            a string representing the compression to use in the output file,\n            allowed values are 'gzip', 'bz2', 'xz', only used when the first\n            argument is a filename\n        date_format: string, default None\n            Format string for datetime objects.\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        df = DataFrame(self)\n        # result is only a string if no path provided, otherwise None\n        result = df.to_csv(path, index=index, sep=sep, na_rep=na_rep,\n                           float_format=float_format, header=header,\n                           index_label=index_label, mode=mode,\n                           encoding=encoding, compression=compression,\n                           date_format=date_format, decimal=decimal)\n        if path is None:\n            return result\n\n    @Appender(generic._shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,\n                 merge_cells=True, encoding=None, inf_rep='inf', verbose=True):\n        df = self.to_frame()\n        df.to_excel(excel_writer=excel_writer, sheet_name=sheet_name,\n                    na_rep=na_rep, float_format=float_format, columns=columns,\n                    header=header, index=index, index_label=index_label,\n                    startrow=startrow, startcol=startcol, engine=engine,\n                    merge_cells=merge_cells, encoding=encoding,\n                    inf_rep=inf_rep, verbose=verbose)\n\n    @Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(Series, self).isna()\n\n    @Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(Series, self).isnull()\n\n    @Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(Series, self).notna()\n\n    @Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(Series, self).notnull()\n\n    def dropna(self, axis=0, inplace=False, **kwargs):\n        \"\"\"\n        Return Series without null values\n\n        Returns\n        -------\n        valid : Series\n        inplace : boolean, default False\n            Do operation in place.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        kwargs.pop('how', None)\n        if kwargs:\n            raise TypeError('dropna() got an unexpected keyword '\n                            'argument \"{0}\"'.format(list(kwargs.keys())[0]))\n\n        axis = self._get_axis_number(axis or 0)\n\n        if self._can_hold_na:\n            result = remove_na_arraylike(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        else:\n            if inplace:\n                # do nothing\n                pass\n            else:\n                return self.copy()\n\n    def valid(self, inplace=False, **kwargs):\n        \"\"\"Return Series without null values.\n\n        .. deprecated:: 0.23.0\n            Use :meth:`Series.dropna` instead.\n        \"\"\"\n        warnings.warn(\"Method .valid will be removed in a future version. \"\n                      \"Use .dropna instead.\", FutureWarning, stacklevel=2)\n        return self.dropna(inplace=inplace, **kwargs)\n\n    @Appender(generic._shared_docs['valid_index'] % {\n        'position': 'first', 'klass': 'Series'})\n    def first_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        mask = isna(self._values)\n        i = mask.argmin()\n        if mask[i]:\n            return None\n        else:\n            return self.index[i]\n\n    @Appender(generic._shared_docs['valid_index'] % {\n        'position': 'last', 'klass': 'Series'})\n    def last_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        mask = isna(self._values[::-1])\n        i = mask.argmin()\n        if mask[i]:\n            return None\n        else:\n            return self.index[len(self) - i - 1]\n\n    # ----------------------------------------------------------------------\n    # Time series-oriented methods\n\n    def to_timestamp(self, freq=None, how='start', copy=True):\n        \"\"\"\n        Cast to datetimeindex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n\n        Returns\n        -------\n        ts : Series with DatetimeIndex\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n\n        new_index = self.index.to_timestamp(freq=freq, how=how)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    def to_period(self, freq=None, copy=True):\n        \"\"\"\n        Convert Series from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n\n        Returns\n        -------\n        ts : Series with PeriodIndex\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n\n        new_index = self.index.to_period(freq=freq)\n        return self._constructor(new_values,\n                                 index=new_index).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Accessor Methods\n    # ----------------------------------------------------------------------\n    str = CachedAccessor(\"str\", StringMethods)\n    dt = CachedAccessor(\"dt\", CombinedDatetimelikeProperties)\n    cat = CachedAccessor(\"cat\", CategoricalAccessor)\n    plot = CachedAccessor(\"plot\", gfx.SeriesPlotMethods)\n\n    # ----------------------------------------------------------------------\n    # Add plotting methods to Series\n    hist = gfx.hist_series\n\n\nSeries._setup_axes(['index'], info_axis=0, stat_axis=0, aliases={'rows': 0})\nSeries._add_numeric_operations()\nSeries._add_series_only_operations()\nSeries._add_series_or_dataframe_operations()\n\n# Add arithmetic!\nops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs)\nops.add_special_arithmetic_methods(Series, **ops.series_special_funcs)\n\n\n# -----------------------------------------------------------------------------\n# Supplementary functions\n\n\ndef _sanitize_index(data, index, copy=False):\n    \"\"\" sanitize an index type to return an ndarray of the underlying, pass\n    thru a non-Index\n    \"\"\"\n\n    if index is None:\n        return data\n\n    if len(data) != len(index):\n        raise ValueError('Length of values does not match length of ' 'index')\n\n    if isinstance(data, ABCIndexClass) and not copy:\n        pass\n    elif isinstance(data, PeriodIndex):\n        data = data.astype(object).values\n    elif isinstance(data, DatetimeIndex):\n        data = data._to_embed(keep_tz=True)\n    elif isinstance(data, np.ndarray):\n\n        # coerce datetimelike types\n        if data.dtype.kind in ['M', 'm']:\n            data = _sanitize_array(data, index, copy=copy)\n\n    return data\n\n\ndef _sanitize_array(data, index, dtype=None, copy=False,\n                    raise_cast_failure=False):\n    \"\"\" sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified\n    \"\"\"\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    def _try_cast(arr, take_fast_path):\n\n        # perf shortcut as this is the most common case\n        if take_fast_path:\n            if maybe_castable(arr) and not copy and dtype is None:\n                return arr\n\n        try:\n            subarr = maybe_cast_to_datetime(arr, dtype)\n            if not is_extension_type(subarr):\n                subarr = np.array(subarr, dtype=dtype, copy=copy)\n        except (ValueError, TypeError):\n            if is_categorical_dtype(dtype):\n                subarr = Categorical(arr, dtype.categories,\n                                     ordered=dtype.ordered)\n            elif dtype is not None and raise_cast_failure:\n                raise\n            else:\n                subarr = np.array(arr, dtype=object, copy=copy)\n        return subarr\n\n    # GH #846\n    if isinstance(data, (np.ndarray, Index, Series)):\n\n        if dtype is not None:\n            subarr = np.array(data, copy=False)\n\n            # possibility of nan -> garbage\n            if is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n                if not isna(data).any():\n                    subarr = _try_cast(data, True)\n                elif copy:\n                    subarr = data.copy()\n            else:\n                subarr = _try_cast(data, True)\n        elif isinstance(data, Index):\n            # don't coerce Index types\n            # e.g. indexes can have different conversions (so don't fast path\n            # them)\n            # GH 6140\n            subarr = _sanitize_index(data, index, copy=copy)\n        else:\n\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, True)\n\n    elif isinstance(data, Categorical):\n        subarr = data\n\n        if copy:\n            subarr = data.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            try:\n                subarr = _try_cast(data, False)\n            except Exception:\n                if raise_cast_failure:  # pragma: no cover\n                    raise\n                subarr = np.array(data, dtype=object, copy=copy)\n                subarr = lib.maybe_convert_objects(subarr)\n\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH 16804\n        start, stop, step = get_range_parameters(data)\n        arr = np.arange(start, stop, step, dtype='int64')\n        subarr = _try_cast(arr, False)\n    else:\n        subarr = _try_cast(data, False)\n\n    # scalar like, GH\n    if getattr(subarr, 'ndim', 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(\n                value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype)\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception('Data must be 1-dimensional')\n        else:\n            subarr = com._asarray_tuplesafe(data, dtype=dtype)\n\n    # This is to prevent mixed-type Series getting all casted to\n    # NumPy string type, e.g. NaN --> '-1#IND'.\n    if issubclass(subarr.dtype.type, compat.string_types):\n        # GH 16605\n        # If not empty convert the data to dtype\n        if not isna(data).all():\n            data = np.array(data, dtype=dtype, copy=False)\n\n        subarr = np.array(data, dtype=object, copy=copy)\n\n    return subarr\n"
    }
  ],
  "questions": [
    "One other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though.",
    "Hey, I am interested! How should I go about solving this?",
    "@RaghavBatra : Can you confirm that passing in both `{1: 0}` and `{}` don't break anything?",
    "The docstring for Series.replace refers to looking up column names, which AFAIK doesn't make sense for the Series version of `replace`.  It seems like the Series function is just blindly inheriting the DataFrame docstring?",
    "http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html?highlight=replace#pandas.Series.replace",
    "http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html?highlight=replace#pandas.DataFrame.replace"
  ],
  "golden_answers": [
    "Thanks for the report. Yeah doc improvement is appreciated. It should be re-defined in `Series/DateFrame` to show correct signature as docstring. You can find an example here.\n\n-https://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L2219\n- https://github.com/pydata/pandas/blob/master/pandas/core/series.py#L2315\n\nI think the empty case should be supported to do nothing like other methods. \n\n```\nx.rename({})\n#    A  B  C\n# 0  1  2  3\n# 1  2  3  4\n# 2  3  4  5\n```",
    "@RaghavBatra : I think the comment by @sinhrks <a href=\"https://github.com/pandas-dev/pandas/issues/13852#issuecomment-236388992\">above</a> nicely describes what needs to be done.  \r\n\r\nIf you can write a new docstring for `Series.replace` that properly reflects the behavior of the method, that will be great!",
    "@gfyoung, yes it **works** for the DataFrame counterexample above.\r\n\r\nI also tried the Series.replace function. That worked as well!\r\n\r\n>>> ser = pd.Series([1, 2, 3, 4])\r\n>>> ser\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({1:0})\r\n0    0\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64\r\n>>> ser.replace({})\r\n0    1\r\n1    2\r\n2    3\r\n3    4\r\ndtype: int64",
    "One other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though.",
    "One other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though.",
    "One other minor nit.  Should the following edge case be supported?  It currently raises a ValueError if you pass an empty dict. \n\n```\nx.A.replace({})\n\n~/miniconda2/lib/python2.7/site-packages/pandas/core/generic.pyc in replace(self, to_replace, value, inplace, limit, regex, method, axis)\n   3334 \n   3335             items = list(compat.iteritems(to_replace))\n-> 3336             keys, values = zip(*items)\n   3337 \n   3338             are_mappings = [is_dictlike(v) for v in values]\n\nValueError: need more than 0 values to unpack\n```\n\nI'm not 100% sure this should even be allowed because of the docstring confusion, though."
  ],
  "questions_generated": [
    "Why would the Series.replace method incorrectly inherit the DataFrame.replace method's docstring in pandas?",
    "What changes are suggested to improve the docstring of the Series.replace method?",
    "How should the Series.replace method handle an empty dictionary as an argument?",
    "What code modifications might be necessary to ensure that Series.replace does not raise a ValueError when given an empty dictionary?",
    "How does the current implementation of Series.replace handle the mapping of values, and what issue arises from this when using an empty dictionary?"
  ],
  "golden_answers_generated": [
    "In pandas, the Series and DataFrame classes share some methods for consistency and reusability. However, if the Series.replace method does not have a customized docstring, it may inherit the DataFrame.replace method's docstring by default. This can lead to confusion if the docstring contains references that are not applicable to a Series, such as looking up column names.",
    "It is suggested to redefine the docstring for the Series.replace method to accurately reflect its behavior, removing any references to DataFrame-specific functionality such as column names. This would involve writing a new docstring that correctly describes the parameters, behavior, and return values of the Series.replace method.",
    "The suggestion is that the Series.replace method should handle an empty dictionary by doing nothing, similar to methods like rename. This would provide consistency and avoid raising a ValueError when an empty dictionary is passed as an argument.",
    "To prevent Series.replace from raising a ValueError with an empty dictionary, the implementation should check if the dictionary is empty before attempting to unpack its contents. This could involve adding conditional logic to bypass the unpacking process if the dictionary has no items.",
    "The current implementation of Series.replace attempts to unpack the dictionary into keys and values for mapping replacements. When an empty dictionary is passed, this unpacking operation fails, resulting in a ValueError. The issue arises because there are no items to unpack, indicating the need for handling the empty case explicitly."
  ]
}