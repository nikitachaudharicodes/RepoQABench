{
  "repo_name": "bokeh_bokeh",
  "issue_id": "3125",
  "issue_description": "# Expose the wheel zoom speed in Python\n\nThe sensitivity of the wheel zoom cannot be configured on the Python side. However, there is a `speed` property which can be set on the JS side. It would be better to expose this property to the Python side too.\n",
  "issue_comments": [
    {
      "id": 156776214,
      "user": "birdsarah",
      "body": "@liuyxpp we are actually in the middle of a big clean-up to ensure that the properties on the python and JS side match each other. \n\n@havocp WheelZoomTool has a default for `speed` on the JS side (https://github.com/bokeh/bokeh/blob/master/bokehjs/src/coffee/tool/gestures/wheel_zoom_tool.coffee#L119) but not a python property.\n\nHowever running the test in #3099 doesn't pick up this discrepancy. Thoughts?\n"
    },
    {
      "id": 156776284,
      "user": "birdsarah",
      "body": "Maybe the test only picks up differences in defaults not when there's missing properties?\n"
    },
    {
      "id": 156782971,
      "user": "bryevdv",
      "body": "@birdsarah maybe https://github.com/bokeh/bokeh/blob/master/bokehjs/src/coffee/tool/gestures/wheel_zoom_tool.coffee#L113\n"
    },
    {
      "id": 156785228,
      "user": "birdsarah",
      "body": "great spot @bryevdv, do you know why that would be?\n"
    },
    {
      "id": 156807283,
      "user": "bryevdv",
      "body": "Why that line exists? @havoc added that to get things working at all. Currently the client models add all kind of new attributes with abandon and most of them should not get serialized back to the server. But a few like this one should be, but were just overlooked. We should have been more careful in the first place and made client only \"viewmodel\" objects to store any new, extra, \"not intended to be serialized\" data, and and kept the main models pure and 1-1 in sync with Python (no extra attrs added). We still should do this some day. \n\n> On Nov 15, 2015, at 00:16, Sarah Bird notifications@github.com wrote:\n> \n> great spot @bryevdv, do you know why that would be?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
    },
    {
      "id": 156809695,
      "user": "havocp",
      "body": "Python would raise an exception at one point if it saw an unknown property... now it just warns. So I was having to mark tons of props as nonserializable. It sounds like the better fix here was to simply add the prop to Python.\n"
    },
    {
      "id": 157475640,
      "user": "birdsarah",
      "body": "thanks for the background @havocp and @bryevdv still learning how the all the pieces of the properties mechanism works.\n"
    },
    {
      "id": 204826085,
      "user": "bryevdv",
      "body": "We can certainly expose the speed, but unless we can also find a way to make a given speed somewhat uniform across browsers I am dubious of the utility. But changing to `feature` in any case. \n"
    },
    {
      "id": 233615377,
      "user": "damianavila",
      "body": "Reopening because the PR was reverted by https://github.com/bokeh/bokeh/pull/4831\n"
    },
    {
      "id": 2440413154,
      "user": "github-actions[bot]",
      "body": "This issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs."
    }
  ],
  "text_context": "# Expose the wheel zoom speed in Python\n\nThe sensitivity of the wheel zoom cannot be configured on the Python side. However, there is a `speed` property which can be set on the JS side. It would be better to expose this property to the Python side too.\n\n\n@liuyxpp we are actually in the middle of a big clean-up to ensure that the properties on the python and JS side match each other. \n\n@havocp WheelZoomTool has a default for `speed` on the JS side (https://github.com/bokeh/bokeh/blob/master/bokehjs/src/coffee/tool/gestures/wheel_zoom_tool.coffee#L119) but not a python property.\n\nHowever running the test in #3099 doesn't pick up this discrepancy. Thoughts?\n\n\nMaybe the test only picks up differences in defaults not when there's missing properties?\n\n\n@birdsarah maybe https://github.com/bokeh/bokeh/blob/master/bokehjs/src/coffee/tool/gestures/wheel_zoom_tool.coffee#L113\n\n\ngreat spot @bryevdv, do you know why that would be?\n\n\nWhy that line exists? @havoc added that to get things working at all. Currently the client models add all kind of new attributes with abandon and most of them should not get serialized back to the server. But a few like this one should be, but were just overlooked. We should have been more careful in the first place and made client only \"viewmodel\" objects to store any new, extra, \"not intended to be serialized\" data, and and kept the main models pure and 1-1 in sync with Python (no extra attrs added). We still should do this some day. \n\n> On Nov 15, 2015, at 00:16, Sarah Bird notifications@github.com wrote:\n> \n> great spot @bryevdv, do you know why that would be?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n\n\nPython would raise an exception at one point if it saw an unknown property... now it just warns. So I was having to mark tons of props as nonserializable. It sounds like the better fix here was to simply add the prop to Python.\n\n\nthanks for the background @havocp and @bryevdv still learning how the all the pieces of the properties mechanism works.\n\n\nWe can certainly expose the speed, but unless we can also find a way to make a given speed somewhat uniform across browsers I am dubious of the utility. But changing to `feature` in any case. \n\n\nReopening because the PR was reverted by https://github.com/bokeh/bokeh/pull/4831\n\n\nThis issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.",
  "pr_link": "https://github.com/bokeh/bokeh/pull/4831",
  "code_context": [
    {
      "filename": "bokeh/models/tools.py",
      "content": "\"\"\" Bokeh comes with a number of interactive tools.\n\nThere are five types of tool interactions:\n\n.. hlist::\n    :columns: 5\n\n    * Pan/Drag\n    * Click/Tap\n    * Scroll/Pinch\n    * Actions\n    * Inspectors\n\nFor the first three comprise the category of gesture tools, and only\none tool for each gesture can be active at any given time. The active\ntool is indicated on the toolbar by a highlight next to to the tool.\nActions are immediate or modal operations that are only activated when\ntheir button in the toolbar is pressed. Inspectors are passive tools that\nmerely report information or annotate the plot in some way, and may\nalways be active regardless of what other tools are currently active.\n\n\"\"\"\nfrom __future__ import absolute_import\n\nfrom ..model import Model\nfrom ..core.properties import abstract, Float, Color\nfrom ..core.properties import (\n    Any, Auto, Bool, String, Enum, Instance, Either, List, Dict, Tuple, Override\n)\nfrom ..core.enums import Dimension, Location, Anchor\n\nfrom .annotations import BoxAnnotation, PolyAnnotation\nfrom .callbacks import Callback\nfrom .renderers import Renderer\nfrom .layouts import LayoutDOM, Box\n\n\nclass ToolEvents(Model):\n    \"\"\"\n\n    \"\"\"\n\n    geometries = List(Dict(String, Any))\n\n\n@abstract\nclass Tool(Model):\n    \"\"\" A base class for all interactive tool types. ``Tool`` is\n    not generally useful to instantiate on its own.\n\n    \"\"\"\n\n    plot = Instance(\".models.plots.Plot\", help=\"\"\"\n    The Plot that this tool will act on.\n    \"\"\")\n\n\n@abstract\nclass Action(Tool):\n    pass\n\n\n@abstract\nclass Drag(Tool):\n    pass\n\n\n@abstract\nclass Scroll(Tool):\n    pass\n\n\n@abstract\nclass Tap(Tool):\n    pass\n\n\n@abstract\nclass Inspection(Tool):\n    pass\n\n\n@abstract\nclass ToolbarBase(LayoutDOM):\n    \"\"\" A base class for different toolbars. ``ToolbarBase`` is\n    not generally useful to instantiate on its own.\n\n    \"\"\"\n\n    logo = Enum(\"normal\", \"grey\", help=\"\"\"\n    What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.\n    \"\"\")\n\n    tools = List(Instance(Tool), help=\"\"\"\n    A list of tools to add to the plot.\n    \"\"\")\n\n    # This is an odd case. The sizing is custom handled. In the future we will\n    # probably set it as `stretch_width` or `stretch_height` depending on its\n    # orientation.\n    sizing_mode = Override(default=None)\n\n\nclass Toolbar(ToolbarBase):\n    \"\"\" Hold tools to display for a single plot.\n\n    \"\"\"\n\n    active_drag = Either(Auto, Instance(Drag), help=\"\"\"\n    Specify a drag tool to be active when the plot is displayed.\n    \"\"\")\n\n    active_scroll = Either(Auto, Instance(Scroll), help=\"\"\"\n    Specify a scroll/pinch tool to be active when the plot is displayed.\n    \"\"\")\n\n    active_tap = Either(Auto, Instance(Tap), help=\"\"\"\n    Specify a tap/click tool to be active when the plot is displayed.\n    \"\"\")\n\n\nclass ToolbarBox(Box):\n    \"\"\" A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience.\n\n    \"\"\"\n    def _check_empty_layout(self):\n        # Overriding the children check from Box. As toolbarbox's children\n        # are normally set JS side.\n        return None\n\n    toolbar_location = Enum(Location, default='right', help=\"\"\"\n        Should the toolbar be presented as if it was stuck to the `above`, `right`, `left`, `below`\n        edge of a plot. Default is `right`.\n    \"\"\")\n\n    tools = List(Instance(Tool), help=\"\"\"\n    A list of tools to add to the plot.\n    \"\"\")\n\n    merge_tools = Bool(default=True, help=\"\"\"\n        Merge all the tools together so there is one tool to control all the plots.\n    \"\"\")\n\n    logo = Enum(\"normal\", \"grey\", help=\"\"\"\n    What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.\n    \"\"\")\n\n\nclass PanTool(Drag):\n    \"\"\" *toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging\n    a mouse, or on touch devices by dragging a finger or stylus, across\n    the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single\n    axis\" panning. For instance, dragging in the vertical border or axis\n    will effect a pan in the vertical direction only, with the horizontal\n    dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 18pt\n\n    \"\"\"\n\n    dimensions = List(Enum(Dimension), default=[\"width\", \"height\"], help=\"\"\"\n    Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot.\n    \"\"\")\n\n\nclass WheelZoomTool(Scroll):\n    \"\"\" *toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 18pt\n\n    \"\"\"\n\n    dimensions = List(Enum(Dimension), default=[\"width\", \"height\"], help=\"\"\"\n    Which dimensions the wheel zoom tool is constrained to act in. By\n    default the wheel zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot.\n    \"\"\")\n\n\nclass SaveTool(Action):\n    \"\"\" *toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 18pt\n\n    \"\"\"\n\n\nclass ResetTool(Action):\n    \"\"\" *toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool\n    resets the data bounds of the plot to their values when the plot was\n    initially created.\n\n    Optionally, the reset tool also resets the plat canvas dimensions to\n    their original size\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 18pt\n    \"\"\"\n    reset_size = Bool(default=True, help=\"\"\"\n    Whether activating the Reset tool should also reset the plot's canvas\n    dimensions to their original size.\n    \"\"\")\n\n\nclass ResizeTool(Drag):\n    \"\"\" *toolbar icon*: |resize_icon|\n\n    The resize tool allows the user to left-drag a mouse or drag a finger\n    to resize the entire plot area on the screen.\n\n    .. |resize_icon| image:: /_images/icons/Resize.png\n        :height: 18pt\n\n    \"\"\"\n\n\nclass TapTool(Tap):\n    \"\"\" *toolbar icon*: |tap_select_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_select_icon| image:: /_images/icons/TapSelect.png\n        :height: 18pt\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n    \"\"\"\n\n    names = List(String, help=\"\"\"\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.\n    \"\"\")\n\n    renderers = List(Instance(Renderer), help=\"\"\"\n    An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.\n    \"\"\")\n\n    behavior = Enum(\"select\", \"inspect\", default=\"select\", help=\"\"\"\n    This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspecions don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`.\n    \"\"\")\n\n    callback = Instance(Callback, help=\"\"\"\n    A client-side action specification, like opening a URL, showing\n    a dialog box, etc. See :class:`~bokeh.models.actions.Action` for details.\n    \"\"\")\n\n\n\n\nclass CrosshairTool(Inspection):\n    \"\"\" *toolbar icon*: |inspector_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on\n    at all times, but can be configured in the inspector's menu\n    associated with the *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot,\n    centered on the current mouse position. The crosshair tool may be\n    configured to draw across only one dimension by setting the\n    ``dimension`` property to only ``width`` or ``height``.\n\n    .. |inspector_icon| image:: /_images/icons/Inspector.png\n        :height: 18pt\n\n    \"\"\"\n\n    dimensions = List(Enum(Dimension), default=[\"width\", \"height\"], help=\"\"\"\n    Which dimensions the crosshair tool is to track. By default, both a\n    vertical and horizontal line will be drawn. If only \"width\" is supplied,\n    only a horizontal line will be drawn. If only \"height\" is supplied,\n    only a vertical line will be drawn.\n    \"\"\")\n\n    line_color = Color(default=\"black\", help=\"\"\"\n    A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp\n\n    \"\"\")\n\n    line_width = Float(default=1, help=\"\"\"\n    Stroke width in units of pixels.\n    \"\"\")\n\n    line_alpha = Float(default=1.0, help=\"\"\"\n    An alpha value to use to stroke paths with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque).\n\n    \"\"\")\n\nDEFAULT_BOX_OVERLAY = lambda: BoxAnnotation(\n    level=\"overlay\",\n    render_mode=\"css\",\n    top_units=\"screen\",\n    left_units=\"screen\",\n    bottom_units=\"screen\",\n    right_units=\"screen\",\n    fill_color=\"lightgrey\",\n    fill_alpha=0.5,\n    line_color=\"black\",\n    line_alpha=1.0,\n    line_width=2,\n    line_dash=[4, 4]\n)\n\nclass BoxZoomTool(Drag):\n    \"\"\" *toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular\n    region of a Plot to zoom to by dragging he mouse or a\n    finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 18pt\n\n    \"\"\"\n\n    dimensions = List(Enum(Dimension), default=[\"width\", \"height\"], help=\"\"\"\n    Which dimensions the zoom box is to be free in. By default,\n    users may freely draw zoom boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.\n    \"\"\")\n\n    overlay = Instance(BoxAnnotation, default=DEFAULT_BOX_OVERLAY, help=\"\"\"\n    A shaded annotation drawn to indicate the selection region.\n    \"\"\")\n\n    match_aspect = Bool(default=False, help=\"\"\"\n    Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect.\n\n    \"\"\")\n\n\nclass BoxSelectTool(Drag):\n    \"\"\" *toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a\n    Plot by indicating a rectangular region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 18pt\n\n    \"\"\"\n\n    names = List(String, help=\"\"\"\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.\n    \"\"\")\n\n    renderers = List(Instance(Renderer), help=\"\"\"\n    An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.\n    \"\"\")\n\n    select_every_mousemove = Bool(False, help=\"\"\"\n    Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: False\n    \"\"\")\n\n    dimensions = List(Enum(Dimension), default=[\"width\", \"height\"], help=\"\"\"\n    Which dimensions the box selection is to be free in. By default,\n    users may freely draw selections boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled.\n    \"\"\")\n\n    callback = Instance(Callback, help=\"\"\"\n    A callback to run in the browser on completion of drawing a selection box.\n    The cb_data parameter that is available to the Callback code will contain\n    one BoxSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the selection box\n    \"\"\")\n\n    overlay = Instance(BoxAnnotation, default=DEFAULT_BOX_OVERLAY, help=\"\"\"\n    A shaded annotation drawn to indicate the selection region.\n    \"\"\")\n\nDEFAULT_POLY_OVERLAY = lambda: PolyAnnotation(\n    level=\"overlay\",\n    xs_units=\"screen\",\n    ys_units=\"screen\",\n    fill_color=\"lightgrey\",\n    fill_alpha=0.5,\n    line_color=\"black\",\n    line_alpha=1.0,\n    line_width=2,\n    line_dash=[4, 4]\n)\n\nclass LassoSelectTool(Drag):\n    \"\"\" *toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a\n    Plot by indicating a free-drawn \"lasso\" region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 18pt\n    \"\"\"\n\n    names = List(String, help=\"\"\"\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.\n    \"\"\")\n\n    renderers = List(Instance(Renderer), help=\"\"\"\n    An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.\n    \"\"\")\n\n    select_every_mousemove = Bool(True, help=\"\"\"\n    Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: True\n    \"\"\")\n\n    callback = Instance(Callback, help=\"\"\"\n    A callback to run in the browser on every selection of a lasso area.\n    The cb_data parameter that is available to the Callback code will contain\n    one LassoSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the lasso area\n    \"\"\")\n\n    overlay = Instance(PolyAnnotation, default=DEFAULT_POLY_OVERLAY, help=\"\"\"\n    A shaded annotation drawn to indicate the selection region.\n    \"\"\")\n\n\nclass PolySelectTool(Tap):\n    \"\"\" *toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 18pt\n    \"\"\"\n\n    names = List(String, help=\"\"\"\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.\n    \"\"\")\n\n    renderers = List(Instance(Renderer), help=\"\"\"\n    An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.\n    \"\"\")\n\n    overlay = Instance(PolyAnnotation, default=DEFAULT_POLY_OVERLAY, help=\"\"\"\n    A shaded annotation drawn to indicate the selection region.\n    \"\"\")\n\nclass HoverTool(Inspection):\n    \"\"\" *toolbar icon*: |inspector_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at\n    all times, but can be configured in the inspector's menu associated\n    with the *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever\n    the cursor is directly over a glyph. The data to show comes from the\n    glyph's data source, and what is to be displayed is configurable with\n    the ``tooltips`` attribute that maps display names to columns in the\n    data source, or to special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n        ]\n\n    You can also supply a ``Callback`` to the HoverTool, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n\n        Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * gear\n            * image\n            * image_rgba\n            * image_url\n            * multi_line\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * segment\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Inspector.png\n        :height: 18pt\n    \"\"\"\n\n    names = List(String, help=\"\"\"\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used.\n    \"\"\")\n\n    renderers = List(Instance(Renderer), help=\"\"\"\n    An explicit list of renderers to hit test again. If unset,\n    defaults to all renderers on a plot.\n    \"\"\")\n\n    callback = Instance(Callback, help=\"\"\"\n    A callback to run in the browser whenever the input's value changes. The\n    cb_data parameter that is available to the Callback code will contain two\n    HoverTool specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor\n    \"\"\")\n\n    tooltips = Either(String, List(Tuple(String, String)),\n            default=[\n                (\"index\",\"$index\"),\n                (\"data (x, y)\",\"($x, $y)\"),\n                (\"canvas (x, y)\",\"($sx, $sy)\"),\n            ], help=\"\"\"\n    The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of selected point in the data source\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: 'hex' (to display the color as a hex value), and\n        'swatch' to also display a small color swatch.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``. However, if a ``dict`` is used,\n        the visual presentation order is unspecified.\n\n    \"\"\").accepts(Dict(String, String), lambda d: list(d.items()))\n\n    mode = Enum(\"mouse\", \"hline\", \"vline\", help=\"\"\"\n    Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions.\n    \"\"\")\n\n    point_policy = Enum(\"snap_to_data\", \"follow_mouse\", \"none\", help=\"\"\"\n    Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position.\n    \"\"\")\n\n    line_policy = Enum(\"prev\", \"next\", \"nearest\", \"interp\", \"none\", help=\"\"\"\n    When showing tooltips for lines, whether the tooltip position should be\n    the \"previous\" or \"next\" points on the line, the nearest point to the\n    current mouse position, or interpolate along the line to the current\n    mouse position.\n    \"\"\")\n\n    anchor = Enum(Anchor, default=\"center\", help=\"\"\"\n    If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph.\n    \"\"\")\n\n    attachment = Enum(\"horizontal\", \"vertical\", help=\"\"\"\n    Whether tooltip's arrow should appear in the horizontal or vertical dimension.\n    \"\"\")\n\nDEFAULT_HELP_TIP = \"Click the question mark to learn more about Bokeh plot tools.\"\nDEFAULT_HELP_URL = \"http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html\"\n\nclass HelpTool(Action):\n    \"\"\"\n    The help tool is a widget designed to replace the hardcoded 'Help' link.\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well.\n    \"\"\"\n\n    help_tooltip = String(default=DEFAULT_HELP_TIP, help=\"\"\"\n    Tooltip displayed when hovering over the help icon.\n    \"\"\")\n\n    redirect = String(default=DEFAULT_HELP_URL, help=\"\"\"\n    Site to be redirected through upon click.\n    \"\"\")\n\nclass UndoTool(Action):\n    \"\"\" *toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 18pt\n    \"\"\"\n\nclass RedoTool(Action):\n    \"\"\" *toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 18pt\n    \"\"\"\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the primary issue being discussed in the bokeh_bokeh repository regarding the WheelZoomTool?",
    "According to the discussion, what is the discrepancy between the Python and JS sides regarding the WheelZoomTool's properties?",
    "What approach was suggested to solve the discrepancy between Python and JS properties for the WheelZoomTool?",
    "What was the technical reason given for why some client-side properties were not originally serialized back to the server?",
    "Why was the decision made to reopen the issue after it was initially closed?"
  ],
  "golden_answers_generated": [
    "The primary issue is the inability to configure the sensitivity of the wheel zoom on the Python side. Although there is a 'speed' property that can be set on the JS side, this property is not exposed on the Python side, which limits the configurability of the tool in Python.",
    "The discrepancy is that the WheelZoomTool has a 'speed' property set on the JS side, but there is no corresponding Python property. This discrepancy means that the 'speed' cannot be configured from Python, which is an issue the developers are looking to address.",
    "The suggested approach to solve the discrepancy is to expose the 'speed' property on the Python side as well, ensuring that properties on both sides match each other. This would allow the wheel zoom speed to be configurable from Python.",
    "The technical reason given was that client models were adding new attributes with abandon, most of which should not be serialized back to the server. Some properties like 'speed' were overlooked and should have been serialized. The recommendation was to create client-only 'viewmodel' objects to store new, extra data not intended for serialization, while keeping the main models in sync with Python.",
    "The issue was reopened because the pull request that addressed the problem was reverted. This indicates that the changes made to expose the 'speed' property on the Python side were undone, necessitating further attention to resolve the issue properly."
  ]
}