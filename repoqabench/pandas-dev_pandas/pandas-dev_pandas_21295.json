{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "21295",
  "issue_description": "# access git revision of currently running pandas\n\nI would like to know from inside the code which pandas git revision I am running at the moment. So I can easily confirm I am on proper branch/revision when testing some new features/bug fixes.\r\nIs it possible in pandas? If it isn't I would like this issue to be FR for such functionality. Just git commit hash is enough.\r\nIn dask you can access this info with `dask.__git_revision__`.",
  "issue_comments": [
    {
      "id": 394105418,
      "user": "WillAyd",
      "body": "I'm not very clear on the use case here - can you provide a concrete example of how this would be useful?"
    },
    {
      "id": 394131940,
      "user": "jangorecki",
      "body": "most common:\r\n\r\n> easily confirm I am on proper branch/revision when testing some new features/bug fixes\r\n\r\nmore complex would be to process pipelines using different versions of pandas simultaneously, so auditing git revision from each job in a pipeline."
    },
    {
      "id": 394157183,
      "user": "jorisvandenbossche",
      "body": "Pandas development version already gives an abbreviated form of the git revision:\r\n\r\n```\r\nIn [1]: pd.__version__\r\nOut[1]: '0.24.0.dev0+54.g10aab3c'\r\n```\r\n\r\nThat's not sufficient?"
    },
    {
      "id": 394588568,
      "user": "jangorecki",
      "body": "It is good but not sufficient. It still requires lookup to git repo to get commit sha."
    },
    {
      "id": 395093148,
      "user": "TomAugspurger",
      "body": "@jangorecki feel free to make a PR like https://github.com/dask/dask/pull/1760/files"
    },
    {
      "id": 400708969,
      "user": "TomAugspurger",
      "body": "@jangorecki could you make a PR implementing this?"
    },
    {
      "id": 400750677,
      "user": "jangorecki",
      "body": "@TomAugspurger not anytime soon"
    },
    {
      "id": 401356623,
      "user": "atulagrwl",
      "body": "Added `pd.__git_version__` to reflect git sha commit version."
    },
    {
      "id": 419790124,
      "user": "jangorecki",
      "body": "@atulagrwl any reason why this was not yet merged?"
    },
    {
      "id": 419881502,
      "user": "TomAugspurger",
      "body": "@jangorecki the PR is still open, and currently has a merge conflict."
    }
  ],
  "text_context": "# access git revision of currently running pandas\n\nI would like to know from inside the code which pandas git revision I am running at the moment. So I can easily confirm I am on proper branch/revision when testing some new features/bug fixes.\r\nIs it possible in pandas? If it isn't I would like this issue to be FR for such functionality. Just git commit hash is enough.\r\nIn dask you can access this info with `dask.__git_revision__`.\n\nI'm not very clear on the use case here - can you provide a concrete example of how this would be useful?\n\nmost common:\r\n\r\n> easily confirm I am on proper branch/revision when testing some new features/bug fixes\r\n\r\nmore complex would be to process pipelines using different versions of pandas simultaneously, so auditing git revision from each job in a pipeline.\n\nPandas development version already gives an abbreviated form of the git revision:\r\n\r\n```\r\nIn [1]: pd.__version__\r\nOut[1]: '0.24.0.dev0+54.g10aab3c'\r\n```\r\n\r\nThat's not sufficient?\n\nIt is good but not sufficient. It still requires lookup to git repo to get commit sha.\n\n@jangorecki feel free to make a PR like https://github.com/dask/dask/pull/1760/files\n\n@jangorecki could you make a PR implementing this?\n\n@TomAugspurger not anytime soon\n\nAdded `pd.__git_version__` to reflect git sha commit version.\n\n@atulagrwl any reason why this was not yet merged?\n\n@jangorecki the PR is still open, and currently has a merge conflict.",
  "pr_link": "https://github.com/dask/dask/pull/1760",
  "code_context": [
    {
      "filename": "dask/__init__.py",
      "content": "from __future__ import absolute_import, division, print_function\n\nfrom .core import istask\nfrom .context import set_options\nfrom .async import get_sync as get\ntry:\n    from .delayed import do, delayed, value\nexcept ImportError:\n    pass\ntry:\n    from .base import visualize, compute\nexcept ImportError:\n    pass\n\nfrom ._version import get_versions\nversions = get_versions()\n__version__ = versions['version']\n__git_revision__ = versions['full-revisionid']\ndel get_versions, versions\n"
    }
  ],
  "questions": [
    "I'm not very clear on the use case here - can you provide a concrete example of how this would be useful?",
    "I would like to know from inside the code which pandas git revision I am running at the moment. So I can easily confirm I am on proper branch/revision when testing some new features/bug fixes.\r\nIs it possible in pandas? If it isn't I would like this issue to be FR for such functionality. Just git commit hash is enough.\r\nIn dask you can access this info with `dask.__git_revision__`."
  ],
  "golden_answers": [
    "Pandas development version already gives an abbreviated form of the git revision:\r\n\r\n```\r\nIn [1]: pd.__version__\r\nOut[1]: '0.24.0.dev0+54.g10aab3c'\r\n```\r\n\r\nThat's not sufficient?",
    "Pandas development version already gives an abbreviated form of the git revision:\r\n\r\n```\r\nIn [1]: pd.__version__\r\nOut[1]: '0.24.0.dev0+54.g10aab3c'\r\n```\r\n\r\nThat's not sufficient?"
  ],
  "questions_generated": [
    "How can you access the git revision in the pandas library, and why might this be useful?",
    "What is the current method for checking the pandas development version, and why might it be insufficient for some users?",
    "What is the significance of the merge conflict mentioned in the discussion, and what might it indicate about the state of the PR?",
    "What can be inferred about the pandas repository's approach to open-source contributions from the discussion about making a PR?",
    "How does the dask library handle version and git revision information, and what can pandas learn from this implementation?"
  ],
  "golden_answers_generated": [
    "The git revision in the pandas library can be accessed using a proposed feature similar to `dask.__git_revision__`, which would provide the git commit hash of the currently running pandas version. This is useful for confirming the exact version of the codebase being used, particularly when testing new features or bug fixes, or when running pipelines that use different versions of pandas.",
    "The current method for checking the pandas development version is by accessing `pd.__version__`, which includes an abbreviated form of the git revision, such as '0.24.0.dev0+54.g10aab3c'. However, this might be insufficient because it requires a lookup to the git repository to get the full commit SHA, which can be cumbersome in certain workflows that require precise version control.",
    "The mention of a merge conflict in the discussion indicates that there are conflicting changes between the PR and the main branch of the repository. This means that two or more sets of changes are incompatible with each other, and it needs to be resolved before the PR can be merged. This typically involves manually reconciling the differences in the code to ensure that all intended changes are incorporated correctly.",
    "From the discussion about making a PR, it can be inferred that the pandas repository is open to contributions and encourages community involvement in implementing new features. The fact that a contributor can make a pull request (PR) to propose changes, as suggested by @TomAugspurger, indicates a collaborative development process. However, it also highlights the challenges of maintaining contribution momentum and resolving issues like merge conflicts.",
    "The dask library handles version and git revision information using the `get_versions` function from the `_version` module, which returns a dictionary containing version and full-revisionid keys. This allows dask to provide both the version and git revision information directly via `__version__` and `__git_revision__` attributes. Pandas can learn from this approach by implementing a similar mechanism to expose the git commit hash directly, which would simplify identifying the exact codebase version without additional lookups."
  ]
}