{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "38482",
  "issue_description": "# DOC: get_indexer returns non-matching with -1 positional\n\n[An answer on my recent SO post](https://stackoverflow.com/a/65085536/4107349) used `get_indexer`, which worked great, but I soon learned if the indexer doesn't find a match it seems to use the last entry without raising an error:\r\n\r\n```\r\ndf = pd.DataFrame({\"ID\": [6, 2, 4],\r\n                   \"to ignore\": [\"foo\", \"whatever\", \"idk\"],\r\n                   \"value\": [\"A\", \"B\", \"asdf\"],\r\n                   })\r\n\r\ndf2 = pd.DataFrame({\"ID_number\": [1, 2, 3, 4, 5, 6],\r\n                    \"A\": [0.91, 0.42, 0.85, 0.84, 0.81, 0.88],\r\n                    \"B\": [0.11, 0.22, 0.45, 0.38, 0.01, 0.18],\r\n                    })\r\n\r\ndf2 = df2.set_index('ID_number')\r\ndf['new_col'] = df2.values[df2.index.get_indexer(df['ID']), df2.columns.get_indexer(df['value'])]\r\n```\r\n\r\nI presumed the row with \"asdf\" would have raised an error, not returned the value for \"B\". This was problematic because I unwittingly processed data incorrectly and I enjoy being employed.\r\n\r\nMy interpretation of the [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.get_indexer.html) was that if `method` was not supplied it would be \"default: exact matches only\". Supplying `method = 'default'` and `tolerance = 0` was also not accepted when not using another method.\r\n\r\nAlso, I'm no serious programmer so I have likely misunderstood something and am only trying to help. Please feel free to correct / tell me to go away",
  "issue_comments": [
    {
      "id": 744855998,
      "user": "jreback",
      "body": "-1 mark index positions that are not found. the user of this (more or less internal routine) must take care to filter these if they are not wanted. \r\n\r\nIts in the example, but i suppose could be more prominent in the doc-string. changing this issue to a documentation one.\r\n\r\n@chrisjdixon if you'd like to do a pull-request would be great ."
    },
    {
      "id": 744888947,
      "user": "chrisjdixon",
      "body": "@jreback I'm sorry mate I'd be happy to make a pull request but I'm not very good at this and I don't know why -1 index positions would ever be desired or how they could be filtered out, so I wouldn't know what to ask for in the documentation / pull request...\r\n\r\nCould you please elaborate or point me in the right direction?"
    },
    {
      "id": 766174207,
      "user": "phofl",
      "body": "The docs say\r\n```\r\nIntegers from 0 to n - 1 indicating that the index at these positions matches the corresponding target values. Missing values in the target are marked by -1.\r\n```\r\n\r\nunder the Returns section. So I think we can close this one?"
    },
    {
      "id": 766247972,
      "user": "chrisjdixon",
      "body": "@phofl @jreback I agree that existing documentation accurately explains things but I don't find the explanation beginner friendly.\r\n\r\nDespite this potentially being too verbose for guys like you, as a layman I would've benefited from a more prominent warning explicitly describing the outcome, perhaps something like: 'Note unmatched entries return -1, which when applied as an index returns series' last values without raising errors. If this is undesired it's important you filter out -1s`.\r\n\r\nI'd like to help but I don't know anything about software development and couldn't figure out how to make a suitable pull request. If a more elaborate warning like this is appropriate and if someone could please point me in the right direction I am happy to try."
    },
    {
      "id": 770283233,
      "user": "MarcoGorelli",
      "body": "Thanks @chrisjdixon for the report/suggestion, but wouldn't such a warning be disruptive to users intentionally using the function knowing it returns `-1` if no match is found?\r\n\r\nIf you want to clarify the docstring, then [here](https://pandas.pydata.org/pandas-docs/dev/development/contributing.html)'s the contributing guide, feel free to ask if anything's unclear"
    },
    {
      "id": 770479623,
      "user": "chrisjdixon",
      "body": "@MarcoGorelli you'd know better than me but my expectation was the warning would show in the documentation only [like it does for pd.Index.values](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.values.html), not when running the code. \r\n\r\nI trust but don't understand why -1 values might sometimes be desired, but I suppose if they would typically not be desired / expected, or if users unwittingly processing data incorrectly would be particularly problematic (as in my case), I'd think the warning as justifiable. But I'm new to pandas and programming so others would know best.\r\n\r\nI've had a look at the contributing guide but there's a huge amount of basic stuff / git that I still don't understand. I don't want to mess you guys around but I am very busy with other things right now and don't have time to quickly learn it all, so I might need a while. In the meantime if anyone more knowledgeable can be bothered quickly making the change I'd appreciate it. "
    },
    {
      "id": 770753806,
      "user": "MarcoGorelli",
      "body": "> my expectation was the warning would show in the documentation only like it does for pd.Index.values, not when running the code.\r\n\r\nAh yes, no objection to that - a pull request to add such a warning would be welcome if you (or anyone else following along) wanted to submit one, if you comment \"take\" the issue will be assigned to you"
    },
    {
      "id": 773303927,
      "user": "shuaggar-sys",
      "body": "take"
    },
    {
      "id": 821893005,
      "user": "phofl",
      "body": "Removed milestone since pr is closed and stale"
    },
    {
      "id": 826416100,
      "user": "chrisjdixon",
      "body": "Are we making progress?\r\n\r\n@shuaggar-sys created [this pull request](https://github.com/pandas-dev/pandas/pull/39597) and it looked like that made progress but @MarcoGorelli closed it and I don't understand why. Looks like @shuaggar-sys has disappeared but I don't know what else needed to be done. Is there anything I can do?"
    },
    {
      "id": 826417288,
      "user": "jreback",
      "body": "@chrisjdixon or others are welcome to take over that PR"
    },
    {
      "id": 927019889,
      "user": "DhruvBShetty",
      "body": "take"
    }
  ],
  "text_context": "# DOC: get_indexer returns non-matching with -1 positional\n\n[An answer on my recent SO post](https://stackoverflow.com/a/65085536/4107349) used `get_indexer`, which worked great, but I soon learned if the indexer doesn't find a match it seems to use the last entry without raising an error:\r\n\r\n```\r\ndf = pd.DataFrame({\"ID\": [6, 2, 4],\r\n                   \"to ignore\": [\"foo\", \"whatever\", \"idk\"],\r\n                   \"value\": [\"A\", \"B\", \"asdf\"],\r\n                   })\r\n\r\ndf2 = pd.DataFrame({\"ID_number\": [1, 2, 3, 4, 5, 6],\r\n                    \"A\": [0.91, 0.42, 0.85, 0.84, 0.81, 0.88],\r\n                    \"B\": [0.11, 0.22, 0.45, 0.38, 0.01, 0.18],\r\n                    })\r\n\r\ndf2 = df2.set_index('ID_number')\r\ndf['new_col'] = df2.values[df2.index.get_indexer(df['ID']), df2.columns.get_indexer(df['value'])]\r\n```\r\n\r\nI presumed the row with \"asdf\" would have raised an error, not returned the value for \"B\". This was problematic because I unwittingly processed data incorrectly and I enjoy being employed.\r\n\r\nMy interpretation of the [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.get_indexer.html) was that if `method` was not supplied it would be \"default: exact matches only\". Supplying `method = 'default'` and `tolerance = 0` was also not accepted when not using another method.\r\n\r\nAlso, I'm no serious programmer so I have likely misunderstood something and am only trying to help. Please feel free to correct / tell me to go away\n\n-1 mark index positions that are not found. the user of this (more or less internal routine) must take care to filter these if they are not wanted. \r\n\r\nIts in the example, but i suppose could be more prominent in the doc-string. changing this issue to a documentation one.\r\n\r\n@chrisjdixon if you'd like to do a pull-request would be great .\n\n@jreback I'm sorry mate I'd be happy to make a pull request but I'm not very good at this and I don't know why -1 index positions would ever be desired or how they could be filtered out, so I wouldn't know what to ask for in the documentation / pull request...\r\n\r\nCould you please elaborate or point me in the right direction?\n\nThe docs say\r\n```\r\nIntegers from 0 to n - 1 indicating that the index at these positions matches the corresponding target values. Missing values in the target are marked by -1.\r\n```\r\n\r\nunder the Returns section. So I think we can close this one?\n\n@phofl @jreback I agree that existing documentation accurately explains things but I don't find the explanation beginner friendly.\r\n\r\nDespite this potentially being too verbose for guys like you, as a layman I would've benefited from a more prominent warning explicitly describing the outcome, perhaps something like: 'Note unmatched entries return -1, which when applied as an index returns series' last values without raising errors. If this is undesired it's important you filter out -1s`.\r\n\r\nI'd like to help but I don't know anything about software development and couldn't figure out how to make a suitable pull request. If a more elaborate warning like this is appropriate and if someone could please point me in the right direction I am happy to try.\n\nThanks @chrisjdixon for the report/suggestion, but wouldn't such a warning be disruptive to users intentionally using the function knowing it returns `-1` if no match is found?\r\n\r\nIf you want to clarify the docstring, then [here](https://pandas.pydata.org/pandas-docs/dev/development/contributing.html)'s the contributing guide, feel free to ask if anything's unclear\n\n@MarcoGorelli you'd know better than me but my expectation was the warning would show in the documentation only [like it does for pd.Index.values](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.values.html), not when running the code. \r\n\r\nI trust but don't understand why -1 values might sometimes be desired, but I suppose if they would typically not be desired / expected, or if users unwittingly processing data incorrectly would be particularly problematic (as in my case), I'd think the warning as justifiable. But I'm new to pandas and programming so others would know best.\r\n\r\nI've had a look at the contributing guide but there's a huge amount of basic stuff / git that I still don't understand. I don't want to mess you guys around but I am very busy with other things right now and don't have time to quickly learn it all, so I might need a while. In the meantime if anyone more knowledgeable can be bothered quickly making the change I'd appreciate it. \n\n> my expectation was the warning would show in the documentation only like it does for pd.Index.values, not when running the code.\r\n\r\nAh yes, no objection to that - a pull request to add such a warning would be welcome if you (or anyone else following along) wanted to submit one, if you comment \"take\" the issue will be assigned to you\n\ntake\n\nRemoved milestone since pr is closed and stale\n\nAre we making progress?\r\n\r\n@shuaggar-sys created [this pull request](https://github.com/pandas-dev/pandas/pull/39597) and it looked like that made progress but @MarcoGorelli closed it and I don't understand why. Looks like @shuaggar-sys has disappeared but I don't know what else needed to be done. Is there anything I can do?\n\n@chrisjdixon or others are welcome to take over that PR\n\ntake",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/39597",
  "code_context": [
    {
      "filename": "pandas/core/indexes/base.py",
      "content": "from __future__ import annotations\n\nfrom copy import copy as copy_func\nfrom datetime import datetime\nfrom itertools import zip_longest\nimport operator\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    FrozenSet,\n    Hashable,\n    List,\n    NewType,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    TypeVar,\n    Union,\n    cast,\n)\nimport warnings\n\nimport numpy as np\n\nfrom pandas._libs import algos as libalgos, index as libindex, lib\nimport pandas._libs.join as libjoin\nfrom pandas._libs.lib import is_datetime_array, no_default\nfrom pandas._libs.tslibs import (\n    IncompatibleFrequency,\n    OutOfBoundsDatetime,\n    Timestamp,\n    tz_compare,\n)\nfrom pandas._typing import AnyArrayLike, ArrayLike, Dtype, DtypeObj, Shape, final\nfrom pandas.compat.numpy import function as nv\nfrom pandas.errors import DuplicateLabelError, InvalidIndexError\nfrom pandas.util._decorators import Appender, cache_readonly, doc\n\nfrom pandas.core.dtypes.cast import (\n    can_hold_element,\n    find_common_type,\n    infer_dtype_from,\n    maybe_cast_to_integer_array,\n    validate_numeric_casting,\n)\nfrom pandas.core.dtypes.common import (\n    ensure_int64,\n    ensure_object,\n    ensure_platform_int,\n    is_bool_dtype,\n    is_categorical_dtype,\n    is_dtype_equal,\n    is_ea_or_datetimelike_dtype,\n    is_extension_array_dtype,\n    is_float,\n    is_float_dtype,\n    is_hashable,\n    is_integer,\n    is_integer_dtype,\n    is_interval_dtype,\n    is_iterator,\n    is_list_like,\n    is_object_dtype,\n    is_scalar,\n    is_signed_integer_dtype,\n    is_unsigned_integer_dtype,\n    needs_i8_conversion,\n    pandas_dtype,\n    validate_all_hashable,\n)\nfrom pandas.core.dtypes.concat import concat_compat\nfrom pandas.core.dtypes.dtypes import (\n    CategoricalDtype,\n    DatetimeTZDtype,\n    ExtensionDtype,\n    IntervalDtype,\n    PandasDtype,\n    PeriodDtype,\n)\nfrom pandas.core.dtypes.generic import (\n    ABCDatetimeIndex,\n    ABCMultiIndex,\n    ABCPeriodIndex,\n    ABCSeries,\n    ABCTimedeltaIndex,\n)\nfrom pandas.core.dtypes.inference import is_dict_like\nfrom pandas.core.dtypes.missing import array_equivalent, is_valid_nat_for_dtype, isna\n\nfrom pandas.core import missing, ops\nfrom pandas.core.accessor import CachedAccessor\nimport pandas.core.algorithms as algos\nfrom pandas.core.arrays import Categorical, ExtensionArray\nfrom pandas.core.arrays.datetimes import tz_to_dtype, validate_tz_from_dtype\nfrom pandas.core.arrays.sparse import SparseDtype\nfrom pandas.core.base import IndexOpsMixin, PandasObject\nimport pandas.core.common as com\nfrom pandas.core.construction import extract_array\nfrom pandas.core.indexers import deprecate_ndim_indexing\nfrom pandas.core.indexes.frozen import FrozenList\nfrom pandas.core.ops import get_op_result_name\nfrom pandas.core.ops.invalid import make_invalid_op\nfrom pandas.core.sorting import ensure_key_mapped, nargsort\nfrom pandas.core.strings import StringMethods\n\nfrom pandas.io.formats.printing import (\n    PrettyDict,\n    default_pprint,\n    format_object_attrs,\n    format_object_summary,\n    pprint_thing,\n)\n\nif TYPE_CHECKING:\n    from pandas import IntervalIndex, MultiIndex, RangeIndex, Series\n    from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin\n\n\n__all__ = [\"Index\"]\n\n_unsortable_types = frozenset((\"mixed\", \"mixed-integer\"))\n\n_index_doc_kwargs = {\n    \"klass\": \"Index\",\n    \"inplace\": \"\",\n    \"target_klass\": \"Index\",\n    \"raises_section\": \"\",\n    \"unique\": \"Index\",\n    \"duplicated\": \"np.ndarray\",\n}\n_index_shared_docs = {}\nstr_t = str\n\n\n_o_dtype = np.dtype(object)\n\n\n_Identity = NewType(\"_Identity\", object)\n\n\ndef disallow_kwargs(kwargs: Dict[str, Any]):\n    if kwargs:\n        raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n\n\ndef _new_Index(cls, d):\n    \"\"\"\n    This is called upon unpickling, rather than the default which doesn't\n    have arguments and breaks __new__.\n    \"\"\"\n    # required for backward compat, because PI can't be instantiated with\n    # ordinals through __new__ GH #13277\n    if issubclass(cls, ABCPeriodIndex):\n        from pandas.core.indexes.period import _new_PeriodIndex\n\n        return _new_PeriodIndex(cls, **d)\n\n    if issubclass(cls, ABCMultiIndex):\n        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n\n    return cls.__new__(cls, **d)\n\n\n_IndexT = TypeVar(\"_IndexT\", bound=\"Index\")\n\n\nclass Index(IndexOpsMixin, PandasObject):\n    \"\"\"\n    Immutable sequence used for indexing and alignment. The basic object\n    storing axis labels for all pandas objects.\n\n    Parameters\n    ----------\n    data : array-like (1-dimensional)\n    dtype : NumPy dtype (default: object)\n        If dtype is None, we find the dtype that best fits the data.\n        If an actual dtype is provided, we coerce to that dtype if it's safe.\n        Otherwise, an error will be raised.\n    copy : bool\n        Make a copy of input ndarray.\n    name : object\n        Name to be stored in the index.\n    tupleize_cols : bool (default: True)\n        When True, attempt to create a MultiIndex if possible.\n\n    See Also\n    --------\n    RangeIndex : Index implementing a monotonic integer range.\n    CategoricalIndex : Index of :class:`Categorical` s.\n    MultiIndex : A multi-level, or hierarchical Index.\n    IntervalIndex : An Index of :class:`Interval` s.\n    DatetimeIndex : Index of datetime64 data.\n    TimedeltaIndex : Index of timedelta64 data.\n    PeriodIndex : Index of Period data.\n    Int64Index : A special case of :class:`Index` with purely integer labels.\n    UInt64Index : A special case of :class:`Index` with purely unsigned integer labels.\n    Float64Index : A special case of :class:`Index` with purely float labels.\n\n    Notes\n    -----\n    An Index instance can **only** contain hashable objects\n\n    Examples\n    --------\n    >>> pd.Index([1, 2, 3])\n    Int64Index([1, 2, 3], dtype='int64')\n\n    >>> pd.Index(list('abc'))\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n\n    # tolist is not actually deprecated, just suppressed in the __dir__\n    _hidden_attrs: FrozenSet[str] = (\n        PandasObject._hidden_attrs\n        | IndexOpsMixin._hidden_attrs\n        | frozenset([\"contains\", \"set_value\"])\n    )\n\n    # To hand over control to subclasses\n    _join_precedence = 1\n\n    # Cython methods; see github.com/cython/cython/issues/2647\n    #  for why we need to wrap these instead of making them class attributes\n    # Moreover, cython will choose the appropriate-dtyped sub-function\n    #  given the dtypes of the passed arguments\n    def _left_indexer_unique(self, left, right):\n        return libjoin.left_join_indexer_unique(left, right)\n\n    def _left_indexer(self, left, right):\n        return libjoin.left_join_indexer(left, right)\n\n    def _inner_indexer(self, left, right):\n        return libjoin.inner_join_indexer(left, right)\n\n    def _outer_indexer(self, left, right):\n        return libjoin.outer_join_indexer(left, right)\n\n    _typ = \"index\"\n    _data: Union[ExtensionArray, np.ndarray]\n    _id: Optional[_Identity] = None\n    _name: Hashable = None\n    # MultiIndex.levels previously allowed setting the index name. We\n    # don't allow this anymore, and raise if it happens rather than\n    # failing silently.\n    _no_setting_name: bool = False\n    _comparables = [\"name\"]\n    _attributes = [\"name\"]\n    _is_numeric_dtype = False\n    _can_hold_na = True\n    _can_hold_strings = True\n\n    # would we like our indexing holder to defer to us\n    _defer_to_indexing = False\n\n    _engine_type = libindex.ObjectEngine\n    # whether we support partial string indexing. Overridden\n    # in DatetimeIndex and PeriodIndex\n    _supports_partial_string_indexing = False\n\n    _accessors = {\"str\"}\n\n    str = CachedAccessor(\"str\", StringMethods)\n\n    # --------------------------------------------------------------------\n    # Constructors\n\n    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n    ) -> Index:\n\n        if kwargs:\n            warnings.warn(\n                \"Passing keywords other than 'data', 'dtype', 'copy', 'name', \"\n                \"'tupleize_cols' is deprecated and will raise TypeError in a \"\n                \"future version.  Use the specific Index subclass directly instead\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        from pandas.core.arrays import PandasArray\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n        if \"tz\" in kwargs:\n            tz = kwargs.pop(\"tz\")\n            validate_tz_from_dtype(dtype, tz)\n            dtype = tz_to_dtype(tz)\n\n        if isinstance(data, PandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n        if isinstance(dtype, PandasDtype):\n            dtype = dtype.numpy_dtype\n\n        data_dtype = getattr(data, \"dtype\", None)\n\n        # range\n        if isinstance(data, RangeIndex):\n            result = RangeIndex(start=data, copy=copy, name=name)\n            if dtype is not None:\n                return result.astype(dtype, copy=False)\n            return result\n        elif isinstance(data, range):\n            result = RangeIndex.from_range(data, name=name)\n            if dtype is not None:\n                return result.astype(dtype, copy=False)\n            return result\n\n        elif is_ea_or_datetimelike_dtype(dtype):\n            # non-EA dtype indexes have special casting logic, so we punt here\n            klass = cls._dtype_to_subclass(dtype)\n            if klass is not Index:\n                return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=copy)\n            data = np.asarray(data, dtype=object)\n            disallow_kwargs(kwargs)\n            return Index._simple_new(data, name=name)\n\n        elif is_ea_or_datetimelike_dtype(data_dtype):\n            klass = cls._dtype_to_subclass(data_dtype)\n            if klass is not Index:\n                result = klass(data, copy=copy, name=name, **kwargs)\n                if dtype is not None:\n                    return result.astype(dtype, copy=False)\n                return result\n\n            data = np.array(data, dtype=object, copy=copy)\n            disallow_kwargs(kwargs)\n            return Index._simple_new(data, name=name)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype\n\n            if data.dtype.kind in [\"i\", \"u\", \"f\"]:\n                # maybe coerce to a sub-class\n                arr = data\n            else:\n                arr = com.asarray_tuplesafe(data, dtype=object)\n\n                if dtype is None:\n                    arr = _maybe_cast_data_without_dtype(arr)\n                    dtype = arr.dtype\n\n                    if kwargs:\n                        return cls(arr, dtype, copy=copy, name=name, **kwargs)\n\n            klass = cls._dtype_to_subclass(arr.dtype)\n            arr = klass._ensure_array(arr, dtype, copy)\n            disallow_kwargs(kwargs)\n            return klass._simple_new(arr, name)\n\n        elif is_scalar(data):\n            raise cls._scalar_data_error(data)\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        else:\n\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)\n\n    @classmethod\n    def _ensure_array(cls, data, dtype, copy: bool):\n        \"\"\"\n        Ensure we have a valid array to pass to _simple_new.\n        \"\"\"\n        if data.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n        if copy:\n            # asarray_tuplesafe does not always copy underlying data,\n            #  so need to make sure that this happens\n            data = data.copy()\n        return data\n\n    @classmethod\n    def _dtype_to_subclass(cls, dtype: DtypeObj):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n\n        if isinstance(dtype, ExtensionDtype):\n            if isinstance(dtype, DatetimeTZDtype):\n                from pandas import DatetimeIndex\n\n                return DatetimeIndex\n            elif isinstance(dtype, CategoricalDtype):\n                from pandas import CategoricalIndex\n\n                return CategoricalIndex\n            elif isinstance(dtype, IntervalDtype):\n                from pandas import IntervalIndex\n\n                return IntervalIndex\n            elif isinstance(dtype, PeriodDtype):\n                from pandas import PeriodIndex\n\n                return PeriodIndex\n\n            elif isinstance(dtype, SparseDtype):\n                return cls._dtype_to_subclass(dtype.subtype)\n\n            return Index\n\n        if dtype.kind == \"M\":\n            from pandas import DatetimeIndex\n\n            return DatetimeIndex\n\n        elif dtype.kind == \"m\":\n            from pandas import TimedeltaIndex\n\n            return TimedeltaIndex\n\n        elif is_float_dtype(dtype):\n            from pandas import Float64Index\n\n            return Float64Index\n        elif is_unsigned_integer_dtype(dtype):\n            from pandas import UInt64Index\n\n            return UInt64Index\n        elif is_signed_integer_dtype(dtype):\n            from pandas import Int64Index\n\n            return Int64Index\n\n        elif dtype == object:\n            # NB: assuming away MultiIndex\n            return Index\n\n        elif issubclass(dtype.type, (str, bool, np.bool_)):\n            return Index\n\n        raise NotImplementedError(dtype)\n\n    \"\"\"\n    NOTE for new Index creation:\n\n    - _simple_new: It returns new Index with the same type as the caller.\n      All metadata (such as name) must be provided by caller's responsibility.\n      Using _shallow_copy is recommended because it fills these metadata\n      otherwise specified.\n\n    - _shallow_copy: It returns new Index with the same type (using\n      _simple_new), but fills caller's metadata otherwise specified. Passed\n      kwargs will overwrite corresponding metadata.\n\n    See each method's docstring.\n    \"\"\"\n\n    @property\n    def asi8(self):\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        warnings.warn(\n            \"Index.asi8 is deprecated and will be removed in a future version\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return None\n\n    @classmethod\n    def _simple_new(cls, values, name: Hashable = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n        result._reset_identity()\n\n        return result\n\n    @cache_readonly\n    def _constructor(self):\n        return type(self)\n\n    @final\n    def _maybe_check_unique(self):\n        \"\"\"\n        Check that an Index has no duplicates.\n\n        This is typically only called via\n        `NDFrame.flags.allows_duplicate_labels.setter` when it's set to\n        True (duplicates aren't allowed).\n\n        Raises\n        ------\n        DuplicateLabelError\n            When the index is not unique.\n        \"\"\"\n        if not self.is_unique:\n            msg = \"\"\"Index has duplicates.\"\"\"\n            duplicates = self._format_duplicate_message()\n            msg += f\"\\n{duplicates}\"\n\n            raise DuplicateLabelError(msg)\n\n    @final\n    def _format_duplicate_message(self):\n        \"\"\"\n        Construct the DataFrame for a DuplicateLabelError.\n\n        This returns a DataFrame indicating the labels and positions\n        of duplicates in an index. This should only be called when it's\n        already known that duplicates are present.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['a', 'b', 'a'])\n        >>> idx._format_duplicate_message()\n            positions\n        label\n        a        [0, 2]\n        \"\"\"\n        from pandas import Series\n\n        duplicates = self[self.duplicated(keep=\"first\")].unique()\n        assert len(duplicates)\n\n        out = Series(np.arange(len(self))).groupby(self).agg(list)[duplicates]\n        if self.nlevels == 1:\n            out = out.rename_axis(\"label\")\n        return out.to_frame(name=\"positions\")\n\n    # --------------------------------------------------------------------\n    # Index Internals Methods\n\n    @final\n    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}\n\n    def _shallow_copy(self, values=None, name: Hashable = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n\n        if values is not None:\n            return self._simple_new(values, name=name)\n\n        result = self._simple_new(self._values, name=name)\n        result._cache = self._cache\n        return result\n\n    @final\n    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            Other object to compare against.\n\n        Returns\n        -------\n        bool\n            True if both have same underlying data, False otherwise.\n\n        See Also\n        --------\n        Index.identical : Works like ``Index.is_`` but also checks metadata.\n        \"\"\"\n        if self is other:\n            return True\n        elif not hasattr(other, \"_id\"):\n            return False\n        elif self._id is None or other._id is None:\n            return False\n        else:\n            return self._id is other._id\n\n    @final\n    def _reset_identity(self) -> None:\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity(object())\n\n    @final\n    def _cleanup(self):\n        self._engine.clear_mapping()\n\n    @cache_readonly\n    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))\n\n    @cache_readonly\n    def _dir_additions_for_owner(self) -> Set[str_t]:\n        \"\"\"\n        Add the string-like labels to the owner dataframe/series dir output.\n\n        If this is a MultiIndex, it's first level values are used.\n        \"\"\"\n        return {\n            c\n            for c in self.unique(level=0)[:100]\n            if isinstance(c, str) and c.isidentifier()\n        }\n\n    # --------------------------------------------------------------------\n    # Array-Like Methods\n\n    # ndarray compat\n    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)\n\n    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc and other functions.\n        \"\"\"\n        result = lib.item_from_zerodim(result)\n        if is_bool_dtype(result) or lib.is_scalar(result) or np.ndim(result) > 1:\n            return result\n\n        attrs = self._get_attributes_dict()\n        return Index(result, **attrs)\n\n    @cache_readonly\n    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype\n\n    @final\n    def ravel(self, order=\"C\"):\n        \"\"\"\n        Return an ndarray of the flattened values of the underlying data.\n\n        Returns\n        -------\n        numpy.ndarray\n            Flattened array.\n\n        See Also\n        --------\n        numpy.ndarray.ravel : Return a flattened array.\n        \"\"\"\n        warnings.warn(\n            \"Index.ravel returning ndarray is deprecated; in a future version \"\n            \"this will return a view on self.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        values = self._get_engine_target()\n        return values.ravel(order=order)\n\n    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result\n\n    def astype(self, dtype, copy=True):\n        \"\"\"\n        Create an Index with values cast to dtypes.\n\n        The class of a new Index is determined by dtype. When conversion is\n        impossible, a TypeError exception is raised.\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n            Note that any signed integer `dtype` is treated as ``'int64'``,\n            and any unsigned integer `dtype` is treated as ``'uint64'``,\n            regardless of the size.\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and internal requirements on dtype are\n            satisfied, the original data is used to create a new Index\n            or the original Index is returned.\n\n        Returns\n        -------\n        Index\n            Index with values cast to specified dtype.\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(\n                self._values, name=self.name, dtype=dtype, copy=copy\n            )\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n\n        try:\n            casted = self._values.astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            raise TypeError(\n                f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            ) from err\n        return Index(casted, name=self.name, dtype=dtype)\n\n    _index_shared_docs[\n        \"take\"\n    ] = \"\"\"\n        Return a new %(klass)s of the values selected by the indices.\n\n        For internal compatibility with numpy arrays.\n\n        Parameters\n        ----------\n        indices : list\n            Indices to be taken.\n        axis : int, optional\n            The axis over which to select values, always 0.\n        allow_fill : bool, default True\n        fill_value : bool, default None\n            If allow_fill=True and fill_value is not None, indices specified by\n            -1 is regarded as NA. If Index doesn't hold NA, raise ValueError.\n\n        Returns\n        -------\n        numpy.ndarray\n            Elements of given indices.\n\n        See Also\n        --------\n        numpy.ndarray.take: Return an array formed from the\n            elements of a at the given indices.\n        \"\"\"\n\n    @Appender(_index_shared_docs[\"take\"] % _index_doc_kwargs)\n    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take((), kwargs)\n        indices = ensure_platform_int(indices)\n        allow_fill = self._maybe_disallow_fill(allow_fill, fill_value, indices)\n\n        # Note: we discard fill_value and use self._na_value, only relevant\n        #  in the case where allow_fill is True and fill_value is not None\n        taken = algos.take(\n            self._values, indices, allow_fill=allow_fill, fill_value=self._na_value\n        )\n        return type(self)._simple_new(taken, name=self.name)\n\n    @final\n    def _maybe_disallow_fill(self, allow_fill: bool, fill_value, indices) -> bool:\n        \"\"\"\n        We only use pandas-style take when allow_fill is True _and_\n        fill_value is not None.\n        \"\"\"\n        if allow_fill and fill_value is not None:\n            # only fill if we are passing a non-None fill_value\n            if self._can_hold_na:\n                if (indices < -1).any():\n                    raise ValueError(\n                        \"When allow_fill=True and fill_value is not None, \"\n                        \"all indices must be >= -1\"\n                    )\n            else:\n                cls_name = type(self).__name__\n                raise ValueError(\n                    f\"Unable to fill values because {cls_name} cannot contain NA\"\n                )\n        else:\n            allow_fill = False\n        return allow_fill\n\n    _index_shared_docs[\n        \"repeat\"\n    ] = \"\"\"\n        Repeat elements of a %(klass)s.\n\n        Returns a new %(klass)s where each element of the current %(klass)s\n        is repeated consecutively a given number of times.\n\n        Parameters\n        ----------\n        repeats : int or array of ints\n            The number of repetitions for each element. This should be a\n            non-negative integer. Repeating 0 times will return an empty\n            %(klass)s.\n        axis : None\n            Must be ``None``. Has no effect but is accepted for compatibility\n            with numpy.\n\n        Returns\n        -------\n        repeated_index : %(klass)s\n            Newly created %(klass)s with repeated elements.\n\n        See Also\n        --------\n        Series.repeat : Equivalent function for Series.\n        numpy.repeat : Similar method for :class:`numpy.ndarray`.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx\n        Index(['a', 'b', 'c'], dtype='object')\n        >>> idx.repeat(2)\n        Index(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')\n        >>> idx.repeat([1, 2, 3])\n        Index(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')\n        \"\"\"\n\n    @Appender(_index_shared_docs[\"repeat\"] % _index_doc_kwargs)\n    def repeat(self, repeats, axis=None):\n        repeats = ensure_platform_int(repeats)\n        nv.validate_repeat((), {\"axis\": axis})\n        res_values = self._values.repeat(repeats)\n\n        return type(self)._simple_new(res_values, name=self.name)\n\n    # --------------------------------------------------------------------\n    # Copying Methods\n\n    def copy(\n        self: _IndexT,\n        name: Optional[Hashable] = None,\n        deep: bool = False,\n        dtype: Optional[Dtype] = None,\n        names: Optional[Sequence[Hashable]] = None,\n    ) -> _IndexT:\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n\n            .. deprecated:: 1.2.0\n                use ``astype`` method instead.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        name = self._validate_names(name=name, names=names, deep=deep)[0]\n        if deep:\n            new_index = self._shallow_copy(self._data.copy(), name=name)\n        else:\n            new_index = self._shallow_copy(name=name)\n\n        if dtype:\n            warnings.warn(\n                \"parameter dtype is deprecated and will be removed in a future \"\n                \"version. Use the astype method instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            new_index = new_index.astype(dtype)\n        return new_index\n\n    @final\n    def __copy__(self, **kwargs):\n        return self.copy(**kwargs)\n\n    @final\n    def __deepcopy__(self, memo=None):\n        \"\"\"\n        Parameters\n        ----------\n        memo, default None\n            Standard signature. Unused\n        \"\"\"\n        return self.copy(deep=True)\n\n    # --------------------------------------------------------------------\n    # Rendering Methods\n\n    @final\n    def __repr__(self) -> str_t:\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        return f\"{klass_name}({data}{prepr})\"\n\n    def _format_space(self) -> str_t:\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"\n\n    @property\n    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint\n\n    def _format_data(self, name=None) -> str_t:\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n        # do we want to justify (only do so for non-objects)\n        is_justify = True\n\n        if self.inferred_type == \"string\":\n            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            # error: \"Index\" has no attribute \"categories\"\n            if is_object_dtype(self.categories):  # type: ignore[attr-defined]\n                is_justify = False\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )\n\n    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)\n\n    def _mpl_repr(self):\n        # how to represent ourselves to matplotlib\n        return self.values\n\n    def format(\n        self,\n        name: bool = False,\n        formatter: Optional[Callable] = None,\n        na_rep: str_t = \"NaN\",\n    ) -> List[str_t]:\n        \"\"\"\n        Render a string representation of the Index.\n        \"\"\"\n        header = []\n        if name:\n            header.append(\n                pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                if self.name is not None\n                else \"\"\n            )\n\n        if formatter is not None:\n            return header + list(self.map(formatter))\n\n        return self._format_with_header(header, na_rep=na_rep)\n\n    def _format_with_header(\n        self, header: List[str_t], na_rep: str_t = \"NaN\"\n    ) -> List[str_t]:\n        from pandas.io.formats.format import format_array\n\n        values = self._values\n\n        if is_object_dtype(values.dtype):\n            values = lib.maybe_convert_objects(values, safe=1)\n\n            result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n            # could have nans\n            mask = isna(values)\n            if mask.any():\n                result_arr = np.array(result)\n                result_arr[mask] = na_rep\n                result = result_arr.tolist()\n        else:\n            result = trim_front(format_array(values, None, justify=\"left\"))\n        return header + result\n\n    def to_native_types(self, slicer=None, **kwargs):\n        \"\"\"\n        Format specified values of `self` and return them.\n\n        .. deprecated:: 1.2.0\n\n        Parameters\n        ----------\n        slicer : int, array-like\n            An indexer into `self` that specifies which values\n            are used in the formatting process.\n        kwargs : dict\n            Options for specifying how the values should be formatted.\n            These options include the following:\n\n            1) na_rep : str\n                The value that serves as a placeholder for NULL values\n            2) quoting : bool or None\n                Whether or not there are quoted values in `self`\n            3) date_format : str\n                The format used to represent date-like values.\n\n        Returns\n        -------\n        numpy.ndarray\n            Formatted values.\n        \"\"\"\n        warnings.warn(\n            \"The 'to_native_types' method is deprecated and will be removed in \"\n            \"a future version. Use 'astype(str)' instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        values = self\n        if slicer is not None:\n            values = values[slicer]\n        return values._format_native_types(**kwargs)\n\n    def _format_native_types(self, na_rep=\"\", quoting=None, **kwargs):\n        \"\"\"\n        Actually format specific types of the index.\n        \"\"\"\n        mask = isna(self)\n        if not self.is_object() and not quoting:\n            values = np.asarray(self).astype(str)\n        else:\n            values = np.array(self, dtype=object, copy=True)\n\n        values[mask] = na_rep\n        return values\n\n    def _summary(self, name=None) -> str_t:\n        \"\"\"\n        Return a summarized representation.\n\n        Parameters\n        ----------\n        name : str\n            name to use in the summary representation\n\n        Returns\n        -------\n        String with a summarized representation of the index\n        \"\"\"\n        if len(self) > 0:\n            head = self[0]\n            if hasattr(head, \"format\") and not isinstance(head, str):\n                head = head.format()\n            tail = self[-1]\n            if hasattr(tail, \"format\") and not isinstance(tail, str):\n                tail = tail.format()\n            index_summary = f\", {head} to {tail}\"\n        else:\n            index_summary = \"\"\n\n        if name is None:\n            name = type(self).__name__\n        return f\"{name}: {len(self)} entries{index_summary}\"\n\n    # --------------------------------------------------------------------\n    # Conversion Methods\n\n    def to_flat_index(self):\n        \"\"\"\n        Identity method.\n\n        .. versionadded:: 0.24.0\n\n        This is implemented for compatibility with subclass implementations\n        when chaining.\n\n        Returns\n        -------\n        pd.Index\n            Caller.\n\n        See Also\n        --------\n        MultiIndex.to_flat_index : Subclass implementation.\n        \"\"\"\n        return self\n\n    def to_series(self, index=None, name=None):\n        \"\"\"\n        Create a Series with both index and values equal to the index keys.\n\n        Useful with map for returning an indexer based on an index.\n\n        Parameters\n        ----------\n        index : Index, optional\n            Index of resulting Series. If None, defaults to original index.\n        name : str, optional\n            Name of resulting Series. If None, defaults to name of original\n            index.\n\n        Returns\n        -------\n        Series\n            The dtype will be based on the type of the Index values.\n\n        See Also\n        --------\n        Index.to_frame : Convert an Index to a DataFrame.\n        Series.to_frame : Convert Series to DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n\n        By default, the original Index and original name is reused.\n\n        >>> idx.to_series()\n        animal\n        Ant      Ant\n        Bear    Bear\n        Cow      Cow\n        Name: animal, dtype: object\n\n        To enforce a new Index, specify new labels to ``index``:\n\n        >>> idx.to_series(index=[0, 1, 2])\n        0     Ant\n        1    Bear\n        2     Cow\n        Name: animal, dtype: object\n\n        To override the name of the resulting column, specify `name`:\n\n        >>> idx.to_series(name='zoo')\n        animal\n        Ant      Ant\n        Bear    Bear\n        Cow      Cow\n        Name: zoo, dtype: object\n        \"\"\"\n        from pandas import Series\n\n        if index is None:\n            index = self._shallow_copy()\n        if name is None:\n            name = self.name\n\n        return Series(self._values.copy(), index=index, name=name)\n\n    def to_frame(self, index: bool = True, name=None):\n        \"\"\"\n        Create a DataFrame with a column containing the Index.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        index : bool, default True\n            Set the index of the returned DataFrame as the original Index.\n\n        name : object, default None\n            The passed name should substitute for the index name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame containing the original Index data.\n\n        See Also\n        --------\n        Index.to_series : Convert an Index to a Series.\n        Series.to_frame : Convert Series to DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n        >>> idx.to_frame()\n               animal\n        animal\n        Ant       Ant\n        Bear     Bear\n        Cow       Cow\n\n        By default, the original Index is reused. To enforce a new Index:\n\n        >>> idx.to_frame(index=False)\n            animal\n        0   Ant\n        1  Bear\n        2   Cow\n\n        To override the name of the resulting column, specify `name`:\n\n        >>> idx.to_frame(index=False, name='zoo')\n            zoo\n        0   Ant\n        1  Bear\n        2   Cow\n        \"\"\"\n        from pandas import DataFrame\n\n        if name is None:\n            name = self.name or 0\n        result = DataFrame({name: self._values.copy()})\n\n        if index:\n            result.index = self\n        return result\n\n    # --------------------------------------------------------------------\n    # Name-Centric Methods\n\n    @property\n    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value\n\n    @final\n    def _validate_names(\n        self, name=None, names=None, deep: bool = False\n    ) -> List[Hashable]:\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            new_names = deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            new_names = names\n        elif not is_list_like(name):\n            new_names = [name]\n        else:\n            new_names = name\n\n        if len(new_names) != len(self.names):\n            raise ValueError(\n                f\"Length of new names must be {len(self.names)}, got {len(new_names)}\"\n            )\n\n        # All items in 'new_names' need to be hashable\n        validate_all_hashable(*new_names, error_name=f\"{type(self).__name__}.name\")\n\n        return new_names\n\n    def _get_names(self):\n        return FrozenList((self.name,))\n\n    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        validate_all_hashable(*values, error_name=f\"{type(self).__name__}.name\")\n\n        self._name = values[0]\n\n    names = property(fset=_set_names, fget=_get_names)\n\n    @final\n    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n\n        names : label or list of label or dict-like for MultiIndex\n            Name(s) to set.\n\n            .. versionchanged:: 1.3.0\n\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex and names is not dict-like, level(s) to set\n            (None for all levels). Otherwise level must be None.\n\n            .. versionchanged:: 1.3.0\n\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index or None\n            The same type as the caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n\n        When renaming levels with a dict, levels can not be passed.\n\n        >>> idx.set_names({'kind': 'snake'})\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['snake', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        elif level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        elif not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        elif is_dict_like(names) and not isinstance(self, ABCMultiIndex):\n            raise TypeError(\"Can only pass dict-like as `names` for MultiIndex.\")\n\n        elif is_dict_like(names) and level is not None:\n            raise TypeError(\"Can not pass level for dictlike `names`.\")\n\n        if isinstance(self, ABCMultiIndex) and is_dict_like(names) and level is None:\n            # Transform dict to list of new names and corresponding levels\n            level, names_adjusted = [], []\n            for i, name in enumerate(self.names):\n                if name in names.keys():\n                    level.append(i)\n                    names_adjusted.append(names[name])\n            names = names_adjusted\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx\n\n    def rename(self, name, inplace=False):\n        \"\"\"\n        Alter Index or MultiIndex name.\n\n        Able to set new names without level. Defaults to returning new index.\n        Length of names must match number of levels in MultiIndex.\n\n        Parameters\n        ----------\n        name : label or list of labels\n            Name(s) to set.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index or None\n            The same type as the caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        Index.set_names : Able to set new names partially and by level.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n        >>> idx.rename('grade')\n        Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]],\n        ...                                   names=['kind', 'year'])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.rename(['species', 'year'])\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        >>> idx.rename('species')\n        Traceback (most recent call last):\n        TypeError: Must pass list-like as `names`.\n        \"\"\"\n        return self.set_names([name], inplace=inplace)\n\n    # --------------------------------------------------------------------\n    # Level-Centric Methods\n\n    @property\n    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1\n\n    def _sort_levels_monotonic(self):\n        \"\"\"\n        Compat with MultiIndex.\n        \"\"\"\n        return self\n\n    @final\n    def _validate_index_level(self, level):\n        \"\"\"\n        Validate index level.\n\n        For single-level Index getting level number is a no-op, but some\n        verification must be done like in MultiIndex.\n\n        \"\"\"\n        if isinstance(level, int):\n            if level < 0 and level != -1:\n                raise IndexError(\n                    \"Too many levels: Index has only 1 level, \"\n                    f\"{level} is not a valid level number\"\n                )\n            elif level > 0:\n                raise IndexError(\n                    f\"Too many levels: Index has only 1 level, not {level + 1}\"\n                )\n        elif level != self.name:\n            raise KeyError(\n                f\"Requested level ({level}) does not match index name ({self.name})\"\n            )\n\n    def _get_level_number(self, level) -> int:\n        self._validate_index_level(level)\n        return 0\n\n    def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n        \"\"\"\n        For internal compatibility with the Index API.\n\n        Sort the Index. This is for compat with MultiIndex\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            False to sort in descending order\n\n        level, sort_remaining are compat parameters\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        if not isinstance(ascending, (list, bool)):\n            raise TypeError(\n                \"ascending must be a single bool value or\"\n                \"a list of bool values of length 1\"\n            )\n\n        if isinstance(ascending, list):\n            if len(ascending) != 1:\n                raise TypeError(\"ascending must be a list of bool values of length 1\")\n            ascending = ascending[0]\n\n        if not isinstance(ascending, bool):\n            raise TypeError(\"ascending must be a bool value\")\n\n        return self.sort_values(return_indexer=True, ascending=ascending)\n\n    def _get_level_values(self, level):\n        \"\"\"\n        Return an Index of values for requested level.\n\n        This is primarily useful to get an individual level of values from a\n        MultiIndex, but is provided on Index as well for compatibility.\n\n        Parameters\n        ----------\n        level : int or str\n            It is either the integer position or the name of the level.\n\n        Returns\n        -------\n        Index\n            Calling object, as there is only one level in the Index.\n\n        See Also\n        --------\n        MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n        Notes\n        -----\n        For Index, level should be 0, since there are no multiple levels.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abc'))\n        >>> idx\n        Index(['a', 'b', 'c'], dtype='object')\n\n        Get level values by supplying `level` as integer:\n\n        >>> idx.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object')\n        \"\"\"\n        self._validate_index_level(level)\n        return self\n\n    get_level_values = _get_level_values\n\n    @final\n    def droplevel(self, level=0):\n        \"\"\"\n        Return index with requested level(s) removed.\n\n        If resulting index has only 1 level left, the result will be\n        of Index type, not MultiIndex.\n\n        Parameters\n        ----------\n        level : int, str, or list-like, default 0\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or indexes of levels.\n\n        Returns\n        -------\n        Index or MultiIndex\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays(\n        ... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\n        >>> mi\n        MultiIndex([(1, 3, 5),\n                    (2, 4, 6)],\n                   names=['x', 'y', 'z'])\n\n        >>> mi.droplevel()\n        MultiIndex([(3, 5),\n                    (4, 6)],\n                   names=['y', 'z'])\n\n        >>> mi.droplevel(2)\n        MultiIndex([(1, 3),\n                    (2, 4)],\n                   names=['x', 'y'])\n\n        >>> mi.droplevel('z')\n        MultiIndex([(1, 3),\n                    (2, 4)],\n                   names=['x', 'y'])\n\n        >>> mi.droplevel(['x', 'y'])\n        Int64Index([5, 6], dtype='int64', name='z')\n        \"\"\"\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n        return self._drop_level_numbers(levnums)\n\n    @final\n    def _drop_level_numbers(self, levnums: List[int]):\n        \"\"\"\n        Drop MultiIndex levels by level _number_, not name.\n        \"\"\"\n\n        if not levnums and not isinstance(self, ABCMultiIndex):\n            return self\n        if len(levnums) >= self.nlevels:\n            raise ValueError(\n                f\"Cannot remove {len(levnums)} levels from an index with \"\n                f\"{self.nlevels} levels: at least one level must be left.\"\n            )\n        # The two checks above guarantee that here self is a MultiIndex\n        self = cast(\"MultiIndex\", self)\n\n        new_levels = list(self.levels)\n        new_codes = list(self.codes)\n        new_names = list(self.names)\n\n        for i in levnums:\n            new_levels.pop(i)\n            new_codes.pop(i)\n            new_names.pop(i)\n\n        if len(new_levels) == 1:\n\n            # set nan if needed\n            mask = new_codes[0] == -1\n            result = new_levels[0].take(new_codes[0])\n            if mask.any():\n                result = result.putmask(mask, np.nan)\n\n            result._name = new_names[0]\n            return result\n        else:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=new_names,\n                verify_integrity=False,\n            )\n\n    def _get_grouper_for_level(self, mapper, level=None):\n        \"\"\"\n        Get index grouper corresponding to an index level\n\n        Parameters\n        ----------\n        mapper: Group mapping function or None\n            Function mapping index values to groups\n        level : int or None\n            Index level\n\n        Returns\n        -------\n        grouper : Index\n            Index of values to group on.\n        labels : ndarray of int or None\n            Array of locations in level_index.\n        uniques : Index or None\n            Index of unique values for level.\n        \"\"\"\n        assert level is None or level == 0\n        if mapper is None:\n            grouper = self\n        else:\n            grouper = self.map(mapper)\n\n        return grouper, None, None\n\n    # --------------------------------------------------------------------\n    # Introspection Methods\n\n    @final\n    @property\n    def is_monotonic(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing\n\n    @property\n    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing\n\n    @property\n    def is_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1]).is_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2]).is_monotonic_decreasing\n        True\n        >>> Index([3, 1, 2]).is_monotonic_decreasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_decreasing\n\n    @final\n    @property\n    def _is_strictly_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Return if the index is strictly monotonic increasing\n        (only increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3])._is_strictly_monotonic_increasing\n        True\n        >>> Index([1, 2, 2])._is_strictly_monotonic_increasing\n        False\n        >>> Index([1, 3, 2])._is_strictly_monotonic_increasing\n        False\n        \"\"\"\n        return self.is_unique and self.is_monotonic_increasing\n\n    @final\n    @property\n    def _is_strictly_monotonic_decreasing(self) -> bool:\n        \"\"\"\n        Return if the index is strictly monotonic decreasing\n        (only decreasing) values.\n\n        Examples\n        --------\n        >>> Index([3, 2, 1])._is_strictly_monotonic_decreasing\n        True\n        >>> Index([3, 2, 2])._is_strictly_monotonic_decreasing\n        False\n        >>> Index([3, 1, 2])._is_strictly_monotonic_decreasing\n        False\n        \"\"\"\n        return self.is_unique and self.is_monotonic_decreasing\n\n    @cache_readonly\n    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique\n\n    @final\n    @property\n    def has_duplicates(self) -> bool:\n        \"\"\"\n        Check if the Index has duplicate values.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index has duplicate values.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 5, 7, 7])\n        >>> idx.has_duplicates\n        True\n\n        >>> idx = pd.Index([1, 5, 7])\n        >>> idx.has_duplicates\n        False\n\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.has_duplicates\n        True\n\n        >>> idx = pd.Index([\"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.has_duplicates\n        False\n        \"\"\"\n        return not self.is_unique\n\n    @final\n    def is_boolean(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of booleans.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of booleans.\n\n        See Also\n        --------\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([True, False, True])\n        >>> idx.is_boolean()\n        True\n\n        >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n        >>> idx.is_boolean()\n        False\n\n        >>> idx = pd.Index([True, False, \"True\"])\n        >>> idx.is_boolean()\n        False\n        \"\"\"\n        return self.inferred_type in [\"boolean\"]\n\n    @final\n    def is_integer(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of integers.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of integers.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_integer()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_integer()\n        False\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_integer()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\"]\n\n    @final\n    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]\n\n    @final\n    def is_numeric(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of numeric data.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of numeric data.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_numeric()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4.0])\n        >>> idx.is_numeric()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_numeric()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n        >>> idx.is_numeric()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n        >>> idx.is_numeric()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\", \"floating\"]\n\n    @final\n    def is_object(self) -> bool:\n        \"\"\"\n        Check if the Index is of the object dtype.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index is of the object dtype.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n        >>> idx.is_object()\n        True\n\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_object()\n        False\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_object()\n        False\n        \"\"\"\n        return is_object_dtype(self.dtype)\n\n    @final\n    def is_categorical(self) -> bool:\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        bool\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]\n\n    @final\n    def is_interval(self) -> bool:\n        \"\"\"\n        Check if the Index holds Interval objects.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index holds Interval objects.\n\n        See Also\n        --------\n        IntervalIndex : Index for Interval objects.\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([pd.Interval(left=0, right=5),\n        ...                 pd.Interval(left=5, right=10)])\n        >>> idx.is_interval()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_interval()\n        False\n        \"\"\"\n        return self.inferred_type in [\"interval\"]\n\n    @final\n    def is_mixed(self) -> bool:\n        \"\"\"\n        Check if the Index holds data with mixed data types.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index holds data with mixed data types.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['a', np.nan, 'b'])\n        >>> idx.is_mixed()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 5.0])\n        >>> idx.is_mixed()\n        False\n        \"\"\"\n        warnings.warn(\n            \"Index.is_mixed is deprecated and will be removed in a future version. \"\n            \"Check index.inferred_type directly instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.inferred_type in [\"mixed\"]\n\n    @final\n    def holds_integer(self) -> bool:\n        \"\"\"\n        Whether the type is an integer type.\n        \"\"\"\n        return self.inferred_type in [\"integer\", \"mixed-integer\"]\n\n    @cache_readonly\n    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self._values, skipna=False)\n\n    @cache_readonly\n    def _is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self._values))\n\n    @cache_readonly\n    @final\n    def is_all_dates(self):\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        warnings.warn(\n            \"Index.is_all_dates is deprecated, will be removed in a future version.  \"\n            \"check index.inferred_type instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self._is_all_dates\n\n    # --------------------------------------------------------------------\n    # Pickle Methods\n\n    def __reduce__(self):\n        d = {\"data\": self._data}\n        d.update(self._get_attributes_dict())\n        return _new_Index, (type(self), d), None\n\n    # --------------------------------------------------------------------\n    # Null Handling Methods\n\n    _na_value = np.nan\n    \"\"\"The expected NA value to use with this index.\"\"\"\n\n    @cache_readonly\n    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values\n\n    @cache_readonly\n    def hasnans(self) -> bool:\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False\n\n    @final\n    def isna(self):\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n        mapped to ``True`` values.\n        Everything else get mapped to ``False`` values. Characters such as\n        empty strings `''` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        numpy.ndarray\n            A boolean array of whether my values are NA.\n\n        See Also\n        --------\n        Index.notna : Boolean inverse of isna.\n        Index.dropna : Omit entries with missing values.\n        isna : Top-level isna.\n        Series.isna : Detect missing values in Series object.\n\n        Examples\n        --------\n        Show which entries in a pandas.Index are NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.isna()\n        array([False, False,  True])\n\n        Empty strings are not considered NA values. None is considered an NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.isna()\n        array([False, False, False,  True])\n\n        For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n        >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n        ...                         pd.Timestamp(''), None, pd.NaT])\n        >>> idx\n        DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                      dtype='datetime64[ns]', freq=None)\n        >>> idx.isna()\n        array([False,  True,  True,  True])\n        \"\"\"\n        return self._isnan\n\n    isnull = isna\n\n    @final\n    def notna(self):\n        \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to ``True``. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n        values.\n\n        Returns\n        -------\n        numpy.ndarray\n            Boolean array to indicate which entries are not NA.\n\n        See Also\n        --------\n        Index.notnull : Alias of notna.\n        Index.isna: Inverse of notna.\n        notna : Top-level notna.\n\n        Examples\n        --------\n        Show which entries in an Index are not NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.notna()\n        array([ True,  True, False])\n\n        Empty strings are not considered NA values. None is considered a NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.notna()\n        array([ True,  True,  True, False])\n        \"\"\"\n        return ~self.isna()\n\n    notnull = notna\n\n    def fillna(self, value=None, downcast=None):\n        \"\"\"\n        Fill NA/NaN values with the specified value.\n\n        Parameters\n        ----------\n        value : scalar\n            Scalar value to use to fill holes (e.g. 0).\n            This value cannot be a list-likes.\n        downcast : dict, default is None\n            A dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible).\n\n        Returns\n        -------\n        Index\n\n        See Also\n        --------\n        DataFrame.fillna : Fill NaN values of a DataFrame.\n        Series.fillna : Fill NaN Values of a Series.\n        \"\"\"\n        value = self._require_scalar(value)\n        if self.hasnans:\n            result = self.putmask(self._isnan, value)\n            if downcast is None:\n                # no need to care metadata other than name\n                # because it can't have freq if\n                return Index(result, name=self.name)\n        return self._shallow_copy()\n\n    def dropna(self, how=\"any\"):\n        \"\"\"\n        Return Index without NA/NaN values.\n\n        Parameters\n        ----------\n        how : {'any', 'all'}, default 'any'\n            If the Index is a MultiIndex, drop the value when any or all levels\n            are NaN.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        if how not in (\"any\", \"all\"):\n            raise ValueError(f\"invalid how option: {how}\")\n\n        if self.hasnans:\n            res_values = self._values[~self._isnan]\n            return type(self)._simple_new(res_values, name=self.name)\n        return self._shallow_copy()\n\n    # --------------------------------------------------------------------\n    # Uniqueness Methods\n\n    def unique(self, level=None):\n        \"\"\"\n        Return unique values in the index.\n\n        Unique values are returned in order of appearance, this does NOT sort.\n\n        Parameters\n        ----------\n        level : int or str, optional, default None\n            Only return values from specified level (for MultiIndex).\n\n        Returns\n        -------\n        Index without duplicates\n\n        See Also\n        --------\n        unique : Numpy array of unique values in that column.\n        Series.unique : Return unique values of Series object.\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n\n        if self.is_unique:\n            return self._shallow_copy()\n\n        result = super().unique()\n        return self._shallow_copy(result)\n\n    @final\n    def drop_duplicates(self, keep=\"first\"):\n        \"\"\"\n        Return Index with duplicate values removed.\n\n        Parameters\n        ----------\n        keep : {'first', 'last', ``False``}, default 'first'\n            - 'first' : Drop duplicates except for the first occurrence.\n            - 'last' : Drop duplicates except for the last occurrence.\n            - ``False`` : Drop all duplicates.\n\n        Returns\n        -------\n        deduplicated : Index\n\n        See Also\n        --------\n        Series.drop_duplicates : Equivalent method on Series.\n        DataFrame.drop_duplicates : Equivalent method on DataFrame.\n        Index.duplicated : Related method on Index, indicating duplicate\n            Index values.\n\n        Examples\n        --------\n        Generate an pandas.Index with duplicate values.\n\n        >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\n        The `keep` parameter controls  which duplicate values are removed.\n        The value 'first' keeps the first occurrence for each\n        set of duplicated entries. The default value of keep is 'first'.\n\n        >>> idx.drop_duplicates(keep='first')\n        Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\n        The value 'last' keeps the last occurrence for each set of duplicated\n        entries.\n\n        >>> idx.drop_duplicates(keep='last')\n        Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\n        The value ``False`` discards all sets of duplicated entries.\n\n        >>> idx.drop_duplicates(keep=False)\n        Index(['cow', 'beetle', 'hippo'], dtype='object')\n        \"\"\"\n        if self.is_unique:\n            return self._shallow_copy()\n\n        return super().drop_duplicates(keep=keep)\n\n    def duplicated(self, keep=\"first\"):\n        \"\"\"\n        Indicate duplicate index values.\n\n        Duplicated values are indicated as ``True`` values in the resulting\n        array. Either all duplicates, all except the first, or all except the\n        last occurrence of duplicates can be indicated.\n\n        Parameters\n        ----------\n        keep : {'first', 'last', False}, default 'first'\n            The value or values in a set of duplicates to mark as missing.\n\n            - 'first' : Mark duplicates as ``True`` except for the first\n              occurrence.\n            - 'last' : Mark duplicates as ``True`` except for the last\n              occurrence.\n            - ``False`` : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.duplicated : Equivalent method on pandas.Series.\n        DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n        Index.drop_duplicates : Remove duplicate values from Index.\n\n        Examples\n        --------\n        By default, for each set of duplicated values, the first occurrence is\n        set to False and all others to True:\n\n        >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n        >>> idx.duplicated()\n        array([False, False,  True, False,  True])\n\n        which is equivalent to\n\n        >>> idx.duplicated(keep='first')\n        array([False, False,  True, False,  True])\n\n        By using 'last', the last occurrence of each set of duplicated values\n        is set on False and all others on True:\n\n        >>> idx.duplicated(keep='last')\n        array([ True, False,  True, False, False])\n\n        By setting keep on ``False``, all duplicates are True:\n\n        >>> idx.duplicated(keep=False)\n        array([ True, False,  True, False,  True])\n        \"\"\"\n        if self.is_unique:\n            # fastpath available bc we are immutable\n            return np.zeros(len(self), dtype=bool)\n        return super().duplicated(keep=keep)\n\n    def _get_unique_index(self, dropna: bool = False):\n        \"\"\"\n        Returns an index containing unique values.\n\n        Parameters\n        ----------\n        dropna : bool, default False\n            If True, NaN values are dropped.\n\n        Returns\n        -------\n        uniques : index\n        \"\"\"\n        if self.is_unique and not dropna:\n            return self\n\n        if not self.is_unique:\n            values = self.unique()\n            if not isinstance(self, ABCMultiIndex):\n                # extract an array to pass to _shallow_copy\n                values = values._data\n        else:\n            values = self._values\n\n        if dropna and not isinstance(self, ABCMultiIndex):\n            # isna not defined for MultiIndex\n            if self.hasnans:\n                values = values[~isna(values)]\n\n        return self._shallow_copy(values)\n\n    # --------------------------------------------------------------------\n    # Arithmetic & Logical Methods\n\n    def __iadd__(self, other):\n        # alias for __add__\n        return self + other\n\n    @final\n    def __and__(self, other):\n        warnings.warn(\n            \"Index.__and__ operating as a set operation is deprecated, \"\n            \"in the future this will be a logical operation matching \"\n            \"Series.__and__.  Use index.intersection(other) instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.intersection(other)\n\n    @final\n    def __or__(self, other):\n        warnings.warn(\n            \"Index.__or__ operating as a set operation is deprecated, \"\n            \"in the future this will be a logical operation matching \"\n            \"Series.__or__.  Use index.union(other) instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.union(other)\n\n    @final\n    def __xor__(self, other):\n        warnings.warn(\n            \"Index.__xor__ operating as a set operation is deprecated, \"\n            \"in the future this will be a logical operation matching \"\n            \"Series.__xor__.  Use index.symmetric_difference(other) instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        return self.symmetric_difference(other)\n\n    @final\n    def __nonzero__(self):\n        raise ValueError(\n            f\"The truth value of a {type(self).__name__} is ambiguous. \"\n            \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n        )\n\n    __bool__ = __nonzero__\n\n    # --------------------------------------------------------------------\n    # Set Operation Methods\n\n    def _get_reconciled_name_object(self, other):\n        \"\"\"\n        If the result of a set operation will be self,\n        return self, unless the name changes, in which\n        case make a shallow copy of self.\n        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self.rename(name)\n        return self\n\n    @final\n    def _validate_sort_keyword(self, sort):\n        if sort not in [None, False]:\n            raise ValueError(\n                \"The 'sort' keyword only takes the values of \"\n                f\"None or False; {sort} was passed.\"\n            )\n\n    @final\n    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two Index objects.\n\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : bool or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` or `other` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        union : Index\n\n        Examples\n        --------\n        Union matching dtypes\n\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.union(idx2)\n        Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)\n        Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n\n        MultiIndex case\n\n        >>> idx1 = pd.MultiIndex.from_arrays(\n        ...     [[1, 1, 2, 2], [\"Red\", \"Blue\", \"Red\", \"Blue\"]]\n        ... )\n        >>> idx1\n        MultiIndex([(1,  'Red'),\n            (1, 'Blue'),\n            (2,  'Red'),\n            (2, 'Blue')],\n           )\n        >>> idx2 = pd.MultiIndex.from_arrays(\n        ...     [[3, 3, 2, 2], [\"Red\", \"Green\", \"Red\", \"Green\"]]\n        ... )\n        >>> idx2\n        MultiIndex([(3,   'Red'),\n            (3, 'Green'),\n            (2,   'Red'),\n            (2, 'Green')],\n           )\n        >>> idx1.union(idx2)\n        MultiIndex([(1,  'Blue'),\n            (1,   'Red'),\n            (2,  'Blue'),\n            (2, 'Green'),\n            (2,   'Red'),\n            (3, 'Green'),\n            (3,   'Red')],\n           )\n        >>> idx1.union(idx2, sort=False)\n        MultiIndex([(1,   'Red'),\n            (1,  'Blue'),\n            (2,   'Red'),\n            (2,  'Blue'),\n            (3,   'Red'),\n            (3, 'Green'),\n            (2, 'Green')],\n           )\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_name = self._convert_can_do_setop(other)\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            if isinstance(self, ABCMultiIndex) and not is_object_dtype(\n                unpack_nested_dtype(other)\n            ):\n                raise NotImplementedError(\n                    \"Can only union MultiIndex with MultiIndex or Index of tuples, \"\n                    \"try mi.to_flat_index().union(other) instead.\"\n                )\n\n            dtype = find_common_type([self.dtype, other.dtype])\n            if self._is_numeric_dtype and other._is_numeric_dtype:\n                # Right now, we treat union(int, float) a bit special.\n                # See https://github.com/pandas-dev/pandas/issues/26778 for discussion\n                # We may change union(int, float) to go to object.\n                # float | [u]int -> float  (the special case)\n                # <T>   | <T>    -> T\n                # <T>   | <U>    -> object\n                if not (is_integer_dtype(self.dtype) and is_integer_dtype(other.dtype)):\n                    dtype = \"float64\"\n                else:\n                    # one is int64 other is uint64\n                    dtype = object\n\n            left = self.astype(dtype, copy=False)\n            right = other.astype(dtype, copy=False)\n            return left.union(right, sort=sort)\n\n        elif not len(other) or self.equals(other):\n            # NB: whether this (and the `if not len(self)` check below) come before\n            #  or after the is_dtype_equal check above affects the returned dtype\n            return self._get_reconciled_name_object(other)\n\n        elif not len(self):\n            return other._get_reconciled_name_object(self)\n\n        result = self._union(other, sort=sort)\n\n        return self._wrap_setop_result(other, result)\n\n    def _union(self, other, sort):\n        \"\"\"\n        Specific union logic should go here. In subclasses, union behavior\n        should be overwritten here rather than in `self.union`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        # TODO(EA): setops-refactor, clean all this up\n        lvals = self._values\n        rvals = other._values\n\n        if sort is None and self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._outer_indexer(lvals, rvals)[0]\n            except (TypeError, IncompatibleFrequency):\n                # incomparable objects\n                result = list(lvals)\n\n                # worth making this faster? a very unusual case\n                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n                result = Index(result)._values  # do type inference here\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)\n                missing = (indexer == -1).nonzero()[0]\n            else:\n                missing = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n            if len(missing) > 0:\n                other_diff = algos.take_nd(rvals, missing, allow_fill=False)\n                result = concat_compat((lvals, other_diff))\n\n            else:\n                result = lvals\n\n            result = _maybe_try_sort(result, sort)\n\n        return result\n\n    @final\n    def _wrap_setop_result(self, other, result):\n        if needs_i8_conversion(self.dtype) and isinstance(result, np.ndarray):\n            self = cast(\"DatetimeIndexOpsMixin\", self)\n            result = type(self._data)._simple_new(result, dtype=self.dtype)\n        elif is_categorical_dtype(self.dtype) and isinstance(result, np.ndarray):\n            result = Categorical(result, dtype=self.dtype)\n\n        name = get_op_result_name(self, other)\n        if isinstance(result, Index):\n            if result.name != name:\n                return result.rename(name)\n            return result\n        else:\n            return self._shallow_copy(result, name=name)\n\n    # TODO: standardize return type of non-union setops type(self vs other)\n    @final\n    def intersection(self, other, sort=False):\n        \"\"\"\n        Form the intersection of two Index objects.\n\n        This returns a new Index with elements common to the index and `other`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default from ``True`` to ``False``, to match\n               the behaviour of 0.23.4 and earlier.\n\n        Returns\n        -------\n        intersection : Index\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.intersection(idx2)\n        Int64Index([3, 4], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_name = self._convert_can_do_setop(other)\n\n        if self.equals(other):\n            if self.has_duplicates:\n                return self.unique()._get_reconciled_name_object(other)\n            return self._get_reconciled_name_object(other)\n\n        elif not self._should_compare(other):\n            # We can infer that the intersection is empty.\n            if isinstance(self, ABCMultiIndex):\n                return self[:0].rename(result_name)\n            return Index([], name=result_name)\n\n        elif not is_dtype_equal(self.dtype, other.dtype):\n            dtype = find_common_type([self.dtype, other.dtype])\n            this = self.astype(dtype, copy=False)\n            other = other.astype(dtype, copy=False)\n            return this.intersection(other, sort=sort)\n\n        result = self._intersection(other, sort=sort)\n        return self._wrap_setop_result(other, result)\n\n    def _intersection(self, other, sort=False):\n        \"\"\"\n        intersection specialized to the case with matching dtypes.\n        \"\"\"\n        # TODO(EA): setops-refactor, clean all this up\n        lvals = self._values\n        rvals = other._values\n\n        if self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._inner_indexer(lvals, rvals)[0]\n            except TypeError:\n                pass\n            else:\n                return algos.unique1d(result)\n\n        try:\n            indexer = other.get_indexer(lvals)\n        except (InvalidIndexError, IncompatibleFrequency):\n            # InvalidIndexError raised by get_indexer if non-unique\n            # IncompatibleFrequency raised by PeriodIndex.get_indexer\n            indexer, _ = other.get_indexer_non_unique(lvals)\n\n        mask = indexer != -1\n        indexer = indexer.take(mask.nonzero()[0])\n\n        result = other.take(indexer).unique()._values\n        result = _maybe_try_sort(result, sort)\n\n        # Intersection has to be unique\n        assert Index(result).is_unique\n\n        return result\n\n    @final\n    def difference(self, other, sort=None):\n        \"\"\"\n        Return a new Index with elements of index not in `other`.\n\n        This is the set difference of two Index objects.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default None\n            Whether to sort the resulting index. By default, the\n            values are attempted to be sorted, but any TypeError from\n            incomparable elements is caught by pandas.\n\n            * None : Attempt to sort the result, but catch any TypeErrors\n              from comparing incomparable elements.\n            * False : Do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        difference : Index\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([2, 1, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.difference(idx2)\n        Int64Index([1, 2], dtype='int64')\n        >>> idx1.difference(idx2, sort=False)\n        Int64Index([2, 1], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_name = self._convert_can_do_setop(other)\n\n        if self.equals(other):\n            # Note: we do not (yet) sort even if sort=None GH#24959\n            return self[:0].rename(result_name)\n\n        if len(other) == 0:\n            # Note: we do not (yet) sort even if sort=None GH#24959\n            return self.rename(result_name)\n\n        result = self._difference(other, sort=sort)\n        return self._wrap_setop_result(other, result)\n\n    def _difference(self, other, sort):\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n\n        label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n        the_diff = this._values.take(label_diff)\n        the_diff = _maybe_try_sort(the_diff, sort)\n\n        return the_diff\n\n    def symmetric_difference(self, other, result_name=None, sort=None):\n        \"\"\"\n        Compute the symmetric difference of two Index objects.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        result_name : str\n        sort : False or None, default None\n            Whether to sort the resulting index. By default, the\n            values are attempted to be sorted, but any TypeError from\n            incomparable elements is caught by pandas.\n\n            * None : Attempt to sort the result, but catch any TypeErrors\n              from comparing incomparable elements.\n            * False : Do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        symmetric_difference : Index\n\n        Notes\n        -----\n        ``symmetric_difference`` contains elements that appear in either\n        ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n        ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\n        dropped.\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([2, 3, 4, 5])\n        >>> idx1.symmetric_difference(idx2)\n        Int64Index([1, 5], dtype='int64')\n\n        You can also use the ``^`` operator:\n\n        >>> idx1 ^ idx2\n        Int64Index([1, 5], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_name_update = self._convert_can_do_setop(other)\n        if result_name is None:\n            result_name = result_name_update\n\n        if not self._should_compare(other):\n            return self.union(other, sort=sort).rename(result_name)\n        elif not is_dtype_equal(self.dtype, other.dtype):\n            dtype = find_common_type([self.dtype, other.dtype])\n            this = self.astype(dtype, copy=False)\n            that = other.astype(dtype, copy=False)\n            return this.symmetric_difference(that, sort=sort).rename(result_name)\n\n        this = self._get_unique_index()\n        other = other._get_unique_index()\n        indexer = this.get_indexer_for(other)\n\n        # {this} minus {other}\n        common_indexer = indexer.take((indexer != -1).nonzero()[0])\n        left_indexer = np.setdiff1d(\n            np.arange(this.size), common_indexer, assume_unique=True\n        )\n        left_diff = this._values.take(left_indexer)\n\n        # {other} minus {this}\n        right_indexer = (indexer == -1).nonzero()[0]\n        right_diff = other._values.take(right_indexer)\n\n        the_diff = concat_compat([left_diff, right_diff])\n        the_diff = _maybe_try_sort(the_diff, sort)\n\n        return Index(the_diff, name=result_name)\n\n    @final\n    def _assert_can_do_setop(self, other):\n        if not is_list_like(other):\n            raise TypeError(\"Input must be Index or array-like\")\n        return True\n\n    def _convert_can_do_setop(self, other):\n        if not isinstance(other, Index):\n            other = Index(other, name=self.name)\n            result_name = self.name\n        else:\n            result_name = get_op_result_name(self, other)\n        return other, result_name\n\n    # --------------------------------------------------------------------\n    # Indexing Methods\n\n    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location must satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if is_scalar(key) and isna(key) and not self.hasnans:\n            raise KeyError(key)\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc\n\n    _index_shared_docs[\n        \"get_indexer\"\n    ] = \"\"\"\n        Compute indexer and mask for new index given the current index. The\n        indexer should be then used as an input to ndarray.take to align the\n        current data to the new index.\n\n        .. warning::\n\n           Returns -1 for the values which do not match. For further explanation\n           see the example below.\n\n        Parameters\n        ----------\n        target : %(target_klass)s\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        limit : int, optional\n            Maximum number of consecutive labels in ``target`` to match for\n            inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations must\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        indexer : ndarray of int\n            Integers from 0 to n - 1 indicating that the index at these\n            positions matches the corresponding target values. Missing values\n            in the target are marked by -1.\n        %(raises_section)s\n        Examples\n        --------\n        >>> index = pd.Index(['c', 'a', 'b'])\n        >>> index.get_indexer(['a', 'b', 'x'])\n        array([ 1,  2, -1])\n\n        Notice that the return value is an array of locations in ``index``\n        and ``x`` is marked by -1, as it is not in ``index``.\n        \"\"\"\n\n    @Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\n    @final\n    def get_indexer(\n        self, target, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n\n        self._check_indexing_method(method)\n\n        if not self._index_as_unique:\n            raise InvalidIndexError(self._requires_unique_msg)\n\n        if not self._should_compare(target) and not is_interval_dtype(self.dtype):\n            # IntervalIndex get special treatment bc numeric scalars can be\n            #  matched to Interval scalars\n            return self._get_indexer_non_comparable(target, method=method, unique=True)\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        return self._get_indexer(target, method, limit, tolerance)\n\n    def _get_indexer(\n        self, target: Index, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            dtype = self._find_common_type_compat(target)\n\n            this = self.astype(dtype, copy=False)\n            target = target.astype(dtype, copy=False)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if method in [\"pad\", \"backfill\"]:\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._get_engine_target())\n\n        return ensure_platform_int(indexer)\n\n    @final\n    def _check_indexing_method(self, method):\n        \"\"\"\n        Raise if we have a get_indexer `method` that is not supported or valid.\n        \"\"\"\n        # GH#37871 for now this is only for IntervalIndex and CategoricalIndex\n        if not (is_interval_dtype(self.dtype) or is_categorical_dtype(self.dtype)):\n            return\n\n        if method is None:\n            return\n\n        if method in [\"bfill\", \"backfill\", \"pad\", \"ffill\", \"nearest\"]:\n            raise NotImplementedError(\n                f\"method {method} not yet implemented for {type(self).__name__}\"\n            )\n\n        raise ValueError(\"Invalid fill method\")\n\n    def _convert_tolerance(self, tolerance, target):\n        # override this method on subclasses\n        tolerance = np.asarray(tolerance)\n        if target.size != tolerance.size and tolerance.size > 1:\n            raise ValueError(\"list-like tolerance size must match target index size\")\n        return tolerance\n\n    @final\n    def _get_fill_indexer(\n        self, target: Index, method: str_t, limit=None, tolerance=None\n    ) -> np.ndarray:\n\n        target_values = target._get_engine_target()\n\n        if self.is_monotonic_increasing and target.is_monotonic_increasing:\n            engine_method = (\n                self._engine.get_pad_indexer\n                if method == \"pad\"\n                else self._engine.get_backfill_indexer\n            )\n            indexer = engine_method(target_values, limit)\n        else:\n            indexer = self._get_fill_indexer_searchsorted(target, method, limit)\n        if tolerance is not None and len(self):\n            indexer = self._filter_indexer_tolerance(target._values, indexer, tolerance)\n        return indexer\n\n    @final\n    def _get_fill_indexer_searchsorted(\n        self, target: Index, method: str_t, limit=None\n    ) -> np.ndarray:\n        \"\"\"\n        Fallback pad/backfill get_indexer that works for monotonic decreasing\n        indexes and non-monotonic targets.\n        \"\"\"\n        if limit is not None:\n            raise ValueError(\n                f\"limit argument for {repr(method)} method only well-defined \"\n                \"if index and target are monotonic\"\n            )\n\n        side = \"left\" if method == \"pad\" else \"right\"\n\n        # find exact matches first (this simplifies the algorithm)\n        indexer = self.get_indexer(target)\n        nonexact = indexer == -1\n        indexer[nonexact] = self._searchsorted_monotonic(target[nonexact], side)\n        if side == \"left\":\n            # searchsorted returns \"indices into a sorted array such that,\n            # if the corresponding elements in v were inserted before the\n            # indices, the order of a would be preserved\".\n            # Thus, we need to subtract 1 to find values to the left.\n            indexer[nonexact] -= 1\n            # This also mapped not found values (values of 0 from\n            # np.searchsorted) to -1, which conveniently is also our\n            # sentinel for missing values\n        else:\n            # Mark indices to the right of the largest value as not found\n            indexer[indexer == len(self)] = -1\n        return indexer\n\n    @final\n    def _get_nearest_indexer(self, target: Index, limit, tolerance) -> np.ndarray:\n        \"\"\"\n        Get the indexer for the nearest index labels; requires an index with\n        values that can be subtracted from each other (e.g., not strings or\n        tuples).\n        \"\"\"\n        if not len(self):\n            return self._get_fill_indexer(target, \"pad\")\n\n        left_indexer = self.get_indexer(target, \"pad\", limit=limit)\n        right_indexer = self.get_indexer(target, \"backfill\", limit=limit)\n\n        target_values = target._values\n        # error: Unsupported left operand type for - (\"ExtensionArray\")\n        left_distances = np.abs(\n            self._values[left_indexer] - target_values  # type: ignore[operator]\n        )\n        # error: Unsupported left operand type for - (\"ExtensionArray\")\n        right_distances = np.abs(\n            self._values[right_indexer] - target_values  # type: ignore[operator]\n        )\n\n        op = operator.lt if self.is_monotonic_increasing else operator.le\n        indexer = np.where(\n            op(left_distances, right_distances) | (right_indexer == -1),\n            left_indexer,\n            right_indexer,\n        )\n        if tolerance is not None:\n            indexer = self._filter_indexer_tolerance(target_values, indexer, tolerance)\n        return indexer\n\n    @final\n    def _filter_indexer_tolerance(\n        self,\n        target: Union[Index, np.ndarray, ExtensionArray],\n        indexer: np.ndarray,\n        tolerance,\n    ) -> np.ndarray:\n        # error: Unsupported left operand type for - (\"ExtensionArray\")\n        distance = abs(self._values[indexer] - target)  # type: ignore[operator]\n        return np.where(distance <= tolerance, indexer, -1)\n\n    # --------------------------------------------------------------------\n    # Indexer Conversion Methods\n\n    def _get_partial_string_timestamp_match_key(self, key):\n        \"\"\"\n        Translate any partial string timestamp matches in key, returning the\n        new key.\n\n        Only relevant for MultiIndex.\n        \"\"\"\n        # GH#10331\n        return key\n\n    @final\n    def _validate_positional_slice(self, key: slice):\n        \"\"\"\n        For positional indexing, a slice must have either int or None\n        for each of start, stop, and step.\n        \"\"\"\n        self._validate_indexer(\"positional\", key.start, \"iloc\")\n        self._validate_indexer(\"positional\", key.stop, \"iloc\")\n        self._validate_indexer(\"positional\", key.step, \"iloc\")\n\n    def _convert_slice_indexer(self, key: slice, kind: str_t):\n        \"\"\"\n        Convert a slice indexer.\n\n        By definition, these are labels unless 'iloc' is passed in.\n        Floats are not allowed as the start, step, or stop of the slice.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'loc', 'getitem'}\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\"], kind\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n        is_positional = is_index_slice and not (\n            self.is_integer() or self.is_categorical()\n        )\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                self._validate_indexer(\"slice\", key.start, \"getitem\")\n                self._validate_indexer(\"slice\", key.stop, \"getitem\")\n                self._validate_indexer(\"slice\", key.step, \"getitem\")\n                return key\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        if is_positional:\n            try:\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n            except KeyError:\n                pass\n\n        if com.is_null_slice(key):\n            # It doesn't matter if we are positional or label based\n            indexer = key\n        elif is_positional:\n            if kind == \"loc\":\n                # GH#16121, GH#24612, GH#31810\n                warnings.warn(\n                    \"Slicing a positional slice with .loc is not supported, \"\n                    \"and will raise TypeError in a future version.  \"\n                    \"Use .loc with labels or .iloc with positions instead.\",\n                    FutureWarning,\n                    stacklevel=6,\n                )\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer\n\n    def _convert_listlike_indexer(self, keyarr):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        indexer : numpy.ndarray or None\n            Return an ndarray or None if cannot convert.\n        keyarr : numpy.ndarray\n            Return tuple-safe keys.\n        \"\"\"\n        if isinstance(keyarr, Index):\n            pass\n        else:\n            keyarr = self._convert_arr_indexer(keyarr)\n\n        indexer = self._convert_list_indexer(keyarr)\n        return indexer, keyarr\n\n    def _convert_arr_indexer(self, keyarr):\n        \"\"\"\n        Convert an array-like indexer to the appropriate dtype.\n\n        Parameters\n        ----------\n        keyarr : array-like\n            Indexer to convert.\n\n        Returns\n        -------\n        converted_keyarr : array-like\n        \"\"\"\n        return com.asarray_tuplesafe(keyarr)\n\n    def _convert_list_indexer(self, keyarr):\n        \"\"\"\n        Convert a list-like indexer to the appropriate dtype.\n\n        Parameters\n        ----------\n        keyarr : Index (or sub-class)\n            Indexer to convert.\n        kind : iloc, loc, optional\n\n        Returns\n        -------\n        positional indexer or None\n        \"\"\"\n        return None\n\n    @final\n    def _invalid_indexer(self, form: str_t, key) -> TypeError:\n        \"\"\"\n        Consistent invalid indexer message.\n        \"\"\"\n        return TypeError(\n            f\"cannot do {form} indexing on {type(self).__name__} with these \"\n            f\"indexers [{key}] of type {type(key).__name__}\"\n        )\n\n    # --------------------------------------------------------------------\n    # Reindex Methods\n\n    @final\n    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n        # trying to reindex on an axis with duplicates\n        if not self._index_as_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")\n\n    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values.\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            target = self[:0]\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                if self._index_as_unique:\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, _ = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer\n\n    def _reindex_non_unique(self, target):\n        \"\"\"\n        Create a new index with target's values (move/add/delete values as\n        necessary) use with non-unique Index and a possibly non-unique target.\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n\n        \"\"\"\n        target = ensure_index(target)\n        if len(target) == 0:\n            # GH#13691\n            return self[:0], np.array([], dtype=np.intp), None\n\n        indexer, missing = self.get_indexer_non_unique(target)\n        check = indexer != -1\n        new_labels = self.take(indexer[check])\n        new_indexer = None\n\n        if len(missing):\n            length = np.arange(len(indexer))\n\n            missing = ensure_platform_int(missing)\n            missing_labels = target.take(missing)\n            missing_indexer = ensure_int64(length[~check])\n            cur_labels = self.take(indexer[check]).values\n            cur_indexer = ensure_int64(length[check])\n\n            new_labels = np.empty((len(indexer),), dtype=object)\n            new_labels[cur_indexer] = cur_labels\n            new_labels[missing_indexer] = missing_labels\n\n            # GH#38906\n            if not len(self):\n\n                new_indexer = np.arange(0)\n\n            # a unique indexer\n            elif target.is_unique:\n\n                # see GH5553, make sure we use the right indexer\n                new_indexer = np.arange(len(indexer))\n                new_indexer[cur_indexer] = np.arange(len(cur_labels))\n                new_indexer[missing_indexer] = -1\n\n            # we have a non_unique selector, need to use the original\n            # indexer here\n            else:\n\n                # need to retake to have the same size as the indexer\n                indexer[~check] = -1\n\n                # reset the new indexer to account for the new size\n                new_indexer = np.arange(len(self.take(indexer)))\n                new_indexer[~check] = -1\n\n        if isinstance(self, ABCMultiIndex):\n            new_index = type(self).from_tuples(new_labels, names=self.names)\n        else:\n            new_index = Index(new_labels, name=self.name)\n        return new_index, indexer, new_indexer\n\n    # --------------------------------------------------------------------\n    # Join Methods\n\n    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        \"\"\"\n        Compute join_index and indexers to conform data\n        structures to the new index.\n\n        Parameters\n        ----------\n        other : Index\n        how : {'left', 'right', 'inner', 'outer'}\n        level : int or level name, default None\n        return_indexers : bool, default False\n        sort : bool, default False\n            Sort the join keys lexicographically in the result Index. If False,\n            the order of the join keys depends on the join type (how keyword).\n\n        Returns\n        -------\n        join_index, (left_indexer, right_indexer)\n        \"\"\"\n        other = ensure_index(other)\n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n\n        # try to figure out the join level\n        # GH3662\n        if level is None and (self_is_mi or other_is_mi):\n\n            # have the same levels/names so a simple join\n            if self.names == other.names:\n                pass\n            else:\n                return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n        # join on the level\n        if level is not None and (self_is_mi or other_is_mi):\n            return self._join_level(\n                other, level, how=how, return_indexers=return_indexers\n            )\n\n        if len(other) == 0 and how in (\"left\", \"outer\"):\n            join_index = self._shallow_copy()\n            if return_indexers:\n                rindexer = np.repeat(-1, len(join_index))\n                return join_index, None, rindexer\n            else:\n                return join_index\n\n        if len(self) == 0 and how in (\"right\", \"outer\"):\n            join_index = other._shallow_copy()\n            if return_indexers:\n                lindexer = np.repeat(-1, len(join_index))\n                return join_index, lindexer, None\n            else:\n                return join_index\n\n        if self._join_precedence < other._join_precedence:\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n            result = other.join(\n                self, how=how, level=level, return_indexers=return_indexers\n            )\n            if return_indexers:\n                x, y, z = result\n                result = x, z, y\n            return result\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.join(other, how=how, return_indexers=return_indexers)\n\n        _validate_join_method(how)\n\n        if not self.is_unique and not other.is_unique:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n        elif not self.is_unique or not other.is_unique:\n            if self.is_monotonic and other.is_monotonic:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            else:\n                return self._join_non_unique(\n                    other, how=how, return_indexers=return_indexers\n                )\n        elif (\n            self.is_monotonic\n            and other.is_monotonic\n            and (\n                not isinstance(self, ABCMultiIndex)\n                or not any(is_categorical_dtype(dtype) for dtype in self.dtypes)\n            )\n        ):\n            # Categorical is monotonic if data are ordered as categories, but join can\n            #  not handle this in case of not lexicographically monotonic GH#38502\n            try:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            except TypeError:\n                pass\n\n        if how == \"left\":\n            join_index = self\n        elif how == \"right\":\n            join_index = other\n        elif how == \"inner\":\n            # TODO: sort=False here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.intersection(other, sort=False)\n        elif how == \"outer\":\n            # TODO: sort=True here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.union(other)\n\n        if sort:\n            join_index = join_index.sort_values()\n\n        if return_indexers:\n            if join_index is self:\n                lindexer = None\n            else:\n                lindexer = self.get_indexer(join_index)\n            if join_index is other:\n                rindexer = None\n            else:\n                rindexer = other.get_indexer(join_index)\n            return join_index, lindexer, rindexer\n        else:\n            return join_index\n\n    @final\n    def _join_multi(self, other, how, return_indexers=True):\n        from pandas.core.indexes.multi import MultiIndex\n        from pandas.core.reshape.merge import restore_dropped_levels_multijoin\n\n        # figure out join names\n        self_names_list = list(com.not_none(*self.names))\n        other_names_list = list(com.not_none(*other.names))\n        self_names_order = self_names_list.index\n        other_names_order = other_names_list.index\n        self_names = set(self_names_list)\n        other_names = set(other_names_list)\n        overlap = self_names & other_names\n\n        # need at least 1 in common\n        if not overlap:\n            raise ValueError(\"cannot join with no overlapping index names\")\n\n        if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n\n            # Drop the non-matching levels from left and right respectively\n            ldrop_names = sorted(self_names - overlap, key=self_names_order)\n            rdrop_names = sorted(other_names - overlap, key=other_names_order)\n\n            # if only the order differs\n            if not len(ldrop_names + rdrop_names):\n                self_jnlevels = self\n                other_jnlevels = other.reorder_levels(self.names)\n            else:\n                self_jnlevels = self.droplevel(ldrop_names)\n                other_jnlevels = other.droplevel(rdrop_names)\n\n            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(\n                other_jnlevels, how, return_indexers=True\n            )\n\n            # Restore the dropped levels\n            # Returned index level order is\n            # common levels, ldrop_names, rdrop_names\n            dropped_names = ldrop_names + rdrop_names\n\n            levels, codes, names = restore_dropped_levels_multijoin(\n                self, other, dropped_names, join_idx, lidx, ridx\n            )\n\n            # Re-create the multi-index\n            multi_join_idx = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n\n            multi_join_idx = multi_join_idx.remove_unused_levels()\n\n            if return_indexers:\n                return multi_join_idx, lidx, ridx\n            else:\n                return multi_join_idx\n\n        jl = list(overlap)[0]\n\n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if isinstance(self, MultiIndex):\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n        level = other.names.index(jl)\n        result = self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n\n        if flip_order and isinstance(result, tuple):\n            return result[0], result[2], result[1]\n        return result\n\n    @final\n    def _join_non_unique(self, other, how=\"left\", return_indexers=False):\n        from pandas.core.reshape.merge import get_join_indexers\n\n        # We only get here if dtypes match\n        assert self.dtype == other.dtype\n\n        lvalues = self._get_engine_target()\n        rvalues = other._get_engine_target()\n\n        left_idx, right_idx = get_join_indexers(\n            [lvalues], [rvalues], how=how, sort=True\n        )\n\n        left_idx = ensure_platform_int(left_idx)\n        right_idx = ensure_platform_int(right_idx)\n\n        join_index = np.asarray(lvalues.take(left_idx))\n        mask = left_idx == -1\n        np.putmask(join_index, mask, rvalues.take(right_idx))\n\n        join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            return join_index, left_idx, right_idx\n        else:\n            return join_index\n\n    @final\n    def _join_level(\n        self, other, level, how=\"left\", return_indexers=False, keep_order=True\n    ):\n        \"\"\"\n        The join method *only* affects the level of the resulting\n        MultiIndex. Otherwise it just exactly aligns the Index data to the\n        labels of the level in the MultiIndex.\n\n        If ```keep_order == True```, the order of the data indexed by the\n        MultiIndex will not be changed; otherwise, it will tie out\n        with `other`.\n        \"\"\"\n        from pandas.core.indexes.multi import MultiIndex\n\n        def _get_leaf_sorter(labels):\n            \"\"\"\n            Returns sorter for the inner most level while preserving the\n            order of higher levels.\n            \"\"\"\n            if labels[0].size == 0:\n                return np.empty(0, dtype=\"int64\")\n\n            if len(labels) == 1:\n                lab = ensure_int64(labels[0])\n                sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n                return sorter\n\n            # find indexers of beginning of each set of\n            # same-key labels w.r.t all but last level\n            tic = labels[0][:-1] != labels[0][1:]\n            for lab in labels[1:-1]:\n                tic |= lab[:-1] != lab[1:]\n\n            starts = np.hstack(([True], tic, [True])).nonzero()[0]\n            lab = ensure_int64(labels[-1])\n            return lib.get_level_sorter(lab, ensure_int64(starts))\n\n        if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n            raise TypeError(\"Join on level between two MultiIndex objects is ambiguous\")\n\n        left, right = self, other\n\n        flip_order = not isinstance(self, MultiIndex)\n        if flip_order:\n            left, right = right, left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n        assert isinstance(left, MultiIndex)\n\n        level = left._get_level_number(level)\n        old_level = left.levels[level]\n\n        if not right.is_unique:\n            raise NotImplementedError(\n                \"Index._join_level on non-unique index is not implemented\"\n            )\n\n        new_level, left_lev_indexer, right_lev_indexer = old_level.join(\n            right, how=how, return_indexers=True\n        )\n\n        if left_lev_indexer is None:\n            if keep_order or len(left) == 0:\n                left_indexer = None\n                join_index = left\n            else:  # sort the leaves\n                left_indexer = _get_leaf_sorter(left.codes[: level + 1])\n                join_index = left[left_indexer]\n\n        else:\n            left_lev_indexer = ensure_int64(left_lev_indexer)\n            rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n            old_codes = left.codes[level]\n            new_lev_codes = algos.take_nd(\n                rev_indexer, old_codes[old_codes != -1], allow_fill=False\n            )\n\n            new_codes = list(left.codes)\n            new_codes[level] = new_lev_codes\n\n            new_levels = list(left.levels)\n            new_levels[level] = new_level\n\n            if keep_order:  # just drop missing values. o.w. keep order\n                left_indexer = np.arange(len(left), dtype=np.intp)\n                mask = new_lev_codes != -1\n                if not mask.all():\n                    new_codes = [lab[mask] for lab in new_codes]\n                    left_indexer = left_indexer[mask]\n\n            else:  # tie out the order with other\n                if level == 0:  # outer most level, take the fast route\n                    ngroups = 1 + new_lev_codes.max()\n                    left_indexer, counts = libalgos.groupsort_indexer(\n                        new_lev_codes, ngroups\n                    )\n\n                    # missing values are placed first; drop them!\n                    left_indexer = left_indexer[counts[0] :]\n                    new_codes = [lab[left_indexer] for lab in new_codes]\n\n                else:  # sort the leaves\n                    mask = new_lev_codes != -1\n                    mask_all = mask.all()\n                    if not mask_all:\n                        new_codes = [lab[mask] for lab in new_codes]\n\n                    left_indexer = _get_leaf_sorter(new_codes[: level + 1])\n                    new_codes = [lab[left_indexer] for lab in new_codes]\n\n                    # left_indexers are w.r.t masked frame.\n                    # reverse to original frame!\n                    if not mask_all:\n                        left_indexer = mask.nonzero()[0][left_indexer]\n\n            join_index = MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=left.names,\n                verify_integrity=False,\n            )\n\n        if right_lev_indexer is not None:\n            right_indexer = algos.take_nd(\n                right_lev_indexer, join_index.codes[level], allow_fill=False\n            )\n        else:\n            right_indexer = join_index.codes[level]\n\n        if flip_order:\n            left_indexer, right_indexer = right_indexer, left_indexer\n\n        if return_indexers:\n            left_indexer = (\n                None if left_indexer is None else ensure_platform_int(left_indexer)\n            )\n            right_indexer = (\n                None if right_indexer is None else ensure_platform_int(right_indexer)\n            )\n            return join_index, left_indexer, right_indexer\n        else:\n            return join_index\n\n    @final\n    def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n        # We only get here with matching dtypes\n        assert other.dtype == self.dtype\n\n        if self.equals(other):\n            ret_index = other if how == \"right\" else self\n            if return_indexers:\n                return ret_index, None, None\n            else:\n                return ret_index\n\n        sv = self._get_engine_target()\n        ov = other._get_engine_target()\n\n        if self.is_unique and other.is_unique:\n            # We can perform much better than the general case\n            if how == \"left\":\n                join_index = self\n                lidx = None\n                ridx = self._left_indexer_unique(sv, ov)\n            elif how == \"right\":\n                join_index = other\n                lidx = self._left_indexer_unique(ov, sv)\n                ridx = None\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n        else:\n            if how == \"left\":\n                join_index, lidx, ridx = self._left_indexer(sv, ov)\n            elif how == \"right\":\n                join_index, ridx, lidx = self._left_indexer(ov, sv)\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            lidx = None if lidx is None else ensure_platform_int(lidx)\n            ridx = None if ridx is None else ensure_platform_int(ridx)\n            return join_index, lidx, ridx\n        else:\n            return join_index\n\n    def _wrap_joined_index(\n        self: _IndexT, joined: np.ndarray, other: _IndexT\n    ) -> _IndexT:\n        assert other.dtype == self.dtype\n\n        if isinstance(self, ABCMultiIndex):\n            name = self.names if self.names == other.names else None\n        else:\n            name = get_op_result_name(self, other)\n        return self._constructor(joined, name=name)\n\n    # --------------------------------------------------------------------\n    # Uncategorized Methods\n\n    @property\n    def values(self) -> ArrayLike:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data\n\n    @cache_readonly\n    @doc(IndexOpsMixin.array)\n    def array(self) -> ExtensionArray:\n        array = self._data\n        if isinstance(array, np.ndarray):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            array = PandasArray(array)\n        return array\n\n    @property\n    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray.\n\n        ``_values`` are consistent between ``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       |\n        ----------------- | --------------- | ------------- |\n        Index             | ndarray         | ndarray       |\n        CategoricalIndex  | Categorical     | Categorical   |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n        PeriodIndex       | ndarray[object] | PeriodArray   |\n        IntervalIndex     | IntervalArray   | IntervalArray |\n\n        See Also\n        --------\n        values : Values\n        \"\"\"\n        return self._data\n\n    def _get_engine_target(self) -> np.ndarray:\n        \"\"\"\n        Get the ndarray that we can pass to the IndexEngine constructor.\n        \"\"\"\n        return self._values\n\n    @doc(IndexOpsMixin.memory_usage)\n    def memory_usage(self, deep: bool = False) -> int:\n        result = super().memory_usage(deep=deep)\n\n        # include our engine hashtable\n        result += self._engine.sizeof(deep=deep)\n        return result\n\n    def where(self, cond, other=None):\n        \"\"\"\n        Replace values where the condition is False.\n\n        The replacement is taken from other.\n\n        Parameters\n        ----------\n        cond : bool array-like with the same length as self\n            Condition to select the values on.\n        other : scalar, or array-like, default None\n            Replacement if the condition is False.\n\n        Returns\n        -------\n        pandas.Index\n            A copy of self with values replaced from other\n            where the condition is False.\n\n        See Also\n        --------\n        Series.where : Same method for Series.\n        DataFrame.where : Same method for DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n        >>> idx\n        Index(['car', 'bike', 'train', 'tractor'], dtype='object')\n        >>> idx.where(idx.isin(['car', 'train']), 'other')\n        Index(['car', 'other', 'train', 'other'], dtype='object')\n        \"\"\"\n        cond = np.asarray(cond, dtype=bool)\n        return self.putmask(~cond, other)\n\n    # construction helpers\n    @final\n    @classmethod\n    def _scalar_data_error(cls, data):\n        # We return the TypeError so that we can raise it from the constructor\n        #  in order to keep mypy happy\n        return TypeError(\n            f\"{cls.__name__}(...) must be called with a collection of some \"\n            f\"kind, {repr(data)} was passed\"\n        )\n\n    @final\n    @classmethod\n    def _string_data_error(cls, data):\n        raise TypeError(\n            \"String dtype not supported, you may need \"\n            \"to explicitly cast to a numeric type\"\n        )\n\n    def _validate_fill_value(self, value):\n        \"\"\"\n        Check if the value can be inserted into our array without casting,\n        and convert it to an appropriate native type if necessary.\n\n        Raises\n        ------\n        TypeError\n            If the value cannot be inserted into an array of this dtype.\n        \"\"\"\n        if not can_hold_element(self.dtype, value):\n            raise TypeError\n        return value\n\n    @final\n    def _require_scalar(self, value):\n        \"\"\"\n        Check that this is a scalar value that we can use for setitem-like\n        operations without changing dtype.\n        \"\"\"\n        if not is_scalar(value):\n            raise TypeError(f\"'value' must be a scalar, passed: {type(value).__name__}\")\n        return value\n\n    @property\n    def _has_complex_internals(self) -> bool:\n        \"\"\"\n        Indicates if an index is not directly backed by a numpy array\n        \"\"\"\n        # used to avoid libreduction code paths, which raise or require conversion\n        return False\n\n    def _is_memory_usage_qualified(self) -> bool:\n        \"\"\"\n        Return a boolean if we need a qualified .info display.\n        \"\"\"\n        return self.is_object()\n\n    def is_type_compatible(self, kind: str_t) -> bool:\n        \"\"\"\n        Whether the index type is compatible with the provided type.\n        \"\"\"\n        return kind == self.inferred_type\n\n    def __contains__(self, key: Any) -> bool:\n        \"\"\"\n        Return a boolean indicating whether the provided key is in the index.\n\n        Parameters\n        ----------\n        key : label\n            The key to check if it is present in the index.\n\n        Returns\n        -------\n        bool\n            Whether the key search is in the index.\n\n        Raises\n        ------\n        TypeError\n            If the key is not hashable.\n\n        See Also\n        --------\n        Index.isin : Returns an ndarray of boolean dtype indicating whether the\n            list-like key is in the index.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n\n        >>> 2 in idx\n        True\n        >>> 6 in idx\n        False\n        \"\"\"\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False\n\n    @final\n    def __hash__(self):\n        raise TypeError(f\"unhashable type: {repr(type(self).__name__)}\")\n\n    @final\n    def __setitem__(self, key, value):\n        raise TypeError(\"Index does not support mutable operations\")\n\n    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key, warn_float=True)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result\n            return promote(result)\n        else:\n            return result\n\n    @final\n    def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False\n\n    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat += list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)\n\n    def _concat(self, to_concat: List[Index], name: Hashable) -> Index:\n        \"\"\"\n        Concatenate multiple Index objects.\n        \"\"\"\n        to_concat_vals = [x._values for x in to_concat]\n\n        result = concat_compat(to_concat_vals)\n        return Index(result, name=name)\n\n    def putmask(self, mask, value):\n        \"\"\"\n        Return a new Index of the values set with the mask.\n\n        Returns\n        -------\n        Index\n\n        See Also\n        --------\n        numpy.ndarray.putmask : Changes elements of an array\n            based on conditional and input values.\n        \"\"\"\n        mask = np.asarray(mask, dtype=bool)\n        if mask.shape != self.shape:\n            raise ValueError(\"putmask: mask and data must be the same size\")\n        if not mask.any():\n            return self.copy()\n\n        if value is None:\n            value = self._na_value\n        try:\n            converted = self._validate_fill_value(value)\n        except (ValueError, TypeError) as err:\n            if is_object_dtype(self):\n                raise err\n\n            dtype = self._find_common_type_compat(value)\n            return self.astype(dtype).putmask(mask, value)\n\n        values = self._values.copy()\n        if isinstance(converted, np.timedelta64) and self.dtype == object:\n            # https://github.com/numpy/numpy/issues/12550\n            #  timedelta64 will incorrectly cast to int\n            converted = [converted] * mask.sum()\n            values[mask] = converted\n        else:\n            np.putmask(values, mask, converted)\n\n        return type(self)._simple_new(values, name=self.name)\n\n    def equals(self, other: Any) -> bool:\n        \"\"\"\n        Determine if two Index object are equal.\n\n        The things that are being compared are:\n\n        * The elements inside the Index object.\n        * The order of the elements inside the Index object.\n\n        Parameters\n        ----------\n        other : Any\n            The other object to compare against.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements and order\n            as the calling index; False otherwise.\n\n        Examples\n        --------\n        >>> idx1 = pd.Index([1, 2, 3])\n        >>> idx1\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> idx1.equals(pd.Index([1, 2, 3]))\n        True\n\n        The elements inside are compared\n\n        >>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n        >>> idx2\n        Index(['1', '2', '3'], dtype='object')\n\n        >>> idx1.equals(idx2)\n        False\n\n        The order is compared\n\n        >>> ascending_idx = pd.Index([1, 2, 3])\n        >>> ascending_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> descending_idx = pd.Index([3, 2, 1])\n        >>> descending_idx\n        Int64Index([3, 2, 1], dtype='int64')\n        >>> ascending_idx.equals(descending_idx)\n        False\n\n        The dtype is *not* compared\n\n        >>> int64_idx = pd.Int64Index([1, 2, 3])\n        >>> int64_idx\n        Int64Index([1, 2, 3], dtype='int64')\n        >>> uint64_idx = pd.UInt64Index([1, 2, 3])\n        >>> uint64_idx\n        UInt64Index([1, 2, 3], dtype='uint64')\n        >>> int64_idx.equals(uint64_idx)\n        True\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            return other.equals(self)\n\n        if is_extension_array_dtype(other.dtype):\n            # All EA-backed Index subclasses override equals\n            return other.equals(self)\n\n        return array_equivalent(self._values, other._values)\n\n    @final\n    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but checks that object attributes and types are also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                getattr(self, c, None) == getattr(other, c, None)\n                for c in self._comparables\n            )\n            and type(self) == type(other)\n        )\n\n    @final\n    def asof(self, label):\n        \"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"\n        try:\n            loc = self.get_loc(label, method=\"pad\")\n        except KeyError:\n            return self._na_value\n        else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]\n\n    def asof_locs(self, where: Index, mask) -> np.ndarray:\n        \"\"\"\n        Return the locations (indices) of labels in the index.\n\n        As in the `asof` function, if the label (a particular entry in\n        `where`) is not in the index, the latest index label up to the\n        passed label is chosen and its index returned.\n\n        If all of the labels in the index are later than a label in `where`,\n        -1 is returned.\n\n        `mask` is used to ignore NA values in the index during calculation.\n\n        Parameters\n        ----------\n        where : Index\n            An Index consisting of an array of timestamps.\n        mask : array-like\n            Array of booleans denoting where values in the original\n            data are not NA.\n\n        Returns\n        -------\n        numpy.ndarray\n            An array of locations (indices) of the labels from the Index\n            which correspond to the return values of the `asof` function\n            for every element in `where`.\n        \"\"\"\n        locs = self._values[mask].searchsorted(where._values, side=\"right\")\n        locs = np.where(locs > 0, locs - 1, 0)\n\n        result = np.arange(len(self))[mask].take(locs)\n\n        # TODO: overload return type of ExtensionArray.__getitem__\n        first_value = cast(Any, self._values[mask.argmax()])\n        result[(locs == 0) & (where._values < first_value)] = -1\n\n        return result\n\n    @final\n    def sort_values(\n        self,\n        return_indexer: bool = False,\n        ascending: bool = True,\n        na_position: str_t = \"last\",\n        key: Optional[Callable] = None,\n    ):\n        \"\"\"\n        Return a sorted copy of the index.\n\n        Return a sorted copy of the index, and optionally return the indices\n        that sorted the index itself.\n\n        Parameters\n        ----------\n        return_indexer : bool, default False\n            Should the indices that would sort the index be returned.\n        ascending : bool, default True\n            Should the index values be sorted in an ascending order.\n        na_position : {'first' or 'last'}, default 'last'\n            Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n            the end.\n\n            .. versionadded:: 1.2.0\n\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        sorted_index : pandas.Index\n            Sorted copy of the index.\n        indexer : numpy.ndarray, optional\n            The indices that the index itself was sorted by.\n\n        See Also\n        --------\n        Series.sort_values : Sort values of a Series.\n        DataFrame.sort_values : Sort values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([10, 100, 1, 1000])\n        >>> idx\n        Int64Index([10, 100, 1, 1000], dtype='int64')\n\n        Sort values in ascending order (default behavior).\n\n        >>> idx.sort_values()\n        Int64Index([1, 10, 100, 1000], dtype='int64')\n\n        Sort values in descending order, and also get the indices `idx` was\n        sorted by.\n\n        >>> idx.sort_values(ascending=False, return_indexer=True)\n        (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n        \"\"\"\n        idx = ensure_key_mapped(self, key)\n\n        # GH 35584. Sort missing values according to na_position kwarg\n        # ignore na_position for MultiIndex\n        if not isinstance(self, ABCMultiIndex):\n            _as = nargsort(\n                items=idx, ascending=ascending, na_position=na_position, key=key\n            )\n        else:\n            _as = idx.argsort()\n            if not ascending:\n                _as = _as[::-1]\n\n        sorted_index = self.take(_as)\n\n        if return_indexer:\n            return sorted_index, _as\n        else:\n            return sorted_index\n\n    @final\n    def sort(self, *args, **kwargs):\n        \"\"\"\n        Use sort_values instead.\n        \"\"\"\n        raise TypeError(\"cannot sort an Index object in-place, use sort_values instead\")\n\n    def shift(self, periods=1, freq=None):\n        \"\"\"\n        Shift index by desired number of time frequency increments.\n\n        This method is for shifting the values of datetime-like indexes\n        by a specified time increment a given number of times.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Number of periods (or increments) to shift by,\n            can be positive or negative.\n        freq : pandas.DateOffset, pandas.Timedelta or str, optional\n            Frequency increment to shift by.\n            If None, the index is shifted by its own `freq` attribute.\n            Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n        Returns\n        -------\n        pandas.Index\n            Shifted index.\n\n        See Also\n        --------\n        Series.shift : Shift values of Series.\n\n        Notes\n        -----\n        This method is only implemented for datetime-like index classes,\n        i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\n        Examples\n        --------\n        Put the first 5 month starts of 2011 into an index.\n\n        >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n        >>> month_starts\n        DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n                       '2011-05-01'],\n                      dtype='datetime64[ns]', freq='MS')\n\n        Shift the index by 10 days.\n\n        >>> month_starts.shift(10, freq='D')\n        DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n                       '2011-05-11'],\n                      dtype='datetime64[ns]', freq=None)\n\n        The default value of `freq` is the `freq` attribute of the index,\n        which is 'MS' (month start) in this example.\n\n        >>> month_starts.shift(10)\n        DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n                       '2012-03-01'],\n                      dtype='datetime64[ns]', freq='MS')\n        \"\"\"\n        raise NotImplementedError(\n            f\"This method is only implemented for DatetimeIndex, PeriodIndex and \"\n            f\"TimedeltaIndex; Got type {type(self).__name__}\"\n        )\n\n    def argsort(self, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n        Return the integer indices that would sort the index.\n\n        Parameters\n        ----------\n        *args\n            Passed to `numpy.ndarray.argsort`.\n        **kwargs\n            Passed to `numpy.ndarray.argsort`.\n\n        Returns\n        -------\n        numpy.ndarray\n            Integer indices that would sort the index if used as\n            an indexer.\n\n        See Also\n        --------\n        numpy.argsort : Similar method for NumPy arrays.\n        Index.sort_values : Return sorted copy of Index.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n        >>> idx\n        Index(['b', 'a', 'd', 'c'], dtype='object')\n\n        >>> order = idx.argsort()\n        >>> order\n        array([1, 0, 3, 2])\n\n        >>> idx[order]\n        Index(['a', 'b', 'c', 'd'], dtype='object')\n        \"\"\"\n        # This works for either ndarray or EA, is overridden\n        #  by RangeIndex, MultIIndex\n        return self._data.argsort(*args, **kwargs)\n\n    @final\n    def get_value(self, series: Series, key):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray.\n\n        Only use this if you know what you're doing.\n\n        Returns\n        -------\n        scalar or Series\n        \"\"\"\n        warnings.warn(\n            \"get_value is deprecated and will be removed in a future version. \"\n            \"Use Series[key] instead\",\n            FutureWarning,\n            stacklevel=2,\n        )\n\n        self._check_indexing_error(key)\n\n        try:\n            # GH 20882, 21257\n            # First try to convert the key to a location\n            # If that fails, raise a KeyError if an integer\n            # index, otherwise, see if key is an integer, and\n            # try that\n            loc = self.get_loc(key)\n        except KeyError:\n            if not self._should_fallback_to_positional():\n                raise\n            elif is_integer(key):\n                # If the Index cannot hold integer, then this is unambiguously\n                #  a locational lookup.\n                loc = key\n            else:\n                raise\n\n        return self._get_values_for_loc(series, loc, key)\n\n    def _check_indexing_error(self, key):\n        if not is_scalar(key):\n            # if key is not a scalar, directly raise an error (the code below\n            # would convert to numpy arrays and raise later any way) - GH29926\n            raise InvalidIndexError(key)\n\n    def _should_fallback_to_positional(self) -> bool:\n        \"\"\"\n        Should an integer key be treated as positional?\n        \"\"\"\n        return not self.holds_integer() and not self.is_boolean()\n\n    def _get_values_for_loc(self, series: Series, loc, key):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`\n\n        key is included for MultiIndex compat.\n        \"\"\"\n        if is_integer(loc):\n            return series._values[loc]\n\n        return series.iloc[loc]\n\n    @final\n    def set_value(self, arr, key, value):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray.\n\n        .. deprecated:: 1.0\n\n        Notes\n        -----\n        Only use this if you know what you're doing.\n        \"\"\"\n        warnings.warn(\n            (\n                \"The 'set_value' method is deprecated, and \"\n                \"will be removed in a future version.\"\n            ),\n            FutureWarning,\n            stacklevel=2,\n        )\n        loc = self._engine.get_loc(key)\n        validate_numeric_casting(arr.dtype, value)\n        arr[loc] = value\n\n    _index_shared_docs[\n        \"get_indexer_non_unique\"\n    ] = \"\"\"\n        Compute indexer and mask for new index given the current index. The\n        indexer should be then used as an input to ndarray.take to align the\n        current data to the new index.\n\n        Parameters\n        ----------\n        target : %(target_klass)s\n\n        Returns\n        -------\n        indexer : ndarray of int\n            Integers from 0 to n - 1 indicating that the index at these\n            positions matches the corresponding target values. Missing values\n            in the target are marked by -1.\n        missing : ndarray of int\n            An indexer into the target of the values not found.\n            These correspond to the -1 in the indexer array.\n        \"\"\"\n\n    @Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\n    def get_indexer_non_unique(self, target):\n        target = ensure_index(target)\n\n        if not self._should_compare(target) and not is_interval_dtype(self.dtype):\n            # IntervalIndex get special treatment bc numeric scalars can be\n            #  matched to Interval scalars\n            return self._get_indexer_non_comparable(target, method=None, unique=False)\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer_non_unique(ptarget)\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            # TODO: if object, could use infer_dtype to preempt costly\n            #  conversion if still non-comparable?\n            dtype = self._find_common_type_compat(target)\n\n            this = self.astype(dtype, copy=False)\n            that = target.astype(dtype, copy=False)\n            return this.get_indexer_non_unique(that)\n\n        tgt_values = target._get_engine_target()\n\n        indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n        return ensure_platform_int(indexer), missing\n\n    @final\n    def get_indexer_for(self, target, **kwargs):\n        \"\"\"\n        Guaranteed return of an indexer even when non-unique.\n\n        This dispatches to get_indexer or get_indexer_non_unique\n        as appropriate.\n\n        Returns\n        -------\n        numpy.ndarray\n            List of indices.\n        \"\"\"\n        if self._index_as_unique:\n            return self.get_indexer(target, **kwargs)\n        indexer, _ = self.get_indexer_non_unique(target)\n        return indexer\n\n    @final\n    def _get_indexer_non_comparable(self, target: Index, method, unique: bool = True):\n        \"\"\"\n        Called from get_indexer or get_indexer_non_unique when the target\n        is of a non-comparable dtype.\n\n        For get_indexer lookups with method=None, get_indexer is an _equality_\n        check, so non-comparable dtypes mean we will always have no matches.\n\n        For get_indexer lookups with a method, get_indexer is an _inequality_\n        check, so non-comparable dtypes mean we will always raise TypeError.\n\n        Parameters\n        ----------\n        target : Index\n        method : str or None\n        unique : bool, default True\n            * True if called from get_indexer.\n            * False if called from get_indexer_non_unique.\n\n        Raises\n        ------\n        TypeError\n            If doing an inequality check, i.e. method is not None.\n        \"\"\"\n        if method is not None:\n            other = unpack_nested_dtype(target)\n            raise TypeError(f\"Cannot compare dtypes {self.dtype} and {other.dtype}\")\n\n        no_matches = -1 * np.ones(target.shape, dtype=np.intp)\n        if unique:\n            # This is for get_indexer\n            return no_matches\n        else:\n            # This is for get_indexer_non_unique\n            missing = np.arange(len(target), dtype=np.intp)\n            return no_matches, missing\n\n    @property\n    def _index_as_unique(self) -> bool:\n        \"\"\"\n        Whether we should treat this as unique for the sake of\n        get_indexer vs get_indexer_non_unique.\n\n        For IntervalIndex compat.\n        \"\"\"\n        return self.is_unique\n\n    _requires_unique_msg = \"Reindexing only valid with uniquely valued Index objects\"\n\n    @final\n    def _maybe_promote(self, other: Index):\n        \"\"\"\n        When dealing with an object-dtype Index and a non-object Index, see\n        if we can upcast the object-dtype one to improve performance.\n        \"\"\"\n\n        if isinstance(self, ABCDatetimeIndex) and isinstance(other, ABCDatetimeIndex):\n            if (\n                self.tz is not None\n                and other.tz is not None\n                and not tz_compare(self.tz, other.tz)\n            ):\n                # standardize on UTC\n                return self.tz_convert(\"UTC\"), other.tz_convert(\"UTC\")\n\n        elif self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            try:\n                return type(other)(self), other\n            except OutOfBoundsDatetime:\n                return self, other\n        elif self.inferred_type == \"timedelta\" and isinstance(other, ABCTimedeltaIndex):\n            # TODO: we dont have tests that get here\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n\n        if not is_object_dtype(self.dtype) and is_object_dtype(other.dtype):\n            # Reverse op so we dont need to re-implement on the subclasses\n            other, self = other._maybe_promote(self)\n\n        return self, other\n\n    @final\n    def _find_common_type_compat(self, target) -> DtypeObj:\n        \"\"\"\n        Implementation of find_common_type that adjusts for Index-specific\n        special cases.\n        \"\"\"\n        if is_interval_dtype(self.dtype) and is_valid_nat_for_dtype(target, self.dtype):\n            # e.g. setting NA value into IntervalArray[int64]\n            self = cast(\"IntervalIndex\", self)\n            return IntervalDtype(np.float64, closed=self.closed)\n\n        target_dtype, _ = infer_dtype_from(target, pandas_dtype=True)\n        dtype = find_common_type([self.dtype, target_dtype])\n        if dtype.kind in [\"i\", \"u\"]:\n            # TODO: what about reversed with self being categorical?\n            if (\n                isinstance(target, Index)\n                and is_categorical_dtype(target.dtype)\n                and target.hasnans\n            ):\n                # FIXME: find_common_type incorrect with Categorical GH#38240\n                # FIXME: some cases where float64 cast can be lossy?\n                dtype = np.dtype(np.float64)\n        if dtype.kind == \"c\":\n            dtype = np.dtype(object)\n        return dtype\n\n    @final\n    def _should_compare(self, other: Index) -> bool:\n        \"\"\"\n        Check if `self == other` can ever have non-False entries.\n        \"\"\"\n\n        if (other.is_boolean() and self.is_numeric()) or (\n            self.is_boolean() and other.is_numeric()\n        ):\n            # GH#16877 Treat boolean labels passed to a numeric index as not\n            #  found. Without this fix False and True would be treated as 0 and 1\n            #  respectively.\n            return False\n\n        other = unpack_nested_dtype(other)\n        dtype = other.dtype\n        return self._is_comparable_dtype(dtype) or is_object_dtype(dtype)\n\n    def _is_comparable_dtype(self, dtype: DtypeObj) -> bool:\n        \"\"\"\n        Can we compare values of the given dtype to our own?\n        \"\"\"\n        return True\n\n    @final\n    def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n        \"\"\"\n        Group the index labels by a given array of values.\n\n        Parameters\n        ----------\n        values : array\n            Values used to determine the groups.\n\n        Returns\n        -------\n        dict\n            {group name -> group labels}\n        \"\"\"\n        # TODO: if we are a MultiIndex, we can do better\n        # that converting to tuples\n        if isinstance(values, ABCMultiIndex):\n            values = values._values\n        values = Categorical(values)\n        result = values._reverse_indexer()\n\n        # map to the label\n        result = {k: self.take(v) for k, v in result.items()}\n\n        return PrettyDict(result)\n\n    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n        from pandas.core.indexes.multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)\n\n    # TODO: De-duplicate with map, xref GH#32349\n    @final\n    def _transform_index(self, func, level=None) -> Index:\n        \"\"\"\n        Apply function to all values found in index.\n\n        This includes transforming multiindex entries separately.\n        Only apply function to one level of the MultiIndex if level is specified.\n        \"\"\"\n        if isinstance(self, ABCMultiIndex):\n            if level is not None:\n                items = [\n                    tuple(func(y) if i == level else y for i, y in enumerate(x))\n                    for x in self\n                ]\n            else:\n                items = [tuple(func(y) for y in x) for x in self]\n            return type(self).from_tuples(items, names=self.names)\n        else:\n            items = [func(x) for x in self]\n            return Index(items, name=self.name, tupleize_cols=False)\n\n    def isin(self, values, level=None):\n        \"\"\"\n        Return a boolean array where the index values are in `values`.\n\n        Compute boolean array of whether each index value is found in the\n        passed set of values. The length of the returned boolean array matches\n        the length of the index.\n\n        Parameters\n        ----------\n        values : set or list-like\n            Sought values.\n        level : str or int, optional\n            Name or position of the index level to use (if the index is a\n            `MultiIndex`).\n\n        Returns\n        -------\n        is_contained : ndarray\n            NumPy array of boolean values.\n\n        See Also\n        --------\n        Series.isin : Same for Series.\n        DataFrame.isin : Same method for DataFrames.\n\n        Notes\n        -----\n        In the case of `MultiIndex` you must either specify `values` as a\n        list-like object containing tuples that are the same length as the\n        number of levels, or specify `level`. Otherwise it will raise a\n        ``ValueError``.\n\n        If `level` is specified:\n\n        - if it is the name of one *and only one* index level, use that level;\n        - otherwise it should be a number indicating level position.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1,2,3])\n        >>> idx\n        Int64Index([1, 2, 3], dtype='int64')\n\n        Check whether each index value in a list of values.\n\n        >>> idx.isin([1, 4])\n        array([ True, False, False])\n\n        >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n        ...                                  ['red', 'blue', 'green']],\n        ...                                  names=('number', 'color'))\n        >>> midx\n        MultiIndex([(1,   'red'),\n                    (2,  'blue'),\n                    (3, 'green')],\n                   names=['number', 'color'])\n\n        Check whether the strings in the 'color' level of the MultiIndex\n        are in a list of colors.\n\n        >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n        array([ True, False, False])\n\n        To check across the levels of a MultiIndex, pass a list of tuples:\n\n        >>> midx.isin([(1, 'red'), (3, 'red')])\n        array([ True, False, False])\n\n        For a DatetimeIndex, string values in `values` are converted to\n        Timestamps.\n\n        >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n        >>> dti = pd.to_datetime(dates)\n        >>> dti\n        DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n        dtype='datetime64[ns]', freq=None)\n\n        >>> dti.isin(['2000-03-11'])\n        array([ True, False, False])\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n        return algos.isin(self._values, values)\n\n    def _get_string_slice(self, key: str_t):\n        # this is for partial string indexing,\n        # overridden in DatetimeIndex, TimedeltaIndex and PeriodIndex\n        raise NotImplementedError\n\n    def slice_indexer(\n        self,\n        start: Optional[Hashable] = None,\n        end: Optional[Hashable] = None,\n        step: Optional[int] = None,\n        kind: Optional[str_t] = None,\n    ) -> slice:\n        \"\"\"\n        Compute the slice indexer for input labels and step.\n\n        Index needs to be ordered and unique.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, default None\n        kind : str, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        --------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3, None)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3, None)\n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)\n\n    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key\n\n    @final\n    def _validate_indexer(self, form: str_t, key, kind: str_t):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"getitem\", \"iloc\"]\n\n        if key is not None and not is_integer(key):\n            raise self._invalid_indexer(form, key)\n\n    def _maybe_cast_slice_bound(self, label, side: str_t, kind):\n        \"\"\"\n        This function should be overloaded in subclasses that allow non-trivial\n        casting on label-slice bounds, e.g. datetime-like indices allowing\n        strings containing formatted datetimes.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        label : object\n\n        Notes\n        -----\n        Value of `side` parameter should be validated in caller.\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\", None]\n\n        # We are a plain index here (sub-class override this method if they\n        # wish to have special treatment for floats/ints, e.g. Float64Index and\n        # datetimelike Indexes\n        # reject them, if index does not contain label\n        if (is_float(label) or is_integer(label)) and label not in self._values:\n            raise self._invalid_indexer(\"slice\", label)\n\n        return label\n\n    def _searchsorted_monotonic(self, label, side=\"left\"):\n        if self.is_monotonic_increasing:\n            return self.searchsorted(label, side=side)\n        elif self.is_monotonic_decreasing:\n            # np.searchsorted expects ascending sort order, have to reverse\n            # everything for it to work (element ordering, search side and\n            # resulting value).\n            pos = self[::-1].searchsorted(\n                label, side=\"right\" if side == \"left\" else \"left\"\n            )\n            return len(self) - pos\n\n        raise ValueError(\"index must be monotonic increasing or decreasing\")\n\n    def get_slice_bound(self, label, side: str_t, kind) -> int:\n        \"\"\"\n        Calculate slice bound that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n        of given label.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        int\n            Index of label.\n        \"\"\"\n        assert kind in [\"loc\", \"getitem\", None]\n\n        if side not in (\"left\", \"right\"):\n            raise ValueError(\n                \"Invalid value for side kwarg, must be either \"\n                f\"'left' or 'right': {side}\"\n            )\n\n        original_label = label\n\n        # For datetime indices label may be a string that has to be converted\n        # to datetime boundary according to its resolution.\n        label = self._maybe_cast_slice_bound(label, side, kind)\n\n        # we need to look up the label\n        try:\n            slc = self.get_loc(label)\n        except KeyError as err:\n            try:\n                return self._searchsorted_monotonic(label, side)\n            except ValueError:\n                # raise the original KeyError\n                raise err\n\n        if isinstance(slc, np.ndarray):\n            # get_loc may return a boolean array or an array of indices, which\n            # is OK as long as they are representable by a slice.\n            if is_bool_dtype(slc):\n                slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n            else:\n                slc = lib.maybe_indices_to_slice(\n                    slc.astype(np.intp, copy=False), len(self)\n                )\n            if isinstance(slc, np.ndarray):\n                raise KeyError(\n                    f\"Cannot get {side} slice bound for non-unique \"\n                    f\"label: {repr(original_label)}\"\n                )\n\n        if isinstance(slc, slice):\n            if side == \"left\":\n                return slc.start\n            else:\n                return slc.stop\n        else:\n            if side == \"right\":\n                return slc + 1\n            else:\n                return slc\n\n    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Compute slice locations for input labels.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, defaults None\n            If None, defaults to 1.\n        kind : {'loc', 'getitem'} or None\n\n        Returns\n        -------\n        start, end : int\n\n        See Also\n        --------\n        Index.get_loc : Get location for a single label.\n\n        Notes\n        -----\n        This method only works if the index is monotonic or unique.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_locs(start='b', end='c')\n        (1, 3)\n        \"\"\"\n        inc = step is None or step >= 0\n\n        if not inc:\n            # If it's a reverse slice, temporarily swap bounds.\n            start, end = end, start\n\n        # GH 16785: If start and end happen to be date strings with UTC offsets\n        # attempt to parse and check that the offsets are the same\n        if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)\n            except (ValueError, TypeError):\n                pass\n            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the same UTC offset\")\n\n        start_slice = None\n        if start is not None:\n            start_slice = self.get_slice_bound(start, \"left\", kind)\n        if start_slice is None:\n            start_slice = 0\n\n        end_slice = None\n        if end is not None:\n            end_slice = self.get_slice_bound(end, \"right\", kind)\n        if end_slice is None:\n            end_slice = len(self)\n\n        if not inc:\n            # Bounds at this moment are swapped, swap them back and shift by 1.\n            #\n            # slice_locs('B', 'A', step=-1): s='B', e='A'\n            #\n            #              s='A'                 e='B'\n            # AFTER SWAP:    |                     |\n            #                v ------------------> V\n            #           -----------------------------------\n            #           | | |A|A|A|A| | | | | |B|B| | | | |\n            #           -----------------------------------\n            #              ^ <------------------ ^\n            # SHOULD BE:   |                     |\n            #           end=s-1              start=e-1\n            #\n            end_slice, start_slice = start_slice - 1, end_slice - 1\n\n            # i == -1 triggers ``len(self) + i`` selection that points to the\n            # last element, not before-the-first one, subtracting len(self)\n            # compensates that.\n            if end_slice == -1:\n                end_slice -= len(self)\n            if start_slice == -1:\n                start_slice -= len(self)\n\n        return start_slice, end_slice\n\n    def delete(self, loc):\n        \"\"\"\n        Make new Index with passed location(-s) deleted.\n\n        Parameters\n        ----------\n        loc : int or list of int\n            Location of item(-s) which will be deleted.\n            Use a list of locations to delete more than one value at the same time.\n\n        Returns\n        -------\n        Index\n            New Index with passed location(-s) deleted.\n\n        See Also\n        --------\n        numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n        Examples\n        --------\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx.delete(1)\n        Index(['a', 'c'], dtype='object')\n\n        >>> idx = pd.Index(['a', 'b', 'c'])\n        >>> idx.delete([0, 2])\n        Index(['b'], dtype='object')\n        \"\"\"\n        res_values = np.delete(self._data, loc)\n        return type(self)._simple_new(res_values, name=self.name)\n\n    def insert(self, loc: int, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Note: this method is overridden by all ExtensionIndex subclasses,\n        #  so self is never backed by an EA.\n        item = lib.item_from_zerodim(item)\n        if is_valid_nat_for_dtype(item, self.dtype) and self.dtype != object:\n            item = self._na_value\n\n        try:\n            item = self._validate_fill_value(item)\n        except TypeError:\n            inferred, _ = infer_dtype_from(item)\n            dtype = find_common_type([self.dtype, inferred])\n            return self.astype(dtype).insert(loc, item)\n\n        arr = np.asarray(self)\n\n        # Use Index constructor to ensure we get tuples cast correctly.\n        item = Index([item], dtype=self.dtype)._values\n        idx = np.concatenate((arr[:loc], item, arr[loc:]))\n        return Index(idx, name=self.name)\n\n    def drop(self, labels, errors: str_t = \"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n\n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        Returns\n        -------\n        dropped : Index\n\n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer_for(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n                raise KeyError(f\"{labels[mask]} not found in axis\")\n            indexer = indexer[~mask]\n        return self.delete(indexer)\n\n    # --------------------------------------------------------------------\n    # Generated Arithmetic, Comparison, and Unary Methods\n\n    def _cmp_method(self, other, op):\n        \"\"\"\n        Wrapper used to dispatch comparison operations.\n        \"\"\"\n        if self.is_(other):\n            # fastpath\n            if op in {operator.eq, operator.le, operator.ge}:\n                arr = np.ones(len(self), dtype=bool)\n                if self._can_hold_na and not isinstance(self, ABCMultiIndex):\n                    # TODO: should set MultiIndex._can_hold_na = False?\n                    arr[self.isna()] = False\n                return arr\n            elif op in {operator.ne, operator.lt, operator.gt}:\n                return np.zeros(len(self), dtype=bool)\n\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)) and len(\n            self\n        ) != len(other):\n            raise ValueError(\"Lengths must match to compare\")\n\n        if not isinstance(other, ABCMultiIndex):\n            other = extract_array(other, extract_numpy=True)\n        else:\n            other = np.asarray(other)\n\n        if is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray, Categorical\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, other)\n\n        elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = ops.comparison_op(self._values, other, op)\n\n        return result\n\n    def _arith_method(self, other, op):\n        \"\"\"\n        Wrapper used to dispatch arithmetic operations.\n        \"\"\"\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)\n\n    @final\n    def _unary_method(self, op):\n        result = op(self._values)\n        return Index(result, name=self.name)\n\n    def __abs__(self):\n        return self._unary_method(operator.abs)\n\n    def __neg__(self):\n        return self._unary_method(operator.neg)\n\n    def __pos__(self):\n        return self._unary_method(operator.pos)\n\n    def __inv__(self):\n        # TODO: why not operator.inv?\n        # TODO: __inv__ vs __invert__?\n        return self._unary_method(lambda x: -x)\n\n    def any(self, *args, **kwargs):\n        \"\"\"\n        Return whether any element is Truthy.\n\n        Parameters\n        ----------\n        *args\n            These parameters will be passed to numpy.any.\n        **kwargs\n            These parameters will be passed to numpy.any.\n\n        Returns\n        -------\n        any : bool or array_like (if axis is specified)\n            A single element array_like may be converted to bool.\n\n        See Also\n        --------\n        Index.all : Return whether all elements are True.\n        Series.all : Return whether all elements are True.\n\n        Notes\n        -----\n        Not a Number (NaN), positive infinity and negative infinity\n        evaluate to True because these are not equal to zero.\n\n        Examples\n        --------\n        >>> index = pd.Index([0, 1, 2])\n        >>> index.any()\n        True\n\n        >>> index = pd.Index([0, 0, 0])\n        >>> index.any()\n        False\n        \"\"\"\n        # FIXME: docstr inaccurate, args/kwargs not passed\n        self._maybe_disable_logical_methods(\"any\")\n        return np.any(self.values)\n\n    def all(self):\n        \"\"\"\n        Return whether all elements are Truthy.\n\n        Parameters\n        ----------\n        *args\n            These parameters will be passed to numpy.all.\n        **kwargs\n            These parameters will be passed to numpy.all.\n\n        Returns\n        -------\n        all : bool or array_like (if axis is specified)\n            A single element array_like may be converted to bool.\n\n        See Also\n        --------\n        Index.any : Return whether any element in an Index is True.\n        Series.any : Return whether any element in a Series is True.\n        Series.all : Return whether all elements in a Series are True.\n\n        Notes\n        -----\n        Not a Number (NaN), positive infinity and negative infinity\n        evaluate to True because these are not equal to zero.\n\n        Examples\n        --------\n        **all**\n\n        True, because nonzero integers are considered True.\n\n        >>> pd.Index([1, 2, 3]).all()\n        True\n\n        False, because ``0`` is considered False.\n\n        >>> pd.Index([0, 1, 2]).all()\n        False\n\n        **any**\n\n        True, because ``1`` is considered True.\n\n        >>> pd.Index([0, 0, 1]).any()\n        True\n\n        False, because ``0`` is considered False.\n\n        >>> pd.Index([0, 0, 0]).any()\n        False\n        \"\"\"\n        # FIXME: docstr inaccurate, args/kwargs not passed\n\n        self._maybe_disable_logical_methods(\"all\")\n        return np.all(self.values)\n\n    @final\n    def _maybe_disable_logical_methods(self, opname: str_t):\n        \"\"\"\n        raise if this Index subclass does not support any or all.\n        \"\"\"\n        if (\n            isinstance(self, ABCMultiIndex)\n            or needs_i8_conversion(self.dtype)\n            or is_interval_dtype(self.dtype)\n            or is_categorical_dtype(self.dtype)\n            or is_float_dtype(self.dtype)\n        ):\n            # This call will raise\n            make_invalid_op(opname)(self)\n\n    @property\n    def shape(self) -> Shape:\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        # not using \"(len(self), )\" to return \"correct\" shape if the values\n        # consists of a >1 D array (see GH-27775)\n        # overridden in MultiIndex.shape to avoid materializing the values\n        return self._values.shape\n\n\ndef ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=[\"name\"])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([[\"a\", \"a\"], [\"a\", \"b\"]], names=[\"L1\", \"L2\"])\n    MultiIndex([('a', 'a'),\n                ('a', 'b')],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)\n\n\ndef ensure_index(\n    index_like: Union[AnyArrayLike, Sequence], copy: bool = False\n) -> Index:\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index_like : sequence\n        An Index or other sequence\n    copy : bool, default False\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    See Also\n    --------\n    ensure_index_from_sequences\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n            ('a', 'c')],\n           )\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        # https://github.com/python/mypy/issues/1424\n        # error: Item \"ExtensionArray\" of \"Union[ExtensionArray,\n        # Sequence[Any]]\" has no attribute \"name\"  [union-attr]\n        # error: Item \"Sequence[Any]\" of \"Union[ExtensionArray, Sequence[Any]]\"\n        # has no attribute \"name\"  [union-attr]\n        # error: \"Sequence[Any]\" has no attribute \"name\"  [attr-defined]\n        # error: Item \"Sequence[Any]\" of \"Union[Series, Sequence[Any]]\" has no\n        # attribute \"name\"  [union-attr]\n        # error: Item \"Sequence[Any]\" of \"Union[Any, Sequence[Any]]\" has no\n        # attribute \"name\"  [union-attr]\n        name = index_like.name  # type: ignore[union-attr, attr-defined]\n        return Index(index_like, name=name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            if isinstance(converted, np.ndarray) and converted.dtype == np.int64:\n                # Check for overflows if we should actually be uint64\n                # xref GH#35481\n                alt = np.asarray(index_like)\n                if alt.dtype == np.uint64:\n                    converted = alt\n\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            index_like = copy_func(index_like)\n\n    return Index(index_like)\n\n\ndef ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq\n\n\ndef trim_front(strings: List[str]) -> List[str]:\n    \"\"\"\n    Trims zeros and decimal points.\n\n    Examples\n    --------\n    >>> trim_front([\" a\", \" b\"])\n    ['a', 'b']\n\n    >>> trim_front([\" a\", \" \"])\n    ['a', '']\n    \"\"\"\n    if not strings:\n        return strings\n    while all(strings) and all(x[0] == \" \" for x in strings):\n        strings = [x[1:] for x in strings]\n    return strings\n\n\ndef _validate_join_method(method: str):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")\n\n\ndef default_index(n: int) -> RangeIndex:\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)\n\n\ndef maybe_extract_name(name, obj, cls) -> Hashable:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name\n\n\ndef _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred != \"string\":\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred != \"string\":\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data\n\n\ndef _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        DatetimeArray,\n        IntervalArray,\n        PeriodArray,\n        TimedeltaArray,\n    )\n\n    assert subarr.dtype == object, subarr.dtype\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data\n        except ValueError:\n            pass\n\n        return subarr\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        data = np.asarray(subarr).astype(np.float64, copy=False)\n        return data\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data\n        except (ValueError, TypeError):\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data\n            except IncompatibleFrequency:\n                pass\n\n    return subarr\n\n\ndef _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError\n\n\ndef get_unanimous_names(*indexes: Index) -> Tuple[Hashable, ...]:\n    \"\"\"\n    Return common name if all indices agree, otherwise None (level-by-level).\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    list\n        A list representing the unanimous 'names' found.\n    \"\"\"\n    name_tups = [tuple(i.names) for i in indexes]\n    name_sets = [{*ns} for ns in zip_longest(*name_tups)]\n    names = tuple(ns.pop() if len(ns) == 1 else None for ns in name_sets)\n    return names\n\n\ndef unpack_nested_dtype(other: Index) -> Index:\n    \"\"\"\n    When checking if our dtype is comparable with another, we need\n    to unpack CategoricalDtype to look at its categories.dtype.\n\n    Parameters\n    ----------\n    other : Index\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    dtype = other.dtype\n    if is_categorical_dtype(dtype):\n        # If there is ever a SparseIndex, this could get dispatched\n        #  here too.\n        return dtype.categories\n    return other\n\n\ndef _maybe_try_sort(result, sort):\n    if sort is None:\n        try:\n            result = algos.safe_sort(result)\n        except TypeError as err:\n            warnings.warn(\n                f\"{err}, sort order is undefined for incomparable objects\",\n                RuntimeWarning,\n                stacklevel=4,\n            )\n    return result\n"
    }
  ],
  "questions": [
    "@jreback I'm sorry mate I'd be happy to make a pull request but I'm not very good at this and I don't know why -1 index positions would ever be desired or how they could be filtered out, so I wouldn't know what to ask for in the documentation / pull request...\r\n\r\nCould you please elaborate or point me in the right direction?",
    "The docs say\r\n```\r\nIntegers from 0 to n - 1 indicating that the index at these positions matches the corresponding target values. Missing values in the target are marked by -1.\r\n```\r\n\r\nunder the Returns section. So I think we can close this one?",
    "Thanks @chrisjdixon for the report/suggestion, but wouldn't such a warning be disruptive to users intentionally using the function knowing it returns `-1` if no match is found?\r\n\r\nIf you want to clarify the docstring, then [here](https://pandas.pydata.org/pandas-docs/dev/development/contributing.html)'s the contributing guide, feel free to ask if anything's unclear"
  ],
  "golden_answers": [
    "The docs say\r\n```\r\nIntegers from 0 to n - 1 indicating that the index at these positions matches the corresponding target values. Missing values in the target are marked by -1.\r\n```\r\n\r\nunder the Returns section. So I think we can close this one?",
    "Thanks @chrisjdixon for the report/suggestion, but wouldn't such a warning be disruptive to users intentionally using the function knowing it returns `-1` if no match is found?\r\n\r\nIf you want to clarify the docstring, then [here](https://pandas.pydata.org/pandas-docs/dev/development/contributing.html)'s the contributing guide, feel free to ask if anything's unclear",
    "@MarcoGorelli you'd know better than me but my expectation was the warning would show in the documentation only [like it does for pd.Index.values](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.values.html), not when running the code. \r\n\r\nI trust but don't understand why -1 values might sometimes be desired, but I suppose if they would typically not be desired / expected, or if users unwittingly processing data incorrectly would be particularly problematic (as in my case), I'd think the warning as justifiable. But I'm new to pandas and programming so others would know best.\r\n\r\nI've had a look at the contributing guide but there's a huge amount of basic stuff / git that I still don't understand. I don't want to mess you guys around but I am very busy with other things right now and don't have time to quickly learn it all, so I might need a while. In the meantime if anyone more knowledgeable can be bothered quickly making the change I'd appreciate it."
  ],
  "questions_generated": [
    "What is the behavior of the `get_indexer` method when it encounters non-matching values, and how does this relate to the functionality discussed in the issue?",
    "Why might the `get_indexer` method use -1 for non-matching entries, and what are the implications of this design choice?",
    "How could the documentation be improved to make the functionality of `get_indexer` more beginner-friendly, according to the issue discussion?",
    "In the context of the provided code, how does the use of `get_indexer` affect the creation of the 'new_col' column in the DataFrame `df`?",
    "What are the steps a user should take if they want to avoid the unintended behavior of using -1 as an index in the `get_indexer` method?"
  ],
  "golden_answers_generated": [
    "The `get_indexer` method returns -1 for non-matching values. This is a designed behavior to indicate missing values in the target. In the issue, the user expected an error when a non-matching value was encountered, but instead, they received the last entry in the array due to using -1 as an index, which corresponds to the last element in Python indexing.",
    "The use of -1 for non-matching entries in the `get_indexer` method is a way to signal that a value was not found in the index. This design choice allows the user to handle missing values explicitly by checking for -1 and deciding how to process such cases. However, if not handled, using -1 as an index can lead to unintended results, such as accessing the last element of an array, which can lead to incorrect data processing.",
    "The documentation could be improved by adding a more explicit warning regarding the behavior of returning -1 for non-matching entries. A suggested improvement is to include a note stating: 'Note unmatched entries return -1, which when applied as an index returns series' last values without raising errors. If this is undesired, it's important you filter out -1s.' This would help beginners understand the potential pitfalls and how to handle them.",
    "In the provided code, `get_indexer` is used to map the 'ID' column of `df` to the index of `df2`, and the 'value' column of `df` to the columns of `df2`. The resulting index positions are used to retrieve values from `df2`. If `get_indexer` returns -1 for a non-matching 'value', it leads to accessing the last column of `df2`, potentially resulting in incorrect data being added to 'new_col'.",
    "To avoid the unintended behavior of using -1 as an index in the `get_indexer` method, users should explicitly check for -1 in the indices returned by `get_indexer` before accessing the array. This can be done using a conditional statement to filter out or handle the -1 indices, ensuring they don't inadvertently access the last element of the array. This handling ensures that only valid indices are used for data retrieval."
  ]
}