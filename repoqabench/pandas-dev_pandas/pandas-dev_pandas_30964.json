{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "30964",
  "issue_description": "# DOC: Remove tips and tricks section page from the wiki\n\nThis page: https://github.com/pandas-dev/pandas/wiki/Tips-&-Tricks-for-pandas-dev is mostly outdated, or provides general Python information.\r\n\r\nPersonally, I'd just keep the last section on `PANDAS_TESTING_MODE`. Not sure if the best would be to move it to the CI part of the docs: https://pandas.io/docs/development/contributing.html#testing-with-continuous-integration\r\n\r\nOr I'd probably just add a comment where that parameter is being used: https://github.com/pandas-dev/pandas/blob/master/.travis.yml#L46\r\n\r\nAnything else that people would like to move to the docs from that page?",
  "issue_comments": [
    {
      "id": 573724901,
      "user": "saloni30agr",
      "body": "Hey @datapythonista,\r\nI would like to work on this issue. From the above description, it looks like, it would be better to move last part  - **Enabling Deprecations when running tests** - to https://github.com/pandas-dev/pandas/blob/master/.travis.yml#L46. Should I go ahead with this? "
    },
    {
      "id": 573740422,
      "user": "datapythonista",
      "body": "I think that make sense, and having a PR will facilitate the discussion. But can't promise we'll move forward without further discussion."
    },
    {
      "id": 627027039,
      "user": "keshavgu",
      "body": "@datapythonista  Is the problem still active?"
    },
    {
      "id": 631990196,
      "user": "datapythonista",
      "body": "> @datapythonista Is the problem still active?\r\n\r\nThanks for the triaging. In my opinion we could delete the wiki page now. @simonjayhawkins do you think that wiki page can be deleted, or do you think some content is still useful, and should be moved to the docs?"
    },
    {
      "id": 632024140,
      "user": "simonjayhawkins",
      "body": "Some observations on the sections in Tips & Tricks for pandas dev\r\n\r\n---\r\nTesting for versions\r\n\r\nThis refers to the use of LooseVersion. Quick search does not find `LooseVersion` in the docs.\r\nThe example uses `LooseVersion(np.__version__)>='1.7.0'`. For numpy we use _np_version_under1p16 etc from pandas.compat.numpy\r\nFor testing we generally use skip_if_no etc from pandas.util._test_decorators unless we need to version for reasons other than skipping tests.\r\nWe have a convention for the imports where we always `import pandas.util._test_decorators as td` and then use the decorator as, for example, `@td.skip_if_no(\"pyarrow\", min_version=\"0.15.0\")`.\r\n\r\nI think we should capture these conventions in our contributing style guide, imports and testing sections.\r\n\r\n---\r\n\r\nSkipping an entire file full of tests on a failed import of a module named a_module\r\n\r\nWe no longer use this pattern. We mainly use, for instance,  `@td.skip_if_no_scipy` as a test function decorator or test class decorator.\r\nWith pytest, we can skip at module level. With just a brief search, I didn’t find any module level skips in the code. I think our preference is to retain test classes for namespacing and to use the class decorator.\r\n\r\nThis section also refers to including a message so that when testing we can see why things were skipped.\r\n\r\nI think we should ensure these conventions are captured in our contributing style guide, testing section.\r\n\r\n---\r\nNose\r\n\r\nWe now use pytest, but the operations mentioned can also be done with pytest.\r\n\r\nExclude a particular test (e.g., a test that's failing you don't care about)\r\n\r\n$ pytest pandas/tests -k ‘’not some_test_name’\r\n\r\nFail fast (on first failure - useful with git bisect)\r\n\r\n$ pytest pandas/tests -x\r\n\r\nRun with ids (and just re-run tests that failed)\r\n\r\n$ pytest pandas/tests --lf\r\n\r\nPrint out skipped tests and their messages\r\n\r\n$ pytest pandas/tests -rs\r\n\r\nPersonally I feel this information is out-of-scope for the pandas documentation.\r\n\r\n---\r\nMisc\r\n\r\nReading from a url\r\n\r\nThe convention is to use urlopen from pandas.io.common. This is not currently documented but is not used much in the code.\r\n\r\nReading a file named file.txt that's inside of a zip file named file.zip\r\n\r\nThe convention is to use ZipFile from pandas.io.common. Again this is not documented elsewhere.\r\n\r\nEnabling Deprecations when running tests\r\n\r\nAddressed by #31008\r\n\r\nI think we should ensure the conventions for urlopen and ZipFile are captured in our contributing style guide, testing section\r\n\r\n---\r\n\r\nPRs addressing any of the above welcome."
    },
    {
      "id": 633253682,
      "user": "vijaysaimutyala",
      "body": "@simonjayhawkins @datapythonista I would like to work on the above. This is my first time contributing here. As per above comments, I suppose parts of the wiki should be going here.\r\n\r\nhttps://pandas.io/docs/development/code_style.html\r\n\r\nPlease correct me if I'm wrong."
    },
    {
      "id": 633557820,
      "user": "simonjayhawkins",
      "body": "> As per above comments, I suppose parts of the wiki should be going here.\r\n> \r\n> https://pandas.io/docs/development/code_style.html\r\n\r\nThat's where I think we should now be adding new content.\r\n\r\nsee also #33851 for current discussion/investigation about improving the code style docs. @Stockfoot @moaraccounts"
    },
    {
      "id": 633655182,
      "user": "vijaysaimutyala",
      "body": "Thanks @simonjayhawkins. I was reading your comments on keeping the first PR's as minimal as possible and submitted my first PR that covers just urlopen and ZipFile in the style guide with https://github.com/pandas-dev/pandas/pull/34366. Hope it looks ok.\r\n\r\nI've a question on this. I was using VS Code for editing the rst file. I noticed VS Code has the reStructuredText extension that enables to live preview the rst file. However I see the below error while trying to start the live preview.\r\n\r\nI've used the conf.py that's present in the root directory of the project. Sphinx does seem to have installed well since I was able to build the docs. Do you have any suggestions on this ?\r\n\r\n![image](https://user-images.githubusercontent.com/7084628/82831597-7ae15880-9ed6-11ea-8776-d812d6f6e45b.png)\r\n\r\n"
    },
    {
      "id": 647106312,
      "user": "MarcoGorelli",
      "body": "> Do you have any suggestions on this ?\r\n\r\nI wasn't able to get that working either, I usually just build the page I'm interested in seeing and open the html in the browser. e.g.\r\n```\r\ncd doc\r\npython make.py clean\r\npython make.py --single development/code_style.rst\r\n```"
    },
    {
      "id": 658944280,
      "user": "egd001",
      "body": "Hi,\r\n\r\nIs this issue closed or can I help?\r\n\r\nRegards"
    },
    {
      "id": 658945868,
      "user": "simonjayhawkins",
      "body": "Thanks @egd001 the Testing for versions and Skipping an entire file full of tests on a failed import of a module named a_module sections from https://github.com/pandas-dev/pandas/issues/30964#issuecomment-632024140 are outstanding"
    },
    {
      "id": 874044258,
      "user": "debnathshoham",
      "body": "Hi, I am new to open source contributions.\r\nIs this issue open? It's still not clear to me, where to move the tips and tricks section to?"
    },
    {
      "id": 874387947,
      "user": "datapythonista",
      "body": "Looks like all the useful content has already been moved. Only left is how to compare versions in Python with setuptools (not worth having in the pandas docs IMO, more for a stackoverflow question). And a section on nose, which I'm not aware of being used anymore.\r\n\r\nIf there are no objections I'll delete the wiki page soon."
    },
    {
      "id": 875778388,
      "user": "datapythonista",
      "body": "Deleted the page."
    }
  ],
  "text_context": "# DOC: Remove tips and tricks section page from the wiki\n\nThis page: https://github.com/pandas-dev/pandas/wiki/Tips-&-Tricks-for-pandas-dev is mostly outdated, or provides general Python information.\r\n\r\nPersonally, I'd just keep the last section on `PANDAS_TESTING_MODE`. Not sure if the best would be to move it to the CI part of the docs: https://pandas.io/docs/development/contributing.html#testing-with-continuous-integration\r\n\r\nOr I'd probably just add a comment where that parameter is being used: https://github.com/pandas-dev/pandas/blob/master/.travis.yml#L46\r\n\r\nAnything else that people would like to move to the docs from that page?\n\nHey @datapythonista,\r\nI would like to work on this issue. From the above description, it looks like, it would be better to move last part  - **Enabling Deprecations when running tests** - to https://github.com/pandas-dev/pandas/blob/master/.travis.yml#L46. Should I go ahead with this? \n\nI think that make sense, and having a PR will facilitate the discussion. But can't promise we'll move forward without further discussion.\n\n@datapythonista  Is the problem still active?\n\n> @datapythonista Is the problem still active?\r\n\r\nThanks for the triaging. In my opinion we could delete the wiki page now. @simonjayhawkins do you think that wiki page can be deleted, or do you think some content is still useful, and should be moved to the docs?\n\nSome observations on the sections in Tips & Tricks for pandas dev\r\n\r\n---\r\nTesting for versions\r\n\r\nThis refers to the use of LooseVersion. Quick search does not find `LooseVersion` in the docs.\r\nThe example uses `LooseVersion(np.__version__)>='1.7.0'`. For numpy we use _np_version_under1p16 etc from pandas.compat.numpy\r\nFor testing we generally use skip_if_no etc from pandas.util._test_decorators unless we need to version for reasons other than skipping tests.\r\nWe have a convention for the imports where we always `import pandas.util._test_decorators as td` and then use the decorator as, for example, `@td.skip_if_no(\"pyarrow\", min_version=\"0.15.0\")`.\r\n\r\nI think we should capture these conventions in our contributing style guide, imports and testing sections.\r\n\r\n---\r\n\r\nSkipping an entire file full of tests on a failed import of a module named a_module\r\n\r\nWe no longer use this pattern. We mainly use, for instance,  `@td.skip_if_no_scipy` as a test function decorator or test class decorator.\r\nWith pytest, we can skip at module level. With just a brief search, I didn’t find any module level skips in the code. I think our preference is to retain test classes for namespacing and to use the class decorator.\r\n\r\nThis section also refers to including a message so that when testing we can see why things were skipped.\r\n\r\nI think we should ensure these conventions are captured in our contributing style guide, testing section.\r\n\r\n---\r\nNose\r\n\r\nWe now use pytest, but the operations mentioned can also be done with pytest.\r\n\r\nExclude a particular test (e.g., a test that's failing you don't care about)\r\n\r\n$ pytest pandas/tests -k ‘’not some_test_name’\r\n\r\nFail fast (on first failure - useful with git bisect)\r\n\r\n$ pytest pandas/tests -x\r\n\r\nRun with ids (and just re-run tests that failed)\r\n\r\n$ pytest pandas/tests --lf\r\n\r\nPrint out skipped tests and their messages\r\n\r\n$ pytest pandas/tests -rs\r\n\r\nPersonally I feel this information is out-of-scope for the pandas documentation.\r\n\r\n---\r\nMisc\r\n\r\nReading from a url\r\n\r\nThe convention is to use urlopen from pandas.io.common. This is not currently documented but is not used much in the code.\r\n\r\nReading a file named file.txt that's inside of a zip file named file.zip\r\n\r\nThe convention is to use ZipFile from pandas.io.common. Again this is not documented elsewhere.\r\n\r\nEnabling Deprecations when running tests\r\n\r\nAddressed by #31008\r\n\r\nI think we should ensure the conventions for urlopen and ZipFile are captured in our contributing style guide, testing section\r\n\r\n---\r\n\r\nPRs addressing any of the above welcome.\n\n@simonjayhawkins @datapythonista I would like to work on the above. This is my first time contributing here. As per above comments, I suppose parts of the wiki should be going here.\r\n\r\nhttps://pandas.io/docs/development/code_style.html\r\n\r\nPlease correct me if I'm wrong.\n\n> As per above comments, I suppose parts of the wiki should be going here.\r\n> \r\n> https://pandas.io/docs/development/code_style.html\r\n\r\nThat's where I think we should now be adding new content.\r\n\r\nsee also #33851 for current discussion/investigation about improving the code style docs. @Stockfoot @moaraccounts\n\nThanks @simonjayhawkins. I was reading your comments on keeping the first PR's as minimal as possible and submitted my first PR that covers just urlopen and ZipFile in the style guide with https://github.com/pandas-dev/pandas/pull/34366. Hope it looks ok.\r\n\r\nI've a question on this. I was using VS Code for editing the rst file. I noticed VS Code has the reStructuredText extension that enables to live preview the rst file. However I see the below error while trying to start the live preview.\r\n\r\nI've used the conf.py that's present in the root directory of the project. Sphinx does seem to have installed well since I was able to build the docs. Do you have any suggestions on this ?\r\n\r\n![image](https://user-images.githubusercontent.com/7084628/82831597-7ae15880-9ed6-11ea-8776-d812d6f6e45b.png)\r\n\r\n\n\n> Do you have any suggestions on this ?\r\n\r\nI wasn't able to get that working either, I usually just build the page I'm interested in seeing and open the html in the browser. e.g.\r\n```\r\ncd doc\r\npython make.py clean\r\npython make.py --single development/code_style.rst\r\n```\n\nHi,\r\n\r\nIs this issue closed or can I help?\r\n\r\nRegards\n\nThanks @egd001 the Testing for versions and Skipping an entire file full of tests on a failed import of a module named a_module sections from https://github.com/pandas-dev/pandas/issues/30964#issuecomment-632024140 are outstanding\n\nHi, I am new to open source contributions.\r\nIs this issue open? It's still not clear to me, where to move the tips and tricks section to?\n\nLooks like all the useful content has already been moved. Only left is how to compare versions in Python with setuptools (not worth having in the pandas docs IMO, more for a stackoverflow question). And a section on nose, which I'm not aware of being used anymore.\r\n\r\nIf there are no objections I'll delete the wiki page soon.\n\nDeleted the page.",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/34366",
  "code_context": [],
  "questions": [
    "Thanks @simonjayhawkins. I was reading your comments on keeping the first PR's as minimal as possible and submitted my first PR that covers just urlopen and ZipFile in the style guide with https://github.com/pandas-dev/pandas/pull/34366. Hope it looks ok.\r\n\r\nI've a question on this. I was using VS Code for editing the rst file. I noticed VS Code has the reStructuredText extension that enables to live preview the rst file. However I see the below error while trying to start the live preview.\r\n\r\nI've used the conf.py that's present in the root directory of the project. Sphinx does seem to have installed well since I was able to build the docs. Do you have any suggestions on this ?\r\n\r\n![image](https://user-images.githubusercontent.com/7084628/82831597-7ae15880-9ed6-11ea-8776-d812d6f6e45b.png)",
    "> Do you have any suggestions on this ?\r\n\r\nI wasn't able to get that working either, I usually just build the page I'm interested in seeing and open the html in the browser. e.g.\r\n```\r\ncd doc\r\npython make.py clean\r\npython make.py --single development/code_style.rst\r\n```",
    "Hi,\r\n\r\nIs this issue closed or can I help?\r\n\r\nRegards"
  ],
  "golden_answers": [
    "> Do you have any suggestions on this ?\r\n\r\nI wasn't able to get that working either, I usually just build the page I'm interested in seeing and open the html in the browser. e.g.\r\n```\r\ncd doc\r\npython make.py clean\r\npython make.py --single development/code_style.rst\r\n```",
    "Thanks @egd001 the Testing for versions and Skipping an entire file full of tests on a failed import of a module named a_module sections from https://github.com/pandas-dev/pandas/issues/30964#issuecomment-632024140 are outstanding",
    "Thanks @egd001 the Testing for versions and Skipping an entire file full of tests on a failed import of a module named a_module sections from https://github.com/pandas-dev/pandas/issues/30964#issuecomment-632024140 are outstanding"
  ],
  "questions_generated": [
    "What is the purpose of the 'PANDAS_TESTING_MODE' section mentioned in the issue, and where is it suggested to be moved?",
    "Why is the 'Tips & Tricks for pandas dev' wiki page considered outdated, and what is the proposed action for it?",
    "Which testing convention is recommended over using 'LooseVersion' for version checks in pandas, and where should this convention be documented?",
    "What is the current preferred method for skipping tests in pandas, and how does it differ from the one mentioned in the wiki page?",
    "How has the transition from Nose to pytest affected the testing practices mentioned in the wiki page?"
  ],
  "golden_answers_generated": [
    "The 'PANDAS_TESTING_MODE' section is intended to provide guidance on enabling deprecations when running tests. It is suggested to either move this section to the CI part of the documentation or add a comment where the parameter is used, specifically at line 46 in the .travis.yml file.",
    "The wiki page is considered outdated because it mostly provides general Python information rather than specific, current best practices for pandas development. The proposed action is to remove the page entirely, though there is a discussion on whether any content, particularly the 'PANDAS_TESTING_MODE' section, should be retained and relocated in the documentation.",
    "Instead of using 'LooseVersion', it is recommended to use '_np_version_under1p16' and similar utilities from 'pandas.compat.numpy' for version checks. These conventions should be documented in the contributing style guide under the imports and testing sections.",
    "The current preferred method for skipping tests is to use decorators such as '@td.skip_if_no_scipy' at the function or class level, as opposed to the older method of skipping an entire file using an import check. This showcases a more granular and standardized approach to skipping tests based on dependencies.",
    "The transition from Nose to pytest has affected testing practices by updating how certain operations, like excluding tests, are handled. While Nose was used previously, similar operations can now be performed using pytest, which is the current testing framework for pandas. This change reflects a shift towards more modern and supported testing methodologies."
  ]
}