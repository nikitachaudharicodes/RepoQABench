{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "52436",
  "issue_description": "# BUG: DataFrame.pivot(index=None) raises KeyError\n\n### Pandas version checks\r\n\r\n- [X] I have checked that this issue has not already been reported.\r\n\r\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\r\n\r\n- [ ] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\r\n\r\n\r\n### Reproducible Example\r\n\r\n```python\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(dict(a=[0,1,1,0], b=[42,43,44,45]), index=[10,20,30,40])\r\npivoted = df.pivot(index=None, columns='a', values='b')\r\nprint(pivoted)\r\n```\r\n\r\n### Issue Description\r\n\r\nDataFrame.pivot() documentation states:\r\n\r\n```\r\nindex: str or object or a list of str, optional\r\n\r\n    Column to use to make new frame’s index. If None, uses existing index.\r\n```\r\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html\r\n\r\nIn pandas 1.5, index=None provides the expected result. In pandas 2.0.0, it raises a KeyError exception.\r\n\r\n### Expected Behavior\r\n\r\nindex=None should use the existing index as per documentation, or documentation should be modified and 2.0.0 breaking changes list updated to add that new behavior. \r\n\r\n### Installed Versions\r\n\r\n<details>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit           : 478d340667831908b5b4bf09a2787a11a14560c9\r\npython           : 3.8.10.final.0\r\npython-bits      : 64\r\nOS               : Linux\r\nOS-release       : 5.15.0-60-generic\r\nVersion          : #66~20.04.1-Ubuntu SMP Wed Jan 25 09:41:30 UTC 2023\r\nmachine          : x86_64\r\nprocessor        : x86_64\r\nbyteorder        : little\r\nLC_ALL           : None\r\nLANG             : en_US.UTF-8\r\nLOCALE           : en_US.UTF-8\r\n\r\npandas           : 2.0.0\r\nnumpy            : 1.24.2\r\npytz             : 2023.3\r\ndateutil         : 2.8.2\r\nsetuptools       : 67.6.1\r\npip              : 23.0.1\r\nCython           : None\r\npytest           : 7.2.2\r\nhypothesis       : None\r\nsphinx           : 6.1.3\r\nblosc            : None\r\nfeather          : None\r\nxlsxwriter       : None\r\nlxml.etree       : 4.9.2\r\nhtml5lib         : None\r\npymysql          : None\r\npsycopg2         : None\r\njinja2           : 3.1.2\r\nIPython          : 8.12.0\r\npandas_datareader: None\r\nbs4              : 4.12.0\r\nbottleneck       : None\r\nbrotli           : None\r\nfastparquet      : None\r\nfsspec           : None\r\ngcsfs            : None\r\nmatplotlib       : 3.7.1\r\nnumba            : None\r\nnumexpr          : None\r\nodfpy            : None\r\nopenpyxl         : None\r\npandas_gbq       : None\r\npyarrow          : 11.0.0\r\npyreadstat       : None\r\npyxlsb           : None\r\ns3fs             : None\r\nscipy            : 1.10.1\r\nsnappy           : None\r\nsqlalchemy       : None\r\ntables           : None\r\ntabulate         : None\r\nxarray           : None\r\nxlrd             : None\r\nzstandard        : None\r\ntzdata           : 2023.3\r\nqtpy             : None\r\npyqt5            : None\r\n\r\n</details>\r\n",
  "issue_comments": [
    {
      "id": 1497298050,
      "user": "MarcoGorelli",
      "body": "Thanks @douglas-raillard-arm for the report\r\n\r\nThis was caused by https://github.com/pandas-dev/pandas/pull/48293 cc @phofl \r\n\r\nhttps://www.kaggle.com/code/marcogorelli/pandas-regression-example?scriptVersionId=124667072"
    },
    {
      "id": 1497300761,
      "user": "MarcoGorelli",
      "body": "Looks like\r\n```python\r\ndf.pivot(columns='a', values='b')\r\n```\r\ngives you your expected output, so maybe the docs just need to be updated  to say \"Column to use to make new frame’s index. If not given, uses existing index.\""
    },
    {
      "id": 1497300783,
      "user": "phofl",
      "body": "I‘d say that this behaves as intended and needs a doc update "
    },
    {
      "id": 1497658231,
      "user": "srkds",
      "body": "take"
    },
    {
      "id": 1497718824,
      "user": "srkds",
      "body": "Hi\r\nI understood the problem and tried reproducing the issue.\r\nas described by Marco and Patrick we just need a doc update.\r\n\r\nJust to confirm we have to change the doc here if I'm not wrong can anyone help me here? I would like to contribute.\r\nhttps://github.com/pandas-dev/pandas/blob/3ce07cb46986ce59427b601c6878c81633e436eb/pandas/core/frame.py#L8677\r\n\r\nThanks!"
    },
    {
      "id": 1497734800,
      "user": "MarcoGorelli",
      "body": "yup"
    },
    {
      "id": 1497743389,
      "user": "srkds",
      "body": "> yup\r\n\r\nThanks, Marco for confirming 👍"
    },
    {
      "id": 1497829421,
      "user": "douglas-raillard-arm",
      "body": "Please also make sure to include it in the breaking change list on pandas 2.0.0:\r\nhttps://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html"
    },
    {
      "id": 1498443159,
      "user": "srkds",
      "body": "> Please also make sure to include it in the breaking change list on pandas 2.0.0: https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html\r\n\r\nI think it's already written here\r\nhttps://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#reshaping\r\n\r\nBug Fixes / reshaping\r\n👉 Bug in [:meth:`DataFrame.pivot`](https://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#id3393) not respecting None as column name ([:issue:`48293`](https://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#id3395))\r\n\r\nor should I put \r\n\"Disallow passing `index=None` argument to `DataFrame.pivot()` if not given, uses existing index.\" \r\nunder [removal-of-prior-version-deprecations-changes](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html#removal-of-prior-version-deprecations-changes) section?"
    },
    {
      "id": 1498612573,
      "user": "douglas-raillard-arm",
      "body": "I see how it is considered a bug fix but I think for the vast majority of people using strings as column names that will be a breaking change where the working default value has changed from None to no_default \r\n"
    }
  ],
  "text_context": "# BUG: DataFrame.pivot(index=None) raises KeyError\n\n### Pandas version checks\r\n\r\n- [X] I have checked that this issue has not already been reported.\r\n\r\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\r\n\r\n- [ ] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\r\n\r\n\r\n### Reproducible Example\r\n\r\n```python\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(dict(a=[0,1,1,0], b=[42,43,44,45]), index=[10,20,30,40])\r\npivoted = df.pivot(index=None, columns='a', values='b')\r\nprint(pivoted)\r\n```\r\n\r\n### Issue Description\r\n\r\nDataFrame.pivot() documentation states:\r\n\r\n```\r\nindex: str or object or a list of str, optional\r\n\r\n    Column to use to make new frame’s index. If None, uses existing index.\r\n```\r\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html\r\n\r\nIn pandas 1.5, index=None provides the expected result. In pandas 2.0.0, it raises a KeyError exception.\r\n\r\n### Expected Behavior\r\n\r\nindex=None should use the existing index as per documentation, or documentation should be modified and 2.0.0 breaking changes list updated to add that new behavior. \r\n\r\n### Installed Versions\r\n\r\n<details>\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit           : 478d340667831908b5b4bf09a2787a11a14560c9\r\npython           : 3.8.10.final.0\r\npython-bits      : 64\r\nOS               : Linux\r\nOS-release       : 5.15.0-60-generic\r\nVersion          : #66~20.04.1-Ubuntu SMP Wed Jan 25 09:41:30 UTC 2023\r\nmachine          : x86_64\r\nprocessor        : x86_64\r\nbyteorder        : little\r\nLC_ALL           : None\r\nLANG             : en_US.UTF-8\r\nLOCALE           : en_US.UTF-8\r\n\r\npandas           : 2.0.0\r\nnumpy            : 1.24.2\r\npytz             : 2023.3\r\ndateutil         : 2.8.2\r\nsetuptools       : 67.6.1\r\npip              : 23.0.1\r\nCython           : None\r\npytest           : 7.2.2\r\nhypothesis       : None\r\nsphinx           : 6.1.3\r\nblosc            : None\r\nfeather          : None\r\nxlsxwriter       : None\r\nlxml.etree       : 4.9.2\r\nhtml5lib         : None\r\npymysql          : None\r\npsycopg2         : None\r\njinja2           : 3.1.2\r\nIPython          : 8.12.0\r\npandas_datareader: None\r\nbs4              : 4.12.0\r\nbottleneck       : None\r\nbrotli           : None\r\nfastparquet      : None\r\nfsspec           : None\r\ngcsfs            : None\r\nmatplotlib       : 3.7.1\r\nnumba            : None\r\nnumexpr          : None\r\nodfpy            : None\r\nopenpyxl         : None\r\npandas_gbq       : None\r\npyarrow          : 11.0.0\r\npyreadstat       : None\r\npyxlsb           : None\r\ns3fs             : None\r\nscipy            : 1.10.1\r\nsnappy           : None\r\nsqlalchemy       : None\r\ntables           : None\r\ntabulate         : None\r\nxarray           : None\r\nxlrd             : None\r\nzstandard        : None\r\ntzdata           : 2023.3\r\nqtpy             : None\r\npyqt5            : None\r\n\r\n</details>\r\n\n\nThanks @douglas-raillard-arm for the report\r\n\r\nThis was caused by https://github.com/pandas-dev/pandas/pull/48293 cc @phofl \r\n\r\nhttps://www.kaggle.com/code/marcogorelli/pandas-regression-example?scriptVersionId=124667072\n\nLooks like\r\n```python\r\ndf.pivot(columns='a', values='b')\r\n```\r\ngives you your expected output, so maybe the docs just need to be updated  to say \"Column to use to make new frame’s index. If not given, uses existing index.\"\n\nI‘d say that this behaves as intended and needs a doc update \n\ntake\n\nHi\r\nI understood the problem and tried reproducing the issue.\r\nas described by Marco and Patrick we just need a doc update.\r\n\r\nJust to confirm we have to change the doc here if I'm not wrong can anyone help me here? I would like to contribute.\r\nhttps://github.com/pandas-dev/pandas/blob/3ce07cb46986ce59427b601c6878c81633e436eb/pandas/core/frame.py#L8677\r\n\r\nThanks!\n\nyup\n\n> yup\r\n\r\nThanks, Marco for confirming 👍\n\nPlease also make sure to include it in the breaking change list on pandas 2.0.0:\r\nhttps://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html\n\n> Please also make sure to include it in the breaking change list on pandas 2.0.0: https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html\r\n\r\nI think it's already written here\r\nhttps://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#reshaping\r\n\r\nBug Fixes / reshaping\r\n👉 Bug in [:meth:`DataFrame.pivot`](https://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#id3393) not respecting None as column name ([:issue:`48293`](https://github.com/pandas-dev/pandas/blob/main/doc/source/whatsnew/v2.0.0.rst#id3395))\r\n\r\nor should I put \r\n\"Disallow passing `index=None` argument to `DataFrame.pivot()` if not given, uses existing index.\" \r\nunder [removal-of-prior-version-deprecations-changes](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html#removal-of-prior-version-deprecations-changes) section?\n\nI see how it is considered a bug fix but I think for the vast majority of people using strings as column names that will be a breaking change where the working default value has changed from None to no_default \r\n",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/48293",
  "code_context": [
    {
      "filename": "pandas/core/frame.py",
      "content": "\"\"\"\nDataFrame\n---------\nAn efficient 2D container for potentially mixed-type time series or other\nlabeled data series.\n\nSimilar to its R counterpart, data.frame, except providing automatic data\nalignment and a host of useful data manipulation methods having to do with the\nlabeling information\n\"\"\"\nfrom __future__ import annotations\n\nimport collections\nfrom collections import abc\nimport datetime\nimport functools\nimport inspect\nfrom io import StringIO\nimport itertools\nfrom textwrap import dedent\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Hashable,\n    Iterable,\n    Iterator,\n    Literal,\n    Mapping,\n    Sequence,\n    cast,\n    overload,\n)\nimport warnings\n\nimport numpy as np\nimport numpy.ma as ma\n\nfrom pandas._config import get_option\n\nfrom pandas._libs import (\n    algos as libalgos,\n    lib,\n    properties,\n)\nfrom pandas._libs.hashtable import duplicated\nfrom pandas._libs.lib import (\n    NoDefault,\n    no_default,\n)\nfrom pandas._typing import (\n    AggFuncType,\n    AnyAll,\n    AnyArrayLike,\n    ArrayLike,\n    Axes,\n    Axis,\n    ColspaceArgType,\n    CompressionOptions,\n    Dtype,\n    DtypeObj,\n    FilePath,\n    FillnaOptions,\n    FloatFormatType,\n    FormattersType,\n    Frequency,\n    IgnoreRaise,\n    IndexKeyFunc,\n    IndexLabel,\n    Level,\n    NaPosition,\n    PythonFuncType,\n    QuantileInterpolation,\n    ReadBuffer,\n    Renamer,\n    Scalar,\n    SortKind,\n    StorageOptions,\n    Suffixes,\n    TimedeltaConvertibleTypes,\n    TimestampConvertibleTypes,\n    ValueKeyFunc,\n    WriteBuffer,\n    npt,\n)\nfrom pandas.compat._optional import import_optional_dependency\nfrom pandas.compat.numpy import (\n    function as nv,\n    np_percentile_argname,\n)\nfrom pandas.util._decorators import (\n    Appender,\n    Substitution,\n    deprecate_kwarg,\n    deprecate_nonkeyword_arguments,\n    doc,\n    rewrite_axis_style_signature,\n)\nfrom pandas.util._exceptions import find_stack_level\nfrom pandas.util._validators import (\n    validate_ascending,\n    validate_axis_style_args,\n    validate_bool_kwarg,\n    validate_percentile,\n)\n\nfrom pandas.core.dtypes.cast import (\n    can_hold_element,\n    construct_1d_arraylike_from_scalar,\n    construct_2d_arraylike_from_scalar,\n    find_common_type,\n    infer_dtype_from_scalar,\n    invalidate_string_dtypes,\n    maybe_box_native,\n    maybe_downcast_to_dtype,\n)\nfrom pandas.core.dtypes.common import (\n    ensure_platform_int,\n    infer_dtype_from_object,\n    is_1d_only_ea_dtype,\n    is_bool_dtype,\n    is_dataclass,\n    is_datetime64_any_dtype,\n    is_dict_like,\n    is_dtype_equal,\n    is_extension_array_dtype,\n    is_float,\n    is_float_dtype,\n    is_hashable,\n    is_integer,\n    is_integer_dtype,\n    is_iterator,\n    is_list_like,\n    is_numeric_dtype,\n    is_object_dtype,\n    is_scalar,\n    is_sequence,\n    needs_i8_conversion,\n    pandas_dtype,\n)\nfrom pandas.core.dtypes.dtypes import ExtensionDtype\nfrom pandas.core.dtypes.missing import (\n    isna,\n    notna,\n)\n\nfrom pandas.core import (\n    algorithms,\n    common as com,\n    nanops,\n    ops,\n)\nfrom pandas.core.accessor import CachedAccessor\nfrom pandas.core.apply import (\n    reconstruct_func,\n    relabel_result,\n)\nfrom pandas.core.array_algos.take import take_2d_multi\nfrom pandas.core.arraylike import OpsMixin\nfrom pandas.core.arrays import (\n    DatetimeArray,\n    ExtensionArray,\n    PeriodArray,\n    TimedeltaArray,\n)\nfrom pandas.core.arrays.sparse import SparseFrameAccessor\nfrom pandas.core.construction import (\n    extract_array,\n    sanitize_array,\n    sanitize_masked_array,\n)\nfrom pandas.core.generic import NDFrame\nfrom pandas.core.indexers import check_key_length\nfrom pandas.core.indexes.api import (\n    DatetimeIndex,\n    Index,\n    PeriodIndex,\n    default_index,\n    ensure_index,\n    ensure_index_from_sequences,\n)\nfrom pandas.core.indexes.multi import (\n    MultiIndex,\n    maybe_droplevels,\n)\nfrom pandas.core.indexing import (\n    check_bool_indexer,\n    check_deprecated_indexers,\n    convert_to_index_sliceable,\n)\nfrom pandas.core.internals import (\n    ArrayManager,\n    BlockManager,\n)\nfrom pandas.core.internals.construction import (\n    arrays_to_mgr,\n    dataclasses_to_dicts,\n    dict_to_mgr,\n    mgr_to_mgr,\n    ndarray_to_mgr,\n    nested_data_to_arrays,\n    rec_array_to_mgr,\n    reorder_arrays,\n    to_arrays,\n    treat_as_nested,\n)\nfrom pandas.core.reshape.melt import melt\nfrom pandas.core.series import Series\nfrom pandas.core.shared_docs import _shared_docs\nfrom pandas.core.sorting import (\n    get_group_index,\n    lexsort_indexer,\n    nargsort,\n)\n\nfrom pandas.io.common import get_handle\nfrom pandas.io.formats import (\n    console,\n    format as fmt,\n)\nfrom pandas.io.formats.info import (\n    INFO_DOCSTRING,\n    DataFrameInfo,\n    frame_sub_kwargs,\n)\nimport pandas.plotting\n\nif TYPE_CHECKING:\n\n    from pandas.core.groupby.generic import DataFrameGroupBy\n    from pandas.core.interchange.dataframe_protocol import DataFrame as DataFrameXchg\n    from pandas.core.internals import SingleDataManager\n    from pandas.core.resample import Resampler\n\n    from pandas.io.formats.style import Styler\n\n# ---------------------------------------------------------------------\n# Docstring templates\n\n_shared_doc_kwargs = {\n    \"axes\": \"index, columns\",\n    \"klass\": \"DataFrame\",\n    \"axes_single_arg\": \"{0 or 'index', 1 or 'columns'}\",\n    \"axis\": \"\"\"axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index': apply function to each column.\n        If 1 or 'columns': apply function to each row.\"\"\",\n    \"inplace\": \"\"\"\n    inplace : bool, default False\n        Whether to modify the DataFrame rather than creating a new one.\"\"\",\n    \"optional_by\": \"\"\"\n        by : str or list of str\n            Name or list of names to sort by.\n\n            - if `axis` is 0 or `'index'` then `by` may contain index\n              levels and/or column labels.\n            - if `axis` is 1 or `'columns'` then `by` may contain column\n              levels and/or index labels.\"\"\",\n    \"optional_labels\": \"\"\"labels : array-like, optional\n            New labels / index to conform the axis specified by 'axis' to.\"\"\",\n    \"optional_axis\": \"\"\"axis : int or str, optional\n            Axis to target. Can be either the axis name ('index', 'columns')\n            or number (0, 1).\"\"\",\n    \"replace_iloc\": \"\"\"\n    This differs from updating with ``.loc`` or ``.iloc``, which require\n    you to specify a location to update with some value.\"\"\",\n}\n\n_numeric_only_doc = \"\"\"numeric_only : bool or None, default None\n    Include only float, int, boolean data. If None, will attempt to use\n    everything, then use only numeric data\n\"\"\"\n\n_merge_doc = \"\"\"\nMerge DataFrame or named Series objects with a database-style join.\n\nA named Series object is treated as a DataFrame with a single named column.\n\nThe join is done on columns or indexes. If joining columns on\ncolumns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes\non indexes or indexes on a column or columns, the index will be passed on.\nWhen performing a cross merge, no column specifications to merge on are\nallowed.\n\n.. warning::\n\n    If both key columns contain rows where the key is a null value, those\n    rows will be matched against each other. This is different from usual SQL\n    join behaviour and can lead to unexpected results.\n\nParameters\n----------%s\nright : DataFrame or named Series\n    Object to merge with.\nhow : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'\n    Type of merge to be performed.\n\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order.\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order.\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically.\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys.\n    * cross: creates the cartesian product from both frames, preserves the order\n      of the left keys.\n\n      .. versionadded:: 1.2.0\n\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : bool, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels.\nright_index : bool, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index.\nsort : bool, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword).\nsuffixes : list-like, default is (\"_x\", \"_y\")\n    A length-2 sequence where each element is optionally a string\n    indicating the suffix to add to overlapping column names in\n    `left` and `right` respectively. Pass a value of `None` instead\n    of a string to indicate that the column name from `left` or\n    `right` should be left as-is, with no suffix. At least one of the\n    values must not be None.\ncopy : bool, default True\n    If False, avoid copy if possible.\nindicator : bool or str, default False\n    If True, adds a column to the output DataFrame called \"_merge\" with\n    information on the source of each row. The column can be given a different\n    name by providing a string argument. The column will have a Categorical\n    type with the value of \"left_only\" for observations whose merge key only\n    appears in the left DataFrame, \"right_only\" for observations\n    whose merge key only appears in the right DataFrame, and \"both\"\n    if the observation's merge key is found in both DataFrames.\n\nvalidate : str, optional\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\nReturns\n-------\nDataFrame\n    A DataFrame of the two merged objects.\n\nSee Also\n--------\nmerge_ordered : Merge with optional filling/interpolation.\nmerge_asof : Merge on nearest keys.\nDataFrame.join : Similar method using indices.\n\nNotes\n-----\nSupport for specifying index levels as the `on`, `left_on`, and\n`right_on` parameters was added in version 0.23.0\nSupport for merging named Series objects was added in version 0.24.0\n\nExamples\n--------\n>>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\nMerge df1 and df2 on the lkey and rkey columns. The value columns have\nthe default suffixes, _x and _y, appended.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  foo        5  foo        5\n3  foo        5  foo        8\n4  bar        2  bar        6\n5  baz        3  baz        7\n\nMerge DataFrames df1 and df2 with specified left and right suffixes\nappended to any overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  foo           5  foo            5\n3  foo           5  foo            8\n4  bar           2  bar            6\n5  baz           3  baz            7\n\nMerge DataFrames df1 and df2, but raise an exception if the DataFrames have\nany overlapping columns.\n\n>>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')\n\n>>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n>>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n>>> df1\n      a  b\n0   foo  1\n1   bar  2\n>>> df2\n      a  c\n0   foo  3\n1   baz  4\n\n>>> df1.merge(df2, how='inner', on='a')\n      a  b  c\n0   foo  1  3\n\n>>> df1.merge(df2, how='left', on='a')\n      a  b  c\n0   foo  1  3.0\n1   bar  2  NaN\n\n>>> df1 = pd.DataFrame({'left': ['foo', 'bar']})\n>>> df2 = pd.DataFrame({'right': [7, 8]})\n>>> df1\n    left\n0   foo\n1   bar\n>>> df2\n    right\n0   7\n1   8\n\n>>> df1.merge(df2, how='cross')\n   left  right\n0   foo      7\n1   foo      8\n2   bar      7\n3   bar      8\n\"\"\"\n\n\n# -----------------------------------------------------------------------\n# DataFrame class\n\n\nclass DataFrame(NDFrame, OpsMixin):\n    \"\"\"\n    Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\n    Data structure also contains labeled axes (rows and columns).\n    Arithmetic operations align on both row and column labels. Can be\n    thought of as a dict-like container for Series objects. The primary\n    pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n        data is a dict, column order follows insertion-order. If a dict contains Series\n        which have an index defined, it is aligned by its index.\n\n        .. versionchanged:: 0.25.0\n           If data is a list of dicts, column order follows insertion-order.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided.\n    columns : Index or array-like\n        Column labels to use for resulting frame when data does not have them,\n        defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n        will perform column selection instead.\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer.\n    copy : bool or None, default None\n        Copy data from inputs.\n        For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n        or 2d ndarray input, the default of None behaves like ``copy=False``.\n        If data is a dict containing one or more Series (possibly of different dtypes),\n        ``copy=False`` will ensure that these inputs are not copied.\n\n        .. versionchanged:: 1.3.0\n\n    See Also\n    --------\n    DataFrame.from_records : Constructor from tuples, also record arrays.\n    DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n    read_table : Read general delimited file into DataFrame.\n    read_clipboard : Read text from clipboard into DataFrame.\n\n    Notes\n    -----\n    Please reference the :ref:`User Guide <basics.dataframe>` for more information.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from a dictionary including Series:\n\n    >>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n    >>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n       col1  col2\n    0     0   NaN\n    1     1   NaN\n    2     2   2.0\n    3     3   3.0\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    ...                    columns=['a', 'b', 'c'])\n    >>> df2\n       a  b  c\n    0  1  2  3\n    1  4  5  6\n    2  7  8  9\n\n    Constructing DataFrame from a numpy ndarray that has labeled columns:\n\n    >>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n    ...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n    >>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n    ...\n    >>> df3\n       c  a\n    0  3  1\n    1  6  4\n    2  9  7\n\n    Constructing DataFrame from dataclass:\n\n    >>> from dataclasses import make_dataclass\n    >>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n    >>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n       x  y\n    0  0  0\n    1  0  3\n    2  2  3\n    \"\"\"\n\n    _internal_names_set = {\"columns\", \"index\"} | NDFrame._internal_names_set\n    _typ = \"dataframe\"\n    _HANDLED_TYPES = (Series, Index, ExtensionArray, np.ndarray)\n    _accessors: set[str] = {\"sparse\"}\n    _hidden_attrs: frozenset[str] = NDFrame._hidden_attrs | frozenset([])\n    _mgr: BlockManager | ArrayManager\n\n    @property\n    def _constructor(self) -> Callable[..., DataFrame]:\n        return DataFrame\n\n    _constructor_sliced: Callable[..., Series] = Series\n\n    # ----------------------------------------------------------------------\n    # Constructors\n\n    def __init__(\n        self,\n        data=None,\n        index: Axes | None = None,\n        columns: Axes | None = None,\n        dtype: Dtype | None = None,\n        copy: bool | None = None,\n    ) -> None:\n\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._mgr\n\n        if isinstance(data, (BlockManager, ArrayManager)):\n            # first check if a Manager is passed without any other arguments\n            # -> use fastpath (without checking Manager type)\n            if index is None and columns is None and dtype is None and not copy:\n                # GH#33357 fastpath\n                NDFrame.__init__(self, data)\n                return\n\n        manager = get_option(\"mode.data_manager\")\n\n        # GH47215\n        if index is not None and isinstance(index, set):\n            raise ValueError(\"index cannot be a set\")\n        if columns is not None and isinstance(columns, set):\n            raise ValueError(\"columns cannot be a set\")\n\n        if copy is None:\n            if isinstance(data, dict):\n                # retain pre-GH#38939 default behavior\n                copy = True\n            elif (\n                manager == \"array\"\n                and isinstance(data, (np.ndarray, ExtensionArray))\n                and data.ndim == 2\n            ):\n                # INFO(ArrayManager) by default copy the 2D input array to get\n                # contiguous 1D arrays\n                copy = True\n            else:\n                copy = False\n\n        if isinstance(data, (BlockManager, ArrayManager)):\n            mgr = self._init_mgr(\n                data, axes={\"index\": index, \"columns\": columns}, dtype=dtype, copy=copy\n            )\n\n        elif isinstance(data, dict):\n            # GH#38939 de facto copy defaults to False only in non-dict cases\n            mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = rec_array_to_mgr(\n                    data,\n                    index,\n                    columns,\n                    dtype,\n                    copy,\n                    typ=manager,\n                )\n                warnings.warn(\n                    \"Support for MaskedRecords is deprecated and will be \"\n                    \"removed in a future version.  Pass \"\n                    \"{name: data[name] for name in data.dtype.names} instead.\",\n                    FutureWarning,\n                    stacklevel=find_stack_level(inspect.currentframe()),\n                )\n\n            # a masked array\n            else:\n                data = sanitize_masked_array(data)\n                mgr = ndarray_to_mgr(\n                    data,\n                    index,\n                    columns,\n                    dtype=dtype,\n                    copy=copy,\n                    typ=manager,\n                )\n\n        elif isinstance(data, (np.ndarray, Series, Index, ExtensionArray)):\n            if data.dtype.names:\n                # i.e. numpy structured array\n                data = cast(np.ndarray, data)\n                mgr = rec_array_to_mgr(\n                    data,\n                    index,\n                    columns,\n                    dtype,\n                    copy,\n                    typ=manager,\n                )\n            elif getattr(data, \"name\", None) is not None:\n                # i.e. Series/Index with non-None name\n                mgr = dict_to_mgr(\n                    # error: Item \"ndarray\" of \"Union[ndarray, Series, Index]\" has no\n                    # attribute \"name\"\n                    {data.name: data},  # type: ignore[union-attr]\n                    index,\n                    columns,\n                    dtype=dtype,\n                    typ=manager,\n                )\n            else:\n                mgr = ndarray_to_mgr(\n                    data,\n                    index,\n                    columns,\n                    dtype=dtype,\n                    copy=copy,\n                    typ=manager,\n                )\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif is_list_like(data):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                if hasattr(data, \"__array__\"):\n                    # GH#44616 big perf improvement for e.g. pytorch tensor\n                    data = np.asarray(data)\n                else:\n                    data = list(data)\n            if len(data) > 0:\n                if is_dataclass(data[0]):\n                    data = dataclasses_to_dicts(data)\n                if not isinstance(data, np.ndarray) and treat_as_nested(data):\n                    # exclude ndarray as we may have cast it a few lines above\n                    if columns is not None:\n                        columns = ensure_index(columns)\n                    arrays, columns, index = nested_data_to_arrays(\n                        # error: Argument 3 to \"nested_data_to_arrays\" has incompatible\n                        # type \"Optional[Collection[Any]]\"; expected \"Optional[Index]\"\n                        data,\n                        columns,\n                        index,  # type: ignore[arg-type]\n                        dtype,\n                    )\n                    mgr = arrays_to_mgr(\n                        arrays,\n                        columns,\n                        index,\n                        dtype=dtype,\n                        typ=manager,\n                    )\n                else:\n                    mgr = ndarray_to_mgr(\n                        data,\n                        index,\n                        columns,\n                        dtype=dtype,\n                        copy=copy,\n                        typ=manager,\n                    )\n            else:\n                mgr = dict_to_mgr(\n                    {},\n                    index,\n                    columns,\n                    dtype=dtype,\n                    typ=manager,\n                )\n        # For data is scalar\n        else:\n            if index is None or columns is None:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n            index = ensure_index(index)\n            columns = ensure_index(columns)\n\n            if not dtype:\n                dtype, _ = infer_dtype_from_scalar(data, pandas_dtype=True)\n\n            # For data is a scalar extension dtype\n            if isinstance(dtype, ExtensionDtype):\n                # TODO(EA2D): special case not needed with 2D EAs\n\n                values = [\n                    construct_1d_arraylike_from_scalar(data, len(index), dtype)\n                    for _ in range(len(columns))\n                ]\n                mgr = arrays_to_mgr(values, columns, index, dtype=None, typ=manager)\n            else:\n                arr2d = construct_2d_arraylike_from_scalar(\n                    data,\n                    len(index),\n                    len(columns),\n                    dtype,\n                    copy,\n                )\n\n                mgr = ndarray_to_mgr(\n                    arr2d,\n                    index,\n                    columns,\n                    dtype=arr2d.dtype,\n                    copy=False,\n                    typ=manager,\n                )\n\n        # ensure correct Manager type according to settings\n        mgr = mgr_to_mgr(mgr, typ=manager)\n\n        NDFrame.__init__(self, mgr)\n\n    # ----------------------------------------------------------------------\n    def __dataframe__(\n        self, nan_as_null: bool = False, allow_copy: bool = True\n    ) -> DataFrameXchg:\n        \"\"\"\n        Return the dataframe interchange object implementing the interchange protocol.\n\n        Parameters\n        ----------\n        nan_as_null : bool, default False\n            Whether to tell the DataFrame to overwrite null values in the data\n            with ``NaN`` (or ``NaT``).\n        allow_copy : bool, default True\n            Whether to allow memory copying when exporting. If set to False\n            it would cause non-zero-copy exports to fail.\n\n        Returns\n        -------\n        DataFrame interchange object\n            The object which consuming library can use to ingress the dataframe.\n\n        Notes\n        -----\n        Details on the interchange protocol:\n        https://data-apis.org/dataframe-protocol/latest/index.html\n\n        `nan_as_null` currently has no effect; once support for nullable extension\n        dtypes is added, this value should be propagated to columns.\n        \"\"\"\n\n        from pandas.core.interchange.dataframe import PandasDataFrameXchg\n\n        return PandasDataFrameXchg(self, nan_as_null, allow_copy)\n\n    # ----------------------------------------------------------------------\n\n    @property\n    def axes(self) -> list[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self) -> tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape : Tuple of array dimensions.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    @property\n    def _is_homogeneous_type(self) -> bool:\n        \"\"\"\n        Whether all the columns in a DataFrame have the same type.\n\n        Returns\n        -------\n        bool\n\n        See Also\n        --------\n        Index._is_homogeneous_type : Whether the object has a single\n            dtype.\n        MultiIndex._is_homogeneous_type : Whether all the levels of a\n            MultiIndex have the same dtype.\n\n        Examples\n        --------\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n        True\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n        False\n\n        Items with the same type but different sizes are considered\n        different types.\n\n        >>> DataFrame({\n        ...    \"A\": np.array([1, 2], dtype=np.int32),\n        ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n        False\n        \"\"\"\n        if isinstance(self._mgr, ArrayManager):\n            return len({arr.dtype for arr in self._mgr.arrays}) == 1\n        if self._mgr.any_extension_types:\n            return len({block.dtype for block in self._mgr.blocks}) == 1\n        else:\n            return not self._is_mixed_type\n\n    @property\n    def _can_fast_transpose(self) -> bool:\n        \"\"\"\n        Can we transpose this DataFrame without creating any new array objects.\n        \"\"\"\n        if isinstance(self._mgr, ArrayManager):\n            return False\n        blocks = self._mgr.blocks\n        if len(blocks) != 1:\n            return False\n\n        dtype = blocks[0].dtype\n        # TODO(EA2D) special case would be unnecessary with 2D EAs\n        return not is_1d_only_ea_dtype(dtype)\n\n    # error: Return type \"Union[ndarray, DatetimeArray, TimedeltaArray]\" of\n    # \"_values\" incompatible with return type \"ndarray\" in supertype \"NDFrame\"\n    @property\n    def _values(  # type: ignore[override]\n        self,\n    ) -> np.ndarray | DatetimeArray | TimedeltaArray | PeriodArray:\n        \"\"\"\n        Analogue to ._values that may return a 2D ExtensionArray.\n        \"\"\"\n        self._consolidate_inplace()\n\n        mgr = self._mgr\n\n        if isinstance(mgr, ArrayManager):\n            if len(mgr.arrays) == 1 and not is_1d_only_ea_dtype(mgr.arrays[0].dtype):\n                # error: Item \"ExtensionArray\" of \"Union[ndarray, ExtensionArray]\"\n                # has no attribute \"reshape\"\n                return mgr.arrays[0].reshape(-1, 1)  # type: ignore[union-attr]\n            return self.values\n\n        blocks = mgr.blocks\n        if len(blocks) != 1:\n            return self.values\n\n        arr = blocks[0].values\n        if arr.ndim == 1:\n            # non-2D ExtensionArray\n            return self.values\n\n        # more generally, whatever we allow in NDArrayBackedExtensionBlock\n        arr = cast(\"np.ndarray | DatetimeArray | TimedeltaArray | PeriodArray\", arr)\n        return arr.T\n\n    # ----------------------------------------------------------------------\n    # Rendering Methods\n\n    def _repr_fits_vertical_(self) -> bool:\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option(\"display.max_rows\")\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width: bool = False) -> bool:\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns.\n\n        In case of non-interactive session, no boundaries apply.\n\n        `ignore_width` is here so ipynb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option(\"display.max_columns\")\n        nb_columns = len(self.columns)\n\n        # exceed max columns\n        if (max_columns and nb_columns > max_columns) or (\n            (not ignore_width) and width and nb_columns > (width // 2)\n        ):\n            return False\n\n        # used by repr_html under IPython notebook or scripts ignore terminal\n        # dims\n        if ignore_width or width is None or not console.in_interactive_session():\n            return True\n\n        if get_option(\"display.width\") is not None or console.in_ipython_frontend():\n            # check at least the column row for excessive width\n            max_rows = 1\n        else:\n            max_rows = get_option(\"display.max_rows\")\n\n        # when auto-detecting, so width=None and not in ipython front end\n        # check whether repr fits horizontal by actually checking\n        # the width of the rendered repr\n        buf = StringIO()\n\n        # only care about the stuff we'll actually print out\n        # and to_string on entire frame may be expensive\n        d = self\n\n        if max_rows is not None:  # unlimited rows\n            # min of two, where one may be None\n            d = d.iloc[: min(max_rows, len(d))]\n        else:\n            return True\n\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(line) for line in value.split(\"\\n\"))\n\n        return repr_width < width\n\n    def _info_repr(self) -> bool:\n        \"\"\"\n        True if the repr should show the info view.\n        \"\"\"\n        info_repr_option = get_option(\"display.large_repr\") == \"info\"\n        return info_repr_option and not (\n            self._repr_fits_horizontal_() and self._repr_fits_vertical_()\n        )\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Return a string representation for a particular DataFrame.\n        \"\"\"\n        if self._info_repr():\n            buf = StringIO()\n            self.info(buf=buf)\n            return buf.getvalue()\n\n        repr_params = fmt.get_dataframe_repr_params()\n        return self.to_string(**repr_params)\n\n    def _repr_html_(self) -> str | None:\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n\n        Mainly for IPython notebook.\n        \"\"\"\n        if self._info_repr():\n            buf = StringIO()\n            self.info(buf=buf)\n            # need to escape the <class>, should be the first line.\n            val = buf.getvalue().replace(\"<\", r\"&lt;\", 1)\n            val = val.replace(\">\", r\"&gt;\", 1)\n            return \"<pre>\" + val + \"</pre>\"\n\n        if get_option(\"display.notebook_repr_html\"):\n            max_rows = get_option(\"display.max_rows\")\n            min_rows = get_option(\"display.min_rows\")\n            max_cols = get_option(\"display.max_columns\")\n            show_dimensions = get_option(\"display.show_dimensions\")\n\n            formatter = fmt.DataFrameFormatter(\n                self,\n                columns=None,\n                col_space=None,\n                na_rep=\"NaN\",\n                formatters=None,\n                float_format=None,\n                sparsify=None,\n                justify=None,\n                index_names=True,\n                header=True,\n                index=True,\n                bold_rows=True,\n                escape=True,\n                max_rows=max_rows,\n                min_rows=min_rows,\n                max_cols=max_cols,\n                show_dimensions=show_dimensions,\n                decimal=\".\",\n            )\n            return fmt.DataFrameRenderer(formatter).to_html(notebook=True)\n        else:\n            return None\n\n    @overload\n    def to_string(\n        self,\n        buf: None = ...,\n        columns: Sequence[str] | None = ...,\n        col_space: int | list[int] | dict[Hashable, int] | None = ...,\n        header: bool | Sequence[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: fmt.FormattersType | None = ...,\n        float_format: fmt.FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        justify: str | None = ...,\n        max_rows: int | None = ...,\n        max_cols: int | None = ...,\n        show_dimensions: bool = ...,\n        decimal: str = ...,\n        line_width: int | None = ...,\n        min_rows: int | None = ...,\n        max_colwidth: int | None = ...,\n        encoding: str | None = ...,\n    ) -> str:\n        ...\n\n    @overload\n    def to_string(\n        self,\n        buf: FilePath | WriteBuffer[str],\n        columns: Sequence[str] | None = ...,\n        col_space: int | list[int] | dict[Hashable, int] | None = ...,\n        header: bool | Sequence[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: fmt.FormattersType | None = ...,\n        float_format: fmt.FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        justify: str | None = ...,\n        max_rows: int | None = ...,\n        max_cols: int | None = ...,\n        show_dimensions: bool = ...,\n        decimal: str = ...,\n        line_width: int | None = ...,\n        min_rows: int | None = ...,\n        max_colwidth: int | None = ...,\n        encoding: str | None = ...,\n    ) -> None:\n        ...\n\n    @Substitution(\n        header_type=\"bool or sequence of str\",\n        header=\"Write out the column names. If a list of strings \"\n        \"is given, it is assumed to be aliases for the \"\n        \"column names\",\n        col_space_type=\"int, list or dict of int\",\n        col_space=\"The minimum width of each column. If a list of ints is given \"\n        \"every integers corresponds with one column. If a dict is given, the key \"\n        \"references the column, while the value defines the space to use.\",\n    )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\n    def to_string(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        columns: Sequence[str] | None = None,\n        col_space: int | list[int] | dict[Hashable, int] | None = None,\n        header: bool | Sequence[str] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: fmt.FormattersType | None = None,\n        float_format: fmt.FloatFormatType | None = None,\n        sparsify: bool | None = None,\n        index_names: bool = True,\n        justify: str | None = None,\n        max_rows: int | None = None,\n        max_cols: int | None = None,\n        show_dimensions: bool = False,\n        decimal: str = \".\",\n        line_width: int | None = None,\n        min_rows: int | None = None,\n        max_colwidth: int | None = None,\n        encoding: str | None = None,\n    ) -> str | None:\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n        min_rows : int, optional\n            The number of rows to display in the console in a truncated repr\n            (when number of rows is above `max_rows`).\n        max_colwidth : int, optional\n            Max width to truncate each column in characters. By default, no limit.\n\n            .. versionadded:: 1.0.0\n        encoding : str, default \"utf-8\"\n            Set character encoding.\n\n            .. versionadded:: 1.0\n        %(returns)s\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        from pandas import option_context\n\n        with option_context(\"display.max_colwidth\", max_colwidth):\n            formatter = fmt.DataFrameFormatter(\n                self,\n                columns=columns,\n                col_space=col_space,\n                na_rep=na_rep,\n                formatters=formatters,\n                float_format=float_format,\n                sparsify=sparsify,\n                justify=justify,\n                index_names=index_names,\n                header=header,\n                index=index,\n                min_rows=min_rows,\n                max_rows=max_rows,\n                max_cols=max_cols,\n                show_dimensions=show_dimensions,\n                decimal=decimal,\n            )\n            return fmt.DataFrameRenderer(formatter).to_string(\n                buf=buf,\n                encoding=encoding,\n                line_width=line_width,\n            )\n\n    # ----------------------------------------------------------------------\n\n    @property\n    def style(self) -> Styler:\n        \"\"\"\n        Returns a Styler object.\n\n        Contains methods for building a styled HTML representation of the DataFrame.\n\n        See Also\n        --------\n        io.formats.style.Styler : Helps style a DataFrame or Series according to the\n            data with HTML and CSS.\n        \"\"\"\n        from pandas.io.formats.style import Styler\n\n        return Styler(self)\n\n    _shared_docs[\n        \"items\"\n    ] = r\"\"\"\n        Iterate over (column name, Series) pairs.\n\n        Iterates over the DataFrame columns, returning a tuple with\n        the column name and the content as a Series.\n\n        Yields\n        ------\n        label : object\n            The column names for the DataFrame being iterated over.\n        content : Series\n            The column entries belonging to each label, as a Series.\n\n        See Also\n        --------\n        DataFrame.iterrows : Iterate over DataFrame rows as\n            (index, Series) pairs.\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n            of the values.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n        ...                   'population': [1864, 22000, 80000]},\n        ...                   index=['panda', 'polar', 'koala'])\n        >>> df\n                species   population\n        panda   bear      1864\n        polar   bear      22000\n        koala   marsupial 80000\n        >>> for label, content in df.items():\n        ...     print(f'label: {label}')\n        ...     print(f'content: {content}', sep='\\n')\n        ...\n        label: species\n        content:\n        panda         bear\n        polar         bear\n        koala    marsupial\n        Name: species, dtype: object\n        label: population\n        content:\n        panda     1864\n        polar    22000\n        koala    80000\n        Name: population, dtype: int64\n        \"\"\"\n\n    @Appender(_shared_docs[\"items\"])\n    def items(self) -> Iterable[tuple[Hashable, Series]]:\n        if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    _shared_docs[\n        \"iteritems\"\n    ] = r\"\"\"\n        Iterate over (column name, Series) pairs.\n\n        .. deprecated:: 1.5.0\n            iteritems is deprecated and will be removed in a future version.\n            Use .items instead.\n\n        Iterates over the DataFrame columns, returning a tuple with\n        the column name and the content as a Series.\n\n        Yields\n        ------\n        label : object\n            The column names for the DataFrame being iterated over.\n        content : Series\n            The column entries belonging to each label, as a Series.\n\n        See Also\n        --------\n        DataFrame.iter : Recommended alternative.\n        DataFrame.iterrows : Iterate over DataFrame rows as\n            (index, Series) pairs.\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n            of the values.\n        \"\"\"\n\n    @Appender(_shared_docs[\"iteritems\"])\n    def iteritems(self) -> Iterable[tuple[Hashable, Series]]:\n        warnings.warn(\n            \"iteritems is deprecated and will be removed in a future version. \"\n            \"Use .items instead.\",\n            FutureWarning,\n            stacklevel=find_stack_level(inspect.currentframe()),\n        )\n        yield from self.items()\n\n    def iterrows(self) -> Iterable[tuple[Hashable, Series]]:\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Yields\n        ------\n        index : label or tuple of label\n            The index of the row. A tuple for a `MultiIndex`.\n        data : Series\n            The data of the row as a Series.\n\n        See Also\n        --------\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        DataFrame.items : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k).__finalize__(self)\n            yield k, s\n\n    def itertuples(\n        self, index: bool = True, name: str | None = \"Pandas\"\n    ) -> Iterable[tuple[Any, ...]]:\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples.\n\n        Parameters\n        ----------\n        index : bool, default True\n            If True, return the index as the first element of the tuple.\n        name : str or None, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Returns\n        -------\n        iterator\n            An object to iterate over namedtuples for each row in the\n            DataFrame with the first field possibly being the index and\n            following fields being the column values.\n\n        See Also\n        --------\n        DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n            pairs.\n        DataFrame.items : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n        ...                   index=['dog', 'hawk'])\n        >>> df\n              num_legs  num_wings\n        dog          4          0\n        hawk         2          2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='dog', num_legs=4, num_wings=0)\n        Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n        By setting the `index` parameter to False we can remove the index\n        as the first element of the tuple:\n\n        >>> for row in df.itertuples(index=False):\n        ...     print(row)\n        ...\n        Pandas(num_legs=4, num_wings=0)\n        Pandas(num_legs=2, num_wings=2)\n\n        With the `name` parameter set we set a custom name for the yielded\n        namedtuples:\n\n        >>> for row in df.itertuples(name='Animal'):\n        ...     print(row)\n        ...\n        Animal(Index='dog', num_legs=4, num_wings=0)\n        Animal(Index='hawk', num_legs=2, num_wings=2)\n        \"\"\"\n        arrays = []\n        fields = list(self.columns)\n        if index:\n            arrays.append(self.index)\n            fields.insert(0, \"Index\")\n\n        # use integer indexing because of possible duplicate column names\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n        if name is not None:\n            # https://github.com/python/mypy/issues/9046\n            # error: namedtuple() expects a string literal as the first argument\n            itertuple = collections.namedtuple(  # type: ignore[misc]\n                name, fields, rename=True\n            )\n            return map(itertuple._make, zip(*arrays))\n\n        # fallback to regular tuples\n        return zip(*arrays)\n\n    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)\n\n    @overload\n    def dot(self, other: Series) -> Series:\n        ...\n\n    @overload\n    def dot(self, other: DataFrame | Index | ArrayLike) -> DataFrame:\n        ...\n\n    def dot(self, other: AnyArrayLike | DataFrame) -> DataFrame | Series:\n        \"\"\"\n        Compute the matrix multiplication between the DataFrame and other.\n\n        This method computes the matrix product between the DataFrame and the\n        values of an other Series, DataFrame or a numpy array.\n\n        It can also be called using ``self @ other`` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : Series, DataFrame or array-like\n            The other object to compute the matrix product with.\n\n        Returns\n        -------\n        Series or DataFrame\n            If other is a Series, return the matrix product between self and\n            other as a Series. If other is a DataFrame or a numpy.array, return\n            the matrix product of self and other in a DataFrame of a np.array.\n\n        See Also\n        --------\n        Series.dot: Similar method for Series.\n\n        Notes\n        -----\n        The dimensions of DataFrame and other must be compatible in order to\n        compute the matrix multiplication. In addition, the column names of\n        DataFrame and the index of other must contain the same values, as they\n        will be aligned prior to the multiplication.\n\n        The dot method for Series computes the inner product, instead of the\n        matrix product here.\n\n        Examples\n        --------\n        Here we multiply a DataFrame with a Series.\n\n        >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n        >>> s = pd.Series([1, 1, 2, 1])\n        >>> df.dot(s)\n        0    -4\n        1     5\n        dtype: int64\n\n        Here we multiply a DataFrame with another DataFrame.\n\n        >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n        >>> df.dot(other)\n            0   1\n        0   1   4\n        1   2   2\n\n        Note that the dot method give the same result as @\n\n        >>> df @ other\n            0   1\n        0   1   4\n        1   2   2\n\n        The dot method works also if other is an np.array.\n\n        >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n        >>> df.dot(arr)\n            0   1\n        0   1   4\n        1   2   2\n\n        Note how shuffling of the objects does not change the result.\n\n        >>> s2 = s.reindex([1, 0, 2, 3])\n        >>> df.dot(s2)\n        0    -4\n        1     5\n        dtype: int64\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index):\n                raise ValueError(\"matrices are not aligned\")\n\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right._values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError(\n                    f\"Dot product shape mismatch, {lvals.shape} vs {rvals.shape}\"\n                )\n\n        if isinstance(other, DataFrame):\n            return self._constructor(\n                np.dot(lvals, rvals), index=left.index, columns=other.columns\n            )\n        elif isinstance(other, Series):\n            return self._constructor_sliced(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return self._constructor_sliced(result, index=left.index)\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")\n\n    @overload\n    def __matmul__(self, other: Series) -> Series:\n        ...\n\n    @overload\n    def __matmul__(self, other: AnyArrayLike | DataFrame) -> DataFrame | Series:\n        ...\n\n    def __matmul__(self, other: AnyArrayLike | DataFrame) -> DataFrame | Series:\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other) -> DataFrame:\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        try:\n            return self.T.dot(np.transpose(other)).T\n        except ValueError as err:\n            if \"shape mismatch\" not in str(err):\n                raise\n            # GH#21581 give exception message for original shapes\n            msg = f\"shapes {np.shape(other)} and {self.shape} not aligned\"\n            raise ValueError(msg) from err\n\n    # ----------------------------------------------------------------------\n    # IO methods (to / from other formats)\n\n    @classmethod\n    def from_dict(\n        cls,\n        data: dict,\n        orient: str = \"columns\",\n        dtype: Dtype | None = None,\n        columns: Axes | None = None,\n    ) -> DataFrame:\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index', 'tight'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n            If 'tight', assume a dict with keys ['index', 'columns', 'data',\n            'index_names', 'column_names'].\n\n            .. versionadded:: 1.4.0\n               'tight' as an allowed value for the ``orient`` argument\n\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'`` or ``orient='tight'``.\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from structured ndarray, sequence\n            of tuples or dicts, or DataFrame.\n        DataFrame : DataFrame object creation using constructor.\n        DataFrame.to_dict : Convert the DataFrame to a dictionary.\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        Specify ``orient='tight'`` to create the DataFrame using a 'tight'\n        format:\n\n        >>> data = {'index': [('a', 'b'), ('a', 'c')],\n        ...         'columns': [('x', 1), ('y', 2)],\n        ...         'data': [[1, 3], [2, 4]],\n        ...         'index_names': ['n1', 'n2'],\n        ...         'column_names': ['z1', 'z2']}\n        >>> pd.DataFrame.from_dict(data, orient='tight')\n        z1     x  y\n        z2     1  2\n        n1 n2\n        a  b   1  3\n           c   2  4\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == \"index\":\n            if len(data) > 0:\n                # TODO speed up Series case\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    index = list(data.keys())\n                    # error: Incompatible types in assignment (expression has type\n                    # \"List[Any]\", variable has type \"Dict[Any, Any]\")\n                    data = list(data.values())  # type: ignore[assignment]\n        elif orient == \"columns\" or orient == \"tight\":\n            if columns is not None:\n                raise ValueError(f\"cannot use columns parameter with orient='{orient}'\")\n        else:  # pragma: no cover\n            raise ValueError(\n                f\"Expected 'index', 'columns' or 'tight' for orient parameter. \"\n                f\"Got '{orient}' instead\"\n            )\n\n        if orient != \"tight\":\n            return cls(data, index=index, columns=columns, dtype=dtype)\n        else:\n            realdata = data[\"data\"]\n\n            def create_index(indexlist, namelist):\n                index: Index\n                if len(namelist) > 1:\n                    index = MultiIndex.from_tuples(indexlist, names=namelist)\n                else:\n                    index = Index(indexlist, name=namelist[0])\n                return index\n\n            index = create_index(data[\"index\"], data[\"index_names\"])\n            columns = create_index(data[\"columns\"], data[\"column_names\"])\n            return cls(realdata, index=index, columns=columns, dtype=dtype)\n\n    def to_numpy(\n        self,\n        dtype: npt.DTypeLike | None = None,\n        copy: bool = False,\n        na_value: object = lib.no_default,\n    ) -> np.ndarray:\n        \"\"\"\n        Convert the DataFrame to a NumPy array.\n\n        By default, the dtype of the returned array will be the common NumPy\n        dtype of all types in the DataFrame. For example, if the dtypes are\n        ``float16`` and ``float32``, the results dtype will be ``float32``.\n        This may require copying data and coercing values, which may be\n        expensive.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`.\n        copy : bool, default False\n            Whether to ensure that the returned value is not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n        na_value : Any, optional\n            The value to use for missing values. The default value depends\n            on `dtype` and the dtypes of the DataFrame columns.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.to_numpy : Similar method for Series.\n\n        Examples\n        --------\n        >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n        array([[1, 3],\n               [2, 4]])\n\n        With heterogeneous data, the lowest common type will have to\n        be used.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n        >>> df.to_numpy()\n        array([[1. , 3. ],\n               [2. , 4.5]])\n\n        For a mix of numeric and non-numeric types, the output array will\n        have object dtype.\n\n        >>> df['C'] = pd.date_range('2000', periods=2)\n        >>> df.to_numpy()\n        array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n               [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        if dtype is not None:\n            dtype = np.dtype(dtype)\n        result = self._mgr.as_array(dtype=dtype, copy=copy, na_value=na_value)\n        if result.dtype is not dtype:\n            result = np.array(result, dtype=dtype, copy=False)\n\n        return result\n\n    @overload\n    def to_dict(\n        self,\n        orient: Literal[\"dict\", \"list\", \"series\", \"split\", \"tight\", \"index\"] = ...,\n        into: type[dict] = ...,\n    ) -> dict:\n        ...\n\n    @overload\n    def to_dict(self, orient: Literal[\"records\"], into: type[dict] = ...) -> list[dict]:\n        ...\n\n    def to_dict(\n        self,\n        orient: Literal[\n            \"dict\", \"list\", \"series\", \"split\", \"tight\", \"records\", \"index\"\n        ] = \"dict\",\n        into: type[dict] = dict,\n    ) -> dict | list[dict]:\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'tight' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values],\n              'index_names' -> [index.names], 'column_names' -> [column.names]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n            .. versionadded:: 1.4.0\n                'tight' as an allowed value for the ``orient`` argument\n\n        into : class, default dict\n            The collections.abc.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n        Returns\n        -------\n        dict, list or collections.abc.Mapping\n            Return a collections.abc.Mapping object representing the DataFrame.\n            The resulting transformation depends on the `orient` parameter.\n\n        See Also\n        --------\n        DataFrame.from_dict: Create a DataFrame from a dictionary.\n        DataFrame.to_json: Convert a DataFrame to JSON format.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['row1', 'row2'])\n        >>> df\n              col1  col2\n        row1     1  0.50\n        row2     2  0.75\n        >>> df.to_dict()\n        {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': row1    1\n                 row2    2\n        Name: col1, dtype: int64,\n        'col2': row1    0.50\n                row2    0.75\n        Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n         'data': [[1, 0.5], [2, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n        >>> df.to_dict('tight')\n        {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n         'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                     ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                \"DataFrame columns are not unique, some columns will be omitted.\",\n                UserWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n        # GH16122\n        into_c = com.standardize_mapping(into)\n\n        #  error: Incompatible types in assignment (expression has type \"str\",\n        # variable has type \"Literal['dict', 'list', 'series', 'split', 'tight',\n        # 'records', 'index']\")\n        orient = orient.lower()  # type: ignore[assignment]\n        # GH32515\n        if orient.startswith((\"d\", \"l\", \"s\", \"r\", \"i\")) and orient not in {\n            \"dict\",\n            \"list\",\n            \"series\",\n            \"split\",\n            \"records\",\n            \"index\",\n        }:\n            warnings.warn(\n                \"Using short name for 'orient' is deprecated. Only the \"\n                \"options: ('dict', list, 'series', 'split', 'records', 'index') \"\n                \"will be used in a future version. Use one of the above \"\n                \"to silence this warning.\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n\n            if orient.startswith(\"d\"):\n                orient = \"dict\"\n            elif orient.startswith(\"l\"):\n                orient = \"list\"\n            elif orient.startswith(\"sp\"):\n                orient = \"split\"\n            elif orient.startswith(\"s\"):\n                orient = \"series\"\n            elif orient.startswith(\"r\"):\n                orient = \"records\"\n            elif orient.startswith(\"i\"):\n                orient = \"index\"\n\n        if orient == \"dict\":\n            return into_c((k, v.to_dict(into)) for k, v in self.items())\n\n        elif orient == \"list\":\n            return into_c(\n                (k, list(map(maybe_box_native, v.tolist()))) for k, v in self.items()\n            )\n\n        elif orient == \"split\":\n            return into_c(\n                (\n                    (\"index\", self.index.tolist()),\n                    (\"columns\", self.columns.tolist()),\n                    (\n                        \"data\",\n                        [\n                            list(map(maybe_box_native, t))\n                            for t in self.itertuples(index=False, name=None)\n                        ],\n                    ),\n                )\n            )\n\n        elif orient == \"tight\":\n            return into_c(\n                (\n                    (\"index\", self.index.tolist()),\n                    (\"columns\", self.columns.tolist()),\n                    (\n                        \"data\",\n                        [\n                            list(map(maybe_box_native, t))\n                            for t in self.itertuples(index=False, name=None)\n                        ],\n                    ),\n                    (\"index_names\", list(self.index.names)),\n                    (\"column_names\", list(self.columns.names)),\n                )\n            )\n\n        elif orient == \"series\":\n            return into_c((k, v) for k, v in self.items())\n\n        elif orient == \"records\":\n            columns = self.columns.tolist()\n            rows = (\n                dict(zip(columns, row))\n                for row in self.itertuples(index=False, name=None)\n            )\n            return [\n                into_c((k, maybe_box_native(v)) for k, v in row.items()) for row in rows\n            ]\n\n        elif orient == \"index\":\n            if not self.index.is_unique:\n                raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n            return into_c(\n                (t[0], dict(zip(self.columns, map(maybe_box_native, t[1:]))))\n                for t in self.itertuples(name=None)\n            )\n\n        else:\n            raise ValueError(f\"orient '{orient}' not understood\")\n\n    def to_gbq(\n        self,\n        destination_table: str,\n        project_id: str | None = None,\n        chunksize: int | None = None,\n        reauth: bool = False,\n        if_exists: str = \"fail\",\n        auth_local_webserver: bool = True,\n        table_schema: list[dict[str, str]] | None = None,\n        location: str | None = None,\n        progress_bar: bool = True,\n        credentials=None,\n    ) -> None:\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists raise pandas_gbq.gbq.TableCreationError.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        auth_local_webserver : bool, default True\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n\n            .. versionchanged:: 1.5.0\n               Default value is changed to ``True``. Google has deprecated the\n               ``auth_local_webserver = False`` `\"out of band\" (copy-paste)\n               flow\n               <https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        location : str, optional\n            Location where the load job should run. See the `BigQuery locations\n            documentation\n            <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        credentials : google.auth.credentials.Credentials, optional\n            Credentials for accessing Google APIs. Use this parameter to\n            override default credentials, such as to use Compute Engine\n            :class:`google.auth.compute_engine.Credentials` or Service\n            Account :class:`google.oauth2.service_account.Credentials`\n            directly.\n\n            *New in version 0.8.0 of pandas-gbq*.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n\n        gbq.to_gbq(\n            self,\n            destination_table,\n            project_id=project_id,\n            chunksize=chunksize,\n            reauth=reauth,\n            if_exists=if_exists,\n            auth_local_webserver=auth_local_webserver,\n            table_schema=table_schema,\n            location=location,\n            progress_bar=progress_bar,\n            credentials=credentials,\n        )\n\n    @classmethod\n    def from_records(\n        cls,\n        data,\n        index=None,\n        exclude=None,\n        columns=None,\n        coerce_float: bool = False,\n        nrows: int | None = None,\n    ) -> DataFrame:\n        \"\"\"\n        Convert structured or record ndarray to DataFrame.\n\n        Creates a DataFrame object from a structured ndarray, sequence of\n        tuples or dicts, or DataFrame.\n\n        Parameters\n        ----------\n        data : structured ndarray, sequence of tuples or dicts, or DataFrame\n            Structured input data.\n        index : str, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use.\n        exclude : sequence, default None\n            Columns or fields to exclude.\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns).\n        coerce_float : bool, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets.\n        nrows : int, default None\n            Number of rows to read if data is an iterator.\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.from_dict : DataFrame from dict of array-like or dicts.\n        DataFrame : DataFrame object creation using constructor.\n\n        Examples\n        --------\n        Data can be provided as a structured ndarray:\n\n        >>> data = np.array([(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')],\n        ...                 dtype=[('col_1', 'i4'), ('col_2', 'U1')])\n        >>> pd.DataFrame.from_records(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Data can be provided as a list of dicts:\n\n        >>> data = [{'col_1': 3, 'col_2': 'a'},\n        ...         {'col_1': 2, 'col_2': 'b'},\n        ...         {'col_1': 1, 'col_2': 'c'},\n        ...         {'col_1': 0, 'col_2': 'd'}]\n        >>> pd.DataFrame.from_records(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Data can be provided as a list of tuples with corresponding columns:\n\n        >>> data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]\n        >>> pd.DataFrame.from_records(data, columns=['col_1', 'col_2'])\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n        \"\"\"\n        result_index = None\n\n        # Make a copy of the input columns so we can modify it\n        if columns is not None:\n            columns = ensure_index(columns)\n\n        def maybe_reorder(\n            arrays: list[ArrayLike], arr_columns: Index, columns: Index, index\n        ) -> tuple[list[ArrayLike], Index, Index | None]:\n            \"\"\"\n            If our desired 'columns' do not match the data's pre-existing 'arr_columns',\n            we re-order our arrays.  This is like a pre-emptive (cheap) reindex.\n            \"\"\"\n            if len(arrays):\n                length = len(arrays[0])\n            else:\n                length = 0\n\n            result_index = None\n            if len(arrays) == 0 and index is None and length == 0:\n                # for backward compat use an object Index instead of RangeIndex\n                result_index = Index([])\n\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns, length)\n            return arrays, arr_columns, result_index\n\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n\n            dtype = None\n            if hasattr(first_row, \"dtype\") and first_row.dtype.names:\n                dtype = first_row.dtype\n\n            values = [first_row]\n\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns_list = []\n                for k, v in data.items():\n                    if k in columns:\n                        arr_columns_list.append(k)\n                        arrays.append(v)\n\n                arr_columns = Index(arr_columns_list)\n                arrays, arr_columns, result_index = maybe_reorder(\n                    arrays, arr_columns, columns, index\n                )\n\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = to_arrays(data, columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = to_arrays(data, columns)\n            if coerce_float:\n                for i, arr in enumerate(arrays):\n                    if arr.dtype == object:\n                        # error: Argument 1 to \"maybe_convert_objects\" has\n                        # incompatible type \"Union[ExtensionArray, ndarray]\";\n                        # expected \"ndarray\"\n                        arrays[i] = lib.maybe_convert_objects(\n                            arr,  # type: ignore[arg-type]\n                            try_float=True,\n                        )\n\n            arr_columns = ensure_index(arr_columns)\n            if columns is None:\n                columns = arr_columns\n            else:\n                arrays, arr_columns, result_index = maybe_reorder(\n                    arrays, arr_columns, columns, index\n                )\n\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n\n        if index is not None:\n            if isinstance(index, str) or not hasattr(index, \"__iter__\"):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n                except (KeyError, TypeError):\n                    # raised by get_loc, see GH#29258\n                    result_index = index\n                else:\n                    result_index = ensure_index_from_sequences(index_data, names=index)\n                    exclude.update(index)\n\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n            columns = columns.drop(exclude)\n\n        manager = get_option(\"mode.data_manager\")\n        mgr = arrays_to_mgr(arrays, columns, result_index, typ=manager)\n\n        return cls(mgr)\n\n    def to_records(\n        self, index: bool = True, column_dtypes=None, index_dtypes=None\n    ) -> np.recarray:\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be included as the first field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Include index in resulting record array, stored in 'index'\n            field or using the index label, if set.\n        column_dtypes : str, type, dict, default None\n            If a string or type, the data type to store all columns. If\n            a dictionary, a mapping of column names and indices (zero-indexed)\n            to specific data types.\n        index_dtypes : str, type, dict, default None\n            If a string or type, the data type to store all index levels. If\n            a dictionary, a mapping of index level names and indices\n            (zero-indexed) to specific data types.\n\n            This mapping is applied only if `index=True`.\n\n        Returns\n        -------\n        numpy.recarray\n            NumPy ndarray with the DataFrame labels as fields and each row\n            of the DataFrame as entries.\n\n        See Also\n        --------\n        DataFrame.from_records: Convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: An ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        If the DataFrame index has no label then the recarray field name\n        is set to 'index'. If the index has a label then this is used as the\n        field name:\n\n        >>> df.index = df.index.rename(\"I\")\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        Data types can be specified for the columns:\n\n        >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n        As well as for the index:\n\n        >>> df.to_records(index_dtypes=\"<S2\")\n        rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n                  dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n        >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n        >>> df.to_records(index_dtypes=index_dtypes)\n        rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n                  dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if index:\n            ix_vals = [\n                np.asarray(self.index.get_level_values(i))\n                for i in range(self.index.nlevels)\n            ]\n\n            arrays = ix_vals + [\n                np.asarray(self.iloc[:, i]) for i in range(len(self.columns))\n            ]\n\n            index_names = list(self.index.names)\n\n            if isinstance(self.index, MultiIndex):\n                index_names = com.fill_missing_names(index_names)\n            elif index_names[0] is None:\n                index_names = [\"index\"]\n\n            names = [str(name) for name in itertools.chain(index_names, self.columns)]\n        else:\n            arrays = [np.asarray(self.iloc[:, i]) for i in range(len(self.columns))]\n            names = [str(c) for c in self.columns]\n            index_names = []\n\n        index_len = len(index_names)\n        formats = []\n\n        for i, v in enumerate(arrays):\n            index_int = i\n\n            # When the names and arrays are collected, we\n            # first collect those in the DataFrame's index,\n            # followed by those in its columns.\n            #\n            # Thus, the total length of the array is:\n            # len(index_names) + len(DataFrame.columns).\n            #\n            # This check allows us to see whether we are\n            # handling a name / array in the index or column.\n            if index_int < index_len:\n                dtype_mapping = index_dtypes\n                name = index_names[index_int]\n            else:\n                index_int -= index_len\n                dtype_mapping = column_dtypes\n                name = self.columns[index_int]\n\n            # We have a dictionary, so we get the data type\n            # associated with the index or column (which can\n            # be denoted by its name in the DataFrame or its\n            # position in DataFrame's array of indices or\n            # columns, whichever is applicable.\n            if is_dict_like(dtype_mapping):\n                if name in dtype_mapping:\n                    dtype_mapping = dtype_mapping[name]\n                elif index_int in dtype_mapping:\n                    dtype_mapping = dtype_mapping[index_int]\n                else:\n                    dtype_mapping = None\n\n            # If no mapping can be found, use the array's\n            # dtype attribute for formatting.\n            #\n            # A valid dtype must either be a type or\n            # string naming a type.\n            if dtype_mapping is None:\n                formats.append(v.dtype)\n            elif isinstance(dtype_mapping, (type, np.dtype, str)):\n                # error: Argument 1 to \"append\" of \"list\" has incompatible\n                # type \"Union[type, dtype[Any], str]\"; expected \"dtype[Any]\"\n                formats.append(dtype_mapping)  # type: ignore[arg-type]\n            else:\n                element = \"row\" if i < index_len else \"column\"\n                msg = f\"Invalid dtype {dtype_mapping} specified for {element} {name}\"\n                raise ValueError(msg)\n\n        return np.rec.fromarrays(arrays, dtype={\"names\": names, \"formats\": formats})\n\n    @classmethod\n    def _from_arrays(\n        cls,\n        arrays,\n        columns,\n        index,\n        dtype: Dtype | None = None,\n        verify_integrity: bool = True,\n    ) -> DataFrame:\n        \"\"\"\n        Create DataFrame from a list of arrays corresponding to the columns.\n\n        Parameters\n        ----------\n        arrays : list-like of arrays\n            Each array in the list corresponds to one column, in order.\n        columns : list-like, Index\n            The column names for the resulting DataFrame.\n        index : list-like, Index\n            The rows labels for the resulting DataFrame.\n        dtype : dtype, optional\n            Optional dtype to enforce for all arrays.\n        verify_integrity : bool, default True\n            Validate and homogenize all input. If set to False, it is assumed\n            that all elements of `arrays` are actual arrays how they will be\n            stored in a block (numpy ndarray or ExtensionArray), have the same\n            length as and are aligned with the index, and that `columns` and\n            `index` are ensured to be an Index object.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        manager = get_option(\"mode.data_manager\")\n        columns = ensure_index(columns)\n        if len(columns) != len(arrays):\n            raise ValueError(\"len(columns) must match len(arrays)\")\n        mgr = arrays_to_mgr(\n            arrays,\n            columns,\n            index,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n            typ=manager,\n        )\n        return cls(mgr)\n\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path\",\n    )\n    @deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"path\"])\n    def to_stata(\n        self,\n        path: FilePath | WriteBuffer[bytes],\n        convert_dates: dict[Hashable, str] | None = None,\n        write_index: bool = True,\n        byteorder: str | None = None,\n        time_stamp: datetime.datetime | None = None,\n        data_label: str | None = None,\n        variable_labels: dict[Hashable, str] | None = None,\n        version: int | None = 114,\n        convert_strl: Sequence[Hashable] | None = None,\n        compression: CompressionOptions = \"infer\",\n        storage_options: StorageOptions = None,\n        *,\n        value_labels: dict[Hashable, dict[float, str]] | None = None,\n    ) -> None:\n        \"\"\"\n        Export DataFrame object to Stata dta format.\n\n        Writes the DataFrame to a Stata dataset file.\n        \"dta\" files contain a Stata dataset.\n\n        Parameters\n        ----------\n        path : str, path object, or buffer\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function.\n\n            .. versionchanged:: 1.0.0\n\n            Previously this was \"fname\"\n\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str, optional\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n        version : {{114, 117, 118, 119, None}}, default 114\n            Version to use in the output dta file. Set to None to let pandas\n            decide between 118 or 119 formats depending on the number of\n            columns in the frame. Version 114 can be read by Stata 10 and\n            later. Version 117 can be read by Stata 13 or later. Version 118\n            is supported in Stata 14 and later. Version 119 is supported in\n            Stata 15 and later. Version 114 limits string variables to 244\n            characters or fewer while versions 117 and later allow strings\n            with lengths up to 2,000,000 characters. Versions 118 and 119\n            support Unicode characters, and version 119 supports more than\n            32,767 variables.\n\n            Version 119 should usually only be used when the number of\n            variables exceeds the capacity of dta format 118. Exporting\n            smaller datasets in format 119 may have unintended consequences,\n            and, as of November 2020, Stata SE cannot read version 119 files.\n\n            .. versionchanged:: 1.0.0\n\n                Added support for formats 118 and 119.\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n        {compression_options}\n\n            .. versionadded:: 1.1.0\n\n            .. versionchanged:: 1.4.0 Zstandard support.\n\n        {storage_options}\n\n            .. versionadded:: 1.2.0\n\n        value_labels : dict of dicts\n            Dictionary containing columns as keys and dictionaries of column value\n            to labels as values. Labels for a single variable must be 32,000\n            characters or smaller.\n\n            .. versionadded:: 1.4.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n        See Also\n        --------\n        read_stata : Import Stata data files.\n        io.stata.StataWriter : Low-level writer for Stata data files.\n        io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({{'animal': ['falcon', 'parrot', 'falcon',\n        ...                               'parrot'],\n        ...                    'speed': [350, 18, 361, 15]}})\n        >>> df.to_stata('animals.dta')  # doctest: +SKIP\n        \"\"\"\n        if version not in (114, 117, 118, 119, None):\n            raise ValueError(\"Only formats 114, 117, 118 and 119 are supported.\")\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\"strl is not supported in format 114\")\n            from pandas.io.stata import StataWriter as statawriter\n        elif version == 117:\n            # mypy: Name 'statawriter' already defined (possibly by an import)\n            from pandas.io.stata import (  # type: ignore[no-redef]\n                StataWriter117 as statawriter,\n            )\n        else:  # versions 118 and 119\n            # mypy: Name 'statawriter' already defined (possibly by an import)\n            from pandas.io.stata import (  # type: ignore[no-redef]\n                StataWriterUTF8 as statawriter,\n            )\n\n        kwargs: dict[str, Any] = {}\n        if version is None or version >= 117:\n            # strl conversion is only supported >= 117\n            kwargs[\"convert_strl\"] = convert_strl\n        if version is None or version >= 118:\n            # Specifying the version is only supported for UTF8 (118 or 119)\n            kwargs[\"version\"] = version\n\n        writer = statawriter(\n            path,\n            self,\n            convert_dates=convert_dates,\n            byteorder=byteorder,\n            time_stamp=time_stamp,\n            data_label=data_label,\n            write_index=write_index,\n            variable_labels=variable_labels,\n            compression=compression,\n            storage_options=storage_options,\n            value_labels=value_labels,\n            **kwargs,\n        )\n        writer.write_file()\n\n    @deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\n    def to_feather(self, path: FilePath | WriteBuffer[bytes], **kwargs) -> None:\n        \"\"\"\n        Write a DataFrame to the binary Feather format.\n\n        Parameters\n        ----------\n        path : str, path object, file-like object\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function. If a string or a path,\n            it will be used as Root Directory path when writing a partitioned dataset.\n        **kwargs :\n            Additional keywords passed to :func:`pyarrow.feather.write_feather`.\n            Starting with pyarrow 0.17, this includes the `compression`,\n            `compression_level`, `chunksize` and `version` keywords.\n\n            .. versionadded:: 1.1.0\n\n        Notes\n        -----\n        This function writes the dataframe as a `feather file\n        <https://arrow.apache.org/docs/python/feather.html>`_. Requires a default\n        index. For saving the DataFrame with your custom index use a method that\n        supports custom indices e.g. `to_parquet`.\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n\n        to_feather(self, path, **kwargs)\n\n    @doc(\n        Series.to_markdown,\n        klass=_shared_doc_kwargs[\"klass\"],\n        storage_options=_shared_docs[\"storage_options\"],\n        examples=\"\"\"Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\n        ... )\n        >>> print(df.to_markdown())\n        |    | animal_1   | animal_2   |\n        |---:|:-----------|:-----------|\n        |  0 | elk        | dog        |\n        |  1 | pig        | quetzal    |\n\n        Output markdown with a tabulate option.\n\n        >>> print(df.to_markdown(tablefmt=\"grid\"))\n        +----+------------+------------+\n        |    | animal_1   | animal_2   |\n        +====+============+============+\n        |  0 | elk        | dog        |\n        +----+------------+------------+\n        |  1 | pig        | quetzal    |\n        +----+------------+------------+\"\"\",\n    )\n    def to_markdown(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        mode: str = \"wt\",\n        index: bool = True,\n        storage_options: StorageOptions = None,\n        **kwargs,\n    ) -> str | None:\n        if \"showindex\" in kwargs:\n            warnings.warn(\n                \"'showindex' is deprecated. Only 'index' will be used \"\n                \"in a future version. Use 'index' to silence this warning.\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n\n        kwargs.setdefault(\"headers\", \"keys\")\n        kwargs.setdefault(\"tablefmt\", \"pipe\")\n        kwargs.setdefault(\"showindex\", index)\n        tabulate = import_optional_dependency(\"tabulate\")\n        result = tabulate.tabulate(self, **kwargs)\n        if buf is None:\n            return result\n\n        with get_handle(buf, mode, storage_options=storage_options) as handles:\n            handles.handle.write(result)\n        return None\n\n    @overload\n    def to_parquet(\n        self,\n        path: None = ...,\n        engine: str = ...,\n        compression: str | None = ...,\n        index: bool | None = ...,\n        partition_cols: list[str] | None = ...,\n        storage_options: StorageOptions = ...,\n        **kwargs,\n    ) -> bytes:\n        ...\n\n    @overload\n    def to_parquet(\n        self,\n        path: FilePath | WriteBuffer[bytes],\n        engine: str = ...,\n        compression: str | None = ...,\n        index: bool | None = ...,\n        partition_cols: list[str] | None = ...,\n        storage_options: StorageOptions = ...,\n        **kwargs,\n    ) -> None:\n        ...\n\n    @doc(storage_options=_shared_docs[\"storage_options\"])\n    @deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\n    def to_parquet(\n        self,\n        path: FilePath | WriteBuffer[bytes] | None = None,\n        engine: str = \"auto\",\n        compression: str | None = \"snappy\",\n        index: bool | None = None,\n        partition_cols: list[str] | None = None,\n        storage_options: StorageOptions = None,\n        **kwargs,\n    ) -> bytes | None:\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        path : str, path object, file-like object, or None, default None\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function. If None, the result is\n            returned as bytes. If a string or path, it will be used as Root Directory\n            path when writing a partitioned dataset.\n\n            .. versionchanged:: 1.2.0\n\n            Previously this was \"fname\"\n\n        engine : {{'auto', 'pyarrow', 'fastparquet'}}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {{'snappy', 'gzip', 'brotli', None}}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        index : bool, default None\n            If ``True``, include the dataframe's index(es) in the file output.\n            If ``False``, they will not be written to the file.\n            If ``None``, similar to ``True`` the dataframe's index(es)\n            will be saved. However, instead of being saved as values,\n            the RangeIndex will be stored as a range in the metadata so it\n            doesn't require much space and is faster. Other indexes will\n            be included as columns in the file output.\n        partition_cols : list, optional, default None\n            Column names by which to partition the dataset.\n            Columns are partitioned in the order they are given.\n            Must be None if path is not a string.\n        {storage_options}\n\n            .. versionadded:: 1.2.0\n\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        Returns\n        -------\n        bytes if no path argument is provided else None\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_orc : Write an orc file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={{'col1': [1, 2], 'col2': [3, 4]}})\n        >>> df.to_parquet('df.parquet.gzip',\n        ...               compression='gzip')  # doctest: +SKIP\n        >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n           col1  col2\n        0     1     3\n        1     2     4\n\n        If you want to get a buffer to the parquet content you can use a io.BytesIO\n        object, as long as you don't use partition_cols, which creates multiple files.\n\n        >>> import io\n        >>> f = io.BytesIO()\n        >>> df.to_parquet(f)\n        >>> f.seek(0)\n        0\n        >>> content = f.read()\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n\n        return to_parquet(\n            self,\n            path,\n            engine,\n            compression=compression,\n            index=index,\n            partition_cols=partition_cols,\n            storage_options=storage_options,\n            **kwargs,\n        )\n\n    def to_orc(\n        self,\n        path: FilePath | WriteBuffer[bytes] | None = None,\n        *,\n        engine: Literal[\"pyarrow\"] = \"pyarrow\",\n        index: bool | None = None,\n        engine_kwargs: dict[str, Any] | None = None,\n    ) -> bytes | None:\n        \"\"\"\n        Write a DataFrame to the ORC format.\n\n        .. versionadded:: 1.5.0\n\n        Parameters\n        ----------\n        path : str, file-like object or None, default None\n            If a string, it will be used as Root Directory path\n            when writing a partitioned dataset. By file-like object,\n            we refer to objects with a write() method, such as a file handle\n            (e.g. via builtin open function). If path is None,\n            a bytes object is returned.\n        engine : str, default 'pyarrow'\n            ORC library to use. Pyarrow must be >= 7.0.0.\n        index : bool, optional\n            If ``True``, include the dataframe's index(es) in the file output.\n            If ``False``, they will not be written to the file.\n            If ``None``, similar to ``infer`` the dataframe's index(es)\n            will be saved. However, instead of being saved as values,\n            the RangeIndex will be stored as a range in the metadata so it\n            doesn't require much space and is faster. Other indexes will\n            be included as columns in the file output.\n        engine_kwargs : dict[str, Any] or None, default None\n            Additional keyword arguments passed to :func:`pyarrow.orc.write_table`.\n\n        Returns\n        -------\n        bytes if no path argument is provided else None\n\n        Raises\n        ------\n        NotImplementedError\n            Dtype of one or more columns is category, unsigned integers, interval,\n            period or sparse.\n        ValueError\n            engine is not pyarrow.\n\n        See Also\n        --------\n        read_orc : Read a ORC file.\n        DataFrame.to_parquet : Write a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        * Before using this function you should read the :ref:`user guide about\n          ORC <io.orc>` and :ref:`install optional dependencies <install.warn_orc>`.\n        * This function requires `pyarrow <https://arrow.apache.org/docs/python/>`_\n          library.\n        * For supported dtypes please refer to `supported ORC features in Arrow\n          <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.\n        * Currently timezones in datetime columns are not preserved when a\n          dataframe is converted into ORC files.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})\n        >>> df.to_orc('df.orc')  # doctest: +SKIP\n        >>> pd.read_orc('df.orc')  # doctest: +SKIP\n           col1  col2\n        0     1     4\n        1     2     3\n\n        If you want to get a buffer to the orc content you can write it to io.BytesIO\n        >>> import io\n        >>> b = io.BytesIO(df.to_orc())  # doctest: +SKIP\n        >>> b.seek(0)  # doctest: +SKIP\n        0\n        >>> content = b.read()  # doctest: +SKIP\n        \"\"\"\n        from pandas.io.orc import to_orc\n\n        return to_orc(\n            self, path, engine=engine, index=index, engine_kwargs=engine_kwargs\n        )\n\n    @overload\n    def to_html(\n        self,\n        buf: FilePath | WriteBuffer[str],\n        columns: Sequence[Level] | None = ...,\n        col_space: ColspaceArgType | None = ...,\n        header: bool | Sequence[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        justify: str | None = ...,\n        max_rows: int | None = ...,\n        max_cols: int | None = ...,\n        show_dimensions: bool | str = ...,\n        decimal: str = ...,\n        bold_rows: bool = ...,\n        classes: str | list | tuple | None = ...,\n        escape: bool = ...,\n        notebook: bool = ...,\n        border: int | bool | None = ...,\n        table_id: str | None = ...,\n        render_links: bool = ...,\n        encoding: str | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def to_html(\n        self,\n        buf: None = ...,\n        columns: Sequence[Level] | None = ...,\n        col_space: ColspaceArgType | None = ...,\n        header: bool | Sequence[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        justify: str | None = ...,\n        max_rows: int | None = ...,\n        max_cols: int | None = ...,\n        show_dimensions: bool | str = ...,\n        decimal: str = ...,\n        bold_rows: bool = ...,\n        classes: str | list | tuple | None = ...,\n        escape: bool = ...,\n        notebook: bool = ...,\n        border: int | bool | None = ...,\n        table_id: str | None = ...,\n        render_links: bool = ...,\n        encoding: str | None = ...,\n    ) -> str:\n        ...\n\n    @Substitution(\n        header_type=\"bool\",\n        header=\"Whether to print column labels, default True\",\n        col_space_type=\"str or int, list or dict of int or str\",\n        col_space=\"The minimum width of each column in CSS length \"\n        \"units.  An int is assumed to be px units.\\n\\n\"\n        \"            .. versionadded:: 0.25.0\\n\"\n        \"                Ability to use str\",\n    )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\n    def to_html(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        columns: Sequence[Level] | None = None,\n        col_space: ColspaceArgType | None = None,\n        header: bool | Sequence[str] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: FormattersType | None = None,\n        float_format: FloatFormatType | None = None,\n        sparsify: bool | None = None,\n        index_names: bool = True,\n        justify: str | None = None,\n        max_rows: int | None = None,\n        max_cols: int | None = None,\n        show_dimensions: bool | str = False,\n        decimal: str = \".\",\n        bold_rows: bool = True,\n        classes: str | list | tuple | None = None,\n        escape: bool = True,\n        notebook: bool = False,\n        border: int | bool | None = None,\n        table_id: str | None = None,\n        render_links: bool = False,\n        encoding: str | None = None,\n    ) -> str | None:\n        \"\"\"\n        Render a DataFrame as an HTML table.\n        %(shared_params)s\n        bold_rows : bool, default True\n            Make the row labels bold in the output.\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table.\n        escape : bool, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.display.html.border``.\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n        render_links : bool, default False\n            Convert URLs to HTML links.\n        encoding : str, default \"utf-8\"\n            Set character encoding.\n\n            .. versionadded:: 1.0\n        %(returns)s\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n        if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n            raise ValueError(\"Invalid value for justify parameter\")\n\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=columns,\n            col_space=col_space,\n            na_rep=na_rep,\n            header=header,\n            index=index,\n            formatters=formatters,\n            float_format=float_format,\n            bold_rows=bold_rows,\n            sparsify=sparsify,\n            justify=justify,\n            index_names=index_names,\n            escape=escape,\n            decimal=decimal,\n            max_rows=max_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n        )\n        # TODO: a generic formatter wld b in DataFrameFormatter\n        return fmt.DataFrameRenderer(formatter).to_html(\n            buf=buf,\n            classes=classes,\n            notebook=notebook,\n            border=border,\n            encoding=encoding,\n            table_id=table_id,\n            render_links=render_links,\n        )\n\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path_or_buffer\",\n    )\n    def to_xml(\n        self,\n        path_or_buffer: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        index: bool = True,\n        root_name: str | None = \"data\",\n        row_name: str | None = \"row\",\n        na_rep: str | None = None,\n        attr_cols: list[str] | None = None,\n        elem_cols: list[str] | None = None,\n        namespaces: dict[str | None, str] | None = None,\n        prefix: str | None = None,\n        encoding: str = \"utf-8\",\n        xml_declaration: bool | None = True,\n        pretty_print: bool | None = True,\n        parser: str | None = \"lxml\",\n        stylesheet: FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None = None,\n        compression: CompressionOptions = \"infer\",\n        storage_options: StorageOptions = None,\n    ) -> str | None:\n        \"\"\"\n        Render a DataFrame to an XML document.\n\n        .. versionadded:: 1.3.0\n\n        Parameters\n        ----------\n        path_or_buffer : str, path object, file-like object, or None, default None\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a ``write()`` function. If None, the result is returned\n            as a string.\n        index : bool, default True\n            Whether to include index in XML document.\n        root_name : str, default 'data'\n            The name of root element in XML document.\n        row_name : str, default 'row'\n            The name of row element in XML document.\n        na_rep : str, optional\n            Missing data representation.\n        attr_cols : list-like, optional\n            List of columns to write as attributes in row element.\n            Hierarchical columns will be flattened with underscore\n            delimiting the different levels.\n        elem_cols : list-like, optional\n            List of columns to write as children in row element. By default,\n            all columns output as children of row element. Hierarchical\n            columns will be flattened with underscore delimiting the\n            different levels.\n        namespaces : dict, optional\n            All namespaces to be defined in root element. Keys of dict\n            should be prefix names and values of dict corresponding URIs.\n            Default namespaces should be given empty string key. For\n            example, ::\n\n                namespaces = {{\"\": \"https://example.com\"}}\n\n        prefix : str, optional\n            Namespace prefix to be used for every element and/or attribute\n            in document. This should be one of the keys in ``namespaces``\n            dict.\n        encoding : str, default 'utf-8'\n            Encoding of the resulting document.\n        xml_declaration : bool, default True\n            Whether to include the XML declaration at start of document.\n        pretty_print : bool, default True\n            Whether output should be pretty printed with indentation and\n            line breaks.\n        parser : {{'lxml','etree'}}, default 'lxml'\n            Parser module to use for building of tree. Only 'lxml' and\n            'etree' are supported. With 'lxml', the ability to use XSLT\n            stylesheet is supported.\n        stylesheet : str, path object or file-like object, optional\n            A URL, file-like object, or a raw string containing an XSLT\n            script used to transform the raw XML output. Script should use\n            layout of elements and attributes from original output. This\n            argument requires ``lxml`` to be installed. Only XSLT 1.0\n            scripts and not later versions is currently supported.\n        {compression_options}\n\n            .. versionchanged:: 1.4.0 Zstandard support.\n\n        {storage_options}\n\n        Returns\n        -------\n        None or str\n            If ``io`` is None, returns the resulting XML format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        to_json : Convert the pandas object to a JSON string.\n        to_html : Convert DataFrame to a html.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({{'shape': ['square', 'circle', 'triangle'],\n        ...                    'degrees': [360, 360, 180],\n        ...                    'sides': [4, np.nan, 3]}})\n\n        >>> df.to_xml()  # doctest: +SKIP\n        <?xml version='1.0' encoding='utf-8'?>\n        <data>\n          <row>\n            <index>0</index>\n            <shape>square</shape>\n            <degrees>360</degrees>\n            <sides>4.0</sides>\n          </row>\n          <row>\n            <index>1</index>\n            <shape>circle</shape>\n            <degrees>360</degrees>\n            <sides/>\n          </row>\n          <row>\n            <index>2</index>\n            <shape>triangle</shape>\n            <degrees>180</degrees>\n            <sides>3.0</sides>\n          </row>\n        </data>\n\n        >>> df.to_xml(attr_cols=[\n        ...           'index', 'shape', 'degrees', 'sides'\n        ...           ])  # doctest: +SKIP\n        <?xml version='1.0' encoding='utf-8'?>\n        <data>\n          <row index=\"0\" shape=\"square\" degrees=\"360\" sides=\"4.0\"/>\n          <row index=\"1\" shape=\"circle\" degrees=\"360\"/>\n          <row index=\"2\" shape=\"triangle\" degrees=\"180\" sides=\"3.0\"/>\n        </data>\n\n        >>> df.to_xml(namespaces={{\"doc\": \"https://example.com\"}},\n        ...           prefix=\"doc\")  # doctest: +SKIP\n        <?xml version='1.0' encoding='utf-8'?>\n        <doc:data xmlns:doc=\"https://example.com\">\n          <doc:row>\n            <doc:index>0</doc:index>\n            <doc:shape>square</doc:shape>\n            <doc:degrees>360</doc:degrees>\n            <doc:sides>4.0</doc:sides>\n          </doc:row>\n          <doc:row>\n            <doc:index>1</doc:index>\n            <doc:shape>circle</doc:shape>\n            <doc:degrees>360</doc:degrees>\n            <doc:sides/>\n          </doc:row>\n          <doc:row>\n            <doc:index>2</doc:index>\n            <doc:shape>triangle</doc:shape>\n            <doc:degrees>180</doc:degrees>\n            <doc:sides>3.0</doc:sides>\n          </doc:row>\n        </doc:data>\n        \"\"\"\n\n        from pandas.io.formats.xml import (\n            EtreeXMLFormatter,\n            LxmlXMLFormatter,\n        )\n\n        lxml = import_optional_dependency(\"lxml.etree\", errors=\"ignore\")\n\n        TreeBuilder: type[EtreeXMLFormatter] | type[LxmlXMLFormatter]\n\n        if parser == \"lxml\":\n            if lxml is not None:\n                TreeBuilder = LxmlXMLFormatter\n            else:\n                raise ImportError(\n                    \"lxml not found, please install or use the etree parser.\"\n                )\n\n        elif parser == \"etree\":\n            TreeBuilder = EtreeXMLFormatter\n\n        else:\n            raise ValueError(\"Values for parser can only be lxml or etree.\")\n\n        xml_formatter = TreeBuilder(\n            self,\n            path_or_buffer=path_or_buffer,\n            index=index,\n            root_name=root_name,\n            row_name=row_name,\n            na_rep=na_rep,\n            attr_cols=attr_cols,\n            elem_cols=elem_cols,\n            namespaces=namespaces,\n            prefix=prefix,\n            encoding=encoding,\n            xml_declaration=xml_declaration,\n            pretty_print=pretty_print,\n            stylesheet=stylesheet,\n            compression=compression,\n            storage_options=storage_options,\n        )\n\n        return xml_formatter.write_output()\n\n    # ----------------------------------------------------------------------\n    @doc(INFO_DOCSTRING, **frame_sub_kwargs)\n    def info(\n        self,\n        verbose: bool | None = None,\n        buf: WriteBuffer[str] | None = None,\n        max_cols: int | None = None,\n        memory_usage: bool | str | None = None,\n        show_counts: bool | None = None,\n        null_counts: bool | None = None,\n    ) -> None:\n        if null_counts is not None:\n            if show_counts is not None:\n                raise ValueError(\"null_counts used with show_counts. Use show_counts.\")\n            warnings.warn(\n                \"null_counts is deprecated. Use show_counts instead\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n            show_counts = null_counts\n        info = DataFrameInfo(\n            data=self,\n            memory_usage=memory_usage,\n        )\n        info.render(\n            buf=buf,\n            max_cols=max_cols,\n            verbose=verbose,\n            show_counts=show_counts,\n        )\n\n    def memory_usage(self, index: bool = True, deep: bool = False) -> Series:\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True``, the memory usage of\n            the index is the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Notes\n        -----\n        See the :ref:`Frequently Asked Questions <df-memory-usage>` for more\n        details.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64            complex128  object  bool\n        0      1      1.0              1.0+0.0j       1  True\n        1      1      1.0              1.0+0.0j       1  True\n        2      1      1.0              1.0+0.0j       1  True\n        3      1      1.0              1.0+0.0j       1  True\n        4      1      1.0              1.0+0.0j       1  True\n\n        >>> df.memory_usage()\n        Index           128\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index            128\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        180000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5244\n        \"\"\"\n        result = self._constructor_sliced(\n            [c.memory_usage(index=False, deep=deep) for col, c in self.items()],\n            index=self.columns,\n        )\n        if index:\n            index_memory_usage = self._constructor_sliced(\n                self.index.memory_usage(deep=deep), index=[\"Index\"]\n            )\n            result = index_memory_usage._append(result)\n        return result\n\n    def transpose(self, *args, copy: bool = False) -> DataFrame:\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        *args : tuple, optional\n            Accepted for compatibility with NumPy.\n        copy : bool, default False\n            Whether to copy the data after transposing, even for DataFrames\n            with a single dtype.\n\n            Note that a copy is always required for mixed dtype DataFrames,\n            or for DataFrames with any extension types.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5   8.0\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, {})\n        # construct the args\n\n        dtypes = list(self.dtypes)\n\n        if self._can_fast_transpose:\n            # Note: tests pass without this, but this improves perf quite a bit.\n            new_vals = self._values.T\n            if copy:\n                new_vals = new_vals.copy()\n\n            result = self._constructor(new_vals, index=self.columns, columns=self.index)\n\n        elif (\n            self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0])\n        ):\n            # We have EAs with the same dtype. We can preserve that dtype in transpose.\n            dtype = dtypes[0]\n            arr_type = dtype.construct_array_type()\n            values = self.values\n\n            new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\n            result = type(self)._from_arrays(\n                new_values, index=self.columns, columns=self.index\n            )\n\n        else:\n            new_arr = self.values.T\n            if copy:\n                new_arr = new_arr.copy()\n            result = self._constructor(new_arr, index=self.columns, columns=self.index)\n\n        return result.__finalize__(self, method=\"transpose\")\n\n    @property\n    def T(self) -> DataFrame:\n        return self.transpose()\n\n    # ----------------------------------------------------------------------\n    # Indexing Methods\n\n    def _ixs(self, i: int, axis: int = 0) -> Series:\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Returns\n        -------\n        Series\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_mgr = self._mgr.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_mgr.array, np.ndarray) and new_mgr.array.base is None\n            result = self._constructor_sliced(new_mgr, name=self.index[i]).__finalize__(\n                self\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            col_mgr = self._mgr.iget(i)\n            result = self._box_col_values(col_mgr, i)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n            return result\n\n    def _get_column_array(self, i: int) -> ArrayLike:\n        \"\"\"\n        Get the values of the i'th column (ndarray or ExtensionArray, as stored\n        in the Block)\n\n        Warning! The returned array is a view but doesn't handle Copy-on-Write,\n        so this should be used with caution (for read-only purposes).\n        \"\"\"\n        return self._mgr.iget_values(i)\n\n    def _iter_column_arrays(self) -> Iterator[ArrayLike]:\n        \"\"\"\n        Iterate over the arrays of all columns in order.\n        This returns the values as stored in the Block (ndarray or ExtensionArray).\n\n        Warning! The returned array is a view but doesn't handle Copy-on-Write,\n        so this should be used with caution (for read-only purposes).\n        \"\"\"\n        for i in range(len(self.columns)):\n            yield self._get_column_array(i)\n\n    def __getitem__(self, key):\n        check_deprecated_indexers(key)\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key) and not is_iterator(key):\n            # is_iterator to exclude generator e.g. test_getitem_listlike\n            # shortcut if the key is in columns\n            is_mi = isinstance(self.columns, MultiIndex)\n            # GH#45316 Return view if key is not duplicated\n            # Only use drop_duplicates with duplicates for performance\n            if not is_mi and (\n                self.columns.is_unique\n                and key in self.columns\n                or key in self.columns.drop_duplicates(keep=False)\n            ):\n                return self._get_item_cache(key)\n\n            elif is_mi and self.columns.is_unique and key in self.columns:\n                return self._getitem_multilevel(key)\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            if isinstance(indexer, np.ndarray):\n                indexer = lib.maybe_indices_to_slice(\n                    indexer.astype(np.intp, copy=False), len(self)\n                )\n                if isinstance(indexer, np.ndarray):\n                    # GH#43223 If we can not convert, use take\n                    return self.take(indexer, axis=0)\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self._take_with_is_copy(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                # GH#26490 using data[key] can cause RecursionError\n                return data._get_item_cache(key)\n\n        return data\n\n    def _getitem_bool_array(self, key):\n        # also raises Exception if object array with NA values\n        # warning here just in case -- previously __setitem__ was\n        # reindexing but __getitem__ was not; it seems more reasonable to\n        # go with the __setitem__ behavior since that is more consistent\n        # with all other indexing behavior\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                \"Boolean Series key will be reindexed to match DataFrame index.\",\n                UserWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n        elif len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n            )\n\n        # check_bool_indexer will throw exception if Series key cannot\n        # be reindexed to match DataFrame rows\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take_with_is_copy(indexer, axis=0)\n\n    def _getitem_multilevel(self, key):\n        # self.columns is a MultiIndex\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, np.ndarray)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(\n                    new_values, index=self.index, columns=result_columns\n                )\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == \"\":\n                    result = result[\"\"]\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(\n                            result, index=self.index, name=key\n                        )\n\n            result._set_is_copy(self)\n            return result\n        else:\n            # loc is neither a slice nor ndarray, so must be an int\n            return self._ixs(loc, axis=1)\n\n    def _get_value(self, index, col, takeable: bool = False) -> Scalar:\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        scalar\n\n        Notes\n        -----\n        Assumes that both `self.index._index_as_unique` and\n        `self.columns._index_as_unique`; Caller is responsible for checking.\n        \"\"\"\n        if takeable:\n            series = self._ixs(col, axis=1)\n            return series._values[index]\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        if not isinstance(self.index, MultiIndex):\n            # CategoricalIndex: Trying to use the engine fastpath may give incorrect\n            #  results if our categories are integers that dont match our codes\n            # IntervalIndex: IntervalTree has no get_loc\n            row = self.index.get_loc(index)\n            return series._values[row]\n\n        # For MultiIndex going through engine effectively restricts us to\n        #  same-length tuples; see test_get_set_value_no_partial_indexing\n        loc = engine.get_loc(index)\n        return series._values[loc]\n\n    def isetitem(self, loc, value) -> None:\n        \"\"\"\n        Set the given value in the column with position 'loc'.\n\n        This is a positional analogue to __setitem__.\n\n        Parameters\n        ----------\n        loc : int or sequence of ints\n        value : scalar or arraylike\n\n        Notes\n        -----\n        Unlike `frame.iloc[:, i] = value`, `frame.isetitem(loc, value)` will\n        _never_ try to set the values in place, but will always insert a new\n        array.\n\n        In cases where `frame.columns` is unique, this is equivalent to\n        `frame[frame.columns[i]] = value`.\n        \"\"\"\n        arraylike = self._sanitize_column(value)\n        self._iset_item_mgr(loc, arraylike, inplace=False)\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        elif isinstance(value, DataFrame):\n            self._set_item_frame_value(key, value)\n        elif (\n            is_list_like(value)\n            and not self.columns.is_unique\n            and 1 < len(self.columns.get_indexer_for([key])) == len(value)\n        ):\n            # Column to set is duplicated\n            self._setitem_array([key], value)\n        else:\n            # set column\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key: slice, value) -> None:\n        # NB: we can't just use self.loc[key] = value because that\n        #  operates on labels and we need to operate positional for\n        #  backwards-compat, xref GH#31469\n        self._check_setitem_copy()\n        self.iloc[key] = value\n\n    def _setitem_array(self, key, value):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            # bool indexer is indexing along rows\n            if len(key) != len(self.index):\n                raise ValueError(\n                    f\"Item wrong length {len(key)} instead of {len(self.index)}!\"\n                )\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            if isinstance(value, DataFrame):\n                # GH#39931 reindex since iloc does not align\n                value = value.reindex(self.index.take(indexer))\n            self.iloc[indexer] = value\n\n        else:\n            # Note: unlike self.iloc[:, indexer] = value, this will\n            #  never try to overwrite values inplace\n\n            if isinstance(value, DataFrame):\n                check_key_length(self.columns, key, value)\n                for k1, k2 in zip(key, value.columns):\n                    self[k1] = value[k2]\n\n            elif not is_list_like(value):\n                for col in key:\n                    self[col] = value\n\n            elif isinstance(value, np.ndarray) and value.ndim == 2:\n                self._iset_not_inplace(key, value)\n\n            elif np.ndim(value) > 1:\n                # list of lists\n                value = DataFrame(value).values\n                return self._setitem_array(key, value)\n\n            else:\n                self._iset_not_inplace(key, value)\n\n    def _iset_not_inplace(self, key, value):\n        # GH#39510 when setting with df[key] = obj with a list-like key and\n        #  list-like value, we iterate over those listlikes and set columns\n        #  one at a time.  This is different from dispatching to\n        #  `self.loc[:, key]= value`  because loc.__setitem__ may overwrite\n        #  data inplace, whereas this will insert new arrays.\n\n        def igetitem(obj, i: int):\n            # Note: we catch DataFrame obj before getting here, but\n            #  hypothetically would return obj.iloc[:, i]\n            if isinstance(obj, np.ndarray):\n                return obj[..., i]\n            else:\n                return obj[i]\n\n        if self.columns.is_unique:\n            if np.shape(value)[-1] != len(key):\n                raise ValueError(\"Columns must be same length as key\")\n\n            for i, col in enumerate(key):\n                self[col] = igetitem(value, i)\n\n        else:\n\n            ilocs = self.columns.get_indexer_non_unique(key)[0]\n            if (ilocs < 0).any():\n                # key entries not in self.columns\n                raise NotImplementedError\n\n            if np.shape(value)[-1] != len(ilocs):\n                raise ValueError(\"Columns must be same length as key\")\n\n            assert np.ndim(value) <= 2\n\n            orig_columns = self.columns\n\n            # Using self.iloc[:, i] = ... may set values inplace, which\n            #  by convention we do not do in __setitem__\n            try:\n                self.columns = Index(range(len(self.columns)))\n                for i, iloc in enumerate(ilocs):\n                    self[iloc] = igetitem(value, i)\n            finally:\n                self.columns = orig_columns\n\n    def _setitem_frame(self, key, value):\n        # support boolean setting with DataFrame input, e.g.\n        # df[df > df2] = 0\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError(\"Array conditional must be same shape as self\")\n            key = self._constructor(key, **self._construct_axes_dict())\n\n        if key.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                \"Must pass DataFrame or 2-d ndarray with boolean values only\"\n            )\n\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _set_item_frame_value(self, key, value: DataFrame) -> None:\n        self._ensure_valid_index(value)\n\n        # align columns\n        if key in self.columns:\n            loc = self.columns.get_loc(key)\n            cols = self.columns[loc]\n            len_cols = 1 if is_scalar(cols) else len(cols)\n            if len_cols != len(value.columns):\n                raise ValueError(\"Columns must be same length as key\")\n\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and isinstance(\n                loc, (slice, Series, np.ndarray, Index)\n            ):\n                cols_droplevel = maybe_droplevels(cols, key)\n                if len(cols_droplevel) and not cols_droplevel.equals(value.columns):\n                    value = value.reindex(cols_droplevel, axis=1)\n\n                for col, col_droplevel in zip(cols, cols_droplevel):\n                    self[col] = value[col_droplevel]\n                return\n\n            if is_scalar(cols):\n                self[cols] = value[value.columns[0]]\n                return\n\n            # now align rows\n            arraylike = _reindex_for_setitem(value, self.index)\n            self._set_item_mgr(key, arraylike)\n            return\n\n        if len(value.columns) != 1:\n            raise ValueError(\n                \"Cannot set a DataFrame with multiple columns to the single \"\n                f\"column {key}\"\n            )\n\n        self[key] = value[value.columns[0]]\n\n    def _iset_item_mgr(\n        self, loc: int | slice | np.ndarray, value, inplace: bool = False\n    ) -> None:\n        # when called from _set_item_mgr loc can be anything returned from get_loc\n        self._mgr.iset(loc, value, inplace=inplace)\n        self._clear_item_cache()\n\n    def _set_item_mgr(self, key, value: ArrayLike) -> None:\n        try:\n            loc = self._info_axis.get_loc(key)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self._mgr.insert(len(self._info_axis), key, value)\n        else:\n            self._iset_item_mgr(loc, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()\n\n    def _iset_item(self, loc: int, value) -> None:\n        arraylike = self._sanitize_column(value)\n        self._iset_item_mgr(loc, arraylike, inplace=True)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()\n\n    def _set_item(self, key, value) -> None:\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        value = self._sanitize_column(value)\n\n        if (\n            key in self.columns\n            and value.ndim == 1\n            and not is_extension_array_dtype(value)\n        ):\n            # broadcast across multiple columns if necessary\n            if not self.columns.is_unique or isinstance(self.columns, MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1)).T\n\n        self._set_item_mgr(key, value)\n\n    def _set_value(\n        self, index: IndexLabel, col, value: Scalar, takeable: bool = False\n    ) -> None:\n        \"\"\"\n        Put single value at passed column and index.\n\n        Parameters\n        ----------\n        index : Label\n            row label\n        col : Label\n            column label\n        value : scalar\n        takeable : bool, default False\n            Sets whether or not index/col interpreted as indexers\n        \"\"\"\n        try:\n            if takeable:\n                icol = col\n                iindex = cast(int, index)\n            else:\n                icol = self.columns.get_loc(col)\n                iindex = self.index.get_loc(index)\n            self._mgr.column_setitem(icol, iindex, value)\n            self._clear_item_cache()\n\n        except (KeyError, TypeError, ValueError):\n            # get_loc might raise a KeyError for missing labels (falling back\n            #  to (i)loc will do expansion of the index)\n            # column_setitem will do validation that may raise TypeError or ValueError\n            # set using a non-recursive method & reset the cache\n            if takeable:\n                self.iloc[index, col] = value\n            else:\n                self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n\n    def _ensure_valid_index(self, value) -> None:\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            if not isinstance(value, DataFrame):\n                try:\n                    value = Series(value)\n                except (ValueError, NotImplementedError, TypeError) as err:\n                    raise ValueError(\n                        \"Cannot set a frame with no defined index \"\n                        \"and a value that cannot be converted to a Series\"\n                    ) from err\n\n            # GH31368 preserve name of index\n            index_copy = value.index.copy()\n            if self.index.name is not None:\n                index_copy.name = self.index.name\n\n            self._mgr = self._mgr.reindex_axis(index_copy, axis=1, fill_value=np.nan)\n\n    def _box_col_values(self, values: SingleDataManager, loc: int) -> Series:\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        # Lookup in columns so that if e.g. a str datetime was passed\n        #  we attach the Timestamp object as the name.\n        name = self.columns[loc]\n        klass = self._constructor_sliced\n        # We get index=self.index bc values is a SingleDataManager\n        return klass(values, name=name, fastpath=True).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Lookup Caching\n\n    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()\n\n    def _get_item_cache(self, item: Hashable) -> Series:\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            # All places that call _get_item_cache have unique columns,\n            #  pending resolution of GH#33047\n\n            loc = self.columns.get_loc(item)\n            res = self._ixs(loc, axis=1)\n\n            cache[item] = res\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res\n\n    def _reset_cacher(self) -> None:\n        # no-op for DataFrame\n        pass\n\n    def _maybe_cache_changed(self, item, value: Series, inplace: bool) -> None:\n        \"\"\"\n        The object has called back to us saying maybe it has changed.\n        \"\"\"\n        loc = self._info_axis.get_loc(item)\n        arraylike = value._values\n\n        old = self._ixs(loc, axis=1)\n        if old._values is value._values and inplace:\n            # GH#46149 avoid making unnecessary copies/block-splitting\n            return\n\n        self._mgr.iset(loc, arraylike, inplace=inplace)\n\n    # ----------------------------------------------------------------------\n    # Unsorted\n\n    @overload\n    def query(self, expr: str, *, inplace: Literal[False] = ..., **kwargs) -> DataFrame:\n        ...\n\n    @overload\n    def query(self, expr: str, *, inplace: Literal[True], **kwargs) -> None:\n        ...\n\n    @overload\n    def query(self, expr: str, *, inplace: bool = ..., **kwargs) -> DataFrame | None:\n        ...\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"expr\"])\n    def query(self, expr: str, inplace: bool = False, **kwargs) -> DataFrame | None:\n        \"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.\n\n            You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            You can refer to column names that are not valid Python variable names\n            by surrounding them in backticks. Thus, column names containing spaces\n            or punctuations (besides underscores) or starting with digits must be\n            surrounded by backticks. (For example, a column named \"Area (cm^2)\" would\n            be referenced as ```Area (cm^2)```). Column names which are Python keywords\n            (like \"list\", \"for\", \"import\", etc) cannot be used.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n            .. versionadded:: 0.25.0\n                Backtick quoting introduced.\n\n            .. versionadded:: 1.0.0\n                Expanding functionality of backtick quoting for more than only spaces.\n\n        inplace : bool\n            Whether to modify the DataFrame rather than creating a new one.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame resulting from the provided query expression or\n            None if ``inplace=True``.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        *Backtick quoted variables*\n\n        Backtick quoted variables are parsed as literal Python code and\n        are converted internally to a Python valid identifier.\n        This can lead to the following problems.\n\n        During parsing a number of disallowed characters inside the backtick\n        quoted string are replaced by strings that are allowed as a Python identifier.\n        These characters include all operators in Python, the space character, the\n        question mark, the exclamation mark, the dollar sign, and the euro sign.\n        For other characters that fall outside the ASCII range (U+0001..U+007F)\n        and those that are not further specified in PEP 3131,\n        the query parser will raise an error.\n        This excludes whitespace different than the space character,\n        but also the hashtag (as it is used for comments) and the backtick\n        itself (backtick can also not be escaped).\n\n        In a special case, quotes that make a pair around a backtick can\n        confuse the parser.\n        For example, ```it's` > `that's``` will raise an error,\n        as it forms a quoted string (``'s > `that'``) with a backtick inside.\n\n        See also the Python documentation about lexical analysis\n        (https://docs.python.org/3/reference/lexical_analysis.html)\n        in combination with the source code in :mod:`pandas.core.computation.parsing`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not isinstance(expr, str):\n            msg = f\"expr must be a string to be evaluated, {type(expr)} given\"\n            raise ValueError(msg)\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 2\n        kwargs[\"target\"] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            result = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            result = self[res]\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result\n\n    @overload\n    def eval(self, expr: str, *, inplace: Literal[False] = ..., **kwargs) -> Any:\n        ...\n\n    @overload\n    def eval(self, expr: str, *, inplace: Literal[True], **kwargs) -> None:\n        ...\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"expr\"])\n    def eval(self, expr: str, inplace: bool = False, **kwargs) -> Any | None:\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, pandas object, or None\n            The result of the evaluation or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n\n        Multiple columns can be assigned to using multi-line expressions:\n\n        >>> df.eval(\n        ...     '''\n        ... C = A + B\n        ... D = A - B\n        ... '''\n        ... )\n           A   B   C  D\n        0  1  10  11 -9\n        1  2   8  10 -6\n        2  3   6   9 -3\n        3  4   4   8  0\n        4  5   2   7  3\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 2\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_cleaned_column_resolvers()\n        resolvers = column_resolvers, index_resolvers\n        if \"target\" not in kwargs:\n            kwargs[\"target\"] = self\n        kwargs[\"resolvers\"] = tuple(kwargs.get(\"resolvers\", ())) + resolvers\n\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None) -> DataFrame:\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Returns\n        -------\n        DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        See Also\n        --------\n        DataFrame.dtypes: Return Series with the data type of each column.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int64'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = (frozenset(include), frozenset(exclude))\n\n        if not any(selection):\n            raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n        # convert the myriad valid dtypes object to a single representation\n        def check_int_infer_dtype(dtypes):\n            converted_dtypes: list[type] = []\n            for dtype in dtypes:\n                # Numpy maps int to different types (int32, in64) on Windows and Linux\n                # see https://github.com/numpy/numpy/issues/9464\n                if (isinstance(dtype, str) and dtype == \"int\") or (dtype is int):\n                    converted_dtypes.append(np.int32)\n                    converted_dtypes.append(np.int64)\n                elif dtype == \"float\" or dtype is float:\n                    # GH#42452 : np.dtype(\"float\") coerces to np.float64 from Numpy 1.20\n                    converted_dtypes.extend([np.float64, np.float32])\n                else:\n                    converted_dtypes.append(infer_dtype_from_object(dtype))\n            return frozenset(converted_dtypes)\n\n        include = check_int_infer_dtype(include)\n        exclude = check_int_infer_dtype(exclude)\n\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n        def dtype_predicate(dtype: DtypeObj, dtypes_set) -> bool:\n            # GH 46870: BooleanDtype._is_numeric == True but should be excluded\n            return issubclass(dtype.type, tuple(dtypes_set)) or (\n                np.number in dtypes_set\n                and getattr(dtype, \"_is_numeric\", False)\n                and not is_bool_dtype(dtype)\n            )\n\n        def predicate(arr: ArrayLike) -> bool:\n            dtype = arr.dtype\n            if include:\n                if not dtype_predicate(dtype, include):\n                    return False\n\n            if exclude:\n                if dtype_predicate(dtype, exclude):\n                    return False\n\n            return True\n\n        mgr = self._mgr._get_data_subset(predicate).copy(deep=None)\n        return type(self)(mgr).__finalize__(self)\n\n    def insert(\n        self,\n        loc: int,\n        column: Hashable,\n        value: Scalar | AnyArrayLike,\n        allow_duplicates: bool | lib.NoDefault = lib.no_default,\n    ) -> None:\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns).\n        column : str, number, or hashable object\n            Label of the inserted column.\n        value : Scalar, Series, or array-like\n        allow_duplicates : bool, optional, default lib.no_default\n\n        See Also\n        --------\n        Index.insert : Insert new item by index.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df\n           col1  col2\n        0     1     3\n        1     2     4\n        >>> df.insert(1, \"newcol\", [99, 99])\n        >>> df\n           col1  newcol  col2\n        0     1      99     3\n        1     2      99     4\n        >>> df.insert(0, \"col1\", [100, 100], allow_duplicates=True)\n        >>> df\n           col1  col1  newcol  col2\n        0   100     1      99     3\n        1   100     2      99     4\n\n        Notice that pandas uses index alignment in case of `value` from type `Series`:\n\n        >>> df.insert(0, \"col0\", pd.Series([5, 6], index=[1, 2]))\n        >>> df\n           col0  col1  col1  newcol  col2\n        0   NaN   100     1      99     3\n        1   5.0   100     2      99     4\n        \"\"\"\n        if allow_duplicates is lib.no_default:\n            allow_duplicates = False\n        if allow_duplicates and not self.flags.allows_duplicate_labels:\n            raise ValueError(\n                \"Cannot specify 'allow_duplicates=True' when \"\n                \"'self.flags.allows_duplicate_labels' is False.\"\n            )\n        if not allow_duplicates and column in self.columns:\n            # Should this be a different kind of error??\n            raise ValueError(f\"cannot insert {column}, already exists\")\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        value = self._sanitize_column(value)\n        self._mgr.insert(loc, column, value)\n\n    def assign(self, **kwargs) -> DataFrame:\n        r\"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        **kwargs : dict of {str: callable or Series}\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        Later items in '\\*\\*kwargs' may refer to newly created or modified\n        columns in 'df'; items are computed and assigned into 'df' in order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n        ...                   index=['Portland', 'Berkeley'])\n        >>> df\n                  temp_c\n        Portland    17.0\n        Berkeley    25.0\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        Alternatively, the same behavior can be achieved by directly\n        referencing an existing Series or sequence:\n\n        >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        You can create multiple columns within the same assign where one\n        of the columns depends on another one defined within the same assign:\n\n        >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n        ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n                  temp_c  temp_f  temp_k\n        Portland    17.0    62.6  290.15\n        Berkeley    25.0    77.0  298.15\n        \"\"\"\n        data = self.copy()\n\n        for k, v in kwargs.items():\n            data[k] = com.apply_if_callable(v, data)\n        return data\n\n    def _sanitize_column(self, value) -> ArrayLike:\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        value : scalar, Series, or array-like\n\n        Returns\n        -------\n        numpy.ndarray or ExtensionArray\n        \"\"\"\n        self._ensure_valid_index(value)\n\n        # We can get there through isetitem with a DataFrame\n        # or through loc single_block_path\n        if isinstance(value, DataFrame):\n            return _reindex_for_setitem(value, self.index)\n        elif is_dict_like(value):\n            return _reindex_for_setitem(Series(value), self.index)\n\n        if is_list_like(value):\n            com.require_length_match(value, self.index)\n        return sanitize_array(value, self.index, copy=True, allow_2d=True)\n\n    @property\n    def _series(self):\n        return {\n            item: Series(\n                self._mgr.iget(idx), index=self.index, name=item, fastpath=True\n            )\n            for idx, item in enumerate(self.columns)\n        }\n\n    def lookup(\n        self, row_labels: Sequence[IndexLabel], col_labels: Sequence[IndexLabel]\n    ) -> np.ndarray:\n        \"\"\"\n        Label-based \"fancy indexing\" function for DataFrame.\n\n        .. deprecated:: 1.2.0\n            DataFrame.lookup is deprecated,\n            use pandas.factorize and NumPy indexing instead.\n            For further details see\n            :ref:`Looking up values by index/column labels <indexing.lookup>`.\n\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup.\n        col_labels : sequence\n            The column labels to use for lookup.\n\n        Returns\n        -------\n        numpy.ndarray\n            The found values.\n        \"\"\"\n        msg = (\n            \"The 'lookup' method is deprecated and will be \"\n            \"removed in a future version. \"\n            \"You can use DataFrame.melt and DataFrame.loc \"\n            \"as a substitute.\"\n        )\n        warnings.warn(\n            msg, FutureWarning, stacklevel=find_stack_level(inspect.currentframe())\n        )\n\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError(\"Row labels must have same size as column labels\")\n        if not (self.index.is_unique and self.columns.is_unique):\n            # GH#33041\n            raise ValueError(\"DataFrame.lookup requires unique index and columns\")\n\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError(\"One or more row labels was not found\")\n            if (cidx == -1).any():\n                raise KeyError(\"One or more column labels was not found\")\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype=\"O\")\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n\n        return result\n\n    # ----------------------------------------------------------------------\n    # Reindexing and alignment\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n        frame = self\n\n        columns = axes[\"columns\"]\n        if columns is not None:\n            frame = frame._reindex_columns(\n                columns, method, copy, level, fill_value, limit, tolerance\n            )\n\n        index = axes[\"index\"]\n        if index is not None:\n            frame = frame._reindex_index(\n                index, method, copy, level, fill_value, limit, tolerance\n            )\n\n        return frame\n\n    def _reindex_index(\n        self,\n        new_index,\n        method,\n        copy: bool,\n        level: Level,\n        fill_value=np.nan,\n        limit=None,\n        tolerance=None,\n    ):\n        new_index, indexer = self.index.reindex(\n            new_index, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {0: [new_index, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )\n\n    def _reindex_columns(\n        self,\n        new_columns,\n        method,\n        copy: bool,\n        level: Level,\n        fill_value=None,\n        limit=None,\n        tolerance=None,\n    ):\n        new_columns, indexer = self.columns.reindex(\n            new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {1: [new_columns, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )\n\n    def _reindex_multi(\n        self, axes: dict[str, Index], copy: bool, fill_value\n    ) -> DataFrame:\n        \"\"\"\n        We are guaranteed non-Nones in the axes.\n        \"\"\"\n\n        new_index, row_indexer = self.index.reindex(axes[\"index\"])\n        new_columns, col_indexer = self.columns.reindex(axes[\"columns\"])\n\n        if row_indexer is not None and col_indexer is not None:\n            # Fastpath. By doing two 'take's at once we avoid making an\n            #  unnecessary copy.\n            # We only get here with `not self._is_mixed_type`, which (almost)\n            #  ensures that self.values is cheap. It may be worth making this\n            #  condition more specific.\n            indexer = row_indexer, col_indexer\n            new_values = take_2d_multi(self.values, indexer, fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=new_columns)\n        else:\n            return self._reindex_with_indexers(\n                {0: [new_index, row_indexer], 1: [new_columns, col_indexer]},\n                copy=copy,\n                fill_value=fill_value,\n            )\n\n    @doc(NDFrame.align, **_shared_doc_kwargs)\n    def align(\n        self,\n        other: DataFrame,\n        join: Literal[\"outer\", \"inner\", \"left\", \"right\"] = \"outer\",\n        axis: Axis | None = None,\n        level: Level = None,\n        copy: bool = True,\n        fill_value=None,\n        method: FillnaOptions | None = None,\n        limit: int | None = None,\n        fill_axis: Axis = 0,\n        broadcast_axis: Axis | None = None,\n    ) -> DataFrame:\n        return super().align(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n            broadcast_axis=broadcast_axis,\n        )\n\n    @overload\n    def set_axis(\n        self,\n        labels,\n        *,\n        axis: Axis = ...,\n        inplace: Literal[False] | lib.NoDefault = ...,\n        copy: bool | lib.NoDefault = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def set_axis(\n        self,\n        labels,\n        *,\n        axis: Axis = ...,\n        inplace: Literal[True],\n        copy: bool | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def set_axis(\n        self,\n        labels,\n        *,\n        axis: Axis = ...,\n        inplace: bool | lib.NoDefault = ...,\n        copy: bool | lib.NoDefault = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"set_axis\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"labels\"])\n    @Appender(\n        \"\"\"\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n        Change the row labels.\n\n        >>> df.set_axis(['a', 'b', 'c'], axis='index')\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n\n        Change the column labels.\n\n        >>> df.set_axis(['I', 'II'], axis='columns')\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6\n\n        Now, update the labels without copying the underlying data.\n\n        >>> df.set_axis(['i', 'ii'], axis='columns', copy=False)\n           i  ii\n        0  1   4\n        1  2   5\n        2  3   6\n        \"\"\"\n    )\n    @Substitution(\n        **_shared_doc_kwargs,\n        extended_summary_sub=\" column or\",\n        axis_description_sub=\", and 1 identifies the columns\",\n        see_also_sub=\" or columns\",\n    )\n    @Appender(NDFrame.set_axis.__doc__)\n    def set_axis(\n        self,\n        labels,\n        axis: Axis = 0,\n        inplace: bool | lib.NoDefault = lib.no_default,\n        *,\n        copy: bool | lib.NoDefault = lib.no_default,\n    ):\n        return super().set_axis(labels, axis=axis, inplace=inplace, copy=copy)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.reindex.__doc__)\n    @rewrite_axis_style_signature(\n        \"labels\",\n        [\n            (\"method\", None),\n            (\"copy\", None),\n            (\"level\", None),\n            (\"fill_value\", np.nan),\n            (\"limit\", None),\n            (\"tolerance\", None),\n        ],\n    )\n    def reindex(self, *args, **kwargs) -> DataFrame:\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level = ...,\n        inplace: Literal[True],\n        errors: IgnoreRaise = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level = ...,\n        inplace: Literal[False] = ...,\n        errors: IgnoreRaise = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level = ...,\n        inplace: bool = ...,\n        errors: IgnoreRaise = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"drop\" incompatible with supertype \"NDFrame\"\n    # github.com/python/mypy/issues/12387\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"labels\"])\n    def drop(  # type: ignore[override]\n        self,\n        labels: IndexLabel = None,\n        axis: Axis = 0,\n        index: IndexLabel = None,\n        columns: IndexLabel = None,\n        level: Level = None,\n        inplace: bool = False,\n        errors: IgnoreRaise = \"raise\",\n    ) -> DataFrame | None:\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level. See the `user guide <advanced.shown_levels>`\n        for more information about the now unused levels.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop. A tuple will be used as a single\n            label and not treated as a list-like.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index : single label or list-like\n            Alternative to specifying axis (``labels, axis=0``\n            is equivalent to ``index=labels``).\n        columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If False, return a copy. Otherwise, do operation\n            inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame without the removed index or column labels or\n            None if ``inplace=True``.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis.\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns.\n        Series.drop : Return Series with specified index labels removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3, 0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        Drop a specific index combination from the MultiIndex\n        DataFrame, i.e., drop the combination ``'falcon'`` and\n        ``'weight'``, which deletes only the corresponding row\n\n        >>> df.drop(index=('falcon', 'weight'))\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super().drop(\n            labels=labels,\n            axis=axis,\n            index=index,\n            columns=columns,\n            level=level,\n            inplace=inplace,\n            errors=errors,\n        )\n\n    @overload\n    def rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        copy: bool | None = ...,\n        inplace: Literal[True],\n        level: Level = ...,\n        errors: IgnoreRaise = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        copy: bool | None = ...,\n        inplace: Literal[False] = ...,\n        level: Level = ...,\n        errors: IgnoreRaise = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        copy: bool | None = ...,\n        inplace: bool = ...,\n        level: Level = ...,\n        errors: IgnoreRaise = ...,\n    ) -> DataFrame | None:\n        ...\n\n    def rename(\n        self,\n        mapper: Renamer | None = None,\n        *,\n        index: Renamer | None = None,\n        columns: Renamer | None = None,\n        axis: Axis | None = None,\n        copy: bool | None = None,\n        inplace: bool = False,\n        level: Level = None,\n        errors: IgnoreRaise = \"ignore\",\n    ) -> DataFrame | None:\n        \"\"\"\n        Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper : dict-like or function\n            Dict-like or function transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        index : dict-like or function\n            Alternative to specifying axis (``mapper, axis=0``\n            is equivalent to ``index=mapper``).\n        columns : dict-like or function\n            Alternative to specifying axis (``mapper, axis=1``\n            is equivalent to ``columns=mapper``).\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n            If True then value of copy is ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index\n            being transformed.\n            If 'ignore', existing keys will be renamed and extra keys will be\n            ignored.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with the renamed axis labels or None if ``inplace=True``.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis and\n            \"errors='raise'\".\n\n        See Also\n        --------\n        DataFrame.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Rename columns using a mapping:\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Rename index using a mapping:\n\n        >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n           A  B\n        x  1  4\n        y  2  5\n        z  3  6\n\n        Cast index labels to a different type:\n\n        >>> df.index\n        RangeIndex(start=0, stop=3, step=1)\n        >>> df.rename(index=str).index\n        Index(['0', '1', '2'], dtype='object')\n\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n        Traceback (most recent call last):\n        KeyError: ['C'] not found in axis\n\n        Using axis-style parameters:\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        return super()._rename(\n            mapper=mapper,\n            index=index,\n            columns=columns,\n            axis=axis,\n            copy=copy,\n            inplace=inplace,\n            level=level,\n            errors=errors,\n        )\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[False] = ...,\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[True],\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: bool = ...,\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"fillna\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"value\"])\n    @doc(NDFrame.fillna, **_shared_doc_kwargs)\n    def fillna(  # type: ignore[override]\n        self,\n        value: Hashable | Mapping | Series | DataFrame = None,\n        method: FillnaOptions | None = None,\n        axis: Axis | None = None,\n        inplace: bool = False,\n        limit: int | None = None,\n        downcast: dict | None = None,\n    ) -> DataFrame | None:\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n        )\n\n    def pop(self, item: Hashable) -> Series:\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n\n        Parameters\n        ----------\n        item : label\n            Label of column to be popped.\n\n        Returns\n        -------\n        Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n        ...                    ('parrot', 'bird', 24.0),\n        ...                    ('lion', 'mammal', 80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=('name', 'class', 'max_speed'))\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        >>> df.pop('class')\n        0      bird\n        1      bird\n        2    mammal\n        3    mammal\n        Name: class, dtype: object\n\n        >>> df\n             name  max_speed\n        0  falcon      389.0\n        1  parrot       24.0\n        2    lion       80.5\n        3  monkey        NaN\n        \"\"\"\n        return super().pop(item=item)\n\n    # error: Signature of \"replace\" incompatible with supertype \"NDFrame\"\n    @overload  # type: ignore[override]\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[False] = ...,\n        limit: int | None = ...,\n        regex: bool = ...,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[True],\n        limit: int | None = ...,\n        regex: bool = ...,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    # error: Signature of \"replace\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(\n        version=None, allowed_args=[\"self\", \"to_replace\", \"value\"]\n    )\n    @doc(NDFrame.replace, **_shared_doc_kwargs)\n    def replace(  # type: ignore[override]\n        self,\n        to_replace=None,\n        value=lib.no_default,\n        inplace: bool = False,\n        limit: int | None = None,\n        regex: bool = False,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = lib.no_default,\n    ) -> DataFrame | None:\n        return super().replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            limit=limit,\n            regex=regex,\n            method=method,\n        )\n\n    def _replace_columnwise(\n        self, mapping: dict[Hashable, tuple[Any, Any]], inplace: bool, regex\n    ):\n        \"\"\"\n        Dispatch to Series.replace column-wise.\n\n        Parameters\n        ----------\n        mapping : dict\n            of the form {col: (target, value)}\n        inplace : bool\n        regex : bool or same types as `to_replace` in DataFrame.replace\n\n        Returns\n        -------\n        DataFrame or None\n        \"\"\"\n        # Operate column-wise\n        res = self if inplace else self.copy()\n        ax = self.columns\n\n        for i in range(len(ax)):\n            if ax[i] in mapping:\n                ser = self.iloc[:, i]\n\n                target, value = mapping[ax[i]]\n                newobj = ser.replace(target, value, regex=regex)\n\n                res._iset_item(i, newobj)\n\n        if inplace:\n            return\n        return res.__finalize__(self)\n\n    @doc(NDFrame.shift, klass=_shared_doc_kwargs[\"klass\"])\n    def shift(\n        self,\n        periods: int = 1,\n        freq: Frequency | None = None,\n        axis: Axis = 0,\n        fill_value: Hashable = lib.no_default,\n    ) -> DataFrame:\n        axis = self._get_axis_number(axis)\n\n        ncols = len(self.columns)\n        if (\n            axis == 1\n            and periods != 0\n            and freq is None\n            and fill_value is lib.no_default\n            and ncols > 0\n        ):\n            # We will infer fill_value to match the closest column\n\n            # Use a column that we know is valid for our column's dtype GH#38434\n            label = self.columns[0]\n\n            if periods > 0:\n                result = self.iloc[:, :-periods]\n                for col in range(min(ncols, abs(periods))):\n                    # TODO(EA2D): doing this in a loop unnecessary with 2D EAs\n                    # Define filler inside loop so we get a copy\n                    filler = self.iloc[:, 0].shift(len(self))\n                    result.insert(0, label, filler, allow_duplicates=True)\n            else:\n                result = self.iloc[:, -periods:]\n                for col in range(min(ncols, abs(periods))):\n                    # Define filler inside loop so we get a copy\n                    filler = self.iloc[:, -1].shift(len(self))\n                    result.insert(\n                        len(result.columns), label, filler, allow_duplicates=True\n                    )\n\n            result.columns = self.columns.copy()\n            return result\n        elif (\n            axis == 1\n            and periods != 0\n            and fill_value is not lib.no_default\n            and ncols > 0\n        ):\n            arrays = self._mgr.arrays\n            if len(arrays) > 1 or (\n                # If we only have one block and we know that we can't\n                #  keep the same dtype (i.e. the _can_hold_element check)\n                #  then we can go through the reindex_indexer path\n                #  (and avoid casting logic in the Block method).\n                #  The exception to this (until 2.0) is datetimelike\n                #  dtypes with integers, which cast.\n                not can_hold_element(arrays[0], fill_value)\n                # TODO(2.0): remove special case for integer-with-datetimelike\n                #  once deprecation is enforced\n                and not (\n                    lib.is_integer(fill_value) and needs_i8_conversion(arrays[0].dtype)\n                )\n            ):\n                # GH#35488 we need to watch out for multi-block cases\n                # We only get here with fill_value not-lib.no_default\n                nper = abs(periods)\n                nper = min(nper, ncols)\n                if periods > 0:\n                    indexer = np.array(\n                        [-1] * nper + list(range(ncols - periods)), dtype=np.intp\n                    )\n                else:\n                    indexer = np.array(\n                        list(range(nper, ncols)) + [-1] * nper, dtype=np.intp\n                    )\n                mgr = self._mgr.reindex_indexer(\n                    self.columns,\n                    indexer,\n                    axis=0,\n                    fill_value=fill_value,\n                    allow_dups=True,\n                )\n                res_df = self._constructor(mgr)\n                return res_df.__finalize__(self, method=\"shift\")\n\n        return super().shift(\n            periods=periods, freq=freq, axis=axis, fill_value=fill_value\n        )\n\n    @overload\n    def set_index(\n        self,\n        keys,\n        *,\n        drop: bool = ...,\n        append: bool = ...,\n        inplace: Literal[False] | lib.NoDefault = ...,\n        verify_integrity: bool = ...,\n        copy: bool | lib.NoDefault = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def set_index(\n        self,\n        keys,\n        *,\n        drop: bool = ...,\n        append: bool = ...,\n        inplace: Literal[True],\n        verify_integrity: bool = ...,\n        copy: bool | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"keys\"])\n    def set_index(\n        self,\n        keys,\n        drop: bool = True,\n        append: bool = False,\n        inplace: bool | lib.NoDefault = lib.no_default,\n        verify_integrity: bool = False,\n        copy: bool | lib.NoDefault = lib.no_default,\n    ) -> DataFrame | None:\n        \"\"\"\n        Set the DataFrame index using existing columns.\n\n        Set the DataFrame index (row labels) using one or more existing\n        columns or arrays (of the correct length). The index can replace the\n        existing index or expand on it.\n\n        Parameters\n        ----------\n        keys : label or array-like or list of labels/arrays\n            This parameter can be either a single column key, a single array of\n            the same length as the calling DataFrame, or a list containing an\n            arbitrary combination of column keys and arrays. Here, \"array\"\n            encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n            instances of :class:`~collections.abc.Iterator`.\n        drop : bool, default True\n            Delete columns to be used as the new index.\n        append : bool, default False\n            Whether to append columns to existing index.\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n\n            .. deprecated:: 1.5.0\n\n        verify_integrity : bool, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method.\n        copy : bool, default True\n            Whether to make a copy of the underlying data when returning a new\n            DataFrame.\n\n            .. versionadded:: 1.5.0\n\n        Returns\n        -------\n        DataFrame or None\n            Changed row labels or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.reset_index : Opposite of set_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale': [55, 40, 84, 31]})\n        >>> df\n           month  year  sale\n        0      1  2012    55\n        1      4  2014    40\n        2      7  2013    84\n        3     10  2014    31\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               year  sale\n        month\n        1      2012    55\n        4      2014    40\n        7      2013    84\n        10     2014    31\n\n        Create a MultiIndex using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a MultiIndex using an Index and a column:\n\n        >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Create a MultiIndex using two Series:\n\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> df.set_index([s, s**2])\n              month  year  sale\n        1 1       1  2012    55\n        2 4       4  2014    40\n        3 9       7  2013    84\n        4 16     10  2014    31\n        \"\"\"\n        if inplace is not lib.no_default:\n            inplace = validate_bool_kwarg(inplace, \"inplace\")\n            warnings.warn(\n                \"The 'inplace' keyword in DataFrame.set_index is deprecated \"\n                \"and will be removed in a future version. Use \"\n                \"`df = df.set_index(..., copy=False)` instead.\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n        else:\n            inplace = False\n\n        if inplace:\n            if copy is not lib.no_default:\n                raise ValueError(\"Cannot specify copy when inplace=True\")\n            copy = False\n        elif copy is lib.no_default:\n            copy = True\n\n        self._check_inplace_and_allows_duplicate_labels(inplace)\n        if not isinstance(keys, list):\n            keys = [keys]\n\n        err_msg = (\n            'The parameter \"keys\" may be a column key, one-dimensional '\n            \"array, or a list containing only valid column keys and \"\n            \"one-dimensional arrays.\"\n        )\n\n        missing: list[Hashable] = []\n        for col in keys:\n            if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):\n                # arrays are fine as long as they are one-dimensional\n                # iterators get converted to list below\n                if getattr(col, \"ndim\", 1) != 1:\n                    raise ValueError(err_msg)\n            else:\n                # everything else gets tried as a key; see GH 24969\n                try:\n                    found = col in self.columns\n                except TypeError as err:\n                    raise TypeError(\n                        f\"{err_msg}. Received column of type {type(col)}\"\n                    ) from err\n                else:\n                    if not found:\n                        missing.append(col)\n\n        if missing:\n            raise KeyError(f\"None of {missing} are in the columns\")\n\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy(deep=copy)\n\n        arrays = []\n        names: list[Hashable] = []\n        if append:\n            names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n\n        to_remove: list[Hashable] = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels):\n                    arrays.append(col._get_level_values(n))\n                names.extend(col.names)\n            elif isinstance(col, (Index, Series)):\n                # if Index then not MultiIndex (treated above)\n\n                # error: Argument 1 to \"append\" of \"list\" has incompatible type\n                #  \"Union[Index, Series]\"; expected \"Index\"\n                arrays.append(col)  # type:ignore[arg-type]\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray)):\n                # error: Argument 1 to \"append\" of \"list\" has incompatible type\n                # \"Union[List[Any], ndarray]\"; expected \"Index\"\n                arrays.append(col)  # type: ignore[arg-type]\n                names.append(None)\n            elif isinstance(col, abc.Iterator):\n                # error: Argument 1 to \"append\" of \"list\" has incompatible type\n                # \"List[Any]\"; expected \"Index\"\n                arrays.append(list(col))  # type: ignore[arg-type]\n                names.append(None)\n            # from here, col can only be a column label\n            else:\n                arrays.append(frame[col]._values)\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n\n            if len(arrays[-1]) != len(self):\n                # check newest element against length of calling frame, since\n                # ensure_index_from_sequences would not raise for append=False.\n                raise ValueError(\n                    f\"Length mismatch: Expected {len(self)} rows, \"\n                    f\"received array of length {len(arrays[-1])}\"\n                )\n\n        index = ensure_index_from_sequences(arrays, names)\n\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError(f\"Index has duplicate keys: {duplicates}\")\n\n        # use set to handle duplicate column names gracefully in case of drop\n        for c in set(to_remove):\n            del frame[c]\n\n        # clear up memory usage\n        index._cleanup()\n\n        frame.index = index\n\n        if not inplace:\n            return frame\n        return None\n\n    @overload\n    def reset_index(\n        self,\n        level: IndexLabel = ...,\n        *,\n        drop: bool = ...,\n        inplace: Literal[False] = ...,\n        col_level: Hashable = ...,\n        col_fill: Hashable = ...,\n        allow_duplicates: bool | lib.NoDefault = ...,\n        names: Hashable | Sequence[Hashable] = None,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def reset_index(\n        self,\n        level: IndexLabel = ...,\n        *,\n        drop: bool = ...,\n        inplace: Literal[True],\n        col_level: Hashable = ...,\n        col_fill: Hashable = ...,\n        allow_duplicates: bool | lib.NoDefault = ...,\n        names: Hashable | Sequence[Hashable] = None,\n    ) -> None:\n        ...\n\n    @overload\n    def reset_index(\n        self,\n        level: IndexLabel = ...,\n        *,\n        drop: bool = ...,\n        inplace: bool = ...,\n        col_level: Hashable = ...,\n        col_fill: Hashable = ...,\n        allow_duplicates: bool | lib.NoDefault = ...,\n        names: Hashable | Sequence[Hashable] = None,\n    ) -> DataFrame | None:\n        ...\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"level\"])\n    def reset_index(\n        self,\n        level: IndexLabel = None,\n        drop: bool = False,\n        inplace: bool = False,\n        col_level: Hashable = 0,\n        col_fill: Hashable = \"\",\n        allow_duplicates: bool | lib.NoDefault = lib.no_default,\n        names: Hashable | Sequence[Hashable] = None,\n    ) -> DataFrame | None:\n        \"\"\"\n        Reset the index, or a level of it.\n\n        Reset the index of the DataFrame, and use the default one instead.\n        If the DataFrame has a MultiIndex, this method can remove one or more\n        levels.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default.\n        drop : bool, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n        allow_duplicates : bool, optional, default lib.no_default\n            Allow duplicate column labels to be created.\n\n            .. versionadded:: 1.5.0\n\n        names : int, str or 1-dimensional list, default None\n            Using the given string, rename the DataFrame column which contains the\n            index data. If the DataFrame has a MultiIndex, this has to be a list or\n            tuple with length equal to the number of levels.\n\n            .. versionadded:: 1.5.0\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with the new index or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.set_index : Opposite of reset_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 389.0),\n        ...                    ('bird', 24.0),\n        ...                    ('mammal', 80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        Using the `names` parameter, choose a name for the index column:\n\n        >>> df.reset_index(names=['classes', 'names'])\n          classes   names  speed species\n                             max    type\n        0    bird  falcon  389.0     fly\n        1    bird  parrot   24.0     fly\n        2  mammal    lion   80.5     run\n        3  mammal  monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        self._check_inplace_and_allows_duplicate_labels(inplace)\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy(deep=None)\n        if allow_duplicates is not lib.no_default:\n            allow_duplicates = validate_bool_kwarg(allow_duplicates, \"allow_duplicates\")\n\n        new_index = default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n\n        if not drop:\n            to_insert: Iterable[tuple[Any, Any | None]]\n\n            default = \"index\" if \"index\" not in self else \"level_0\"\n            names = self.index._get_default_index_names(names, default)\n\n            if isinstance(self.index, MultiIndex):\n                to_insert = zip(self.index.levels, self.index.codes)\n            else:\n                to_insert = ((self.index, None),)\n\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if level is not None and i not in level:\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                \"col_fill=None is incompatible \"\n                                f\"with incomplete column name {name}\"\n                            )\n                        col_fill = col_name[0]\n\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n\n                # to ndarray and maybe infer different dtype\n                level_values = lev._values\n                if level_values.dtype == np.object_:\n                    level_values = lib.maybe_convert_objects(level_values)\n\n                if lab is not None:\n                    # if we have the codes, extract the values with a mask\n                    level_values = algorithms.take(\n                        level_values, lab, allow_fill=True, fill_value=lev._na_value\n                    )\n\n                new_obj.insert(\n                    0,\n                    name,\n                    level_values,\n                    allow_duplicates=allow_duplicates,\n                )\n\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n        return None\n\n    # ----------------------------------------------------------------------\n    # Reindex-based selection methods\n\n    @doc(NDFrame.isna, klass=_shared_doc_kwargs[\"klass\"])\n    def isna(self) -> DataFrame:\n        result = self._constructor(self._mgr.isna(func=isna))\n        return result.__finalize__(self, method=\"isna\")\n\n    @doc(NDFrame.isna, klass=_shared_doc_kwargs[\"klass\"])\n    def isnull(self) -> DataFrame:\n        \"\"\"\n        DataFrame.isnull is an alias for DataFrame.isna.\n        \"\"\"\n        return self.isna()\n\n    @doc(NDFrame.notna, klass=_shared_doc_kwargs[\"klass\"])\n    def notna(self) -> DataFrame:\n        return ~self.isna()\n\n    @doc(NDFrame.notna, klass=_shared_doc_kwargs[\"klass\"])\n    def notnull(self) -> DataFrame:\n        \"\"\"\n        DataFrame.notnull is an alias for DataFrame.notna.\n        \"\"\"\n        return ~self.isna()\n\n    @overload\n    def dropna(\n        self,\n        *,\n        axis: Axis = ...,\n        how: AnyAll | NoDefault = ...,\n        thresh: int | NoDefault = ...,\n        subset: IndexLabel = ...,\n        inplace: Literal[False] = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def dropna(\n        self,\n        *,\n        axis: Axis = ...,\n        how: AnyAll | NoDefault = ...,\n        thresh: int | NoDefault = ...,\n        subset: IndexLabel = ...,\n        inplace: Literal[True],\n    ) -> None:\n        ...\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\"])\n    def dropna(\n        self,\n        axis: Axis = 0,\n        how: AnyAll | NoDefault = no_default,\n        thresh: int | NoDefault = no_default,\n        subset: IndexLabel = None,\n        inplace: bool = False,\n    ) -> DataFrame | None:\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. versionchanged:: 1.0.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values. Cannot be combined with how.\n        subset : column label or sequence of labels, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with NA entries dropped from it or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'toy'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        if (how is not no_default) and (thresh is not no_default):\n            raise TypeError(\n                \"You cannot set both the how and thresh arguments at the same time.\"\n            )\n\n        if how is no_default:\n            how = \"any\"\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if isinstance(axis, (tuple, list)):\n            # GH20987\n            raise TypeError(\"supplying multiple axes to axis is no longer supported.\")\n\n        axis = self._get_axis_number(axis)\n        agg_axis = 1 - axis\n\n        agg_obj = self\n        if subset is not None:\n            # subset needs to be list\n            if not is_list_like(subset):\n                subset = [subset]\n            ax = self._get_axis(agg_axis)\n            indices = ax.get_indexer_for(subset)\n            check = indices == -1\n            if check.any():\n                raise KeyError(np.array(subset)[check].tolist())\n            agg_obj = self.take(indices, axis=agg_axis)\n\n        if thresh is not no_default:\n            count = agg_obj.count(axis=agg_axis)\n            mask = count >= thresh\n        elif how == \"any\":\n            # faster equivalent to 'agg_obj.count(agg_axis) == self.shape[agg_axis]'\n            mask = notna(agg_obj).all(axis=agg_axis, bool_only=False)\n        elif how == \"all\":\n            # faster equivalent to 'agg_obj.count(agg_axis) > 0'\n            mask = notna(agg_obj).any(axis=agg_axis, bool_only=False)\n        else:\n            raise ValueError(f\"invalid how option: {how}\")\n\n        if np.all(mask):\n            result = self.copy()\n        else:\n            result = self.loc(axis=axis)[mask]\n\n        if not inplace:\n            return result\n        self._update_inplace(result)\n        return None\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"subset\"])\n    def drop_duplicates(\n        self,\n        subset: Hashable | Sequence[Hashable] | None = None,\n        keep: Literal[\"first\", \"last\", False] = \"first\",\n        inplace: bool = False,\n        ignore_index: bool = False,\n    ) -> DataFrame | None:\n        \"\"\"\n        Return DataFrame with duplicate rows removed.\n\n        Considering certain columns is optional. Indexes, including time indexes\n        are ignored.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', ``False``}, default 'first'\n            Determines which duplicates (if any) to keep.\n\n            - 'first' : Drop duplicates except for the first occurrence.\n            - 'last' : Drop duplicates except for the last occurrence.\n            - ``False`` : Drop all duplicates.\n\n        inplace : bool, default ``False``\n            Whether to modify the DataFrame rather than creating a new one.\n        ignore_index : bool, default ``False``\n            If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with duplicates removed or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.value_counts: Count unique combinations of columns.\n\n        Examples\n        --------\n        Consider dataset containing ramen rating.\n\n        >>> df = pd.DataFrame({\n        ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n        ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n        ...     'rating': [4, 4, 3.5, 15, 5]\n        ... })\n        >>> df\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        By default, it removes duplicate rows based on all columns.\n\n        >>> df.drop_duplicates()\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        To remove duplicates on specific column(s), use ``subset``.\n\n        >>> df.drop_duplicates(subset=['brand'])\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n\n        To remove duplicates and keep last occurrences, use ``keep``.\n\n        >>> df.drop_duplicates(subset=['brand', 'style'], keep='last')\n            brand style  rating\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        4  Indomie  pack     5.0\n        \"\"\"\n        if self.empty:\n            return self.copy()\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        ignore_index = validate_bool_kwarg(ignore_index, \"ignore_index\")\n        duplicated = self.duplicated(subset, keep=keep)\n\n        result = self[-duplicated]\n        if ignore_index:\n            result.index = default_index(len(result))\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result\n\n    def duplicated(\n        self,\n        subset: Hashable | Sequence[Hashable] | None = None,\n        keep: Literal[\"first\", \"last\", False] = \"first\",\n    ) -> Series:\n        \"\"\"\n        Return boolean Series denoting duplicate rows.\n\n        Considering certain columns is optional.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', False}, default 'first'\n            Determines which duplicates (if any) to mark.\n\n            - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        Series\n            Boolean series for each duplicated rows.\n\n        See Also\n        --------\n        Index.duplicated : Equivalent method on index.\n        Series.duplicated : Equivalent method on Series.\n        Series.drop_duplicates : Remove duplicate values from Series.\n        DataFrame.drop_duplicates : Remove duplicate values from DataFrame.\n\n        Examples\n        --------\n        Consider dataset containing ramen rating.\n\n        >>> df = pd.DataFrame({\n        ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n        ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n        ...     'rating': [4, 4, 3.5, 15, 5]\n        ... })\n        >>> df\n            brand style  rating\n        0  Yum Yum   cup     4.0\n        1  Yum Yum   cup     4.0\n        2  Indomie   cup     3.5\n        3  Indomie  pack    15.0\n        4  Indomie  pack     5.0\n\n        By default, for each set of duplicated values, the first occurrence\n        is set on False and all others on True.\n\n        >>> df.duplicated()\n        0    False\n        1     True\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        By using 'last', the last occurrence of each set of duplicated values\n        is set on False and all others on True.\n\n        >>> df.duplicated(keep='last')\n        0     True\n        1    False\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        By setting ``keep`` on False, all duplicates are True.\n\n        >>> df.duplicated(keep=False)\n        0     True\n        1     True\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        To find duplicates on specific column(s), use ``subset``.\n\n        >>> df.duplicated(subset=['brand'])\n        0    False\n        1     True\n        2    False\n        3     True\n        4     True\n        dtype: bool\n        \"\"\"\n\n        if self.empty:\n            return self._constructor_sliced(dtype=bool)\n\n        def f(vals) -> tuple[np.ndarray, int]:\n            labels, shape = algorithms.factorize(vals, size_hint=len(self))\n            return labels.astype(\"i8\", copy=False), len(shape)\n\n        if subset is None:\n            # https://github.com/pandas-dev/pandas/issues/28770\n            # Incompatible types in assignment (expression has type \"Index\", variable\n            # has type \"Sequence[Any]\")\n            subset = self.columns  # type: ignore[assignment]\n        elif (\n            not np.iterable(subset)\n            or isinstance(subset, str)\n            or isinstance(subset, tuple)\n            and subset in self.columns\n        ):\n            subset = (subset,)\n\n        #  needed for mypy since can't narrow types using np.iterable\n        subset = cast(Sequence, subset)\n\n        # Verify all columns in subset exist in the queried dataframe\n        # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n        # key that doesn't exist.\n        diff = set(subset) - set(self.columns)\n        if diff:\n            raise KeyError(Index(diff))\n\n        if len(subset) == 1 and self.columns.is_unique:\n            # GH#45236 This is faster than get_group_index below\n            result = self[subset[0]].duplicated(keep)\n            result.name = None\n        else:\n            vals = (col.values for name, col in self.items() if name in subset)\n            labels, shape = map(list, zip(*map(f, vals)))\n\n            ids = get_group_index(\n                labels,\n                # error: Argument 1 to \"tuple\" has incompatible type \"List[_T]\";\n                # expected \"Iterable[int]\"\n                tuple(shape),  # type: ignore[arg-type]\n                sort=False,\n                xnull=False,\n            )\n            result = self._constructor_sliced(duplicated(ids, keep), index=self.index)\n        return result.__finalize__(self, method=\"duplicated\")\n\n    # ----------------------------------------------------------------------\n    # Sorting\n    # error: Signature of \"sort_values\" incompatible with supertype \"NDFrame\"\n    @overload  # type: ignore[override]\n    def sort_values(\n        self,\n        by: IndexLabel,\n        *,\n        axis: Axis = ...,\n        ascending=...,\n        inplace: Literal[False] = ...,\n        kind: str = ...,\n        na_position: str = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def sort_values(\n        self,\n        by: IndexLabel,\n        *,\n        axis: Axis = ...,\n        ascending=...,\n        inplace: Literal[True],\n        kind: str = ...,\n        na_position: str = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> None:\n        ...\n\n    # TODO: Just move the sort_values doc here.\n    # error: Signature of \"sort_values\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"by\"])\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.sort_values.__doc__)\n    def sort_values(  # type: ignore[override]\n        self,\n        by: IndexLabel,\n        axis: Axis = 0,\n        ascending: bool | list[bool] | tuple[bool, ...] = True,\n        inplace: bool = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        ignore_index: bool = False,\n        key: ValueKeyFunc = None,\n    ) -> DataFrame | None:\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        axis = self._get_axis_number(axis)\n        ascending = validate_ascending(ascending)\n        if not isinstance(by, list):\n            by = [by]\n        # error: Argument 1 to \"len\" has incompatible type \"Union[bool, List[bool]]\";\n        # expected \"Sized\"\n        if is_sequence(ascending) and (\n            len(by) != len(ascending)  # type: ignore[arg-type]\n        ):\n            # error: Argument 1 to \"len\" has incompatible type \"Union[bool,\n            # List[bool]]\"; expected \"Sized\"\n            raise ValueError(\n                f\"Length of ascending ({len(ascending)})\"  # type: ignore[arg-type]\n                f\" != length of by ({len(by)})\"\n            )\n        if len(by) > 1:\n\n            keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n\n            # need to rewrap columns in Series to apply key function\n            if key is not None:\n                # error: List comprehension has incompatible type List[Series];\n                # expected List[ndarray]\n                keys = [\n                    Series(k, name=name)  # type: ignore[misc]\n                    for (k, name) in zip(keys, by)\n                ]\n\n            indexer = lexsort_indexer(\n                keys, orders=ascending, na_position=na_position, key=key\n            )\n        elif len(by):\n            # len(by) == 1\n\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis)\n\n            # need to rewrap column in Series to apply key function\n            if key is not None:\n                # error: Incompatible types in assignment (expression has type\n                # \"Series\", variable has type \"ndarray\")\n                k = Series(k, name=by)  # type: ignore[assignment]\n\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n\n            indexer = nargsort(\n                k, kind=kind, ascending=ascending, na_position=na_position, key=key\n            )\n        else:\n            return self.copy()\n\n        new_data = self._mgr.take(\n            indexer, axis=self._get_block_manager_axis(axis), verify=False\n        )\n\n        if ignore_index:\n            new_data.set_axis(\n                self._get_block_manager_axis(axis), default_index(len(indexer))\n            )\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_values\")\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[True],\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[False] = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: bool = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"sort_index\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\"])\n    def sort_index(  # type: ignore[override]\n        self,\n        axis: Axis = 0,\n        level: IndexLabel = None,\n        ascending: bool | Sequence[bool] = True,\n        inplace: bool = False,\n        kind: SortKind = \"quicksort\",\n        na_position: NaPosition = \"last\",\n        sort_remaining: bool = True,\n        ignore_index: bool = False,\n        key: IndexKeyFunc = None,\n    ) -> DataFrame | None:\n        \"\"\"\n        Sort object by labels (along an axis).\n\n        Returns a new DataFrame sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original DataFrame and returns None.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis along which to sort.  The value 0 identifies the rows,\n            and 1 identifies the columns.\n        level : int or level name or list of ints or list of level names\n            If not None, sort on values in specified index level(s).\n        ascending : bool or list-like of bools, default True\n            Sort ascending vs. descending. When the index is a MultiIndex the\n            sort direction can be controlled for each level individually.\n        inplace : bool, default False\n            Whether to modify the DataFrame rather than creating a new one.\n        kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information. `mergesort` and `stable` are the only stable algorithms. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, …, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n            inputs, the key is applied *per level*.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        DataFrame or None\n            The original DataFrame sorted by the labels or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.sort_index : Sort Series by the index.\n        DataFrame.sort_values : Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],\n        ...                   columns=['A'])\n        >>> df.sort_index()\n             A\n        1    4\n        29   2\n        100  1\n        150  5\n        234  3\n\n        By default, it sorts in ascending order, to sort in descending order,\n        use ``ascending=False``\n\n        >>> df.sort_index(ascending=False)\n             A\n        234  3\n        150  5\n        100  1\n        29   2\n        1    4\n\n        A key function can be specified which is applied to the index before\n        sorting. For a ``MultiIndex`` this is applied to each level separately.\n\n        >>> df = pd.DataFrame({\"a\": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])\n        >>> df.sort_index(key=lambda x: x.str.lower())\n           a\n        A  1\n        b  2\n        C  3\n        d  4\n        \"\"\"\n        return super().sort_index(\n            axis=axis,\n            level=level,\n            ascending=ascending,\n            inplace=inplace,\n            kind=kind,\n            na_position=na_position,\n            sort_remaining=sort_remaining,\n            ignore_index=ignore_index,\n            key=key,\n        )\n\n    def value_counts(\n        self,\n        subset: Sequence[Hashable] | None = None,\n        normalize: bool = False,\n        sort: bool = True,\n        ascending: bool = False,\n        dropna: bool = True,\n    ) -> Series:\n        \"\"\"\n        Return a Series containing counts of unique rows in the DataFrame.\n\n        .. versionadded:: 1.1.0\n\n        Parameters\n        ----------\n        subset : list-like, optional\n            Columns to use when counting unique combinations.\n        normalize : bool, default False\n            Return proportions rather than frequencies.\n        sort : bool, default True\n            Sort by frequencies.\n        ascending : bool, default False\n            Sort in ascending order.\n        dropna : bool, default True\n            Don’t include counts of rows that contain NA values.\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        Series\n\n        See Also\n        --------\n        Series.value_counts: Equivalent method on Series.\n\n        Notes\n        -----\n        The returned Series will have a MultiIndex with one level per input\n        column. By default, rows that contain any NA values are omitted from\n        the result. By default, the resulting Series will be in descending\n        order so that the first element is the most frequently-occurring row.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'num_legs': [2, 4, 4, 6],\n        ...                    'num_wings': [2, 0, 0, 0]},\n        ...                   index=['falcon', 'dog', 'cat', 'ant'])\n        >>> df\n                num_legs  num_wings\n        falcon         2          2\n        dog            4          0\n        cat            4          0\n        ant            6          0\n\n        >>> df.value_counts()\n        num_legs  num_wings\n        4         0            2\n        2         2            1\n        6         0            1\n        dtype: int64\n\n        >>> df.value_counts(sort=False)\n        num_legs  num_wings\n        2         2            1\n        4         0            2\n        6         0            1\n        dtype: int64\n\n        >>> df.value_counts(ascending=True)\n        num_legs  num_wings\n        2         2            1\n        6         0            1\n        4         0            2\n        dtype: int64\n\n        >>> df.value_counts(normalize=True)\n        num_legs  num_wings\n        4         0            0.50\n        2         2            0.25\n        6         0            0.25\n        dtype: float64\n\n        With `dropna` set to `False` we can also count rows with NA values.\n\n        >>> df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],\n        ...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})\n        >>> df\n          first_name middle_name\n        0       John       Smith\n        1       Anne        <NA>\n        2       John        <NA>\n        3       Beth      Louise\n\n        >>> df.value_counts()\n        first_name  middle_name\n        Beth        Louise         1\n        John        Smith          1\n        dtype: int64\n\n        >>> df.value_counts(dropna=False)\n        first_name  middle_name\n        Anne        NaN            1\n        Beth        Louise         1\n        John        Smith          1\n                    NaN            1\n        dtype: int64\n        \"\"\"\n        if subset is None:\n            subset = self.columns.tolist()\n\n        counts = self.groupby(subset, dropna=dropna).grouper.size()\n\n        if sort:\n            counts = counts.sort_values(ascending=ascending)\n        if normalize:\n            counts /= counts.sum()\n\n        # Force MultiIndex for single column\n        if len(subset) == 1:\n            counts.index = MultiIndex.from_arrays(\n                [counts.index], names=[counts.index.name]\n            )\n\n        return counts\n\n    def nlargest(self, n: int, columns: IndexLabel, keep: str = \"first\") -> DataFrame:\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : prioritize the first occurrence(s)\n            - ``last`` : prioritize the last occurrence(s)\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values.\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n        ...                                   434000, 434000, 337000, 11300,\n        ...                                   11300, 11300],\n        ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n        ...                            17036, 182, 38, 311],\n        ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n        ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n        ...                   index=[\"Italy\", \"France\", \"Malta\",\n        ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n        ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n        >>> df\n                  population      GDP alpha-2\n        Italy       59000000  1937894      IT\n        France      65000000  2583560      FR\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n        Iceland       337000    17036      IS\n        Nauru          11300      182      NR\n        Tuvalu         11300       38      TV\n        Anguilla       11300      311      AI\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"population\".\n\n        >>> df.nlargest(3, 'population')\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Malta       434000    12011      MT\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'population', keep='last')\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Brunei      434000    12128      BN\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nlargest(3, 'population', keep='all')\n                  population      GDP alpha-2\n        France      65000000  2583560      FR\n        Italy       59000000  1937894      IT\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n\n        To order by the largest values in column \"population\" and then \"GDP\",\n        we can specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['population', 'GDP'])\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Brunei      434000    12128      BN\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()\n\n    def nsmallest(self, n: int, columns: IndexLabel, keep: str = \"first\") -> DataFrame:\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in ascending order.\n\n        Return the first `n` rows with the smallest values in `columns`, in\n        ascending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=True).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve.\n        columns : list or str\n            Column name or names to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n            descending order.\n        DataFrame.sort_values : Sort DataFrame by the values.\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n        ...                                   434000, 434000, 337000, 337000,\n        ...                                   11300, 11300],\n        ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n        ...                            17036, 182, 38, 311],\n        ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n        ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n        ...                   index=[\"Italy\", \"France\", \"Malta\",\n        ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n        ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n        >>> df\n                  population      GDP alpha-2\n        Italy       59000000  1937894      IT\n        France      65000000  2583560      FR\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n        Iceland       337000    17036      IS\n        Nauru         337000      182      NR\n        Tuvalu         11300       38      TV\n        Anguilla       11300      311      AI\n\n        In the following example, we will use ``nsmallest`` to select the\n        three rows having the smallest values in column \"population\".\n\n        >>> df.nsmallest(3, 'population')\n                  population    GDP alpha-2\n        Tuvalu         11300     38      TV\n        Anguilla       11300    311      AI\n        Iceland       337000  17036      IS\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nsmallest(3, 'population', keep='last')\n                  population  GDP alpha-2\n        Anguilla       11300  311      AI\n        Tuvalu         11300   38      TV\n        Nauru         337000  182      NR\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nsmallest(3, 'population', keep='all')\n                  population    GDP alpha-2\n        Tuvalu         11300     38      TV\n        Anguilla       11300    311      AI\n        Iceland       337000  17036      IS\n        Nauru         337000    182      NR\n\n        To order by the smallest values in column \"population\" and then \"GDP\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nsmallest(3, ['population', 'GDP'])\n                  population  GDP alpha-2\n        Tuvalu         11300   38      TV\n        Anguilla       11300  311      AI\n        Nauru         337000  182      NR\n        \"\"\"\n        return algorithms.SelectNFrame(\n            self, n=n, keep=keep, columns=columns\n        ).nsmallest()\n\n    @doc(\n        Series.swaplevel,\n        klass=_shared_doc_kwargs[\"klass\"],\n        extra_params=dedent(\n            \"\"\"axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to swap levels on. 0 or 'index' for row-wise, 1 or\n            'columns' for column-wise.\"\"\"\n        ),\n        examples=dedent(\n            \"\"\"\\\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\"Grade\": [\"A\", \"B\", \"A\", \"C\"]},\n        ...     index=[\n        ...         [\"Final exam\", \"Final exam\", \"Coursework\", \"Coursework\"],\n        ...         [\"History\", \"Geography\", \"History\", \"Geography\"],\n        ...         [\"January\", \"February\", \"March\", \"April\"],\n        ...     ],\n        ... )\n        >>> df\n                                            Grade\n        Final exam  History     January      A\n                    Geography   February     B\n        Coursework  History     March        A\n                    Geography   April        C\n\n        In the following example, we will swap the levels of the indices.\n        Here, we will swap the levels column-wise, but levels can be swapped row-wise\n        in a similar manner. Note that column-wise is the default behaviour.\n        By not supplying any arguments for i and j, we swap the last and second to\n        last indices.\n\n        >>> df.swaplevel()\n                                            Grade\n        Final exam  January     History         A\n                    February    Geography       B\n        Coursework  March       History         A\n                    April       Geography       C\n\n        By supplying one argument, we can choose which index to swap the last\n        index with. We can for example swap the first index with the last one as\n        follows.\n\n        >>> df.swaplevel(0)\n                                            Grade\n        January     History     Final exam      A\n        February    Geography   Final exam      B\n        March       History     Coursework      A\n        April       Geography   Coursework      C\n\n        We can also define explicitly which indices we want to swap by supplying values\n        for both i and j. Here, we for example swap the first and second indices.\n\n        >>> df.swaplevel(0, 1)\n                                            Grade\n        History     Final exam  January         A\n        Geography   Final exam  February        B\n        History     Coursework  March           A\n        Geography   Coursework  April           C\"\"\"\n        ),\n    )\n    def swaplevel(self, i: Axis = -2, j: Axis = -1, axis: Axis = 0) -> DataFrame:\n        result = self.copy()\n\n        axis = self._get_axis_number(axis)\n\n        if not isinstance(result._get_axis(axis), MultiIndex):  # pragma: no cover\n            raise TypeError(\"Can only swap levels on a hierarchical axis.\")\n\n        if axis == 0:\n            assert isinstance(result.index, MultiIndex)\n            result.index = result.index.swaplevel(i, j)\n        else:\n            assert isinstance(result.columns, MultiIndex)\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order: Sequence[Axis], axis: Axis = 0) -> DataFrame:\n        \"\"\"\n        Rearrange index levels using input order. May not drop or duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Where to reorder levels.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> data = {\n        ...     \"class\": [\"Mammals\", \"Mammals\", \"Reptiles\"],\n        ...     \"diet\": [\"Omnivore\", \"Carnivore\", \"Carnivore\"],\n        ...     \"species\": [\"Humans\", \"Dogs\", \"Snakes\"],\n        ... }\n        >>> df = pd.DataFrame(data, columns=[\"class\", \"diet\", \"species\"])\n        >>> df = df.set_index([\"class\", \"diet\"])\n        >>> df\n                                          species\n        class      diet\n        Mammals    Omnivore                Humans\n                   Carnivore                 Dogs\n        Reptiles   Carnivore               Snakes\n\n        Let's reorder the levels of the index:\n\n        >>> df.reorder_levels([\"diet\", \"class\"])\n                                          species\n        diet      class\n        Omnivore  Mammals                  Humans\n        Carnivore Mammals                    Dogs\n                  Reptiles                 Snakes\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):  # pragma: no cover\n            raise TypeError(\"Can only reorder levels on a hierarchical axis.\")\n\n        result = self.copy()\n\n        if axis == 0:\n            assert isinstance(result.index, MultiIndex)\n            result.index = result.index.reorder_levels(order)\n        else:\n            assert isinstance(result.columns, MultiIndex)\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    # ----------------------------------------------------------------------\n    # Arithmetic Methods\n\n    def _cmp_method(self, other, op):\n        axis = 1  # only relevant for Series other case\n\n        self, other = ops.align_method_FRAME(self, other, axis, flex=False, level=None)\n\n        # See GH#4537 for discussion of scalar op behavior\n        new_data = self._dispatch_frame_op(other, op, axis=axis)\n        return self._construct_result(new_data)\n\n    def _arith_method(self, other, op):\n        if ops.should_reindex_frame_op(self, other, op, 1, 1, None, None):\n            return ops.frame_arith_method_with_reindex(self, other, op)\n\n        axis = 1  # only relevant for Series other case\n        other = ops.maybe_prepare_scalar_for_op(other, (self.shape[axis],))\n\n        self, other = ops.align_method_FRAME(self, other, axis, flex=True, level=None)\n\n        new_data = self._dispatch_frame_op(other, op, axis=axis)\n        return self._construct_result(new_data)\n\n    _logical_method = _arith_method\n\n    def _dispatch_frame_op(self, right, func: Callable, axis: int | None = None):\n        \"\"\"\n        Evaluate the frame operation func(left, right) by evaluating\n        column-by-column, dispatching to the Series implementation.\n\n        Parameters\n        ----------\n        right : scalar, Series, or DataFrame\n        func : arithmetic or comparison operator\n        axis : {None, 0, 1}\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        # Get the appropriate array-op to apply to each column/block's values.\n        array_op = ops.get_array_op(func)\n\n        right = lib.item_from_zerodim(right)\n        if not is_list_like(right):\n            # i.e. scalar, faster than checking np.ndim(right) == 0\n            with np.errstate(all=\"ignore\"):\n                bm = self._mgr.apply(array_op, right=right)\n            return self._constructor(bm)\n\n        elif isinstance(right, DataFrame):\n            assert self.index.equals(right.index)\n            assert self.columns.equals(right.columns)\n            # TODO: The previous assertion `assert right._indexed_same(self)`\n            #  fails in cases with empty columns reached via\n            #  _frame_arith_method_with_reindex\n\n            # TODO operate_blockwise expects a manager of the same type\n            with np.errstate(all=\"ignore\"):\n                bm = self._mgr.operate_blockwise(\n                    # error: Argument 1 to \"operate_blockwise\" of \"ArrayManager\" has\n                    # incompatible type \"Union[ArrayManager, BlockManager]\"; expected\n                    # \"ArrayManager\"\n                    # error: Argument 1 to \"operate_blockwise\" of \"BlockManager\" has\n                    # incompatible type \"Union[ArrayManager, BlockManager]\"; expected\n                    # \"BlockManager\"\n                    right._mgr,  # type: ignore[arg-type]\n                    array_op,\n                )\n            return self._constructor(bm)\n\n        elif isinstance(right, Series) and axis == 1:\n            # axis=1 means we want to operate row-by-row\n            assert right.index.equals(self.columns)\n\n            right = right._values\n            # maybe_align_as_frame ensures we do not have an ndarray here\n            assert not isinstance(right, np.ndarray)\n\n            with np.errstate(all=\"ignore\"):\n                arrays = [\n                    array_op(_left, _right)\n                    for _left, _right in zip(self._iter_column_arrays(), right)\n                ]\n\n        elif isinstance(right, Series):\n            assert right.index.equals(self.index)  # Handle other cases later\n            right = right._values\n\n            with np.errstate(all=\"ignore\"):\n                arrays = [array_op(left, right) for left in self._iter_column_arrays()]\n\n        else:\n            # Remaining cases have less-obvious dispatch rules\n            raise NotImplementedError(right)\n\n        return type(self)._from_arrays(\n            arrays, self.columns, self.index, verify_integrity=False\n        )\n\n    def _combine_frame(self, other: DataFrame, func, fill_value=None):\n        # at this point we have `self._indexed_same(other)`\n\n        if fill_value is None:\n            # since _arith_op may be called in a loop, avoid function call\n            #  overhead if possible by doing this check once\n            _arith_op = func\n\n        else:\n\n            def _arith_op(left, right):\n                # for the mixed_type case where we iterate over columns,\n                # _arith_op(left, right) is equivalent to\n                # left._binop(right, func, fill_value=fill_value)\n                left, right = ops.fill_binop(left, right, fill_value)\n                return func(left, right)\n\n        new_data = self._dispatch_frame_op(other, _arith_op)\n        return new_data\n\n    def _construct_result(self, result) -> DataFrame:\n        \"\"\"\n        Wrap the result of an arithmetic, comparison, or logical operation.\n\n        Parameters\n        ----------\n        result : DataFrame\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        out = self._constructor(result, copy=False)\n        # Pin columns instead of passing to constructor for compat with\n        #  non-unique columns case\n        out.columns = self.columns\n        out.index = self.index\n        return out\n\n    def __divmod__(self, other) -> tuple[DataFrame, DataFrame]:\n        # Naive implementation, room for optimization\n        div = self // other\n        mod = self - div * other\n        return div, mod\n\n    def __rdivmod__(self, other) -> tuple[DataFrame, DataFrame]:\n        # Naive implementation, room for optimization\n        div = other // self\n        mod = other - div * self\n        return div, mod\n\n    # ----------------------------------------------------------------------\n    # Combination-Related\n\n    @doc(\n        _shared_docs[\"compare\"],\n        \"\"\"\nReturns\n-------\nDataFrame\n    DataFrame that shows the differences stacked side by side.\n\n    The resulting index will be a MultiIndex with 'self' and 'other'\n    stacked alternately at the inner level.\n\nRaises\n------\nValueError\n    When the two DataFrames don't have identical labels or shape.\n\nSee Also\n--------\nSeries.compare : Compare with another Series and show differences.\nDataFrame.equals : Test whether two objects contain the same elements.\n\nNotes\n-----\nMatching NaNs will not appear as a difference.\n\nCan only compare identically-labeled\n(i.e. same shape, identical row and column labels) DataFrames\n\nExamples\n--------\n>>> df = pd.DataFrame(\n...     {{\n...         \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n...         \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n...         \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0]\n...     }},\n...     columns=[\"col1\", \"col2\", \"col3\"],\n... )\n>>> df\n  col1  col2  col3\n0    a   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   3.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\n>>> df2 = df.copy()\n>>> df2.loc[0, 'col1'] = 'c'\n>>> df2.loc[2, 'col3'] = 4.0\n>>> df2\n  col1  col2  col3\n0    c   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   4.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nAlign the differences on columns\n\n>>> df.compare(df2)\n  col1       col3\n  self other self other\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0\n\nAssign result_names\n\n>>> df.compare(df2, result_names=(\"left\", \"right\"))\n  col1       col3\n  left right left right\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0\n\nStack the differences on rows\n\n>>> df.compare(df2, align_axis=0)\n        col1  col3\n0 self     a   NaN\n  other    c   NaN\n2 self   NaN   3.0\n  other  NaN   4.0\n\nKeep the equal values\n\n>>> df.compare(df2, keep_equal=True)\n  col1       col3\n  self other self other\n0    a     c  1.0   1.0\n2    b     b  3.0   4.0\n\nKeep all original rows and columns\n\n>>> df.compare(df2, keep_shape=True)\n  col1       col2       col3\n  self other self other self other\n0    a     c  NaN   NaN  NaN   NaN\n1  NaN   NaN  NaN   NaN  NaN   NaN\n2  NaN   NaN  NaN   NaN  3.0   4.0\n3  NaN   NaN  NaN   NaN  NaN   NaN\n4  NaN   NaN  NaN   NaN  NaN   NaN\n\nKeep all original rows and columns and also all original values\n\n>>> df.compare(df2, keep_shape=True, keep_equal=True)\n  col1       col2       col3\n  self other self other self other\n0    a     c  1.0   1.0  1.0   1.0\n1    a     a  2.0   2.0  2.0   2.0\n2    b     b  3.0   3.0  3.0   4.0\n3    b     b  NaN   NaN  4.0   4.0\n4    a     a  5.0   5.0  5.0   5.0\n\"\"\",\n        klass=_shared_doc_kwargs[\"klass\"],\n    )\n    def compare(\n        self,\n        other: DataFrame,\n        align_axis: Axis = 1,\n        keep_shape: bool = False,\n        keep_equal: bool = False,\n        result_names: Suffixes = (\"self\", \"other\"),\n    ) -> DataFrame:\n        return super().compare(\n            other=other,\n            align_axis=align_axis,\n            keep_shape=keep_shape,\n            keep_equal=keep_equal,\n            result_names=result_names,\n        )\n\n    def combine(\n        self,\n        other: DataFrame,\n        func: Callable[[Series, Series], Series | Hashable],\n        fill_value=None,\n        overwrite: bool = True,\n    ) -> DataFrame:\n        \"\"\"\n        Perform column-wise combine with another DataFrame.\n\n        Combines a DataFrame with `other` DataFrame using `func`\n        to element-wise combine columns. The row and column indexes of the\n        resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            The DataFrame to merge column-wise.\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar. Used to merge the two dataframes column by columns.\n        fill_value : scalar value, default None\n            The value to fill NaNs with prior to passing any column to the\n            merge func.\n        overwrite : bool, default True\n            If True, columns in `self` that do not exist in `other` will be\n            overwritten with NaNs.\n\n        Returns\n        -------\n        DataFrame\n            Combination of the provided DataFrames.\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method.\n\n        Examples\n        --------\n        Combine using a simple function that chooses the smaller column.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n        >>> df1.combine(df2, take_smaller)\n           A  B\n        0  0  3\n        1  0  3\n\n        Example using a true element-wise combine function.\n\n        >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, np.minimum)\n           A  B\n        0  1  2\n        1  0  3\n\n        Using `fill_value` fills Nones prior to passing the column to the\n        merge function.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0 -5.0\n        1  0  4.0\n\n        However, if the same element in both dataframes is None, that None\n        is preserved\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n            A    B\n        0  0 -5.0\n        1  0  3.0\n\n        Example that demonstrates the use of `overwrite` and behavior when\n        the axis differ between the dataframes.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n        >>> df1.combine(df2, take_smaller)\n             A    B     C\n        0  NaN  NaN   NaN\n        1  NaN  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        >>> df1.combine(df2, take_smaller, overwrite=False)\n             A    B     C\n        0  0.0  NaN   NaN\n        1  0.0  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        Demonstrating the preference of the passed in dataframe.\n\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n        >>> df2.combine(df1, take_smaller)\n           A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 NaN\n        2  NaN  3.0 NaN\n\n        >>> df2.combine(df1, take_smaller, overwrite=False)\n             A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 1.0\n        2  NaN  3.0 1.0\n        \"\"\"\n        other_idxlen = len(other.index)  # save for compare\n\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n\n        # sorts if possible\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n\n            # don't overwrite columns unnecessarily\n            # DO propagate if this column is not in the intersection\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n\n            if col not in self.columns:\n                # If self DataFrame does not have col in other DataFrame,\n                # try to promote series, which is all NaN, as other_dtype.\n                new_dtype = other_dtype\n                try:\n                    series = series.astype(new_dtype, copy=False)\n                except ValueError:\n                    # e.g. new_dtype is integer types\n                    pass\n            else:\n                # if we have different dtypes, possibly promote\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                series = series.astype(new_dtype, copy=False)\n                otherSeries = otherSeries.astype(new_dtype, copy=False)\n\n            arr = func(series, otherSeries)\n            if isinstance(new_dtype, np.dtype):\n                # if new_dtype is an EA Dtype, then `func` is expected to return\n                # the correct dtype without any additional casting\n                # error: No overload variant of \"maybe_downcast_to_dtype\" matches\n                # argument types \"Union[Series, Hashable]\", \"dtype[Any]\"\n                arr = maybe_downcast_to_dtype(  # type: ignore[call-overload]\n                    arr, new_dtype\n                )\n\n            result[col] = arr\n\n        # convert_objects just in case\n        return self._constructor(result, index=new_index, columns=new_columns)\n\n    def combine_first(self, other: DataFrame) -> DataFrame:\n        \"\"\"\n        Update null elements with value in the same location in `other`.\n\n        Combine two DataFrame objects by filling null values in one DataFrame\n        with non-null values from other DataFrame. The row and column indexes\n        of the resulting DataFrame will be the union of the two. The resulting\n        dataframe contains the 'first' dataframe values and overrides the\n        second one values where both first.loc[index, col] and\n        second.loc[index, col] are not missing values, upon calling\n        first.combine_first(second).\n\n        Parameters\n        ----------\n        other : DataFrame\n            Provided DataFrame to use to fill null values.\n\n        Returns\n        -------\n        DataFrame\n            The result of combining the provided DataFrame with the other object.\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine_first(df2)\n             A    B\n        0  1.0  3.0\n        1  0.0  4.0\n\n        Null values still persist if the location of that null value\n        does not exist in `other`\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n        >>> df1.combine_first(df2)\n             A    B    C\n        0  NaN  4.0  NaN\n        1  0.0  3.0  1.0\n        2  NaN  3.0  1.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y):\n            mask = extract_array(isna(x))\n\n            x_values = extract_array(x, extract_numpy=True)\n            y_values = extract_array(y, extract_numpy=True)\n\n            # If the column y in other DataFrame is not in first DataFrame,\n            # just return y_values.\n            if y.name not in self.columns:\n                return y_values\n\n            return expressions.where(mask, y_values, x_values)\n\n        combined = self.combine(other, combiner, overwrite=False)\n\n        dtypes = {\n            col: find_common_type([self.dtypes[col], other.dtypes[col]])\n            for col in self.columns.intersection(other.columns)\n            if not is_dtype_equal(combined.dtypes[col], self.dtypes[col])\n        }\n\n        if dtypes:\n            combined = combined.astype(dtypes)\n\n        return combined\n\n    def update(\n        self,\n        other,\n        join: str = \"left\",\n        overwrite: bool = True,\n        filter_func=None,\n        errors: str = \"ignore\",\n    ) -> None:\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> bool 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        errors : {'raise', 'ignore'}, default 'ignore'\n            If 'raise', will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n        Returns\n        -------\n        None : method directly changes calling object\n\n        Raises\n        ------\n        ValueError\n            * When `errors='raise'` and there's overlapping non-NA data.\n            * When `errors` is not either `'ignore'` or `'raise'`\n        NotImplementedError\n            * If `join != 'left'`\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-column(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, its name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        # TODO: Support other joins\n        if join != \"left\":  # pragma: no cover\n            raise NotImplementedError(\"Only left join is supported\")\n        if errors not in [\"ignore\", \"raise\"]:\n            raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n\n        other = other.reindex_like(self)\n\n        for col in self.columns:\n            this = self[col]._values\n            that = other[col]._values\n            if filter_func is not None:\n                with np.errstate(all=\"ignore\"):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if errors == \"raise\":\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError(\"Data overlaps.\")\n\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n\n            # don't overwrite columns unnecessarily\n            if mask.all():\n                continue\n\n            self.loc[:, col] = expressions.where(mask, this, that)\n\n    # ----------------------------------------------------------------------\n    # Data reshaping\n    @Appender(\n        \"\"\"\nExamples\n--------\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n**Hierarchical Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=\"Type\").mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0\n\nWe can also choose to include NA in group keys or not by setting\n`dropna` parameter, the default setting is `True`.\n\n>>> l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n\n>>> df.groupby(by=[\"b\"]).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5\n\n>>> df.groupby(by=[\"b\"], dropna=False).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5\nNaN 1   4\n\n>>> l = [[\"a\", 12, 12], [None, 12.3, 33.], [\"b\", 12.3, 123], [\"a\", 1, 1]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])\n\n>>> df.groupby(by=\"a\").sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0\n\n>>> df.groupby(by=\"a\", dropna=False).sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0\nNaN 12.3   33.0\n\nWhen using ``.apply()``, use ``group_keys`` to include or exclude the group keys.\nThe ``group_keys`` argument defaults to ``True`` (include).\n\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df.groupby(\"Animal\", group_keys=True).apply(lambda x: x)\n          Animal  Max Speed\nAnimal\nFalcon 0  Falcon      380.0\n       1  Falcon      370.0\nParrot 2  Parrot       24.0\n       3  Parrot       26.0\n\n>>> df.groupby(\"Animal\", group_keys=False).apply(lambda x: x)\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n\"\"\"\n    )\n    @Appender(_shared_docs[\"groupby\"] % _shared_doc_kwargs)\n    def groupby(\n        self,\n        by=None,\n        axis: Axis = 0,\n        level: IndexLabel | None = None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool | lib.NoDefault = no_default,\n        squeeze: bool | lib.NoDefault = no_default,\n        observed: bool = False,\n        dropna: bool = True,\n    ) -> DataFrameGroupBy:\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        if squeeze is not no_default:\n            warnings.warn(\n                (\n                    \"The `squeeze` parameter is deprecated and \"\n                    \"will be removed in a future version.\"\n                ),\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n        else:\n            squeeze = False\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return DataFrameGroupBy(\n            obj=self,\n            keys=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n            dropna=dropna,\n        )\n\n    _shared_docs[\n        \"pivot\"\n    ] = \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------%s\n        index : str or object or a list of str, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n\n            .. versionchanged:: 1.1.0\n               Also accept list of index names.\n\n        columns : str or object or a list of str\n            Column to use to make new frame's columns.\n\n            .. versionchanged:: 1.1.0\n               Also accept list of columns names.\n\n        values : str, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : Generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : Pivot based on the index values instead of a\n            column.\n        wide_to_long : Wide panel to long format. Less flexible but more\n            user-friendly than melt.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Reference :ref:`the user guide <reshaping.pivot>` for more examples.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        You could also assign a list of column names or a list of index names.\n\n        >>> df = pd.DataFrame({\n        ...        \"lev1\": [1, 1, 1, 2, 2, 2],\n        ...        \"lev2\": [1, 1, 2, 1, 1, 2],\n        ...        \"lev3\": [1, 2, 1, 2, 1, 2],\n        ...        \"lev4\": [1, 2, 3, 4, 5, 6],\n        ...        \"values\": [0, 1, 2, 3, 4, 5]})\n        >>> df\n            lev1 lev2 lev3 lev4 values\n        0   1    1    1    1    0\n        1   1    1    2    2    1\n        2   1    2    1    3    2\n        3   2    1    2    4    3\n        4   2    1    1    5    4\n        5   2    2    2    6    5\n\n        >>> df.pivot(index=\"lev1\", columns=[\"lev2\", \"lev3\"],values=\"values\")\n        lev2    1         2\n        lev3    1    2    1    2\n        lev1\n        1     0.0  1.0  2.0  NaN\n        2     4.0  3.0  NaN  5.0\n\n        >>> df.pivot(index=[\"lev1\", \"lev2\"], columns=[\"lev3\"],values=\"values\")\n              lev3    1    2\n        lev1  lev2\n           1     1  0.0  1.0\n                 2  2.0  NaN\n           2     1  4.0  3.0\n                 2  NaN  5.0\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n\n    @Substitution(\"\")\n    @Appender(_shared_docs[\"pivot\"])\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\"])\n    def pivot(\n        self, index=lib.NoDefault, columns=lib.NoDefault, values=lib.NoDefault\n    ) -> DataFrame:\n        from pandas.core.reshape.pivot import pivot\n\n        return pivot(self, index=index, columns=columns, values=values)\n\n    _shared_docs[\n        \"pivot_table\"\n    ] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame.\n\n        The levels in the pivot table will be stored in MultiIndex objects\n        (hierarchical indexes) on the index and columns of the result DataFrame.\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions.\n        fill_value : scalar, default None\n            Value to replace missing values with (in the resulting pivot table,\n            after aggregation).\n        margins : bool, default False\n            Add all row / columns (e.g. for subtotal / grand totals).\n        dropna : bool, default True\n            Do not include columns whose entries are all NaN. If True,\n            rows with a NaN value in any column will be omitted before\n            computing margins.\n        margins_name : str, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n        observed : bool, default False\n            This only applies if any of the groupers are Categoricals.\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionchanged:: 0.25.0\n\n        sort : bool, default True\n            Specifies if the result should be sorted.\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        DataFrame\n            An Excel style pivot table.\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot without aggregation that can handle\n            non-numeric data.\n        DataFrame.melt: Unpivot a DataFrame from wide to long format,\n            optionally leaving identifiers set.\n        wide_to_long : Wide panel to long format. Less flexible but more\n            user-friendly than melt.\n\n        Notes\n        -----\n        Reference :ref:`the user guide <reshaping.pivot>` for more examples.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n        ...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n        >>> df\n             A    B      C  D  E\n        0  foo  one  small  1  2\n        1  foo  one  large  2  4\n        2  foo  one  large  2  5\n        3  foo  two  small  3  5\n        4  foo  two  small  3  6\n        5  bar  one  large  4  6\n        6  bar  one  small  5  8\n        7  bar  two  small  6  9\n        8  bar  two  large  7  9\n\n        This first example aggregates values by taking the sum.\n\n        >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        We can also fill missing values using the `fill_value` parameter.\n\n        >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum, fill_value=0)\n        >>> table\n        C        large  small\n        A   B\n        bar one      4      5\n            two      7      6\n        foo one      4      1\n            two      0      6\n\n        The next example aggregates by taking the mean across multiple columns.\n\n        >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': np.mean})\n        >>> table\n                        D         E\n        A   C\n        bar large  5.500000  7.500000\n            small  5.500000  8.500000\n        foo large  2.000000  4.500000\n            small  2.333333  4.333333\n\n        We can also calculate multiple types of aggregations for any given\n        value column.\n\n        >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max      mean  min\n        A   C\n        bar large  5.500000   9  7.500000    6\n            small  5.500000   9  8.500000    8\n        foo large  2.000000   5  4.500000    4\n            small  2.333333   6  4.333333    2\n        \"\"\"\n\n    @Substitution(\"\")\n    @Appender(_shared_docs[\"pivot_table\"])\n    def pivot_table(\n        self,\n        values=None,\n        index=None,\n        columns=None,\n        aggfunc=\"mean\",\n        fill_value=None,\n        margins=False,\n        dropna=True,\n        margins_name=\"All\",\n        observed=False,\n        sort=True,\n    ) -> DataFrame:\n        from pandas.core.reshape.pivot import pivot_table\n\n        return pivot_table(\n            self,\n            values=values,\n            index=index,\n            columns=columns,\n            aggfunc=aggfunc,\n            fill_value=fill_value,\n            margins=margins,\n            dropna=dropna,\n            margins_name=margins_name,\n            observed=observed,\n            sort=sort,\n        )\n\n    def stack(self, level: Level = -1, dropna: bool = True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being reorganized from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of each other (in the index of the\n        dataframe).\n\n        Reference :ref:`the user guide <reshaping.stacking>` for more examples.\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import (\n            stack,\n            stack_multiple,\n        )\n\n        if isinstance(level, (tuple, list)):\n            result = stack_multiple(self, level, dropna=dropna)\n        else:\n            result = stack(self, level, dropna=dropna)\n\n        return result.__finalize__(self, method=\"stack\")\n\n    def explode(\n        self,\n        column: IndexLabel,\n        ignore_index: bool = False,\n    ) -> DataFrame:\n        \"\"\"\n        Transform each element of a list-like to a row, replicating index values.\n\n        .. versionadded:: 0.25.0\n\n        Parameters\n        ----------\n        column : IndexLabel\n            Column(s) to explode.\n            For multiple columns, specify a non-empty list with each element\n            be str or tuple, and all specified columns their list-like data\n            on same row of the frame must have matching length.\n\n            .. versionadded:: 1.3.0\n                Multi-column explode\n\n        ignore_index : bool, default False\n            If True, the resulting index will be labeled 0, 1, …, n - 1.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        DataFrame\n            Exploded lists to rows of the subset columns;\n            index will be duplicated for these rows.\n\n        Raises\n        ------\n        ValueError :\n            * If columns of the frame are not unique.\n            * If specified columns to explode is empty list.\n            * If specified columns to explode have not matching count of\n              elements rowwise in the frame.\n\n        See Also\n        --------\n        DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n            index labels.\n        DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n        Series.explode : Explode a DataFrame from list-like columns to long format.\n\n        Notes\n        -----\n        This routine will explode list-likes including lists, tuples, sets,\n        Series, and np.ndarray. The result dtype of the subset rows will\n        be object. Scalars will be returned unchanged, and empty list-likes will\n        result in a np.nan for that row. In addition, the ordering of rows in the\n        output will be non-deterministic when exploding sets.\n\n        Reference :ref:`the user guide <reshaping.explode>` for more examples.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],\n        ...                    'B': 1,\n        ...                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})\n        >>> df\n                   A  B          C\n        0  [0, 1, 2]  1  [a, b, c]\n        1        foo  1        NaN\n        2         []  1         []\n        3     [3, 4]  1     [d, e]\n\n        Single-column explode.\n\n        >>> df.explode('A')\n             A  B          C\n        0    0  1  [a, b, c]\n        0    1  1  [a, b, c]\n        0    2  1  [a, b, c]\n        1  foo  1        NaN\n        2  NaN  1         []\n        3    3  1     [d, e]\n        3    4  1     [d, e]\n\n        Multi-column explode.\n\n        >>> df.explode(list('AC'))\n             A  B    C\n        0    0  1    a\n        0    1  1    b\n        0    2  1    c\n        1  foo  1  NaN\n        2  NaN  1  NaN\n        3    3  1    d\n        3    4  1    e\n        \"\"\"\n        if not self.columns.is_unique:\n            raise ValueError(\"columns must be unique\")\n\n        columns: list[Hashable]\n        if is_scalar(column) or isinstance(column, tuple):\n            columns = [column]\n        elif isinstance(column, list) and all(\n            is_scalar(c) or isinstance(c, tuple) for c in column\n        ):\n            if not column:\n                raise ValueError(\"column must be nonempty\")\n            if len(column) > len(set(column)):\n                raise ValueError(\"column must be unique\")\n            columns = column\n        else:\n            raise ValueError(\"column must be a scalar, tuple, or list thereof\")\n\n        df = self.reset_index(drop=True)\n        if len(columns) == 1:\n            result = df[columns[0]].explode()\n        else:\n            mylen = lambda x: len(x) if is_list_like(x) else -1\n            counts0 = self[columns[0]].apply(mylen)\n            for c in columns[1:]:\n                if not all(counts0 == self[c].apply(mylen)):\n                    raise ValueError(\"columns must have matching element counts\")\n            result = DataFrame({c: df[c].explode() for c in columns})\n        result = df.drop(columns, axis=1).join(result)\n        if ignore_index:\n            result.index = default_index(len(result))\n        else:\n            result.index = self.index.take(result.index)\n        result = result.reindex(columns=self.columns, copy=False)\n\n        return result.__finalize__(self, method=\"explode\")\n\n    def unstack(self, level: Level = -1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels.\n\n        Returns a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels.\n\n        If the index is not a MultiIndex, the output will be a Series\n        (the analogue of stack when the columns are not a MultiIndex).\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name.\n        fill_value : int, str or dict\n            Replace NaN with this value if the unstack produces missing values.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Notes\n        -----\n        Reference :ref:`the user guide <reshaping.stacking>` for more examples.\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n\n        result = unstack(self, level, fill_value)\n\n        return result.__finalize__(self, method=\"unstack\")\n\n    @Appender(_shared_docs[\"melt\"] % {\"caller\": \"df.melt(\", \"other\": \"melt\"})\n    def melt(\n        self,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level: Level = None,\n        ignore_index: bool = True,\n    ) -> DataFrame:\n\n        return melt(\n            self,\n            id_vars=id_vars,\n            value_vars=value_vars,\n            var_name=var_name,\n            value_name=value_name,\n            col_level=col_level,\n            ignore_index=ignore_index,\n        ).__finalize__(self, method=\"melt\")\n\n    # ----------------------------------------------------------------------\n    # Time series-related\n\n    @doc(\n        Series.diff,\n        klass=\"DataFrame\",\n        extra_params=\"axis : {0 or 'index', 1 or 'columns'}, default 0\\n    \"\n        \"Take difference over rows (0) or columns (1).\\n\",\n        other_klass=\"Series\",\n        examples=dedent(\n            \"\"\"\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a  b   c\n        0 NaN  0   0\n        1 NaN -1   3\n        2 NaN -1   7\n        3 NaN -1  13\n        4 NaN  0  20\n        5 NaN  2  28\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n\n        Overflow in input dtype\n\n        >>> df = pd.DataFrame({'a': [1, 0]}, dtype=np.uint8)\n        >>> df.diff()\n               a\n        0    NaN\n        1  255.0\"\"\"\n        ),\n    )\n    def diff(self, periods: int = 1, axis: Axis = 0) -> DataFrame:\n        if not lib.is_integer(periods):\n            if not (\n                is_float(periods)\n                # error: \"int\" has no attribute \"is_integer\"\n                and periods.is_integer()  # type: ignore[attr-defined]\n            ):\n                raise ValueError(\"periods must be an integer\")\n            periods = int(periods)\n\n        axis = self._get_axis_number(axis)\n        if axis == 1:\n            if periods != 0:\n                # in the periods == 0 case, this is equivalent diff of 0 periods\n                #  along axis=0, and the Manager method may be somewhat more\n                #  performant, so we dispatch in that case.\n                return self - self.shift(periods, axis=axis)\n            # With periods=0 this is equivalent to a diff with axis=0\n            axis = 0\n\n        new_data = self._mgr.diff(n=periods, axis=axis)\n        return self._constructor(new_data).__finalize__(self, \"diff\")\n\n    # ----------------------------------------------------------------------\n    # Function application\n\n    def _gotitem(\n        self,\n        key: IndexLabel,\n        ndim: int,\n        subset: DataFrame | Series | None = None,\n    ) -> DataFrame | Series:\n        \"\"\"\n        Sub-classes to define. Return a sliced object.\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : {1, 2}\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:  # is Series\n            return subset\n\n        # TODO: _shallow_copy(subset)?\n        return subset[key]\n\n    _agg_summary_and_see_also_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to\n    ``numpy.mean(arr_2d, axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    See Also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    core.groupby.GroupBy : Perform operations over groups.\n    core.resample.Resampler : Perform operations over resampled bins.\n    core.window.Rolling : Perform operations over rolling window.\n    core.window.Expanding : Perform operations over expanding window.\n    core.window.ExponentialMovingWindow : Perform operation over exponential weighted\n        window.\n    \"\"\"\n    )\n\n    _agg_examples_doc = dedent(\n        \"\"\"\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    sum  12.0  NaN\n    min   1.0  2.0\n    max   NaN  8.0\n\n    Aggregate different functions over the columns and rename the index of the resulting\n    DataFrame.\n\n    >>> df.agg(x=('A', max), y=('B', 'min'), z=('C', np.mean))\n         A    B    C\n    x  7.0  NaN  NaN\n    y  NaN  2.0  NaN\n    z  NaN  NaN  6.0\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n    \"\"\"\n    )\n\n    @doc(\n        _shared_docs[\"aggregate\"],\n        klass=_shared_doc_kwargs[\"klass\"],\n        axis=_shared_doc_kwargs[\"axis\"],\n        see_also=_agg_summary_and_see_also_doc,\n        examples=_agg_examples_doc,\n    )\n    def aggregate(self, func=None, axis: Axis = 0, *args, **kwargs):\n        from pandas.core.apply import frame_apply\n\n        axis = self._get_axis_number(axis)\n\n        relabeling, func, columns, order = reconstruct_func(func, **kwargs)\n\n        op = frame_apply(self, func=func, axis=axis, args=args, kwargs=kwargs)\n        result = op.agg()\n\n        if relabeling:\n            # This is to keep the order to columns occurrence unchanged, and also\n            # keep the order of new columns occurrence unchanged\n\n            # For the return values of reconstruct_func, if relabeling is\n            # False, columns and order will be None.\n            assert columns is not None\n            assert order is not None\n\n            result_in_dict = relabel_result(result, func, columns, order)\n            result = DataFrame(result_in_dict, index=columns)\n\n        return result\n\n    agg = aggregate\n\n    # error: Signature of \"any\" incompatible with supertype \"NDFrame\"  [override]\n    @overload  # type: ignore[override]\n    def any(\n        self,\n        *,\n        axis: Axis = ...,\n        bool_only: bool | None = ...,\n        skipna: bool = ...,\n        level: None = ...,\n        **kwargs,\n    ) -> Series:\n        ...\n\n    @overload\n    def any(\n        self,\n        *,\n        axis: Axis = ...,\n        bool_only: bool | None = ...,\n        skipna: bool = ...,\n        level: Level,\n        **kwargs,\n    ) -> DataFrame | Series:\n        ...\n\n    @doc(NDFrame.any, **_shared_doc_kwargs)\n    def any(\n        self,\n        axis: Axis = 0,\n        bool_only: bool | None = None,\n        skipna: bool = True,\n        level: Level = None,\n        **kwargs,\n    ) -> DataFrame | Series:\n        ...\n\n    @doc(\n        _shared_docs[\"transform\"],\n        klass=_shared_doc_kwargs[\"klass\"],\n        axis=_shared_doc_kwargs[\"axis\"],\n    )\n    def transform(\n        self, func: AggFuncType, axis: Axis = 0, *args, **kwargs\n    ) -> DataFrame:\n        from pandas.core.apply import frame_apply\n\n        op = frame_apply(self, func=func, axis=axis, args=args, kwargs=kwargs)\n        result = op.transform()\n        assert isinstance(result, DataFrame)\n        return result\n\n    def apply(\n        self,\n        func: AggFuncType,\n        axis: Axis = 0,\n        raw: bool = False,\n        result_type: Literal[\"expand\", \"reduce\", \"broadcast\"] | None = None,\n        args=(),\n        **kwargs,\n    ):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n\n        raw : bool, default False\n            Determines if row or column is passed as a Series or ndarray object:\n\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwargs\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        Series or DataFrame\n            Result of applying ``func`` along the given axis of the\n            DataFrame.\n\n        See Also\n        --------\n        DataFrame.applymap: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Notes\n        -----\n        Functions that mutate the passed object can produce unexpected\n        behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`\n        for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Returning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing ``result_type='expand'`` will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n        \"\"\"\n        from pandas.core.apply import frame_apply\n\n        op = frame_apply(\n            self,\n            func=func,\n            axis=axis,\n            raw=raw,\n            result_type=result_type,\n            args=args,\n            kwargs=kwargs,\n        )\n        return op.apply().__finalize__(self, method=\"apply\")\n\n    def applymap(\n        self, func: PythonFuncType, na_action: str | None = None, **kwargs\n    ) -> DataFrame:\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n        na_action : {None, 'ignore'}, default None\n            If ‘ignore’, propagate NaN values, without passing them to func.\n\n            .. versionadded:: 1.2\n\n        **kwargs\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See Also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Like Series.map, NA values can be ignored:\n\n        >>> df_copy = df.copy()\n        >>> df_copy.iloc[0, 0] = pd.NA\n        >>> df_copy.applymap(lambda x: len(str(x)), na_action='ignore')\n             0  1\n        0  NaN  4\n        1  5.0  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n        if na_action not in {\"ignore\", None}:\n            raise ValueError(\n                f\"na_action must be 'ignore' or None. Got {repr(na_action)}\"\n            )\n        ignore_na = na_action == \"ignore\"\n        func = functools.partial(func, **kwargs)\n\n        # if we have a dtype == 'M8[ns]', provide boxed values\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func, ignore_na=ignore_na)\n            return lib.map_infer(x.astype(object)._values, func, ignore_na=ignore_na)\n\n        return self.apply(infer).__finalize__(self, \"applymap\")\n\n    # ----------------------------------------------------------------------\n    # Merging / joining methods\n\n    def append(\n        self,\n        other,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        sort: bool = False,\n    ) -> DataFrame:\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        .. deprecated:: 1.4.0\n            Use :func:`concat` instead. For further details see\n            :ref:`whatsnew_140.deprecations.frame_series_append`\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, …, n - 1.\n        verify_integrity : bool, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : bool, default False\n            Sort columns if the columns of `self` and `other` are not aligned.\n\n            .. versionchanged:: 1.0.0\n\n                Changed to not sort by default.\n\n        Returns\n        -------\n        DataFrame\n            A new DataFrame consisting of the rows of caller and the rows of `other`.\n\n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'), index=['x', 'y'])\n        >>> df\n           A  B\n        x  1  2\n        y  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'), index=['x', 'y'])\n        >>> df.append(df2)\n           A  B\n        x  1  2\n        y  3  4\n        x  5  6\n        y  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        warnings.warn(\n            \"The frame.append method is deprecated \"\n            \"and will be removed from pandas in a future version. \"\n            \"Use pandas.concat instead.\",\n            FutureWarning,\n            stacklevel=find_stack_level(inspect.currentframe()),\n        )\n\n        return self._append(other, ignore_index, verify_integrity, sort)\n\n    def _append(\n        self,\n        other,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        sort: bool = False,\n    ) -> DataFrame:\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                if not ignore_index:\n                    raise TypeError(\"Can only append a dict if ignore_index=True\")\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    \"Can only append a Series if ignore_index=True \"\n                    \"or if the Series has a name\"\n                )\n\n            index = Index([other.name], name=self.index.name)\n            row_df = other.to_frame().T\n            # infer_objects is needed for\n            #  test_append_empty_frame_to_series_with_dateutil_tz\n            other = row_df.infer_objects().rename_axis(index.names, copy=False)\n        elif isinstance(other, list):\n            if not other:\n                pass\n            elif not isinstance(other[0], DataFrame):\n                other = DataFrame(other)\n                if self.index.name is not None and not ignore_index:\n                    other.index.name = self.index.name\n\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(other, (list, tuple)):\n            to_concat = [self, *other]\n        else:\n            to_concat = [self, other]\n\n        result = concat(\n            to_concat,\n            ignore_index=ignore_index,\n            verify_integrity=verify_integrity,\n            sort=sort,\n        )\n        return result.__finalize__(self, method=\"append\")\n\n    def join(\n        self,\n        other: DataFrame | Series | list[DataFrame | Series],\n        on: IndexLabel | None = None,\n        how: str = \"left\",\n        lsuffix: str = \"\",\n        rsuffix: str = \"\",\n        sort: bool = False,\n        validate: str | None = None,\n    ) -> DataFrame:\n        \"\"\"\n        Join columns of another DataFrame.\n\n        Join columns with `other` DataFrame either on index or on a key\n        column. Efficiently join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series, or a list containing any combination of them\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame.\n        on : str, list of str, or array-like, optional\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation.\n        how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use `other`'s index.\n            * outer: form union of calling frame's index (or column if on is\n              specified) with `other`'s index, and sort it.\n              lexicographically.\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with `other`'s index, preserving the order\n              of the calling's one.\n            * cross: creates the cartesian product from both frames, preserves the order\n              of the left keys.\n\n              .. versionadded:: 1.2.0\n\n        lsuffix : str, default ''\n            Suffix to use from left frame's overlapping columns.\n        rsuffix : str, default ''\n            Suffix to use from right frame's overlapping columns.\n        sort : bool, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword).\n        validate : str, optional\n            If specified, checks if join is of specified type.\n            * \"one_to_one\" or \"1:1\": check if join keys are unique in both left\n            and right datasets.\n            * \"one_to_many\" or \"1:m\": check if join keys are unique in left dataset.\n            * \"many_to_one\" or \"m:1\": check if join keys are unique in right dataset.\n            * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n            .. versionadded:: 1.5.0\n\n        Returns\n        -------\n        DataFrame\n            A dataframe containing columns from both the caller and `other`.\n\n        See Also\n        --------\n        DataFrame.merge : For column(s)-on-column(s) operations.\n\n        Notes\n        -----\n        Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n        passing a list of `DataFrame` objects.\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> df\n          key   A\n        0  K0  A0\n        1  K1  A1\n        2  K2  A2\n        3  K3  A3\n        4  K4  A4\n        5  K5  A5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n          key   B\n        0  K0  B0\n        1  K1  B1\n        2  K2  B2\n\n        Join DataFrames using their indexes.\n\n        >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n          key_caller   A key_other    B\n        0         K0  A0        K0   B0\n        1         K1  A1        K1   B1\n        2         K2  A2        K2   B2\n        3         K3  A3       NaN  NaN\n        4         K4  A4       NaN  NaN\n        5         K5  A5       NaN  NaN\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both `df` and `other`. The joined DataFrame will have\n        key as its index.\n\n        >>> df.set_index('key').join(other.set_index('key'))\n              A    B\n        key\n        K0   A0   B0\n        K1   A1   B1\n        K2   A2   B2\n        K3   A3  NaN\n        K4   A4  NaN\n        K5   A5  NaN\n\n        Another option to join using the key columns is to use the `on`\n        parameter. DataFrame.join always uses `other`'s index but we can use\n        any column in `df`. This method preserves the original DataFrame's\n        index in the result.\n\n        >>> df.join(other.set_index('key'), on='key')\n          key   A    B\n        0  K0  A0   B0\n        1  K1  A1   B1\n        2  K2  A2   B2\n        3  K3  A3  NaN\n        4  K4  A4  NaN\n        5  K5  A5  NaN\n\n        Using non-unique key values shows how they are matched.\n\n        >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K1', 'K3', 'K0', 'K1'],\n        ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> df\n          key   A\n        0  K0  A0\n        1  K1  A1\n        2  K1  A2\n        3  K3  A3\n        4  K0  A4\n        5  K1  A5\n\n        >>> df.join(other.set_index('key'), on='key', validate='m:1')\n          key   A    B\n        0  K0  A0   B0\n        1  K1  A1   B1\n        2  K1  A2   B1\n        3  K3  A3  NaN\n        4  K0  A4   B0\n        5  K1  A5   B1\n        \"\"\"\n        return self._join_compat(\n            other,\n            on=on,\n            how=how,\n            lsuffix=lsuffix,\n            rsuffix=rsuffix,\n            sort=sort,\n            validate=validate,\n        )\n\n    def _join_compat(\n        self,\n        other: DataFrame | Series | Iterable[DataFrame | Series],\n        on: IndexLabel | None = None,\n        how: str = \"left\",\n        lsuffix: str = \"\",\n        rsuffix: str = \"\",\n        sort: bool = False,\n        validate: str | None = None,\n    ):\n        from pandas.core.reshape.concat import concat\n        from pandas.core.reshape.merge import merge\n\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError(\"Other Series must have a name\")\n            other = DataFrame({other.name: other})\n\n        if isinstance(other, DataFrame):\n            if how == \"cross\":\n                return merge(\n                    self,\n                    other,\n                    how=how,\n                    on=on,\n                    suffixes=(lsuffix, rsuffix),\n                    sort=sort,\n                    validate=validate,\n                )\n            return merge(\n                self,\n                other,\n                left_on=on,\n                how=how,\n                left_index=on is None,\n                right_index=True,\n                suffixes=(lsuffix, rsuffix),\n                sort=sort,\n                validate=validate,\n            )\n        else:\n            if on is not None:\n                raise ValueError(\n                    \"Joining multiple DataFrames only supported for joining on index\"\n                )\n\n            if rsuffix or lsuffix:\n                raise ValueError(\n                    \"Suffixes not supported when joining multiple DataFrames\"\n                )\n\n            # Mypy thinks the RHS is a\n            # \"Union[DataFrame, Series, Iterable[Union[DataFrame, Series]]]\" whereas\n            # the LHS is an \"Iterable[DataFrame]\", but in reality both types are\n            # \"Iterable[Union[DataFrame, Series]]\" due to the if statements\n            frames = [cast(\"DataFrame | Series\", self)] + list(other)\n\n            can_concat = all(df.index.is_unique for df in frames)\n\n            # join indexes only using concat\n            if can_concat:\n                if how == \"left\":\n                    res = concat(\n                        frames, axis=1, join=\"outer\", verify_integrity=True, sort=sort\n                    )\n                    return res.reindex(self.index, copy=False)\n                else:\n                    return concat(\n                        frames, axis=1, join=how, verify_integrity=True, sort=sort\n                    )\n\n            joined = frames[0]\n\n            for frame in frames[1:]:\n                joined = merge(\n                    joined,\n                    frame,\n                    how=how,\n                    left_index=True,\n                    right_index=True,\n                    validate=validate,\n                )\n\n            return joined\n\n    @Substitution(\"\")\n    @Appender(_merge_doc, indents=2)\n    def merge(\n        self,\n        right: DataFrame | Series,\n        how: str = \"inner\",\n        on: IndexLabel | None = None,\n        left_on: IndexLabel | None = None,\n        right_on: IndexLabel | None = None,\n        left_index: bool = False,\n        right_index: bool = False,\n        sort: bool = False,\n        suffixes: Suffixes = (\"_x\", \"_y\"),\n        copy: bool = True,\n        indicator: bool = False,\n        validate: str | None = None,\n    ) -> DataFrame:\n        from pandas.core.reshape.merge import merge\n\n        return merge(\n            self,\n            right,\n            how=how,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            left_index=left_index,\n            right_index=right_index,\n            sort=sort,\n            suffixes=suffixes,\n            copy=copy,\n            indicator=indicator,\n            validate=validate,\n        )\n\n    def round(\n        self, decimals: int | dict[IndexLabel, int] | Series = 0, *args, **kwargs\n    ) -> DataFrame:\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n        *args\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n        **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            A DataFrame with the affected columns rounded to the specified\n            number of decimal places.\n\n        See Also\n        --------\n        numpy.around : Round a numpy array to the given number of decimals.\n        Series.round : Round a Series to the given number of decimals.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df\n            dogs  cats\n        0  0.21  0.32\n        1  0.01  0.67\n        2  0.66  0.03\n        3  0.21  0.18\n\n        By providing an integer each column is rounded to the same number\n        of decimal places\n\n        >>> df.round(1)\n            dogs  cats\n        0   0.2   0.3\n        1   0.0   0.7\n        2   0.7   0.0\n        3   0.2   0.2\n\n        With a dict, the number of places for specific columns can be\n        specified with the column names as key and the number of decimal\n        places as value\n\n        >>> df.round({'dogs': 1, 'cats': 0})\n            dogs  cats\n        0   0.2   0.0\n        1   0.0   1.0\n        2   0.7   0.0\n        3   0.2   0.0\n\n        Using a Series, the number of places for specific columns can be\n        specified with the column names as index and the number of\n        decimal places as value\n\n        >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n        >>> df.round(decimals)\n            dogs  cats\n        0   0.2   0.0\n        1   0.0   1.0\n        2   0.7   0.0\n        3   0.2   0.0\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df: DataFrame, decimals):\n            for col, vals in df.items():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(ser: Series, decimals: int):\n            if is_integer_dtype(ser.dtype) or is_float_dtype(ser.dtype):\n                return ser.round(decimals)\n            return ser\n\n        nv.validate_round(args, kwargs)\n\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series) and not decimals.index.is_unique:\n                raise ValueError(\"Index of decimals must be unique\")\n            if is_dict_like(decimals) and not all(\n                is_integer(value) for _, value in decimals.items()\n            ):\n                raise TypeError(\"Values in decimals must be integers\")\n            new_cols = list(_dict_round(self, decimals))\n        elif is_integer(decimals):\n            # Dispatch to Series.round\n            new_cols = [_series_round(v, decimals) for _, v in self.items()]\n        else:\n            raise TypeError(\"decimals must be an integer, a dict-like or a Series\")\n\n        if len(new_cols) > 0:\n            return self._constructor(\n                concat(new_cols, axis=1), index=self.index, columns=self.columns\n            ).__finalize__(self, method=\"round\")\n        else:\n            return self\n\n    # ----------------------------------------------------------------------\n    # Statistical methods, etc.\n\n    def corr(\n        self,\n        method: str | Callable[[np.ndarray, np.ndarray], float] = \"pearson\",\n        min_periods: int = 1,\n        numeric_only: bool | lib.NoDefault = lib.no_default,\n    ) -> DataFrame:\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values.\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            Method of correlation:\n\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float. Note that the returned matrix from corr\n                will have 1 along the diagonals and will be symmetric\n                regardless of the callable's behavior.\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for Pearson\n            and Spearman correlation.\n        numeric_only : bool, default True\n            Include only `float`, `int` or `boolean` data.\n\n            .. versionadded:: 1.5.0\n\n            .. deprecated:: 1.5.0\n                The default value of ``numeric_only`` will be ``False`` in a future\n                version of pandas.\n\n        Returns\n        -------\n        DataFrame\n            Correlation matrix.\n\n        See Also\n        --------\n        DataFrame.corrwith : Compute pairwise correlation with another\n            DataFrame or Series.\n        Series.corr : Compute the correlation between two Series.\n\n        Notes\n        -----\n        Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.\n\n        * `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_\n        * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_\n        * `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_\n\n        Examples\n        --------\n        >>> def histogram_intersection(a, b):\n        ...     v = np.minimum(a, b).sum().round(decimals=1)\n        ...     return v\n        >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.corr(method=histogram_intersection)\n              dogs  cats\n        dogs   1.0   0.3\n        cats   0.3   1.0\n\n        >>> df = pd.DataFrame([(1, 1), (2, np.nan), (np.nan, 3), (4, 4)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.corr(min_periods=3)\n              dogs  cats\n        dogs   1.0   NaN\n        cats   NaN   1.0\n        \"\"\"  # noqa:E501\n        numeric_only_bool = com.resolve_numeric_only(numeric_only)\n        data = self._get_numeric_data() if numeric_only_bool else self\n        if numeric_only is lib.no_default and len(data.columns) < len(self.columns):\n            com.deprecate_numeric_only_default(type(self), \"corr\")\n\n        cols = data.columns\n        idx = cols.copy()\n        mat = data.to_numpy(dtype=float, na_value=np.nan, copy=False)\n\n        if method == \"pearson\":\n            correl = libalgos.nancorr(mat, minp=min_periods)\n        elif method == \"spearman\":\n            correl = libalgos.nancorr_spearman(mat, minp=min_periods)\n        elif method == \"kendall\" or callable(method):\n            if min_periods is None:\n                min_periods = 1\n            mat = mat.T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        else:\n            raise ValueError(\n                \"method must be either 'pearson', \"\n                \"'spearman', 'kendall', or a callable, \"\n                f\"'{method}' was supplied\"\n            )\n\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(\n        self,\n        min_periods: int | None = None,\n        ddof: int | None = 1,\n        numeric_only: bool | lib.NoDefault = lib.no_default,\n    ) -> DataFrame:\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        ddof : int, default 1\n            Delta degrees of freedom.  The divisor used in calculations\n            is ``N - ddof``, where ``N`` represents the number of elements.\n\n            .. versionadded:: 1.1.0\n\n        numeric_only : bool, default True\n            Include only `float`, `int` or `boolean` data.\n\n            .. versionadded:: 1.5.0\n\n            .. deprecated:: 1.5.0\n                The default value of ``numeric_only`` will be ``False`` in a future\n                version of pandas.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        Series.cov : Compute covariance with another Series.\n        core.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample\n            covariance.\n        core.window.expanding.Expanding.cov : Expanding sample covariance.\n        core.window.rolling.Rolling.cov : Rolling sample covariance.\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-ddof.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_only_bool = com.resolve_numeric_only(numeric_only)\n        data = self._get_numeric_data() if numeric_only_bool else self\n        if numeric_only is lib.no_default and len(data.columns) < len(self.columns):\n            com.deprecate_numeric_only_default(type(self), \"cov\")\n\n        cols = data.columns\n        idx = cols.copy()\n        mat = data.to_numpy(dtype=float, na_value=np.nan, copy=False)\n\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                base_cov = np.empty((mat.shape[1], mat.shape[1]))\n                base_cov.fill(np.nan)\n            else:\n                base_cov = np.cov(mat.T, ddof=ddof)\n            base_cov = base_cov.reshape((len(cols), len(cols)))\n        else:\n            base_cov = libalgos.nancorr(mat, cov=True, minp=min_periods)\n\n        return self._constructor(base_cov, index=idx, columns=cols)\n\n    def corrwith(\n        self,\n        other: DataFrame | Series,\n        axis: Axis = 0,\n        drop: bool = False,\n        method: Literal[\"pearson\", \"kendall\", \"spearman\"]\n        | Callable[[np.ndarray, np.ndarray], float] = \"pearson\",\n        numeric_only: bool | lib.NoDefault = lib.no_default,\n    ) -> Series:\n        \"\"\"\n        Compute pairwise correlation.\n\n        Pairwise correlation is computed between rows or columns of\n        DataFrame with rows or columns of Series or DataFrame. DataFrames\n        are first aligned along both axes before computing the\n        correlations.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n            Object with which to compute correlations.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' to compute row-wise, 1 or 'columns' for\n            column-wise.\n        drop : bool, default False\n            Drop missing indices from result.\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            Method of correlation:\n\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float.\n\n        numeric_only : bool, default True\n            Include only `float`, `int` or `boolean` data.\n\n            .. versionadded:: 1.5.0\n\n            .. deprecated:: 1.5.0\n                The default value of ``numeric_only`` will be ``False`` in a future\n                version of pandas.\n\n        Returns\n        -------\n        Series\n            Pairwise correlations.\n\n        See Also\n        --------\n        DataFrame.corr : Compute pairwise correlation of columns.\n\n        Examples\n        --------\n        >>> index = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n        >>> columns = [\"one\", \"two\", \"three\", \"four\"]\n        >>> df1 = pd.DataFrame(np.arange(20).reshape(5, 4), index=index, columns=columns)\n        >>> df2 = pd.DataFrame(np.arange(16).reshape(4, 4), index=index[:4], columns=columns)\n        >>> df1.corrwith(df2)\n        one      1.0\n        two      1.0\n        three    1.0\n        four     1.0\n        dtype: float64\n\n        >>> df2.corrwith(df1, axis=1)\n        a    1.0\n        b    1.0\n        c    1.0\n        d    1.0\n        e    NaN\n        dtype: float64\n        \"\"\"  # noqa:E501\n        axis = self._get_axis_number(axis)\n        numeric_only_bool = com.resolve_numeric_only(numeric_only)\n        this = self._get_numeric_data() if numeric_only_bool else self\n        if numeric_only is lib.no_default and len(this.columns) < len(self.columns):\n            com.deprecate_numeric_only_default(type(self), \"corrwith\")\n\n        # GH46174: when other is a Series object and axis=0, we achieve a speedup over\n        # passing .corr() to .apply() by taking the columns as ndarrays and iterating\n        # over the transposition row-wise. Then we delegate the correlation coefficient\n        # computation and null-masking to np.corrcoef and np.isnan respectively,\n        # which are much faster. We exploit the fact that the Spearman correlation\n        # of two vectors is equal to the Pearson correlation of their ranks to use\n        # substantially the same method for Pearson and Spearman,\n        # just with intermediate argsorts on the latter.\n        if isinstance(other, Series):\n            if axis == 0 and method in [\"pearson\", \"spearman\"]:\n                corrs = {}\n                if numeric_only:\n                    cols = self.select_dtypes(include=np.number).columns\n                    ndf = self[cols].values.transpose()\n                else:\n                    cols = self.columns\n                    ndf = self.values.transpose()\n                k = other.values\n                if method == \"pearson\":\n                    for i, r in enumerate(ndf):\n                        nonnull_mask = ~np.isnan(r) & ~np.isnan(k)\n                        corrs[cols[i]] = np.corrcoef(r[nonnull_mask], k[nonnull_mask])[\n                            0, 1\n                        ]\n                else:\n                    for i, r in enumerate(ndf):\n                        nonnull_mask = ~np.isnan(r) & ~np.isnan(k)\n                        corrs[cols[i]] = np.corrcoef(\n                            r[nonnull_mask].argsort().argsort(),\n                            k[nonnull_mask].argsort().argsort(),\n                        )[0, 1]\n                return Series(corrs)\n            else:\n                return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n\n        if numeric_only_bool:\n            other = other._get_numeric_data()\n        left, right = this.align(other, join=\"inner\", copy=False)\n\n        if axis == 1:\n            left = left.T\n            right = right.T\n\n        if method == \"pearson\":\n            # mask missing values\n            left = left + right * 0\n            right = right + left * 0\n\n            # demeaned data\n            ldem = left - left.mean(numeric_only=numeric_only_bool)\n            rdem = right - right.mean(numeric_only=numeric_only_bool)\n\n            num = (ldem * rdem).sum()\n            dom = (\n                (left.count() - 1)\n                * left.std(numeric_only=numeric_only_bool)\n                * right.std(numeric_only=numeric_only_bool)\n            )\n\n            correl = num / dom\n\n        elif method in [\"kendall\", \"spearman\"] or callable(method):\n\n            def c(x):\n                return nanops.nancorr(x[0], x[1], method=method)\n\n            correl = self._constructor_sliced(\n                map(c, zip(left.values.T, right.values.T)), index=left.columns\n            )\n\n        else:\n            raise ValueError(\n                f\"Invalid method {method} was passed, \"\n                \"valid methods are: 'pearson', 'kendall', \"\n                \"'spearman', or callable\"\n            )\n\n        if not drop:\n            # Find non-matching labels along the given axis\n            # and append missing correlations (GH 22375)\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            idx_diff = result_index.difference(correl.index)\n\n            if len(idx_diff) > 0:\n                correl = correl._append(\n                    Series([np.nan] * len(idx_diff), index=idx_diff)\n                )\n\n        return correl\n\n    # ----------------------------------------------------------------------\n    # ndarray-like stats methods\n\n    def count(self, axis: Axis = 0, level: Level = None, numeric_only: bool = False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each row.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : bool, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.value_counts: Count unique combinations of columns.\n        DataFrame.shape: Number of DataFrame rows and columns (including NA\n            elements).\n        DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n            elements.\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            warnings.warn(\n                \"Using the level keyword in DataFrame and Series aggregations is \"\n                \"deprecated and will be removed in a future version. Use groupby \"\n                \"instead. df.count(level=1) should use df.groupby(level=1).count().\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n            res = self._count_level(level, axis=axis, numeric_only=numeric_only)\n            return res.__finalize__(self, method=\"count\")\n\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        # GH #423\n        if len(frame._get_axis(axis)) == 0:\n            result = self._constructor_sliced(0, index=frame._get_agg_axis(axis))\n        else:\n            if frame._is_mixed_type or frame._mgr.any_extension_types:\n                # the or any_extension_types is really only hit for single-\n                # column frames with an extension array\n                result = notna(frame).sum(axis=axis)\n            else:\n                # GH13407\n                series_counts = notna(frame).sum(axis=axis)\n                counts = series_counts.values\n                result = self._constructor_sliced(\n                    counts, index=frame._get_agg_axis(axis)\n                )\n\n        return result.astype(\"int64\").__finalize__(self, method=\"count\")\n\n    def _count_level(self, level: Level, axis: int = 0, numeric_only: bool = False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError(\n                f\"Can only count levels on hierarchical {self._get_axis_name(axis)}.\"\n            )\n\n        # Mask NaNs: Mask rows or columns where the index level is NaN, and all\n        # values in the DataFrame that are NaN\n        if frame._is_mixed_type:\n            # Since we have mixed types, calling notna(frame.values) might\n            # upcast everything to object\n            values_mask = notna(frame).values\n        else:\n            # But use the speedup when we have homogeneous dtypes\n            values_mask = notna(frame.values)\n\n        index_mask = notna(count_axis.get_level_values(level=level))\n        if axis == 1:\n            mask = index_mask & values_mask\n        else:\n            mask = index_mask.reshape(-1, 1) & values_mask\n\n        if isinstance(level, int):\n            level_number = level\n        else:\n            level_number = count_axis._get_level_number(level)\n\n        level_name = count_axis._names[level_number]\n        level_index = count_axis.levels[level_number]._rename(name=level_name)\n        level_codes = ensure_platform_int(count_axis.codes[level_number])\n        counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=axis)\n\n        if axis == 1:\n            result = self._constructor(counts, index=agg_axis, columns=level_index)\n        else:\n            result = self._constructor(counts, index=level_index, columns=agg_axis)\n\n        return result\n\n    def _reduce(\n        self,\n        op,\n        name: str,\n        *,\n        axis: Axis = 0,\n        skipna: bool = True,\n        numeric_only: bool | None = None,\n        filter_type=None,\n        **kwds,\n    ):\n        assert filter_type is None or filter_type == \"bool\", filter_type\n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n        if numeric_only is None and name in [\"mean\", \"median\"]:\n            own_dtypes = [arr.dtype for arr in self._mgr.arrays]\n\n            dtype_is_dt = np.array(\n                [is_datetime64_any_dtype(dtype) for dtype in own_dtypes],\n                dtype=bool,\n            )\n            if dtype_is_dt.any():\n                warnings.warn(\n                    \"DataFrame.mean and DataFrame.median with numeric_only=None \"\n                    \"will include datetime64 and datetime64tz columns in a \"\n                    \"future version.\",\n                    FutureWarning,\n                    stacklevel=find_stack_level(inspect.currentframe()),\n                )\n                # Non-copy equivalent to\n                #  dt64_cols = self.dtypes.apply(is_datetime64_any_dtype)\n                #  cols = self.columns[~dt64_cols]\n                #  self = self[cols]\n                predicate = lambda x: not is_datetime64_any_dtype(x.dtype)\n                mgr = self._mgr._get_data_subset(predicate)\n                self = type(self)(mgr)\n\n        # TODO: Make other agg func handle axis=None properly GH#21597\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        assert axis in [0, 1]\n\n        def func(values: np.ndarray):\n            # We only use this in the case that operates on self.values\n            return op(values, axis=axis, skipna=skipna, **kwds)\n\n        def blk_func(values, axis=1):\n            if isinstance(values, ExtensionArray):\n                if not is_1d_only_ea_dtype(values.dtype) and not isinstance(\n                    self._mgr, ArrayManager\n                ):\n                    return values._reduce(name, axis=1, skipna=skipna, **kwds)\n                return values._reduce(name, skipna=skipna, **kwds)\n            else:\n                return op(values, axis=axis, skipna=skipna, **kwds)\n\n        def _get_data() -> DataFrame:\n            if filter_type is None:\n                data = self._get_numeric_data()\n            else:\n                # GH#25101, GH#24434\n                assert filter_type == \"bool\"\n                data = self._get_bool_data()\n            return data\n\n        numeric_only_bool = com.resolve_numeric_only(numeric_only)\n        if numeric_only is not None or axis == 0:\n            # For numeric_only non-None and axis non-None, we know\n            #  which blocks to use and no try/except is needed.\n            #  For numeric_only=None only the case with axis==0 and no object\n            #  dtypes are unambiguous can be handled with BlockManager.reduce\n            # Case with EAs see GH#35881\n            df = self\n            if numeric_only_bool:\n                df = _get_data()\n            if axis == 1:\n                df = df.T\n                axis = 0\n\n            ignore_failures = numeric_only is None\n\n            # After possibly _get_data and transposing, we are now in the\n            #  simple case where we can use BlockManager.reduce\n            res, _ = df._mgr.reduce(blk_func, ignore_failures=ignore_failures)\n            out = df._constructor(res).iloc[0]\n            if out_dtype is not None:\n                out = out.astype(out_dtype)\n            if axis == 0 and len(self) == 0 and name in [\"sum\", \"prod\"]:\n                # Even if we are object dtype, follow numpy and return\n                #  float64, see test_apply_funcs_over_empty\n                out = out.astype(np.float64)\n\n            if numeric_only is None and out.shape[0] != df.shape[1]:\n                # columns have been dropped GH#41480\n                com.deprecate_numeric_only_default(\n                    type(self), name, deprecate_none=True\n                )\n\n            return out\n\n        assert numeric_only is None\n\n        data = self\n        values = data.values\n\n        try:\n            result = func(values)\n\n        except TypeError:\n            # e.g. in nanops trying to convert strs to float\n\n            data = _get_data()\n            labels = data._get_agg_axis(axis)\n\n            values = data.values\n            with np.errstate(all=\"ignore\"):\n                result = func(values)\n\n            # columns have been dropped GH#41480\n            arg_name = \"numeric_only\"\n            if name in [\"all\", \"any\"]:\n                arg_name = \"bool_only\"\n            warnings.warn(\n                \"Dropping of nuisance columns in DataFrame reductions \"\n                f\"(with '{arg_name}=None') is deprecated; in a future \"\n                \"version this will raise TypeError.  Select only valid \"\n                \"columns before calling the reduction.\",\n                FutureWarning,\n                stacklevel=find_stack_level(inspect.currentframe()),\n            )\n\n        if hasattr(result, \"dtype\"):\n            if filter_type == \"bool\" and notna(result).all():\n                result = result.astype(np.bool_)\n            elif filter_type is None and is_object_dtype(result.dtype):\n                try:\n                    result = result.astype(np.float64)\n                except (ValueError, TypeError):\n                    # try to coerce to the original dtypes item by item if we can\n                    pass\n\n        result = self._constructor_sliced(result, index=labels)\n        return result\n\n    def _reduce_axis1(self, name: str, func, skipna: bool) -> Series:\n        \"\"\"\n        Special case for _reduce to try to avoid a potentially-expensive transpose.\n\n        Apply the reduction block-wise along axis=1 and then reduce the resulting\n        1D arrays.\n        \"\"\"\n        if name == \"all\":\n            result = np.ones(len(self), dtype=bool)\n            ufunc = np.logical_and\n        elif name == \"any\":\n            result = np.zeros(len(self), dtype=bool)\n            # error: Incompatible types in assignment\n            # (expression has type \"_UFunc_Nin2_Nout1[Literal['logical_or'],\n            # Literal[20], Literal[False]]\", variable has type\n            # \"_UFunc_Nin2_Nout1[Literal['logical_and'], Literal[20],\n            # Literal[True]]\")\n            ufunc = np.logical_or  # type: ignore[assignment]\n        else:\n            raise NotImplementedError(name)\n\n        for arr in self._mgr.arrays:\n            middle = func(arr, axis=0, skipna=skipna)\n            result = ufunc(result, middle)\n\n        res_ser = self._constructor_sliced(result, index=self.index)\n        return res_ser\n\n    def nunique(self, axis: Axis = 0, dropna: bool = True) -> Series:\n        \"\"\"\n        Count number of distinct elements in specified axis.\n\n        Return Series with number of distinct elements. Can ignore NaN\n        values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n            column-wise.\n        dropna : bool, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        Series\n\n        See Also\n        --------\n        Series.nunique: Method nunique for Series.\n        DataFrame.count: Count non-NA cells for each column or row.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    2\n        dtype: int64\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        dtype: int64\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    @doc(_shared_docs[\"idxmin\"], numeric_only_default=\"False\")\n    def idxmin(\n        self, axis: Axis = 0, skipna: bool = True, numeric_only: bool = False\n    ) -> Series:\n        axis = self._get_axis_number(axis)\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        res = data._reduce(\n            nanops.nanargmin, \"argmin\", axis=axis, skipna=skipna, numeric_only=False\n        )\n        indices = res._values\n\n        # indices will always be np.ndarray since axis is not None and\n        # values is a 2d array for DataFrame\n        # error: Item \"int\" of \"Union[int, Any]\" has no attribute \"__iter__\"\n        assert isinstance(indices, np.ndarray)  # for mypy\n\n        index = data._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        final_result = data._constructor_sliced(result, index=data._get_agg_axis(axis))\n        return final_result.__finalize__(self, method=\"idxmin\")\n\n    @doc(_shared_docs[\"idxmax\"], numeric_only_default=\"False\")\n    def idxmax(\n        self, axis: Axis = 0, skipna: bool = True, numeric_only: bool = False\n    ) -> Series:\n\n        axis = self._get_axis_number(axis)\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        res = data._reduce(\n            nanops.nanargmax, \"argmax\", axis=axis, skipna=skipna, numeric_only=False\n        )\n        indices = res._values\n\n        # indices will always be np.ndarray since axis is not None and\n        # values is a 2d array for DataFrame\n        # error: Item \"int\" of \"Union[int, Any]\" has no attribute \"__iter__\"\n        assert isinstance(indices, np.ndarray)  # for mypy\n\n        index = data._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        final_result = data._constructor_sliced(result, index=data._get_agg_axis(axis))\n        return final_result.__finalize__(self, method=\"idxmax\")\n\n    def _get_agg_axis(self, axis_num: int) -> Index:\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")\n\n    def mode(\n        self, axis: Axis = 0, numeric_only: bool = False, dropna: bool = True\n    ) -> DataFrame:\n        \"\"\"\n        Get the mode(s) of each element along the selected axis.\n\n        The mode of a set of values is the value that appears most often.\n        It can be multiple values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to iterate over while searching for the mode:\n\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row.\n\n        numeric_only : bool, default False\n            If True, only apply to numeric columns.\n        dropna : bool, default True\n            Don't consider counts of NaN/NaT.\n\n        Returns\n        -------\n        DataFrame\n            The modes of each column or row.\n\n        See Also\n        --------\n        Series.mode : Return the highest frequency value in a Series.\n        Series.value_counts : Return the counts of values in a Series.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 2, 2),\n        ...                    ('mammal', 4, np.nan),\n        ...                    ('arthropod', 8, 0),\n        ...                    ('bird', 2, np.nan)],\n        ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n        ...                   columns=('species', 'legs', 'wings'))\n        >>> df\n                   species  legs  wings\n        falcon        bird     2    2.0\n        horse       mammal     4    NaN\n        spider   arthropod     8    0.0\n        ostrich       bird     2    NaN\n\n        By default, missing values are not considered, and the mode of wings\n        are both 0 and 2. Because the resulting DataFrame has two rows,\n        the second row of ``species`` and ``legs`` contains ``NaN``.\n\n        >>> df.mode()\n          species  legs  wings\n        0    bird   2.0    0.0\n        1     NaN   NaN    2.0\n\n        Setting ``dropna=False`` ``NaN`` values are considered and they can be\n        the mode (like for wings).\n\n        >>> df.mode(dropna=False)\n          species  legs  wings\n        0    bird     2    NaN\n\n        Setting ``numeric_only=True``, only the mode of numeric columns is\n        computed, and columns of other types are ignored.\n\n        >>> df.mode(numeric_only=True)\n           legs  wings\n        0   2.0    0.0\n        1   NaN    2.0\n\n        To compute the mode over columns and not rows, use the axis parameter:\n\n        >>> df.mode(axis='columns', numeric_only=True)\n                   0    1\n        falcon   2.0  NaN\n        horse    4.0  NaN\n        spider   0.0  8.0\n        ostrich  2.0  NaN\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n\n        data = data.apply(f, axis=axis)\n        # Ensure index is type stable (should always use int index)\n        if data.empty:\n            data.index = default_index(0)\n\n        return data\n\n    @overload\n    def quantile(\n        self,\n        q: float = ...,\n        axis: Axis = ...,\n        numeric_only: bool | lib.NoDefault = ...,\n        interpolation: QuantileInterpolation = ...,\n    ) -> Series:\n        ...\n\n    @overload\n    def quantile(\n        self,\n        q: AnyArrayLike | Sequence[float],\n        axis: Axis = ...,\n        numeric_only: bool | lib.NoDefault = ...,\n        interpolation: QuantileInterpolation = ...,\n    ) -> Series | DataFrame:\n        ...\n\n    @overload\n    def quantile(\n        self,\n        q: float | AnyArrayLike | Sequence[float] = ...,\n        axis: Axis = ...,\n        numeric_only: bool | lib.NoDefault = ...,\n        interpolation: QuantileInterpolation = ...,\n    ) -> Series | DataFrame:\n        ...\n\n    def quantile(\n        self,\n        q: float | AnyArrayLike | Sequence[float] = 0.5,\n        axis: Axis = 0,\n        numeric_only: bool | lib.NoDefault = no_default,\n        interpolation: QuantileInterpolation = \"linear\",\n        method: Literal[\"single\", \"table\"] = \"single\",\n    ) -> Series | DataFrame:\n        \"\"\"\n        Return values at the given quantile over requested axis.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value between 0 <= q <= 1, the quantile(s) to compute.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        numeric_only : bool, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well.\n\n            .. deprecated:: 1.5.0\n                The default value of ``numeric_only`` will be ``False`` in a future\n                version of pandas.\n\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n        method : {'single', 'table'}, default 'single'\n            Whether to compute quantiles per-column ('single') or over all columns\n            ('table'). When 'table', the only allowed interpolation methods are\n            'nearest', 'lower', and 'higher'.\n\n        Returns\n        -------\n        Series or DataFrame\n\n            If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        See Also\n        --------\n        core.window.rolling.Rolling.quantile: Rolling quantile.\n        numpy.percentile: Numpy function to compute the percentile.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n        ...                   columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        Name: 0.1, dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `method='table'` will compute the quantile over all columns.\n\n        >>> df.quantile(.1, method=\"table\", interpolation=\"nearest\")\n        a    1\n        b    1\n        Name: 0.1, dtype: int64\n        >>> df.quantile([.1, .5], method=\"table\", interpolation=\"nearest\")\n             a    b\n        0.1  1    1\n        0.5  3  100\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n        ...                    'B': [pd.Timestamp('2010'),\n        ...                          pd.Timestamp('2011')],\n        ...                    'C': [pd.Timedelta('1 days'),\n        ...                          pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n        \"\"\"\n        validate_percentile(q)\n        axis = self._get_axis_number(axis)\n        any_not_numeric = any(not is_numeric_dtype(x) for x in self.dtypes)\n        if numeric_only is no_default and any_not_numeric:\n            com.deprecate_numeric_only_default(type(self), \"quantile\")\n        numeric_only = com.resolve_numeric_only(numeric_only)\n\n        if not is_list_like(q):\n            # BlockManager.quantile expects listlike, so we wrap and unwrap here\n            # error: List item 0 has incompatible type \"Union[float, Union[Union[\n            # ExtensionArray, ndarray[Any, Any]], Index, Series], Sequence[float]]\";\n            # expected \"float\"\n            res_df = self.quantile(  # type: ignore[call-overload]\n                [q],\n                axis=axis,\n                numeric_only=numeric_only,\n                interpolation=interpolation,\n                method=method,\n            )\n            if method == \"single\":\n                res = res_df.iloc[0]\n            else:\n                # cannot directly iloc over sparse arrays\n                res = res_df.T.iloc[:, 0]\n            if axis == 1 and len(self) == 0:\n                # GH#41544 try to get an appropriate dtype\n                dtype = find_common_type(list(self.dtypes))\n                if needs_i8_conversion(dtype):\n                    return res.astype(dtype)\n            return res\n\n        q = Index(q, dtype=np.float64)\n        data = self._get_numeric_data() if numeric_only else self\n\n        if axis == 1:\n            data = data.T\n\n        if len(data.columns) == 0:\n            # GH#23925 _get_numeric_data may have dropped all columns\n            cols = Index([], name=self.columns.name)\n\n            dtype = np.float64\n            if axis == 1:\n                # GH#41544 try to get an appropriate dtype\n                cdtype = find_common_type(list(self.dtypes))\n                if needs_i8_conversion(cdtype):\n                    dtype = cdtype\n\n            res = self._constructor([], index=q, columns=cols, dtype=dtype)\n            return res.__finalize__(self, method=\"quantile\")\n\n        valid_method = {\"single\", \"table\"}\n        if method not in valid_method:\n            raise ValueError(\n                f\"Invalid method: {method}. Method must be in {valid_method}.\"\n            )\n        if method == \"single\":\n            # error: Argument \"qs\" to \"quantile\" of \"BlockManager\" has incompatible type\n            # \"Index\"; expected \"Float64Index\"\n            res = data._mgr.quantile(\n                qs=q, axis=1, interpolation=interpolation  # type: ignore[arg-type]\n            )\n        elif method == \"table\":\n            valid_interpolation = {\"nearest\", \"lower\", \"higher\"}\n            if interpolation not in valid_interpolation:\n                raise ValueError(\n                    f\"Invalid interpolation: {interpolation}. \"\n                    f\"Interpolation must be in {valid_interpolation}\"\n                )\n            # handle degenerate case\n            if len(data) == 0:\n                if data.ndim == 2:\n                    dtype = find_common_type(list(self.dtypes))\n                else:\n                    dtype = self.dtype\n                return self._constructor([], index=q, columns=data.columns, dtype=dtype)\n\n            q_idx = np.quantile(  # type: ignore[call-overload]\n                np.arange(len(data)), q, **{np_percentile_argname: interpolation}\n            )\n\n            by = data.columns\n            if len(by) > 1:\n                keys = [data._get_label_or_level_values(x) for x in by]\n                indexer = lexsort_indexer(keys)\n            else:\n                by = by[0]\n                k = data._get_label_or_level_values(by)  # type: ignore[arg-type]\n                indexer = nargsort(k)\n\n            res = data._mgr.take(indexer[q_idx], verify=False)\n            res.axes[1] = q\n\n        result = self._constructor(res)\n        return result.__finalize__(self, method=\"quantile\")\n\n    @doc(NDFrame.asfreq, **_shared_doc_kwargs)\n    def asfreq(\n        self,\n        freq: Frequency,\n        method: FillnaOptions | None = None,\n        how: str | None = None,\n        normalize: bool = False,\n        fill_value: Hashable = None,\n    ) -> DataFrame:\n        return super().asfreq(\n            freq=freq,\n            method=method,\n            how=how,\n            normalize=normalize,\n            fill_value=fill_value,\n        )\n\n    @doc(NDFrame.resample, **_shared_doc_kwargs)\n    def resample(\n        self,\n        rule,\n        axis: Axis = 0,\n        closed: str | None = None,\n        label: str | None = None,\n        convention: str = \"start\",\n        kind: str | None = None,\n        loffset=None,\n        base: int | None = None,\n        on: Level = None,\n        level: Level = None,\n        origin: str | TimestampConvertibleTypes = \"start_day\",\n        offset: TimedeltaConvertibleTypes | None = None,\n        group_keys: bool | lib.NoDefault = no_default,\n    ) -> Resampler:\n        return super().resample(\n            rule=rule,\n            axis=axis,\n            closed=closed,\n            label=label,\n            convention=convention,\n            kind=kind,\n            loffset=loffset,\n            base=base,\n            on=on,\n            level=level,\n            origin=origin,\n            offset=offset,\n            group_keys=group_keys,\n        )\n\n    def to_timestamp(\n        self,\n        freq: Frequency | None = None,\n        how: str = \"start\",\n        axis: Axis = 0,\n        copy: bool = True,\n    ) -> DataFrame:\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n        Parameters\n        ----------\n        freq : str, default frequency of PeriodIndex\n            Desired frequency.\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default).\n        copy : bool, default True\n            If False then underlying input data is not copied.\n\n        Returns\n        -------\n        DataFrame with DatetimeIndex\n        \"\"\"\n        new_obj = self.copy(deep=copy)\n\n        axis_name = self._get_axis_name(axis)\n        old_ax = getattr(self, axis_name)\n        if not isinstance(old_ax, PeriodIndex):\n            raise TypeError(f\"unsupported Type {type(old_ax).__name__}\")\n\n        new_ax = old_ax.to_timestamp(freq=freq, how=how)\n\n        setattr(new_obj, axis_name, new_ax)\n        return new_obj\n\n    def to_period(\n        self, freq: Frequency | None = None, axis: Axis = 0, copy: bool = True\n    ) -> DataFrame:\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed).\n\n        Parameters\n        ----------\n        freq : str, default\n            Frequency of the PeriodIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default).\n        copy : bool, default True\n            If False then underlying input data is not copied.\n\n        Returns\n        -------\n        DataFrame with PeriodIndex\n\n        Examples\n        --------\n        >>> idx = pd.to_datetime(\n        ...     [\n        ...         \"2001-03-31 00:00:00\",\n        ...         \"2002-05-31 00:00:00\",\n        ...         \"2003-08-31 00:00:00\",\n        ...     ]\n        ... )\n\n        >>> idx\n        DatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'],\n        dtype='datetime64[ns]', freq=None)\n\n        >>> idx.to_period(\"M\")\n        PeriodIndex(['2001-03', '2002-05', '2003-08'], dtype='period[M]')\n\n        For the yearly frequency\n\n        >>> idx.to_period(\"Y\")\n        PeriodIndex(['2001', '2002', '2003'], dtype='period[A-DEC]')\n        \"\"\"\n        new_obj = self.copy(deep=copy)\n\n        axis_name = self._get_axis_name(axis)\n        old_ax = getattr(self, axis_name)\n        if not isinstance(old_ax, DatetimeIndex):\n            raise TypeError(f\"unsupported Type {type(old_ax).__name__}\")\n\n        new_ax = old_ax.to_period(freq=freq)\n\n        setattr(new_obj, axis_name, new_ax)\n        return new_obj\n\n    def isin(self, values: Series | DataFrame | Sequence | Mapping) -> DataFrame:\n        \"\"\"\n        Whether each element in the DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dict\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dict, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame of booleans showing whether each element in the DataFrame\n            is contained in values.\n\n        See Also\n        --------\n        DataFrame.eq: Equality test for DataFrame.\n        Series.isin: Equivalent method on Series.\n        Series.str.contains: Test if pattern or regex is contained within a\n            string of a Series or Index.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n        ...                   index=['falcon', 'dog'])\n        >>> df\n                num_legs  num_wings\n        falcon         2          2\n        dog            4          0\n\n        When ``values`` is a list check whether every value in the DataFrame\n        is present in the list (which animals have 0 or 2 legs or wings)\n\n        >>> df.isin([0, 2])\n                num_legs  num_wings\n        falcon      True       True\n        dog        False       True\n\n        To check if ``values`` is *not* in the DataFrame, use the ``~`` operator:\n\n        >>> ~df.isin([0, 2])\n                num_legs  num_wings\n        falcon     False      False\n        dog         True      False\n\n        When ``values`` is a dict, we can pass values to check for each\n        column separately:\n\n        >>> df.isin({'num_wings': [0, 3]})\n                num_legs  num_wings\n        falcon     False      False\n        dog        False       True\n\n        When ``values`` is a Series or DataFrame the index and column must\n        match. Note that 'falcon' does not match based on the number of legs\n        in other.\n\n        >>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]},\n        ...                      index=['spider', 'falcon'])\n        >>> df.isin(other)\n                num_legs  num_wings\n        falcon     False       True\n        dog        False      False\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n\n            values = collections.defaultdict(list, values)\n            result = concat(\n                (\n                    self.iloc[:, [i]].isin(values[col])\n                    for i, col in enumerate(self.columns)\n                ),\n                axis=1,\n            )\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError(\"cannot compute isin with a duplicate axis.\")\n            result = self.eq(values.reindex_like(self), axis=\"index\")\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError(\"cannot compute isin with a duplicate axis.\")\n            result = self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    \"only list-like or dict-like objects are allowed \"\n                    \"to be passed to DataFrame.isin(), \"\n                    f\"you passed a '{type(values).__name__}'\"\n                )\n            # error: Argument 2 to \"isin\" has incompatible type \"Union[Sequence[Any],\n            # Mapping[Any, Any]]\"; expected \"Union[Union[ExtensionArray,\n            # ndarray[Any, Any]], Index, Series]\"\n            result = self._constructor(\n                algorithms.isin(\n                    self.values.ravel(), values  # type: ignore[arg-type]\n                ).reshape(self.shape),\n                self.index,\n                self.columns,\n            )\n        return result.__finalize__(self, method=\"isin\")\n\n    # ----------------------------------------------------------------------\n    # Add index and columns\n    _AXIS_ORDERS = [\"index\", \"columns\"]\n    _AXIS_TO_AXIS_NUMBER: dict[Axis, int] = {\n        **NDFrame._AXIS_TO_AXIS_NUMBER,\n        1: 1,\n        \"columns\": 1,\n    }\n    _AXIS_LEN = len(_AXIS_ORDERS)\n    _info_axis_number = 1\n    _info_axis_name = \"columns\"\n\n    index = properties.AxisProperty(\n        axis=1, doc=\"The index (row labels) of the DataFrame.\"\n    )\n    columns = properties.AxisProperty(axis=0, doc=\"The column labels of the DataFrame.\")\n\n    @property\n    def _AXIS_NUMBERS(self) -> dict[str, int]:\n        \"\"\".. deprecated:: 1.1.0\"\"\"\n        super()._AXIS_NUMBERS\n        return {\"index\": 0, \"columns\": 1}\n\n    @property\n    def _AXIS_NAMES(self) -> dict[int, str]:\n        \"\"\".. deprecated:: 1.1.0\"\"\"\n        super()._AXIS_NAMES\n        return {0: \"index\", 1: \"columns\"}\n\n    # ----------------------------------------------------------------------\n    # Add plotting methods to DataFrame\n    plot = CachedAccessor(\"plot\", pandas.plotting.PlotAccessor)\n    hist = pandas.plotting.hist_frame\n    boxplot = pandas.plotting.boxplot_frame\n    sparse = CachedAccessor(\"sparse\", SparseFrameAccessor)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    def _to_dict_of_blocks(self, copy: bool = True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY - only works for BlockManager\n        \"\"\"\n        mgr = self._mgr\n        # convert to BlockManager if needed -> this way support ArrayManager as well\n        mgr = mgr_to_mgr(mgr, \"block\")\n        mgr = cast(BlockManager, mgr)\n        return {\n            k: self._constructor(v).__finalize__(self)\n            for k, v, in mgr.to_dict(copy=copy).items()\n        }\n\n    @property\n    def values(self) -> np.ndarray:\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]])\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._mgr.as_array()\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"ffill\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\"])\n    def ffill(  # type: ignore[override]\n        self,\n        axis: None | Axis = None,\n        inplace: bool = False,\n        limit: None | int = None,\n        downcast: dict | None = None,\n    ) -> DataFrame | None:\n        return super().ffill(axis=axis, inplace=inplace, limit=limit, downcast=downcast)\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        downcast=...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n        downcast=...,\n    ) -> None:\n        ...\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool = ...,\n        limit: None | int = ...,\n        downcast=...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"bfill\" incompatible with supertype \"NDFrame\"\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\"])\n    def bfill(  # type: ignore[override]\n        self,\n        axis: None | Axis = None,\n        inplace: bool = False,\n        limit: None | int = None,\n        downcast=None,\n    ) -> DataFrame | None:\n        return super().bfill(axis=axis, inplace=inplace, limit=limit, downcast=downcast)\n\n    @deprecate_nonkeyword_arguments(\n        version=None, allowed_args=[\"self\", \"lower\", \"upper\"]\n    )\n    def clip(\n        self: DataFrame,\n        lower: float | None = None,\n        upper: float | None = None,\n        axis: Axis | None = None,\n        inplace: bool = False,\n        *args,\n        **kwargs,\n    ) -> DataFrame | None:\n        return super().clip(lower, upper, axis, inplace, *args, **kwargs)\n\n    @deprecate_nonkeyword_arguments(version=None, allowed_args=[\"self\", \"method\"])\n    def interpolate(\n        self: DataFrame,\n        method: str = \"linear\",\n        axis: Axis = 0,\n        limit: int | None = None,\n        inplace: bool = False,\n        limit_direction: str | None = None,\n        limit_area: str | None = None,\n        downcast: str | None = None,\n        **kwargs,\n    ) -> DataFrame | None:\n        return super().interpolate(\n            method,\n            axis,\n            limit,\n            inplace,\n            limit_direction,\n            limit_area,\n            downcast,\n            **kwargs,\n        )\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"where\" incompatible with supertype \"NDFrame\"\n    @deprecate_kwarg(old_arg_name=\"errors\", new_arg_name=None)\n    @deprecate_nonkeyword_arguments(\n        version=None, allowed_args=[\"self\", \"cond\", \"other\"]\n    )\n    def where(  # type: ignore[override]\n        self,\n        cond,\n        other=lib.no_default,\n        inplace: bool = False,\n        axis: Axis | None = None,\n        level: Level = None,\n        errors: IgnoreRaise | lib.NoDefault = \"raise\",\n        try_cast: bool | lib.NoDefault = lib.no_default,\n    ) -> DataFrame | None:\n        return super().where(\n            cond,\n            other,\n            inplace=inplace,\n            axis=axis,\n            level=level,\n            try_cast=try_cast,\n        )\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> DataFrame:\n        ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n        errors: IgnoreRaise | lib.NoDefault = ...,\n        try_cast: bool | lib.NoDefault = ...,\n    ) -> DataFrame | None:\n        ...\n\n    # error: Signature of \"mask\" incompatible with supertype \"NDFrame\"\n    @deprecate_kwarg(old_arg_name=\"errors\", new_arg_name=None)\n    @deprecate_nonkeyword_arguments(\n        version=None, allowed_args=[\"self\", \"cond\", \"other\"]\n    )\n    def mask(  # type: ignore[override]\n        self,\n        cond,\n        other=np.nan,\n        inplace: bool = False,\n        axis: Axis | None = None,\n        level: Level = None,\n        errors: IgnoreRaise | lib.NoDefault = \"raise\",\n        try_cast: bool | lib.NoDefault = lib.no_default,\n    ) -> DataFrame | None:\n        return super().mask(\n            cond,\n            other,\n            inplace=inplace,\n            axis=axis,\n            level=level,\n            try_cast=try_cast,\n        )\n\n\nDataFrame._add_numeric_operations()\n\nops.add_flex_arithmetic_methods(DataFrame)\n\n\ndef _from_nested_dict(data) -> collections.defaultdict:\n    new_data: collections.defaultdict = collections.defaultdict(dict)\n    for index, s in data.items():\n        for col, v in s.items():\n            new_data[col][index] = v\n    return new_data\n\n\ndef _reindex_for_setitem(value: DataFrame | Series, index: Index) -> ArrayLike:\n    # reindex if necessary\n\n    if value.index.equals(index) or not len(index):\n        return value._values.copy()\n\n    # GH#4107\n    try:\n        reindexed_value = value.reindex(index)._values\n    except ValueError as err:\n        # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n        if not value.index.is_unique:\n            # duplicate axis\n            raise err\n\n        raise TypeError(\n            \"incompatible index of inserted column with frame index\"\n        ) from err\n    return reindexed_value\n"
    },
    {
      "filename": "pandas/core/reshape/pivot.py",
      "content": "from __future__ import annotations\n\nfrom typing import (\n    TYPE_CHECKING,\n    Callable,\n    Hashable,\n    Sequence,\n    cast,\n)\n\nimport numpy as np\n\nfrom pandas._libs import lib\nfrom pandas._typing import (\n    AggFuncType,\n    AggFuncTypeBase,\n    AggFuncTypeDict,\n    IndexLabel,\n)\nfrom pandas.util._decorators import (\n    Appender,\n    Substitution,\n    deprecate_nonkeyword_arguments,\n)\n\nfrom pandas.core.dtypes.cast import maybe_downcast_to_dtype\nfrom pandas.core.dtypes.common import (\n    is_integer_dtype,\n    is_list_like,\n    is_nested_list_like,\n    is_scalar,\n)\nfrom pandas.core.dtypes.generic import (\n    ABCDataFrame,\n    ABCSeries,\n)\n\nimport pandas.core.common as com\nfrom pandas.core.frame import _shared_docs\nfrom pandas.core.groupby import Grouper\nfrom pandas.core.indexes.api import (\n    Index,\n    MultiIndex,\n    get_objs_combined_axis,\n)\nfrom pandas.core.reshape.concat import concat\nfrom pandas.core.reshape.util import cartesian_product\nfrom pandas.core.series import Series\n\nif TYPE_CHECKING:\n    from pandas import DataFrame\n\n\n# Note: We need to make sure `frame` is imported before `pivot`, otherwise\n# _shared_docs['pivot_table'] will not yet exist.  TODO: Fix this dependency\n@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot_table\"], indents=1)\ndef pivot_table(\n    data: DataFrame,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc: AggFuncType = \"mean\",\n    fill_value=None,\n    margins: bool = False,\n    dropna: bool = True,\n    margins_name: str = \"All\",\n    observed: bool = False,\n    sort: bool = True,\n) -> DataFrame:\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: list[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            _table = __internal_pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n                sort=sort,\n            )\n            pieces.append(_table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        table = concat(pieces, keys=keys, axis=1)\n        return table.__finalize__(data, method=\"pivot_table\")\n\n    table = __internal_pivot_table(\n        data,\n        values,\n        index,\n        columns,\n        aggfunc,\n        fill_value,\n        margins,\n        dropna,\n        margins_name,\n        observed,\n        sort,\n    )\n    return table.__finalize__(data, method=\"pivot_table\")\n\n\ndef __internal_pivot_table(\n    data: DataFrame,\n    values,\n    index,\n    columns,\n    aggfunc: AggFuncTypeBase | AggFuncTypeDict,\n    fill_value,\n    margins: bool,\n    dropna: bool,\n    margins_name: str,\n    observed: bool,\n    sort: bool,\n) -> DataFrame:\n    \"\"\"\n    Helper of :func:`pandas.pivot_table` for any non-list ``aggfunc``.\n    \"\"\"\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed, sort=sort)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                if not isinstance(agged[v], ABCDataFrame) and isinstance(\n                    data[v].dtype, np.dtype\n                ):\n                    # exclude DataFrame case bc maybe_downcast_to_dtype expects\n                    #  ArrayLike\n                    # e.g. test_pivot_table_multiindex_columns_doctest_case\n                    #  agged.columns is a MultiIndex and 'v' is indexing only\n                    #  on its first level.\n                    agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    # GH17038, this check should only happen if index is defined (not None)\n    if table.index.nlevels > 1 and index:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if isinstance(table.index, MultiIndex):\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if isinstance(table.columns, MultiIndex):\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if sort is True and isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if values_passed and not values_multi and table.columns.nlevels > 1:\n        table = table.droplevel(0, axis=1)\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table\n\n\ndef _add_margins(\n    table: DataFrame | Series,\n    data: DataFrame,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = f'Conflicting name \"{margins_name}\" in margins'\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFrame\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: str | tuple[str, ...]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table._append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table, data, values, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    # check the result column and leave floats\n    for dtype in set(result.dtypes):\n        cols = result.select_dtypes([dtype]).columns\n        margin_dummy[cols] = margin_dummy[cols].apply(\n            maybe_downcast_to_dtype, args=(dtype,)\n        )\n    result = result._append(margin_dummy)\n    result.index.names = row_names\n\n    return result\n\n\ndef _compute_grand_margin(data: DataFrame, values, aggfunc, margins_name: str = \"All\"):\n\n    if values:\n        grand_margin = {}\n        for k, v in data[values].items():\n            try:\n                if isinstance(aggfunc, str):\n                    grand_margin[k] = getattr(v, aggfunc)()\n                elif isinstance(aggfunc, dict):\n                    if isinstance(aggfunc[k], str):\n                        grand_margin[k] = getattr(v, aggfunc[k])()\n                    else:\n                        grand_margin[k] = aggfunc[k](v)\n                else:\n                    grand_margin[k] = aggfunc(v)\n            except TypeError:\n                pass\n        return grand_margin\n    else:\n        return {margins_name: aggfunc(data.index)}\n\n\ndef _generate_marginal_results(\n    table, data, values, rows, cols, aggfunc, observed, margins_name: str = \"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        table_pieces = []\n        margin_keys = []\n\n        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(rows, observed=observed).agg(aggfunc)\n            cat_axis = 1\n\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n\n                # we are going to mutate this, so need to copy!\n                piece = piece.copy()\n                piece[all_key] = margin[key]\n\n                table_pieces.append(piece)\n                margin_keys.append(all_key)\n        else:\n            from pandas import DataFrame\n\n            cat_axis = 0\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                if len(cols) > 1:\n                    all_key = _all_key(key)\n                else:\n                    all_key = margins_name\n                table_pieces.append(piece)\n                # GH31016 this is to calculate margin for each group, and assign\n                # corresponded key as index\n                transformed_piece = DataFrame(piece.apply(aggfunc)).T\n                if isinstance(piece.index, MultiIndex):\n                    # We are adding an empty level\n                    transformed_piece.index = MultiIndex.from_tuples(\n                        [all_key], names=piece.index.names + [None]\n                    )\n                else:\n                    transformed_piece.index = Index([all_key], name=piece.index.name)\n\n                # append piece for margin into table_piece\n                table_pieces.append(transformed_piece)\n                margin_keys.append(all_key)\n\n        result = concat(table_pieces, axis=cat_axis)\n\n        if len(rows) == 0:\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols) > 0:\n        row_margin = data[cols + values].groupby(cols, observed=observed).agg(aggfunc)\n        row_margin = row_margin.stack()\n\n        # slight hack\n        new_order = [len(cols)] + list(range(len(cols)))\n        row_margin.index = row_margin.index.reorder_levels(new_order)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin\n\n\ndef _generate_marginal_results_without_values(\n    table: DataFrame, data, rows, cols, aggfunc, observed, margins_name: str = \"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys: list | Index = []\n\n        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows].groupby(rows, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n\n        else:\n            margin = data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols):\n        row_margin = data[cols].groupby(cols, observed=observed).apply(aggfunc)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin\n\n\ndef _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or callable(by)\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by\n\n\n@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot\"], indents=1)\n@deprecate_nonkeyword_arguments(version=None, allowed_args=[\"data\"])\ndef pivot(\n    data: DataFrame,\n    index: IndexLabel | lib.NoDefault = lib.NoDefault,\n    columns: IndexLabel | lib.NoDefault = lib.NoDefault,\n    values: IndexLabel | lib.NoDefault = lib.NoDefault,\n) -> DataFrame:\n    if columns is lib.NoDefault:\n        raise TypeError(\"pivot() missing 1 required argument: 'columns'\")\n\n    columns_listlike = com.convert_to_list_like(columns)\n\n    # If columns is None we will create a MultiIndex level with None as name\n    # which might cause duplicated names because None is the default for\n    # level names\n    data.index.names = [\n        name if name is not None else lib.NoDefault for name in data.index.names\n    ]\n\n    indexed: DataFrame | Series\n    if values is lib.NoDefault:\n        if index is not lib.NoDefault:\n            cols = com.convert_to_list_like(index)\n        else:\n            cols = []\n\n        append = index is lib.NoDefault\n        # error: Unsupported operand types for + (\"List[Any]\" and \"ExtensionArray\")\n        # error: Unsupported left operand type for + (\"ExtensionArray\")\n        indexed = data.set_index(\n            cols + columns_listlike, append=append  # type: ignore[operator]\n        )\n    else:\n        if index is lib.NoDefault:\n            if isinstance(data.index, MultiIndex):\n                # GH 23955\n                index_list = [\n                    data.index.get_level_values(i) for i in range(data.index.nlevels)\n                ]\n            else:\n                index_list = [Series(data.index, name=data.index.name)]\n        else:\n            index_list = [data[idx] for idx in com.convert_to_list_like(index)]\n\n        data_columns = [data[col] for col in columns_listlike]\n        index_list.extend(data_columns)\n        multiindex = MultiIndex.from_arrays(index_list)\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            values = cast(Sequence[Hashable], values)\n            indexed = data._constructor(\n                data[values]._values, index=multiindex, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values]._values, index=multiindex)\n    # error: Argument 1 to \"unstack\" of \"DataFrame\" has incompatible type \"Union\n    # [List[Any], ExtensionArray, ndarray[Any, Any], Index, Series]\"; expected\n    # \"Hashable\"\n    result = indexed.unstack(columns_listlike)  # type: ignore[arg-type]\n    result.index.names = [\n        name if name is not lib.NoDefault else None for name in result.index.names\n    ]\n\n    return result\n\n\ndef crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins: bool = False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> DataFrame:\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors.\n\n    By default, computes a frequency table of the factors unless an\n    array of values and an aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Reference :ref:`the user guide <reshaping.crosstabulations>` for more examples.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    if not is_nested_list_like(index):\n        index = [index]\n    if not is_nested_list_like(columns):\n        columns = [columns]\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    # duplicate names mapped to unique names for pivot op\n    (\n        rownames_mapper,\n        unique_rownames,\n        colnames_mapper,\n        unique_colnames,\n    ) = _build_names_mapper(rownames, colnames)\n\n    from pandas import DataFrame\n\n    data = {\n        **dict(zip(unique_rownames, index)),\n        **dict(zip(unique_colnames, columns)),\n    }\n    df = DataFrame(data, index=common_idx)\n\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=unique_rownames,\n        columns=unique_colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    table = table.rename_axis(index=rownames_mapper, axis=0)\n    table = table.rename_axis(columns=colnames_mapper, axis=1)\n\n    return table\n\n\ndef _normalize(\n    table: DataFrame, normalize, margins: bool, margins_name=\"All\"\n) -> DataFrame:\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError as err:\n            raise ValueError(\"Not a valid normalize argument\") from err\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers: dict[bool | str, Callable] = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError as err:\n            raise ValueError(\"Not a valid normalize argument\") from err\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n        # keep index and column of pivoted table\n        table_index = table.index\n        table_columns = table.columns\n        last_ind_or_col = table.iloc[-1, :].name\n\n        # check if margin name is not in (for MI cases) and not equal to last\n        # index/column and save the column and index margin\n        if (margins_name not in last_ind_or_col) & (margins_name != last_ind_or_col):\n            raise ValueError(f\"{margins_name} not in pivoted DataFrame\")\n        column_margin = table.iloc[:-1, -1]\n        index_margin = table.iloc[-1, :-1]\n\n        # keep the core table\n        table = table.iloc[:-1, :-1]\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n            table.columns = table_columns\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table._append(index_margin)\n            table = table.fillna(0)\n            table.index = table_index\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table._append(index_margin)\n\n            table = table.fillna(0)\n            table.index = table_index\n            table.columns = table_columns\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table\n\n\ndef _get_names(arrs, names, prefix: str = \"row\"):\n    if names is None:\n        names = []\n        for i, arr in enumerate(arrs):\n            if isinstance(arr, ABCSeries) and arr.name is not None:\n                names.append(arr.name)\n            else:\n                names.append(f\"{prefix}_{i}\")\n    else:\n        if len(names) != len(arrs):\n            raise AssertionError(\"arrays and names must have the same length\")\n        if not isinstance(names, list):\n            names = list(names)\n\n    return names\n\n\ndef _build_names_mapper(\n    rownames: list[str], colnames: list[str]\n) -> tuple[dict[str, str], list[str], dict[str, str], list[str]]:\n    \"\"\"\n    Given the names of a DataFrame's rows and columns, returns a set of unique row\n    and column names and mappers that convert to original names.\n\n    A row or column name is replaced if it is duplicate among the rows of the inputs,\n    among the columns of the inputs or between the rows and the columns.\n\n    Parameters\n    ----------\n    rownames: list[str]\n    colnames: list[str]\n\n    Returns\n    -------\n    Tuple(Dict[str, str], List[str], Dict[str, str], List[str])\n\n    rownames_mapper: dict[str, str]\n        a dictionary with new row names as keys and original rownames as values\n    unique_rownames: list[str]\n        a list of rownames with duplicate names replaced by dummy names\n    colnames_mapper: dict[str, str]\n        a dictionary with new column names as keys and original column names as values\n    unique_colnames: list[str]\n        a list of column names with duplicate names replaced by dummy names\n\n    \"\"\"\n\n    def get_duplicates(names):\n        seen: set = set()\n        return {name for name in names if name not in seen}\n\n    shared_names = set(rownames).intersection(set(colnames))\n    dup_names = get_duplicates(rownames) | get_duplicates(colnames) | shared_names\n\n    rownames_mapper = {\n        f\"row_{i}\": name for i, name in enumerate(rownames) if name in dup_names\n    }\n    unique_rownames = [\n        f\"row_{i}\" if name in dup_names else name for i, name in enumerate(rownames)\n    ]\n\n    colnames_mapper = {\n        f\"col_{i}\": name for i, name in enumerate(colnames) if name in dup_names\n    }\n    unique_colnames = [\n        f\"col_{i}\" if name in dup_names else name for i, name in enumerate(colnames)\n    ]\n\n    return rownames_mapper, unique_rownames, colnames_mapper, unique_colnames\n"
    },
    {
      "filename": "pandas/tests/reshape/test_pivot.py",
      "content": "from datetime import (\n    date,\n    datetime,\n    timedelta,\n)\nfrom itertools import product\n\nimport numpy as np\nimport pytest\n\nfrom pandas.errors import PerformanceWarning\n\nimport pandas as pd\nfrom pandas import (\n    Categorical,\n    DataFrame,\n    Grouper,\n    Index,\n    MultiIndex,\n    Series,\n    concat,\n    date_range,\n)\nimport pandas._testing as tm\nfrom pandas.api.types import CategoricalDtype as CDT\nfrom pandas.core.reshape import reshape as reshape_lib\nfrom pandas.core.reshape.pivot import pivot_table\n\n\n@pytest.fixture(params=[True, False])\ndef dropna(request):\n    return request.param\n\n\n@pytest.fixture(params=[([0] * 4, [1] * 4), (range(0, 3), range(1, 4))])\ndef interval_values(request, closed):\n    left, right = request.param\n    return Categorical(pd.IntervalIndex.from_arrays(left, right, closed))\n\n\nclass TestPivotTable:\n    def setup_method(self):\n        self.data = DataFrame(\n            {\n                \"A\": [\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                ],\n                \"B\": [\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"two\",\n                    \"two\",\n                    \"one\",\n                ],\n                \"C\": [\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"dull\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"dull\",\n                    \"shiny\",\n                    \"shiny\",\n                    \"shiny\",\n                ],\n                \"D\": np.random.randn(11),\n                \"E\": np.random.randn(11),\n                \"F\": np.random.randn(11),\n            }\n        )\n\n    def test_pivot_table(self, observed):\n        index = [\"A\", \"B\"]\n        columns = \"C\"\n        table = pivot_table(\n            self.data, values=\"D\", index=index, columns=columns, observed=observed\n        )\n\n        table2 = self.data.pivot_table(\n            values=\"D\", index=index, columns=columns, observed=observed\n        )\n        tm.assert_frame_equal(table, table2)\n\n        # this works\n        pivot_table(self.data, values=\"D\", index=index, observed=observed)\n\n        if len(index) > 1:\n            assert table.index.names == tuple(index)\n        else:\n            assert table.index.name == index[0]\n\n        if len(columns) > 1:\n            assert table.columns.names == columns\n        else:\n            assert table.columns.name == columns[0]\n\n        expected = self.data.groupby(index + [columns])[\"D\"].agg(np.mean).unstack()\n        tm.assert_frame_equal(table, expected)\n\n    def test_pivot_table_categorical_observed_equal(self, observed):\n        # issue #24923\n        df = DataFrame(\n            {\"col1\": list(\"abcde\"), \"col2\": list(\"fghij\"), \"col3\": [1, 2, 3, 4, 5]}\n        )\n\n        expected = df.pivot_table(\n            index=\"col1\", values=\"col3\", columns=\"col2\", aggfunc=np.sum, fill_value=0\n        )\n\n        expected.index = expected.index.astype(\"category\")\n        expected.columns = expected.columns.astype(\"category\")\n\n        df.col1 = df.col1.astype(\"category\")\n        df.col2 = df.col2.astype(\"category\")\n\n        result = df.pivot_table(\n            index=\"col1\",\n            values=\"col3\",\n            columns=\"col2\",\n            aggfunc=np.sum,\n            fill_value=0,\n            observed=observed,\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_nocols(self):\n        df = DataFrame(\n            {\"rows\": [\"a\", \"b\", \"c\"], \"cols\": [\"x\", \"y\", \"z\"], \"values\": [1, 2, 3]}\n        )\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            rs = df.pivot_table(columns=\"cols\", aggfunc=np.sum)\n            xp = df.pivot_table(index=\"cols\", aggfunc=np.sum).T\n        tm.assert_frame_equal(rs, xp)\n\n        rs = df.pivot_table(columns=\"cols\", aggfunc={\"values\": \"mean\"})\n        xp = df.pivot_table(index=\"cols\", aggfunc={\"values\": \"mean\"}).T\n        tm.assert_frame_equal(rs, xp)\n\n    def test_pivot_table_dropna(self):\n        df = DataFrame(\n            {\n                \"amount\": {0: 60000, 1: 100000, 2: 50000, 3: 30000},\n                \"customer\": {0: \"A\", 1: \"A\", 2: \"B\", 3: \"C\"},\n                \"month\": {0: 201307, 1: 201309, 2: 201308, 3: 201310},\n                \"product\": {0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\"},\n                \"quantity\": {0: 2000000, 1: 500000, 2: 1000000, 3: 1000000},\n            }\n        )\n        pv_col = df.pivot_table(\n            \"quantity\", \"month\", [\"customer\", \"product\"], dropna=False\n        )\n        pv_ind = df.pivot_table(\n            \"quantity\", [\"customer\", \"product\"], \"month\", dropna=False\n        )\n\n        m = MultiIndex.from_tuples(\n            [\n                (\"A\", \"a\"),\n                (\"A\", \"b\"),\n                (\"A\", \"c\"),\n                (\"A\", \"d\"),\n                (\"B\", \"a\"),\n                (\"B\", \"b\"),\n                (\"B\", \"c\"),\n                (\"B\", \"d\"),\n                (\"C\", \"a\"),\n                (\"C\", \"b\"),\n                (\"C\", \"c\"),\n                (\"C\", \"d\"),\n            ],\n            names=[\"customer\", \"product\"],\n        )\n        tm.assert_index_equal(pv_col.columns, m)\n        tm.assert_index_equal(pv_ind.index, m)\n\n    def test_pivot_table_categorical(self):\n\n        cat1 = Categorical(\n            [\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"z\"], ordered=True\n        )\n        cat2 = Categorical(\n            [\"c\", \"d\", \"c\", \"d\"], categories=[\"c\", \"d\", \"y\"], ordered=True\n        )\n        df = DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n        result = pivot_table(df, values=\"values\", index=[\"A\", \"B\"], dropna=True)\n\n        exp_index = MultiIndex.from_arrays([cat1, cat2], names=[\"A\", \"B\"])\n        expected = DataFrame({\"values\": [1, 2, 3, 4]}, index=exp_index)\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_dropna_categoricals(self, dropna):\n        # GH 15193\n        categories = [\"a\", \"b\", \"c\", \"d\"]\n\n        df = DataFrame(\n            {\n                \"A\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"],\n                \"B\": [1, 2, 3, 1, 2, 3, 1, 2, 3],\n                \"C\": range(0, 9),\n            }\n        )\n\n        df[\"A\"] = df[\"A\"].astype(CDT(categories, ordered=False))\n        result = df.pivot_table(index=\"B\", columns=\"A\", values=\"C\", dropna=dropna)\n        expected_columns = Series([\"a\", \"b\", \"c\"], name=\"A\")\n        expected_columns = expected_columns.astype(CDT(categories, ordered=False))\n        expected_index = Series([1, 2, 3], name=\"B\")\n        expected = DataFrame(\n            [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n            index=expected_index,\n            columns=expected_columns,\n        )\n        if not dropna:\n            # add back the non observed to compare\n            expected = expected.reindex(columns=Categorical(categories)).astype(\"float\")\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_with_non_observable_dropna(self, dropna):\n        # gh-21133\n        df = DataFrame(\n            {\n                \"A\": Categorical(\n                    [np.nan, \"low\", \"high\", \"low\", \"high\"],\n                    categories=[\"low\", \"high\"],\n                    ordered=True,\n                ),\n                \"B\": [0.0, 1.0, 2.0, 3.0, 4.0],\n            }\n        )\n\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = DataFrame(\n            {\"B\": [2.0, 3.0]},\n            index=Index(\n                Categorical.from_codes(\n                    [0, 1], categories=[\"low\", \"high\"], ordered=True\n                ),\n                name=\"A\",\n            ),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_with_non_observable_dropna_multi_cat(self, dropna):\n        # gh-21378\n        df = DataFrame(\n            {\n                \"A\": Categorical(\n                    [\"left\", \"low\", \"high\", \"low\", \"high\"],\n                    categories=[\"low\", \"high\", \"left\"],\n                    ordered=True,\n                ),\n                \"B\": range(5),\n            }\n        )\n\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = DataFrame(\n            {\"B\": [2, 3, 0]},\n            index=Index(\n                Categorical.from_codes(\n                    [0, 1, 2], categories=[\"low\", \"high\", \"left\"], ordered=True\n                ),\n                name=\"A\",\n            ),\n        )\n        if not dropna:\n            expected[\"B\"] = expected[\"B\"].astype(float)\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_with_interval_index(self, interval_values, dropna):\n        # GH 25814\n        df = DataFrame({\"A\": interval_values, \"B\": 1})\n        result = df.pivot_table(index=\"A\", values=\"B\", dropna=dropna)\n        expected = DataFrame({\"B\": 1}, index=Index(interval_values.unique(), name=\"A\"))\n        if not dropna:\n            expected = expected.astype(float)\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_with_interval_index_margins(self):\n        # GH 25815\n        ordered_cat = pd.IntervalIndex.from_arrays([0, 0, 1, 1], [1, 1, 2, 2])\n        df = DataFrame(\n            {\n                \"A\": np.arange(4, 0, -1, dtype=np.intp),\n                \"B\": [\"a\", \"b\", \"a\", \"b\"],\n                \"C\": Categorical(ordered_cat, ordered=True).sort_values(\n                    ascending=False\n                ),\n            }\n        )\n\n        pivot_tab = pivot_table(\n            df, index=\"C\", columns=\"B\", values=\"A\", aggfunc=\"sum\", margins=True\n        )\n\n        result = pivot_tab[\"All\"]\n        expected = Series(\n            [3, 7, 10],\n            index=Index([pd.Interval(0, 1), pd.Interval(1, 2), \"All\"], name=\"C\"),\n            name=\"All\",\n            dtype=np.intp,\n        )\n        tm.assert_series_equal(result, expected)\n\n    def test_pass_array(self):\n        result = self.data.pivot_table(\"D\", index=self.data.A, columns=self.data.C)\n        expected = self.data.pivot_table(\"D\", index=\"A\", columns=\"C\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_pass_function(self):\n        result = self.data.pivot_table(\"D\", index=lambda x: x // 5, columns=self.data.C)\n        expected = self.data.pivot_table(\"D\", index=self.data.index // 5, columns=\"C\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_multiple(self):\n        index = [\"A\", \"B\"]\n        columns = \"C\"\n        table = pivot_table(self.data, index=index, columns=columns)\n        expected = self.data.groupby(index + [columns]).agg(np.mean).unstack()\n        tm.assert_frame_equal(table, expected)\n\n    def test_pivot_dtypes(self):\n\n        # can convert dtypes\n        f = DataFrame(\n            {\n                \"a\": [\"cat\", \"bat\", \"cat\", \"bat\"],\n                \"v\": [1, 2, 3, 4],\n                \"i\": [\"a\", \"b\", \"a\", \"b\"],\n            }\n        )\n        assert f.dtypes[\"v\"] == \"int64\"\n\n        z = pivot_table(\n            f, values=\"v\", index=[\"a\"], columns=[\"i\"], fill_value=0, aggfunc=np.sum\n        )\n        result = z.dtypes\n        expected = Series([np.dtype(\"int64\")] * 2, index=Index(list(\"ab\"), name=\"i\"))\n        tm.assert_series_equal(result, expected)\n\n        # cannot convert dtypes\n        f = DataFrame(\n            {\n                \"a\": [\"cat\", \"bat\", \"cat\", \"bat\"],\n                \"v\": [1.5, 2.5, 3.5, 4.5],\n                \"i\": [\"a\", \"b\", \"a\", \"b\"],\n            }\n        )\n        assert f.dtypes[\"v\"] == \"float64\"\n\n        z = pivot_table(\n            f, values=\"v\", index=[\"a\"], columns=[\"i\"], fill_value=0, aggfunc=np.mean\n        )\n        result = z.dtypes\n        expected = Series([np.dtype(\"float64\")] * 2, index=Index(list(\"ab\"), name=\"i\"))\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"columns,values\",\n        [\n            (\"bool1\", [\"float1\", \"float2\"]),\n            (\"bool1\", [\"float1\", \"float2\", \"bool1\"]),\n            (\"bool2\", [\"float1\", \"float2\", \"bool1\"]),\n        ],\n    )\n    def test_pivot_preserve_dtypes(self, columns, values):\n        # GH 7142 regression test\n        v = np.arange(5, dtype=np.float64)\n        df = DataFrame(\n            {\"float1\": v, \"float2\": v + 2.0, \"bool1\": v <= 2, \"bool2\": v <= 3}\n        )\n\n        df_res = df.reset_index().pivot_table(\n            index=\"index\", columns=columns, values=values\n        )\n\n        result = dict(df_res.dtypes)\n        expected = {col: np.dtype(\"float64\") for col in df_res}\n        assert result == expected\n\n    def test_pivot_no_values(self):\n        # GH 14380\n        idx = pd.DatetimeIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-01-02\", \"2011-01-01\", \"2011-01-02\"]\n        )\n        df = DataFrame({\"A\": [1, 2, 3, 4, 5]}, index=idx)\n        res = df.pivot_table(index=df.index.month, columns=df.index.day)\n\n        exp_columns = MultiIndex.from_tuples([(\"A\", 1), (\"A\", 2)])\n        exp = DataFrame([[2.5, 4.0], [2.0, np.nan]], index=[1, 2], columns=exp_columns)\n        tm.assert_frame_equal(res, exp)\n\n        df = DataFrame(\n            {\n                \"A\": [1, 2, 3, 4, 5],\n                \"dt\": date_range(\"2011-01-01\", freq=\"D\", periods=5),\n            },\n            index=idx,\n        )\n        res = df.pivot_table(index=df.index.month, columns=Grouper(key=\"dt\", freq=\"M\"))\n        exp_columns = MultiIndex.from_tuples([(\"A\", pd.Timestamp(\"2011-01-31\"))])\n        exp_columns.names = [None, \"dt\"]\n        exp = DataFrame([3.25, 2.0], index=[1, 2], columns=exp_columns)\n        tm.assert_frame_equal(res, exp)\n\n        res = df.pivot_table(\n            index=Grouper(freq=\"A\"), columns=Grouper(key=\"dt\", freq=\"M\")\n        )\n        exp = DataFrame(\n            [3], index=pd.DatetimeIndex([\"2011-12-31\"], freq=\"A\"), columns=exp_columns\n        )\n        tm.assert_frame_equal(res, exp)\n\n    def test_pivot_multi_values(self):\n        result = pivot_table(\n            self.data, values=[\"D\", \"E\"], index=\"A\", columns=[\"B\", \"C\"], fill_value=0\n        )\n        expected = pivot_table(\n            self.data.drop([\"F\"], axis=1), index=\"A\", columns=[\"B\", \"C\"], fill_value=0\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_multi_functions(self):\n        f = lambda func: pivot_table(\n            self.data, values=[\"D\", \"E\"], index=[\"A\", \"B\"], columns=\"C\", aggfunc=func\n        )\n        result = f([np.mean, np.std])\n        means = f(np.mean)\n        stds = f(np.std)\n        expected = concat([means, stds], keys=[\"mean\", \"std\"], axis=1)\n        tm.assert_frame_equal(result, expected)\n\n        # margins not supported??\n        f = lambda func: pivot_table(\n            self.data,\n            values=[\"D\", \"E\"],\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            aggfunc=func,\n            margins=True,\n        )\n        result = f([np.mean, np.std])\n        means = f(np.mean)\n        stds = f(np.std)\n        expected = concat([means, stds], keys=[\"mean\", \"std\"], axis=1)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_index_with_nan(self, method):\n        # GH 3588\n        nan = np.nan\n        df = DataFrame(\n            {\n                \"a\": [\"R1\", \"R2\", nan, \"R4\"],\n                \"b\": [\"C1\", \"C2\", \"C3\", \"C4\"],\n                \"c\": [10, 15, 17, 20],\n            }\n        )\n        if method:\n            with tm.assert_produces_warning(FutureWarning):\n                result = df.pivot(\"a\", columns=\"b\", values=\"c\")\n        else:\n            with tm.assert_produces_warning(FutureWarning):\n                result = pd.pivot(df, \"a\", columns=\"b\", values=\"c\")\n        expected = DataFrame(\n            [\n                [nan, nan, 17, nan],\n                [10, nan, nan, nan],\n                [nan, 15, nan, nan],\n                [nan, nan, nan, 20],\n            ],\n            index=Index([nan, \"R1\", \"R2\", \"R4\"], name=\"a\"),\n            columns=Index([\"C1\", \"C2\", \"C3\", \"C4\"], name=\"b\"),\n        )\n        tm.assert_frame_equal(result, expected)\n        tm.assert_frame_equal(df.pivot(index=\"b\", columns=\"a\", values=\"c\"), expected.T)\n\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_index_with_nan_dates(self, method):\n        # GH9491\n        df = DataFrame(\n            {\n                \"a\": date_range(\"2014-02-01\", periods=6, freq=\"D\"),\n                \"c\": 100 + np.arange(6),\n            }\n        )\n        df[\"b\"] = df[\"a\"] - pd.Timestamp(\"2014-02-02\")\n        df.loc[1, \"a\"] = df.loc[3, \"a\"] = np.nan\n        df.loc[1, \"b\"] = df.loc[4, \"b\"] = np.nan\n\n        if method:\n            pv = df.pivot(index=\"a\", columns=\"b\", values=\"c\")\n        else:\n            pv = pd.pivot(df, index=\"a\", columns=\"b\", values=\"c\")\n        assert pv.notna().values.sum() == len(df)\n\n        for _, row in df.iterrows():\n            assert pv.loc[row[\"a\"], row[\"b\"]] == row[\"c\"]\n\n        if method:\n            result = df.pivot(index=\"b\", columns=\"a\", values=\"c\")\n        else:\n            result = pd.pivot(df, index=\"b\", columns=\"a\", values=\"c\")\n        tm.assert_frame_equal(result, pv.T)\n\n    @pytest.mark.filterwarnings(\"ignore:Timestamp.freq is deprecated:FutureWarning\")\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_with_tz(self, method):\n        # GH 5878\n        df = DataFrame(\n            {\n                \"dt1\": [\n                    datetime(2013, 1, 1, 9, 0),\n                    datetime(2013, 1, 2, 9, 0),\n                    datetime(2013, 1, 1, 9, 0),\n                    datetime(2013, 1, 2, 9, 0),\n                ],\n                \"dt2\": [\n                    datetime(2014, 1, 1, 9, 0),\n                    datetime(2014, 1, 1, 9, 0),\n                    datetime(2014, 1, 2, 9, 0),\n                    datetime(2014, 1, 2, 9, 0),\n                ],\n                \"data1\": np.arange(4, dtype=\"int64\"),\n                \"data2\": np.arange(4, dtype=\"int64\"),\n            }\n        )\n\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d, tz=\"US/Pacific\"))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d, tz=\"Asia/Tokyo\"))\n\n        exp_col1 = Index([\"data1\", \"data1\", \"data2\", \"data2\"])\n        exp_col2 = pd.DatetimeIndex(\n            [\"2014/01/01 09:00\", \"2014/01/02 09:00\"] * 2, name=\"dt2\", tz=\"Asia/Tokyo\"\n        )\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame(\n            [[0, 2, 0, 2], [1, 3, 1, 3]],\n            index=pd.DatetimeIndex(\n                [\"2013/01/01 09:00\", \"2013/01/02 09:00\"], name=\"dt1\", tz=\"US/Pacific\"\n            ),\n            columns=exp_col,\n        )\n\n        if method:\n            pv = df.pivot(index=\"dt1\", columns=\"dt2\")\n        else:\n            pv = pd.pivot(df, index=\"dt1\", columns=\"dt2\")\n        tm.assert_frame_equal(pv, expected)\n\n        expected = DataFrame(\n            [[0, 2], [1, 3]],\n            index=pd.DatetimeIndex(\n                [\"2013/01/01 09:00\", \"2013/01/02 09:00\"], name=\"dt1\", tz=\"US/Pacific\"\n            ),\n            columns=pd.DatetimeIndex(\n                [\"2014/01/01 09:00\", \"2014/01/02 09:00\"], name=\"dt2\", tz=\"Asia/Tokyo\"\n            ),\n        )\n\n        if method:\n            pv = df.pivot(index=\"dt1\", columns=\"dt2\", values=\"data1\")\n        else:\n            pv = pd.pivot(df, index=\"dt1\", columns=\"dt2\", values=\"data1\")\n        tm.assert_frame_equal(pv, expected)\n\n    def test_pivot_tz_in_values(self):\n        # GH 14948\n        df = DataFrame(\n            [\n                {\n                    \"uid\": \"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 13:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": \"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 08:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": \"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-12 14:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": \"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-25 11:00:00-0700\", tz=\"US/Pacific\"),\n                },\n                {\n                    \"uid\": \"aa\",\n                    \"ts\": pd.Timestamp(\"2016-08-25 13:00:00-0700\", tz=\"US/Pacific\"),\n                },\n            ]\n        )\n\n        df = df.set_index(\"ts\").reset_index()\n        mins = df.ts.map(lambda x: x.replace(hour=0, minute=0, second=0, microsecond=0))\n\n        result = pivot_table(\n            df.set_index(\"ts\").reset_index(),\n            values=\"ts\",\n            index=[\"uid\"],\n            columns=[mins],\n            aggfunc=np.min,\n        )\n        expected = DataFrame(\n            [\n                [\n                    pd.Timestamp(\"2016-08-12 08:00:00-0700\", tz=\"US/Pacific\"),\n                    pd.Timestamp(\"2016-08-25 11:00:00-0700\", tz=\"US/Pacific\"),\n                ]\n            ],\n            index=Index([\"aa\"], name=\"uid\"),\n            columns=pd.DatetimeIndex(\n                [\n                    pd.Timestamp(\"2016-08-12 00:00:00\", tz=\"US/Pacific\"),\n                    pd.Timestamp(\"2016-08-25 00:00:00\", tz=\"US/Pacific\"),\n                ],\n                name=\"ts\",\n            ),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_periods(self, method):\n        df = DataFrame(\n            {\n                \"p1\": [\n                    pd.Period(\"2013-01-01\", \"D\"),\n                    pd.Period(\"2013-01-02\", \"D\"),\n                    pd.Period(\"2013-01-01\", \"D\"),\n                    pd.Period(\"2013-01-02\", \"D\"),\n                ],\n                \"p2\": [\n                    pd.Period(\"2013-01\", \"M\"),\n                    pd.Period(\"2013-01\", \"M\"),\n                    pd.Period(\"2013-02\", \"M\"),\n                    pd.Period(\"2013-02\", \"M\"),\n                ],\n                \"data1\": np.arange(4, dtype=\"int64\"),\n                \"data2\": np.arange(4, dtype=\"int64\"),\n            }\n        )\n\n        exp_col1 = Index([\"data1\", \"data1\", \"data2\", \"data2\"])\n        exp_col2 = pd.PeriodIndex([\"2013-01\", \"2013-02\"] * 2, name=\"p2\", freq=\"M\")\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame(\n            [[0, 2, 0, 2], [1, 3, 1, 3]],\n            index=pd.PeriodIndex([\"2013-01-01\", \"2013-01-02\"], name=\"p1\", freq=\"D\"),\n            columns=exp_col,\n        )\n        if method:\n            pv = df.pivot(index=\"p1\", columns=\"p2\")\n        else:\n            pv = pd.pivot(df, index=\"p1\", columns=\"p2\")\n        tm.assert_frame_equal(pv, expected)\n\n        expected = DataFrame(\n            [[0, 2], [1, 3]],\n            index=pd.PeriodIndex([\"2013-01-01\", \"2013-01-02\"], name=\"p1\", freq=\"D\"),\n            columns=pd.PeriodIndex([\"2013-01\", \"2013-02\"], name=\"p2\", freq=\"M\"),\n        )\n        if method:\n            pv = df.pivot(index=\"p1\", columns=\"p2\", values=\"data1\")\n        else:\n            pv = pd.pivot(df, index=\"p1\", columns=\"p2\", values=\"data1\")\n        tm.assert_frame_equal(pv, expected)\n\n    def test_pivot_periods_with_margins(self):\n        # GH 28323\n        df = DataFrame(\n            {\n                \"a\": [1, 1, 2, 2],\n                \"b\": [\n                    pd.Period(\"2019Q1\"),\n                    pd.Period(\"2019Q2\"),\n                    pd.Period(\"2019Q1\"),\n                    pd.Period(\"2019Q2\"),\n                ],\n                \"x\": 1.0,\n            }\n        )\n\n        expected = DataFrame(\n            data=1.0,\n            index=Index([1, 2, \"All\"], name=\"a\"),\n            columns=Index([pd.Period(\"2019Q1\"), pd.Period(\"2019Q2\"), \"All\"], name=\"b\"),\n        )\n\n        result = df.pivot_table(index=\"a\", columns=\"b\", values=\"x\", margins=True)\n        tm.assert_frame_equal(expected, result)\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            [\"baz\", \"zoo\"],\n            np.array([\"baz\", \"zoo\"]),\n            Series([\"baz\", \"zoo\"]),\n            Index([\"baz\", \"zoo\"]),\n        ],\n    )\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_with_list_like_values(self, values, method):\n        # issue #17160\n        df = DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n\n        if method:\n            result = df.pivot(index=\"foo\", columns=\"bar\", values=values)\n        else:\n            result = pd.pivot(df, index=\"foo\", columns=\"bar\", values=values)\n\n        data = [[1, 2, 3, \"x\", \"y\", \"z\"], [4, 5, 6, \"q\", \"w\", \"t\"]]\n        index = Index(data=[\"one\", \"two\"], name=\"foo\")\n        columns = MultiIndex(\n            levels=[[\"baz\", \"zoo\"], [\"A\", \"B\", \"C\"]],\n            codes=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]],\n            names=[None, \"bar\"],\n        )\n        expected = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            [\"bar\", \"baz\"],\n            np.array([\"bar\", \"baz\"]),\n            Series([\"bar\", \"baz\"]),\n            Index([\"bar\", \"baz\"]),\n        ],\n    )\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_with_list_like_values_nans(self, values, method):\n        # issue #17160\n        df = DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n\n        if method:\n            result = df.pivot(index=\"zoo\", columns=\"foo\", values=values)\n        else:\n            result = pd.pivot(df, index=\"zoo\", columns=\"foo\", values=values)\n\n        data = [\n            [np.nan, \"A\", np.nan, 4],\n            [np.nan, \"C\", np.nan, 6],\n            [np.nan, \"B\", np.nan, 5],\n            [\"A\", np.nan, 1, np.nan],\n            [\"B\", np.nan, 2, np.nan],\n            [\"C\", np.nan, 3, np.nan],\n        ]\n        index = Index(data=[\"q\", \"t\", \"w\", \"x\", \"y\", \"z\"], name=\"zoo\")\n        columns = MultiIndex(\n            levels=[[\"bar\", \"baz\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n            names=[None, \"foo\"],\n        )\n        expected = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_columns_none_raise_error(self):\n        # GH 30924\n        df = DataFrame({\"col1\": [\"a\", \"b\", \"c\"], \"col2\": [1, 2, 3], \"col3\": [1, 2, 3]})\n        msg = r\"pivot\\(\\) missing 1 required argument: 'columns'\"\n        with pytest.raises(TypeError, match=msg):\n            df.pivot(index=\"col1\", values=\"col3\")\n\n    @pytest.mark.xfail(\n        reason=\"MultiIndexed unstack with tuple names fails with KeyError GH#19966\"\n    )\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_with_multiindex(self, method):\n        # issue #17160\n        index = Index(data=[0, 1, 2, 3, 4, 5])\n        data = [\n            [\"one\", \"A\", 1, \"x\"],\n            [\"one\", \"B\", 2, \"y\"],\n            [\"one\", \"C\", 3, \"z\"],\n            [\"two\", \"A\", 4, \"q\"],\n            [\"two\", \"B\", 5, \"w\"],\n            [\"two\", \"C\", 6, \"t\"],\n        ]\n        columns = MultiIndex(\n            levels=[[\"bar\", \"baz\"], [\"first\", \"second\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n        )\n        df = DataFrame(data=data, index=index, columns=columns, dtype=\"object\")\n        if method:\n            result = df.pivot(\n                index=(\"bar\", \"first\"),\n                columns=(\"bar\", \"second\"),\n                values=(\"baz\", \"first\"),\n            )\n        else:\n            result = pd.pivot(\n                df,\n                index=(\"bar\", \"first\"),\n                columns=(\"bar\", \"second\"),\n                values=(\"baz\", \"first\"),\n            )\n\n        data = {\n            \"A\": Series([1, 4], index=[\"one\", \"two\"]),\n            \"B\": Series([2, 5], index=[\"one\", \"two\"]),\n            \"C\": Series([3, 6], index=[\"one\", \"two\"]),\n        }\n        expected = DataFrame(data)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [True, False])\n    def test_pivot_with_tuple_of_values(self, method):\n        # issue #17160\n        df = DataFrame(\n            {\n                \"foo\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"two\"],\n                \"bar\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n                \"baz\": [1, 2, 3, 4, 5, 6],\n                \"zoo\": [\"x\", \"y\", \"z\", \"q\", \"w\", \"t\"],\n            }\n        )\n        with pytest.raises(KeyError, match=r\"^\\('bar', 'baz'\\)$\"):\n            # tuple is seen as a single column name\n            if method:\n                df.pivot(index=\"zoo\", columns=\"foo\", values=(\"bar\", \"baz\"))\n            else:\n                pd.pivot(df, index=\"zoo\", columns=\"foo\", values=(\"bar\", \"baz\"))\n\n    def _check_output(\n        self, result, values_col, index=[\"A\", \"B\"], columns=[\"C\"], margins_col=\"All\"\n    ):\n        col_margins = result.loc[result.index[:-1], margins_col]\n        expected_col_margins = self.data.groupby(index)[values_col].mean()\n        tm.assert_series_equal(col_margins, expected_col_margins, check_names=False)\n        assert col_margins.name == margins_col\n\n        result = result.sort_index()\n        index_margins = result.loc[(margins_col, \"\")].iloc[:-1]\n\n        expected_ix_margins = self.data.groupby(columns)[values_col].mean()\n        tm.assert_series_equal(index_margins, expected_ix_margins, check_names=False)\n        assert index_margins.name == (margins_col, \"\")\n\n        grand_total_margins = result.loc[(margins_col, \"\"), margins_col]\n        expected_total_margins = self.data[values_col].mean()\n        assert grand_total_margins == expected_total_margins\n\n    def test_margins(self):\n        # column specified\n        result = self.data.pivot_table(\n            values=\"D\", index=[\"A\", \"B\"], columns=\"C\", margins=True, aggfunc=np.mean\n        )\n        self._check_output(result, \"D\")\n\n        # Set a different margins_name (not 'All')\n        result = self.data.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=np.mean,\n            margins_name=\"Totals\",\n        )\n        self._check_output(result, \"D\", margins_col=\"Totals\")\n\n        # no column specified\n        table = self.data.pivot_table(\n            index=[\"A\", \"B\"], columns=\"C\", margins=True, aggfunc=np.mean\n        )\n        for value_col in table.columns.levels[0]:\n            self._check_output(table[value_col], value_col)\n\n    def test_no_col(self):\n        # no col\n\n        # to help with a buglet\n        self.data.columns = [k * 2 for k in self.data.columns]\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            table = self.data.pivot_table(\n                index=[\"AA\", \"BB\"], margins=True, aggfunc=np.mean\n            )\n        for value_col in table.columns:\n            totals = table.loc[(\"All\", \"\"), value_col]\n            assert totals == self.data[value_col].mean()\n\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            table = self.data.pivot_table(\n                index=[\"AA\", \"BB\"], margins=True, aggfunc=\"mean\"\n            )\n        for item in [\"DD\", \"EE\", \"FF\"]:\n            totals = table.loc[(\"All\", \"\"), item]\n            assert totals == self.data[item].mean()\n\n    @pytest.mark.parametrize(\n        \"columns, aggfunc, values, expected_columns\",\n        [\n            (\n                \"A\",\n                np.mean,\n                [[5.5, 5.5, 2.2, 2.2], [8.0, 8.0, 4.4, 4.4]],\n                Index([\"bar\", \"All\", \"foo\", \"All\"], name=\"A\"),\n            ),\n            (\n                [\"A\", \"B\"],\n                \"sum\",\n                [[9, 13, 22, 5, 6, 11], [14, 18, 32, 11, 11, 22]],\n                MultiIndex.from_tuples(\n                    [\n                        (\"bar\", \"one\"),\n                        (\"bar\", \"two\"),\n                        (\"bar\", \"All\"),\n                        (\"foo\", \"one\"),\n                        (\"foo\", \"two\"),\n                        (\"foo\", \"All\"),\n                    ],\n                    names=[\"A\", \"B\"],\n                ),\n            ),\n        ],\n    )\n    def test_margin_with_only_columns_defined(\n        self, columns, aggfunc, values, expected_columns\n    ):\n        # GH 31016\n        df = DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df.pivot_table(columns=columns, margins=True, aggfunc=aggfunc)\n        expected = DataFrame(values, index=Index([\"D\", \"E\"]), columns=expected_columns)\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_margins_dtype(self):\n        # GH 17013\n\n        df = self.data.copy()\n        df[[\"D\", \"E\", \"F\"]] = np.arange(len(df) * 3).reshape(len(df), 3).astype(\"i8\")\n\n        mi_val = list(product([\"bar\", \"foo\"], [\"one\", \"two\"])) + [(\"All\", \"\")]\n        mi = MultiIndex.from_tuples(mi_val, names=(\"A\", \"B\"))\n        expected = DataFrame(\n            {\"dull\": [12, 21, 3, 9, 45], \"shiny\": [33, 0, 36, 51, 120]}, index=mi\n        ).rename_axis(\"C\", axis=1)\n        expected[\"All\"] = expected[\"dull\"] + expected[\"shiny\"]\n\n        result = df.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=np.sum,\n            fill_value=0,\n        )\n\n        tm.assert_frame_equal(expected, result)\n\n    def test_margins_dtype_len(self):\n        mi_val = list(product([\"bar\", \"foo\"], [\"one\", \"two\"])) + [(\"All\", \"\")]\n        mi = MultiIndex.from_tuples(mi_val, names=(\"A\", \"B\"))\n        expected = DataFrame(\n            {\"dull\": [1, 1, 2, 1, 5], \"shiny\": [2, 0, 2, 2, 6]}, index=mi\n        ).rename_axis(\"C\", axis=1)\n        expected[\"All\"] = expected[\"dull\"] + expected[\"shiny\"]\n\n        result = self.data.pivot_table(\n            values=\"D\",\n            index=[\"A\", \"B\"],\n            columns=\"C\",\n            margins=True,\n            aggfunc=len,\n            fill_value=0,\n        )\n\n        tm.assert_frame_equal(expected, result)\n\n    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n\n        result = df2.pivot_table(values=\"v\", columns=cols)\n        expected = DataFrame(\n            [[4, 5, 6]],\n            columns=MultiIndex.from_tuples([(1, 1), (2, 2), (3, 3)], names=cols),\n            index=Index([\"v\"]),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_retains_tz(self):\n        dti = date_range(\"2016-01-01\", periods=3, tz=\"Europe/Amsterdam\")\n        df = DataFrame({\"A\": np.random.randn(3), \"B\": np.random.randn(3), \"C\": dti})\n        result = df.pivot_table(index=[\"B\", \"C\"], dropna=False)\n\n        # check tz retention\n        assert result.index.levels[1].equals(dti)\n\n    def test_pivot_integer_columns(self):\n        # caused by upstream bug in unstack\n\n        d = date.min\n        data = list(\n            product(\n                [\"foo\", \"bar\"],\n                [\"A\", \"B\", \"C\"],\n                [\"x1\", \"x2\"],\n                [d + timedelta(i) for i in range(20)],\n                [1.0],\n            )\n        )\n        df = DataFrame(data)\n        table = df.pivot_table(values=4, index=[0, 1, 3], columns=[2])\n\n        df2 = df.rename(columns=str)\n        table2 = df2.pivot_table(values=\"4\", index=[\"0\", \"1\", \"3\"], columns=[\"2\"])\n\n        tm.assert_frame_equal(table, table2, check_names=False)\n\n    def test_pivot_no_level_overlap(self):\n        # GH #1181\n\n        data = DataFrame(\n            {\n                \"a\": [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\"] * 2,\n                \"b\": [0, 0, 0, 0, 1, 1, 1, 1] * 2,\n                \"c\": ([\"foo\"] * 4 + [\"bar\"] * 4) * 2,\n                \"value\": np.random.randn(16),\n            }\n        )\n\n        table = data.pivot_table(\"value\", index=\"a\", columns=[\"b\", \"c\"])\n\n        grouped = data.groupby([\"a\", \"b\", \"c\"])[\"value\"].mean()\n        expected = grouped.unstack(\"b\").unstack(\"c\").dropna(axis=1, how=\"all\")\n        tm.assert_frame_equal(table, expected)\n\n    def test_pivot_columns_lexsorted(self):\n\n        n = 10000\n\n        dtype = np.dtype(\n            [\n                (\"Index\", object),\n                (\"Symbol\", object),\n                (\"Year\", int),\n                (\"Month\", int),\n                (\"Day\", int),\n                (\"Quantity\", int),\n                (\"Price\", float),\n            ]\n        )\n\n        products = np.array(\n            [\n                (\"SP500\", \"ADBE\"),\n                (\"SP500\", \"NVDA\"),\n                (\"SP500\", \"ORCL\"),\n                (\"NDQ100\", \"AAPL\"),\n                (\"NDQ100\", \"MSFT\"),\n                (\"NDQ100\", \"GOOG\"),\n                (\"FTSE\", \"DGE.L\"),\n                (\"FTSE\", \"TSCO.L\"),\n                (\"FTSE\", \"GSK.L\"),\n            ],\n            dtype=[(\"Index\", object), (\"Symbol\", object)],\n        )\n        items = np.empty(n, dtype=dtype)\n        iproduct = np.random.randint(0, len(products), n)\n        items[\"Index\"] = products[\"Index\"][iproduct]\n        items[\"Symbol\"] = products[\"Symbol\"][iproduct]\n        dr = date_range(date(2000, 1, 1), date(2010, 12, 31))\n        dates = dr[np.random.randint(0, len(dr), n)]\n        items[\"Year\"] = dates.year\n        items[\"Month\"] = dates.month\n        items[\"Day\"] = dates.day\n        items[\"Price\"] = np.random.lognormal(4.0, 2.0, n)\n\n        df = DataFrame(items)\n\n        pivoted = df.pivot_table(\n            \"Price\",\n            index=[\"Month\", \"Day\"],\n            columns=[\"Index\", \"Symbol\", \"Year\"],\n            aggfunc=\"mean\",\n        )\n\n        assert pivoted.columns.is_monotonic_increasing\n\n    def test_pivot_complex_aggfunc(self):\n        f = {\"D\": [\"std\"], \"E\": [\"sum\"]}\n        expected = self.data.groupby([\"A\", \"B\"]).agg(f).unstack(\"B\")\n        result = self.data.pivot_table(index=\"A\", columns=\"B\", aggfunc=f)\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_margins_no_values_no_cols(self):\n        # Regression test on pivot table: no values or cols passed.\n        result = self.data[[\"A\", \"B\"]].pivot_table(\n            index=[\"A\", \"B\"], aggfunc=len, margins=True\n        )\n        result_list = result.tolist()\n        assert sum(result_list[:-1]) == result_list[-1]\n\n    def test_margins_no_values_two_rows(self):\n        # Regression test on pivot table: no values passed but rows are a\n        # multi-index\n        result = self.data[[\"A\", \"B\", \"C\"]].pivot_table(\n            index=[\"A\", \"B\"], columns=\"C\", aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [3.0, 1.0, 4.0, 3.0, 11.0]\n\n    def test_margins_no_values_one_row_one_col(self):\n        # Regression test on pivot table: no values passed but row and col\n        # defined\n        result = self.data[[\"A\", \"B\"]].pivot_table(\n            index=\"A\", columns=\"B\", aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [4.0, 7.0, 11.0]\n\n    def test_margins_no_values_two_row_two_cols(self):\n        # Regression test on pivot table: no values passed but rows and cols\n        # are multi-indexed\n        self.data[\"D\"] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n        result = self.data[[\"A\", \"B\", \"C\", \"D\"]].pivot_table(\n            index=[\"A\", \"B\"], columns=[\"C\", \"D\"], aggfunc=len, margins=True\n        )\n        assert result.All.tolist() == [3.0, 1.0, 4.0, 3.0, 11.0]\n\n    @pytest.mark.parametrize(\"margin_name\", [\"foo\", \"one\", 666, None, [\"a\", \"b\"]])\n    def test_pivot_table_with_margins_set_margin_name(self, margin_name):\n        # see gh-3335\n        msg = (\n            f'Conflicting name \"{margin_name}\" in margins|'\n            \"margins_name argument must be a string\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            # multi-index index\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"A\", \"B\"],\n                columns=[\"C\"],\n                margins=True,\n                margins_name=margin_name,\n            )\n        with pytest.raises(ValueError, match=msg):\n            # multi-index column\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"C\"],\n                columns=[\"A\", \"B\"],\n                margins=True,\n                margins_name=margin_name,\n            )\n        with pytest.raises(ValueError, match=msg):\n            # non-multi-index index/column\n            pivot_table(\n                self.data,\n                values=\"D\",\n                index=[\"A\"],\n                columns=[\"B\"],\n                margins=True,\n                margins_name=margin_name,\n            )\n\n    def test_pivot_timegrouper(self, using_array_manager):\n        df = DataFrame(\n            {\n                \"Branch\": \"A A A A A A A B\".split(),\n                \"Buyer\": \"Carl Mark Carl Carl Joe Joe Joe Carl\".split(),\n                \"Quantity\": [1, 3, 5, 1, 8, 1, 9, 3],\n                \"Date\": [\n                    datetime(2013, 1, 1),\n                    datetime(2013, 1, 1),\n                    datetime(2013, 10, 1),\n                    datetime(2013, 10, 2),\n                    datetime(2013, 10, 1),\n                    datetime(2013, 10, 2),\n                    datetime(2013, 12, 2),\n                    datetime(2013, 12, 2),\n                ],\n            }\n        ).set_index(\"Date\")\n\n        expected = DataFrame(\n            np.array([10, 18, 3], dtype=\"int64\").reshape(1, 3),\n            index=pd.DatetimeIndex([datetime(2013, 12, 31)], freq=\"A\"),\n            columns=\"Carl Joe Mark\".split(),\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"Buyer\"\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"A\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"A\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        expected = DataFrame(\n            np.array([1, np.nan, 3, 9, 18, np.nan]).reshape(2, 3),\n            index=pd.DatetimeIndex(\n                [datetime(2013, 1, 1), datetime(2013, 7, 1)], freq=\"6MS\"\n            ),\n            columns=\"Carl Joe Mark\".split(),\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"Buyer\"\n        if using_array_manager:\n            # INFO(ArrayManager) column without NaNs can preserve int dtype\n            expected[\"Carl\"] = expected[\"Carl\"].astype(\"int64\")\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        # passing the name\n        df = df.reset_index()\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\", key=\"Date\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\", key=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        msg = \"'The grouper name foo is not found'\"\n        with pytest.raises(KeyError, match=msg):\n            pivot_table(\n                df,\n                index=Grouper(freq=\"6MS\", key=\"foo\"),\n                columns=\"Buyer\",\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n        with pytest.raises(KeyError, match=msg):\n            pivot_table(\n                df,\n                index=\"Buyer\",\n                columns=Grouper(freq=\"6MS\", key=\"foo\"),\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n\n        # passing the level\n        df = df.set_index(\"Date\")\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"6MS\", level=\"Date\"),\n            columns=\"Buyer\",\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=\"Buyer\",\n            columns=Grouper(freq=\"6MS\", level=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        msg = \"The level foo is not valid\"\n        with pytest.raises(ValueError, match=msg):\n            pivot_table(\n                df,\n                index=Grouper(freq=\"6MS\", level=\"foo\"),\n                columns=\"Buyer\",\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n        with pytest.raises(ValueError, match=msg):\n            pivot_table(\n                df,\n                index=\"Buyer\",\n                columns=Grouper(freq=\"6MS\", level=\"foo\"),\n                values=\"Quantity\",\n                aggfunc=np.sum,\n            )\n\n    def test_pivot_timegrouper_double(self):\n        # double grouper\n        df = DataFrame(\n            {\n                \"Branch\": \"A A A A A A A B\".split(),\n                \"Buyer\": \"Carl Mark Carl Carl Joe Joe Joe Carl\".split(),\n                \"Quantity\": [1, 3, 5, 1, 8, 1, 9, 3],\n                \"Date\": [\n                    datetime(2013, 11, 1, 13, 0),\n                    datetime(2013, 9, 1, 13, 5),\n                    datetime(2013, 10, 1, 20, 0),\n                    datetime(2013, 10, 2, 10, 0),\n                    datetime(2013, 11, 1, 20, 0),\n                    datetime(2013, 10, 2, 10, 0),\n                    datetime(2013, 10, 2, 12, 0),\n                    datetime(2013, 12, 5, 14, 0),\n                ],\n                \"PayDay\": [\n                    datetime(2013, 10, 4, 0, 0),\n                    datetime(2013, 10, 15, 13, 5),\n                    datetime(2013, 9, 5, 20, 0),\n                    datetime(2013, 11, 2, 10, 0),\n                    datetime(2013, 10, 7, 20, 0),\n                    datetime(2013, 9, 5, 10, 0),\n                    datetime(2013, 12, 30, 12, 0),\n                    datetime(2013, 11, 20, 14, 0),\n                ],\n            }\n        )\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"M\", key=\"Date\"),\n            columns=Grouper(freq=\"M\", key=\"PayDay\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        expected = DataFrame(\n            np.array(\n                [\n                    np.nan,\n                    3,\n                    np.nan,\n                    np.nan,\n                    6,\n                    np.nan,\n                    1,\n                    9,\n                    np.nan,\n                    9,\n                    np.nan,\n                    np.nan,\n                    np.nan,\n                    np.nan,\n                    3,\n                    np.nan,\n                ]\n            ).reshape(4, 4),\n            index=pd.DatetimeIndex(\n                [\n                    datetime(2013, 9, 30),\n                    datetime(2013, 10, 31),\n                    datetime(2013, 11, 30),\n                    datetime(2013, 12, 31),\n                ],\n                freq=\"M\",\n            ),\n            columns=pd.DatetimeIndex(\n                [\n                    datetime(2013, 9, 30),\n                    datetime(2013, 10, 31),\n                    datetime(2013, 11, 30),\n                    datetime(2013, 12, 31),\n                ],\n                freq=\"M\",\n            ),\n        )\n        expected.index.name = \"Date\"\n        expected.columns.name = \"PayDay\"\n\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=Grouper(freq=\"M\", key=\"PayDay\"),\n            columns=Grouper(freq=\"M\", key=\"Date\"),\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n        tuples = [\n            (datetime(2013, 9, 30), datetime(2013, 10, 31)),\n            (datetime(2013, 10, 31), datetime(2013, 9, 30)),\n            (datetime(2013, 10, 31), datetime(2013, 11, 30)),\n            (datetime(2013, 10, 31), datetime(2013, 12, 31)),\n            (datetime(2013, 11, 30), datetime(2013, 10, 31)),\n            (datetime(2013, 12, 31), datetime(2013, 11, 30)),\n        ]\n        idx = MultiIndex.from_tuples(tuples, names=[\"Date\", \"PayDay\"])\n        expected = DataFrame(\n            np.array(\n                [3, np.nan, 6, np.nan, 1, np.nan, 9, np.nan, 9, np.nan, np.nan, 3]\n            ).reshape(6, 2),\n            index=idx,\n            columns=[\"A\", \"B\"],\n        )\n        expected.columns.name = \"Branch\"\n\n        result = pivot_table(\n            df,\n            index=[Grouper(freq=\"M\", key=\"Date\"), Grouper(freq=\"M\", key=\"PayDay\")],\n            columns=[\"Branch\"],\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=[\"Branch\"],\n            columns=[Grouper(freq=\"M\", key=\"Date\"), Grouper(freq=\"M\", key=\"PayDay\")],\n            values=\"Quantity\",\n            aggfunc=np.sum,\n        )\n        tm.assert_frame_equal(result, expected.T)\n\n    def test_pivot_datetime_tz(self):\n        dates1 = [\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n        ]\n        dates2 = [\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n        ]\n        df = DataFrame(\n            {\n                \"label\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"],\n                \"dt1\": dates1,\n                \"dt2\": dates2,\n                \"value1\": np.arange(6, dtype=\"int64\"),\n                \"value2\": [1, 2] * 3,\n            }\n        )\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d, tz=\"US/Pacific\"))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d, tz=\"Asia/Tokyo\"))\n\n        exp_idx = pd.DatetimeIndex(\n            [\"2011-07-19 07:00:00\", \"2011-07-19 08:00:00\", \"2011-07-19 09:00:00\"],\n            tz=\"US/Pacific\",\n            name=\"dt1\",\n        )\n        exp_col1 = Index([\"value1\", \"value1\"])\n        exp_col2 = Index([\"a\", \"b\"], name=\"label\")\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2])\n        expected = DataFrame([[0, 3], [1, 4], [2, 5]], index=exp_idx, columns=exp_col)\n        result = pivot_table(df, index=[\"dt1\"], columns=[\"label\"], values=[\"value1\"])\n        tm.assert_frame_equal(result, expected)\n\n        exp_col1 = Index([\"sum\", \"sum\", \"sum\", \"sum\", \"mean\", \"mean\", \"mean\", \"mean\"])\n        exp_col2 = Index([\"value1\", \"value1\", \"value2\", \"value2\"] * 2)\n        exp_col3 = pd.DatetimeIndex(\n            [\"2013-01-01 15:00:00\", \"2013-02-01 15:00:00\"] * 4,\n            tz=\"Asia/Tokyo\",\n            name=\"dt2\",\n        )\n        exp_col = MultiIndex.from_arrays([exp_col1, exp_col2, exp_col3])\n        expected = DataFrame(\n            np.array(\n                [\n                    [0, 3, 1, 2, 0, 3, 1, 2],\n                    [1, 4, 2, 1, 1, 4, 2, 1],\n                    [2, 5, 1, 2, 2, 5, 1, 2],\n                ],\n                dtype=\"int64\",\n            ),\n            index=exp_idx,\n            columns=exp_col,\n        )\n\n        result = pivot_table(\n            df,\n            index=[\"dt1\"],\n            columns=[\"dt2\"],\n            values=[\"value1\", \"value2\"],\n            aggfunc=[np.sum, np.mean],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_dtaccessor(self):\n        # GH 8103\n        dates1 = [\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n            \"2011-07-19 07:00:00\",\n            \"2011-07-19 08:00:00\",\n            \"2011-07-19 09:00:00\",\n        ]\n        dates2 = [\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-01-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n            \"2013-02-01 15:00:00\",\n        ]\n        df = DataFrame(\n            {\n                \"label\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"],\n                \"dt1\": dates1,\n                \"dt2\": dates2,\n                \"value1\": np.arange(6, dtype=\"int64\"),\n                \"value2\": [1, 2] * 3,\n            }\n        )\n        df[\"dt1\"] = df[\"dt1\"].apply(lambda d: pd.Timestamp(d))\n        df[\"dt2\"] = df[\"dt2\"].apply(lambda d: pd.Timestamp(d))\n\n        result = pivot_table(\n            df, index=\"label\", columns=df[\"dt1\"].dt.hour, values=\"value1\"\n        )\n\n        exp_idx = Index([\"a\", \"b\"], name=\"label\")\n        expected = DataFrame(\n            {7: [0, 3], 8: [1, 4], 9: [2, 5]},\n            index=exp_idx,\n            columns=Index([7, 8, 9], name=\"dt1\"),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df, index=df[\"dt2\"].dt.month, columns=df[\"dt1\"].dt.hour, values=\"value1\"\n        )\n\n        expected = DataFrame(\n            {7: [0, 3], 8: [1, 4], 9: [2, 5]},\n            index=Index([1, 2], name=\"dt2\"),\n            columns=Index([7, 8, 9], name=\"dt1\"),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=df[\"dt2\"].dt.year.values,\n            columns=[df[\"dt1\"].dt.hour, df[\"dt2\"].dt.month],\n            values=\"value1\",\n        )\n\n        exp_col = MultiIndex.from_arrays(\n            [[7, 7, 8, 8, 9, 9], [1, 2] * 3], names=[\"dt1\", \"dt2\"]\n        )\n        expected = DataFrame(\n            np.array([[0, 3, 1, 4, 2, 5]], dtype=\"int64\"), index=[2013], columns=exp_col\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(\n            df,\n            index=np.array([\"X\", \"X\", \"X\", \"X\", \"Y\", \"Y\"]),\n            columns=[df[\"dt1\"].dt.hour, df[\"dt2\"].dt.month],\n            values=\"value1\",\n        )\n        expected = DataFrame(\n            np.array(\n                [[0, 3, 1, np.nan, 2, np.nan], [np.nan, np.nan, np.nan, 4, np.nan, 5]]\n            ),\n            index=[\"X\", \"Y\"],\n            columns=exp_col,\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"i\", range(1, 367))\n    def test_daily(self, i):\n        rng = date_range(\"1/1/2000\", \"12/31/2004\", freq=\"D\")\n        ts = Series(np.random.randn(len(rng)), index=rng)\n\n        annual = pivot_table(\n            DataFrame(ts), index=ts.index.year, columns=ts.index.dayofyear\n        )\n        annual.columns = annual.columns.droplevel(0)\n\n        doy = np.asarray(ts.index.dayofyear)\n\n        subset = ts[doy == i]\n        subset.index = subset.index.year\n\n        result = annual[i].dropna()\n        tm.assert_series_equal(result, subset, check_names=False)\n        assert result.name == i\n\n    @pytest.mark.parametrize(\"i\", range(1, 13))\n    def test_monthly(self, i):\n        rng = date_range(\"1/1/2000\", \"12/31/2004\", freq=\"M\")\n        ts = Series(np.random.randn(len(rng)), index=rng)\n\n        annual = pivot_table(DataFrame(ts), index=ts.index.year, columns=ts.index.month)\n        annual.columns = annual.columns.droplevel(0)\n\n        month = ts.index.month\n        subset = ts[month == i]\n        subset.index = subset.index.year\n        result = annual[i].dropna()\n        tm.assert_series_equal(result, subset, check_names=False)\n        assert result.name == i\n\n    def test_pivot_table_with_iterator_values(self):\n        # GH 12017\n        aggs = {\"D\": \"sum\", \"E\": \"mean\"}\n\n        pivot_values_list = pivot_table(\n            self.data, index=[\"A\"], values=list(aggs.keys()), aggfunc=aggs\n        )\n\n        pivot_values_keys = pivot_table(\n            self.data, index=[\"A\"], values=aggs.keys(), aggfunc=aggs\n        )\n        tm.assert_frame_equal(pivot_values_keys, pivot_values_list)\n\n        agg_values_gen = (value for value in aggs.keys())\n        pivot_values_gen = pivot_table(\n            self.data, index=[\"A\"], values=agg_values_gen, aggfunc=aggs\n        )\n        tm.assert_frame_equal(pivot_values_gen, pivot_values_list)\n\n    def test_pivot_table_margins_name_with_aggfunc_list(self):\n        # GH 13354\n        margins_name = \"Weekly\"\n        costs = DataFrame(\n            {\n                \"item\": [\"bacon\", \"cheese\", \"bacon\", \"cheese\"],\n                \"cost\": [2.5, 4.5, 3.2, 3.3],\n                \"day\": [\"M\", \"M\", \"T\", \"T\"],\n            }\n        )\n        table = costs.pivot_table(\n            index=\"item\",\n            columns=\"day\",\n            margins=True,\n            margins_name=margins_name,\n            aggfunc=[np.mean, max],\n        )\n        ix = Index([\"bacon\", \"cheese\", margins_name], dtype=\"object\", name=\"item\")\n        tups = [\n            (\"mean\", \"cost\", \"M\"),\n            (\"mean\", \"cost\", \"T\"),\n            (\"mean\", \"cost\", margins_name),\n            (\"max\", \"cost\", \"M\"),\n            (\"max\", \"cost\", \"T\"),\n            (\"max\", \"cost\", margins_name),\n        ]\n        cols = MultiIndex.from_tuples(tups, names=[None, None, \"day\"])\n        expected = DataFrame(table.values, index=ix, columns=cols)\n        tm.assert_frame_equal(table, expected)\n\n    def test_categorical_margins(self, observed, request):\n        if observed:\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"GH#17035 (np.mean of ints is casted back to ints)\"\n                )\n            )\n        # GH 10989\n        df = DataFrame(\n            {\"x\": np.arange(8), \"y\": np.arange(8) // 4, \"z\": np.arange(8) % 2}\n        )\n\n        expected = DataFrame([[1.0, 2.0, 1.5], [5, 6, 5.5], [3, 4, 3.5]])\n        expected.index = Index([0, 1, \"All\"], name=\"y\")\n        expected.columns = Index([0, 1, \"All\"], name=\"z\")\n\n        table = df.pivot_table(\"x\", \"y\", \"z\", dropna=observed, margins=True)\n        tm.assert_frame_equal(table, expected)\n\n    def test_categorical_margins_category(self, observed, request):\n        if observed:\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"GH#17035 (np.mean of ints is casted back to ints)\"\n                )\n            )\n        df = DataFrame(\n            {\"x\": np.arange(8), \"y\": np.arange(8) // 4, \"z\": np.arange(8) % 2}\n        )\n\n        expected = DataFrame([[1.0, 2.0, 1.5], [5, 6, 5.5], [3, 4, 3.5]])\n        expected.index = Index([0, 1, \"All\"], name=\"y\")\n        expected.columns = Index([0, 1, \"All\"], name=\"z\")\n\n        df.y = df.y.astype(\"category\")\n        df.z = df.z.astype(\"category\")\n        table = df.pivot_table(\"x\", \"y\", \"z\", dropna=observed, margins=True)\n        tm.assert_frame_equal(table, expected)\n\n    def test_margins_casted_to_float(self):\n        # GH 24893\n        df = DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pivot_table(df, index=\"D\", margins=True)\n        expected = DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_with_categorical(self, observed, ordered):\n        # gh-21370\n        idx = [np.nan, \"low\", \"high\", \"low\", np.nan]\n        col = [np.nan, \"A\", \"B\", np.nan, \"A\"]\n        df = DataFrame(\n            {\n                \"In\": Categorical(idx, categories=[\"low\", \"high\"], ordered=ordered),\n                \"Col\": Categorical(col, categories=[\"A\", \"B\"], ordered=ordered),\n                \"Val\": range(1, 6),\n            }\n        )\n        # case with index/columns/value\n        result = df.pivot_table(\n            index=\"In\", columns=\"Col\", values=\"Val\", observed=observed\n        )\n\n        expected_cols = pd.CategoricalIndex([\"A\", \"B\"], ordered=ordered, name=\"Col\")\n\n        expected = DataFrame(data=[[2.0, np.nan], [np.nan, 3.0]], columns=expected_cols)\n        expected.index = Index(\n            Categorical([\"low\", \"high\"], categories=[\"low\", \"high\"], ordered=ordered),\n            name=\"In\",\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        # case with columns/value\n        result = df.pivot_table(columns=\"Col\", values=\"Val\", observed=observed)\n\n        expected = DataFrame(\n            data=[[3.5, 3.0]], columns=expected_cols, index=Index([\"Val\"])\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_categorical_aggfunc(self, observed):\n        # GH 9534\n        df = DataFrame(\n            {\"C1\": [\"A\", \"B\", \"C\", \"C\"], \"C2\": [\"a\", \"a\", \"b\", \"b\"], \"V\": [1, 2, 3, 4]}\n        )\n        df[\"C1\"] = df[\"C1\"].astype(\"category\")\n        result = df.pivot_table(\n            \"V\", index=\"C1\", columns=\"C2\", dropna=observed, aggfunc=\"count\"\n        )\n\n        expected_index = pd.CategoricalIndex(\n            [\"A\", \"B\", \"C\"], categories=[\"A\", \"B\", \"C\"], ordered=False, name=\"C1\"\n        )\n        expected_columns = Index([\"a\", \"b\"], name=\"C2\")\n        expected_data = np.array([[1, 0], [1, 0], [0, 2]], dtype=np.int64)\n        expected = DataFrame(\n            expected_data, index=expected_index, columns=expected_columns\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_categorical_pivot_index_ordering(self, observed):\n        # GH 8731\n        df = DataFrame(\n            {\n                \"Sales\": [100, 120, 220],\n                \"Month\": [\"January\", \"January\", \"January\"],\n                \"Year\": [2013, 2014, 2013],\n            }\n        )\n        months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\",\n        ]\n        df[\"Month\"] = df[\"Month\"].astype(\"category\").cat.set_categories(months)\n        result = df.pivot_table(\n            values=\"Sales\",\n            index=\"Month\",\n            columns=\"Year\",\n            observed=observed,\n            aggfunc=\"sum\",\n        )\n        expected_columns = Index([2013, 2014], name=\"Year\", dtype=\"int64\")\n        expected_index = pd.CategoricalIndex(\n            months, categories=months, ordered=False, name=\"Month\"\n        )\n        expected_data = [[320, 120]] + [[0, 0]] * 11\n        expected = DataFrame(\n            expected_data, index=expected_index, columns=expected_columns\n        )\n        if observed:\n            expected = expected.loc[[\"January\"]]\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_not_series(self):\n        # GH 4386\n        # pivot_table always returns a DataFrame\n        # when values is not list like and columns is None\n        # and aggfunc is not instance of list\n        df = DataFrame({\"col1\": [3, 4, 5], \"col2\": [\"C\", \"D\", \"E\"], \"col3\": [1, 3, 9]})\n\n        result = df.pivot_table(\"col1\", index=[\"col3\", \"col2\"], aggfunc=np.sum)\n        m = MultiIndex.from_arrays([[1, 3, 9], [\"C\", \"D\", \"E\"]], names=[\"col3\", \"col2\"])\n        expected = DataFrame([3, 4, 5], index=m, columns=[\"col1\"])\n\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot_table(\"col1\", index=\"col3\", columns=\"col2\", aggfunc=np.sum)\n        expected = DataFrame(\n            [[3, np.NaN, np.NaN], [np.NaN, 4, np.NaN], [np.NaN, np.NaN, 5]],\n            index=Index([1, 3, 9], name=\"col3\"),\n            columns=Index([\"C\", \"D\", \"E\"], name=\"col2\"),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot_table(\"col1\", index=\"col3\", aggfunc=[np.sum])\n        m = MultiIndex.from_arrays([[\"sum\"], [\"col1\"]])\n        expected = DataFrame([3, 4, 5], index=Index([1, 3, 9], name=\"col3\"), columns=m)\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_margins_name_unicode(self):\n        # issue #13292\n        greek = \"\\u0394\\u03bf\\u03ba\\u03b9\\u03bc\\u03ae\"\n        frame = DataFrame({\"foo\": [1, 2, 3]})\n        table = pivot_table(\n            frame, index=[\"foo\"], aggfunc=len, margins=True, margins_name=greek\n        )\n        index = Index([1, 2, 3, greek], dtype=\"object\", name=\"foo\")\n        expected = DataFrame(index=index)\n        tm.assert_frame_equal(table, expected)\n\n    def test_pivot_string_as_func(self):\n        # GH #18713\n        # for correctness purposes\n        data = DataFrame(\n            {\n                \"A\": [\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"bar\",\n                    \"foo\",\n                    \"foo\",\n                    \"foo\",\n                ],\n                \"B\": [\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"one\",\n                    \"one\",\n                    \"one\",\n                    \"two\",\n                    \"two\",\n                    \"two\",\n                    \"one\",\n                ],\n                \"C\": range(11),\n            }\n        )\n\n        result = pivot_table(data, index=\"A\", columns=\"B\", aggfunc=\"sum\")\n        mi = MultiIndex(\n            levels=[[\"C\"], [\"one\", \"two\"]], codes=[[0, 0], [0, 1]], names=[None, \"B\"]\n        )\n        expected = DataFrame(\n            {(\"C\", \"one\"): {\"bar\": 15, \"foo\": 13}, (\"C\", \"two\"): {\"bar\": 7, \"foo\": 20}},\n            columns=mi,\n        ).rename_axis(\"A\")\n        tm.assert_frame_equal(result, expected)\n\n        result = pivot_table(data, index=\"A\", columns=\"B\", aggfunc=[\"sum\", \"mean\"])\n        mi = MultiIndex(\n            levels=[[\"sum\", \"mean\"], [\"C\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 0, 1]],\n            names=[None, None, \"B\"],\n        )\n        expected = DataFrame(\n            {\n                (\"mean\", \"C\", \"one\"): {\"bar\": 5.0, \"foo\": 3.25},\n                (\"mean\", \"C\", \"two\"): {\"bar\": 7.0, \"foo\": 6.666666666666667},\n                (\"sum\", \"C\", \"one\"): {\"bar\": 15, \"foo\": 13},\n                (\"sum\", \"C\", \"two\"): {\"bar\": 7, \"foo\": 20},\n            },\n            columns=mi,\n        ).rename_axis(\"A\")\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"f, f_numpy\",\n        [\n            (\"sum\", np.sum),\n            (\"mean\", np.mean),\n            (\"std\", np.std),\n            ([\"sum\", \"mean\"], [np.sum, np.mean]),\n            ([\"sum\", \"std\"], [np.sum, np.std]),\n            ([\"std\", \"mean\"], [np.std, np.mean]),\n        ],\n    )\n    def test_pivot_string_func_vs_func(self, f, f_numpy):\n        # GH #18713\n        # for consistency purposes\n\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = pivot_table(self.data, index=\"A\", columns=\"B\", aggfunc=f)\n            expected = pivot_table(self.data, index=\"A\", columns=\"B\", aggfunc=f_numpy)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.slow\n    def test_pivot_number_of_levels_larger_than_int32(self, monkeypatch):\n        # GH 20601\n        # GH 26314: Change ValueError to PerformanceWarning\n        class MockUnstacker(reshape_lib._Unstacker):\n            def __init__(self, *args, **kwargs) -> None:\n                # __init__ will raise the warning\n                super().__init__(*args, **kwargs)\n                raise Exception(\"Don't compute final result.\")\n\n        with monkeypatch.context() as m:\n            m.setattr(reshape_lib, \"_Unstacker\", MockUnstacker)\n            df = DataFrame(\n                {\"ind1\": np.arange(2**16), \"ind2\": np.arange(2**16), \"count\": 0}\n            )\n\n            msg = \"The following operation may generate\"\n            with tm.assert_produces_warning(PerformanceWarning, match=msg):\n                with pytest.raises(Exception, match=\"Don't compute final result.\"):\n                    df.pivot_table(\n                        index=\"ind1\", columns=\"ind2\", values=\"count\", aggfunc=\"count\"\n                    )\n\n    def test_pivot_table_aggfunc_dropna(self, dropna):\n        # GH 22159\n        df = DataFrame(\n            {\n                \"fruit\": [\"apple\", \"peach\", \"apple\"],\n                \"size\": [1, 1, 2],\n                \"taste\": [7, 6, 6],\n            }\n        )\n\n        def ret_one(x):\n            return 1\n\n        def ret_sum(x):\n            return sum(x)\n\n        def ret_none(x):\n            return np.nan\n\n        result = pivot_table(\n            df, columns=\"fruit\", aggfunc=[ret_sum, ret_none, ret_one], dropna=dropna\n        )\n\n        data = [[3, 1, np.nan, np.nan, 1, 1], [13, 6, np.nan, np.nan, 1, 1]]\n        col = MultiIndex.from_product(\n            [[\"ret_sum\", \"ret_none\", \"ret_one\"], [\"apple\", \"peach\"]],\n            names=[None, \"fruit\"],\n        )\n        expected = DataFrame(data, index=[\"size\", \"taste\"], columns=col)\n\n        if dropna:\n            expected = expected.dropna(axis=\"columns\")\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_aggfunc_scalar_dropna(self, dropna):\n        # GH 22159\n        df = DataFrame(\n            {\"A\": [\"one\", \"two\", \"one\"], \"x\": [3, np.nan, 2], \"y\": [1, np.nan, np.nan]}\n        )\n\n        result = pivot_table(df, columns=\"A\", aggfunc=np.mean, dropna=dropna)\n\n        data = [[2.5, np.nan], [1, np.nan]]\n        col = Index([\"one\", \"two\"], name=\"A\")\n        expected = DataFrame(data, index=[\"x\", \"y\"], columns=col)\n\n        if dropna:\n            expected = expected.dropna(axis=\"columns\")\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_empty_aggfunc(self):\n        # GH 9186 & GH 13483\n        df = DataFrame(\n            {\n                \"A\": [2, 2, 3, 3, 2],\n                \"id\": [5, 6, 7, 8, 9],\n                \"C\": [\"p\", \"q\", \"q\", \"p\", \"q\"],\n                \"D\": [None, None, None, None, None],\n            }\n        )\n        result = df.pivot_table(index=\"A\", columns=\"D\", values=\"id\", aggfunc=np.size)\n        expected = DataFrame(index=Index([], dtype=\"int64\", name=\"A\"))\n        expected.columns.name = \"D\"\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_no_column_raises(self):\n        # GH 10326\n        def agg(arr):\n            return np.mean(arr)\n\n        foo = DataFrame({\"X\": [0, 0, 1, 1], \"Y\": [0, 1, 0, 1], \"Z\": [10, 20, 30, 40]})\n        with pytest.raises(KeyError, match=\"notpresent\"):\n            foo.pivot_table(\"notpresent\", \"X\", \"Y\", aggfunc=agg)\n\n    def test_pivot_table_multiindex_columns_doctest_case(self):\n        # The relevant characteristic is that the call\n        #  to maybe_downcast_to_dtype(agged[v], data[v].dtype) in\n        #  __internal_pivot_table has `agged[v]` a DataFrame instead of Series,\n        #  In this case this is because agged.columns is a MultiIndex and 'v'\n        #  is only indexing on its first level.\n        df = DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n\n        table = pivot_table(\n            df,\n            values=[\"D\", \"E\"],\n            index=[\"A\", \"C\"],\n            aggfunc={\"D\": np.mean, \"E\": [min, max, np.mean]},\n        )\n        cols = MultiIndex.from_tuples(\n            [(\"D\", \"mean\"), (\"E\", \"max\"), (\"E\", \"mean\"), (\"E\", \"min\")]\n        )\n        index = MultiIndex.from_tuples(\n            [(\"bar\", \"large\"), (\"bar\", \"small\"), (\"foo\", \"large\"), (\"foo\", \"small\")],\n            names=[\"A\", \"C\"],\n        )\n        vals = np.array(\n            [\n                [5.5, 9.0, 7.5, 6.0],\n                [5.5, 9.0, 8.5, 8.0],\n                [2.0, 5.0, 4.5, 4.0],\n                [2.33333333, 6.0, 4.33333333, 2.0],\n            ]\n        )\n        expected = DataFrame(vals, columns=cols, index=index)\n        expected[(\"E\", \"min\")] = expected[(\"E\", \"min\")].astype(np.int64)\n        expected[(\"E\", \"max\")] = expected[(\"E\", \"max\")].astype(np.int64)\n        tm.assert_frame_equal(table, expected)\n\n    def test_pivot_table_sort_false(self):\n        # GH#39143\n        df = DataFrame(\n            {\n                \"a\": [\"d1\", \"d4\", \"d3\"],\n                \"col\": [\"a\", \"b\", \"c\"],\n                \"num\": [23, 21, 34],\n                \"year\": [\"2018\", \"2018\", \"2019\"],\n            }\n        )\n        result = df.pivot_table(\n            index=[\"a\", \"col\"], columns=\"year\", values=\"num\", aggfunc=\"sum\", sort=False\n        )\n        expected = DataFrame(\n            [[23, np.nan], [21, np.nan], [np.nan, 34]],\n            columns=Index([\"2018\", \"2019\"], name=\"year\"),\n            index=MultiIndex.from_arrays(\n                [[\"d1\", \"d4\", \"d3\"], [\"a\", \"b\", \"c\"]], names=[\"a\", \"col\"]\n            ),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_sort_false_with_multiple_values(self):\n        df = DataFrame(\n            {\n                \"firstname\": [\"John\", \"Michael\"],\n                \"lastname\": [\"Foo\", \"Bar\"],\n                \"height\": [173, 182],\n                \"age\": [47, 33],\n            }\n        )\n        result = df.pivot_table(\n            index=[\"lastname\", \"firstname\"], values=[\"height\", \"age\"], sort=False\n        )\n        expected = DataFrame(\n            [[173, 47], [182, 33]],\n            columns=[\"height\", \"age\"],\n            index=MultiIndex.from_tuples(\n                [(\"Foo\", \"John\"), (\"Bar\", \"Michael\")],\n                names=[\"lastname\", \"firstname\"],\n            ),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_table_with_margins_and_numeric_columns(self):\n        # GH 26568\n        df = DataFrame([[\"a\", \"x\", 1], [\"a\", \"y\", 2], [\"b\", \"y\", 3], [\"b\", \"z\", 4]])\n        df.columns = [10, 20, 30]\n\n        result = df.pivot_table(\n            index=10, columns=20, values=30, aggfunc=\"sum\", fill_value=0, margins=True\n        )\n\n        expected = DataFrame([[1, 2, 0, 3], [0, 3, 4, 7], [1, 5, 4, 10]])\n        expected.columns = [\"x\", \"y\", \"z\", \"All\"]\n        expected.index = [\"a\", \"b\", \"All\"]\n        expected.columns.name = 20\n        expected.index.name = 10\n\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"dropna\", [True, False])\n    def test_pivot_ea_dtype_dropna(self, dropna):\n        # GH#47477\n        df = DataFrame({\"x\": \"a\", \"y\": \"b\", \"age\": Series([20, 40], dtype=\"Int64\")})\n        result = df.pivot_table(\n            index=\"x\", columns=\"y\", values=\"age\", aggfunc=\"mean\", dropna=dropna\n        )\n        expected = DataFrame(\n            [[30]],\n            index=Index([\"a\"], name=\"x\"),\n            columns=Index([\"b\"], name=\"y\"),\n            dtype=\"Float64\",\n        )\n        tm.assert_frame_equal(result, expected)\n\n\nclass TestPivot:\n    def test_pivot(self):\n        data = {\n            \"index\": [\"A\", \"B\", \"C\", \"C\", \"B\", \"A\"],\n            \"columns\": [\"One\", \"One\", \"One\", \"Two\", \"Two\", \"Two\"],\n            \"values\": [1.0, 2.0, 3.0, 3.0, 2.0, 1.0],\n        }\n\n        frame = DataFrame(data)\n        pivoted = frame.pivot(index=\"index\", columns=\"columns\", values=\"values\")\n\n        expected = DataFrame(\n            {\n                \"One\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n                \"Two\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n            }\n        )\n\n        expected.index.name, expected.columns.name = \"index\", \"columns\"\n        tm.assert_frame_equal(pivoted, expected)\n\n        # name tracking\n        assert pivoted.index.name == \"index\"\n        assert pivoted.columns.name == \"columns\"\n\n        # don't specify values\n        pivoted = frame.pivot(index=\"index\", columns=\"columns\")\n        assert pivoted.index.name == \"index\"\n        assert pivoted.columns.names == (None, \"columns\")\n\n    def test_pivot_duplicates(self):\n        data = DataFrame(\n            {\n                \"a\": [\"bar\", \"bar\", \"foo\", \"foo\", \"foo\"],\n                \"b\": [\"one\", \"two\", \"one\", \"one\", \"two\"],\n                \"c\": [1.0, 2.0, 3.0, 3.0, 4.0],\n            }\n        )\n        with pytest.raises(ValueError, match=\"duplicate entries\"):\n            data.pivot(index=\"a\", columns=\"b\", values=\"c\")\n\n    def test_pivot_empty(self):\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n        result = df.pivot(index=\"a\", columns=\"b\", values=\"c\")\n        expected = DataFrame()\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_pivot_integer_bug(self):\n        df = DataFrame(data=[(\"A\", \"1\", \"A1\"), (\"B\", \"2\", \"B2\")])\n\n        result = df.pivot(index=1, columns=0, values=2)\n        repr(result)\n        tm.assert_index_equal(result.columns, Index([\"A\", \"B\"], name=0))\n\n    def test_pivot_index_none(self):\n        # GH#3962\n        data = {\n            \"index\": [\"A\", \"B\", \"C\", \"C\", \"B\", \"A\"],\n            \"columns\": [\"One\", \"One\", \"One\", \"Two\", \"Two\", \"Two\"],\n            \"values\": [1.0, 2.0, 3.0, 3.0, 2.0, 1.0],\n        }\n\n        frame = DataFrame(data).set_index(\"index\")\n        result = frame.pivot(columns=\"columns\", values=\"values\")\n        expected = DataFrame(\n            {\n                \"One\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n                \"Two\": {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0},\n            }\n        )\n\n        expected.index.name, expected.columns.name = \"index\", \"columns\"\n        tm.assert_frame_equal(result, expected)\n\n        # omit values\n        result = frame.pivot(columns=\"columns\")\n\n        expected.columns = MultiIndex.from_tuples(\n            [(\"values\", \"One\"), (\"values\", \"Two\")], names=[None, \"columns\"]\n        )\n        expected.index.name = \"index\"\n        tm.assert_frame_equal(result, expected, check_names=False)\n        assert result.index.name == \"index\"\n        assert result.columns.names == (None, \"columns\")\n        expected.columns = expected.columns.droplevel(0)\n        result = frame.pivot(columns=\"columns\", values=\"values\")\n\n        expected.columns.name = \"columns\"\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_index_list_values_none_immutable_args(self):\n        # GH37635\n        df = DataFrame(\n            {\n                \"lev1\": [1, 1, 1, 2, 2, 2],\n                \"lev2\": [1, 1, 2, 1, 1, 2],\n                \"lev3\": [1, 2, 1, 2, 1, 2],\n                \"lev4\": [1, 2, 3, 4, 5, 6],\n                \"values\": [0, 1, 2, 3, 4, 5],\n            }\n        )\n        index = [\"lev1\", \"lev2\"]\n        columns = [\"lev3\"]\n        result = df.pivot(index=index, columns=columns)\n\n        expected = DataFrame(\n            np.array(\n                [\n                    [1.0, 2.0, 0.0, 1.0],\n                    [3.0, np.nan, 2.0, np.nan],\n                    [5.0, 4.0, 4.0, 3.0],\n                    [np.nan, 6.0, np.nan, 5.0],\n                ]\n            ),\n            index=MultiIndex.from_arrays(\n                [(1, 1, 2, 2), (1, 2, 1, 2)], names=[\"lev1\", \"lev2\"]\n            ),\n            columns=MultiIndex.from_arrays(\n                [(\"lev4\", \"lev4\", \"values\", \"values\"), (1, 2, 1, 2)],\n                names=[None, \"lev3\"],\n            ),\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        assert index == [\"lev1\", \"lev2\"]\n        assert columns == [\"lev3\"]\n\n    def test_pivot_columns_not_given(self):\n        # GH#48293\n        df = DataFrame({\"a\": [1], \"b\": 1})\n        with pytest.raises(TypeError, match=\"missing 1 required argument\"):\n            df.pivot()\n\n    def test_pivot_columns_is_none(self):\n        # GH#48293\n        df = DataFrame({None: [1], \"b\": 2, \"c\": 3})\n        result = df.pivot(columns=None)\n        expected = DataFrame({(\"b\", 1): [2], (\"c\", 1): 3})\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot(columns=None, index=\"b\")\n        expected = DataFrame({(\"c\", 1): 3}, index=Index([2], name=\"b\"))\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot(columns=None, index=\"b\", values=\"c\")\n        expected = DataFrame({1: 3}, index=Index([2], name=\"b\"))\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_index_is_none(self):\n        # GH#48293\n        df = DataFrame({None: [1], \"b\": 2, \"c\": 3})\n\n        result = df.pivot(columns=\"b\", index=None)\n        expected = DataFrame({(\"c\", 2): 3}, index=[1])\n        expected.columns.names = [None, \"b\"]\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot(columns=\"b\", index=None, values=\"c\")\n        expected = DataFrame(3, index=[1], columns=Index([2], name=\"b\"))\n        tm.assert_frame_equal(result, expected)\n\n    def test_pivot_values_is_none(self):\n        # GH#48293\n        df = DataFrame({None: [1], \"b\": 2, \"c\": 3})\n\n        result = df.pivot(columns=\"b\", index=\"c\", values=None)\n        expected = DataFrame(\n            1, index=Index([3], name=\"c\"), columns=Index([2], name=\"b\")\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = df.pivot(columns=\"b\", values=None)\n        expected = DataFrame(1, index=[0], columns=Index([2], name=\"b\"))\n        tm.assert_frame_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/reshape/test_pivot_multilevel.py",
      "content": "import numpy as np\nimport pytest\n\nfrom pandas._libs import lib\n\nimport pandas as pd\nfrom pandas import (\n    Index,\n    MultiIndex,\n)\nimport pandas._testing as tm\n\n\n@pytest.mark.parametrize(\n    \"input_index, input_columns, input_values, \"\n    \"expected_values, expected_columns, expected_index\",\n    [\n        (\n            [\"lev4\"],\n            \"lev3\",\n            \"values\",\n            [\n                [0.0, np.nan],\n                [np.nan, 1.0],\n                [2.0, np.nan],\n                [np.nan, 3.0],\n                [4.0, np.nan],\n                [np.nan, 5.0],\n                [6.0, np.nan],\n                [np.nan, 7.0],\n            ],\n            Index([1, 2], name=\"lev3\"),\n            Index([1, 2, 3, 4, 5, 6, 7, 8], name=\"lev4\"),\n        ),\n        (\n            [\"lev4\"],\n            \"lev3\",\n            lib.NoDefault,\n            [\n                [1.0, np.nan, 1.0, np.nan, 0.0, np.nan],\n                [np.nan, 1.0, np.nan, 1.0, np.nan, 1.0],\n                [1.0, np.nan, 2.0, np.nan, 2.0, np.nan],\n                [np.nan, 1.0, np.nan, 2.0, np.nan, 3.0],\n                [2.0, np.nan, 1.0, np.nan, 4.0, np.nan],\n                [np.nan, 2.0, np.nan, 1.0, np.nan, 5.0],\n                [2.0, np.nan, 2.0, np.nan, 6.0, np.nan],\n                [np.nan, 2.0, np.nan, 2.0, np.nan, 7.0],\n            ],\n            MultiIndex.from_tuples(\n                [\n                    (\"lev1\", 1),\n                    (\"lev1\", 2),\n                    (\"lev2\", 1),\n                    (\"lev2\", 2),\n                    (\"values\", 1),\n                    (\"values\", 2),\n                ],\n                names=[None, \"lev3\"],\n            ),\n            Index([1, 2, 3, 4, 5, 6, 7, 8], name=\"lev4\"),\n        ),\n        (\n            [\"lev1\", \"lev2\"],\n            \"lev3\",\n            \"values\",\n            [[0, 1], [2, 3], [4, 5], [6, 7]],\n            Index([1, 2], name=\"lev3\"),\n            MultiIndex.from_tuples(\n                [(1, 1), (1, 2), (2, 1), (2, 2)], names=[\"lev1\", \"lev2\"]\n            ),\n        ),\n        (\n            [\"lev1\", \"lev2\"],\n            \"lev3\",\n            lib.NoDefault,\n            [[1, 2, 0, 1], [3, 4, 2, 3], [5, 6, 4, 5], [7, 8, 6, 7]],\n            MultiIndex.from_tuples(\n                [(\"lev4\", 1), (\"lev4\", 2), (\"values\", 1), (\"values\", 2)],\n                names=[None, \"lev3\"],\n            ),\n            MultiIndex.from_tuples(\n                [(1, 1), (1, 2), (2, 1), (2, 2)], names=[\"lev1\", \"lev2\"]\n            ),\n        ),\n    ],\n)\ndef test_pivot_list_like_index(\n    input_index,\n    input_columns,\n    input_values,\n    expected_values,\n    expected_columns,\n    expected_index,\n):\n    # GH 21425, test when index is given a list\n    df = pd.DataFrame(\n        {\n            \"lev1\": [1, 1, 1, 1, 2, 2, 2, 2],\n            \"lev2\": [1, 1, 2, 2, 1, 1, 2, 2],\n            \"lev3\": [1, 2, 1, 2, 1, 2, 1, 2],\n            \"lev4\": [1, 2, 3, 4, 5, 6, 7, 8],\n            \"values\": [0, 1, 2, 3, 4, 5, 6, 7],\n        }\n    )\n\n    result = df.pivot(index=input_index, columns=input_columns, values=input_values)\n    expected = pd.DataFrame(\n        expected_values, columns=expected_columns, index=expected_index\n    )\n    tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    \"input_index, input_columns, input_values, \"\n    \"expected_values, expected_columns, expected_index\",\n    [\n        (\n            \"lev4\",\n            [\"lev3\"],\n            \"values\",\n            [\n                [0.0, np.nan],\n                [np.nan, 1.0],\n                [2.0, np.nan],\n                [np.nan, 3.0],\n                [4.0, np.nan],\n                [np.nan, 5.0],\n                [6.0, np.nan],\n                [np.nan, 7.0],\n            ],\n            Index([1, 2], name=\"lev3\"),\n            Index([1, 2, 3, 4, 5, 6, 7, 8], name=\"lev4\"),\n        ),\n        (\n            [\"lev1\", \"lev2\"],\n            [\"lev3\"],\n            \"values\",\n            [[0, 1], [2, 3], [4, 5], [6, 7]],\n            Index([1, 2], name=\"lev3\"),\n            MultiIndex.from_tuples(\n                [(1, 1), (1, 2), (2, 1), (2, 2)], names=[\"lev1\", \"lev2\"]\n            ),\n        ),\n        (\n            [\"lev1\"],\n            [\"lev2\", \"lev3\"],\n            \"values\",\n            [[0, 1, 2, 3], [4, 5, 6, 7]],\n            MultiIndex.from_tuples(\n                [(1, 1), (1, 2), (2, 1), (2, 2)], names=[\"lev2\", \"lev3\"]\n            ),\n            Index([1, 2], name=\"lev1\"),\n        ),\n        (\n            [\"lev1\", \"lev2\"],\n            [\"lev3\", \"lev4\"],\n            \"values\",\n            [\n                [0.0, 1.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n                [np.nan, np.nan, 2.0, 3.0, np.nan, np.nan, np.nan, np.nan],\n                [np.nan, np.nan, np.nan, np.nan, 4.0, 5.0, np.nan, np.nan],\n                [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 6.0, 7.0],\n            ],\n            MultiIndex.from_tuples(\n                [(1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8)],\n                names=[\"lev3\", \"lev4\"],\n            ),\n            MultiIndex.from_tuples(\n                [(1, 1), (1, 2), (2, 1), (2, 2)], names=[\"lev1\", \"lev2\"]\n            ),\n        ),\n    ],\n)\ndef test_pivot_list_like_columns(\n    input_index,\n    input_columns,\n    input_values,\n    expected_values,\n    expected_columns,\n    expected_index,\n):\n    # GH 21425, test when columns is given a list\n    df = pd.DataFrame(\n        {\n            \"lev1\": [1, 1, 1, 1, 2, 2, 2, 2],\n            \"lev2\": [1, 1, 2, 2, 1, 1, 2, 2],\n            \"lev3\": [1, 2, 1, 2, 1, 2, 1, 2],\n            \"lev4\": [1, 2, 3, 4, 5, 6, 7, 8],\n            \"values\": [0, 1, 2, 3, 4, 5, 6, 7],\n        }\n    )\n\n    result = df.pivot(index=input_index, columns=input_columns, values=input_values)\n    expected = pd.DataFrame(\n        expected_values, columns=expected_columns, index=expected_index\n    )\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_pivot_multiindexed_rows_and_cols(using_array_manager):\n    # GH 36360\n\n    df = pd.DataFrame(\n        data=np.arange(12).reshape(4, 3),\n        columns=MultiIndex.from_tuples(\n            [(0, 0), (0, 1), (0, 2)], names=[\"col_L0\", \"col_L1\"]\n        ),\n        index=MultiIndex.from_tuples(\n            [(0, 0, 0), (0, 0, 1), (1, 1, 1), (1, 0, 0)],\n            names=[\"idx_L0\", \"idx_L1\", \"idx_L2\"],\n        ),\n    )\n\n    res = df.pivot_table(\n        index=[\"idx_L0\"],\n        columns=[\"idx_L1\"],\n        values=[(0, 1)],\n        aggfunc=lambda col: col.values.sum(),\n    )\n\n    expected = pd.DataFrame(\n        data=[[5, np.nan], [10, 7.0]],\n        columns=MultiIndex.from_tuples(\n            [(0, 1, 0), (0, 1, 1)], names=[\"col_L0\", \"col_L1\", \"idx_L1\"]\n        ),\n        index=Index([0, 1], dtype=\"int64\", name=\"idx_L0\"),\n    )\n    if not using_array_manager:\n        # BlockManager does not preserve the dtypes\n        expected = expected.astype(\"float64\")\n\n    tm.assert_frame_equal(res, expected)\n\n\ndef test_pivot_df_multiindex_index_none():\n    # GH 23955\n    df = pd.DataFrame(\n        [\n            [\"A\", \"A1\", \"label1\", 1],\n            [\"A\", \"A2\", \"label2\", 2],\n            [\"B\", \"A1\", \"label1\", 3],\n            [\"B\", \"A2\", \"label2\", 4],\n        ],\n        columns=[\"index_1\", \"index_2\", \"label\", \"value\"],\n    )\n    df = df.set_index([\"index_1\", \"index_2\"])\n\n    result = df.pivot(columns=\"label\", values=\"value\")\n    expected = pd.DataFrame(\n        [[1.0, np.nan], [np.nan, 2.0], [3.0, np.nan], [np.nan, 4.0]],\n        index=df.index,\n        columns=Index([\"label1\", \"label2\"], name=\"label\"),\n    )\n    tm.assert_frame_equal(result, expected)\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the expected behavior of the DataFrame.pivot() method when the 'index' parameter is set to None, according to the documentation?",
    "How does the behavior of DataFrame.pivot(index=None) differ between pandas version 1.5 and 2.0.0?",
    "What is the significance of the KeyError exception raised in pandas 2.0.0 for DataFrame.pivot(index=None)?",
    "Why is it important to update documentation and breaking changes list when functionality changes, as suggested in the issue?",
    "Based on the context, what could be a potential fix for the KeyError issue in DataFrame.pivot(index=None) in pandas 2.0.0?"
  ],
  "golden_answers_generated": [
    "According to the documentation, when the 'index' parameter is set to None in the DataFrame.pivot() method, it should use the existing index of the DataFrame to create the new frame’s index.",
    "In pandas version 1.5, setting index=None in DataFrame.pivot() results in the method using the existing index as expected. However, in pandas 2.0.0, this action raises a KeyError exception, indicating a change in behavior that contradicts the documented functionality.",
    "The KeyError exception indicates that the method is attempting to access a column or index that does not exist. This suggests that instead of using the existing index when index=None, there might be an unintended behavior or bug in the code causing it to search for a non-existent key.",
    "Updating the documentation and breaking changes list is crucial because it informs users of any changes in functionality, helping them adjust their code accordingly. It maintains transparency and prevents unexpected errors in user code that depend on previous behavior.",
    "A potential fix could involve reviewing the implementation of the pivot() method to ensure that when index=None, the method correctly defaults to using the existing DataFrame index for the new frame's index, as originally intended and documented."
  ]
}