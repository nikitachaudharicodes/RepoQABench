{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "49647",
  "issue_description": "# STYLE place standard library imports at top of file\n\nImports should typically be placed at the top of files. Sometimes, imports are placed inside functions to:\r\n- avoid circular imports\r\n- avoid `ImportError` if it's an optional dependency\r\n\r\nStandard library imports should really always be at the top of files.\r\n\r\nNoticed in https://github.com/pandas-dev/pandas/pull/49645 that this is often not the case\r\n\r\nI've made a script to automate detecting when this is the case. So the task is:\r\n```\r\ngit checkout -b standard-library-imports main\r\ngit pull git@github.com:MarcoGorelli/pandas.git standard-library-imports\r\ngit reset --hard FETCH_HEAD\r\npre-commit run stdlib-imports --all-files\r\n```\r\nThen, fixup any errors that are reported. Finally, stage your changes, commit them, push them to your fork, and open a pull request\r\n\r\nFeel free to reach out if you into any issues along the way\r\n\r\nIf any wants to take this, it would be a nice and welcome clean up!\r\n\r\n---\r\n\r\nEDIT: after going through a PR, I'm not sure it's worth introducing a check for this - but we can still take some of the cleanups it found",
  "issue_comments": [
    {
      "id": 1311986769,
      "user": "mroeschke",
      "body": "Noting in the past that some stdlib imports were deferred (i.e. not at the top level) to help import time (not sure if this is still the case)\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/e41b6d7827720df90a51ff05caa689333d7e02af/pandas/io/common.py#L259-L266"
    },
    {
      "id": 1311991165,
      "user": "MarcoGorelli",
      "body": "Ah thanks! Can probably just respect the blocklist\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/bcb8346e8106be4267ec77dfc603d0d77a3fda81/ci/code_checks.sh#L48-L50\r\n\r\nEDIT: done"
    },
    {
      "id": 1312790373,
      "user": "grtcoder",
      "body": "Hey, I would like to work on this."
    },
    {
      "id": 1312800124,
      "user": "MarcoGorelli",
      "body": "sure go ahead"
    },
    {
      "id": 1313069953,
      "user": "zemnly",
      "body": "Hi, can I take this ?"
    },
    {
      "id": 1313380299,
      "user": "MarcoGorelli",
      "body": "looks like @grtcoder is already working on it"
    },
    {
      "id": 1330539741,
      "user": "natmokval",
      "body": "Hi @grtcoder. Do you mind if I will work on this issue as well?"
    },
    {
      "id": 1330541091,
      "user": "MarcoGorelli",
      "body": "feel free to go ahead, doesn't look like it's being worked on"
    },
    {
      "id": 1332537387,
      "user": "Thextan",
      "body": "@natmokval I am starting on this one.  I will start with the files under pandas/core/ and pandas/io"
    },
    {
      "id": 1332716788,
      "user": "Thextan",
      "body": "Finished all files except pandas/tests/*.  I will work on those next."
    },
    {
      "id": 1334580737,
      "user": "seanjedi",
      "body": "Is there anything for this issue that I can work on? "
    },
    {
      "id": 1334585793,
      "user": "Thextan",
      "body": "Sean,\n\nI have just about finished this one. I am working on the last 3 files now.\n\nSent with [Proton Mail](https://proton.me/) secure email.\n\n------- Original Message -------\nOn Thursday, December 1st, 2022 at 5:35 PM, Sean Patrick Malloy ***@***.***> wrote:\n\n> Is there anything for this issue that I can work on?\n>\n> —\n> Reply to this email directly, [view it on GitHub](https://github.com/pandas-dev/pandas/issues/49647#issuecomment-1334580737), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFBPFCXNOMPQMMMQPV7OSM3WLEY2XANCNFSM6AAAAAAR5Y3AUU).\n> You are receiving this because you commented.Message ID: ***@***.***>"
    },
    {
      "id": 1334587195,
      "user": "seanjedi",
      "body": "Alright, thanks for letting me know! "
    }
  ],
  "text_context": "# STYLE place standard library imports at top of file\n\nImports should typically be placed at the top of files. Sometimes, imports are placed inside functions to:\r\n- avoid circular imports\r\n- avoid `ImportError` if it's an optional dependency\r\n\r\nStandard library imports should really always be at the top of files.\r\n\r\nNoticed in https://github.com/pandas-dev/pandas/pull/49645 that this is often not the case\r\n\r\nI've made a script to automate detecting when this is the case. So the task is:\r\n```\r\ngit checkout -b standard-library-imports main\r\ngit pull git@github.com:MarcoGorelli/pandas.git standard-library-imports\r\ngit reset --hard FETCH_HEAD\r\npre-commit run stdlib-imports --all-files\r\n```\r\nThen, fixup any errors that are reported. Finally, stage your changes, commit them, push them to your fork, and open a pull request\r\n\r\nFeel free to reach out if you into any issues along the way\r\n\r\nIf any wants to take this, it would be a nice and welcome clean up!\r\n\r\n---\r\n\r\nEDIT: after going through a PR, I'm not sure it's worth introducing a check for this - but we can still take some of the cleanups it found\n\nNoting in the past that some stdlib imports were deferred (i.e. not at the top level) to help import time (not sure if this is still the case)\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/e41b6d7827720df90a51ff05caa689333d7e02af/pandas/io/common.py#L259-L266\n\nAh thanks! Can probably just respect the blocklist\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/bcb8346e8106be4267ec77dfc603d0d77a3fda81/ci/code_checks.sh#L48-L50\r\n\r\nEDIT: done\n\nHey, I would like to work on this.\n\nsure go ahead\n\nHi, can I take this ?\n\nlooks like @grtcoder is already working on it\n\nHi @grtcoder. Do you mind if I will work on this issue as well?\n\nfeel free to go ahead, doesn't look like it's being worked on\n\n@natmokval I am starting on this one.  I will start with the files under pandas/core/ and pandas/io\n\nFinished all files except pandas/tests/*.  I will work on those next.\n\nIs there anything for this issue that I can work on? \n\nSean,\n\nI have just about finished this one. I am working on the last 3 files now.\n\nSent with [Proton Mail](https://proton.me/) secure email.\n\n------- Original Message -------\nOn Thursday, December 1st, 2022 at 5:35 PM, Sean Patrick Malloy ***@***.***> wrote:\n\n> Is there anything for this issue that I can work on?\n>\n> —\n> Reply to this email directly, [view it on GitHub](https://github.com/pandas-dev/pandas/issues/49647#issuecomment-1334580737), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFBPFCXNOMPQMMMQPV7OSM3WLEY2XANCNFSM6AAAAAAR5Y3AUU).\n> You are receiving this because you commented.Message ID: ***@***.***>\n\nAlright, thanks for letting me know! ",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/49645",
  "code_context": [
    {
      "filename": "pandas/_testing/__init__.py",
      "content": "from __future__ import annotations\n\nimport collections\nfrom datetime import datetime\nfrom decimal import Decimal\nimport operator\nimport os\nimport re\nimport string\nfrom sys import byteorder\nfrom typing import (\n    TYPE_CHECKING,\n    Callable,\n    ContextManager,\n    Counter,\n    Iterable,\n)\n\nimport numpy as np\n\nfrom pandas._config.localization import (\n    can_set_locale,\n    get_locales,\n    set_locale,\n)\n\nfrom pandas._typing import (\n    Dtype,\n    Frequency,\n)\nfrom pandas.compat import pa_version_under6p0\n\nfrom pandas.core.dtypes.common import (\n    is_float_dtype,\n    is_integer_dtype,\n    is_sequence,\n    is_unsigned_integer_dtype,\n    pandas_dtype,\n)\n\nimport pandas as pd\nfrom pandas import (\n    Categorical,\n    CategoricalIndex,\n    DataFrame,\n    DatetimeIndex,\n    Index,\n    IntervalIndex,\n    MultiIndex,\n    RangeIndex,\n    Series,\n    bdate_range,\n)\nfrom pandas._testing._io import (\n    close,\n    network,\n    round_trip_localpath,\n    round_trip_pathlib,\n    round_trip_pickle,\n    write_to_compressed,\n)\nfrom pandas._testing._random import (\n    randbool,\n    rands,\n    rands_array,\n)\nfrom pandas._testing._warnings import (\n    assert_produces_warning,\n    maybe_produces_warning,\n)\nfrom pandas._testing.asserters import (\n    assert_almost_equal,\n    assert_attr_equal,\n    assert_categorical_equal,\n    assert_class_equal,\n    assert_contains_all,\n    assert_copy,\n    assert_datetime_array_equal,\n    assert_dict_equal,\n    assert_equal,\n    assert_extension_array_equal,\n    assert_frame_equal,\n    assert_index_equal,\n    assert_indexing_slices_equivalent,\n    assert_interval_array_equal,\n    assert_is_sorted,\n    assert_is_valid_plot_return_object,\n    assert_metadata_equivalent,\n    assert_numpy_array_equal,\n    assert_period_array_equal,\n    assert_series_equal,\n    assert_sp_array_equal,\n    assert_timedelta_array_equal,\n    raise_assert_detail,\n)\nfrom pandas._testing.compat import (\n    get_dtype,\n    get_obj,\n)\nfrom pandas._testing.contexts import (\n    RNGContext,\n    decompress_file,\n    ensure_clean,\n    ensure_safe_environment_variables,\n    set_timezone,\n    use_numexpr,\n    with_csv_dialect,\n)\nfrom pandas.core.api import (\n    Float64Index,\n    Int64Index,\n    NumericIndex,\n    UInt64Index,\n)\nfrom pandas.core.arrays import (\n    BaseMaskedArray,\n    ExtensionArray,\n    PandasArray,\n)\nfrom pandas.core.arrays._mixins import NDArrayBackedExtensionArray\nfrom pandas.core.construction import extract_array\n\nif TYPE_CHECKING:\n    from pandas import (\n        PeriodIndex,\n        TimedeltaIndex,\n    )\n\n_N = 30\n_K = 4\n\nUNSIGNED_INT_NUMPY_DTYPES: list[Dtype] = [\"uint8\", \"uint16\", \"uint32\", \"uint64\"]\nUNSIGNED_INT_EA_DTYPES: list[Dtype] = [\"UInt8\", \"UInt16\", \"UInt32\", \"UInt64\"]\nSIGNED_INT_NUMPY_DTYPES: list[Dtype] = [int, \"int8\", \"int16\", \"int32\", \"int64\"]\nSIGNED_INT_EA_DTYPES: list[Dtype] = [\"Int8\", \"Int16\", \"Int32\", \"Int64\"]\nALL_INT_NUMPY_DTYPES = UNSIGNED_INT_NUMPY_DTYPES + SIGNED_INT_NUMPY_DTYPES\nALL_INT_EA_DTYPES = UNSIGNED_INT_EA_DTYPES + SIGNED_INT_EA_DTYPES\n\nFLOAT_NUMPY_DTYPES: list[Dtype] = [float, \"float32\", \"float64\"]\nFLOAT_EA_DTYPES: list[Dtype] = [\"Float32\", \"Float64\"]\nCOMPLEX_DTYPES: list[Dtype] = [complex, \"complex64\", \"complex128\"]\nSTRING_DTYPES: list[Dtype] = [str, \"str\", \"U\"]\n\nDATETIME64_DTYPES: list[Dtype] = [\"datetime64[ns]\", \"M8[ns]\"]\nTIMEDELTA64_DTYPES: list[Dtype] = [\"timedelta64[ns]\", \"m8[ns]\"]\n\nBOOL_DTYPES: list[Dtype] = [bool, \"bool\"]\nBYTES_DTYPES: list[Dtype] = [bytes, \"bytes\"]\nOBJECT_DTYPES: list[Dtype] = [object, \"object\"]\n\nALL_REAL_NUMPY_DTYPES = FLOAT_NUMPY_DTYPES + ALL_INT_NUMPY_DTYPES\nALL_NUMPY_DTYPES = (\n    ALL_REAL_NUMPY_DTYPES\n    + COMPLEX_DTYPES\n    + STRING_DTYPES\n    + DATETIME64_DTYPES\n    + TIMEDELTA64_DTYPES\n    + BOOL_DTYPES\n    + OBJECT_DTYPES\n    + BYTES_DTYPES\n)\n\nNARROW_NP_DTYPES = [\n    np.float16,\n    np.float32,\n    np.int8,\n    np.int16,\n    np.int32,\n    np.uint8,\n    np.uint16,\n    np.uint32,\n]\n\nENDIAN = {\"little\": \"<\", \"big\": \">\"}[byteorder]\n\nNULL_OBJECTS = [None, np.nan, pd.NaT, float(\"nan\"), pd.NA, Decimal(\"NaN\")]\nNP_NAT_OBJECTS = [\n    cls(\"NaT\", unit)\n    for cls in [np.datetime64, np.timedelta64]\n    for unit in [\n        \"Y\",\n        \"M\",\n        \"W\",\n        \"D\",\n        \"h\",\n        \"m\",\n        \"s\",\n        \"ms\",\n        \"us\",\n        \"ns\",\n        \"ps\",\n        \"fs\",\n        \"as\",\n    ]\n]\n\nif not pa_version_under6p0:\n    import pyarrow as pa\n\n    UNSIGNED_INT_PYARROW_DTYPES = [pa.uint8(), pa.uint16(), pa.uint32(), pa.uint64()]\n    SIGNED_INT_PYARROW_DTYPES = [pa.int8(), pa.int16(), pa.int32(), pa.int64()]\n    ALL_INT_PYARROW_DTYPES = UNSIGNED_INT_PYARROW_DTYPES + SIGNED_INT_PYARROW_DTYPES\n\n    # pa.float16 doesn't seem supported\n    # https://github.com/apache/arrow/blob/master/python/pyarrow/src/arrow/python/helpers.cc#L86\n    FLOAT_PYARROW_DTYPES = [pa.float32(), pa.float64()]\n    STRING_PYARROW_DTYPES = [pa.string()]\n    BINARY_PYARROW_DTYPES = [pa.binary()]\n\n    TIME_PYARROW_DTYPES = [\n        pa.time32(\"s\"),\n        pa.time32(\"ms\"),\n        pa.time64(\"us\"),\n        pa.time64(\"ns\"),\n    ]\n    DATE_PYARROW_DTYPES = [pa.date32(), pa.date64()]\n    DATETIME_PYARROW_DTYPES = [\n        pa.timestamp(unit=unit, tz=tz)\n        for unit in [\"s\", \"ms\", \"us\", \"ns\"]\n        for tz in [None, \"UTC\", \"US/Pacific\", \"US/Eastern\"]\n    ]\n    TIMEDELTA_PYARROW_DTYPES = [pa.duration(unit) for unit in [\"s\", \"ms\", \"us\", \"ns\"]]\n\n    BOOL_PYARROW_DTYPES = [pa.bool_()]\n\n    # TODO: Add container like pyarrow types:\n    #  https://arrow.apache.org/docs/python/api/datatypes.html#factory-functions\n    ALL_PYARROW_DTYPES = (\n        ALL_INT_PYARROW_DTYPES\n        + FLOAT_PYARROW_DTYPES\n        + STRING_PYARROW_DTYPES\n        + BINARY_PYARROW_DTYPES\n        + TIME_PYARROW_DTYPES\n        + DATE_PYARROW_DTYPES\n        + DATETIME_PYARROW_DTYPES\n        + TIMEDELTA_PYARROW_DTYPES\n        + BOOL_PYARROW_DTYPES\n    )\n\n\nEMPTY_STRING_PATTERN = re.compile(\"^$\")\n\n\ndef reset_display_options() -> None:\n    \"\"\"\n    Reset the display options for printing and representing objects.\n    \"\"\"\n    pd.reset_option(\"^display.\", silent=True)\n\n\n# -----------------------------------------------------------------------------\n# Comparators\n\n\ndef equalContents(arr1, arr2) -> bool:\n    \"\"\"\n    Checks if the set of unique elements of arr1 and arr2 are equivalent.\n    \"\"\"\n    return frozenset(arr1) == frozenset(arr2)\n\n\ndef box_expected(expected, box_cls, transpose: bool = True):\n    \"\"\"\n    Helper function to wrap the expected output of a test in a given box_class.\n\n    Parameters\n    ----------\n    expected : np.ndarray, Index, Series\n    box_cls : {Index, Series, DataFrame}\n\n    Returns\n    -------\n    subclass of box_cls\n    \"\"\"\n    if box_cls is pd.array:\n        if isinstance(expected, RangeIndex):\n            # pd.array would return an IntegerArray\n            expected = PandasArray(np.asarray(expected._values))\n        else:\n            expected = pd.array(expected, copy=False)\n    elif box_cls is Index:\n        expected = Index._with_infer(expected)\n    elif box_cls is Series:\n        expected = Series(expected)\n    elif box_cls is DataFrame:\n        expected = Series(expected).to_frame()\n        if transpose:\n            # for vector operations, we need a DataFrame to be a single-row,\n            #  not a single-column, in order to operate against non-DataFrame\n            #  vectors of the same length. But convert to two rows to avoid\n            #  single-row special cases in datetime arithmetic\n            expected = expected.T\n            expected = pd.concat([expected] * 2, ignore_index=True)\n    elif box_cls is np.ndarray or box_cls is np.array:\n        expected = np.array(expected)\n    elif box_cls is to_array:\n        expected = to_array(expected)\n    else:\n        raise NotImplementedError(box_cls)\n    return expected\n\n\ndef to_array(obj):\n    \"\"\"\n    Similar to pd.array, but does not cast numpy dtypes to nullable dtypes.\n    \"\"\"\n    # temporary implementation until we get pd.array in place\n    dtype = getattr(obj, \"dtype\", None)\n\n    if dtype is None:\n        return np.asarray(obj)\n\n    return extract_array(obj, extract_numpy=True)\n\n\n# -----------------------------------------------------------------------------\n# Others\n\n\ndef getCols(k) -> str:\n    return string.ascii_uppercase[:k]\n\n\n# make index\ndef makeStringIndex(k: int = 10, name=None) -> Index:\n    return Index(rands_array(nchars=10, size=k), name=name)\n\n\ndef makeCategoricalIndex(\n    k: int = 10, n: int = 3, name=None, **kwargs\n) -> CategoricalIndex:\n    \"\"\"make a length k index or n categories\"\"\"\n    x = rands_array(nchars=4, size=n, replace=False)\n    return CategoricalIndex(\n        Categorical.from_codes(np.arange(k) % n, categories=x), name=name, **kwargs\n    )\n\n\ndef makeIntervalIndex(k: int = 10, name=None, **kwargs) -> IntervalIndex:\n    \"\"\"make a length k IntervalIndex\"\"\"\n    x = np.linspace(0, 100, num=(k + 1))\n    return IntervalIndex.from_breaks(x, name=name, **kwargs)\n\n\ndef makeBoolIndex(k: int = 10, name=None) -> Index:\n    if k == 1:\n        return Index([True], name=name)\n    elif k == 2:\n        return Index([False, True], name=name)\n    return Index([False, True] + [False] * (k - 2), name=name)\n\n\ndef makeNumericIndex(k: int = 10, name=None, *, dtype) -> NumericIndex:\n    dtype = pandas_dtype(dtype)\n    assert isinstance(dtype, np.dtype)\n\n    if is_integer_dtype(dtype):\n        values = np.arange(k, dtype=dtype)\n        if is_unsigned_integer_dtype(dtype):\n            values += 2 ** (dtype.itemsize * 8 - 1)\n    elif is_float_dtype(dtype):\n        values = np.random.random_sample(k) - np.random.random_sample(1)\n        values.sort()\n        values = values * (10 ** np.random.randint(0, 9))\n    else:\n        raise NotImplementedError(f\"wrong dtype {dtype}\")\n\n    return NumericIndex(values, dtype=dtype, name=name)\n\n\ndef makeIntIndex(k: int = 10, name=None) -> Int64Index:\n    base_idx = makeNumericIndex(k, name=name, dtype=\"int64\")\n    return Int64Index(base_idx)\n\n\ndef makeUIntIndex(k: int = 10, name=None) -> UInt64Index:\n    base_idx = makeNumericIndex(k, name=name, dtype=\"uint64\")\n    return UInt64Index(base_idx)\n\n\ndef makeRangeIndex(k: int = 10, name=None, **kwargs) -> RangeIndex:\n    return RangeIndex(0, k, 1, name=name, **kwargs)\n\n\ndef makeFloatIndex(k: int = 10, name=None) -> Float64Index:\n    base_idx = makeNumericIndex(k, name=name, dtype=\"float64\")\n    return Float64Index(base_idx)\n\n\ndef makeDateIndex(\n    k: int = 10, freq: Frequency = \"B\", name=None, **kwargs\n) -> DatetimeIndex:\n    dt = datetime(2000, 1, 1)\n    dr = bdate_range(dt, periods=k, freq=freq, name=name)\n    return DatetimeIndex(dr, name=name, **kwargs)\n\n\ndef makeTimedeltaIndex(\n    k: int = 10, freq: Frequency = \"D\", name=None, **kwargs\n) -> TimedeltaIndex:\n    return pd.timedelta_range(start=\"1 day\", periods=k, freq=freq, name=name, **kwargs)\n\n\ndef makePeriodIndex(k: int = 10, name=None, **kwargs) -> PeriodIndex:\n    dt = datetime(2000, 1, 1)\n    return pd.period_range(start=dt, periods=k, freq=\"B\", name=name, **kwargs)\n\n\ndef makeMultiIndex(k: int = 10, names=None, **kwargs):\n    N = (k // 2) + 1\n    rng = range(N)\n    mi = MultiIndex.from_product([(\"foo\", \"bar\"), rng], names=names, **kwargs)\n    assert len(mi) >= k  # GH#38795\n    return mi[:k]\n\n\ndef index_subclass_makers_generator():\n    make_index_funcs = [\n        makeDateIndex,\n        makePeriodIndex,\n        makeTimedeltaIndex,\n        makeRangeIndex,\n        makeIntervalIndex,\n        makeCategoricalIndex,\n        makeMultiIndex,\n    ]\n    yield from make_index_funcs\n\n\ndef all_timeseries_index_generator(k: int = 10) -> Iterable[Index]:\n    \"\"\"\n    Generator which can be iterated over to get instances of all the classes\n    which represent time-series.\n\n    Parameters\n    ----------\n    k: length of each of the index instances\n    \"\"\"\n    make_index_funcs: list[Callable[..., Index]] = [\n        makeDateIndex,\n        makePeriodIndex,\n        makeTimedeltaIndex,\n    ]\n    for make_index_func in make_index_funcs:\n        yield make_index_func(k=k)\n\n\n# make series\ndef make_rand_series(name=None, dtype=np.float64) -> Series:\n    index = makeStringIndex(_N)\n    data = np.random.randn(_N)\n    with np.errstate(invalid=\"ignore\"):\n        data = data.astype(dtype, copy=False)\n    return Series(data, index=index, name=name)\n\n\ndef makeFloatSeries(name=None) -> Series:\n    return make_rand_series(name=name)\n\n\ndef makeStringSeries(name=None) -> Series:\n    return make_rand_series(name=name)\n\n\ndef makeObjectSeries(name=None) -> Series:\n    data = makeStringIndex(_N)\n    data = Index(data, dtype=object)\n    index = makeStringIndex(_N)\n    return Series(data, index=index, name=name)\n\n\ndef getSeriesData() -> dict[str, Series]:\n    index = makeStringIndex(_N)\n    return {c: Series(np.random.randn(_N), index=index) for c in getCols(_K)}\n\n\ndef makeTimeSeries(nper=None, freq: Frequency = \"B\", name=None) -> Series:\n    if nper is None:\n        nper = _N\n    return Series(\n        np.random.randn(nper), index=makeDateIndex(nper, freq=freq), name=name\n    )\n\n\ndef makePeriodSeries(nper=None, name=None) -> Series:\n    if nper is None:\n        nper = _N\n    return Series(np.random.randn(nper), index=makePeriodIndex(nper), name=name)\n\n\ndef getTimeSeriesData(nper=None, freq: Frequency = \"B\") -> dict[str, Series]:\n    return {c: makeTimeSeries(nper, freq) for c in getCols(_K)}\n\n\ndef getPeriodData(nper=None) -> dict[str, Series]:\n    return {c: makePeriodSeries(nper) for c in getCols(_K)}\n\n\n# make frame\ndef makeTimeDataFrame(nper=None, freq: Frequency = \"B\") -> DataFrame:\n    data = getTimeSeriesData(nper, freq)\n    return DataFrame(data)\n\n\ndef makeDataFrame() -> DataFrame:\n    data = getSeriesData()\n    return DataFrame(data)\n\n\ndef getMixedTypeDict():\n    index = Index([\"a\", \"b\", \"c\", \"d\", \"e\"])\n\n    data = {\n        \"A\": [0.0, 1.0, 2.0, 3.0, 4.0],\n        \"B\": [0.0, 1.0, 0.0, 1.0, 0.0],\n        \"C\": [\"foo1\", \"foo2\", \"foo3\", \"foo4\", \"foo5\"],\n        \"D\": bdate_range(\"1/1/2009\", periods=5),\n    }\n\n    return index, data\n\n\ndef makeMixedDataFrame() -> DataFrame:\n    return DataFrame(getMixedTypeDict()[1])\n\n\ndef makePeriodFrame(nper=None) -> DataFrame:\n    data = getPeriodData(nper)\n    return DataFrame(data)\n\n\ndef makeCustomIndex(\n    nentries,\n    nlevels,\n    prefix: str = \"#\",\n    names: bool | str | list[str] | None = False,\n    ndupe_l=None,\n    idx_type=None,\n) -> Index:\n    \"\"\"\n    Create an index/multindex with given dimensions, levels, names, etc'\n\n    nentries - number of entries in index\n    nlevels - number of levels (> 1 produces multindex)\n    prefix - a string prefix for labels\n    names - (Optional), bool or list of strings. if True will use default\n       names, if false will use no names, if a list is given, the name of\n       each level in the index will be taken from the list.\n    ndupe_l - (Optional), list of ints, the number of rows for which the\n       label will repeated at the corresponding level, you can specify just\n       the first few, the rest will use the default ndupe_l of 1.\n       len(ndupe_l) <= nlevels.\n    idx_type - \"i\"/\"f\"/\"s\"/\"dt\"/\"p\"/\"td\".\n       If idx_type is not None, `idx_nlevels` must be 1.\n       \"i\"/\"f\" creates an integer/float index,\n       \"s\" creates a string\n       \"dt\" create a datetime index.\n       \"td\" create a datetime index.\n\n        if unspecified, string labels will be generated.\n    \"\"\"\n    if ndupe_l is None:\n        ndupe_l = [1] * nlevels\n    assert is_sequence(ndupe_l) and len(ndupe_l) <= nlevels\n    assert names is None or names is False or names is True or len(names) is nlevels\n    assert idx_type is None or (\n        idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and nlevels == 1\n    )\n\n    if names is True:\n        # build default names\n        names = [prefix + str(i) for i in range(nlevels)]\n    if names is False:\n        # pass None to index constructor for no name\n        names = None\n\n    # make singleton case uniform\n    if isinstance(names, str) and nlevels == 1:\n        names = [names]\n\n    # specific 1D index type requested?\n    idx_func_dict: dict[str, Callable[..., Index]] = {\n        \"i\": makeIntIndex,\n        \"f\": makeFloatIndex,\n        \"s\": makeStringIndex,\n        \"dt\": makeDateIndex,\n        \"td\": makeTimedeltaIndex,\n        \"p\": makePeriodIndex,\n    }\n    idx_func = idx_func_dict.get(idx_type)\n    if idx_func:\n        idx = idx_func(nentries)\n        # but we need to fill in the name\n        if names:\n            idx.name = names[0]\n        return idx\n    elif idx_type is not None:\n        raise ValueError(\n            f\"{repr(idx_type)} is not a legal value for `idx_type`, \"\n            \"use  'i'/'f'/'s'/'dt'/'p'/'td'.\"\n        )\n\n    if len(ndupe_l) < nlevels:\n        ndupe_l.extend([1] * (nlevels - len(ndupe_l)))\n    assert len(ndupe_l) == nlevels\n\n    assert all(x > 0 for x in ndupe_l)\n\n    list_of_lists = []\n    for i in range(nlevels):\n\n        def keyfunc(x):\n            numeric_tuple = re.sub(r\"[^\\d_]_?\", \"\", x).split(\"_\")\n            return [int(num) for num in numeric_tuple]\n\n        # build a list of lists to create the index from\n        div_factor = nentries // ndupe_l[i] + 1\n\n        # Deprecated since version 3.9: collections.Counter now supports []. See PEP 585\n        # and Generic Alias Type.\n        cnt: Counter[str] = collections.Counter()\n        for j in range(div_factor):\n            label = f\"{prefix}_l{i}_g{j}\"\n            cnt[label] = ndupe_l[i]\n        # cute Counter trick\n        result = sorted(cnt.elements(), key=keyfunc)[:nentries]\n        list_of_lists.append(result)\n\n    tuples = list(zip(*list_of_lists))\n\n    # convert tuples to index\n    if nentries == 1:\n        # we have a single level of tuples, i.e. a regular Index\n        name = None if names is None else names[0]\n        index = Index(tuples[0], name=name)\n    elif nlevels == 1:\n        name = None if names is None else names[0]\n        index = Index((x[0] for x in tuples), name=name)\n    else:\n        index = MultiIndex.from_tuples(tuples, names=names)\n    return index\n\n\ndef makeCustomDataframe(\n    nrows,\n    ncols,\n    c_idx_names: bool | list[str] = True,\n    r_idx_names: bool | list[str] = True,\n    c_idx_nlevels: int = 1,\n    r_idx_nlevels: int = 1,\n    data_gen_f=None,\n    c_ndupe_l=None,\n    r_ndupe_l=None,\n    dtype=None,\n    c_idx_type=None,\n    r_idx_type=None,\n) -> DataFrame:\n    \"\"\"\n    Create a DataFrame using supplied parameters.\n\n    Parameters\n    ----------\n    nrows,  ncols - number of data rows/cols\n    c_idx_names, r_idx_names  - False/True/list of strings,  yields No names ,\n            default names or uses the provided names for the levels of the\n            corresponding index. You can provide a single string when\n            c_idx_nlevels ==1.\n    c_idx_nlevels - number of levels in columns index. > 1 will yield MultiIndex\n    r_idx_nlevels - number of levels in rows index. > 1 will yield MultiIndex\n    data_gen_f - a function f(row,col) which return the data value\n            at that position, the default generator used yields values of the form\n            \"RxCy\" based on position.\n    c_ndupe_l, r_ndupe_l - list of integers, determines the number\n            of duplicates for each label at a given level of the corresponding\n            index. The default `None` value produces a multiplicity of 1 across\n            all levels, i.e. a unique index. Will accept a partial list of length\n            N < idx_nlevels, for just the first N levels. If ndupe doesn't divide\n            nrows/ncol, the last label might have lower multiplicity.\n    dtype - passed to the DataFrame constructor as is, in case you wish to\n            have more control in conjunction with a custom `data_gen_f`\n    r_idx_type, c_idx_type -  \"i\"/\"f\"/\"s\"/\"dt\"/\"td\".\n        If idx_type is not None, `idx_nlevels` must be 1.\n        \"i\"/\"f\" creates an integer/float index,\n        \"s\" creates a string index\n        \"dt\" create a datetime index.\n        \"td\" create a timedelta index.\n\n            if unspecified, string labels will be generated.\n\n    Examples\n    --------\n    # 5 row, 3 columns, default names on both, single index on both axis\n    >> makeCustomDataframe(5,3)\n\n    # make the data a random int between 1 and 100\n    >> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))\n\n    # 2-level multiindex on rows with each label duplicated\n    # twice on first level, default names on both axis, single\n    # index on both axis\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=2,r_ndupe_l=[2])\n\n    # DatetimeIndex on row, index with unicode labels on columns\n    # no names on either axis\n    >> a=makeCustomDataframe(5,3,c_idx_names=False,r_idx_names=False,\n                             r_idx_type=\"dt\",c_idx_type=\"u\")\n\n    # 4-level multindex on rows with names provided, 2-level multindex\n    # on columns with default labels and default names.\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=4,\n                             r_idx_names=[\"FEE\",\"FIH\",\"FOH\",\"FUM\"],\n                             c_idx_nlevels=2)\n\n    >> a=mkdf(5,3,r_idx_nlevels=2,c_idx_nlevels=4)\n    \"\"\"\n    assert c_idx_nlevels > 0\n    assert r_idx_nlevels > 0\n    assert r_idx_type is None or (\n        r_idx_type in (\"i\", \"f\", \"s\", \"dt\", \"p\", \"td\") and r_idx_nlevels == 1\n    )\n    assert c_idx_type is None or (\n        c_idx_type in (\"i\", \"f\", \"s\", \"dt\", \"p\", \"td\") and c_idx_nlevels == 1\n    )\n\n    columns = makeCustomIndex(\n        ncols,\n        nlevels=c_idx_nlevels,\n        prefix=\"C\",\n        names=c_idx_names,\n        ndupe_l=c_ndupe_l,\n        idx_type=c_idx_type,\n    )\n    index = makeCustomIndex(\n        nrows,\n        nlevels=r_idx_nlevels,\n        prefix=\"R\",\n        names=r_idx_names,\n        ndupe_l=r_ndupe_l,\n        idx_type=r_idx_type,\n    )\n\n    # by default, generate data based on location\n    if data_gen_f is None:\n        data_gen_f = lambda r, c: f\"R{r}C{c}\"\n\n    data = [[data_gen_f(r, c) for c in range(ncols)] for r in range(nrows)]\n\n    return DataFrame(data, index, columns, dtype=dtype)\n\n\ndef _create_missing_idx(nrows, ncols, density: float, random_state=None):\n    if random_state is None:\n        random_state = np.random\n    else:\n        random_state = np.random.RandomState(random_state)\n\n    # below is cribbed from scipy.sparse\n    size = round((1 - density) * nrows * ncols)\n    # generate a few more to ensure unique values\n    min_rows = 5\n    fac = 1.02\n    extra_size = min(size + min_rows, fac * size)\n\n    def _gen_unique_rand(rng, _extra_size):\n        ind = rng.rand(int(_extra_size))\n        return np.unique(np.floor(ind * nrows * ncols))[:size]\n\n    ind = _gen_unique_rand(random_state, extra_size)\n    while ind.size < size:\n        extra_size *= 1.05\n        ind = _gen_unique_rand(random_state, extra_size)\n\n    j = np.floor(ind * 1.0 / nrows).astype(int)\n    i = (ind - j * nrows).astype(int)\n    return i.tolist(), j.tolist()\n\n\ndef makeMissingDataframe(density: float = 0.9, random_state=None) -> DataFrame:\n    df = makeDataFrame()\n    i, j = _create_missing_idx(*df.shape, density=density, random_state=random_state)\n    df.values[i, j] = np.nan\n    return df\n\n\nclass SubclassedSeries(Series):\n    _metadata = [\"testattr\", \"name\"]\n\n    @property\n    def _constructor(self):\n        # For testing, those properties return a generic callable, and not\n        # the actual class. In this case that is equivalent, but it is to\n        # ensure we don't rely on the property returning a class\n        # See https://github.com/pandas-dev/pandas/pull/46018 and\n        # https://github.com/pandas-dev/pandas/issues/32638 and linked issues\n        return lambda *args, **kwargs: SubclassedSeries(*args, **kwargs)\n\n    @property\n    def _constructor_expanddim(self):\n        return lambda *args, **kwargs: SubclassedDataFrame(*args, **kwargs)\n\n\nclass SubclassedDataFrame(DataFrame):\n    _metadata = [\"testattr\"]\n\n    @property\n    def _constructor(self):\n        return lambda *args, **kwargs: SubclassedDataFrame(*args, **kwargs)\n\n    @property\n    def _constructor_sliced(self):\n        return lambda *args, **kwargs: SubclassedSeries(*args, **kwargs)\n\n\nclass SubclassedCategorical(Categorical):\n    @property\n    def _constructor(self):\n        return SubclassedCategorical\n\n\ndef _make_skipna_wrapper(alternative, skipna_alternative=None):\n    \"\"\"\n    Create a function for calling on an array.\n\n    Parameters\n    ----------\n    alternative : function\n        The function to be called on the array with no NaNs.\n        Only used when 'skipna_alternative' is None.\n    skipna_alternative : function\n        The function to be called on the original array\n\n    Returns\n    -------\n    function\n    \"\"\"\n    if skipna_alternative:\n\n        def skipna_wrapper(x):\n            return skipna_alternative(x.values)\n\n    else:\n\n        def skipna_wrapper(x):\n            nona = x.dropna()\n            if len(nona) == 0:\n                return np.nan\n            return alternative(nona)\n\n    return skipna_wrapper\n\n\ndef convert_rows_list_to_csv_str(rows_list: list[str]) -> str:\n    \"\"\"\n    Convert list of CSV rows to single CSV-formatted string for current OS.\n\n    This method is used for creating expected value of to_csv() method.\n\n    Parameters\n    ----------\n    rows_list : List[str]\n        Each element represents the row of csv.\n\n    Returns\n    -------\n    str\n        Expected output of to_csv() in current OS.\n    \"\"\"\n    sep = os.linesep\n    return sep.join(rows_list) + sep\n\n\ndef external_error_raised(expected_exception: type[Exception]) -> ContextManager:\n    \"\"\"\n    Helper function to mark pytest.raises that have an external error message.\n\n    Parameters\n    ----------\n    expected_exception : Exception\n        Expected error to raise.\n\n    Returns\n    -------\n    Callable\n        Regular `pytest.raises` function with `match` equal to `None`.\n    \"\"\"\n    import pytest\n\n    return pytest.raises(expected_exception, match=None)  # noqa: PDF010\n\n\ncython_table = pd.core.common._cython_table.items()\n\n\ndef get_cython_table_params(ndframe, func_names_and_expected):\n    \"\"\"\n    Combine frame, functions from com._cython_table\n    keys and expected result.\n\n    Parameters\n    ----------\n    ndframe : DataFrame or Series\n    func_names_and_expected : Sequence of two items\n        The first item is a name of a NDFrame method ('sum', 'prod') etc.\n        The second item is the expected return value.\n\n    Returns\n    -------\n    list\n        List of three items (DataFrame, function, expected result)\n    \"\"\"\n    results = []\n    for func_name, expected in func_names_and_expected:\n        results.append((ndframe, func_name, expected))\n        results += [\n            (ndframe, func, expected)\n            for func, name in cython_table\n            if name == func_name\n        ]\n    return results\n\n\ndef get_op_from_name(op_name: str) -> Callable:\n    \"\"\"\n    The operator function for a given op name.\n\n    Parameters\n    ----------\n    op_name : str\n        The op name, in form of \"add\" or \"__add__\".\n\n    Returns\n    -------\n    function\n        A function performing the operation.\n    \"\"\"\n    short_opname = op_name.strip(\"_\")\n    try:\n        op = getattr(operator, short_opname)\n    except AttributeError:\n        # Assume it is the reverse operator\n        rop = getattr(operator, short_opname[1:])\n        op = lambda x, y: rop(y, x)\n\n    return op\n\n\n# -----------------------------------------------------------------------------\n# Indexing test helpers\n\n\ndef getitem(x):\n    return x\n\n\ndef setitem(x):\n    return x\n\n\ndef loc(x):\n    return x.loc\n\n\ndef iloc(x):\n    return x.iloc\n\n\ndef at(x):\n    return x.at\n\n\ndef iat(x):\n    return x.iat\n\n\n# -----------------------------------------------------------------------------\n\n\ndef shares_memory(left, right) -> bool:\n    \"\"\"\n    Pandas-compat for np.shares_memory.\n    \"\"\"\n    if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n        return np.shares_memory(left, right)\n    elif isinstance(left, np.ndarray):\n        # Call with reversed args to get to unpacking logic below.\n        return shares_memory(right, left)\n\n    if isinstance(left, RangeIndex):\n        return False\n    if isinstance(left, MultiIndex):\n        return shares_memory(left._codes, right)\n    if isinstance(left, (Index, Series)):\n        return shares_memory(left._values, right)\n\n    if isinstance(left, NDArrayBackedExtensionArray):\n        return shares_memory(left._ndarray, right)\n    if isinstance(left, pd.core.arrays.SparseArray):\n        return shares_memory(left.sp_values, right)\n    if isinstance(left, pd.core.arrays.IntervalArray):\n        return shares_memory(left._left, right) or shares_memory(left._right, right)\n\n    if isinstance(left, ExtensionArray) and left.dtype == \"string[pyarrow]\":\n        # https://github.com/pandas-dev/pandas/pull/43930#discussion_r736862669\n        if isinstance(right, ExtensionArray) and right.dtype == \"string[pyarrow]\":\n            # error: \"ExtensionArray\" has no attribute \"_data\"\n            left_pa_data = left._data  # type: ignore[attr-defined]\n            # error: \"ExtensionArray\" has no attribute \"_data\"\n            right_pa_data = right._data  # type: ignore[attr-defined]\n            left_buf1 = left_pa_data.chunk(0).buffers()[1]\n            right_buf1 = right_pa_data.chunk(0).buffers()[1]\n            return left_buf1 == right_buf1\n\n    if isinstance(left, BaseMaskedArray) and isinstance(right, BaseMaskedArray):\n        # By convention, we'll say these share memory if they share *either*\n        #  the _data or the _mask\n        return np.shares_memory(left._data, right._data) or np.shares_memory(\n            left._mask, right._mask\n        )\n\n    if isinstance(left, DataFrame) and len(left._mgr.arrays) == 1:\n        arr = left._mgr.arrays[0]\n        return shares_memory(arr, right)\n\n    raise NotImplementedError(type(left), type(right))\n\n\n__all__ = [\n    \"ALL_INT_EA_DTYPES\",\n    \"ALL_INT_NUMPY_DTYPES\",\n    \"ALL_NUMPY_DTYPES\",\n    \"ALL_REAL_NUMPY_DTYPES\",\n    \"all_timeseries_index_generator\",\n    \"assert_almost_equal\",\n    \"assert_attr_equal\",\n    \"assert_categorical_equal\",\n    \"assert_class_equal\",\n    \"assert_contains_all\",\n    \"assert_copy\",\n    \"assert_datetime_array_equal\",\n    \"assert_dict_equal\",\n    \"assert_equal\",\n    \"assert_extension_array_equal\",\n    \"assert_frame_equal\",\n    \"assert_index_equal\",\n    \"assert_indexing_slices_equivalent\",\n    \"assert_interval_array_equal\",\n    \"assert_is_sorted\",\n    \"assert_is_valid_plot_return_object\",\n    \"assert_metadata_equivalent\",\n    \"assert_numpy_array_equal\",\n    \"assert_period_array_equal\",\n    \"assert_produces_warning\",\n    \"assert_series_equal\",\n    \"assert_sp_array_equal\",\n    \"assert_timedelta_array_equal\",\n    \"at\",\n    \"BOOL_DTYPES\",\n    \"box_expected\",\n    \"BYTES_DTYPES\",\n    \"can_set_locale\",\n    \"close\",\n    \"COMPLEX_DTYPES\",\n    \"convert_rows_list_to_csv_str\",\n    \"DATETIME64_DTYPES\",\n    \"decompress_file\",\n    \"EMPTY_STRING_PATTERN\",\n    \"ENDIAN\",\n    \"ensure_clean\",\n    \"ensure_safe_environment_variables\",\n    \"equalContents\",\n    \"external_error_raised\",\n    \"FLOAT_EA_DTYPES\",\n    \"FLOAT_NUMPY_DTYPES\",\n    \"getCols\",\n    \"get_cython_table_params\",\n    \"get_dtype\",\n    \"getitem\",\n    \"get_locales\",\n    \"getMixedTypeDict\",\n    \"get_obj\",\n    \"get_op_from_name\",\n    \"getPeriodData\",\n    \"getSeriesData\",\n    \"getTimeSeriesData\",\n    \"iat\",\n    \"iloc\",\n    \"index_subclass_makers_generator\",\n    \"loc\",\n    \"makeBoolIndex\",\n    \"makeCategoricalIndex\",\n    \"makeCustomDataframe\",\n    \"makeCustomIndex\",\n    \"makeDataFrame\",\n    \"makeDateIndex\",\n    \"makeFloatIndex\",\n    \"makeFloatSeries\",\n    \"makeIntervalIndex\",\n    \"makeIntIndex\",\n    \"makeMissingDataframe\",\n    \"makeMixedDataFrame\",\n    \"makeMultiIndex\",\n    \"makeNumericIndex\",\n    \"makeObjectSeries\",\n    \"makePeriodFrame\",\n    \"makePeriodIndex\",\n    \"makePeriodSeries\",\n    \"make_rand_series\",\n    \"makeRangeIndex\",\n    \"makeStringIndex\",\n    \"makeStringSeries\",\n    \"makeTimeDataFrame\",\n    \"makeTimedeltaIndex\",\n    \"makeTimeSeries\",\n    \"makeUIntIndex\",\n    \"maybe_produces_warning\",\n    \"NARROW_NP_DTYPES\",\n    \"network\",\n    \"NP_NAT_OBJECTS\",\n    \"NULL_OBJECTS\",\n    \"OBJECT_DTYPES\",\n    \"raise_assert_detail\",\n    \"randbool\",\n    \"rands\",\n    \"reset_display_options\",\n    \"RNGContext\",\n    \"round_trip_localpath\",\n    \"round_trip_pathlib\",\n    \"round_trip_pickle\",\n    \"setitem\",\n    \"set_locale\",\n    \"set_timezone\",\n    \"shares_memory\",\n    \"SIGNED_INT_EA_DTYPES\",\n    \"SIGNED_INT_NUMPY_DTYPES\",\n    \"STRING_DTYPES\",\n    \"SubclassedCategorical\",\n    \"SubclassedDataFrame\",\n    \"SubclassedSeries\",\n    \"TIMEDELTA64_DTYPES\",\n    \"to_array\",\n    \"UNSIGNED_INT_EA_DTYPES\",\n    \"UNSIGNED_INT_NUMPY_DTYPES\",\n    \"use_numexpr\",\n    \"with_csv_dialect\",\n    \"write_to_compressed\",\n]\n"
    },
    {
      "filename": "pandas/_testing/contexts.py",
      "content": "from __future__ import annotations\n\nfrom contextlib import contextmanager\nimport os\nfrom pathlib import Path\nimport tempfile\nfrom types import TracebackType\nfrom typing import (\n    IO,\n    Any,\n    Generator,\n)\nimport uuid\n\nimport numpy as np\n\nfrom pandas import set_option\n\nfrom pandas.io.common import get_handle\n\n\n@contextmanager\ndef decompress_file(path, compression) -> Generator[IO[bytes], None, None]:\n    \"\"\"\n    Open a compressed file and return a file object.\n\n    Parameters\n    ----------\n    path : str\n        The path where the file is read from.\n\n    compression : {'gzip', 'bz2', 'zip', 'xz', 'zstd', None}\n        Name of the decompression to use\n\n    Returns\n    -------\n    file object\n    \"\"\"\n    with get_handle(path, \"rb\", compression=compression, is_text=False) as handle:\n        yield handle.handle\n\n\n@contextmanager\ndef set_timezone(tz: str) -> Generator[None, None, None]:\n    \"\"\"\n    Context manager for temporarily setting a timezone.\n\n    Parameters\n    ----------\n    tz : str\n        A string representing a valid timezone.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> from dateutil.tz import tzlocal\n    >>> tzlocal().tzname(datetime(2021, 1, 1))  # doctest: +SKIP\n    'IST'\n\n    >>> with set_timezone('US/Eastern'):\n    ...     tzlocal().tzname(datetime(2021, 1, 1))\n    ...\n    'EST'\n    \"\"\"\n    import time\n\n    def setTZ(tz) -> None:\n        if tz is None:\n            try:\n                del os.environ[\"TZ\"]\n            except KeyError:\n                pass\n        else:\n            os.environ[\"TZ\"] = tz\n            time.tzset()\n\n    orig_tz = os.environ.get(\"TZ\")\n    setTZ(tz)\n    try:\n        yield\n    finally:\n        setTZ(orig_tz)\n\n\n@contextmanager\ndef ensure_clean(\n    filename=None, return_filelike: bool = False, **kwargs: Any\n) -> Generator[Any, None, None]:\n    \"\"\"\n    Gets a temporary path and agrees to remove on close.\n\n    This implementation does not use tempfile.mkstemp to avoid having a file handle.\n    If the code using the returned path wants to delete the file itself, windows\n    requires that no program has a file handle to it.\n\n    Parameters\n    ----------\n    filename : str (optional)\n        suffix of the created file.\n    return_filelike : bool (default False)\n        if True, returns a file-like which is *always* cleaned. Necessary for\n        savefig and other functions which want to append extensions.\n    **kwargs\n        Additional keywords are passed to open().\n\n    \"\"\"\n    folder = Path(tempfile.gettempdir())\n\n    if filename is None:\n        filename = \"\"\n    filename = str(uuid.uuid4()) + filename\n    path = folder / filename\n\n    path.touch()\n\n    handle_or_str: str | IO = str(path)\n    if return_filelike:\n        kwargs.setdefault(\"mode\", \"w+b\")\n        handle_or_str = open(path, **kwargs)\n\n    try:\n        yield handle_or_str\n    finally:\n        if not isinstance(handle_or_str, str):\n            handle_or_str.close()\n        if path.is_file():\n            path.unlink()\n\n\n@contextmanager\ndef ensure_safe_environment_variables() -> Generator[None, None, None]:\n    \"\"\"\n    Get a context manager to safely set environment variables\n\n    All changes will be undone on close, hence environment variables set\n    within this contextmanager will neither persist nor change global state.\n    \"\"\"\n    saved_environ = dict(os.environ)\n    try:\n        yield\n    finally:\n        os.environ.clear()\n        os.environ.update(saved_environ)\n\n\n@contextmanager\ndef with_csv_dialect(name, **kwargs) -> Generator[None, None, None]:\n    \"\"\"\n    Context manager to temporarily register a CSV dialect for parsing CSV.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dialect.\n    kwargs : mapping\n        The parameters for the dialect.\n\n    Raises\n    ------\n    ValueError : the name of the dialect conflicts with a builtin one.\n\n    See Also\n    --------\n    csv : Python's CSV library.\n    \"\"\"\n    import csv\n\n    _BUILTIN_DIALECTS = {\"excel\", \"excel-tab\", \"unix\"}\n\n    if name in _BUILTIN_DIALECTS:\n        raise ValueError(\"Cannot override builtin dialect.\")\n\n    csv.register_dialect(name, **kwargs)\n    try:\n        yield\n    finally:\n        csv.unregister_dialect(name)\n\n\n@contextmanager\ndef use_numexpr(use, min_elements=None) -> Generator[None, None, None]:\n    from pandas.core.computation import expressions as expr\n\n    if min_elements is None:\n        min_elements = expr._MIN_ELEMENTS\n\n    olduse = expr.USE_NUMEXPR\n    oldmin = expr._MIN_ELEMENTS\n    set_option(\"compute.use_numexpr\", use)\n    expr._MIN_ELEMENTS = min_elements\n    try:\n        yield\n    finally:\n        expr._MIN_ELEMENTS = oldmin\n        set_option(\"compute.use_numexpr\", olduse)\n\n\nclass RNGContext:\n    \"\"\"\n    Context manager to set the numpy random number generator speed. Returns\n    to the original value upon exiting the context manager.\n\n    Parameters\n    ----------\n    seed : int\n        Seed for numpy.random.seed\n\n    Examples\n    --------\n    with RNGContext(42):\n        np.random.randn()\n    \"\"\"\n\n    def __init__(self, seed) -> None:\n        self.seed = seed\n\n    def __enter__(self) -> None:\n\n        self.start_state = np.random.get_state()\n        np.random.seed(self.seed)\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_value: BaseException | None,\n        traceback: TracebackType | None,\n    ) -> None:\n\n        np.random.set_state(self.start_state)\n"
    },
    {
      "filename": "pandas/core/generic.py",
      "content": "# pyright: reportPropertyTypeMismatch=false\nfrom __future__ import annotations\n\nimport collections\nfrom datetime import timedelta\nimport gc\nimport json\nimport operator\nimport pickle\nimport re\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    ClassVar,\n    Hashable,\n    Iterator,\n    Literal,\n    Mapping,\n    NoReturn,\n    Sequence,\n    Type,\n    cast,\n    final,\n    overload,\n)\nimport warnings\nimport weakref\n\nimport numpy as np\n\nfrom pandas._config import config\n\nfrom pandas._libs import lib\nfrom pandas._libs.tslibs import (\n    Period,\n    Tick,\n    Timestamp,\n    to_offset,\n)\nfrom pandas._typing import (\n    AlignJoin,\n    AnyArrayLike,\n    ArrayLike,\n    Axis,\n    AxisInt,\n    ColspaceArgType,\n    CompressionOptions,\n    Dtype,\n    DtypeArg,\n    DtypeObj,\n    FilePath,\n    FillnaOptions,\n    FloatFormatType,\n    FormattersType,\n    Frequency,\n    IgnoreRaise,\n    IndexKeyFunc,\n    IndexLabel,\n    IntervalClosedType,\n    JSONSerializable,\n    Level,\n    Manager,\n    NaPosition,\n    NDFrameT,\n    RandomState,\n    Renamer,\n    SortKind,\n    StorageOptions,\n    Suffixes,\n    T,\n    TimeAmbiguous,\n    TimedeltaConvertibleTypes,\n    TimeNonexistent,\n    TimestampConvertibleTypes,\n    ValueKeyFunc,\n    WriteBuffer,\n    npt,\n)\nfrom pandas.compat._optional import import_optional_dependency\nfrom pandas.compat.numpy import function as nv\nfrom pandas.errors import (\n    AbstractMethodError,\n    InvalidIndexError,\n    SettingWithCopyError,\n    SettingWithCopyWarning,\n)\nfrom pandas.util._decorators import (\n    doc,\n    rewrite_axis_style_signature,\n)\nfrom pandas.util._exceptions import find_stack_level\nfrom pandas.util._validators import (\n    validate_ascending,\n    validate_bool_kwarg,\n    validate_fillna_kwargs,\n    validate_inclusive,\n)\n\nfrom pandas.core.dtypes.common import (\n    ensure_object,\n    ensure_platform_int,\n    ensure_str,\n    is_bool,\n    is_bool_dtype,\n    is_datetime64_any_dtype,\n    is_datetime64tz_dtype,\n    is_dict_like,\n    is_dtype_equal,\n    is_extension_array_dtype,\n    is_float,\n    is_list_like,\n    is_number,\n    is_numeric_dtype,\n    is_re_compilable,\n    is_scalar,\n    is_timedelta64_dtype,\n    pandas_dtype,\n)\nfrom pandas.core.dtypes.generic import (\n    ABCDataFrame,\n    ABCSeries,\n)\nfrom pandas.core.dtypes.inference import (\n    is_hashable,\n    is_nested_list_like,\n)\nfrom pandas.core.dtypes.missing import (\n    isna,\n    notna,\n)\n\nfrom pandas.core import (\n    algorithms as algos,\n    arraylike,\n    common as com,\n    indexing,\n    missing,\n    nanops,\n    sample,\n)\nfrom pandas.core.array_algos.replace import should_use_regex\nfrom pandas.core.arrays import ExtensionArray\nfrom pandas.core.base import PandasObject\nfrom pandas.core.construction import extract_array\nfrom pandas.core.describe import describe_ndframe\nfrom pandas.core.flags import Flags\nfrom pandas.core.indexes.api import (\n    DatetimeIndex,\n    Index,\n    MultiIndex,\n    PeriodIndex,\n    RangeIndex,\n    default_index,\n    ensure_index,\n)\nfrom pandas.core.internals import (\n    ArrayManager,\n    BlockManager,\n    SingleArrayManager,\n)\nfrom pandas.core.internals.construction import mgr_to_mgr\nfrom pandas.core.missing import find_valid_index\nfrom pandas.core.ops import align_method_FRAME\nfrom pandas.core.reshape.concat import concat\nfrom pandas.core.shared_docs import _shared_docs\nfrom pandas.core.sorting import get_indexer_indexer\nfrom pandas.core.window import (\n    Expanding,\n    ExponentialMovingWindow,\n    Rolling,\n    Window,\n)\n\nfrom pandas.io.formats import format as fmt\nfrom pandas.io.formats.format import (\n    DataFrameFormatter,\n    DataFrameRenderer,\n)\nfrom pandas.io.formats.printing import pprint_thing\n\nif TYPE_CHECKING:\n\n    from pandas._libs.tslibs import BaseOffset\n\n    from pandas.core.frame import DataFrame\n    from pandas.core.indexers.objects import BaseIndexer\n    from pandas.core.resample import Resampler\n    from pandas.core.series import Series\n\n    from pandas.io.pytables import HDFStore\n\n\n# goal is to be able to define the docs close to function, while still being\n# able to share\n_shared_docs = {**_shared_docs}\n_shared_doc_kwargs = {\n    \"axes\": \"keywords for axes\",\n    \"klass\": \"Series/DataFrame\",\n    \"axes_single_arg\": \"int or labels for object\",\n    \"args_transpose\": \"axes to permute (int or label for object)\",\n    \"inplace\": \"\"\"\n    inplace : bool, default False\n        If True, performs operation inplace and returns None.\"\"\",\n    \"optional_by\": \"\"\"\n        by : str or list of str\n            Name or list of names to sort by\"\"\",\n    \"replace_iloc\": \"\"\"\n    This differs from updating with ``.loc`` or ``.iloc``, which require\n    you to specify a location to update with some value.\"\"\",\n}\n\n\nbool_t = bool  # Need alias because NDFrame has def bool:\n\n\nclass NDFrame(PandasObject, indexing.IndexingMixin):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : bool, default False\n    \"\"\"\n\n    _internal_names: list[str] = [\n        \"_mgr\",\n        \"_cacher\",\n        \"_item_cache\",\n        \"_cache\",\n        \"_is_copy\",\n        \"_subtyp\",\n        \"_name\",\n        \"_default_kind\",\n        \"_default_fill_value\",\n        \"_metadata\",\n        \"__array_struct__\",\n        \"__array_interface__\",\n        \"_flags\",\n    ]\n    _internal_names_set: set[str] = set(_internal_names)\n    _accessors: set[str] = set()\n    _hidden_attrs: frozenset[str] = frozenset(\n        [\"_AXIS_NAMES\", \"_AXIS_NUMBERS\", \"get_values\"]\n    )\n    _metadata: list[str] = []\n    _is_copy: weakref.ReferenceType[NDFrame] | None = None\n    _mgr: Manager\n    _attrs: dict[Hashable, Any]\n    _typ: str\n\n    # ----------------------------------------------------------------------\n    # Constructors\n\n    def __init__(\n        self,\n        data: Manager,\n        copy: bool_t = False,\n        attrs: Mapping[Hashable, Any] | None = None,\n    ) -> None:\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_mgr\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)\n        object.__setattr__(self, \"_flags\", Flags(self, allows_duplicate_labels=True))\n\n    @classmethod\n    def _init_mgr(\n        cls,\n        mgr: Manager,\n        axes,\n        dtype: Dtype | None = None,\n        copy: bool_t = False,\n    ) -> Manager:\n        \"\"\"passed a manager and a axes dict\"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                axe = ensure_index(axe)\n                bm_axis = cls._get_block_manager_axis(a)\n                mgr = mgr.reindex_axis(axe, axis=bm_axis)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if (\n                isinstance(mgr, BlockManager)\n                and len(mgr.blocks) == 1\n                and is_dtype_equal(mgr.blocks[0].values.dtype, dtype)\n            ):\n                pass\n            else:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    def _as_manager(self: NDFrameT, typ: str, copy: bool_t = True) -> NDFrameT:\n        \"\"\"\n        Private helper function to create a DataFrame with specific manager.\n\n        Parameters\n        ----------\n        typ : {\"block\", \"array\"}\n        copy : bool, default True\n            Only controls whether the conversion from Block->ArrayManager\n            copies the 1D arrays (to ensure proper/contiguous memory layout).\n\n        Returns\n        -------\n        DataFrame\n            New DataFrame using specified manager type. Is not guaranteed\n            to be a copy or not.\n        \"\"\"\n        new_mgr: Manager\n        new_mgr = mgr_to_mgr(self._mgr, typ=typ, copy=copy)\n        # fastpath of passing a manager doesn't check the option/manager class\n        return self._constructor(new_mgr).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # attrs and flags\n\n    @property\n    def attrs(self) -> dict[Hashable, Any]:\n        \"\"\"\n        Dictionary of global attributes of this dataset.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n\n        See Also\n        --------\n        DataFrame.flags : Global flags applying to this object.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs\n\n    @attrs.setter\n    def attrs(self, value: Mapping[Hashable, Any]) -> None:\n        self._attrs = dict(value)\n\n    @final\n    @property\n    def flags(self) -> Flags:\n        \"\"\"\n        Get the properties associated with this pandas object.\n\n        The available flags are\n\n        * :attr:`Flags.allows_duplicate_labels`\n\n        See Also\n        --------\n        Flags : Flags that apply to pandas objects.\n        DataFrame.attrs : Global metadata applying to this dataset.\n\n        Notes\n        -----\n        \"Flags\" differ from \"metadata\". Flags reflect properties of the\n        pandas object (the Series or DataFrame). Metadata refer to properties\n        of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2]})\n        >>> df.flags\n        <Flags(allows_duplicate_labels=True)>\n\n        Flags can be get or set using ``.``\n\n        >>> df.flags.allows_duplicate_labels\n        True\n        >>> df.flags.allows_duplicate_labels = False\n\n        Or by slicing with a key\n\n        >>> df.flags[\"allows_duplicate_labels\"]\n        False\n        >>> df.flags[\"allows_duplicate_labels\"] = True\n        \"\"\"\n        return self._flags\n\n    @final\n    def set_flags(\n        self: NDFrameT,\n        *,\n        copy: bool_t = False,\n        allows_duplicate_labels: bool_t | None = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Return a new object with updated flags.\n\n        Parameters\n        ----------\n        allows_duplicate_labels : bool, optional\n            Whether the returned object allows duplicate labels.\n\n        Returns\n        -------\n        Series or DataFrame\n            The same type as the caller.\n\n        See Also\n        --------\n        DataFrame.attrs : Global metadata applying to this dataset.\n        DataFrame.flags : Global flags applying to this object.\n\n        Notes\n        -----\n        This method returns a new object that's a view on the same data\n        as the input. Mutating the input or the output values will be reflected\n        in the other.\n\n        This method is intended to be used in method chains.\n\n        \"Flags\" differ from \"metadata\". Flags reflect properties of the\n        pandas object (the Series or DataFrame). Metadata refer to properties\n        of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2]})\n        >>> df.flags.allows_duplicate_labels\n        True\n        >>> df2 = df.set_flags(allows_duplicate_labels=False)\n        >>> df2.flags.allows_duplicate_labels\n        False\n        \"\"\"\n        df = self.copy(deep=copy)\n        if allows_duplicate_labels is not None:\n            df.flags[\"allows_duplicate_labels\"] = allows_duplicate_labels\n        return df\n\n    @final\n    @classmethod\n    def _validate_dtype(cls, dtype) -> DtypeObj | None:\n        \"\"\"validate the passed dtype\"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype\n\n    # ----------------------------------------------------------------------\n    # Construction\n\n    @property\n    def _constructor(self: NDFrameT) -> Callable[..., NDFrameT]:\n        \"\"\"\n        Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    # ----------------------------------------------------------------------\n    # Internals\n\n    @final\n    @property\n    def _data(self):\n        # GH#33054 retained because some downstream packages uses this,\n        #  e.g. fastparquet\n        return self._mgr\n\n    # ----------------------------------------------------------------------\n    # Axis\n    _stat_axis_number = 0\n    _stat_axis_name = \"index\"\n    _AXIS_ORDERS: list[Literal[\"index\", \"columns\"]]\n    _AXIS_TO_AXIS_NUMBER: dict[Axis, AxisInt] = {0: 0, \"index\": 0, \"rows\": 0}\n    _info_axis_number: int\n    _info_axis_name: Literal[\"index\", \"columns\"]\n    _AXIS_LEN: int\n\n    @final\n    def _construct_axes_dict(self, axes: Sequence[Axis] | None = None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        # error: Argument 1 to \"update\" of \"MutableMapping\" has incompatible type\n        # \"Dict[str, Any]\"; expected \"SupportsKeysAndGetItem[Union[int, str], Any]\"\n        d.update(kwargs)  # type: ignore[arg-type]\n        return d\n\n    @final\n    @classmethod\n    def _construct_axes_from_arguments(\n        cls, args, kwargs, require_all: bool_t = False, sentinel=None\n    ):\n        \"\"\"\n        Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n        # construct the args\n        args = list(args)\n        for a in cls._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError as err:\n                    if require_all:\n                        raise TypeError(\n                            \"not enough/duplicate arguments specified!\"\n                        ) from err\n\n        axes = {a: kwargs.pop(a, sentinel) for a in cls._AXIS_ORDERS}\n        return axes, kwargs\n\n    @final\n    @classmethod\n    def _get_axis_number(cls, axis: Axis) -> AxisInt:\n        try:\n            return cls._AXIS_TO_AXIS_NUMBER[axis]\n        except KeyError:\n            raise ValueError(f\"No axis named {axis} for object type {cls.__name__}\")\n\n    @final\n    @classmethod\n    def _get_axis_name(cls, axis: Axis) -> Literal[\"index\", \"columns\"]:\n        axis_number = cls._get_axis_number(axis)\n        return cls._AXIS_ORDERS[axis_number]\n\n    @final\n    def _get_axis(self, axis: Axis) -> Index:\n        axis_number = self._get_axis_number(axis)\n        assert axis_number in {0, 1}\n        return self.index if axis_number == 0 else self.columns\n\n    @final\n    @classmethod\n    def _get_block_manager_axis(cls, axis: Axis) -> AxisInt:\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        ndim = cls._AXIS_LEN\n        if ndim == 2:\n            # i.e. DataFrame\n            return 1 - axis\n        return axis\n\n    @final\n    def _get_axis_resolvers(self, axis: str) -> dict[str, Series | MultiIndex]:\n        # index or columns\n        axis_index = getattr(self, axis)\n        d = {}\n        prefix = axis[0]\n\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                # prefix with 'i' or 'c' depending on the input axis\n                # e.g., you must do ilevel_0 for the 0th level of an unnamed\n                # multiiindex\n                key = f\"{prefix}level_{i}\"\n                level = i\n\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n\n        # put the index/columns itself in the dict\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n\n        d[axis] = dindex\n        return d\n\n    @final\n    def _get_index_resolvers(self) -> dict[Hashable, Series | MultiIndex]:\n        from pandas.core.computation.parsing import clean_column_name\n\n        d: dict[str, Series | MultiIndex] = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n\n        return {clean_column_name(k): v for k, v in d.items() if not isinstance(k, int)}\n\n    @final\n    def _get_cleaned_column_resolvers(self) -> dict[Hashable, Series]:\n        \"\"\"\n        Return the special character free column resolvers of a dataframe.\n\n        Column names with special characters are 'cleaned up' so that they can\n        be referred to by backtick quoting.\n        Used in :meth:`DataFrame.eval`.\n        \"\"\"\n        from pandas.core.computation.parsing import clean_column_name\n\n        if isinstance(self, ABCSeries):\n            return {clean_column_name(self.name): self}\n\n        return {\n            clean_column_name(k): v for k, v in self.items() if not isinstance(k, int)\n        }\n\n    @property\n    def _info_axis(self) -> Index:\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def _stat_axis(self) -> Index:\n        return getattr(self, self._stat_axis_name)\n\n    @property\n    def shape(self) -> tuple[int, ...]:\n        \"\"\"\n        Return a tuple of axis dimensions\n        \"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self) -> list[Index]:\n        \"\"\"\n        Return index label(s) of the internal NDFrame\n        \"\"\"\n        # we do it this way because if we have reversed axes, then\n        # the block manager shows then reversed\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @property\n    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._mgr.ndim\n\n    @property\n    def size(self) -> int:\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n        # error: Incompatible return value type (got \"signedinteger[_64Bit]\",\n        # expected \"int\")  [return-value]\n        return np.prod(self.shape)  # type: ignore[return-value]\n\n    def set_axis(\n        self: NDFrameT,\n        labels,\n        *,\n        axis: Axis = 0,\n        copy: bool_t = True,\n    ) -> NDFrameT:\n        \"\"\"\n        Assign desired index to given axis.\n\n        Indexes for%(extended_summary_sub)s row labels can be changed by assigning\n        a list-like or Index.\n\n        Parameters\n        ----------\n        labels : list-like, Index\n            The values for the new index.\n\n        axis : %(axes_single_arg)s, default 0\n            The axis to update. The value 0 identifies the rows. For `Series`\n            this parameter is unused and defaults to 0.\n\n        copy : bool, default True\n            Whether to make a copy of the underlying data.\n\n            .. versionadded:: 1.5.0\n\n        Returns\n        -------\n        renamed : %(klass)s\n            An object of type %(klass)s.\n\n        See Also\n        --------\n        %(klass)s.rename_axis : Alter the name of the index%(see_also_sub)s.\n        \"\"\"\n        return self._set_axis_nocheck(labels, axis, inplace=False, copy=copy)\n\n    @final\n    def _set_axis_nocheck(self, labels, axis: Axis, inplace: bool_t, copy: bool_t):\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            # With copy=False, we create a new object but don't copy the\n            #  underlying data.\n            obj = self.copy(deep=copy)\n            setattr(obj, obj._get_axis_name(axis), labels)\n            return obj\n\n    @final\n    def _set_axis(self, axis: AxisInt, labels: AnyArrayLike | list) -> None:\n        \"\"\"\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        labels = ensure_index(labels)\n        self._mgr.set_axis(axis, labels)\n        self._clear_item_cache()\n\n    @final\n    def swapaxes(\n        self: NDFrameT, axis1: Axis, axis2: Axis, copy: bool_t = True\n    ) -> NDFrameT:\n        \"\"\"\n        Interchange axes and swap values axes appropriately.\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n        i = self._get_axis_number(axis1)\n        j = self._get_axis_number(axis2)\n\n        if i == j:\n            if copy:\n                return self.copy()\n            return self\n\n        mapping = {i: j, j: i}\n\n        new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self._AXIS_LEN))\n        new_values = self.values.swapaxes(i, j)\n        if copy:\n            new_values = new_values.copy()\n\n        return self._constructor(\n            new_values,\n            *new_axes,\n        ).__finalize__(self, method=\"swapaxes\")\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def droplevel(self: NDFrameT, level: IndexLabel, axis: Axis = 0) -> NDFrameT:\n        \"\"\"\n        Return {klass} with requested index / column level(s) removed.\n\n        Parameters\n        ----------\n        level : int, str, or list-like\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or positional indexes\n            of levels.\n\n        axis : {{0 or 'index', 1 or 'columns'}}, default 0\n            Axis along which the level(s) is removed:\n\n            * 0 or 'index': remove level(s) in column.\n            * 1 or 'columns': remove level(s) in row.\n\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        {klass}\n            {klass} with requested index / column level(s) removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([\n        ...     [1, 2, 3, 4],\n        ...     [5, 6, 7, 8],\n        ...     [9, 10, 11, 12]\n        ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n        >>> df.columns = pd.MultiIndex.from_tuples([\n        ...     ('c', 'e'), ('d', 'f')\n        ... ], names=['level_1', 'level_2'])\n\n        >>> df\n        level_1   c   d\n        level_2   e   f\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n\n        >>> df.droplevel('a')\n        level_1   c   d\n        level_2   e   f\n        b\n        2        3   4\n        6        7   8\n        10      11  12\n\n        >>> df.droplevel('level_2', axis=1)\n        level_1   c   d\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n        \"\"\"\n        labels = self._get_axis(axis)\n        new_labels = labels.droplevel(level)\n        return self.set_axis(new_labels, axis=axis)\n\n    def pop(self, item: Hashable) -> Series | Any:\n        result = self[item]\n        del self[item]\n\n        return result\n\n    @final\n    def squeeze(self, axis: Axis | None = None):\n        \"\"\"\n        Squeeze 1 dimensional axis objects into scalars.\n\n        Series or DataFrames with a single element are squeezed to a scalar.\n        DataFrames with a single column or a single row are squeezed to a\n        Series. Otherwise the object is unchanged.\n\n        This method is most useful when you don't know if your\n        object is a Series or DataFrame, but you do know it has just a single\n        column. In that case you can safely call `squeeze` to ensure you have a\n        Series.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            A specific axis to squeeze. By default, all length-1 axes are\n            squeezed. For `Series` this parameter is unused and defaults to `None`.\n\n        Returns\n        -------\n        DataFrame, Series, or scalar\n            The projection after squeezing `axis` or all the axes.\n\n        See Also\n        --------\n        Series.iloc : Integer-location based indexing for selecting scalars.\n        DataFrame.iloc : Integer-location based indexing for selecting Series.\n        Series.to_frame : Inverse of DataFrame.squeeze for a\n            single-column DataFrame.\n\n        Examples\n        --------\n        >>> primes = pd.Series([2, 3, 5, 7])\n\n        Slicing might produce a Series with a single value:\n\n        >>> even_primes = primes[primes % 2 == 0]\n        >>> even_primes\n        0    2\n        dtype: int64\n\n        >>> even_primes.squeeze()\n        2\n\n        Squeezing objects with more than one value in every axis does nothing:\n\n        >>> odd_primes = primes[primes % 2 == 1]\n        >>> odd_primes\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        >>> odd_primes.squeeze()\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        Squeezing is even more effective when used with DataFrames.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n        >>> df\n           a  b\n        0  1  2\n        1  3  4\n\n        Slicing a single column will produce a DataFrame with the columns\n        having only one value:\n\n        >>> df_a = df[['a']]\n        >>> df_a\n           a\n        0  1\n        1  3\n\n        So the columns can be squeezed down, resulting in a Series:\n\n        >>> df_a.squeeze('columns')\n        0    1\n        1    3\n        Name: a, dtype: int64\n\n        Slicing a single row from a single column will produce a single\n        scalar DataFrame:\n\n        >>> df_0a = df.loc[df.index < 1, ['a']]\n        >>> df_0a\n           a\n        0  1\n\n        Squeezing the rows produces a single scalar Series:\n\n        >>> df_0a.squeeze('rows')\n        a    1\n        Name: 0, dtype: int64\n\n        Squeezing all axes will project directly into a scalar:\n\n        >>> df_0a.squeeze()\n        1\n        \"\"\"\n        axes = range(self._AXIS_LEN) if axis is None else (self._get_axis_number(axis),)\n        return self.iloc[\n            tuple(\n                0 if i in axes and len(a) == 1 else slice(None)\n                for i, a in enumerate(self.axes)\n            )\n        ]\n\n    # ----------------------------------------------------------------------\n    # Rename\n\n    def _rename(\n        self: NDFrameT,\n        mapper: Renamer | None = None,\n        *,\n        index: Renamer | None = None,\n        columns: Renamer | None = None,\n        axis: Axis | None = None,\n        copy: bool_t | None = None,\n        inplace: bool_t = False,\n        level: Level | None = None,\n        errors: str = \"ignore\",\n    ) -> NDFrameT | None:\n        # called by Series.rename and DataFrame.rename\n\n        if mapper is None and index is None and columns is None:\n            raise TypeError(\"must pass an index to rename\")\n\n        if index is not None or columns is not None:\n            if axis is not None:\n                raise TypeError(\n                    \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n                )\n            if mapper is not None:\n                raise TypeError(\n                    \"Cannot specify both 'mapper' and any of 'index' or 'columns'\"\n                )\n        else:\n            # use the mapper argument\n            if axis and self._get_axis_number(axis) == 1:\n                columns = mapper\n            else:\n                index = mapper\n\n        self._check_inplace_and_allows_duplicate_labels(inplace)\n        result = self if inplace else self.copy(deep=copy)\n\n        for axis_no, replacements in enumerate((index, columns)):\n            if replacements is None:\n                continue\n\n            ax = self._get_axis(axis_no)\n            f = com.get_rename_function(replacements)\n\n            if level is not None:\n                level = ax._get_level_number(level)\n\n            # GH 13473\n            if not callable(replacements):\n                if ax._is_multi and level is not None:\n                    indexer = ax.get_level_values(level).get_indexer_for(replacements)\n                else:\n                    indexer = ax.get_indexer_for(replacements)\n\n                if errors == \"raise\" and len(indexer[indexer == -1]):\n                    missing_labels = [\n                        label\n                        for index, label in enumerate(replacements)\n                        if indexer[index] == -1\n                    ]\n                    raise KeyError(f\"{missing_labels} not found in axis\")\n\n            new_index = ax._transform_index(f, level=level)\n            result._set_axis_nocheck(new_index, axis=axis_no, inplace=True, copy=False)\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result.__finalize__(self, method=\"rename\")\n\n    @overload\n    def rename_axis(\n        self: NDFrameT,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        inplace: Literal[False] = ...,\n        **kwargs,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def rename_axis(\n        self,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        inplace: Literal[True],\n        **kwargs,\n    ) -> None:\n        ...\n\n    @overload\n    def rename_axis(\n        self: NDFrameT,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        inplace: bool_t = ...,\n        **kwargs,\n    ) -> NDFrameT | None:\n        ...\n\n    @rewrite_axis_style_signature(\"mapper\", [(\"copy\", True)])\n    def rename_axis(\n        self: NDFrameT,\n        mapper: IndexLabel | lib.NoDefault = lib.no_default,\n        *,\n        inplace: bool_t = False,\n        **kwargs,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Set the name of the axis for the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n        index, columns : scalar, list-like, dict-like or function, optional\n            A scalar, list-like, dict-like or functions transformations to\n            apply to that axis' values.\n            Note that the ``columns`` parameter is not allowed if the\n            object is a Series. This parameter only apply for DataFrame\n            type objects.\n\n            Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index``\n            and/or ``columns``.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to rename. For `Series` this parameter is unused and defaults to 0.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.rename : Alter Series index labels or name.\n        DataFrame.rename : Alter DataFrame index labels or name.\n        Index.rename : Set new names on index.\n\n        Notes\n        -----\n        ``DataFrame.rename_axis`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        The first calling convention will only modify the names of\n        the index and/or the names of the Index object that is the columns.\n        In this case, the parameter ``copy`` is ignored.\n\n        The second calling convention will modify the names of the\n        corresponding index if mapper is a list or a scalar.\n        However, if mapper is dict-like or a function, it will use the\n        deprecated behavior of modifying the axis *labels*.\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n        >>> s\n        0       dog\n        1       cat\n        2    monkey\n        dtype: object\n        >>> s.rename_axis(\"animal\")\n        animal\n        0    dog\n        1    cat\n        2    monkey\n        dtype: object\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n        ...                    \"num_arms\": [0, 0, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs  num_arms\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"animal\")\n        >>> df\n                num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n        >>> df\n        limbs   num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n\n        **MultiIndex**\n\n        >>> df.index = pd.MultiIndex.from_product([['mammal'],\n        ...                                        ['dog', 'cat', 'monkey']],\n        ...                                       names=['type', 'name'])\n        >>> df\n        limbs          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(index={'type': 'class'})\n        limbs          num_legs  num_arms\n        class  name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(columns=str.upper)\n        LIMBS          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n        \"\"\"\n        kwargs[\"inplace\"] = inplace\n        axes, kwargs = self._construct_axes_from_arguments(\n            (), kwargs, sentinel=lib.no_default\n        )\n        copy = kwargs.pop(\"copy\", True)\n        inplace = kwargs.pop(\"inplace\", False)\n        axis = kwargs.pop(\"axis\", 0)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        if kwargs:\n            raise TypeError(\n                \"rename_axis() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if mapper is not lib.no_default:\n            # Use v0.23 behavior if a scalar or list\n            non_mapper = is_scalar(mapper) or (\n                is_list_like(mapper) and not is_dict_like(mapper)\n            )\n            if non_mapper:\n                return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n            else:\n                raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n        else:\n            # Use new behavior.  Means that index and/or columns\n            # is specified\n            result = self if inplace else self.copy(deep=copy)\n\n            for axis in range(self._AXIS_LEN):\n                v = axes.get(self._get_axis_name(axis))\n                if v is lib.no_default:\n                    continue\n                non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n                if non_mapper:\n                    newnames = v\n                else:\n                    f = com.get_rename_function(v)\n                    curnames = self._get_axis(axis).names\n                    newnames = [f(name) for name in curnames]\n                result._set_axis_name(newnames, axis=axis, inplace=True)\n            if not inplace:\n                return result\n            return None\n\n    @final\n    def _set_axis_name(self, name, axis: Axis = 0, inplace: bool_t = False):\n        \"\"\"\n        Set the name(s) of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name(s) to set.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to set the label. The value 0 or 'index' specifies index,\n            and the value 1 or 'columns' specifies columns.\n        inplace : bool, default False\n            If `True`, do operation inplace and return None.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or `None` if `inplace` is `True`.\n\n        See Also\n        --------\n        DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n        Series.rename : Alter the index labels or set the index name\n            of :class:`Series`.\n        Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs\n        dog            4\n        cat            4\n        monkey         2\n        >>> df._set_axis_name(\"animal\")\n                num_legs\n        animal\n        dog            4\n        cat            4\n        monkey         2\n        >>> df.index = pd.MultiIndex.from_product(\n        ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n        >>> df._set_axis_name([\"type\", \"name\"])\n                       num_legs\n        type   name\n        mammal dog        4\n               cat        4\n               monkey     2\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        renamed = self if inplace else self.copy()\n        if axis == 0:\n            renamed.index = idx\n        else:\n            renamed.columns = idx\n\n        if not inplace:\n            return renamed\n\n    # ----------------------------------------------------------------------\n    # Comparison Methods\n\n    @final\n    def _indexed_same(self, other) -> bool_t:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n        )\n\n    @final\n    def equals(self, other: object) -> bool_t:\n        \"\"\"\n        Test whether two objects contain the same elements.\n\n        This function allows two Series or DataFrames to be compared against\n        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal.\n\n        The row/column index do not need to have the same type, as long\n        as the values are considered equal. Corresponding columns must be of\n        the same dtype.\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n            The other Series or DataFrame to be compared with the first.\n\n        Returns\n        -------\n        bool\n            True if all elements are the same in both objects, False\n            otherwise.\n\n        See Also\n        --------\n        Series.eq : Compare two Series objects of the same length\n            and return a Series where each element is True if the element\n            in each Series is equal, False otherwise.\n        DataFrame.eq : Compare two DataFrame objects of the same shape and\n            return a DataFrame where each element is True if the respective\n            element in each DataFrame is equal, False otherwise.\n        testing.assert_series_equal : Raises an AssertionError if left and\n            right are not equal. Provides an easy interface to ignore\n            inequality in dtypes, indexes and precision among others.\n        testing.assert_frame_equal : Like assert_series_equal, but targets\n            DataFrames.\n        numpy.array_equal : Return True if two arrays have the same shape\n            and elements, False otherwise.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({1: [10], 2: [20]})\n        >>> df\n            1   2\n        0  10  20\n\n        DataFrames df and exactly_equal have the same types and values for\n        their elements and column labels, which will return True.\n\n        >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n        >>> exactly_equal\n            1   2\n        0  10  20\n        >>> df.equals(exactly_equal)\n        True\n\n        DataFrames df and different_column_type have the same element\n        types and values, but have different types for the column labels,\n        which will still return True.\n\n        >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n        >>> different_column_type\n           1.0  2.0\n        0   10   20\n        >>> df.equals(different_column_type)\n        True\n\n        DataFrames df and different_data_type have different types for the\n        same values for their elements, and will return False even though\n        their column labels are the same values and types.\n\n        >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n        >>> different_data_type\n              1     2\n        0  10.0  20.0\n        >>> df.equals(different_data_type)\n        False\n        \"\"\"\n        if not (isinstance(other, type(self)) or isinstance(self, type(other))):\n            return False\n        other = cast(NDFrame, other)\n        return self._mgr.equals(other._mgr)\n\n    # -------------------------------------------------------------------------\n    # Unary Methods\n\n    @final\n    def __neg__(self: NDFrameT) -> NDFrameT:\n        def blk_func(values: ArrayLike):\n            if is_bool_dtype(values.dtype):\n                # error: Argument 1 to \"inv\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsInversion[ndarray[Any, dtype[bool_]]]\"\n                return operator.inv(values)  # type: ignore[arg-type]\n            else:\n                # error: Argument 1 to \"neg\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsNeg[ndarray[Any, dtype[Any]]]\"\n                return operator.neg(values)  # type: ignore[arg-type]\n\n        new_data = self._mgr.apply(blk_func)\n        res = self._constructor(new_data)\n        return res.__finalize__(self, method=\"__neg__\")\n\n    @final\n    def __pos__(self: NDFrameT) -> NDFrameT:\n        def blk_func(values: ArrayLike):\n            if is_bool_dtype(values.dtype):\n                return values.copy()\n            else:\n                # error: Argument 1 to \"pos\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsPos[ndarray[Any, dtype[Any]]]\"\n                return operator.pos(values)  # type: ignore[arg-type]\n\n        new_data = self._mgr.apply(blk_func)\n        res = self._constructor(new_data)\n        return res.__finalize__(self, method=\"__pos__\")\n\n    @final\n    def __invert__(self: NDFrameT) -> NDFrameT:\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        new_data = self._mgr.apply(operator.invert)\n        return self._constructor(new_data).__finalize__(self, method=\"__invert__\")\n\n    @final\n    def __nonzero__(self) -> NoReturn:\n        raise ValueError(\n            f\"The truth value of a {type(self).__name__} is ambiguous. \"\n            \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n        )\n\n    __bool__ = __nonzero__\n\n    @final\n    def bool(self) -> bool_t:\n        \"\"\"\n        Return the bool of a single element Series or DataFrame.\n\n        This must be a boolean scalar value, either True or False. It will raise a\n        ValueError if the Series or DataFrame does not have exactly 1 element, or that\n        element is not boolean (integer values 0 and 1 will also raise an exception).\n\n        Returns\n        -------\n        bool\n            The value in the Series or DataFrame.\n\n        See Also\n        --------\n        Series.astype : Change the data type of a Series, including to boolean.\n        DataFrame.astype : Change the data type of a DataFrame, including to boolean.\n        numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.\n\n        Examples\n        --------\n        The method will only work for single element objects with a boolean value:\n\n        >>> pd.Series([True]).bool()\n        True\n        >>> pd.Series([False]).bool()\n        False\n\n        >>> pd.DataFrame({'col': [True]}).bool()\n        True\n        >>> pd.DataFrame({'col': [False]}).bool()\n        False\n        \"\"\"\n        v = self.squeeze()\n        if isinstance(v, (bool, np.bool_)):\n            return bool(v)\n        elif is_scalar(v):\n            raise ValueError(\n                \"bool cannot act on a non-boolean single element \"\n                f\"{type(self).__name__}\"\n            )\n\n        self.__nonzero__()\n        # for mypy (__nonzero__ raises)\n        return True\n\n    @final\n    def abs(self: NDFrameT) -> NDFrameT:\n        \"\"\"\n        Return a Series/DataFrame with absolute numeric value of each element.\n\n        This function only applies to elements that are all numeric.\n\n        Returns\n        -------\n        abs\n            Series/DataFrame containing the absolute value of each element.\n\n        See Also\n        --------\n        numpy.absolute : Calculate the absolute value element-wise.\n\n        Notes\n        -----\n        For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n        :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n        Examples\n        --------\n        Absolute numeric values in a Series.\n\n        >>> s = pd.Series([-1.10, 2, -3.33, 4])\n        >>> s.abs()\n        0    1.10\n        1    2.00\n        2    3.33\n        3    4.00\n        dtype: float64\n\n        Absolute numeric values in a Series with complex numbers.\n\n        >>> s = pd.Series([1.2 + 1j])\n        >>> s.abs()\n        0    1.56205\n        dtype: float64\n\n        Absolute numeric values in a Series with a Timedelta element.\n\n        >>> s = pd.Series([pd.Timedelta('1 days')])\n        >>> s.abs()\n        0   1 days\n        dtype: timedelta64[ns]\n\n        Select rows with data closest to certain value using argsort (from\n        `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n        >>> df = pd.DataFrame({\n        ...     'a': [4, 5, 6, 7],\n        ...     'b': [10, 20, 30, 40],\n        ...     'c': [100, 50, -30, -50]\n        ... })\n        >>> df\n             a    b    c\n        0    4   10  100\n        1    5   20   50\n        2    6   30  -30\n        3    7   40  -50\n        >>> df.loc[(df.c - 43).abs().argsort()]\n             a    b    c\n        1    5   20   50\n        0    4   10  100\n        2    6   30  -30\n        3    7   40  -50\n        \"\"\"\n        res_mgr = self._mgr.apply(np.abs)\n        return self._constructor(res_mgr).__finalize__(self, name=\"abs\")\n\n    @final\n    def __abs__(self: NDFrameT) -> NDFrameT:\n        return self.abs()\n\n    @final\n    def __round__(self: NDFrameT, decimals: int = 0) -> NDFrameT:\n        return self.round(decimals).__finalize__(self, method=\"__round__\")\n\n    # -------------------------------------------------------------------------\n    # Label or Level Combination Helpers\n    #\n    # A collection of helper methods for DataFrame/Series operations that\n    # accept a combination of column/index labels and levels.  All such\n    # operations should utilize/extend these methods when possible so that we\n    # have consistent precedence and validation logic throughout the library.\n\n    @final\n    def _is_level_reference(self, key: Level, axis: Axis = 0) -> bool_t:\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential level name for the given axis\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level : bool\n        \"\"\"\n        axis_int = self._get_axis_number(axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis_int].names\n            and not self._is_label_reference(key, axis=axis_int)\n        )\n\n    @final\n    def _is_label_reference(self, key: Level, axis: Axis = 0) -> bool_t:\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential label name, i.e. Index entry.\n        axis : int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis_int = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis_int)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and any(key in self.axes[ax] for ax in other_axes)\n        )\n\n    @final\n    def _is_label_or_level_reference(self, key: Level, axis: AxisInt = 0) -> bool_t:\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential label or level name\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._is_level_reference(key, axis=axis) or self._is_label_reference(\n            key, axis=axis\n        )\n\n    @final\n    def _check_label_or_level_ambiguity(self, key: Level, axis: Axis = 0) -> None:\n        \"\"\"\n        Check whether `key` is ambiguous.\n\n        By ambiguous, we mean that it matches both a level of the input\n        `axis` and a label of the other axis.\n\n        Parameters\n        ----------\n        key : Hashable\n            Label or level name.\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns).\n\n        Raises\n        ------\n        ValueError: `key` is ambiguous\n        \"\"\"\n\n        axis_int = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis_int)\n\n        if (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis_int].names\n            and any(key in self.axes[ax] for ax in other_axes)\n        ):\n\n            # Build an informative and grammatical warning\n            level_article, level_type = (\n                (\"an\", \"index\") if axis_int == 0 else (\"a\", \"column\")\n            )\n\n            label_article, label_type = (\n                (\"a\", \"column\") if axis_int == 0 else (\"an\", \"index\")\n            )\n\n            msg = (\n                f\"'{key}' is both {level_article} {level_type} level and \"\n                f\"{label_article} {label_type} label, which is ambiguous.\"\n            )\n            raise ValueError(msg)\n\n    @final\n    def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key : Hashable\n            Label or level name.\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        np.ndarray or ExtensionArray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            # error: Incompatible types in assignment (expression has type \"Union[\n            # ExtensionArray, ndarray[Any, Any]]\", variable has type \"ndarray[Any,\n            # Any]\")\n            values = (\n                self.axes[axis]\n                .get_level_values(key)  # type: ignore[assignment]\n                ._values\n            )\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n\n            if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n                multi_message = (\n                    \"\\n\"\n                    \"For a multi-index, the label must be a \"\n                    \"tuple with elements corresponding to each level.\"\n                )\n            else:\n                multi_message = \"\"\n\n            label_axis_name = \"column\" if axis == 0 else \"index\"\n            raise ValueError(\n                f\"The {label_axis_name} label '{key}' is not unique.{multi_message}\"\n            )\n\n        return values\n\n    @final\n    def _drop_labels_or_levels(self, keys, axis: AxisInt = 0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys : str or list of str\n            labels or levels to drop\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        # Validate keys\n        keys = com.maybe_make_list(keys)\n        invalid_keys = [\n            k for k in keys if not self._is_label_or_level_reference(k, axis=axis)\n        ]\n\n        if invalid_keys:\n            raise ValueError(\n                \"The following keys are not valid labels or \"\n                f\"levels for axis {axis}: {invalid_keys}\"\n            )\n\n        # Compute levels and labels to drop\n        levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n\n        labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n\n        # Perform copy upfront and then use inplace operations below.\n        # This ensures that we always perform exactly one copy.\n        # ``copy`` and/or ``inplace`` options could be added in the future.\n        dropped = self.copy(deep=False)\n\n        if axis == 0:\n            # Handle dropping index levels\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n            # Handle dropping columns labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            # Handle dropping column levels\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    # Drop the specified levels from the MultiIndex\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    # Drop the last level of Index by replacing with\n                    # a RangeIndex\n                    dropped.columns = RangeIndex(dropped.columns.size)\n\n            # Handle dropping index labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n        return dropped\n\n    # ----------------------------------------------------------------------\n    # Iteration\n\n    # https://github.com/python/typeshed/issues/2148#issuecomment-520783318\n    # Incompatible types in assignment (expression has type \"None\", base class\n    # \"object\" defined the type as \"Callable[[object], int]\")\n    __hash__: ClassVar[None]  # type: ignore[assignment]\n\n    def __iter__(self) -> Iterator:\n        \"\"\"\n        Iterate over info axis.\n\n        Returns\n        -------\n        iterator\n            Info axis as iterator.\n        \"\"\"\n        return iter(self._info_axis)\n\n    # can we get a better explanation of this?\n    def keys(self) -> Index:\n        \"\"\"\n        Get the 'info axis' (see Indexing for more).\n\n        This is index for Series, columns for DataFrame.\n\n        Returns\n        -------\n        Index\n            Info axis.\n        \"\"\"\n        return self._info_axis\n\n    def items(self):\n        \"\"\"\n        Iterate over (label, values) on info axis\n\n        This is index for Series and columns for DataFrame.\n\n        Returns\n        -------\n        Generator\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    def __len__(self) -> int:\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    @final\n    def __contains__(self, key) -> bool_t:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self) -> bool_t:\n        \"\"\"\n        Indicator whether Series/DataFrame is empty.\n\n        True if Series/DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If Series/DataFrame is empty, return True, if not return False.\n\n        See Also\n        --------\n        Series.dropna : Return series without null values.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n\n        Notes\n        -----\n        If Series/DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        >>> ser_empty = pd.Series({'A' : []})\n        >>> ser_empty\n        A    []\n        dtype: object\n        >>> ser_empty.empty\n        False\n        >>> ser_empty = pd.Series()\n        >>> ser_empty.empty\n        True\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    # ----------------------------------------------------------------------\n    # Array Interface\n\n    # This is also set in IndexOpsMixin\n    # GH#23114 Ensure ndarray.__op__(DataFrame) returns NotImplemented\n    __array_priority__: int = 1000\n\n    def __array__(self, dtype: npt.DTypeLike | None = None) -> np.ndarray:\n        return np.asarray(self._values, dtype=dtype)\n\n    def __array_wrap__(\n        self,\n        result: np.ndarray,\n        context: tuple[Callable, tuple[Any, ...], int] | None = None,\n    ):\n        \"\"\"\n        Gets called after a ufunc and other functions.\n\n        Parameters\n        ----------\n        result: np.ndarray\n            The result of the ufunc or other function called on the NumPy array\n            returned by __array__\n        context: tuple of (func, tuple, int)\n            This parameter is returned by ufuncs as a 3-element tuple: (name of the\n            ufunc, arguments of the ufunc, domain of the ufunc), but is not set by\n            other numpy functions.q\n\n        Notes\n        -----\n        Series implements __array_ufunc_ so this not called for ufunc on Series.\n        \"\"\"\n        # Note: at time of dask 2022.01.0, this is still used by dask\n        warnings.warn(\n            \"The __array_wrap__ method of DataFrame and Series will be removed in \"\n            \"a future version\",\n            DeprecationWarning,\n            stacklevel=find_stack_level(),\n        )\n        res = lib.item_from_zerodim(result)\n        if is_scalar(res):\n            # e.g. we get here with np.ptp(series)\n            # ptp also requires the item_from_zerodim\n            return res\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(res, **d).__finalize__(self, method=\"__array_wrap__\")\n\n    @final\n    def __array_ufunc__(\n        self, ufunc: np.ufunc, method: str, *inputs: Any, **kwargs: Any\n    ):\n        return arraylike.array_ufunc(self, ufunc, method, *inputs, **kwargs)\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    @final\n    def __getstate__(self) -> dict[str, Any]:\n        meta = {k: getattr(self, k, None) for k in self._metadata}\n        return {\n            \"_mgr\": self._mgr,\n            \"_typ\": self._typ,\n            \"_metadata\": self._metadata,\n            \"attrs\": self.attrs,\n            \"_flags\": {k: self.flags[k] for k in self.flags._keys},\n            **meta,\n        }\n\n    @final\n    def __setstate__(self, state) -> None:\n        if isinstance(state, BlockManager):\n            self._mgr = state\n        elif isinstance(state, dict):\n            if \"_data\" in state and \"_mgr\" not in state:\n                # compat for older pickles\n                state[\"_mgr\"] = state.pop(\"_data\")\n            typ = state.get(\"_typ\")\n            if typ is not None:\n                attrs = state.get(\"_attrs\", {})\n                object.__setattr__(self, \"_attrs\", attrs)\n                flags = state.get(\"_flags\", {\"allows_duplicate_labels\": True})\n                object.__setattr__(self, \"_flags\", Flags(self, **flags))\n\n                # set in the order of internal names\n                # to avoid definitional recursion\n                # e.g. say fill_value needing _mgr to be\n                # defined\n                meta = set(self._internal_names + self._metadata)\n                for k in list(meta):\n                    if k in state and k != \"_flags\":\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n\n            else:\n                raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")\n        elif len(state) == 2:\n            raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")\n\n        self._item_cache: dict[Hashable, Series] = {}\n\n    # ----------------------------------------------------------------------\n    # Rendering Methods\n\n    def __repr__(self) -> str:\n        # string representation based upon iterating over self\n        # (since, by definition, `PandasContainers` are iterable)\n        prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n        return f\"{type(self).__name__}({prepr})\"\n\n    @final\n    def _repr_latex_(self):\n        \"\"\"\n        Returns a LaTeX representation for a particular object.\n        Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n        \"\"\"\n        if config.get_option(\"display.latex.repr\"):\n            return self.to_latex()\n        else:\n            return None\n\n    @final\n    def _repr_data_resource_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):\n            data = self.head(config.get_option(\"display.max_rows\"))\n\n            as_json = data.to_json(orient=\"table\")\n            as_json = cast(str, as_json)\n            return json.loads(as_json, object_pairs_hook=collections.OrderedDict)\n\n    # ----------------------------------------------------------------------\n    # I/O Methods\n\n    @final\n    @doc(\n        klass=\"object\",\n        storage_options=_shared_docs[\"storage_options\"],\n        storage_options_versionadded=\"1.2.0\",\n    )\n    def to_excel(\n        self,\n        excel_writer,\n        sheet_name: str = \"Sheet1\",\n        na_rep: str = \"\",\n        float_format: str | None = None,\n        columns: Sequence[Hashable] | None = None,\n        header: Sequence[Hashable] | bool_t = True,\n        index: bool_t = True,\n        index_label: IndexLabel = None,\n        startrow: int = 0,\n        startcol: int = 0,\n        engine: str | None = None,\n        merge_cells: bool_t = True,\n        inf_rep: str = \"inf\",\n        freeze_panes: tuple[int, int] | None = None,\n        storage_options: StorageOptions = None,\n    ) -> None:\n        \"\"\"\n        Write {klass} to an Excel sheet.\n\n        To write a single {klass} to an Excel .xlsx file it is only necessary to\n        specify a target file name. To write to multiple sheets it is necessary to\n        create an `ExcelWriter` object with a target file name, and specify a sheet\n        in the file to write to.\n\n        Multiple sheets may be written to by specifying unique `sheet_name`.\n        With all data written to the file it is necessary to save the changes.\n        Note that creating an `ExcelWriter` object with a file name that already\n        exists will result in the contents of the existing file being erased.\n\n        Parameters\n        ----------\n        excel_writer : path-like, file-like, or ExcelWriter object\n            File path or existing ExcelWriter.\n        sheet_name : str, default 'Sheet1'\n            Name of sheet which will contain DataFrame.\n        na_rep : str, default ''\n            Missing data representation.\n        float_format : str, optional\n            Format string for floating point numbers. For example\n            ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\n        columns : sequence or list of str, optional\n            Columns to write.\n        header : bool or list of str, default True\n            Write out the column names. If a list of string is given it is\n            assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        index_label : str or sequence, optional\n            Column label for index column(s) if desired. If not specified, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.\n        startrow : int, default 0\n            Upper left cell row to dump data frame.\n        startcol : int, default 0\n            Upper left cell column to dump data frame.\n        engine : str, optional\n            Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n            via the options ``io.excel.xlsx.writer`` or\n            ``io.excel.xlsm.writer``.\n\n        merge_cells : bool, default True\n            Write MultiIndex and Hierarchical Rows as merged cells.\n        inf_rep : str, default 'inf'\n            Representation for infinity (there is no native representation for\n            infinity in Excel).\n        freeze_panes : tuple of int (length 2), optional\n            Specifies the one-based bottommost row and rightmost column that\n            is to be frozen.\n        {storage_options}\n\n            .. versionadded:: {storage_options_versionadded}\n\n        See Also\n        --------\n        to_csv : Write DataFrame to a comma-separated values (csv) file.\n        ExcelWriter : Class for writing DataFrame objects into excel sheets.\n        read_excel : Read an Excel file into a pandas DataFrame.\n        read_csv : Read a comma-separated values (csv) file into DataFrame.\n        io.formats.style.Styler.to_excel : Add styles to Excel sheet.\n\n        Notes\n        -----\n        For compatibility with :meth:`~DataFrame.to_csv`,\n        to_excel serializes lists and dicts to strings before writing.\n\n        Once a workbook has been saved it is not possible to write further\n        data without rewriting the whole workbook.\n\n        Examples\n        --------\n\n        Create, write to and save a workbook:\n\n        >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                    index=['row 1', 'row 2'],\n        ...                    columns=['col 1', 'col 2'])\n        >>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\n        To specify the sheet name:\n\n        >>> df1.to_excel(\"output.xlsx\",\n        ...              sheet_name='Sheet_name_1')  # doctest: +SKIP\n\n        If you wish to write to more than one sheet in the workbook, it is\n        necessary to specify an ExcelWriter object:\n\n        >>> df2 = df1.copy()\n        >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP\n        ...     df1.to_excel(writer, sheet_name='Sheet_name_1')\n        ...     df2.to_excel(writer, sheet_name='Sheet_name_2')\n\n        ExcelWriter can also be used to append to an existing Excel file:\n\n        >>> with pd.ExcelWriter('output.xlsx',\n        ...                     mode='a') as writer:  # doctest: +SKIP\n        ...     df.to_excel(writer, sheet_name='Sheet_name_3')\n\n        To set the library that is used to write the Excel file,\n        you can pass the `engine` keyword (the default engine is\n        automatically chosen depending on the file extension):\n\n        >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP\n        \"\"\"\n\n        df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n        from pandas.io.formats.excel import ExcelFormatter\n\n        formatter = ExcelFormatter(\n            df,\n            na_rep=na_rep,\n            cols=columns,\n            header=header,\n            float_format=float_format,\n            index=index,\n            index_label=index_label,\n            merge_cells=merge_cells,\n            inf_rep=inf_rep,\n        )\n        formatter.write(\n            excel_writer,\n            sheet_name=sheet_name,\n            startrow=startrow,\n            startcol=startcol,\n            freeze_panes=freeze_panes,\n            engine=engine,\n            storage_options=storage_options,\n        )\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path_or_buf\",\n    )\n    def to_json(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        orient: str | None = None,\n        date_format: str | None = None,\n        double_precision: int = 10,\n        force_ascii: bool_t = True,\n        date_unit: str = \"ms\",\n        default_handler: Callable[[Any], JSONSerializable] | None = None,\n        lines: bool_t = False,\n        compression: CompressionOptions = \"infer\",\n        index: bool_t = True,\n        indent: int | None = None,\n        storage_options: StorageOptions = None,\n        mode: Literal[\"a\", \"w\"] = \"w\",\n    ) -> str | None:\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : str, path object, file-like object, or None, default None\n            String, path object (implementing os.PathLike[str]), or file-like\n            object implementing a write() function. If None, the result is\n            returned as a string.\n        orient : str\n            Indication of expected JSON string format.\n\n            * Series:\n\n                - default is 'index'\n                - allowed values are: {{'split', 'records', 'index', 'table'}}.\n\n            * DataFrame:\n\n                - default is 'columns'\n                - allowed values are: {{'split', 'records', 'index', 'columns',\n                  'values', 'table'}}.\n\n            * The format of the JSON string:\n\n                - 'split' : dict like {{'index' -> [index], 'columns' -> [columns],\n                  'data' -> [values]}}\n                - 'records' : list like [{{column -> value}}, ... , {{column -> value}}]\n                - 'index' : dict like {{index -> {{column -> value}}}}\n                - 'columns' : dict like {{column -> {{index -> value}}}}\n                - 'values' : just the values array\n                - 'table' : dict like {{'schema': {{schema}}, 'data': {{data}}}}\n\n                Describing the data, where data component is like ``orient='records'``.\n\n        date_format : {{None, 'epoch', 'iso'}}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : str, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line-delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not\n            list-like.\n        {compression_options}\n\n            .. versionchanged:: 1.4.0 Zstandard support.\n\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n        indent : int, optional\n           Length of whitespace used to indent each record.\n\n           .. versionadded:: 1.0.0\n\n        {storage_options}\n\n            .. versionadded:: 1.2.0\n\n        mode : str, default 'w' (writing)\n            Specify the IO mode for output when supplying a path_or_buf.\n            Accepted args are 'w' (writing) and 'a' (append) only.\n            mode='a' is only supported when lines is True and orient is 'records'.\n\n        Returns\n        -------\n        None or str\n            If path_or_buf is None, returns the resulting json format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        read_json : Convert a JSON string to pandas object.\n\n        Notes\n        -----\n        The behavior of ``indent=0`` varies from the stdlib, which does not\n        indent the output but does insert newlines. Currently, ``indent=0``\n        and the default ``indent=None`` are equivalent in pandas, though this\n        may change in a future release.\n\n        ``orient='table'`` contains a 'pandas_version' field under 'schema'.\n        This stores the version of `pandas` used in the latest revision of the\n        schema.\n\n        Examples\n        --------\n        >>> import json\n        >>> df = pd.DataFrame(\n        ...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n        ...     index=[\"row 1\", \"row 2\"],\n        ...     columns=[\"col 1\", \"col 2\"],\n        ... )\n\n        >>> result = df.to_json(orient=\"split\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"columns\": [\n                \"col 1\",\n                \"col 2\"\n            ],\n            \"index\": [\n                \"row 1\",\n                \"row 2\"\n            ],\n            \"data\": [\n                [\n                    \"a\",\n                    \"b\"\n                ],\n                [\n                    \"c\",\n                    \"d\"\n                ]\n            ]\n        }}\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> result = df.to_json(orient=\"records\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        [\n            {{\n                \"col 1\": \"a\",\n                \"col 2\": \"b\"\n            }},\n            {{\n                \"col 1\": \"c\",\n                \"col 2\": \"d\"\n            }}\n        ]\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"index\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"row 1\": {{\n                \"col 1\": \"a\",\n                \"col 2\": \"b\"\n            }},\n            \"row 2\": {{\n                \"col 1\": \"c\",\n                \"col 2\": \"d\"\n            }}\n        }}\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"columns\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"col 1\": {{\n                \"row 1\": \"a\",\n                \"row 2\": \"c\"\n            }},\n            \"col 2\": {{\n                \"row 1\": \"b\",\n                \"row 2\": \"d\"\n            }}\n        }}\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"values\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        [\n            [\n                \"a\",\n                \"b\"\n            ],\n            [\n                \"c\",\n                \"d\"\n            ]\n        ]\n\n        Encoding with Table Schema:\n\n        >>> result = df.to_json(orient=\"table\")\n        >>> parsed = json.loads(result)\n        >>> json.dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"schema\": {{\n                \"fields\": [\n                    {{\n                        \"name\": \"index\",\n                        \"type\": \"string\"\n                    }},\n                    {{\n                        \"name\": \"col 1\",\n                        \"type\": \"string\"\n                    }},\n                    {{\n                        \"name\": \"col 2\",\n                        \"type\": \"string\"\n                    }}\n                ],\n                \"primaryKey\": [\n                    \"index\"\n                ],\n                \"pandas_version\": \"1.4.0\"\n            }},\n            \"data\": [\n                {{\n                    \"index\": \"row 1\",\n                    \"col 1\": \"a\",\n                    \"col 2\": \"b\"\n                }},\n                {{\n                    \"index\": \"row 2\",\n                    \"col 1\": \"c\",\n                    \"col 2\": \"d\"\n                }}\n            ]\n        }}\n        \"\"\"\n        from pandas.io import json\n\n        if date_format is None and orient == \"table\":\n            date_format = \"iso\"\n        elif date_format is None:\n            date_format = \"epoch\"\n\n        config.is_nonnegative_int(indent)\n        indent = indent or 0\n\n        return json.to_json(\n            path_or_buf=path_or_buf,\n            obj=self,\n            orient=orient,\n            date_format=date_format,\n            double_precision=double_precision,\n            force_ascii=force_ascii,\n            date_unit=date_unit,\n            default_handler=default_handler,\n            lines=lines,\n            compression=compression,\n            index=index,\n            indent=indent,\n            storage_options=storage_options,\n            mode=mode,\n        )\n\n    @final\n    def to_hdf(\n        self,\n        path_or_buf: FilePath | HDFStore,\n        key: str,\n        mode: str = \"a\",\n        complevel: int | None = None,\n        complib: str | None = None,\n        append: bool_t = False,\n        format: str | None = None,\n        index: bool_t = True,\n        min_itemsize: int | dict[str, int] | None = None,\n        nan_rep=None,\n        dropna: bool_t | None = None,\n        data_columns: Literal[True] | list[str] | None = None,\n        errors: str = \"strict\",\n        encoding: str = \"UTF-8\",\n    ) -> None:\n        \"\"\"\n        Write the contained data to an HDF5 file using HDFStore.\n\n        Hierarchical Data Format (HDF) is self-describing, allowing an\n        application to interpret the structure and contents of a file with\n        no outside information. One HDF file can hold a mix of related objects\n        which can be accessed as a group or as individual objects.\n\n        In order to add another DataFrame or Series to an existing HDF file\n        please use append mode and a different a key.\n\n        .. warning::\n\n           One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n           but the type of the subclass is lost upon storing.\n\n        For more information see the :ref:`user guide <io.hdf5>`.\n\n        Parameters\n        ----------\n        path_or_buf : str or pandas.HDFStore\n            File path or HDFStore object.\n        key : str\n            Identifier for the group in the store.\n        mode : {'a', 'w', 'r+'}, default 'a'\n            Mode to open file:\n\n            - 'w': write, a new file is created (an existing file with\n              the same name would be deleted).\n            - 'a': append, an existing file is opened for reading and\n              writing, and if the file does not exist it is created.\n            - 'r+': similar to 'a', but the file must already exist.\n        complevel : {0-9}, default None\n            Specifies a compression level for data.\n            A value of 0 or None disables compression.\n        complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n            Specifies the compression library to be used.\n            As of v0.20.2 these additional compressors for Blosc are supported\n            (default if no compressor specified: 'blosc:blosclz'):\n            {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n            'blosc:zlib', 'blosc:zstd'}.\n            Specifying a compression library which is not available issues\n            a ValueError.\n        append : bool, default False\n            For Table formats, append the input data to the existing.\n        format : {'fixed', 'table', None}, default 'fixed'\n            Possible values:\n\n            - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n              nor searchable.\n            - 'table': Table format. Write as a PyTables Table structure\n              which may perform worse but allow more flexible operations\n              like searching / selecting subsets of the data.\n            - If None, pd.get_option('io.hdf.default_format') is checked,\n              followed by fallback to \"fixed\".\n        index : bool, default True\n            Write DataFrame index as a column.\n        min_itemsize : dict or int, optional\n            Map column names to minimum string sizes for columns.\n        nan_rep : Any, optional\n            How to represent null values as str.\n            Not allowed with append=True.\n        dropna : bool, default False, optional\n            Remove missing values.\n        data_columns : list of columns or True, optional\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See\n            :ref:`Query via data columns<io.hdf5-query-data-columns>`. for\n            more information.\n            Applicable only to format='table'.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list\n            of options.\n        encoding : str, default \"UTF-8\"\n\n        See Also\n        --------\n        read_hdf : Read from HDF file.\n        DataFrame.to_orc : Write a DataFrame to the binary orc format.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n        DataFrame.to_sql : Write to a SQL table.\n        DataFrame.to_feather : Write out feather-format for DataFrames.\n        DataFrame.to_csv : Write out to a csv file.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n        ...                   index=['a', 'b', 'c'])  # doctest: +SKIP\n        >>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP\n\n        We can add another object to the same file:\n\n        >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n        >>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP\n\n        Reading from HDF file:\n\n        >>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP\n        A  B\n        a  1  4\n        b  2  5\n        c  3  6\n        >>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n        \"\"\"\n        from pandas.io import pytables\n\n        # Argument 3 to \"to_hdf\" has incompatible type \"NDFrame\"; expected\n        # \"Union[DataFrame, Series]\" [arg-type]\n        pytables.to_hdf(\n            path_or_buf,\n            key,\n            self,  # type: ignore[arg-type]\n            mode=mode,\n            complevel=complevel,\n            complib=complib,\n            append=append,\n            format=format,\n            index=index,\n            min_itemsize=min_itemsize,\n            nan_rep=nan_rep,\n            dropna=dropna,\n            data_columns=data_columns,\n            errors=errors,\n            encoding=encoding,\n        )\n\n    @final\n    def to_sql(\n        self,\n        name: str,\n        con,\n        schema: str | None = None,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        index: bool_t = True,\n        index_label: IndexLabel = None,\n        chunksize: int | None = None,\n        dtype: DtypeArg | None = None,\n        method: str | None = None,\n    ) -> int | None:\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n        newly created, appended to, or overwritten.\n\n        Parameters\n        ----------\n        name : str\n            Name of SQL table.\n        con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. Legacy support is provided for sqlite3.Connection objects. The user\n            is responsible for engine disposal and connection closure for the SQLAlchemy\n            connectable See `here \\\n                <https://docs.sqlalchemy.org/en/13/core/connections.html>`_.\n\n        schema : str, optional\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            How to behave if the table already exists.\n\n            * fail: Raise a ValueError.\n            * replace: Drop the table before inserting new values.\n            * append: Insert new values to the existing table.\n\n        index : bool, default True\n            Write DataFrame index as a column. Uses `index_label` as the column\n            name in the table.\n        index_label : str or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, optional\n            Specify the number of rows in each batch to be written at a time.\n            By default, all rows will be written at once.\n        dtype : dict or scalar, optional\n            Specifying the datatype for columns. If a dictionary is used, the\n            keys should be the column names and the values should be the\n            SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n            scalar is provided, it will be applied to all columns.\n        method : {None, 'multi', callable}, optional\n            Controls the SQL insertion clause used:\n\n            * None : Uses standard SQL ``INSERT`` clause (one per row).\n            * 'multi': Pass multiple values in a single ``INSERT`` clause.\n            * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n            Details and a sample callable implementation can be found in the\n            section :ref:`insert method <io.sql.method>`.\n\n        Returns\n        -------\n        None or int\n            Number of rows affected by to_sql. None is returned if the callable\n            passed into ``method`` does not return an integer number of rows.\n\n            The number of returned rows affected is the sum of the ``rowcount``\n            attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n            reflect the exact number of written rows as stipulated in the\n            `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n            `SQLAlchemy <https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.BaseCursorResult.rowcount>`__.\n\n            .. versionadded:: 1.4.0\n\n        Raises\n        ------\n        ValueError\n            When the table already exists and `if_exists` is 'fail' (the\n            default).\n\n        See Also\n        --------\n        read_sql : Read a DataFrame from a table.\n\n        Notes\n        -----\n        Timezone aware datetime columns will be written as\n        ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n        database. Otherwise, the datetimes will be stored as timezone unaware\n        timestamps local to the original timezone.\n\n        References\n        ----------\n        .. [1] https://docs.sqlalchemy.org\n        .. [2] https://www.python.org/dev/peps/pep-0249/\n\n        Examples\n        --------\n        Create an in-memory SQLite database.\n\n        >>> from sqlalchemy import create_engine\n        >>> engine = create_engine('sqlite://', echo=False)\n\n        Create a table from scratch with 3 rows.\n\n        >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n        >>> df\n             name\n        0  User 1\n        1  User 2\n        2  User 3\n\n        >>> df.to_sql('users', con=engine)\n        3\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n        An `sqlalchemy.engine.Connection` can also be passed to `con`:\n\n        >>> with engine.begin() as connection:\n        ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n        ...     df1.to_sql('users', con=connection, if_exists='append')\n        2\n\n        This is allowed to support operations that require that the same\n        DBAPI connection is used for the entire operation.\n\n        >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n        >>> df2.to_sql('users', con=engine, if_exists='append')\n        2\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n         (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n         (1, 'User 7')]\n\n        Overwrite the table with just ``df2``.\n\n        >>> df2.to_sql('users', con=engine, if_exists='replace',\n        ...            index_label='id')\n        2\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 6'), (1, 'User 7')]\n\n        Specify the dtype (especially useful for integers with missing values).\n        Notice that while pandas is forced to store the data as floating point,\n        the database supports nullable integers. When fetching the data with\n        Python, we get back integer scalars.\n\n        >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n        >>> df\n             A\n        0  1.0\n        1  NaN\n        2  2.0\n\n        >>> from sqlalchemy.types import Integer\n        >>> df.to_sql('integers', con=engine, index=False,\n        ...           dtype={\"A\": Integer()})\n        3\n\n        >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n        [(1,), (None,), (2,)]\n        \"\"\"  # noqa:E501\n        from pandas.io import sql\n\n        return sql.to_sql(\n            self,\n            name,\n            con,\n            schema=schema,\n            if_exists=if_exists,\n            index=index,\n            index_label=index_label,\n            chunksize=chunksize,\n            dtype=dtype,\n            method=method,\n        )\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path\",\n    )\n    def to_pickle(\n        self,\n        path: FilePath | WriteBuffer[bytes],\n        compression: CompressionOptions = \"infer\",\n        protocol: int = pickle.HIGHEST_PROTOCOL,\n        storage_options: StorageOptions = None,\n    ) -> None:\n        \"\"\"\n        Pickle (serialize) object to file.\n\n        Parameters\n        ----------\n        path : str, path object, or file-like object\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function. File path where\n            the pickled object will be stored.\n        {compression_options}\n        protocol : int\n            Int which indicates which protocol should be used by the pickler,\n            default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n            values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n            parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html.\n\n        {storage_options}\n\n            .. versionadded:: 1.2.0\n\n        See Also\n        --------\n        read_pickle : Load pickled pandas object (or any object) from file.\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_sql : Write DataFrame to a SQL database.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Examples\n        --------\n        >>> original_df = pd.DataFrame({{\"foo\": range(5), \"bar\": range(5, 10)}})  # doctest: +SKIP\n        >>> original_df  # doctest: +SKIP\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n        >>> original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n\n        >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n        >>> unpickled_df  # doctest: +SKIP\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n        \"\"\"  # noqa: E501\n        from pandas.io.pickle import to_pickle\n\n        to_pickle(\n            self,\n            path,\n            compression=compression,\n            protocol=protocol,\n            storage_options=storage_options,\n        )\n\n    @final\n    def to_clipboard(\n        self, excel: bool_t = True, sep: str | None = None, **kwargs\n    ) -> None:\n        r\"\"\"\n        Copy object to the system clipboard.\n\n        Write a text representation of object to the system clipboard.\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : bool, default True\n            Produce output in a csv format for easy pasting into excel.\n\n            - True, use the provided separator for csv pasting.\n            - False, write a string representation of the object to the clipboard.\n\n        sep : str, default ``'\\t'``\n            Field delimiter.\n        **kwargs\n            These parameters will be passed to DataFrame.to_csv.\n\n        See Also\n        --------\n        DataFrame.to_csv : Write a DataFrame to a comma-separated values\n            (csv) file.\n        read_clipboard : Read text from clipboard and pass to read_csv.\n\n        Notes\n        -----\n        Requirements for your platform.\n\n          - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n          - Windows : none\n          - macOS : none\n\n        This method uses the processes developed for the package `pyperclip`. A\n        solution to render any output string format is given in the examples.\n\n        Examples\n        --------\n        Copy the contents of a DataFrame to the clipboard.\n\n        >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n\n        >>> df.to_clipboard(sep=',')  # doctest: +SKIP\n        ... # Wrote the following to the system clipboard:\n        ... # ,A,B,C\n        ... # 0,1,2,3\n        ... # 1,4,5,6\n\n        We can omit the index by passing the keyword `index` and setting\n        it to false.\n\n        >>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP\n        ... # Wrote the following to the system clipboard:\n        ... # A,B,C\n        ... # 1,2,3\n        ... # 4,5,6\n\n        Using the original `pyperclip` package for any string output format.\n\n        .. code-block:: python\n\n           import pyperclip\n           html = df.style.to_html()\n           pyperclip.copy(html)\n        \"\"\"\n        from pandas.io import clipboards\n\n        clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    @final\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        xarray.DataArray or xarray.Dataset\n            Data in the pandas structure converted to Dataset if the object is\n            a DataFrame, or a DataArray if the object is a Series.\n\n        See Also\n        --------\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Notes\n        -----\n        See the `xarray docs <https://xarray.pydata.org/en/stable/>`__\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n        ...                    ('parrot', 'bird', 24.0, 2),\n        ...                    ('lion', 'mammal', 80.5, 4),\n        ...                    ('monkey', 'mammal', np.nan, 4)],\n        ...                   columns=['name', 'class', 'max_speed',\n        ...                            'num_legs'])\n        >>> df\n             name   class  max_speed  num_legs\n        0  falcon    bird      389.0         2\n        1  parrot    bird       24.0         2\n        2    lion  mammal       80.5         4\n        3  monkey  mammal        NaN         4\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:    (index: 4)\n        Coordinates:\n          * index      (index) int64 0 1 2 3\n        Data variables:\n            name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n            class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n            max_speed  (index) float64 389.0 24.0 80.5 nan\n            num_legs   (index) int64 2 2 4 4\n\n        >>> df['max_speed'].to_xarray()\n        <xarray.DataArray 'max_speed' (index: 4)>\n        array([389. ,  24. ,  80.5,   nan])\n        Coordinates:\n          * index    (index) int64 0 1 2 3\n\n        >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n        ...                         '2018-01-02', '2018-01-02'])\n        >>> df_multiindex = pd.DataFrame({'date': dates,\n        ...                               'animal': ['falcon', 'parrot',\n        ...                                          'falcon', 'parrot'],\n        ...                               'speed': [350, 18, 361, 15]})\n        >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n        >>> df_multiindex\n                           speed\n        date       animal\n        2018-01-01 falcon    350\n                   parrot     18\n        2018-01-02 falcon    361\n                   parrot     15\n\n        >>> df_multiindex.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (date: 2, animal: 2)\n        Coordinates:\n          * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n          * animal   (animal) object 'falcon' 'parrot'\n        Data variables:\n            speed    (date, animal) int64 350 18 361 15\n        \"\"\"\n        xarray = import_optional_dependency(\"xarray\")\n\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        else:\n            return xarray.Dataset.from_dataframe(self)\n\n    @overload\n    def to_latex(\n        self,\n        buf: None = ...,\n        columns: Sequence[Hashable] | None = ...,\n        col_space: ColspaceArgType | None = ...,\n        header: bool_t | Sequence[str] = ...,\n        index: bool_t = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool_t | None = ...,\n        index_names: bool_t = ...,\n        bold_rows: bool_t = ...,\n        column_format: str | None = ...,\n        longtable: bool_t | None = ...,\n        escape: bool_t | None = ...,\n        encoding: str | None = ...,\n        decimal: str = ...,\n        multicolumn: bool_t | None = ...,\n        multicolumn_format: str | None = ...,\n        multirow: bool_t | None = ...,\n        caption: str | tuple[str, str] | None = ...,\n        label: str | None = ...,\n        position: str | None = ...,\n    ) -> str:\n        ...\n\n    @overload\n    def to_latex(\n        self,\n        buf: FilePath | WriteBuffer[str],\n        columns: Sequence[Hashable] | None = ...,\n        col_space: ColspaceArgType | None = ...,\n        header: bool_t | Sequence[str] = ...,\n        index: bool_t = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool_t | None = ...,\n        index_names: bool_t = ...,\n        bold_rows: bool_t = ...,\n        column_format: str | None = ...,\n        longtable: bool_t | None = ...,\n        escape: bool_t | None = ...,\n        encoding: str | None = ...,\n        decimal: str = ...,\n        multicolumn: bool_t | None = ...,\n        multicolumn_format: str | None = ...,\n        multirow: bool_t | None = ...,\n        caption: str | tuple[str, str] | None = ...,\n        label: str | None = ...,\n        position: str | None = ...,\n    ) -> None:\n        ...\n\n    @final\n    @doc(returns=fmt.return_docstring)\n    def to_latex(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        columns: Sequence[Hashable] | None = None,\n        col_space: ColspaceArgType | None = None,\n        header: bool_t | Sequence[str] = True,\n        index: bool_t = True,\n        na_rep: str = \"NaN\",\n        formatters: FormattersType | None = None,\n        float_format: FloatFormatType | None = None,\n        sparsify: bool_t | None = None,\n        index_names: bool_t = True,\n        bold_rows: bool_t = False,\n        column_format: str | None = None,\n        longtable: bool_t | None = None,\n        escape: bool_t | None = None,\n        encoding: str | None = None,\n        decimal: str = \".\",\n        multicolumn: bool_t | None = None,\n        multicolumn_format: str | None = None,\n        multirow: bool_t | None = None,\n        caption: str | tuple[str, str] | None = None,\n        label: str | None = None,\n        position: str | None = None,\n    ) -> str | None:\n        r\"\"\"\n        Render object to a LaTeX tabular, longtable, or nested table.\n\n        Requires ``\\usepackage{{booktabs}}``.  The output can be copy/pasted\n        into a main LaTeX document or read from an external file\n        with ``\\input{{table.tex}}``.\n\n        .. versionchanged:: 1.0.0\n           Added caption and label arguments.\n\n        .. versionchanged:: 1.2.0\n           Added position argument, changed meaning of caption argument.\n\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : list of label, optional\n            The subset of columns to write. Writes all columns by default.\n        col_space : int, optional\n            The minimum width of each column.\n        header : bool or list of str, default True\n            Write out the column names. If a list of strings is given,\n            it is assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        na_rep : str, default 'NaN'\n            Missing data representation.\n        formatters : list of functions or dict of {{str: function}}, optional\n            Formatter functions to apply to columns' elements by position or\n            name. The result of each function must be a unicode string.\n            List must be of length equal to the number of columns.\n        float_format : one-parameter function or str, optional, default None\n            Formatter for floating point numbers. For example\n            ``float_format=\"%.2f\"`` and ``float_format=\"{{:0.2f}}\".format`` will\n            both result in 0.1234 being formatted as 0.12.\n        sparsify : bool, optional\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row. By default, the value will be\n            read from the config module.\n        index_names : bool, default True\n            Prints the names of the indexes.\n        bold_rows : bool, default False\n            Make the row labels bold in the output.\n        column_format : str, optional\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n            columns. By default, 'l' will be used for all columns except\n            columns of numbers, which default to 'r'.\n        longtable : bool, optional\n            By default, the value will be read from the pandas config\n            module. Use a longtable environment instead of tabular. Requires\n            adding a \\usepackage{{longtable}} to your LaTeX preamble.\n        escape : bool, optional\n            By default, the value will be read from the pandas config\n            module. When set to False prevents from escaping latex special\n            characters in column names.\n        encoding : str, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'utf-8'.\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n        multicolumn : bool, default True\n            Use \\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module.\n        multicolumn_format : str, default 'l'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module.\n        multirow : bool, default False\n            Use \\multirow to enhance MultiIndex rows. Requires adding a\n            \\usepackage{{multirow}} to your LaTeX preamble. Will print\n            centered labels (instead of top-aligned) across the contained\n            rows, separating groups via clines. The default will be read\n            from the pandas config module.\n        caption : str or tuple, optional\n            Tuple (full_caption, short_caption),\n            which results in ``\\caption[short_caption]{{full_caption}}``;\n            if a single string is passed, no short caption will be set.\n\n            .. versionadded:: 1.0.0\n\n            .. versionchanged:: 1.2.0\n               Optionally allow caption to be a tuple ``(full_caption, short_caption)``.\n\n        label : str, optional\n            The LaTeX label to be placed inside ``\\label{{}}`` in the output.\n            This is used with ``\\ref{{}}`` in the main ``.tex`` file.\n\n            .. versionadded:: 1.0.0\n        position : str, optional\n            The LaTeX positional argument for tables, to be placed after\n            ``\\begin{{}}`` in the output.\n\n            .. versionadded:: 1.2.0\n        {returns}\n        See Also\n        --------\n        io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n            with conditional formatting.\n        DataFrame.to_string : Render a DataFrame to a console-friendly\n            tabular output.\n        DataFrame.to_html : Render a DataFrame as an HTML table.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n        ...                   mask=['red', 'purple'],\n        ...                   weapon=['sai', 'bo staff']))\n        >>> print(df.to_latex(index=False))  # doctest: +SKIP\n        \\begin{{tabular}}{{lll}}\n         \\toprule\n               name &    mask &    weapon \\\\\n         \\midrule\n            Raphael &     red &       sai \\\\\n          Donatello &  purple &  bo staff \\\\\n        \\bottomrule\n        \\end{{tabular}}\n        \"\"\"\n        msg = (\n            \"In future versions `DataFrame.to_latex` is expected to utilise the base \"\n            \"implementation of `Styler.to_latex` for formatting and rendering. \"\n            \"The arguments signature may therefore change. It is recommended instead \"\n            \"to use `DataFrame.style.to_latex` which also contains additional \"\n            \"functionality.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=find_stack_level())\n\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()\n        if longtable is None:\n            longtable = config.get_option(\"display.latex.longtable\")\n        if escape is None:\n            escape = config.get_option(\"display.latex.escape\")\n        if multicolumn is None:\n            multicolumn = config.get_option(\"display.latex.multicolumn\")\n        if multicolumn_format is None:\n            multicolumn_format = config.get_option(\"display.latex.multicolumn_format\")\n        if multirow is None:\n            multirow = config.get_option(\"display.latex.multirow\")\n\n        self = cast(\"DataFrame\", self)\n        formatter = DataFrameFormatter(\n            self,\n            columns=columns,\n            col_space=col_space,\n            na_rep=na_rep,\n            header=header,\n            index=index,\n            formatters=formatters,\n            float_format=float_format,\n            bold_rows=bold_rows,\n            sparsify=sparsify,\n            index_names=index_names,\n            escape=escape,\n            decimal=decimal,\n        )\n        return DataFrameRenderer(formatter).to_latex(\n            buf=buf,\n            column_format=column_format,\n            longtable=longtable,\n            encoding=encoding,\n            multicolumn=multicolumn,\n            multicolumn_format=multicolumn_format,\n            multirow=multirow,\n            caption=caption,\n            label=label,\n            position=position,\n        )\n\n    @overload\n    def to_csv(\n        self,\n        path_or_buf: None = ...,\n        sep: str = ...,\n        na_rep: str = ...,\n        float_format: str | Callable | None = ...,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool_t | list[str] = ...,\n        index: bool_t = ...,\n        index_label: IndexLabel | None = ...,\n        mode: str = ...,\n        encoding: str | None = ...,\n        compression: CompressionOptions = ...,\n        quoting: int | None = ...,\n        quotechar: str = ...,\n        lineterminator: str | None = ...,\n        chunksize: int | None = ...,\n        date_format: str | None = ...,\n        doublequote: bool_t = ...,\n        escapechar: str | None = ...,\n        decimal: str = ...,\n        errors: str = ...,\n        storage_options: StorageOptions = ...,\n    ) -> str:\n        ...\n\n    @overload\n    def to_csv(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str],\n        sep: str = ...,\n        na_rep: str = ...,\n        float_format: str | Callable | None = ...,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool_t | list[str] = ...,\n        index: bool_t = ...,\n        index_label: IndexLabel | None = ...,\n        mode: str = ...,\n        encoding: str | None = ...,\n        compression: CompressionOptions = ...,\n        quoting: int | None = ...,\n        quotechar: str = ...,\n        lineterminator: str | None = ...,\n        chunksize: int | None = ...,\n        date_format: str | None = ...,\n        doublequote: bool_t = ...,\n        escapechar: str | None = ...,\n        decimal: str = ...,\n        errors: str = ...,\n        storage_options: StorageOptions = ...,\n    ) -> None:\n        ...\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path_or_buf\",\n    )\n    def to_csv(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        sep: str = \",\",\n        na_rep: str = \"\",\n        float_format: str | Callable | None = None,\n        columns: Sequence[Hashable] | None = None,\n        header: bool_t | list[str] = True,\n        index: bool_t = True,\n        index_label: IndexLabel | None = None,\n        mode: str = \"w\",\n        encoding: str | None = None,\n        compression: CompressionOptions = \"infer\",\n        quoting: int | None = None,\n        quotechar: str = '\"',\n        lineterminator: str | None = None,\n        chunksize: int | None = None,\n        date_format: str | None = None,\n        doublequote: bool_t = True,\n        escapechar: str | None = None,\n        decimal: str = \".\",\n        errors: str = \"strict\",\n        storage_options: StorageOptions = None,\n    ) -> str | None:\n        r\"\"\"\n        Write object to a comma-separated values (csv) file.\n\n        Parameters\n        ----------\n        path_or_buf : str, path object, file-like object, or None, default None\n            String, path object (implementing os.PathLike[str]), or file-like\n            object implementing a write() function. If None, the result is\n            returned as a string. If a non-binary file object is passed, it should\n            be opened with `newline=''`, disabling universal newlines. If a binary\n            file object is passed, `mode` might need to contain a `'b'`.\n\n            .. versionchanged:: 1.2.0\n\n               Support for binary file objects was introduced.\n\n        sep : str, default ','\n            String of length 1. Field delimiter for the output file.\n        na_rep : str, default ''\n            Missing data representation.\n        float_format : str, Callable, default None\n            Format string for floating point numbers. If a Callable is given, it takes\n            precedence over other numeric formatting parameters, like decimal.\n        columns : sequence, optional\n            Columns to write.\n        header : bool or list of str, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        index_label : str or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the object uses MultiIndex. If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R.\n        mode : str, default 'w'\n            Python write mode. The available write modes are the same as\n            :py:func:`open`.\n        encoding : str, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n            is a non-binary file object.\n        {compression_options}\n\n            .. versionchanged:: 1.0.0\n\n               May now be a dict with key 'method' as compression mode\n               and other entries as additional compression options if\n               compression mode is 'zip'.\n\n            .. versionchanged:: 1.1.0\n\n               Passing compression options as keys in dict is\n               supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\n\n            .. versionchanged:: 1.2.0\n\n                Compression is supported for binary file objects.\n\n            .. versionchanged:: 1.2.0\n\n                Previous versions forwarded dict entries for 'gzip' to\n                `gzip.open` instead of `gzip.GzipFile` which prevented\n                setting `mtime`.\n\n        quoting : optional constant from csv module\n            Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric.\n        quotechar : str, default '\\\"'\n            String of length 1. Character used to quote fields.\n        lineterminator : str, optional\n            The newline character or character sequence to use in the output\n            file. Defaults to `os.linesep`, which depends on the OS in which\n            this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n            .. versionchanged:: 1.5.0\n\n                Previously was line_terminator, changed for consistency with\n                read_csv and the standard library 'csv' module.\n\n        chunksize : int or None\n            Rows to write at a time.\n        date_format : str, default None\n            Format string for datetime objects.\n        doublequote : bool, default True\n            Control quoting of `quotechar` inside a field.\n        escapechar : str, default None\n            String of length 1. Character used to escape `sep` and `quotechar`\n            when appropriate.\n        decimal : str, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list\n            of options.\n\n            .. versionadded:: 1.1.0\n\n        {storage_options}\n\n            .. versionadded:: 1.2.0\n\n        Returns\n        -------\n        None or str\n            If path_or_buf is None, returns the resulting csv format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        read_csv : Load a CSV file into a DataFrame.\n        to_excel : Write DataFrame to an Excel file.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({{'name': ['Raphael', 'Donatello'],\n        ...                    'mask': ['red', 'purple'],\n        ...                    'weapon': ['sai', 'bo staff']}})\n        >>> df.to_csv(index=False)\n        'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n\n        Create 'out.zip' containing 'out.csv'\n\n        >>> compression_opts = dict(method='zip',\n        ...                         archive_name='out.csv')  # doctest: +SKIP\n        >>> df.to_csv('out.zip', index=False,\n        ...           compression=compression_opts)  # doctest: +SKIP\n\n        To write a csv file to a new folder or nested folder you will first\n        need to create it using either Pathlib or os:\n\n        >>> from pathlib import Path  # doctest: +SKIP\n        >>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP\n        >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n        >>> df.to_csv(filepath)  # doctest: +SKIP\n\n        >>> import os  # doctest: +SKIP\n        >>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP\n        >>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP\n        \"\"\"\n        df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n        formatter = DataFrameFormatter(\n            frame=df,\n            header=header,\n            index=index,\n            na_rep=na_rep,\n            float_format=float_format,\n            decimal=decimal,\n        )\n\n        return DataFrameRenderer(formatter).to_csv(\n            path_or_buf,\n            lineterminator=lineterminator,\n            sep=sep,\n            encoding=encoding,\n            errors=errors,\n            compression=compression,\n            quoting=quoting,\n            columns=columns,\n            index_label=index_label,\n            mode=mode,\n            chunksize=chunksize,\n            quotechar=quotechar,\n            date_format=date_format,\n            doublequote=doublequote,\n            escapechar=escapechar,\n            storage_options=storage_options,\n        )\n\n    # ----------------------------------------------------------------------\n    # Lookup Caching\n\n    def _reset_cacher(self) -> None:\n        \"\"\"\n        Reset the cacher.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _maybe_update_cacher(\n        self,\n        clear: bool_t = False,\n        verify_is_copy: bool_t = True,\n        inplace: bool_t = False,\n    ) -> None:\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n\n        if verify_is_copy:\n            self._check_setitem_copy(t=\"referent\")\n\n        if clear:\n            self._clear_item_cache()\n\n    def _clear_item_cache(self) -> None:\n        raise AbstractMethodError(self)\n\n    # ----------------------------------------------------------------------\n    # Indexing Methods\n\n    def take(self: NDFrameT, indices, axis: Axis = 0, **kwargs) -> NDFrameT:\n        \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            The axis on which to select elements. ``0`` means that we are\n            selecting rows, ``1`` means that we are selecting columns.\n            For `Series` this parameter is unused and defaults to 0.\n        **kwargs\n            For compatibility with :meth:`numpy.take`. Has no effect on the\n            output.\n\n        Returns\n        -------\n        taken : same type as caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by labels.\n        DataFrame.iloc : Select a subset of a DataFrame by positions.\n        numpy.take : Take elements from an array along an axis.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n        ...                    ('parrot', 'bird', 24.0),\n        ...                    ('lion', 'mammal', 80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=['name', 'class', 'max_speed'],\n        ...                   index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n        \"\"\"\n\n        nv.validate_take((), kwargs)\n\n        return self._take(indices, axis)\n\n    def _take(\n        self: NDFrameT,\n        indices,\n        axis: Axis = 0,\n        convert_indices: bool_t = True,\n    ) -> NDFrameT:\n        \"\"\"\n        Internal version of the `take` allowing specification of additional args.\n\n        See the docstring of `take` for full explanation of the parameters.\n        \"\"\"\n        self._consolidate_inplace()\n\n        new_data = self._mgr.take(\n            indices,\n            axis=self._get_block_manager_axis(axis),\n            verify=True,\n            convert_indices=convert_indices,\n        )\n        return self._constructor(new_data).__finalize__(self, method=\"take\")\n\n    def _take_with_is_copy(self: NDFrameT, indices, axis: Axis = 0) -> NDFrameT:\n        \"\"\"\n        Internal version of the `take` method that sets the `_is_copy`\n        attribute to keep track of the parent dataframe (using in indexing\n        for the SettingWithCopyWarning).\n\n        See the docstring of `take` for full explanation of the parameters.\n        \"\"\"\n        result = self._take(indices=indices, axis=axis)\n        # Maybe set copy if we didn't actually change the index.\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n        return result\n\n    @final\n    def xs(\n        self: NDFrameT,\n        key: IndexLabel,\n        axis: Axis = 0,\n        level: IndexLabel = None,\n        drop_level: bool_t = True,\n    ) -> NDFrameT:\n        \"\"\"\n        Return cross-section from the Series/DataFrame.\n\n        This method takes a `key` argument to select data at a particular\n        level of a MultiIndex.\n\n        Parameters\n        ----------\n        key : label or tuple of label\n            Label contained in the index, or partially in a MultiIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to retrieve cross-section on.\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : bool, default True\n            If False, returns object with same levels as self.\n\n        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n        DataFrame.iloc : Purely integer-location based indexing\n            for selection by position.\n\n        Notes\n        -----\n        `xs` can not be used to set values.\n\n        MultiIndex Slicers is a generic way to get/set values on\n        any level or levels.\n        It is a superset of `xs` functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {'num_legs': [4, 4, 2, 2],\n        ...      'num_wings': [0, 0, 2, 2],\n        ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n        ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n        ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n        >>> df = pd.DataFrame(data=d)\n        >>> df = df.set_index(['class', 'animal', 'locomotion'])\n        >>> df\n                                   num_legs  num_wings\n        class  animal  locomotion\n        mammal cat     walks              4          0\n               dog     walks              4          0\n               bat     flies              2          2\n        bird   penguin walks              2          2\n\n        Get values at specified index\n\n        >>> df.xs('mammal')\n                           num_legs  num_wings\n        animal locomotion\n        cat    walks              4          0\n        dog    walks              4          0\n        bat    flies              2          2\n\n        Get values at several indexes\n\n        >>> df.xs(('mammal', 'dog'))\n                    num_legs  num_wings\n        locomotion\n        walks              4          0\n\n        Get values at specified index and level\n\n        >>> df.xs('cat', level=1)\n                           num_legs  num_wings\n        class  locomotion\n        mammal walks              4          0\n\n        Get values at several indexes and levels\n\n        >>> df.xs(('bird', 'walks'),\n        ...       level=[0, 'locomotion'])\n                 num_legs  num_wings\n        animal\n        penguin         2          2\n\n        Get values at specified column and axis\n\n        >>> df.xs('num_wings', axis=1)\n        class   animal   locomotion\n        mammal  cat      walks         0\n                dog      walks         0\n                bat      flies         2\n        bird    penguin  walks         2\n        Name: num_wings, dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n\n        if isinstance(key, list):\n            raise TypeError(\"list keys are not supported in xs, pass a tuple instead\")\n\n        if level is not None:\n            if not isinstance(labels, MultiIndex):\n                raise TypeError(\"Index must be a MultiIndex\")\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n            # create the tuple of the indexer\n            _indexer = [slice(None)] * self.ndim\n            _indexer[axis] = loc\n            indexer = tuple(_indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            if drop_level:\n                return self[key]\n            index = self.columns\n        else:\n            index = self.index\n\n        self._consolidate_inplace()\n\n        if isinstance(index, MultiIndex):\n            loc, new_index = index._get_loc_level(key, level=0)\n            if not drop_level:\n                if lib.is_integer(loc):\n                    new_index = index[loc : loc + 1]\n                else:\n                    new_index = index[loc]\n        else:\n            loc = index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    (inds,) = loc.nonzero()\n                    return self._take_with_is_copy(inds, axis=axis)\n                else:\n                    return self._take_with_is_copy(loc, axis=axis)\n\n            if not is_scalar(loc):\n                new_index = index[loc]\n\n        if is_scalar(loc) and axis == 0:\n            # In this case loc should be an integer\n            if self.ndim == 1:\n                # if we encounter an array-like and we only have 1 dim\n                # that means that their are list/ndarrays inside the Series!\n                # so just return them (GH 6394)\n                return self._values[loc]\n\n            new_mgr = self._mgr.fast_xs(loc)\n\n            result = self._constructor_sliced(\n                new_mgr, name=self.index[loc]\n            ).__finalize__(self)\n        elif is_scalar(loc):\n            result = self.iloc[:, slice(loc, loc + 1)]\n        elif axis == 1:\n            result = self.iloc[:, loc]\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result\n\n    def __getitem__(self, item):\n        raise AbstractMethodError(self)\n\n    def _slice(self: NDFrameT, slobj: slice, axis: Axis = 0) -> NDFrameT:\n        \"\"\"\n        Construct a slice of this container.\n\n        Slicing with this method is *always* positional.\n        \"\"\"\n        assert isinstance(slobj, slice), type(slobj)\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._mgr.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result\n\n    @final\n    def _set_is_copy(self, ref: NDFrame, copy: bool_t = True) -> None:\n        if not copy:\n            self._is_copy = None\n        else:\n            assert ref is not None\n            self._is_copy = weakref.ref(ref)\n\n    def _check_is_chained_assignment_possible(self) -> bool_t:\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_copy:\n            self._check_setitem_copy(t=\"referent\")\n        return False\n\n    @final\n    def _check_setitem_copy(self, t: str = \"setting\", force: bool_t = False):\n        \"\"\"\n\n        Parameters\n        ----------\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        if (\n            config.get_option(\"mode.copy_on_write\")\n            and config.get_option(\"mode.data_manager\") == \"block\"\n        ):\n            return\n\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or (r is not None and r.shape == self.shape):\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referent\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise SettingWithCopyError(t)\n        if value == \"warn\":\n            warnings.warn(t, SettingWithCopyWarning, stacklevel=find_stack_level())\n\n    def __delitem__(self, key) -> None:\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n            try:\n                # By using engine's __contains__ we effectively\n                # restrict to same-length tuples\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key,)\n            for col in self.columns:\n                if isinstance(col, tuple) and col[: len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            loc = self.axes[-1].get_loc(key)\n            self._mgr = self._mgr.idelete(loc)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass\n\n    # ----------------------------------------------------------------------\n    # Unsorted\n\n    @final\n    def _check_inplace_and_allows_duplicate_labels(self, inplace):\n        if inplace and not self.flags.allows_duplicate_labels:\n            raise ValueError(\n                \"Cannot specify 'inplace=True' when \"\n                \"'self.flags.allows_duplicate_labels' is False.\"\n            )\n\n    @final\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (ex: DataFrame column).\n\n        Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : same type as items contained in object\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         [24.3, 75.7, \"high\"],\n        ...         [31, 87.8, \"high\"],\n        ...         [22, 71.6, \"medium\"],\n        ...         [35, 95, \"medium\"],\n        ...     ],\n        ...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n        ...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n        ... )\n\n        >>> df\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df.get([\"temp_celsius\", \"windspeed\"])\n                    temp_celsius windspeed\n        2014-02-12          24.3      high\n        2014-02-13          31.0      high\n        2014-02-14          22.0    medium\n        2014-02-15          35.0    medium\n\n        >>> ser = df['windspeed']\n        >>> ser.get('2014-02-13')\n        'high'\n\n        If the key isn't found, the default value will be used.\n\n        >>> df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n        'default_value'\n\n        >>> ser.get('2014-02-10', '[unknown]')\n        '[unknown]'\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    @final\n    @property\n    def _is_view(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is view of another array\"\"\"\n        return self._mgr.is_view\n\n    @final\n    def reindex_like(\n        self: NDFrameT,\n        other,\n        method: Literal[\"backfill\", \"bfill\", \"pad\", \"ffill\", \"nearest\"] | None = None,\n        copy: bool_t = True,\n        limit=None,\n        tolerance=None,\n    ) -> NDFrameT:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations must\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...                    columns=['temp_celsius', 'temp_fahrenheit',\n        ...                             'windspeed'],\n        ...                    index=pd.date_range(start='2014-02-12',\n        ...                                        end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...                    columns=['temp_celsius', 'windspeed'],\n        ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                                            '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level | None = ...,\n        inplace: Literal[True],\n        errors: IgnoreRaise = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def drop(\n        self: NDFrameT,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level | None = ...,\n        inplace: Literal[False] = ...,\n        errors: IgnoreRaise = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def drop(\n        self: NDFrameT,\n        labels: IndexLabel = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel = ...,\n        columns: IndexLabel = ...,\n        level: Level | None = ...,\n        inplace: bool_t = ...,\n        errors: IgnoreRaise = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    def drop(\n        self: NDFrameT,\n        labels: IndexLabel = None,\n        *,\n        axis: Axis = 0,\n        index: IndexLabel = None,\n        columns: IndexLabel = None,\n        level: Level | None = None,\n        inplace: bool_t = False,\n        errors: IgnoreRaise = \"raise\",\n    ) -> NDFrameT | None:\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\n                \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n            )\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n            return None\n        else:\n            return obj\n\n    @final\n    def _drop_axis(\n        self: NDFrameT,\n        labels,\n        axis,\n        level=None,\n        errors: IgnoreRaise = \"raise\",\n        only_slice: bool_t = False,\n    ) -> NDFrameT:\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n        only_slice : bool, default False\n            Whether indexing along columns should be view-only.\n\n        \"\"\"\n        axis_num = self._get_axis_number(axis)\n        axis = self._get_axis(axis)\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            indexer = axis.get_indexer(new_axis)\n\n        # Case for non-unique axis\n        else:\n            is_tuple_labels = is_nested_list_like(labels) or isinstance(labels, tuple)\n            labels = ensure_object(com.index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                mask = ~axis.get_level_values(level).isin(labels)\n\n                # GH 18561 MultiIndex.drop should raise if label is absent\n                if errors == \"raise\" and mask.all():\n                    raise KeyError(f\"{labels} not found in axis\")\n            elif (\n                isinstance(axis, MultiIndex)\n                and labels.dtype == \"object\"\n                and not is_tuple_labels\n            ):\n                # Set level to zero in case of MultiIndex and label is string,\n                #  because isin can't handle strings for MultiIndexes GH#36293\n                # In case of tuples we get dtype object but have to use isin GH#42771\n                mask = ~axis.get_level_values(0).isin(labels)\n            else:\n                mask = ~axis.isin(labels)\n                # Check if label doesn't exist along axis\n                labels_missing = (axis.get_indexer_for(labels) == -1).any()\n                if errors == \"raise\" and labels_missing:\n                    raise KeyError(f\"{labels} not found in axis\")\n\n            if is_extension_array_dtype(mask.dtype):\n                # GH#45860\n                mask = mask.to_numpy(dtype=bool)\n\n            indexer = mask.nonzero()[0]\n            new_axis = axis.take(indexer)\n\n        bm_axis = self.ndim - axis_num - 1\n        new_mgr = self._mgr.reindex_indexer(\n            new_axis,\n            indexer,\n            axis=bm_axis,\n            allow_dups=True,\n            only_slice=only_slice,\n        )\n        result = self._constructor(new_mgr)\n        if self.ndim == 1:\n            result.name = self.name\n\n        return result.__finalize__(self)\n\n    @final\n    def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        result : same type as self\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n        self._reset_cache()\n        self._clear_item_cache()\n        self._mgr = result._mgr\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy, inplace=True)\n\n    @final\n    def add_prefix(self: NDFrameT, prefix: str, axis: Axis | None = None) -> NDFrameT:\n        \"\"\"\n        Prefix labels with string `prefix`.\n\n        For Series, the row labels are prefixed.\n        For DataFrame, the column labels are prefixed.\n\n        Parameters\n        ----------\n        prefix : str\n            The string to add before each label.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Axis to add prefix on\n\n             .. versionadded:: 2.0.0\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_suffix: Suffix row labels with string `suffix`.\n        DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_prefix('item_')\n        item_0    1\n        item_1    2\n        item_2    3\n        item_3    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_prefix('col_')\n             col_A  col_B\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        f = lambda x: f\"{prefix}{x}\"\n\n        axis_name = self._info_axis_name\n        if axis is not None:\n            axis_name = self._get_axis_name(axis)\n\n        mapper = {axis_name: f}\n\n        # error: Incompatible return value type (got \"Optional[NDFrameT]\",\n        # expected \"NDFrameT\")\n        # error: Argument 1 to \"rename\" of \"NDFrame\" has incompatible type\n        # \"**Dict[str, partial[str]]\"; expected \"Union[str, int, None]\"\n        # error: Keywords must be strings\n        return self._rename(**mapper)  # type: ignore[return-value, arg-type, misc]\n\n    @final\n    def add_suffix(self: NDFrameT, suffix: str, axis: Axis | None = None) -> NDFrameT:\n        \"\"\"\n        Suffix labels with string `suffix`.\n\n        For Series, the row labels are suffixed.\n        For DataFrame, the column labels are suffixed.\n\n        Parameters\n        ----------\n        suffix : str\n            The string to add after each label.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Axis to add suffix on\n\n             .. versionadded:: 2.0.0\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_prefix: Prefix row labels with string `prefix`.\n        DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_suffix('_item')\n        0_item    1\n        1_item    2\n        2_item    3\n        3_item    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_suffix('_col')\n             A_col  B_col\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        f = lambda x: f\"{x}{suffix}\"\n\n        axis_name = self._info_axis_name\n        if axis is not None:\n            axis_name = self._get_axis_name(axis)\n\n        mapper = {axis_name: f}\n        # error: Incompatible return value type (got \"Optional[NDFrameT]\",\n        # expected \"NDFrameT\")\n        # error: Argument 1 to \"rename\" of \"NDFrame\" has incompatible type\n        # \"**Dict[str, partial[str]]\"; expected \"Union[str, int, None]\"\n        # error: Keywords must be strings\n        return self._rename(**mapper)  # type: ignore[return-value, arg-type, misc]\n\n    @overload\n    def sort_values(\n        self: NDFrameT,\n        *,\n        axis: Axis = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: Literal[False] = ...,\n        kind: str = ...,\n        na_position: str = ...,\n        ignore_index: bool_t = ...,\n        key: ValueKeyFunc = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: Literal[True],\n        kind: str = ...,\n        na_position: str = ...,\n        ignore_index: bool_t = ...,\n        key: ValueKeyFunc = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def sort_values(\n        self: NDFrameT,\n        *,\n        axis: Axis = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: bool_t = ...,\n        kind: str = ...,\n        na_position: str = ...,\n        ignore_index: bool_t = ...,\n        key: ValueKeyFunc = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    def sort_values(\n        self: NDFrameT,\n        *,\n        axis: Axis = 0,\n        ascending: bool_t | Sequence[bool_t] = True,\n        inplace: bool_t = False,\n        kind: str = \"quicksort\",\n        na_position: str = \"last\",\n        ignore_index: bool_t = False,\n        key: ValueKeyFunc = None,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Sort by the values along either axis.\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n             Axis to be sorted.\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n             Choice of sorting algorithm. See also :func:`numpy.sort` for more\n             information. `mergesort` and `stable` are the only stable algorithms. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n             end.\n        ignore_index : bool, default False\n             If True, the resulting axis will be labeled 0, 1, …, n - 1.\n\n             .. versionadded:: 1.0.0\n\n        key : callable, optional\n            Apply the key function to the values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect a\n            ``Series`` and return a Series with the same shape as the input.\n            It will be applied to each column in `by` independently.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with sorted values or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.sort_index : Sort a DataFrame by the index.\n        Series.sort_values : Similar method for a Series.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\n        ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n        ...     'col2': [2, 1, 9, 8, 7, 4],\n        ...     'col3': [0, 1, 9, 4, 2, 3],\n        ...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n        ... })\n        >>> df\n          col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n\n        Sort by col1\n\n        >>> df.sort_values(by=['col1'])\n          col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        5    C     4     3    F\n        4    D     7     2    e\n        3  NaN     8     4    D\n\n        Sort by multiple columns\n\n        >>> df.sort_values(by=['col1', 'col2'])\n          col1  col2  col3 col4\n        1    A     1     1    B\n        0    A     2     0    a\n        2    B     9     9    c\n        5    C     4     3    F\n        4    D     7     2    e\n        3  NaN     8     4    D\n\n        Sort Descending\n\n        >>> df.sort_values(by='col1', ascending=False)\n          col1  col2  col3 col4\n        4    D     7     2    e\n        5    C     4     3    F\n        2    B     9     9    c\n        0    A     2     0    a\n        1    A     1     1    B\n        3  NaN     8     4    D\n\n        Putting NAs first\n\n        >>> df.sort_values(by='col1', ascending=False, na_position='first')\n          col1  col2  col3 col4\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n        2    B     9     9    c\n        0    A     2     0    a\n        1    A     1     1    B\n\n        Sorting with a key function\n\n        >>> df.sort_values(by='col4', key=lambda col: col.str.lower())\n           col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n\n        Natural sort with the key argument,\n        using the `natsort <https://github.com/SethMMorton/natsort>` package.\n\n        >>> df = pd.DataFrame({\n        ...    \"time\": ['0hr', '128hr', '72hr', '48hr', '96hr'],\n        ...    \"value\": [10, 20, 30, 40, 50]\n        ... })\n        >>> df\n            time  value\n        0    0hr     10\n        1  128hr     20\n        2   72hr     30\n        3   48hr     40\n        4   96hr     50\n        >>> from natsort import index_natsorted\n        >>> df.sort_values(\n        ...    by=\"time\",\n        ...    key=lambda x: np.argsort(index_natsorted(df[\"time\"]))\n        ... )\n            time  value\n        0    0hr     10\n        3   48hr     40\n        2   72hr     30\n        4   96hr     50\n        1  128hr     20\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: Literal[True],\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool_t = ...,\n        ignore_index: bool_t = ...,\n        key: IndexKeyFunc = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def sort_index(\n        self: NDFrameT,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: Literal[False] = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool_t = ...,\n        ignore_index: bool_t = ...,\n        key: IndexKeyFunc = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def sort_index(\n        self: NDFrameT,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool_t | Sequence[bool_t] = ...,\n        inplace: bool_t = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool_t = ...,\n        ignore_index: bool_t = ...,\n        key: IndexKeyFunc = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    def sort_index(\n        self: NDFrameT,\n        *,\n        axis: Axis = 0,\n        level: IndexLabel = None,\n        ascending: bool_t | Sequence[bool_t] = True,\n        inplace: bool_t = False,\n        kind: SortKind = \"quicksort\",\n        na_position: NaPosition = \"last\",\n        sort_remaining: bool_t = True,\n        ignore_index: bool_t = False,\n        key: IndexKeyFunc = None,\n    ) -> NDFrameT | None:\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        axis = self._get_axis_number(axis)\n        ascending = validate_ascending(ascending)\n\n        target = self._get_axis(axis)\n\n        indexer = get_indexer_indexer(\n            target, level, ascending, kind, na_position, sort_remaining, key\n        )\n\n        if indexer is None:\n            if inplace:\n                result = self\n            else:\n                result = self.copy()\n\n            if ignore_index:\n                result.index = default_index(len(self))\n            if inplace:\n                return None\n            else:\n                return result\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._mgr.take(indexer, axis=baxis, verify=False)\n\n        # reconstruct axis if needed\n        new_data.set_axis(baxis, new_data.axes[baxis]._sort_levels_monotonic())\n\n        if ignore_index:\n            axis = 1 if isinstance(self, ABCDataFrame) else 0\n            new_data.set_axis(axis, default_index(len(indexer)))\n\n        result = self._constructor(new_data)\n\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_index\")\n\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        axes=_shared_doc_kwargs[\"axes\"],\n        optional_labels=\"\",\n        optional_axis=\"\",\n    )\n    def reindex(self: NDFrameT, *args, **kwargs) -> NDFrameT:\n        \"\"\"\n        Conform {klass} to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        {optional_labels}\n        {axes} : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        {optional_axis}\n        method : {{None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        {klass} with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={{'index', 'columns'}}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({{'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]}},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({{\"prices\": [100, 101, np.nan, 100, 89, 88]}},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", None)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            return self.copy(deep=copy)\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self, method=\"reindex\")\n\n    def _reindex_axes(\n        self: NDFrameT, axes, level, limit, tolerance, method, fill_value, copy\n    ) -> NDFrameT:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n            # If we've made a copy once, no need to make another one\n            copy = False\n\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            and not self._is_mixed_type\n            and not (\n                self.ndim == 2\n                and len(self.dtypes) == 1\n                and is_extension_array_dtype(self.dtypes.iloc[0])\n            )\n        )\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        raise AbstractMethodError(self)\n\n    @final\n    def _reindex_with_indexers(\n        self: NDFrameT,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> NDFrameT:\n        \"\"\"allow_dups indicates an internal call here\"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._mgr\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_platform_int(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects (see _reindex_multi)\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n            # If we've made a copy once, no need to make another one\n            copy = False\n\n        if copy and new_data is self._mgr:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)\n\n    def filter(\n        self: NDFrameT,\n        items=None,\n        like: str | None = None,\n        regex: str | None = None,\n        axis: Axis | None = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Subset the dataframe rows or columns according to the specified index labels.\n\n        Note that this routine does not filter a dataframe on its\n        contents. The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            Keep labels from axis which are in items.\n        like : str\n            Keep labels from axis for which \"like in label == True\".\n        regex : str (regular expression)\n            Keep labels from axis for which re.search(regex, label) == True.\n        axis : {0 or ‘index’, 1 or ‘columns’, None}, default None\n            The axis to filter on, expressed either as an index (int)\n            or axis name (str). By default this is the info axis, 'columns' for\n            DataFrame. For `Series` this parameter is unused and defaults to `None`.\n\n        Returns\n        -------\n        same type as input object\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n        ...                   index=['mouse', 'rabbit'],\n        ...                   columns=['one', 'two', 'three'])\n        >>> df\n                one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=['one', 'three'])\n                 one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex='e$', axis=1)\n                 one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like='bbi', axis=0)\n                 one  two  three\n        rabbit    4    5      6\n        \"\"\"\n        nkw = com.count_not_none(items, like, regex)\n        if nkw > 1:\n            raise TypeError(\n                \"Keyword arguments `items`, `like`, or `regex` \"\n                \"are mutually exclusive\"\n            )\n\n        if axis is None:\n            axis = self._info_axis_name\n        labels = self._get_axis(axis)\n\n        if items is not None:\n            name = self._get_axis_name(axis)\n            # error: Keywords must be strings\n            return self.reindex(  # type: ignore[misc]\n                **{name: [r for r in items if r in labels]}\n            )\n        elif like:\n\n            def f(x) -> bool_t:\n                assert like is not None  # needed for mypy\n                return like in ensure_str(x)\n\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        elif regex:\n\n            def f(x) -> bool_t:\n                return matcher.search(ensure_str(x)) is not None\n\n            matcher = re.compile(regex)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        else:\n            raise TypeError(\"Must pass either `items`, `like`, or `regex`\")\n\n    @final\n    def head(self: NDFrameT, n: int = 5) -> NDFrameT:\n        \"\"\"\n        Return the first `n` rows.\n\n        This function returns the first `n` rows for the object based\n        on position. It is useful for quickly testing if your object\n        has the right type of data in it.\n\n        For negative values of `n`, this function returns all rows except\n        the last `|n|` rows, equivalent to ``df[:n]``.\n\n        If n is larger than the number of rows, this function returns all rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        same type as caller\n            The first `n` rows of the caller object.\n\n        See Also\n        --------\n        DataFrame.tail: Returns the last `n` rows.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first `n` lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n\n        For negative values of `n`\n\n        >>> df.head(-3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        \"\"\"\n        return self.iloc[:n]\n\n    @final\n    def tail(self: NDFrameT, n: int = 5) -> NDFrameT:\n        \"\"\"\n        Return the last `n` rows.\n\n        This function returns last `n` rows from the object based on\n        position. It is useful for quickly verifying data, for example,\n        after sorting or appending rows.\n\n        For negative values of `n`, this function returns all rows except\n        the first `|n|` rows, equivalent to ``df[|n|:]``.\n\n        If n is larger than the number of rows, this function returns all rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        type of caller\n            The last `n` rows of the caller object.\n\n        See Also\n        --------\n        DataFrame.head : The first `n` rows of the caller object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the last 5 lines\n\n        >>> df.tail()\n           animal\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n\n        Viewing the last `n` lines (three in this case)\n\n        >>> df.tail(3)\n          animal\n        6  shark\n        7  whale\n        8  zebra\n\n        For negative values of `n`\n\n        >>> df.tail(-3)\n           animal\n        3    lion\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n        \"\"\"\n        if n == 0:\n            return self.iloc[0:0]\n        return self.iloc[-n:]\n\n    @final\n    def sample(\n        self: NDFrameT,\n        n: int | None = None,\n        frac: float | None = None,\n        replace: bool_t = False,\n        weights=None,\n        random_state: RandomState | None = None,\n        axis: Axis | None = None,\n        ignore_index: bool_t = False,\n    ) -> NDFrameT:\n        \"\"\"\n        Return a random sample of items from an axis of object.\n\n        You can use `random_state` for reproducibility.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : bool, default False\n            Allow or disallow sampling of the same row more than once.\n        weights : str or ndarray-like, optional\n            Default 'None' results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            Infinite values not allowed.\n        random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n            If int, array-like, or BitGenerator, seed for random number generator.\n            If np.random.RandomState or np.random.Generator, use as given.\n\n            .. versionchanged:: 1.1.0\n\n                array-like and BitGenerator object now passed to np.random.RandomState()\n                as seed\n\n            .. versionchanged:: 1.4.0\n\n                np.random.Generator objects now accepted\n\n        axis : {0 or ‘index’, 1 or ‘columns’, None}, default None\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type. For `Series` this parameter is unused and defaults to `None`.\n        ignore_index : bool, default False\n            If True, the resulting index will be labeled 0, 1, …, n - 1.\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        Series or DataFrame\n            A new object of same type as caller containing `n` items randomly\n            sampled from the caller object.\n\n        See Also\n        --------\n        DataFrameGroupBy.sample: Generates random samples from each group of a\n            DataFrame object.\n        SeriesGroupBy.sample: Generates random samples from each group of a\n            Series object.\n        numpy.random.choice: Generates a random sample from a given 1-D numpy\n            array.\n\n        Notes\n        -----\n        If `frac` > 1, `replacement` should be set to `True`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n        ...                    'num_wings': [2, 0, 0, 0],\n        ...                    'num_specimen_seen': [10, 2, 1, 8]},\n        ...                   index=['falcon', 'dog', 'spider', 'fish'])\n        >>> df\n                num_legs  num_wings  num_specimen_seen\n        falcon         2          2                 10\n        dog            4          0                  2\n        spider         8          0                  1\n        fish           0          0                  8\n\n        Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n        Note that we use `random_state` to ensure the reproducibility of\n        the examples.\n\n        >>> df['num_legs'].sample(n=3, random_state=1)\n        fish      0\n        spider    8\n        falcon    2\n        Name: num_legs, dtype: int64\n\n        A random 50% sample of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.5, replace=True, random_state=1)\n              num_legs  num_wings  num_specimen_seen\n        dog          4          0                  2\n        fish         0          0                  8\n\n        An upsample sample of the ``DataFrame`` with replacement:\n        Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n        >>> df.sample(frac=2, replace=True, random_state=1)\n                num_legs  num_wings  num_specimen_seen\n        dog            4          0                  2\n        fish           0          0                  8\n        falcon         2          2                 10\n        falcon         2          2                 10\n        fish           0          0                  8\n        dog            4          0                  2\n        fish           0          0                  8\n        dog            4          0                  2\n\n        Using a DataFrame column as weights. Rows with larger value in the\n        `num_specimen_seen` column are more likely to be sampled.\n\n        >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n                num_legs  num_wings  num_specimen_seen\n        falcon         2          2                 10\n        fish           0          0                  8\n        \"\"\"  # noqa:E501\n        if axis is None:\n            axis = self._stat_axis_number\n\n        axis = self._get_axis_number(axis)\n        obj_len = self.shape[axis]\n\n        # Process random_state argument\n        rs = com.random_state(random_state)\n\n        size = sample.process_sampling_size(n, frac, replace)\n        if size is None:\n            assert frac is not None\n            size = round(frac * obj_len)\n\n        if weights is not None:\n            weights = sample.preprocess_weights(self, weights, axis)\n\n        sampled_indices = sample.sample(obj_len, size, replace, weights, rs)\n        result = self.take(sampled_indices, axis=axis)\n\n        if ignore_index:\n            result.index = default_index(len(result))\n\n        return result\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def pipe(\n        self,\n        func: Callable[..., T] | tuple[Callable[..., T], str],\n        *args,\n        **kwargs,\n    ) -> T:\n        r\"\"\"\n        Apply chainable functions that expect Series or DataFrames.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to the {klass}.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the {klass}.\n        args : iterable, optional\n            Positional arguments passed into ``func``.\n        kwargs : mapping, optional\n            A dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        object : the return type of ``func``.\n\n        See Also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame.\n        DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n        Series.map : Apply a mapping correspondence on a\n            :class:`~pandas.Series`.\n\n        Notes\n        -----\n        Use ``.pipe`` when chaining together functions that expect\n        Series, DataFrames or GroupBy objects. Instead of writing\n\n        >>> func(g(h(df), arg1=a), arg2=b, arg3=c)  # doctest: +SKIP\n\n        You can write\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe(func, arg2=b, arg3=c)\n        ... )  # doctest: +SKIP\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``func`` takes its data as ``arg2``:\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe((func, 'arg2'), arg1=a, arg3=c)\n        ...  )  # doctest: +SKIP\n        \"\"\"\n        return com.pipe(self, func, *args, **kwargs)\n\n    # ----------------------------------------------------------------------\n    # Attribute access\n\n    @final\n    def __finalize__(\n        self: NDFrameT, other, method: str | None = None, **kwargs\n    ) -> NDFrameT:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : str, optional\n            A passed method name providing context on where ``__finalize__``\n            was called.\n\n            .. warning::\n\n               The value passed as `method` are not currently considered\n               stable across pandas releases.\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n\n            self.flags.allows_duplicate_labels = other.flags.allows_duplicate_labels\n            # For subclasses using _metadata.\n            for name in set(self._metadata) & set(other._metadata):\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n\n        if method == \"concat\":\n            attrs = other.objs[0].attrs\n            check_attrs = all(objs.attrs == attrs for objs in other.objs[1:])\n            if check_attrs:\n                for name in attrs:\n                    self.attrs[name] = attrs[name]\n\n            allows_duplicate_labels = all(\n                x.flags.allows_duplicate_labels for x in other.objs\n            )\n            self.flags.allows_duplicate_labels = allows_duplicate_labels\n\n        return self\n\n    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n        if (\n            name not in self._internal_names_set\n            and name not in self._metadata\n            and name not in self._accessors\n            and self._info_axis._can_hold_identifiers_and_holds_name(name)\n        ):\n            return self[name]\n        return object.__getattribute__(self, name)\n\n    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=find_stack_level(),\n                    )\n                object.__setattr__(self, name, value)\n\n    @final\n    def _dir_additions(self) -> set[str]:\n        \"\"\"\n        add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, its first level values are used.\n        \"\"\"\n        additions = super()._dir_additions()\n        if self._info_axis._can_hold_strings:\n            additions.update(self._info_axis._dir_additions_for_owner)\n        return additions\n\n    # ----------------------------------------------------------------------\n    # Consolidation of internals\n\n    @final\n    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _mgr -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        if isinstance(self._mgr, (ArrayManager, SingleArrayManager)):\n            return f()\n        blocks_before = len(self._mgr.blocks)\n        result = f()\n        if len(self._mgr.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result\n\n    @final\n    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f() -> None:\n            self._mgr = self._mgr.consolidate()\n\n        self._protect_consolidate(f)\n\n    @final\n    def _consolidate(self):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        f = lambda: self._mgr.consolidate()\n        cons_data = self._protect_consolidate(f)\n        return self._constructor(cons_data).__finalize__(self)\n\n    @property\n    def _is_mixed_type(self) -> bool_t:\n        if self._mgr.is_single_block:\n            return False\n\n        if self._mgr.any_extension_types:\n            # Even if they have the same dtype, we can't consolidate them,\n            #  so we pretend this is \"mixed'\"\n            return True\n\n        return self.dtypes.nunique() > 1\n\n    @final\n    def _check_inplace_setting(self, value) -> bool_t:\n        \"\"\"check whether we allow in-place setting with this type of value\"\"\"\n        if self._is_mixed_type and not self._mgr.is_numeric_mixed_type:\n\n            # allow an actual np.nan thru\n            if is_float(value) and np.isnan(value):\n                return True\n\n            raise TypeError(\n                \"Cannot do inplace boolean setting on \"\n                \"mixed-types with a non np.nan value\"\n            )\n\n        return True\n\n    @final\n    def _get_numeric_data(self: NDFrameT) -> NDFrameT:\n        return self._constructor(self._mgr.get_numeric_data()).__finalize__(self)\n\n    @final\n    def _get_bool_data(self):\n        return self._constructor(self._mgr.get_bool_data()).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    @property\n    def values(self):\n        raise AbstractMethodError(self)\n\n    @property\n    def _values(self) -> np.ndarray:\n        \"\"\"internal implementation\"\"\"\n        raise AbstractMethodError(self)\n\n    @property\n    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        data = self._mgr.get_dtypes()\n        return self._constructor_sliced(data, index=self._info_axis, dtype=np.object_)\n\n    def astype(\n        self: NDFrameT, dtype, copy: bool_t = True, errors: IgnoreRaise = \"raise\"\n    ) -> NDFrameT:\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Notes\n        -----\n        .. deprecated:: 1.3.0\n\n            Using ``astype`` to convert from timezone-naive dtype to\n            timezone-aware dtype is deprecated and will raise in a\n            future version.  Use :meth:`Series.dt.tz_localize` instead.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> from pandas.api.types import CategoricalDtype\n        >>> cat_dtype = CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n\n        Create a series of dates:\n\n        >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))\n        >>> ser_date\n        0   2020-01-01\n        1   2020-01-02\n        2   2020-01-03\n        dtype: datetime64[ns]\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            # GH#44417 cast to Series so we can use .iat below, which will be\n            #  robust in case we\n            from pandas import Series\n\n            dtype_ser = Series(dtype, dtype=object)\n\n            for col_name in dtype_ser.index:\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument. \"\n                        f\"'{col_name}' not found in columns.\"\n                    )\n\n            dtype_ser = dtype_ser.reindex(self.columns, fill_value=None, copy=False)\n\n            results = []\n            for i, (col_name, col) in enumerate(self.items()):\n                cdt = dtype_ser.iat[i]\n                if isna(cdt):\n                    res_col = col.copy() if copy else col\n                else:\n                    try:\n                        res_col = col.astype(dtype=cdt, copy=copy, errors=errors)\n                    except ValueError as ex:\n                        ex.args = (\n                            f\"{ex}: Error while type casting for column '{col_name}'\",\n                        )\n                        raise\n                results.append(res_col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            # TODO(EA2D): special case not needed with 2D EAs\n            results = [\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            ]\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._mgr.astype(dtype=dtype, copy=copy, errors=errors)\n            return self._constructor(new_data).__finalize__(self, method=\"astype\")\n\n        # GH 33113: handle empty frame or series\n        if not results:\n            return self.copy()\n\n        # GH 19920: retain column metadata after concat\n        result = concat(results, axis=1, copy=False)\n        # GH#40810 retain subclass\n        # error: Incompatible types in assignment\n        # (expression has type \"NDFrameT\", variable has type \"DataFrame\")\n        result = self._constructor(result)  # type: ignore[assignment]\n        result.columns = self.columns\n        result = result.__finalize__(self, method=\"astype\")\n        # https://github.com/python/mypy/issues/8354\n        return cast(NDFrameT, result)\n\n    @final\n    def copy(self: NDFrameT, deep: bool_t | None = True) -> NDFrameT:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Since pandas is not thread safe, see the\n        :ref:`gotchas <gotchas.thread-safety>` when copying in a threading\n        environment.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._mgr.copy(deep=deep)\n        self._clear_item_cache()\n        return self._constructor(data).__finalize__(self, method=\"copy\")\n\n    @final\n    def __copy__(self: NDFrameT, deep: bool_t = True) -> NDFrameT:\n        return self.copy(deep=deep)\n\n    @final\n    def __deepcopy__(self: NDFrameT, memo=None) -> NDFrameT:\n        \"\"\"\n        Parameters\n        ----------\n        memo, default None\n            Standard signature. Unused\n        \"\"\"\n        return self.copy(deep=True)\n\n    @final\n    def _convert(\n        self: NDFrameT,\n        datetime: bool_t = False,\n        numeric: bool_t = False,\n        timedelta: bool_t = False,\n    ) -> NDFrameT:\n        \"\"\"\n        Attempt to infer better dtype for object columns.\n\n        Parameters\n        ----------\n        datetime : bool, default False\n            If True, convert to date where possible.\n        numeric : bool, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : bool, default False\n            If True, convert to timedelta where possible.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        validate_bool_kwarg(datetime, \"datetime\")\n        validate_bool_kwarg(numeric, \"numeric\")\n        validate_bool_kwarg(timedelta, \"timedelta\")\n        return self._constructor(\n            self._mgr.convert(\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                copy=True,\n            )\n        ).__finalize__(self)\n\n    @final\n    def infer_objects(self: NDFrameT) -> NDFrameT:\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        Returns\n        -------\n        converted : same type as input object\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to numeric type.\n        convert_dtypes : Convert argument to best possible dtype.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        # numeric=False necessary to only soft convert;\n        # python objects will still be converted to\n        # native numpy numeric types\n        return self._constructor(\n            self._mgr.convert(datetime=True, numeric=False, timedelta=True, copy=True)\n        ).__finalize__(self, method=\"infer_objects\")\n\n    @final\n    def convert_dtypes(\n        self: NDFrameT,\n        infer_objects: bool_t = True,\n        convert_string: bool_t = True,\n        convert_integer: bool_t = True,\n        convert_boolean: bool_t = True,\n        convert_floating: bool_t = True,\n    ) -> NDFrameT:\n        \"\"\"\n        Convert columns to best possible dtypes using dtypes supporting ``pd.NA``.\n\n        .. versionadded:: 1.0.0\n\n        Parameters\n        ----------\n        infer_objects : bool, default True\n            Whether object dtypes should be converted to the best possible types.\n        convert_string : bool, default True\n            Whether object dtypes should be converted to ``StringDtype()``.\n        convert_integer : bool, default True\n            Whether, if possible, conversion can be done to integer extension types.\n        convert_boolean : bool, defaults True\n            Whether object dtypes should be converted to ``BooleanDtypes()``.\n        convert_floating : bool, defaults True\n            Whether, if possible, conversion can be done to floating extension types.\n            If `convert_integer` is also True, preference will be give to integer\n            dtypes if the floats can be faithfully casted to integers.\n\n            .. versionadded:: 1.2.0\n\n        Returns\n        -------\n        Series or DataFrame\n            Copy of input object with new dtype.\n\n        See Also\n        --------\n        infer_objects : Infer dtypes of objects.\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n\n        Notes\n        -----\n        By default, ``convert_dtypes`` will attempt to convert a Series (or each\n        Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n        ``convert_string``, ``convert_integer``, ``convert_boolean`` and\n        ``convert_boolean``, it is possible to turn off individual conversions\n        to ``StringDtype``, the integer extension types, ``BooleanDtype``\n        or floating extension types, respectively.\n\n        For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\n        rules as during normal Series/DataFrame construction.  Then, if possible,\n        convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\n        or floating extension type, otherwise leave as ``object``.\n\n        If the dtype is integer, convert to an appropriate integer extension type.\n\n        If the dtype is numeric, and consists of all integers, convert to an\n        appropriate integer extension type. Otherwise, convert to an\n        appropriate floating extension type.\n\n        .. versionchanged:: 1.2\n            Starting with pandas 1.2, this method also converts float columns\n            to the nullable floating extension type.\n\n        In the future, as new dtypes are added that support ``pd.NA``, the results\n        of this method will change to support those new dtypes.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n        ...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n        ...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n        ...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n        ...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n        ...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n        ...     }\n        ... )\n\n        Start with a DataFrame with default dtypes.\n\n        >>> df\n           a  b      c    d     e      f\n        0  1  x   True    h  10.0    NaN\n        1  2  y  False    i   NaN  100.5\n        2  3  z    NaN  NaN  20.0  200.0\n\n        >>> df.dtypes\n        a      int32\n        b     object\n        c     object\n        d     object\n        e    float64\n        f    float64\n        dtype: object\n\n        Convert the DataFrame to use best possible dtypes.\n\n        >>> dfn = df.convert_dtypes()\n        >>> dfn\n           a  b      c     d     e      f\n        0  1  x   True     h    10   <NA>\n        1  2  y  False     i  <NA>  100.5\n        2  3  z   <NA>  <NA>    20  200.0\n\n        >>> dfn.dtypes\n        a      Int32\n        b     string\n        c    boolean\n        d     string\n        e      Int64\n        f    Float64\n        dtype: object\n\n        Start with a Series of strings and missing data represented by ``np.nan``.\n\n        >>> s = pd.Series([\"a\", \"b\", np.nan])\n        >>> s\n        0      a\n        1      b\n        2    NaN\n        dtype: object\n\n        Obtain a Series with dtype ``StringDtype``.\n\n        >>> s.convert_dtypes()\n        0       a\n        1       b\n        2    <NA>\n        dtype: string\n        \"\"\"\n        if self.ndim == 1:\n            return self._convert_dtypes(\n                infer_objects,\n                convert_string,\n                convert_integer,\n                convert_boolean,\n                convert_floating,\n            )\n        else:\n            results = [\n                col._convert_dtypes(\n                    infer_objects,\n                    convert_string,\n                    convert_integer,\n                    convert_boolean,\n                    convert_floating,\n                )\n                for col_name, col in self.items()\n            ]\n            if len(results) > 0:\n                result = concat(results, axis=1, copy=False, keys=self.columns)\n                cons = cast(Type[\"DataFrame\"], self._constructor)\n                result = cons(result)\n                result = result.__finalize__(self, method=\"convert_dtypes\")\n                # https://github.com/python/mypy/issues/8354\n                return cast(NDFrameT, result)\n            else:\n                return self.copy()\n\n    # ----------------------------------------------------------------------\n    # Filling NA's\n\n    @overload\n    def fillna(\n        self: NDFrameT,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[False] = ...,\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[True],\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def fillna(\n        self: NDFrameT,\n        value: Hashable | Mapping | Series | DataFrame = ...,\n        *,\n        method: FillnaOptions | None = ...,\n        axis: Axis | None = ...,\n        inplace: bool_t = ...,\n        limit: int | None = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(**_shared_doc_kwargs)\n    def fillna(\n        self: NDFrameT,\n        value: Hashable | Mapping | Series | DataFrame = None,\n        method: FillnaOptions | None = None,\n        axis: Axis | None = None,\n        inplace: bool_t = False,\n        limit: int | None = None,\n        downcast: dict | None = None,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame).  Values not\n            in the dict/Series/DataFrame will not be filled. This value cannot\n            be a list.\n        method : {{'backfill', 'bfill', 'ffill', None}}, default None\n            Method to use for filling holes in reindexed Series:\n\n            * ffill: propagate last valid observation forward to next valid.\n            * backfill / bfill: use next valid observation to fill gap.\n\n        axis : {axes_single_arg}\n            Axis along which to fill missing values. For `Series`\n            this parameter is unused and defaults to 0.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            A dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible).\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        interpolate : Fill NaN values using interpolation.\n        reindex : Conform object to new index.\n        asfreq : Convert TimeSeries to specified frequency.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, np.nan],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                   columns=list(\"ABCD\"))\n        >>> df\n             A    B   C    D\n        0  NaN  2.0 NaN  0.0\n        1  3.0  4.0 NaN  1.0\n        2  NaN  NaN NaN  NaN\n        3  NaN  3.0 NaN  4.0\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n             A    B    C    D\n        0  0.0  2.0  0.0  0.0\n        1  3.0  4.0  0.0  1.0\n        2  0.0  0.0  0.0  0.0\n        3  0.0  3.0  0.0  4.0\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method=\"ffill\")\n             A    B   C    D\n        0  NaN  2.0 NaN  0.0\n        1  3.0  4.0 NaN  1.0\n        2  3.0  4.0 NaN  1.0\n        3  3.0  3.0 NaN  4.0\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {{\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}}\n        >>> df.fillna(value=values)\n             A    B    C    D\n        0  0.0  2.0  2.0  0.0\n        1  3.0  4.0  2.0  1.0\n        2  0.0  1.0  2.0  3.0\n        3  0.0  3.0  2.0  4.0\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n             A    B    C    D\n        0  0.0  2.0  2.0  0.0\n        1  3.0  4.0  NaN  1.0\n        2  NaN  1.0  NaN  3.0\n        3  NaN  3.0  NaN  4.0\n\n        When filling using a DataFrame, replacement happens along\n        the same column names and same indices\n\n        >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n        >>> df.fillna(df2)\n             A    B    C    D\n        0  0.0  2.0  0.0  0.0\n        1  3.0  4.0  0.0  1.0\n        2  0.0  0.0  0.0  NaN\n        3  0.0  3.0  0.0  4.0\n\n        Note that column D is not affected since it is not present in df2.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        value, method = validate_fillna_kwargs(value, method)\n\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        if value is None:\n            if not self._mgr.is_single_block and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                return result\n\n            new_data = self._mgr.interpolate(\n                method=method,\n                axis=axis,\n                limit=limit,\n                inplace=inplace,\n                downcast=downcast,\n            )\n        else:\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    if not len(value):\n                        # test_fillna_nonscalar\n                        if inplace:\n                            return None\n                        return self.copy()\n                    from pandas import Series\n\n                    value = Series(value)\n                    value = value.reindex(self.index, copy=False)\n                    value = value._values\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError(\n                        '\"value\" parameter must be a scalar, dict '\n                        \"or Series, but you passed a \"\n                        f'\"{type(value).__name__}\"'\n                    )\n\n                new_data = self._mgr.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError(\n                        \"Currently only can fill \"\n                        \"with dict/Series column \"\n                        \"by column\"\n                    )\n\n                result = self if inplace else self.copy()\n                is_dict = isinstance(downcast, dict)\n                for k, v in value.items():\n                    if k not in result:\n                        continue\n\n                    # error: Item \"None\" of \"Optional[Dict[Any, Any]]\" has no\n                    # attribute \"get\"\n                    downcast_k = (\n                        downcast\n                        if not is_dict\n                        else downcast.get(k)  # type: ignore[union-attr]\n                    )\n\n                    res_k = result[k].fillna(v, limit=limit, downcast=downcast_k)\n\n                    if not inplace:\n                        result[k] = res_k\n                    else:\n                        # We can write into our existing column(s) iff dtype\n                        #  was preserved.\n                        if isinstance(res_k, ABCSeries):\n                            # i.e. 'k' only shows up once in self.columns\n                            if res_k.dtype == result[k].dtype:\n                                result.loc[:, k] = res_k\n                            else:\n                                # Different dtype -> no way to do inplace.\n                                result[k] = res_k\n                        else:\n                            # see test_fillna_dict_inplace_nonunique_columns\n                            locs = result.columns.get_loc(k)\n                            if isinstance(locs, slice):\n                                locs = np.arange(self.shape[1])[locs]\n                            elif (\n                                isinstance(locs, np.ndarray) and locs.dtype.kind == \"b\"\n                            ):\n                                locs = locs.nonzero()[0]\n                            elif not (\n                                isinstance(locs, np.ndarray) and locs.dtype.kind == \"i\"\n                            ):\n                                # Should never be reached, but let's cover our bases\n                                raise NotImplementedError(\n                                    \"Unexpected get_loc result, please report a bug at \"\n                                    \"https://github.com/pandas-dev/pandas\"\n                                )\n\n                            for i, loc in enumerate(locs):\n                                res_loc = res_k.iloc[:, i]\n                                target = self.iloc[:, loc]\n\n                                if res_loc.dtype == target.dtype:\n                                    result.iloc[:, loc] = res_loc\n                                else:\n                                    result.isetitem(loc, res_loc)\n\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                if axis == 1:\n\n                    result = self.T.fillna(value=value, limit=limit).T\n\n                    new_data = result\n                else:\n\n                    new_data = self._mgr.fillna(\n                        value=value, limit=limit, inplace=inplace, downcast=downcast\n                    )\n            elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n\n                new_data = self.where(self.notna(), value)._mgr\n            else:\n                raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"fillna\")\n\n    @overload\n    def ffill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def ffill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool_t = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def ffill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = None,\n        inplace: bool_t = False,\n        limit: None | int = None,\n        downcast: dict | None = None,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n        \"\"\"\n        return self.fillna(\n            method=\"ffill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n        )\n\n    pad = ffill\n\n    @overload\n    def bfill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def bfill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool_t = ...,\n        limit: None | int = ...,\n        downcast: dict | None = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def bfill(\n        self: NDFrameT,\n        *,\n        axis: None | Axis = None,\n        inplace: bool_t = False,\n        limit: None | int = None,\n        downcast: dict | None = None,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n        \"\"\"\n        return self.fillna(\n            method=\"bfill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n        )\n\n    backfill = bfill\n\n    @overload\n    def replace(\n        self: NDFrameT,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[False] = ...,\n        limit: int | None = ...,\n        regex: bool_t = ...,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[True],\n        limit: int | None = ...,\n        regex: bool_t = ...,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def replace(\n        self: NDFrameT,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: bool_t = ...,\n        limit: int | None = ...,\n        regex: bool_t = ...,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(\n        _shared_docs[\"replace\"],\n        klass=_shared_doc_kwargs[\"klass\"],\n        inplace=_shared_doc_kwargs[\"inplace\"],\n        replace_iloc=_shared_doc_kwargs[\"replace_iloc\"],\n    )\n    def replace(\n        self: NDFrameT,\n        to_replace=None,\n        value=lib.no_default,\n        *,\n        inplace: bool_t = False,\n        limit: int | None = None,\n        regex: bool_t = False,\n        method: Literal[\"pad\", \"ffill\", \"bfill\"] | lib.NoDefault = lib.no_default,\n    ) -> NDFrameT | None:\n        if not (\n            is_scalar(to_replace)\n            or is_re_compilable(to_replace)\n            or is_list_like(to_replace)\n        ):\n            raise TypeError(\n                \"Expecting 'to_replace' to be either a scalar, array-like, \"\n                \"dict or None, got invalid type \"\n                f\"{repr(type(to_replace).__name__)}\"\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not is_bool(regex) and to_replace is not None:\n            raise ValueError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n        self._consolidate_inplace()\n\n        if value is lib.no_default or method is not lib.no_default:\n            # GH#36984 if the user explicitly passes value=None we want to\n            #  respect that. We have the corner case where the user explicitly\n            #  passes value=None *and* a method, which we interpret as meaning\n            #  they want the (documented) default behavior.\n            if method is lib.no_default:\n                # TODO: get this to show up as the default in the docs?\n                method = \"pad\"\n\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                if isinstance(self, ABCDataFrame):\n                    from pandas import Series\n\n                    result = self.apply(\n                        Series._replace_single,\n                        args=(to_replace, method, inplace, limit),\n                    )\n                    if inplace:\n                        return None\n                    return result\n                return self._replace_single(to_replace, method, inplace, limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError(\n                        'If \"to_replace\" and \"value\" are both None '\n                        'and \"to_replace\" is not a list, then '\n                        \"regex must be a mapping\"\n                    )\n                to_replace = regex\n                regex = True\n\n            items = list(to_replace.items())\n            if items:\n                keys, values = zip(*items)\n            else:\n                keys, values = ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\n                        \"If a nested mapping is passed, all values \"\n                        \"of the top level mapping must be mappings\"\n                    )\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = list(zip(*v.items())) or ([], [])\n\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(\n                to_replace, value, inplace=inplace, limit=limit, regex=regex\n            )\n        else:\n\n            # need a non-zero len on all axes\n            if not self.size:\n                if inplace:\n                    return None\n                return self.copy()\n\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    # Note: Checking below for `in foo.keys()` instead of\n                    #  `in foo` is needed for when we have a Series and not dict\n                    mapping = {\n                        col: (to_replace[col], value[col])\n                        for col in to_replace.keys()\n                        if col in value.keys() and col in self\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-like to_replace \"\n                            \"and non-None value\"\n                        )\n                    mapping = {\n                        col: (to_rep, value) for col, to_rep in to_replace.items()\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n                else:\n                    raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n            elif is_list_like(to_replace):\n                if not is_list_like(value):\n                    # e.g. to_replace = [NA, ''] and value is 0,\n                    #  so we replace NA with 0 and then replace '' with 0\n                    value = [value] * len(to_replace)\n\n                # e.g. we have to_replace = [NA, ''] and value = [0, 'missing']\n                if len(to_replace) != len(value):\n                    raise ValueError(\n                        f\"Replacement lists must match in length. \"\n                        f\"Expecting {len(to_replace)} got {len(value)} \"\n                    )\n                new_data = self._mgr.replace_list(\n                    src_list=to_replace,\n                    dest_list=value,\n                    inplace=inplace,\n                    regex=regex,\n                )\n\n            elif to_replace is None:\n                if not (\n                    is_re_compilable(regex)\n                    or is_list_like(regex)\n                    or is_dict_like(regex)\n                ):\n                    raise TypeError(\n                        f\"'regex' must be a string or a compiled regular expression \"\n                        f\"or a list or dict of strings or regular expressions, \"\n                        f\"you passed a {repr(type(regex).__name__)}\"\n                    )\n                return self.replace(\n                    regex, value, inplace=inplace, limit=limit, regex=True\n                )\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-value and \"\n                            \"non-None to_replace\"\n                        )\n                    mapping = {col: (to_replace, val) for col, val in value.items()}\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    regex = should_use_regex(regex, to_replace)\n                    if regex:\n                        new_data = self._mgr.replace_regex(\n                            to_replace=to_replace,\n                            value=value,\n                            inplace=inplace,\n                        )\n                    else:\n                        new_data = self._mgr.replace(\n                            to_replace=to_replace, value=value, inplace=inplace\n                        )\n                else:\n                    raise TypeError(\n                        f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}'\n                    )\n\n        result = self._constructor(new_data)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"replace\")\n\n    def interpolate(\n        self: NDFrameT,\n        method: str = \"linear\",\n        *,\n        axis: Axis = 0,\n        limit: int | None = None,\n        inplace: bool_t = False,\n        limit_direction: str | None = None,\n        limit_area: str | None = None,\n        downcast: str | None = None,\n        **kwargs,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Fill NaN values using an interpolation method.\n\n        Please note that only ``method='linear'`` is supported for\n        DataFrame/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : str, default 'linear'\n            Interpolation technique to use. One of:\n\n            * 'linear': Ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n            * 'time': Works on daily and higher resolution data to interpolate\n              given length of interval.\n            * 'index', 'values': use the actual numerical values of the index.\n            * 'pad': Fill in NaNs using existing values.\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\n              'barycentric', 'polynomial': Passed to\n              `scipy.interpolate.interp1d`. These methods use the numerical\n              values of the index.  Both 'polynomial' and 'spline' require that\n              you also specify an `order` (int), e.g.\n              ``df.interpolate(method='polynomial', order=5)``.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n              'cubicspline': Wrappers around the SciPy interpolation methods of\n              similar names. See `Notes`.\n            * 'from_derivatives': Refers to\n              `scipy.interpolate.BPoly.from_derivatives` which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18.\n\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Axis to interpolate along. For `Series` this parameter is unused\n            and defaults to 0.\n        limit : int, optional\n            Maximum number of consecutive NaNs to fill. Must be greater than\n            0.\n        inplace : bool, default False\n            Update the data in place if possible.\n        limit_direction : {{'forward', 'backward', 'both'}}, Optional\n            Consecutive NaNs will be filled in this direction.\n\n            If limit is specified:\n                * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n                * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n                  'backwards'.\n\n            If 'limit' is not specified:\n                * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n                * else the default is 'forward'\n\n            .. versionchanged:: 1.1.0\n                raises ValueError if `limit_direction` is 'forward' or 'both' and\n                    method is 'backfill' or 'bfill'.\n                raises ValueError if `limit_direction` is 'backward' or 'both' and\n                    method is 'pad' or 'ffill'.\n\n        limit_area : {{`None`, 'inside', 'outside'}}, default None\n            If limit is specified, consecutive NaNs will be filled with this\n            restriction.\n\n            * ``None``: No fill restriction.\n            * 'inside': Only fill NaNs surrounded by valid values\n              (interpolate).\n            * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        ``**kwargs`` : optional\n            Keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            Returns the same object type as the caller, interpolated at\n            some or all ``NaN`` values or None if ``inplace=True``.\n\n        See Also\n        --------\n        fillna : Fill missing values using different methods.\n        scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n            (Akima interpolator).\n        scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n            Bernstein basis.\n        scipy.interpolate.interp1d : Interpolate a 1-D function.\n        scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n            interpolator).\n        scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n            interpolation.\n        scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\n        Notes\n        -----\n        The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n        methods are wrappers around the respective SciPy implementations of\n        similar names. These use the actual numerical values of the index.\n        For more information on their behavior, see the\n        `SciPy documentation\n        <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.\n\n        Examples\n        --------\n        Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n        interpolation.\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s\n        0    0.0\n        1    1.0\n        2    NaN\n        3    3.0\n        dtype: float64\n        >>> s.interpolate()\n        0    0.0\n        1    1.0\n        2    2.0\n        3    3.0\n        dtype: float64\n\n        Filling in ``NaN`` in a Series by padding, but filling at most two\n        consecutive ``NaN`` at a time.\n\n        >>> s = pd.Series([np.nan, \"single_one\", np.nan,\n        ...                \"fill_two_more\", np.nan, np.nan, np.nan,\n        ...                4.71, np.nan])\n        >>> s\n        0              NaN\n        1       single_one\n        2              NaN\n        3    fill_two_more\n        4              NaN\n        5              NaN\n        6              NaN\n        7             4.71\n        8              NaN\n        dtype: object\n        >>> s.interpolate(method='pad', limit=2)\n        0              NaN\n        1       single_one\n        2       single_one\n        3    fill_two_more\n        4    fill_two_more\n        5    fill_two_more\n        6              NaN\n        7             4.71\n        8             4.71\n        dtype: object\n\n        Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n        Both 'polynomial' and 'spline' methods require that you also specify\n        an ``order`` (int).\n\n        >>> s = pd.Series([0, 2, np.nan, 8])\n        >>> s.interpolate(method='polynomial', order=2)\n        0    0.000000\n        1    2.000000\n        2    4.666667\n        3    8.000000\n        dtype: float64\n\n        Fill the DataFrame forward (that is, going down) along each column\n        using linear interpolation.\n\n        Note how the last entry in column 'a' is interpolated differently,\n        because there is no entry after it to use for interpolation.\n        Note how the first entry in column 'b' remains ``NaN``, because there\n        is no entry before it to use for interpolation.\n\n        >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n        ...                    (np.nan, 2.0, np.nan, np.nan),\n        ...                    (2.0, 3.0, np.nan, 9.0),\n        ...                    (np.nan, 4.0, -4.0, 16.0)],\n        ...                   columns=list('abcd'))\n        >>> df\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  NaN  2.0  NaN   NaN\n        2  2.0  3.0  NaN   9.0\n        3  NaN  4.0 -4.0  16.0\n        >>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  1.0  2.0 -2.0   5.0\n        2  2.0  3.0 -3.0   9.0\n        3  2.0  4.0 -4.0  16.0\n\n        Using polynomial interpolation.\n\n        >>> df['d'].interpolate(method='polynomial', order=2)\n        0     1.0\n        1     4.0\n        2     9.0\n        3    16.0\n        Name: d, dtype: float64\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        axis = self._get_axis_number(axis)\n\n        fillna_methods = [\"ffill\", \"bfill\", \"pad\", \"backfill\"]\n        should_transpose = axis == 1 and method not in fillna_methods\n\n        obj = self.T if should_transpose else self\n\n        if obj.empty:\n            return self.copy()\n\n        if method not in fillna_methods:\n            axis = self._info_axis_number\n\n        if isinstance(obj.index, MultiIndex) and method != \"linear\":\n            raise ValueError(\n                \"Only `method=linear` interpolation is supported on MultiIndexes.\"\n            )\n\n        # Set `limit_direction` depending on `method`\n        if limit_direction is None:\n            limit_direction = (\n                \"backward\" if method in (\"backfill\", \"bfill\") else \"forward\"\n            )\n        else:\n            if method in (\"pad\", \"ffill\") and limit_direction != \"forward\":\n                raise ValueError(\n                    f\"`limit_direction` must be 'forward' for method `{method}`\"\n                )\n            if method in (\"backfill\", \"bfill\") and limit_direction != \"backward\":\n                raise ValueError(\n                    f\"`limit_direction` must be 'backward' for method `{method}`\"\n                )\n\n        if obj.ndim == 2 and np.all(obj.dtypes == np.dtype(\"object\")):\n            raise TypeError(\n                \"Cannot interpolate with all object-dtype columns \"\n                \"in the DataFrame. Try setting at least one \"\n                \"column to a numeric dtype.\"\n            )\n\n        # create/use the index\n        if method == \"linear\":\n            # prior default\n            index = Index(np.arange(len(obj.index)))\n        else:\n            index = obj.index\n            methods = {\"index\", \"values\", \"nearest\", \"time\"}\n            is_numeric_or_datetime = (\n                is_numeric_dtype(index.dtype)\n                or is_datetime64_any_dtype(index.dtype)\n                or is_timedelta64_dtype(index.dtype)\n            )\n            if method not in methods and not is_numeric_or_datetime:\n                raise ValueError(\n                    \"Index column must be numeric or datetime type when \"\n                    f\"using {method} method other than linear. \"\n                    \"Try setting a numeric or datetime index column before \"\n                    \"interpolating.\"\n                )\n\n        if isna(index).any():\n            raise NotImplementedError(\n                \"Interpolation with NaNs in the index \"\n                \"has not been implemented. Try filling \"\n                \"those NaNs before interpolating.\"\n            )\n        new_data = obj._mgr.interpolate(\n            method=method,\n            axis=axis,\n            index=index,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            inplace=inplace,\n            downcast=downcast,\n            **kwargs,\n        )\n\n        result = self._constructor(new_data)\n        if should_transpose:\n            result = result.T\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"interpolate\")\n\n    # ----------------------------------------------------------------------\n    # Timeseries methods Methods\n\n    @final\n    def asof(self, where, subset=None):\n        \"\"\"\n        Return the last row(s) without any NaNs before `where`.\n\n        The last row (for each element in `where`, if list) without any\n        NaN is taken.\n        In case of a :class:`~pandas.DataFrame`, the last row without NaN\n        considering only the subset of columns (if not `None`)\n\n        If there is no good value, NaN is returned for a Series or\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array-like of dates\n            Date(s) before which the last row(s) are returned.\n        subset : str or array-like of str, default `None`\n            For DataFrame, if not `None`, only use these columns to\n            check for NaNs.\n\n        Returns\n        -------\n        scalar, Series, or DataFrame\n\n            The return can be:\n\n            * scalar : when `self` is a Series and `where` is a scalar\n            * Series: when `self` is a Series and `where` is an array-like,\n              or when `self` is a DataFrame and `where` is a scalar\n            * DataFrame : when `self` is a DataFrame and `where` is an\n              array-like\n\n            Return scalar, Series, or DataFrame.\n\n        See Also\n        --------\n        merge_asof : Perform an asof merge. Similar to left join.\n\n        Notes\n        -----\n        Dates are assumed to be sorted. Raises if this is not the case.\n\n        Examples\n        --------\n        A Series and a scalar `where`.\n\n        >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n        >>> s\n        10    1.0\n        20    2.0\n        30    NaN\n        40    4.0\n        dtype: float64\n\n        >>> s.asof(20)\n        2.0\n\n        For a sequence `where`, a Series is returned. The first value is\n        NaN, because the first element of `where` is before the first\n        index value.\n\n        >>> s.asof([5, 20])\n        5     NaN\n        20    2.0\n        dtype: float64\n\n        Missing values are not considered. The following is ``2.0``, not\n        NaN, even though NaN is at the index location for ``30``.\n\n        >>> s.asof(30)\n        2.0\n\n        Take all columns into consideration\n\n        >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n        ...                    'b': [None, None, None, None, 500]},\n        ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n        ...                                           '2018-02-27 09:02:00',\n        ...                                           '2018-02-27 09:03:00',\n        ...                                           '2018-02-27 09:04:00',\n        ...                                           '2018-02-27 09:05:00']))\n        >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n        ...                           '2018-02-27 09:04:30']))\n                              a   b\n        2018-02-27 09:03:30 NaN NaN\n        2018-02-27 09:04:30 NaN NaN\n\n        Take a single column into consideration\n\n        >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n        ...                           '2018-02-27 09:04:30']),\n        ...         subset=['a'])\n                              a   b\n        2018-02-27 09:03:30  30 NaN\n        2018-02-27 09:04:30  40 NaN\n        \"\"\"\n        if isinstance(where, str):\n            where = Timestamp(where)\n\n        if not self.index.is_monotonic_increasing:\n            raise ValueError(\"asof requires a sorted index\")\n\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError(\"subset is not valid for Series\")\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq)\n\n            if where < start:\n                if not is_series:\n                    return self._constructor_sliced(\n                        index=self.columns, name=where, dtype=np.float64\n                    )\n                return np.nan\n\n            # It's always much faster to use a *while* loop here for\n            # Series than pre-computing all the NAs. However a\n            # *while* loop is extremely expensive for DataFrame\n            # so we later pre-compute all the NAs and use the same\n            # code path whether *where* is a scalar or list.\n            # See PR: https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side=\"right\")\n                if loc > 0:\n                    loc -= 1\n\n                values = self._values\n                while loc > 0 and isna(values[loc]):\n                    loc -= 1\n                return values[loc]\n\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n\n        nulls = self.isna() if is_series else self[subset].isna().any(axis=1)\n        if nulls.all():\n            if is_series:\n                self = cast(\"Series\", self)\n                return self._constructor(np.nan, index=where, name=self.name)\n            elif is_list:\n                self = cast(\"DataFrame\", self)\n                return self._constructor(np.nan, index=where, columns=self.columns)\n            else:\n                self = cast(\"DataFrame\", self)\n                return self._constructor_sliced(\n                    np.nan, index=self.columns, name=where[0]\n                )\n\n        locs = self.index.asof_locs(where, ~(nulls._values))\n\n        # mask the missing\n        missing = locs == -1\n        data = self.take(locs)\n        data.index = where\n        if missing.any():\n            # GH#16063 only do this setting when necessary, otherwise\n            #  we'd cast e.g. bools to floats\n            data.loc[missing] = np.nan\n        return data if is_list else data.iloc[-1]\n\n    # ----------------------------------------------------------------------\n    # Action Methods\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def isna(self: NDFrameT) -> NDFrameT:\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n        values.\n        Everything else gets mapped to False values. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        {klass}\n            Mask of bool values for each element in {klass} that\n            indicates whether an element is an NA value.\n\n        See Also\n        --------\n        {klass}.isnull : Alias of isna.\n        {klass}.notna : Boolean inverse of isna.\n        {klass}.dropna : Omit axes labels with missing values.\n        isna : Top-level isna.\n\n        Examples\n        --------\n        Show which entries in a DataFrame are NA.\n\n        >>> df = pd.DataFrame(dict(age=[5, 6, np.NaN],\n        ...                    born=[pd.NaT, pd.Timestamp('1939-05-27'),\n        ...                          pd.Timestamp('1940-04-25')],\n        ...                    name=['Alfred', 'Batman', ''],\n        ...                    toy=[None, 'Batmobile', 'Joker']))\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.isna()\n             age   born   name    toy\n        0  False   True  False   True\n        1  False  False  False  False\n        2   True  False  False  False\n\n        Show which entries in a Series are NA.\n\n        >>> ser = pd.Series([5, 6, np.NaN])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.isna()\n        0    False\n        1    False\n        2     True\n        dtype: bool\n        \"\"\"\n        return isna(self).__finalize__(self, method=\"isna\")\n\n    @doc(isna, klass=_shared_doc_kwargs[\"klass\"])\n    def isnull(self: NDFrameT) -> NDFrameT:\n        return isna(self).__finalize__(self, method=\"isnull\")\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def notna(self: NDFrameT) -> NDFrameT:\n        \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to True. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n        values.\n\n        Returns\n        -------\n        {klass}\n            Mask of bool values for each element in {klass} that\n            indicates whether an element is not an NA value.\n\n        See Also\n        --------\n        {klass}.notnull : Alias of notna.\n        {klass}.isna : Boolean inverse of notna.\n        {klass}.dropna : Omit axes labels with missing values.\n        notna : Top-level notna.\n\n        Examples\n        --------\n        Show which entries in a DataFrame are not NA.\n\n        >>> df = pd.DataFrame(dict(age=[5, 6, np.NaN],\n        ...                    born=[pd.NaT, pd.Timestamp('1939-05-27'),\n        ...                          pd.Timestamp('1940-04-25')],\n        ...                    name=['Alfred', 'Batman', ''],\n        ...                    toy=[None, 'Batmobile', 'Joker']))\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.notna()\n             age   born  name    toy\n        0   True  False  True  False\n        1   True   True  True   True\n        2  False   True  True   True\n\n        Show which entries in a Series are not NA.\n\n        >>> ser = pd.Series([5, 6, np.NaN])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.notna()\n        0     True\n        1     True\n        2    False\n        dtype: bool\n        \"\"\"\n        return notna(self).__finalize__(self, method=\"notna\")\n\n    @doc(notna, klass=_shared_doc_kwargs[\"klass\"])\n    def notnull(self: NDFrameT) -> NDFrameT:\n        return notna(self).__finalize__(self, method=\"notnull\")\n\n    @final\n    def _clip_with_scalar(self, lower, upper, inplace: bool_t = False):\n        if (lower is not None and np.any(isna(lower))) or (\n            upper is not None and np.any(isna(upper))\n        ):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        result = self\n        mask = isna(self._values)\n\n        with np.errstate(all=\"ignore\"):\n            if upper is not None:\n                subset = self <= upper\n                result = result.where(subset, upper, axis=None, inplace=False)\n            if lower is not None:\n                subset = self >= lower\n                result = result.where(subset, lower, axis=None, inplace=False)\n\n        if np.any(mask):\n            result[mask] = np.nan\n\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result\n\n    @final\n    def _clip_with_one_bound(self, threshold, method, axis, inplace):\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == \"le\":\n                return self._clip_with_scalar(None, threshold, inplace=inplace)\n            return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n        # GH #15390\n        # In order for where method to work, the threshold must\n        # be transformed to NDFrame from other array like structure.\n        if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n            if isinstance(self, ABCSeries):\n                threshold = self._constructor(threshold, index=self.index)\n            else:\n                threshold = align_method_FRAME(self, threshold, axis, flex=None)[1]\n\n        # GH 40420\n        # Treat missing thresholds as no bounds, not clipping the values\n        if is_list_like(threshold):\n            fill_value = np.inf if method.__name__ == \"le\" else -np.inf\n            threshold_inf = threshold.fillna(fill_value)\n        else:\n            threshold_inf = threshold\n\n        subset = method(threshold_inf, axis=axis) | isna(self)\n\n        # GH 40420\n        return self.where(subset, threshold, axis=axis, inplace=inplace)\n\n    def clip(\n        self: NDFrameT,\n        lower=None,\n        upper=None,\n        *,\n        axis: Axis | None = None,\n        inplace: bool_t = False,\n        **kwargs,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Assigns values outside boundary to boundary values. Thresholds\n        can be singular values or array like, and in the latter case\n        the clipping is performed element-wise in the specified axis.\n\n        Parameters\n        ----------\n        lower : float or array-like, default None\n            Minimum threshold value. All values below this\n            threshold will be set to it. A missing\n            threshold (e.g `NA`) will not clip the value.\n        upper : float or array-like, default None\n            Maximum threshold value. All values above this\n            threshold will be set to it. A missing\n            threshold (e.g `NA`) will not clip the value.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Align object with lower and upper along the given axis.\n            For `Series` this parameter is unused and defaults to `None`.\n        inplace : bool, default False\n            Whether to perform the operation in place on the data.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with numpy.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            Same type as calling object with the values outside the\n            clip boundaries replaced or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.clip : Trim values at input threshold in series.\n        DataFrame.clip : Trim values at input threshold in dataframe.\n        numpy.clip : Clip (limit) the values in an array.\n\n        Examples\n        --------\n        >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n        >>> df = pd.DataFrame(data)\n        >>> df\n           col_0  col_1\n        0      9     -2\n        1     -3     -7\n        2      0      6\n        3     -1      8\n        4      5     -5\n\n        Clips per column using lower and upper thresholds:\n\n        >>> df.clip(-4, 6)\n           col_0  col_1\n        0      6     -2\n        1     -3     -4\n        2      0      6\n        3     -1      6\n        4      5     -4\n\n        Clips using specific lower and upper thresholds per column element:\n\n        >>> t = pd.Series([2, -4, -1, 6, 3])\n        >>> t\n        0    2\n        1   -4\n        2   -1\n        3    6\n        4    3\n        dtype: int64\n\n        >>> df.clip(t, t + 4, axis=0)\n           col_0  col_1\n        0      6      2\n        1     -3     -4\n        2      0      3\n        3      6      8\n        4      5      3\n\n        Clips using specific lower threshold per column element, with missing values:\n\n        >>> t = pd.Series([2, -4, np.NaN, 6, 3])\n        >>> t\n        0    2.0\n        1   -4.0\n        2    NaN\n        3    6.0\n        4    3.0\n        dtype: float64\n\n        >>> df.clip(t, axis=0)\n        col_0  col_1\n        0      9      2\n        1     -3     -4\n        2      0      6\n        3      6      8\n        4      5      3\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        axis = nv.validate_clip_with_axis(axis, (), kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # GH 17276\n        # numpy doesn't like NaN as a clip value\n        # so ignore\n        # GH 19992\n        # numpy doesn't drop a list-like bound containing NaN\n        isna_lower = isna(lower)\n        if not is_list_like(lower):\n            if np.any(isna_lower):\n                lower = None\n        elif np.all(isna_lower):\n            lower = None\n        isna_upper = isna(upper)\n        if not is_list_like(upper):\n            if np.any(isna_upper):\n                upper = None\n        elif np.all(isna_upper):\n            upper = None\n\n        # GH 2747 (arguments were reversed)\n        if (\n            lower is not None\n            and upper is not None\n            and is_scalar(lower)\n            and is_scalar(upper)\n        ):\n            lower, upper = min(lower, upper), max(lower, upper)\n\n        # fast-path for scalars\n        if (lower is None or (is_scalar(lower) and is_number(lower))) and (\n            upper is None or (is_scalar(upper) and is_number(upper))\n        ):\n            return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n        result = self\n        if lower is not None:\n            result = result._clip_with_one_bound(\n                lower, method=self.ge, axis=axis, inplace=inplace\n            )\n        if upper is not None:\n            if inplace:\n                result = self\n            result = result._clip_with_one_bound(\n                upper, method=self.le, axis=axis, inplace=inplace\n            )\n\n        return result\n\n    @doc(**_shared_doc_kwargs)\n    def asfreq(\n        self: NDFrameT,\n        freq: Frequency,\n        method: FillnaOptions | None = None,\n        how: str | None = None,\n        normalize: bool_t = False,\n        fill_value: Hashable = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Convert time series to specified frequency.\n\n        Returns the original data conformed to a new index with the specified\n        frequency.\n\n        If the index of this {klass} is a :class:`~pandas.PeriodIndex`, the new index\n        is the result of transforming the original index with\n        :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index\n        will map one-to-one to the new index).\n\n        Otherwise, the new index will be equivalent to ``pd.date_range(start, end,\n        freq=freq)`` where ``start`` and ``end`` are, respectively, the first and\n        last entries in the original index (see :func:`pandas.date_range`). The\n        values corresponding to any timesteps in the new index which were not present\n        in the original index will be null (``NaN``), unless a method for filling\n        such unknowns is provided (see the ``method`` parameter below).\n\n        The :meth:`resample` method is more appropriate if an operation on each group of\n        timesteps (such as an aggregate) is necessary to represent the data at the new\n        frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset or str\n            Frequency DateOffset or string.\n        method : {{'backfill'/'bfill', 'pad'/'ffill'}}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid\n            * 'backfill' / 'bfill': use NEXT valid observation to fill.\n        how : {{'start', 'end'}}, default end\n            For PeriodIndex only (see PeriodIndex.asfreq).\n        normalize : bool, default False\n            Whether to reset output index to midnight.\n        fill_value : scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n        Returns\n        -------\n        {klass}\n            {klass} object reindexed to the specified frequency.\n\n        See Also\n        --------\n        reindex : Conform DataFrame to new index with optional filling logic.\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see `this link\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({{'s': series}})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq='30S')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq='30S', fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq='30S', method='bfill')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n        \"\"\"\n        from pandas.core.resample import asfreq\n\n        return asfreq(\n            self,\n            freq,\n            method=method,\n            how=how,\n            normalize=normalize,\n            fill_value=fill_value,\n        )\n\n    @final\n    def at_time(\n        self: NDFrameT, time, asof: bool_t = False, axis: Axis | None = None\n    ) -> NDFrameT:\n        \"\"\"\n        Select values at particular time of day (e.g., 9:30AM).\n\n        Parameters\n        ----------\n        time : datetime.time or str\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        between_time : Select values between particular times of the day.\n        first : Select initial periods of time series based on a date offset.\n        last : Select final periods of time series based on a date offset.\n        DatetimeIndex.indexer_at_time : Get just the index locations for\n            values at particular time of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n        >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-09 12:00:00  2\n        2018-04-10 00:00:00  3\n        2018-04-10 12:00:00  4\n\n        >>> ts.at_time('12:00')\n                             A\n        2018-04-09 12:00:00  2\n        2018-04-10 12:00:00  4\n        \"\"\"\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n\n        index = self._get_axis(axis)\n\n        if not isinstance(index, DatetimeIndex):\n            raise TypeError(\"Index must be DatetimeIndex\")\n\n        indexer = index.indexer_at_time(time, asof=asof)\n        return self._take_with_is_copy(indexer, axis=axis)\n\n    @final\n    def between_time(\n        self: NDFrameT,\n        start_time,\n        end_time,\n        inclusive: IntervalClosedType = \"both\",\n        axis: Axis | None = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        By setting ``start_time`` to be later than ``end_time``,\n        you can get the times that are *not* between the two times.\n\n        Parameters\n        ----------\n        start_time : datetime.time or str\n            Initial time as a time filter limit.\n        end_time : datetime.time or str\n            End time as a time filter limit.\n        inclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n            Include boundaries; whether to set each bound as closed or open.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine range time on index or columns value.\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        Series or DataFrame\n            Data from the original object filtered to the specified dates range.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        at_time : Select values at a particular time of the day.\n        first : Select initial periods of time series based on a date offset.\n        last : Select final periods of time series based on a date offset.\n        DatetimeIndex.indexer_between_time : Get just the index locations for\n            values between particular times of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n        >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n        2018-04-12 01:00:00  4\n\n        >>> ts.between_time('0:15', '0:45')\n                             A\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n\n        You get the times that are *not* between two times by setting\n        ``start_time`` later than ``end_time``:\n\n        >>> ts.between_time('0:45', '0:15')\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-12 01:00:00  4\n        \"\"\"\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n\n        index = self._get_axis(axis)\n        if not isinstance(index, DatetimeIndex):\n            raise TypeError(\"Index must be DatetimeIndex\")\n\n        left_inclusive, right_inclusive = validate_inclusive(inclusive)\n        indexer = index.indexer_between_time(\n            start_time,\n            end_time,\n            include_start=left_inclusive,\n            include_end=right_inclusive,\n        )\n        return self._take_with_is_copy(indexer, axis=axis)\n\n    @doc(**_shared_doc_kwargs)\n    def resample(\n        self,\n        rule,\n        axis: Axis = 0,\n        closed: str | None = None,\n        label: str | None = None,\n        convention: str = \"start\",\n        kind: str | None = None,\n        on: Level = None,\n        level: Level = None,\n        origin: str | TimestampConvertibleTypes = \"start_day\",\n        offset: TimedeltaConvertibleTypes | None = None,\n        group_keys: bool_t | lib.NoDefault = lib.no_default,\n    ) -> Resampler:\n        \"\"\"\n        Resample time-series data.\n\n        Convenience method for frequency conversion and resampling of time series.\n        The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\n        or `TimedeltaIndex`), or the caller must pass the label of a datetime-like\n        series/index to the ``on``/``level`` keyword parameter.\n\n        Parameters\n        ----------\n        rule : DateOffset, Timedelta or str\n            The offset string or object representing target conversion.\n        axis : {{0 or 'index', 1 or 'columns'}}, default 0\n            Which axis to use for up- or down-sampling. For `Series` this parameter\n            is unused and defaults to 0. Must be\n            `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n        closed : {{'right', 'left'}}, default None\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {{'right', 'left'}}, default None\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {{'start', 'end', 's', 'e'}}, default 'start'\n            For `PeriodIndex` only, controls whether to use the start or\n            end of `rule`.\n        kind : {{'timestamp', 'period'}}, optional, default None\n            Pass 'timestamp' to convert the resulting index to a\n            `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n            By default the input representation is retained.\n\n        on : str, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n        level : str or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling. `level` must be datetime-like.\n        origin : Timestamp or str, default 'start_day'\n            The timestamp on which to adjust the grouping. The timezone of origin\n            must match the timezone of the index.\n            If string, must be one of the following:\n\n            - 'epoch': `origin` is 1970-01-01\n            - 'start': `origin` is the first value of the timeseries\n            - 'start_day': `origin` is the first day at midnight of the timeseries\n\n            .. versionadded:: 1.1.0\n\n            - 'end': `origin` is the last value of the timeseries\n            - 'end_day': `origin` is the ceiling midnight of the last day\n\n            .. versionadded:: 1.3.0\n\n        offset : Timedelta or str, default is None\n            An offset timedelta added to the origin.\n\n            .. versionadded:: 1.1.0\n\n        group_keys : bool, optional\n            Whether to include the group keys in the result index when using\n            ``.apply()`` on the resampled object. Not specifying ``group_keys``\n            will retain values-dependent behavior from pandas 1.4\n            and earlier (see :ref:`pandas 1.5.0 Release notes\n            <whatsnew_150.enhancements.resample_group_keys>`\n            for examples). In a future version of pandas, the behavior will\n            default to the same as specifying ``group_keys=False``.\n\n            .. versionadded:: 1.5.0\n\n        Returns\n        -------\n        pandas.core.Resampler\n            :class:`~pandas.core.Resampler` object.\n\n        See Also\n        --------\n        Series.resample : Resample a Series.\n        DataFrame.resample : Resample a DataFrame.\n        groupby : Group {klass} by mapping, function, label, or list of labels.\n        asfreq : Reindex a {klass} with the given frequency without grouping.\n\n        Notes\n        -----\n        See the `user guide\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n        Examples\n        --------\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``ffill`` method.\n\n        >>> series.resample('30S').ffill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(arraylike):\n        ...     return np.sum(arraylike) + 5\n        ...\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        Resample a year by quarter using 'start' `convention`. Values are\n        assigned to the first quarter of the period.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n        ...                                             freq='A',\n        ...                                             periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n        >>> s.resample('Q', convention='start').asfreq()\n        2012Q1    1.0\n        2012Q2    NaN\n        2012Q3    NaN\n        2012Q4    NaN\n        2013Q1    2.0\n        2013Q2    NaN\n        2013Q3    NaN\n        2013Q4    NaN\n        Freq: Q-DEC, dtype: float64\n\n        Resample quarters by month using 'end' `convention`. Values are\n        assigned to the last month of the period.\n\n        >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n        ...                                                   freq='Q',\n        ...                                                   periods=4))\n        >>> q\n        2018Q1    1\n        2018Q2    2\n        2018Q3    3\n        2018Q4    4\n        Freq: Q-DEC, dtype: int64\n        >>> q.resample('M', convention='end').asfreq()\n        2018-03    1.0\n        2018-04    NaN\n        2018-05    NaN\n        2018-06    2.0\n        2018-07    NaN\n        2018-08    NaN\n        2018-09    3.0\n        2018-10    NaN\n        2018-11    NaN\n        2018-12    4.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword `on` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> d = {{'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}}\n        >>> df = pd.DataFrame(d)\n        >>> df['week_starting'] = pd.date_range('01/01/2018',\n        ...                                     periods=8,\n        ...                                     freq='W')\n        >>> df\n           price  volume week_starting\n        0     10      50    2018-01-07\n        1     11      60    2018-01-14\n        2      9      40    2018-01-21\n        3     13     100    2018-01-28\n        4     14      50    2018-02-04\n        5     18     100    2018-02-11\n        6     17      40    2018-02-18\n        7     19      50    2018-02-25\n        >>> df.resample('M', on='week_starting').mean()\n                       price  volume\n        week_starting\n        2018-01-31     10.75    62.5\n        2018-02-28     17.00    60.0\n\n        For a DataFrame with MultiIndex, the keyword `level` can be used to\n        specify on which level the resampling needs to take place.\n\n        >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n        >>> d2 = {{'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}}\n        >>> df2 = pd.DataFrame(\n        ...     d2,\n        ...     index=pd.MultiIndex.from_product(\n        ...         [days, ['morning', 'afternoon']]\n        ...     )\n        ... )\n        >>> df2\n                              price  volume\n        2000-01-01 morning       10      50\n                   afternoon     11      60\n        2000-01-02 morning        9      40\n                   afternoon     13     100\n        2000-01-03 morning       14      50\n                   afternoon     18     100\n        2000-01-04 morning       17      40\n                   afternoon     19      50\n        >>> df2.resample('D', level=0).sum()\n                    price  volume\n        2000-01-01     21     110\n        2000-01-02     22     140\n        2000-01-03     32     150\n        2000-01-04     36      90\n\n        If you want to adjust the start of the bins based on a fixed timestamp:\n\n        >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'\n        >>> rng = pd.date_range(start, end, freq='7min')\n        >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n        >>> ts\n        2000-10-01 23:30:00     0\n        2000-10-01 23:37:00     3\n        2000-10-01 23:44:00     6\n        2000-10-01 23:51:00     9\n        2000-10-01 23:58:00    12\n        2000-10-02 00:05:00    15\n        2000-10-02 00:12:00    18\n        2000-10-02 00:19:00    21\n        2000-10-02 00:26:00    24\n        Freq: 7T, dtype: int64\n\n        >>> ts.resample('17min').sum()\n        2000-10-01 23:14:00     0\n        2000-10-01 23:31:00     9\n        2000-10-01 23:48:00    21\n        2000-10-02 00:05:00    54\n        2000-10-02 00:22:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', origin='epoch').sum()\n        2000-10-01 23:18:00     0\n        2000-10-01 23:35:00    18\n        2000-10-01 23:52:00    27\n        2000-10-02 00:09:00    39\n        2000-10-02 00:26:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', origin='2000-01-01').sum()\n        2000-10-01 23:24:00     3\n        2000-10-01 23:41:00    15\n        2000-10-01 23:58:00    45\n        2000-10-02 00:15:00    45\n        Freq: 17T, dtype: int64\n\n        If you want to adjust the start of the bins with an `offset` Timedelta, the two\n        following lines are equivalent:\n\n        >>> ts.resample('17min', origin='start').sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17T, dtype: int64\n\n        >>> ts.resample('17min', offset='23h30min').sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17T, dtype: int64\n\n        If you want to take the largest Timestamp as the end of the bins:\n\n        >>> ts.resample('17min', origin='end').sum()\n        2000-10-01 23:35:00     0\n        2000-10-01 23:52:00    18\n        2000-10-02 00:09:00    27\n        2000-10-02 00:26:00    63\n        Freq: 17T, dtype: int64\n\n        In contrast with the `start_day`, you can use `end_day` to take the ceiling\n        midnight of the largest Timestamp as the end of the bins and drop the bins\n        not containing data:\n\n        >>> ts.resample('17min', origin='end_day').sum()\n        2000-10-01 23:38:00     3\n        2000-10-01 23:55:00    15\n        2000-10-02 00:12:00    45\n        2000-10-02 00:29:00    45\n        Freq: 17T, dtype: int64\n        \"\"\"\n        from pandas.core.resample import get_resampler\n\n        axis = self._get_axis_number(axis)\n        return get_resampler(\n            self,\n            freq=rule,\n            label=label,\n            closed=closed,\n            axis=axis,\n            kind=kind,\n            convention=convention,\n            key=on,\n            level=level,\n            origin=origin,\n            offset=offset,\n            group_keys=group_keys,\n        )\n\n    @final\n    def first(self: NDFrameT, offset) -> NDFrameT:\n        \"\"\"\n        Select initial periods of time series data based on a date offset.\n\n        When having a DataFrame with dates as index, this function can\n        select the first few rows based on a date offset.\n\n        Parameters\n        ----------\n        offset : str, DateOffset or dateutil.relativedelta\n            The offset length of the data that will be selected. For instance,\n            '1M' will display all the rows having their index within the first month.\n\n        Returns\n        -------\n        Series or DataFrame\n            A subset of the caller.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        last : Select final periods of time series based on a date offset.\n        at_time : Select values at a particular time of the day.\n        between_time : Select values between particular times of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n        >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n        >>> ts\n                    A\n        2018-04-09  1\n        2018-04-11  2\n        2018-04-13  3\n        2018-04-15  4\n\n        Get the rows for the first 3 days:\n\n        >>> ts.first('3D')\n                    A\n        2018-04-09  1\n        2018-04-11  2\n\n        Notice the data for 3 first calendar days were returned, not the first\n        3 days observed in the dataset, and therefore data for 2018-04-13 was\n        not returned.\n        \"\"\"\n        if not isinstance(self.index, DatetimeIndex):\n            raise TypeError(\"'first' only supports a DatetimeIndex index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n        if not isinstance(offset, Tick) and offset.is_on_offset(self.index[0]):\n            # GH#29623 if first value is end of period, remove offset with n = 1\n            #  before adding the real offset\n            end_date = end = self.index[0] - offset.base + offset\n        else:\n            end_date = end = self.index[0] + offset\n\n        # Tick-like, e.g. 3 weeks\n        if isinstance(offset, Tick) and end_date in self.index:\n            end = self.index.searchsorted(end_date, side=\"left\")\n            return self.iloc[:end]\n\n        return self.loc[:end]\n\n    @final\n    def last(self: NDFrameT, offset) -> NDFrameT:\n        \"\"\"\n        Select final periods of time series data based on a date offset.\n\n        For a DataFrame with a sorted DatetimeIndex, this function\n        selects the last few rows based on a date offset.\n\n        Parameters\n        ----------\n        offset : str, DateOffset, dateutil.relativedelta\n            The offset length of the data that will be selected. For instance,\n            '3D' will display all the rows having their index within the last 3 days.\n\n        Returns\n        -------\n        Series or DataFrame\n            A subset of the caller.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        first : Select initial periods of time series based on a date offset.\n        at_time : Select values at a particular time of the day.\n        between_time : Select values between particular times of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n        >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n        >>> ts\n                    A\n        2018-04-09  1\n        2018-04-11  2\n        2018-04-13  3\n        2018-04-15  4\n\n        Get the rows for the last 3 days:\n\n        >>> ts.last('3D')\n                    A\n        2018-04-13  3\n        2018-04-15  4\n\n        Notice the data for 3 last calendar days were returned, not the last\n        3 observed days in the dataset, and therefore data for 2018-04-11 was\n        not returned.\n        \"\"\"\n        if not isinstance(self.index, DatetimeIndex):\n            raise TypeError(\"'last' only supports a DatetimeIndex index\")\n\n        if len(self.index) == 0:\n            return self\n\n        offset = to_offset(offset)\n\n        start_date = self.index[-1] - offset\n        start = self.index.searchsorted(start_date, side=\"right\")\n        return self.iloc[start:]\n\n    @final\n    def rank(\n        self: NDFrameT,\n        axis: Axis = 0,\n        method: str = \"average\",\n        numeric_only: bool_t | None | lib.NoDefault = lib.no_default,\n        na_option: str = \"keep\",\n        ascending: bool_t = True,\n        pct: bool_t = False,\n    ) -> NDFrameT:\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis.\n\n        By default, equal values are assigned a rank that is the average of the\n        ranks of those values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Index to direct ranking.\n            For `Series` this parameter is unused and defaults to 0.\n        method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n            How to rank the group of records that have the same value (i.e. ties):\n\n            * average: average rank of the group\n            * min: lowest rank in the group\n            * max: highest rank in the group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups.\n\n        numeric_only : bool, optional\n            For DataFrame objects, rank only numeric columns if set to True.\n        na_option : {'keep', 'top', 'bottom'}, default 'keep'\n            How to rank NaN values:\n\n            * keep: assign NaN rank to NaN values\n            * top: assign lowest rank to NaN values\n            * bottom: assign highest rank to NaN values\n\n        ascending : bool, default True\n            Whether or not the elements should be ranked in ascending order.\n        pct : bool, default False\n            Whether or not to display the returned rankings in percentile\n            form.\n\n        Returns\n        -------\n        same type as caller\n            Return a Series or DataFrame with data ranks as values.\n\n        See Also\n        --------\n        core.groupby.DataFrameGroupBy.rank : Rank of values within each group.\n        core.groupby.SeriesGroupBy.rank : Rank of values within each group.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n        ...                                    'spider', 'snake'],\n        ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n        >>> df\n            Animal  Number_legs\n        0      cat          4.0\n        1  penguin          2.0\n        2      dog          4.0\n        3   spider          8.0\n        4    snake          NaN\n\n        Ties are assigned the mean of the ranks (by default) for the group.\n\n        >>> s = pd.Series(range(5), index=list(\"abcde\"))\n        >>> s[\"d\"] = s[\"b\"]\n        >>> s.rank()\n        a    1.0\n        b    2.5\n        c    4.0\n        d    2.5\n        e    5.0\n        dtype: float64\n\n        The following example shows how the method behaves with the above\n        parameters:\n\n        * default_rank: this is the default behaviour obtained without using\n          any parameter.\n        * max_rank: setting ``method = 'max'`` the records that have the\n          same values are ranked using the highest rank (e.g.: since 'cat'\n          and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n        * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n          with NaN values they are placed at the bottom of the ranking.\n        * pct_rank: when setting ``pct = True``, the ranking is expressed as\n          percentile rank.\n\n        >>> df['default_rank'] = df['Number_legs'].rank()\n        >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n        >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n        >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n        >>> df\n            Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n        0      cat          4.0           2.5       3.0        2.5     0.625\n        1  penguin          2.0           1.0       1.0        1.0     0.250\n        2      dog          4.0           2.5       3.0        2.5     0.625\n        3   spider          8.0           4.0       4.0        4.0     1.000\n        4    snake          NaN           NaN       NaN        5.0       NaN\n        \"\"\"\n        warned = False\n        if numeric_only is None:\n            # GH#45036\n            warnings.warn(\n                f\"'numeric_only=None' in {type(self).__name__}.rank is deprecated \"\n                \"and will raise in a future version. Pass either 'True' or \"\n                \"'False'. 'False' will be the default.\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n            warned = True\n        elif numeric_only is lib.no_default:\n            numeric_only = None\n\n        axis_int = self._get_axis_number(axis)\n\n        if na_option not in {\"keep\", \"top\", \"bottom\"}:\n            msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n            raise ValueError(msg)\n\n        def ranker(data):\n            if data.ndim == 2:\n                # i.e. DataFrame, we cast to ndarray\n                values = data.values\n            else:\n                # i.e. Series, can dispatch to EA\n                values = data._values\n\n            if isinstance(values, ExtensionArray):\n                ranks = values._rank(\n                    axis=axis_int,\n                    method=method,\n                    ascending=ascending,\n                    na_option=na_option,\n                    pct=pct,\n                )\n            else:\n                ranks = algos.rank(\n                    values,\n                    axis=axis_int,\n                    method=method,\n                    ascending=ascending,\n                    na_option=na_option,\n                    pct=pct,\n                )\n\n            ranks_obj = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks_obj.__finalize__(self, method=\"rank\")\n\n        # if numeric_only is None, and we can't get anything, we try with\n        # numeric_only=True\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n                if not warned:\n                    # Only warn here if we didn't already issue a warning above\n                    # GH#45036\n                    warnings.warn(\n                        f\"Dropping of nuisance columns in {type(self).__name__}.rank \"\n                        \"is deprecated; in a future version this will raise TypeError. \"\n                        \"Select only valid columns before calling rank.\",\n                        FutureWarning,\n                        stacklevel=find_stack_level(),\n                    )\n\n        if numeric_only:\n            if self.ndim == 1 and not is_numeric_dtype(self.dtype):\n                # GH#47500\n                warnings.warn(\n                    f\"Calling Series.rank with numeric_only={numeric_only} and dtype \"\n                    f\"{self.dtype} is deprecated and will raise a TypeError in a \"\n                    \"future version of pandas\",\n                    category=FutureWarning,\n                    stacklevel=find_stack_level(),\n                )\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)\n\n    @doc(_shared_docs[\"compare\"], klass=_shared_doc_kwargs[\"klass\"])\n    def compare(\n        self,\n        other,\n        align_axis: Axis = 1,\n        keep_shape: bool_t = False,\n        keep_equal: bool_t = False,\n        result_names: Suffixes = (\"self\", \"other\"),\n    ):\n        if type(self) is not type(other):\n            cls_self, cls_other = type(self).__name__, type(other).__name__\n            raise TypeError(\n                f\"can only compare '{cls_self}' (not '{cls_other}') with '{cls_self}'\"\n            )\n\n        mask = ~((self == other) | (self.isna() & other.isna()))\n        mask.fillna(True, inplace=True)\n\n        if not keep_equal:\n            self = self.where(mask)\n            other = other.where(mask)\n\n        if not keep_shape:\n            if isinstance(self, ABCDataFrame):\n                cmask = mask.any()\n                rmask = mask.any(axis=1)\n                self = self.loc[rmask, cmask]\n                other = other.loc[rmask, cmask]\n            else:\n                self = self[mask]\n                other = other[mask]\n        if not isinstance(result_names, tuple):\n            raise TypeError(\n                f\"Passing 'result_names' as a {type(result_names)} is not \"\n                \"supported. Provide 'result_names' as a tuple instead.\"\n            )\n\n        if align_axis in (1, \"columns\"):  # This is needed for Series\n            axis = 1\n        else:\n            axis = self._get_axis_number(align_axis)\n\n        diff = concat([self, other], axis=axis, keys=result_names)\n\n        if axis >= self.ndim:\n            # No need to reorganize data if stacking on new axis\n            # This currently applies for stacking two Series on columns\n            return diff\n\n        ax = diff._get_axis(axis)\n        ax_names = np.array(ax.names)\n\n        # set index names to positions to avoid confusion\n        ax.names = np.arange(len(ax_names))\n\n        # bring self-other to inner level\n        order = list(range(1, ax.nlevels)) + [0]\n        if isinstance(diff, ABCDataFrame):\n            diff = diff.reorder_levels(order, axis=axis)\n        else:\n            diff = diff.reorder_levels(order)\n\n        # restore the index names in order\n        diff._get_axis(axis=axis).names = ax_names[order]\n\n        # reorder axis to keep things organized\n        indices = (\n            np.arange(diff.shape[axis]).reshape([2, diff.shape[axis] // 2]).T.flatten()\n        )\n        diff = diff.take(indices, axis=axis)\n\n        return diff\n\n    @doc(**_shared_doc_kwargs)\n    def align(\n        self: NDFrameT,\n        other: NDFrameT,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level: Level = None,\n        copy: bool_t = True,\n        fill_value: Hashable = None,\n        method: FillnaOptions | None = None,\n        limit: int | None = None,\n        fill_axis: Axis = 0,\n        broadcast_axis: Axis | None = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Align two objects on their axes with the specified join method.\n\n        Join method is specified for each axis Index.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {{'outer', 'inner', 'left', 'right'}}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None).\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        copy : bool, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        method : {{'backfill', 'bfill', 'pad', 'ffill', None}}, default None\n            Method to use for filling holes in reindexed Series:\n\n            - pad / ffill: propagate last valid observation forward to next valid.\n            - backfill / bfill: use NEXT valid observation to fill gap.\n\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        fill_axis : {axes_single_arg}, default 0\n            Filling axis, method and limit.\n        broadcast_axis : {axes_single_arg}, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions.\n\n        Returns\n        -------\n        (left, right) : ({klass}, type of other)\n            Aligned objects.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n        ... )\n        >>> other = pd.DataFrame(\n        ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n        ...     columns=[\"A\", \"B\", \"C\", \"D\"],\n        ...     index=[2, 3, 4],\n        ... )\n        >>> df\n           D  B  E  A\n        1  1  2  3  4\n        2  6  7  8  9\n        >>> other\n            A    B    C    D\n        2   10   20   30   40\n        3   60   70   80   90\n        4  600  700  800  900\n\n        Align on columns:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=1)\n        >>> left\n           A  B   C  D  E\n        1  4  2 NaN  1  3\n        2  9  7 NaN  6  8\n        >>> right\n            A    B    C    D   E\n        2   10   20   30   40 NaN\n        3   60   70   80   90 NaN\n        4  600  700  800  900 NaN\n\n        We can also align on the index:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=0)\n        >>> left\n            D    B    E    A\n        1  1.0  2.0  3.0  4.0\n        2  6.0  7.0  8.0  9.0\n        3  NaN  NaN  NaN  NaN\n        4  NaN  NaN  NaN  NaN\n        >>> right\n            A      B      C      D\n        1    NaN    NaN    NaN    NaN\n        2   10.0   20.0   30.0   40.0\n        3   60.0   70.0   80.0   90.0\n        4  600.0  700.0  800.0  900.0\n\n        Finally, the default `axis=None` will align on both index and columns:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=None)\n        >>> left\n             A    B   C    D    E\n        1  4.0  2.0 NaN  1.0  3.0\n        2  9.0  7.0 NaN  6.0  8.0\n        3  NaN  NaN NaN  NaN  NaN\n        4  NaN  NaN NaN  NaN  NaN\n        >>> right\n               A      B      C      D   E\n        1    NaN    NaN    NaN    NaN NaN\n        2   10.0   20.0   30.0   40.0 NaN\n        3   60.0   70.0   80.0   90.0 NaN\n        4  600.0  700.0  800.0  900.0 NaN\n        \"\"\"\n\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, ABCSeries):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons(\n                    {c: self for c in other.columns}, **other._construct_axes_dict()\n                )\n                return df._align_frame(\n                    other,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n            elif isinstance(other, ABCSeries):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons(\n                    {c: other for c in self.columns}, **self._construct_axes_dict()\n                )\n                return self._align_frame(\n                    df,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, ABCDataFrame):\n            return self._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            return self._align_series(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")\n\n    @final\n    def _align_frame(\n        self,\n        other,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis: Axis = 0,\n    ):\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if (axis is None or axis == 0) and not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n        if (\n            (axis is None or axis == 1)\n            and not is_series\n            and not self.columns.equals(other.columns)\n        ):\n            join_columns, clidx, cridx = self.columns.join(\n                other.columns, how=join, level=level, return_indexers=True\n            )\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(\n            reindexers, copy=copy, fill_value=fill_value, allow_dups=True\n        )\n        # other must be always DataFrame\n        right = other._reindex_with_indexers(\n            {0: [join_index, iridx], 1: [join_columns, cridx]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=True,\n        )\n\n        if method is not None:\n            _left = left.fillna(method=method, axis=fill_axis, limit=limit)\n            assert _left is not None  # needed for mypy\n            left = _left\n            right = right.fillna(method=method, axis=fill_axis, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        left, right = _align_as_utc(left, right, join_index)\n\n        return (\n            left.__finalize__(self),\n            right.__finalize__(other),\n        )\n\n    @final\n    def _align_series(\n        self,\n        other,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level=None,\n        copy: bool_t = True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis: Axis = 0,\n    ):\n\n        is_series = isinstance(self, ABCSeries)\n\n        if (not is_series and axis is None) or axis not in [None, 0, 1]:\n            raise ValueError(\"Must specify axis=0 or 1\")\n\n        if is_series and axis == 1:\n            raise ValueError(\"cannot align series to a series other than axis 0\")\n\n        # series/series compat, other must always be a Series\n        if not axis:\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if is_series:\n                left = self._reindex_indexer(join_index, lidx, copy)\n            elif lidx is None or join_index is None:\n                left = self.copy() if copy else self\n            else:\n                left = self._constructor(\n                    self._mgr.reindex_indexer(join_index, lidx, axis=1, copy=copy)\n                )\n\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n\n            # one has > 1 ndim\n            fdata = self._mgr\n            join_index = self.axes[1]\n            lidx, ridx = None, None\n            if not join_index.equals(other.index):\n                join_index, lidx, ridx = join_index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                bm_axis = self._get_block_manager_axis(1)\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=bm_axis)\n\n            if copy and fdata is self._mgr:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            left, right = _align_as_utc(left, right, join_index)\n\n        return (\n            left.__finalize__(self),\n            right.__finalize__(other),\n        )\n\n    @final\n    def _where(\n        self,\n        cond,\n        other=lib.no_default,\n        inplace: bool_t = False,\n        axis: Axis | None = None,\n        level=None,\n    ):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # align the cond to same shape as myself\n        cond = com.apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join=\"right\", broadcast_axis=1, copy=False)\n        else:\n            if not hasattr(cond, \"shape\"):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError(\"Array conditional must be same shape as self\")\n            cond = self._constructor(cond, **self._construct_axes_dict())\n\n        # make sure we are boolean\n        fill_value = bool(inplace)\n        cond = cond.fillna(fill_value)\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not cond.empty:\n            if not isinstance(cond, ABCDataFrame):\n                # This is a single-dimensional object.\n                if not is_bool_dtype(cond):\n                    raise ValueError(msg.format(dtype=cond.dtype))\n            else:\n                for dt in cond.dtypes:\n                    if not is_bool_dtype(dt):\n                        raise ValueError(msg.format(dtype=dt))\n        else:\n            # GH#21947 we have an empty DataFrame/Series, could be object-dtype\n            cond = cond.astype(bool)\n\n        cond = -cond if inplace else cond\n        cond = cond.reindex(self._info_axis, axis=self._info_axis_number, copy=False)\n\n        # try to align with other\n        if isinstance(other, NDFrame):\n\n            # align with me\n            if other.ndim <= self.ndim:\n\n                _, other = self.align(\n                    other,\n                    join=\"left\",\n                    axis=axis,\n                    level=level,\n                    fill_value=None,\n                    copy=False,\n                )\n\n                # if we are NOT aligned, raise as we cannot where index\n                if axis is None and not other._indexed_same(self):\n                    raise InvalidIndexError\n\n                if other.ndim < self.ndim:\n                    # TODO(EA2D): avoid object-dtype cast in EA case GH#38729\n                    other = other._values\n                    if axis == 0:\n                        other = np.reshape(other, (-1, 1))\n                    elif axis == 1:\n                        other = np.reshape(other, (1, -1))\n\n                    other = np.broadcast_to(other, self.shape)\n\n            # slice me out of the other\n            else:\n                raise NotImplementedError(\n                    \"cannot align with a higher dimensional NDFrame\"\n                )\n\n        elif not isinstance(other, (MultiIndex, NDFrame)):\n            # mainly just catching Index here\n            other = extract_array(other, extract_numpy=True)\n\n        if isinstance(other, (np.ndarray, ExtensionArray)):\n\n            if other.shape != self.shape:\n                if self.ndim != 1:\n                    # In the ndim == 1 case we may have\n                    #  other length 1, which we treat as scalar (GH#2745, GH#4192)\n                    #  or len(other) == icond.sum(), which we treat like\n                    #  __setitem__ (GH#3235)\n                    raise ValueError(\n                        \"other must be the same shape as self when an ndarray\"\n                    )\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, \"ndim\", 0):\n            align = True\n        else:\n            align = self._get_axis_number(axis) == 1\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            self._check_inplace_setting(other)\n            new_data = self._mgr.putmask(mask=cond, new=other, align=align)\n            result = self._constructor(new_data)\n            return self._update_inplace(result)\n\n        else:\n            new_data = self._mgr.where(\n                other=other,\n                cond=cond,\n                align=align,\n            )\n            result = self._constructor(new_data)\n            return result.__finalize__(self)\n\n    @overload\n    def where(\n        self: NDFrameT,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def where(\n        self: NDFrameT,\n        cond,\n        other=...,\n        *,\n        inplace: bool_t = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        cond=\"True\",\n        cond_rev=\"False\",\n        name=\"where\",\n        name_other=\"mask\",\n    )\n    def where(\n        self: NDFrameT,\n        cond,\n        other=np.nan,\n        *,\n        inplace: bool_t = False,\n        axis: Axis | None = None,\n        level: Level = None,\n    ) -> NDFrameT | None:\n        \"\"\"\n        Replace values where the condition is {cond_rev}.\n\n        Parameters\n        ----------\n        cond : bool {klass}, array-like, or callable\n            Where `cond` is {cond}, keep the original value. Where\n            {cond_rev}, replace with corresponding value from `other`.\n            If `cond` is callable, it is computed on the {klass} and\n            should return boolean {klass} or array. The callable must\n            not change input {klass} (though pandas doesn't check it).\n        other : scalar, {klass}, or callable\n            Entries where `cond` is {cond_rev} are replaced with\n            corresponding value from `other`.\n            If other is callable, it is computed on the {klass} and\n            should return scalar or {klass}. The callable must not\n            change input {klass} (though pandas doesn't check it).\n            If not specified, entries will be filled with the corresponding\n            NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n            dtypes).\n        inplace : bool, default False\n            Whether to perform the operation in place on the data.\n        axis : int, default None\n            Alignment axis if needed. For `Series` this parameter is\n            unused and defaults to 0.\n        level : int, default None\n            Alignment level if needed.\n\n        Returns\n        -------\n        Same type as caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        :func:`DataFrame.{name_other}` : Return an object of same shape as\n            self.\n\n        Notes\n        -----\n        The {name} method is an application of the if-then idiom. For each\n        element in the calling DataFrame, if ``cond`` is ``{cond}`` the\n        element is used; otherwise the corresponding element from the DataFrame\n        ``other`` is used. If the axis of ``other`` does not align with axis of\n        ``cond`` {klass}, the misaligned index positions will be filled with\n        {cond_rev}.\n\n        The signature for :func:`DataFrame.where` differs from\n        :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n        ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``{name}`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        The dtype of the object takes precedence. The fill value is casted to\n        the object's dtype, if this can be done losslessly.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n        dtype: float64\n        >>> s.mask(s > 0)\n        0    0.0\n        1    NaN\n        2    NaN\n        3    NaN\n        4    NaN\n        dtype: float64\n\n        >>> s = pd.Series(range(5))\n        >>> t = pd.Series([True, False])\n        >>> s.where(t, 99)\n        0     0\n        1    99\n        2    99\n        3    99\n        4    99\n        dtype: int64\n        >>> s.mask(t, 99)\n        0    99\n        1     1\n        2    99\n        3    99\n        4    99\n        dtype: int64\n\n        >>> s.where(s > 1, 10)\n        0    10\n        1    10\n        2    2\n        3    3\n        4    4\n        dtype: int64\n        >>> s.mask(s > 1, 10)\n        0     0\n        1     1\n        2    10\n        3    10\n        4    10\n        dtype: int64\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n        >>> df\n           A  B\n        0  0  1\n        1  2  3\n        2  4  5\n        3  6  7\n        4  8  9\n        >>> m = df % 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        \"\"\"\n        other = com.apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level)\n\n    @overload\n    def mask(\n        self: NDFrameT,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> NDFrameT:\n        ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> None:\n        ...\n\n    @overload\n    def mask(\n        self: NDFrameT,\n        cond,\n        other=...,\n        *,\n        inplace: bool_t = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> NDFrameT | None:\n        ...\n\n    @doc(\n        where,\n        klass=_shared_doc_kwargs[\"klass\"],\n        cond=\"False\",\n        cond_rev=\"True\",\n        name=\"mask\",\n        name_other=\"where\",\n    )\n    def mask(\n        self: NDFrameT,\n        cond,\n        other=lib.no_default,\n        *,\n        inplace: bool_t = False,\n        axis: Axis | None = None,\n        level: Level = None,\n    ) -> NDFrameT | None:\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        cond = com.apply_if_callable(cond, self)\n\n        # see gh-21891\n        if not hasattr(cond, \"__invert__\"):\n            cond = np.array(cond)\n\n        return self.where(\n            ~cond,\n            other=other,\n            inplace=inplace,\n            axis=axis,\n            level=level,\n        )\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def shift(\n        self: NDFrameT,\n        periods: int = 1,\n        freq=None,\n        axis: Axis = 0,\n        fill_value: Hashable = None,\n    ) -> NDFrameT:\n        \"\"\"\n        Shift index by desired number of periods with an optional time `freq`.\n\n        When `freq` is not passed, shift the index without realigning the data.\n        If `freq` is passed (in this case, the index must be date or datetime,\n        or it will raise a `NotImplementedError`), the index will be\n        increased using the periods and the `freq`. `freq` can be inferred\n        when specified as \"infer\" as long as either freq or inferred_freq\n        attribute is set in the index.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to shift. Can be positive or negative.\n        freq : DateOffset, tseries.offsets, timedelta, or str, optional\n            Offset to use from the tseries module or time rule (e.g. 'EOM').\n            If `freq` is specified then the index values are shifted but the\n            data is not realigned. That is, use `freq` if you would like to\n            extend the index when shifting and preserve the original data.\n            If `freq` is specified as \"infer\" then it will be inferred from\n            the freq or inferred_freq attributes of the index. If neither of\n            those attributes exist, a ValueError is thrown.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Shift direction. For `Series` this parameter is unused and defaults to 0.\n        fill_value : object, optional\n            The scalar value to use for newly introduced missing values.\n            the default depends on the dtype of `self`.\n            For numeric data, ``np.nan`` is used.\n            For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n            For extension dtypes, ``self.dtype.na_value`` is used.\n\n            .. versionchanged:: 1.1.0\n\n        Returns\n        -------\n        {klass}\n            Copy of input object, shifted.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        DatetimeIndex.shift : Shift values of DatetimeIndex.\n        PeriodIndex.shift : Shift values of PeriodIndex.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({{\"Col1\": [10, 20, 15, 30, 45],\n        ...                    \"Col2\": [13, 23, 18, 33, 48],\n        ...                    \"Col3\": [17, 27, 22, 37, 52]}},\n        ...                   index=pd.date_range(\"2020-01-01\", \"2020-01-05\"))\n        >>> df\n                    Col1  Col2  Col3\n        2020-01-01    10    13    17\n        2020-01-02    20    23    27\n        2020-01-03    15    18    22\n        2020-01-04    30    33    37\n        2020-01-05    45    48    52\n\n        >>> df.shift(periods=3)\n                    Col1  Col2  Col3\n        2020-01-01   NaN   NaN   NaN\n        2020-01-02   NaN   NaN   NaN\n        2020-01-03   NaN   NaN   NaN\n        2020-01-04  10.0  13.0  17.0\n        2020-01-05  20.0  23.0  27.0\n\n        >>> df.shift(periods=1, axis=\"columns\")\n                    Col1  Col2  Col3\n        2020-01-01   NaN    10    13\n        2020-01-02   NaN    20    23\n        2020-01-03   NaN    15    18\n        2020-01-04   NaN    30    33\n        2020-01-05   NaN    45    48\n\n        >>> df.shift(periods=3, fill_value=0)\n                    Col1  Col2  Col3\n        2020-01-01     0     0     0\n        2020-01-02     0     0     0\n        2020-01-03     0     0     0\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n\n        >>> df.shift(periods=3, freq=\"D\")\n                    Col1  Col2  Col3\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n        2020-01-06    15    18    22\n        2020-01-07    30    33    37\n        2020-01-08    45    48    52\n\n        >>> df.shift(periods=3, freq=\"infer\")\n                    Col1  Col2  Col3\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n        2020-01-06    15    18    22\n        2020-01-07    30    33    37\n        2020-01-08    45    48    52\n        \"\"\"\n        if periods == 0:\n            return self.copy()\n\n        if freq is None:\n            # when freq is None, data is shifted, index is not\n            axis = self._get_axis_number(axis)\n            new_data = self._mgr.shift(\n                periods=periods, axis=axis, fill_value=fill_value\n            )\n            return self._constructor(new_data).__finalize__(self, method=\"shift\")\n\n        # when freq is given, index is shifted, data is not\n        index = self._get_axis(axis)\n\n        if freq == \"infer\":\n            freq = getattr(index, \"freq\", None)\n\n            if freq is None:\n                freq = getattr(index, \"inferred_freq\", None)\n\n            if freq is None:\n                msg = \"Freq was not set in the index hence cannot be inferred\"\n                raise ValueError(msg)\n\n        elif isinstance(freq, str):\n            freq = to_offset(freq)\n\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq != orig_freq:\n                assert orig_freq is not None  # for mypy\n                raise ValueError(\n                    f\"Given freq {freq.rule_code} does not match \"\n                    f\"PeriodIndex freq {orig_freq.rule_code}\"\n                )\n            new_ax = index.shift(periods)\n        else:\n            new_ax = index.shift(periods, freq)\n\n        result = self.set_axis(new_ax, axis=axis)\n        return result.__finalize__(self, method=\"shift\")\n\n    def truncate(\n        self: NDFrameT,\n        before=None,\n        after=None,\n        axis: Axis | None = None,\n        copy: bool_t = True,\n    ) -> NDFrameT:\n        \"\"\"\n        Truncate a Series or DataFrame before and after some index value.\n\n        This is a useful shorthand for boolean indexing based on index\n        values above or below certain thresholds.\n\n        Parameters\n        ----------\n        before : date, str, int\n            Truncate all rows before this index value.\n        after : date, str, int\n            Truncate all rows after this index value.\n        axis : {0 or 'index', 1 or 'columns'}, optional\n            Axis to truncate. Truncates the index (rows) by default.\n            For `Series` this parameter is unused and defaults to 0.\n        copy : bool, default is True,\n            Return a copy of the truncated section.\n\n        Returns\n        -------\n        type of caller\n            The truncated Series or DataFrame.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by label.\n        DataFrame.iloc : Select a subset of a DataFrame by position.\n\n        Notes\n        -----\n        If the index being truncated contains only datetime values,\n        `before` and `after` may be specified as strings instead of\n        Timestamps.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n        ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n        ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n        ...                   index=[1, 2, 3, 4, 5])\n        >>> df\n           A  B  C\n        1  a  f  k\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n        5  e  j  o\n\n        >>> df.truncate(before=2, after=4)\n           A  B  C\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n\n        The columns of a DataFrame can be truncated.\n\n        >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n           A  B\n        1  a  f\n        2  b  g\n        3  c  h\n        4  d  i\n        5  e  j\n\n        For Series, only rows can be truncated.\n\n        >>> df['A'].truncate(before=2, after=4)\n        2    b\n        3    c\n        4    d\n        Name: A, dtype: object\n\n        The index values in ``truncate`` can be datetimes or string\n        dates.\n\n        >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n        >>> df = pd.DataFrame(index=dates, data={'A': 1})\n        >>> df.tail()\n                             A\n        2016-01-31 23:59:56  1\n        2016-01-31 23:59:57  1\n        2016-01-31 23:59:58  1\n        2016-01-31 23:59:59  1\n        2016-02-01 00:00:00  1\n\n        >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n        ...             after=pd.Timestamp('2016-01-10')).tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Because the index is a DatetimeIndex containing only dates, we can\n        specify `before` and `after` as strings. They will be coerced to\n        Timestamps before truncation.\n\n        >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Note that ``truncate`` assumes a 0 value for any unspecified time\n        component (midnight). This differs from partial string slicing, which\n        returns any partially matching dates.\n\n        >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                             A\n        2016-01-10 23:59:55  1\n        2016-01-10 23:59:56  1\n        2016-01-10 23:59:57  1\n        2016-01-10 23:59:58  1\n        2016-01-10 23:59:59  1\n        \"\"\"\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # GH 17935\n        # Check that index is sorted\n        if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n            raise ValueError(\"truncate requires a sorted index\")\n\n        # if we have a date index, convert to dates, otherwise\n        # treat like a slice\n        if ax._is_all_dates:\n            from pandas.core.tools.datetimes import to_datetime\n\n            before = to_datetime(before)\n            after = to_datetime(after)\n\n        if before is not None and after is not None and before > after:\n            raise ValueError(f\"Truncate: {after} must be after {before}\")\n\n        if len(ax) > 1 and ax.is_monotonic_decreasing and ax.nunique() > 1:\n            before, after = after, before\n\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n\n        if copy:\n            result = result.copy()\n\n        return result\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def tz_convert(\n        self: NDFrameT, tz, axis: Axis = 0, level=None, copy: bool_t = True\n    ) -> NDFrameT:\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : str or tzinfo object\n        axis : the axis to convert\n        level : int, str, default None\n            If axis is a MultiIndex, convert a specific level. Otherwise\n            must be None.\n        copy : bool, default True\n            Also make a copy of the underlying data.\n\n        Returns\n        -------\n        {klass}\n            Object with time zone converted axis.\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, \"tz_convert\"):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                    )\n                ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(f\"The level {level} is not valid\")\n            ax = _tz_convert(ax, tz)\n\n        result = self.copy(deep=copy)\n        result = result.set_axis(ax, axis=axis, copy=False)\n        return result.__finalize__(self, method=\"tz_convert\")\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def tz_localize(\n        self: NDFrameT,\n        tz,\n        axis: Axis = 0,\n        level=None,\n        copy: bool_t = True,\n        ambiguous: TimeAmbiguous = \"raise\",\n        nonexistent: TimeNonexistent = \"raise\",\n    ) -> NDFrameT:\n        \"\"\"\n        Localize tz-naive index of a Series or DataFrame to target time zone.\n\n        This operation localizes the Index. To localize the values in a\n        timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\n        Parameters\n        ----------\n        tz : str or tzinfo\n        axis : the axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None.\n        copy : bool, default True\n            Also make a copy of the underlying data.\n        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n        nonexistent : str, default 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST. Valid values are:\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n        Returns\n        -------\n        {klass}\n            Same type as the input.\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n\n        Examples\n        --------\n        Localize local times:\n\n        >>> s = pd.Series([1],\n        ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n        >>> s.tz_localize('CET')\n        2018-09-15 01:30:00+02:00    1\n        dtype: int64\n\n        Be careful with DST changes. When there is sequential data, pandas\n        can infer the DST time:\n\n        >>> s = pd.Series(range(7),\n        ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n        ...                                       '2018-10-28 02:00:00',\n        ...                                       '2018-10-28 02:30:00',\n        ...                                       '2018-10-28 02:00:00',\n        ...                                       '2018-10-28 02:30:00',\n        ...                                       '2018-10-28 03:00:00',\n        ...                                       '2018-10-28 03:30:00']))\n        >>> s.tz_localize('CET', ambiguous='infer')\n        2018-10-28 01:30:00+02:00    0\n        2018-10-28 02:00:00+02:00    1\n        2018-10-28 02:30:00+02:00    2\n        2018-10-28 02:00:00+01:00    3\n        2018-10-28 02:30:00+01:00    4\n        2018-10-28 03:00:00+01:00    5\n        2018-10-28 03:30:00+01:00    6\n        dtype: int64\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.Series(range(3),\n        ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n        ...                                       '2018-10-28 02:36:00',\n        ...                                       '2018-10-28 03:46:00']))\n        >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        2018-10-28 01:20:00+02:00    0\n        2018-10-28 02:36:00+02:00    1\n        2018-10-28 03:46:00+01:00    2\n        dtype: int64\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backward with a timedelta object or `'shift_forward'`\n        or `'shift_backward'`.\n\n        >>> s = pd.Series(range(2),\n        ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n        ...                                       '2015-03-29 03:30:00']))\n        >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        2015-03-29 03:00:00+02:00    0\n        2015-03-29 03:30:00+02:00    1\n        dtype: int64\n        >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        2015-03-29 01:59:59.999999999+01:00    0\n        2015-03-29 03:30:00+02:00              1\n        dtype: int64\n        >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        2015-03-29 03:30:00+02:00    0\n        2015-03-29 03:30:00+02:00    1\n        dtype: int64\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous, nonexistent):\n            if not hasattr(ax, \"tz_localize\"):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                    )\n                ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(f\"The level {level} is not valid\")\n            ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n\n        result = self.copy(deep=copy)\n        result = result.set_axis(ax, axis=axis, copy=False)\n        return result.__finalize__(self, method=\"tz_localize\")\n\n    # ----------------------------------------------------------------------\n    # Numeric Methods\n\n    @final\n    def describe(\n        self: NDFrameT,\n        percentiles=None,\n        include=None,\n        exclude=None,\n    ) -> NDFrameT:\n        \"\"\"\n        Generate descriptive statistics.\n\n        Descriptive statistics include those that summarize the central\n        tendency, dispersion and shape of a\n        dataset's distribution, excluding ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        Series or DataFrame\n            Summary statistics of the Series or Dataframe provided.\n\n        See Also\n        --------\n        DataFrame.count: Count number of non-NA/null observations.\n        DataFrame.max: Maximum of the values in the object.\n        DataFrame.min: Minimum of the values in the object.\n        DataFrame.mean: Mean of the values.\n        DataFrame.std: Standard deviation of the observations.\n        DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n            columns based on their dtype.\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the dataframe consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        dtype: float64\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                      3\n        mean     2006-09-01 08:00:00\n        min      2000-01-01 00:00:00\n        25%      2004-12-31 12:00:00\n        50%      2010-01-01 00:00:00\n        75%      2010-01-01 00:00:00\n        max      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n        ...                    'numeric': [1, 2, 3],\n        ...                    'object': ['a', 'b', 'c']\n        ...                   })\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')  # doctest: +SKIP\n               categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      a\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[object])  # doctest: +SKIP\n               object\n        count       3\n        unique      3\n        top         a\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=['category'])\n               categorical\n        count            3\n        unique           3\n        top              d\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])  # doctest: +SKIP\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      a\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[object])  # doctest: +SKIP\n               categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n        \"\"\"\n        return describe_ndframe(\n            obj=self,\n            include=include,\n            exclude=exclude,\n            percentiles=percentiles,\n        )\n\n    @final\n    def pct_change(\n        self: NDFrameT,\n        periods: int = 1,\n        fill_method: Literal[\"backfill\", \"bfill\", \"pad\", \"ffill\"] = \"pad\",\n        limit=None,\n        freq=None,\n        **kwargs,\n    ) -> NDFrameT:\n        \"\"\"\n        Percentage change between the current and a prior element.\n\n        Computes the percentage change from the immediately previous row by\n        default. This is useful in comparing the percentage of change in a time\n        series of elements.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change.\n        fill_method : str, default 'pad'\n            How to handle NAs **before** computing percent changes.\n        limit : int, default None\n            The number of consecutive NAs to fill before stopping.\n        freq : DateOffset, timedelta, or str, optional\n            Increment to use from time series API (e.g. 'M' or BDay()).\n        **kwargs\n            Additional keyword arguments are passed into\n            `DataFrame.shift` or `Series.shift`.\n\n        Returns\n        -------\n        chg : Series or DataFrame\n            The same type as the calling object.\n\n        See Also\n        --------\n        Series.diff : Compute the difference of two elements in a Series.\n        DataFrame.diff : Compute the difference of two elements in a DataFrame.\n        Series.shift : Shift the index by some number of periods.\n        DataFrame.shift : Shift the index by some number of periods.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([90, 91, 85])\n        >>> s\n        0    90\n        1    91\n        2    85\n        dtype: int64\n\n        >>> s.pct_change()\n        0         NaN\n        1    0.011111\n        2   -0.065934\n        dtype: float64\n\n        >>> s.pct_change(periods=2)\n        0         NaN\n        1         NaN\n        2   -0.055556\n        dtype: float64\n\n        See the percentage change in a Series where filling NAs with last\n        valid observation forward to next valid.\n\n        >>> s = pd.Series([90, 91, None, 85])\n        >>> s\n        0    90.0\n        1    91.0\n        2     NaN\n        3    85.0\n        dtype: float64\n\n        >>> s.pct_change(fill_method='ffill')\n        0         NaN\n        1    0.011111\n        2    0.000000\n        3   -0.065934\n        dtype: float64\n\n        **DataFrame**\n\n        Percentage change in French franc, Deutsche Mark, and Italian lira from\n        1980-01-01 to 1980-03-01.\n\n        >>> df = pd.DataFrame({\n        ...     'FR': [4.0405, 4.0963, 4.3149],\n        ...     'GR': [1.7246, 1.7482, 1.8519],\n        ...     'IT': [804.74, 810.01, 860.13]},\n        ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n        >>> df\n                        FR      GR      IT\n        1980-01-01  4.0405  1.7246  804.74\n        1980-02-01  4.0963  1.7482  810.01\n        1980-03-01  4.3149  1.8519  860.13\n\n        >>> df.pct_change()\n                          FR        GR        IT\n        1980-01-01       NaN       NaN       NaN\n        1980-02-01  0.013810  0.013684  0.006549\n        1980-03-01  0.053365  0.059318  0.061876\n\n        Percentage of change in GOOG and APPL stock volume. Shows computing\n        the percentage change between columns.\n\n        >>> df = pd.DataFrame({\n        ...     '2016': [1769950, 30586265],\n        ...     '2015': [1500923, 40912316],\n        ...     '2014': [1371819, 41403351]},\n        ...     index=['GOOG', 'APPL'])\n        >>> df\n                  2016      2015      2014\n        GOOG   1769950   1500923   1371819\n        APPL  30586265  40912316  41403351\n\n        >>> df.pct_change(axis='columns', periods=-1)\n                  2016      2015  2014\n        GOOG  0.179241  0.094112   NaN\n        APPL -0.252395 -0.011860   NaN\n        \"\"\"\n        axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            _data = self.fillna(method=fill_method, axis=axis, limit=limit)\n            assert _data is not None  # needed for mypy\n            data = _data\n\n        shifted = data.shift(periods=periods, freq=freq, axis=axis, **kwargs)\n        # Unsupported left operand type for / (\"NDFrameT\")\n        rs = data / shifted - 1  # type: ignore[operator]\n        if freq is not None:\n            # Shift method is implemented differently when freq is not None\n            # We want to restore the original index\n            rs = rs.loc[~rs.index.duplicated()]\n            rs = rs.reindex_like(data)\n        return rs.__finalize__(self, method=\"pct_change\")\n\n    @final\n    def _agg_by_level(\n        self,\n        name: str,\n        axis: Axis = 0,\n        level: Level = 0,\n        skipna: bool_t = True,\n        **kwargs,\n    ):\n        if axis is None:\n            raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)\n\n    @final\n    def _logical_func(\n        self,\n        name: str,\n        func,\n        axis: Axis = 0,\n        bool_only: bool_t = False,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        **kwargs,\n    ) -> Series | bool_t:\n        nv.validate_logical_func((), kwargs, fname=name)\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n        if level is not None:\n            warnings.warn(\n                \"Using the level keyword in DataFrame and Series aggregations is \"\n                \"deprecated and will be removed in a future version. Use groupby \"\n                \"instead. df.any(level=1) should use df.groupby(level=1).any()\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n            if bool_only:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n\n        if self.ndim > 1 and axis is None:\n            # Reduce along one dimension then the other, to simplify DataFrame._reduce\n            res = self._logical_func(\n                name, func, axis=0, bool_only=bool_only, skipna=skipna, **kwargs\n            )\n            return res._logical_func(name, func, skipna=skipna, **kwargs)\n\n        if (\n            self.ndim > 1\n            and axis == 1\n            and len(self._mgr.arrays) > 1\n            # TODO(EA2D): special-case not needed\n            and all(x.ndim == 2 for x in self._mgr.arrays)\n            and not kwargs\n        ):\n            # Fastpath avoiding potentially expensive transpose\n            obj = self\n            if bool_only:\n                obj = self._get_bool_data()\n            return obj._reduce_axis1(name, func, skipna=skipna)\n\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    def any(\n        self,\n        axis: Axis = 0,\n        bool_only: bool_t = False,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        **kwargs,\n    ) -> DataFrame | Series | bool_t:\n        return self._logical_func(\n            \"any\", nanops.nanany, axis, bool_only, skipna, level, **kwargs\n        )\n\n    def all(\n        self,\n        axis: Axis = 0,\n        bool_only: bool_t = False,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        **kwargs,\n    ) -> Series | bool_t:\n        return self._logical_func(\n            \"all\", nanops.nanall, axis, bool_only, skipna, level, **kwargs\n        )\n\n    @final\n    def _accum_func(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        *args,\n        **kwargs,\n    ):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        if axis == 1:\n            return self.T._accum_func(\n                name, func, axis=0, skipna=skipna, *args, **kwargs\n            ).T\n\n        def block_accum_func(blk_values):\n            values = blk_values.T if hasattr(blk_values, \"T\") else blk_values\n\n            result = nanops.na_accum_func(values, func, skipna=skipna)\n\n            result = result.T if hasattr(result, \"T\") else result\n            return result\n\n        result = self._mgr.apply(block_accum_func)\n\n        return self._constructor(result).__finalize__(self, method=name)\n\n    def cummax(self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs):\n        return self._accum_func(\n            \"cummax\", np.maximum.accumulate, axis, skipna, *args, **kwargs\n        )\n\n    def cummin(self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs):\n        return self._accum_func(\n            \"cummin\", np.minimum.accumulate, axis, skipna, *args, **kwargs\n        )\n\n    def cumsum(self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs):\n        return self._accum_func(\"cumsum\", np.cumsum, axis, skipna, *args, **kwargs)\n\n    def cumprod(self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs):\n        return self._accum_func(\"cumprod\", np.cumprod, axis, skipna, *args, **kwargs)\n\n    @final\n    def _stat_function_ddof(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        ddof: int = 1,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        nv.validate_stat_ddof_func((), kwargs, fname=name)\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            warnings.warn(\n                \"Using the level keyword in DataFrame and Series aggregations is \"\n                \"deprecated and will be removed in a future version. Use groupby \"\n                \"instead. df.var(level=1) should use df.groupby(level=1).var().\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            func, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    def sem(\n        self,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        ddof: int = 1,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"sem\", nanops.nansem, axis, skipna, level, ddof, numeric_only, **kwargs\n        )\n\n    def var(\n        self,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        ddof: int = 1,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"var\", nanops.nanvar, axis, skipna, level, ddof, numeric_only, **kwargs\n        )\n\n    def std(\n        self,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        ddof: int = 1,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"std\", nanops.nanstd, axis, skipna, level, ddof, numeric_only, **kwargs\n        )\n\n    @final\n    def _stat_function(\n        self,\n        name: str,\n        func,\n        axis: Axis | None | lib.NoDefault = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ):\n        if name == \"median\":\n            nv.validate_median((), kwargs)\n        else:\n            nv.validate_stat_func((), kwargs, fname=name)\n\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        if axis is None and level is None and self.ndim > 1:\n            # user must have explicitly passed axis=None\n            # GH#21597\n            warnings.warn(\n                f\"In a future version, DataFrame.{name}(axis=None) will return a \"\n                f\"scalar {name} over the entire DataFrame. To retain the old \"\n                f\"behavior, use 'frame.{name}(axis=0)' or just 'frame.{name}()'\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n        if axis is lib.no_default:\n            axis = None\n\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            warnings.warn(\n                \"Using the level keyword in DataFrame and Series aggregations is \"\n                \"deprecated and will be removed in a future version. Use groupby \"\n                \"instead. df.median(level=1) should use df.groupby(level=1).median().\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, numeric_only=numeric_only\n            )\n        return self._reduce(\n            func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    def min(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ):\n        return self._stat_function(\n            \"min\",\n            nanops.nanmin,\n            axis,\n            skipna,\n            level,\n            numeric_only,\n            **kwargs,\n        )\n\n    def max(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ):\n        return self._stat_function(\n            \"max\",\n            nanops.nanmax,\n            axis,\n            skipna,\n            level,\n            numeric_only,\n            **kwargs,\n        )\n\n    def mean(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"mean\", nanops.nanmean, axis, skipna, level, numeric_only, **kwargs\n        )\n\n    def median(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"median\", nanops.nanmedian, axis, skipna, level, numeric_only, **kwargs\n        )\n\n    def skew(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"skew\", nanops.nanskew, axis, skipna, level, numeric_only, **kwargs\n        )\n\n    def kurt(\n        self,\n        axis: Axis | None | lib.NoDefault = lib.no_default,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"kurt\", nanops.nankurt, axis, skipna, level, numeric_only, **kwargs\n        )\n\n    kurtosis = kurt\n\n    @final\n    def _min_count_stat_function(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum((), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod((), kwargs)\n        else:\n            nv.validate_stat_func((), kwargs, fname=name)\n\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            warnings.warn(\n                \"Using the level keyword in DataFrame and Series aggregations is \"\n                \"deprecated and will be removed in a future version. Use groupby \"\n                \"instead. df.sum(level=1) should use df.groupby(level=1).sum().\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n            return self._agg_by_level(\n                name,\n                axis=axis,\n                level=level,\n                skipna=skipna,\n                min_count=min_count,\n                numeric_only=numeric_only,\n            )\n\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    def sum(\n        self,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        return self._min_count_stat_function(\n            \"sum\", nanops.nansum, axis, skipna, level, numeric_only, min_count, **kwargs\n        )\n\n    def prod(\n        self,\n        axis: Axis | None = None,\n        skipna: bool_t = True,\n        level: Level | None = None,\n        numeric_only: bool_t = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        return self._min_count_stat_function(\n            \"prod\",\n            nanops.nanprod,\n            axis,\n            skipna,\n            level,\n            numeric_only,\n            min_count,\n            **kwargs,\n        )\n\n    product = prod\n\n    @classmethod\n    def _add_numeric_operations(cls) -> None:\n        \"\"\"\n        Add the operations to the cls; evaluate the doc strings again\n        \"\"\"\n        axis_descr, name1, name2 = _doc_params(cls)\n\n        @doc(\n            _bool_doc,\n            desc=_any_desc,\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            see_also=_any_see_also,\n            examples=_any_examples,\n            empty_value=False,\n        )\n        def any(\n            self,\n            *,\n            axis: Axis = 0,\n            bool_only=None,\n            skipna: bool_t = True,\n            level=None,\n            **kwargs,\n        ):\n            return NDFrame.any(\n                self,\n                axis=axis,\n                bool_only=bool_only,\n                skipna=skipna,\n                level=level,\n                **kwargs,\n            )\n\n        setattr(cls, \"any\", any)\n\n        @doc(\n            _bool_doc,\n            desc=_all_desc,\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            see_also=_all_see_also,\n            examples=_all_examples,\n            empty_value=True,\n        )\n        def all(\n            self,\n            axis: Axis = 0,\n            bool_only=None,\n            skipna: bool_t = True,\n            level=None,\n            **kwargs,\n        ):\n            return NDFrame.all(self, axis, bool_only, skipna, level, **kwargs)\n\n        setattr(cls, \"all\", all)\n\n        @doc(\n            _num_ddof_doc,\n            desc=\"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            notes=\"\",\n            examples=\"\",\n        )\n        def sem(\n            self,\n            axis: Axis | None = None,\n            skipna: bool_t = True,\n            level=None,\n            ddof: int = 1,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.sem(self, axis, skipna, level, ddof, numeric_only, **kwargs)\n\n        setattr(cls, \"sem\", sem)\n\n        @doc(\n            _num_ddof_doc,\n            desc=\"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            notes=\"\",\n            examples=_var_examples,\n        )\n        def var(\n            self,\n            axis: Axis | None = None,\n            skipna: bool_t = True,\n            level=None,\n            ddof: int = 1,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.var(self, axis, skipna, level, ddof, numeric_only, **kwargs)\n\n        setattr(cls, \"var\", var)\n\n        @doc(\n            _num_ddof_doc,\n            desc=\"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            notes=_std_notes,\n            examples=_std_examples,\n        )\n        def std(\n            self,\n            axis: Axis | None = None,\n            skipna: bool_t = True,\n            level=None,\n            ddof: int = 1,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.std(self, axis, skipna, level, ddof, numeric_only, **kwargs)\n\n        setattr(cls, \"std\", std)\n\n        @doc(\n            _cnum_doc,\n            desc=\"minimum\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            accum_func_name=\"min\",\n            examples=_cummin_examples,\n        )\n        def cummin(\n            self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs\n        ):\n            return NDFrame.cummin(self, axis, skipna, *args, **kwargs)\n\n        setattr(cls, \"cummin\", cummin)\n\n        @doc(\n            _cnum_doc,\n            desc=\"maximum\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            accum_func_name=\"max\",\n            examples=_cummax_examples,\n        )\n        def cummax(\n            self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs\n        ):\n            return NDFrame.cummax(self, axis, skipna, *args, **kwargs)\n\n        setattr(cls, \"cummax\", cummax)\n\n        @doc(\n            _cnum_doc,\n            desc=\"sum\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            accum_func_name=\"sum\",\n            examples=_cumsum_examples,\n        )\n        def cumsum(\n            self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs\n        ):\n            return NDFrame.cumsum(self, axis, skipna, *args, **kwargs)\n\n        setattr(cls, \"cumsum\", cumsum)\n\n        @doc(\n            _cnum_doc,\n            desc=\"product\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            accum_func_name=\"prod\",\n            examples=_cumprod_examples,\n        )\n        def cumprod(\n            self, axis: Axis | None = None, skipna: bool_t = True, *args, **kwargs\n        ):\n            return NDFrame.cumprod(self, axis, skipna, *args, **kwargs)\n\n        setattr(cls, \"cumprod\", cumprod)\n\n        # error: Untyped decorator makes function \"sum\" untyped\n        @doc(  # type: ignore[misc]\n            _num_doc,\n            desc=\"Return the sum of the values over the requested axis.\\n\\n\"\n            \"This is equivalent to the method ``numpy.sum``.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=_min_count_stub,\n            see_also=_stat_func_see_also,\n            examples=_sum_examples,\n        )\n        def sum(\n            self,\n            axis: Axis | None = None,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            min_count: int = 0,\n            **kwargs,\n        ):\n            return NDFrame.sum(\n                self, axis, skipna, level, numeric_only, min_count, **kwargs\n            )\n\n        setattr(cls, \"sum\", sum)\n\n        @doc(\n            _num_doc,\n            desc=\"Return the product of the values over the requested axis.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=_min_count_stub,\n            see_also=_stat_func_see_also,\n            examples=_prod_examples,\n        )\n        def prod(\n            self,\n            axis: Axis | None = None,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            min_count: int = 0,\n            **kwargs,\n        ):\n            return NDFrame.prod(\n                self, axis, skipna, level, numeric_only, min_count, **kwargs\n            )\n\n        setattr(cls, \"prod\", prod)\n        cls.product = prod\n\n        @doc(\n            _num_doc,\n            desc=\"Return the mean of the values over the requested axis.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=\"\",\n            examples=\"\",\n        )\n        def mean(\n            self,\n            axis: AxisInt | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.mean(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"mean\", mean)\n\n        @doc(\n            _num_doc,\n            desc=\"Return unbiased skew over requested axis.\\n\\nNormalized by N-1.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=\"\",\n            examples=\"\",\n        )\n        def skew(\n            self,\n            axis: AxisInt | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.skew(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"skew\", skew)\n\n        @doc(\n            _num_doc,\n            desc=\"Return unbiased kurtosis over requested axis.\\n\\n\"\n            \"Kurtosis obtained using Fisher's definition of\\n\"\n            \"kurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=\"\",\n            examples=\"\",\n        )\n        def kurt(\n            self,\n            axis: Axis | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.kurt(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"kurt\", kurt)\n        cls.kurtosis = kurt\n\n        @doc(\n            _num_doc,\n            desc=\"Return the median of the values over the requested axis.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=\"\",\n            examples=\"\",\n        )\n        def median(\n            self,\n            axis: AxisInt | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.median(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"median\", median)\n\n        @doc(\n            _num_doc,\n            desc=\"Return the maximum of the values over the requested axis.\\n\\n\"\n            \"If you want the *index* of the maximum, use ``idxmax``. This is \"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmax``.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=_stat_func_see_also,\n            examples=_max_examples,\n        )\n        def max(\n            self,\n            axis: AxisInt | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.max(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"max\", max)\n\n        @doc(\n            _num_doc,\n            desc=\"Return the minimum of the values over the requested axis.\\n\\n\"\n            \"If you want the *index* of the minimum, use ``idxmin``. This is \"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmin``.\",\n            name1=name1,\n            name2=name2,\n            axis_descr=axis_descr,\n            min_count=\"\",\n            see_also=_stat_func_see_also,\n            examples=_min_examples,\n        )\n        def min(\n            self,\n            axis: AxisInt | None | lib.NoDefault = lib.no_default,\n            skipna: bool_t = True,\n            level=None,\n            numeric_only: bool_t = False,\n            **kwargs,\n        ):\n            return NDFrame.min(self, axis, skipna, level, numeric_only, **kwargs)\n\n        setattr(cls, \"min\", min)\n\n    @final\n    @doc(Rolling)\n    def rolling(\n        self,\n        window: int | timedelta | str | BaseOffset | BaseIndexer,\n        min_periods: int | None = None,\n        center: bool_t = False,\n        win_type: str | None = None,\n        on: str | None = None,\n        axis: Axis = 0,\n        closed: str | None = None,\n        step: int | None = None,\n        method: str = \"single\",\n    ) -> Window | Rolling:\n        axis = self._get_axis_number(axis)\n\n        if win_type is not None:\n            return Window(\n                self,\n                window=window,\n                min_periods=min_periods,\n                center=center,\n                win_type=win_type,\n                on=on,\n                axis=axis,\n                closed=closed,\n                step=step,\n                method=method,\n            )\n\n        return Rolling(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            axis=axis,\n            closed=closed,\n            step=step,\n            method=method,\n        )\n\n    @final\n    @doc(Expanding)\n    def expanding(\n        self,\n        min_periods: int = 1,\n        axis: Axis = 0,\n        method: str = \"single\",\n    ) -> Expanding:\n        axis = self._get_axis_number(axis)\n        return Expanding(self, min_periods=min_periods, axis=axis, method=method)\n\n    @final\n    @doc(ExponentialMovingWindow)\n    def ewm(\n        self,\n        com: float | None = None,\n        span: float | None = None,\n        halflife: float | TimedeltaConvertibleTypes | None = None,\n        alpha: float | None = None,\n        min_periods: int | None = 0,\n        adjust: bool_t = True,\n        ignore_na: bool_t = False,\n        axis: Axis = 0,\n        times: np.ndarray | DataFrame | Series | None = None,\n        method: str = \"single\",\n    ) -> ExponentialMovingWindow:\n        axis = self._get_axis_number(axis)\n        return ExponentialMovingWindow(\n            self,\n            com=com,\n            span=span,\n            halflife=halflife,\n            alpha=alpha,\n            min_periods=min_periods,\n            adjust=adjust,\n            ignore_na=ignore_na,\n            axis=axis,\n            times=times,\n            method=method,\n        )\n\n    # ----------------------------------------------------------------------\n    # Arithmetic Methods\n\n    @final\n    def _inplace_method(self, other, op):\n        \"\"\"\n        Wrap arithmetic method to operate inplace.\n        \"\"\"\n        result = op(self, other)\n\n        if (\n            self.ndim == 1\n            and result._indexed_same(self)\n            and is_dtype_equal(result.dtype, self.dtype)\n        ):\n            # GH#36498 this inplace op can _actually_ be inplace.\n            self._values[:] = result._values\n            return self\n\n        # Delete cacher\n        self._reset_cacher()\n\n        # this makes sure that we are aligned like the input\n        # we are updating inplace so we want to ignore is_copy\n        self._update_inplace(\n            result.reindex_like(self, copy=False), verify_is_copy=False\n        )\n        return self\n\n    def __iadd__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for + (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__add__)  # type: ignore[operator]\n\n    def __isub__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for - (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__sub__)  # type: ignore[operator]\n\n    def __imul__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for * (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__mul__)  # type: ignore[operator]\n\n    def __itruediv__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for / (\"Type[NDFrame]\")\n        return self._inplace_method(\n            other, type(self).__truediv__  # type: ignore[operator]\n        )\n\n    def __ifloordiv__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for // (\"Type[NDFrame]\")\n        return self._inplace_method(\n            other, type(self).__floordiv__  # type: ignore[operator]\n        )\n\n    def __imod__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for % (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__mod__)  # type: ignore[operator]\n\n    def __ipow__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for ** (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__pow__)  # type: ignore[operator]\n\n    def __iand__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for & (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__and__)  # type: ignore[operator]\n\n    def __ior__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for | (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__or__)  # type: ignore[operator]\n\n    def __ixor__(self: NDFrameT, other) -> NDFrameT:\n        # error: Unsupported left operand type for ^ (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__xor__)  # type: ignore[operator]\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    @final\n    def _find_valid_index(self, *, how: str) -> Hashable | None:\n        \"\"\"\n        Retrieves the index of the first valid value.\n\n        Parameters\n        ----------\n        how : {'first', 'last'}\n            Use this parameter to change between the first or last valid index.\n\n        Returns\n        -------\n        idx_first_valid : type of index\n        \"\"\"\n        idxpos = find_valid_index(self._values, how=how)\n        if idxpos is None:\n            return None\n        return self.index[idxpos]\n\n    @final\n    @doc(position=\"first\", klass=_shared_doc_kwargs[\"klass\"])\n    def first_valid_index(self) -> Hashable | None:\n        \"\"\"\n        Return index for {position} non-NA value or None, if no non-NA value is found.\n\n        Returns\n        -------\n        scalar : type of index\n\n        Notes\n        -----\n        If all elements are non-NA/null, returns None.\n        Also returns None for empty {klass}.\n        \"\"\"\n        return self._find_valid_index(how=\"first\")\n\n    @final\n    @doc(first_valid_index, position=\"last\", klass=_shared_doc_kwargs[\"klass\"])\n    def last_valid_index(self) -> Hashable | None:\n        return self._find_valid_index(how=\"last\")\n\n\ndef _doc_params(cls):\n    \"\"\"Return a tuple of the doc params.\"\"\"\n    axis_descr = (\n        f\"{{{', '.join([f'{a} ({i})' for i, a in enumerate(cls._AXIS_ORDERS)])}}}\"\n    )\n    name = cls._constructor_sliced.__name__ if cls._AXIS_LEN > 1 else \"scalar\"\n    name2 = cls.__name__\n    return axis_descr, name, name2\n\n\n_num_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {axis_descr}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a {name1}.\n\n    .. deprecated:: 1.3.0\n        The level keyword is deprecated. Use groupby instead.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n{min_count}\\\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\n{name1} or {name2} (if level specified)\\\n{see_also}\\\n{examples}\n\"\"\"\n\n_num_ddof_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {axis_descr}\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a {name1}.\n\n    .. deprecated:: 1.3.0\n        The level keyword is deprecated. Use groupby instead.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\nReturns\n-------\n{name1} or {name2} (if level specified) \\\n{notes}\\\n{examples}\n\"\"\"\n\n_std_notes = \"\"\"\n\nNotes\n-----\nTo have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\ndefault `ddof=1`)\"\"\"\n\n_std_examples = \"\"\"\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                   'age': [21, 25, 62, 43],\n...                   'height': [1.61, 1.87, 1.49, 2.01]}\n...                  ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\nThe standard deviation of the columns can be found as follows:\n\n>>> df.std()\nage       18.786076\nheight     0.237417\n\nAlternatively, `ddof=0` can be set to normalize by N instead of N-1:\n\n>>> df.std(ddof=0)\nage       16.269219\nheight     0.205609\"\"\"\n\n_var_examples = \"\"\"\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                   'age': [21, 25, 62, 43],\n...                   'height': [1.61, 1.87, 1.49, 2.01]}\n...                  ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\n>>> df.var()\nage       352.916667\nheight      0.056367\n\nAlternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n\n>>> df.var(ddof=0)\nage       264.687500\nheight      0.042275\"\"\"\n\n_bool_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {{0 or 'index', 1 or 'columns', None}}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default None\n    Include only boolean columns. If None, will attempt to use everything,\n    then use only boolean data. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be {empty_value}, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\nlevel : int or level name, default None\n    If the axis is a MultiIndex (hierarchical), count along a\n    particular level, collapsing into a {name1}.\n\n    .. deprecated:: 1.3.0\n        The level keyword is deprecated. Use groupby instead.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\n{name1} or {name2}\n    If level is specified, then, {name2} is returned; otherwise, {name1}\n    is returned.\n\n{see_also}\n{examples}\"\"\"\n\n_all_desc = \"\"\"\\\nReturn whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\"\"\"\n\n_all_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([], dtype=\"float64\").all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a dataframe from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if values in each column all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if values in each row all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse\n\"\"\"\n\n_all_see_also = \"\"\"\\\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\"\"\"\n\n_cnum_doc = \"\"\"\nReturn cumulative {desc} over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\n{desc}.\n\nParameters\n----------\naxis : {{0 or 'index', 1 or 'columns'}}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\n{name1} or {name2}\n    Return cumulative {desc} of {name1} or {name2}.\n\nSee Also\n--------\ncore.window.expanding.Expanding.{accum_func_name} : Similar functionality\n    but ignores ``NaN`` values.\n{name2}.{accum_func_name} : Return the {desc} over\n    {name2} axis.\n{name2}.cummax : Return cumulative maximum over {name2} axis.\n{name2}.cummin : Return cumulative minimum over {name2} axis.\n{name2}.cumsum : Return cumulative sum over {name2} axis.\n{name2}.cumprod : Return cumulative product over {name2} axis.\n\n{examples}\"\"\"\n\n_cummin_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\"\"\"\n\n_cumsum_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0\n\"\"\"\n\n_cumprod_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0\n\"\"\"\n\n_cummax_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                    columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0\n\"\"\"\n\n_any_see_also = \"\"\"\\\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\"\"\"\n\n_any_desc = \"\"\"\\\nReturn whether any element is True, potentially over an axis.\n\nReturns False unless there is at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\"\"\"\n\n_any_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([], dtype=\"float64\").any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)\n\"\"\"\n\n_shared_docs[\n    \"stat_func_example\"\n] = \"\"\"\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.{stat_func}()\n{default_output}\"\"\"\n\n_sum_examples = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"sum\", verb=\"Sum\", default_output=14, level_output_0=6, level_output_1=8\n)\n\n_sum_examples += \"\"\"\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([], dtype=\"float64\").sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan\"\"\"\n\n_max_examples: str = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"max\", verb=\"Max\", default_output=8, level_output_0=4, level_output_1=8\n)\n\n_min_examples: str = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"min\", verb=\"Min\", default_output=0, level_output_0=2, level_output_1=0\n)\n\n_stat_func_see_also = \"\"\"\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\"\"\"\n\n_prod_examples = \"\"\"\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan\"\"\"\n\n_min_count_stub = \"\"\"\\\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\"\"\"\n\n\ndef _align_as_utc(\n    left: NDFrameT, right: NDFrameT, join_index: Index | None\n) -> tuple[NDFrameT, NDFrameT]:\n    \"\"\"\n    If we are aligning timezone-aware DatetimeIndexes and the timezones\n    do not match, convert both to UTC.\n    \"\"\"\n    if is_datetime64tz_dtype(left.index.dtype):\n        if left.index.tz != right.index.tz:\n            if join_index is not None:\n                # GH#33671 ensure we don't change the index on\n                #  our original Series (NB: by default deep=False)\n                left = left.copy()\n                right = right.copy()\n                left.index = join_index\n                right.index = join_index\n\n    return left, right\n"
    },
    {
      "filename": "pandas/io/sql.py",
      "content": "\"\"\"\nCollection of query wrappers / abstractions to both facilitate data\nretrieval and to reduce dependency on DB-specific API.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom contextlib import contextmanager\nfrom datetime import (\n    date,\n    datetime,\n    time,\n)\nfrom functools import partial\nimport re\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Iterator,\n    Literal,\n    cast,\n    overload,\n)\nimport warnings\n\nimport numpy as np\n\nfrom pandas._libs import lib\nfrom pandas._typing import (\n    DateTimeErrorChoices,\n    DtypeArg,\n    IndexLabel,\n)\nfrom pandas.compat._optional import import_optional_dependency\nfrom pandas.errors import (\n    AbstractMethodError,\n    DatabaseError,\n)\nfrom pandas.util._exceptions import find_stack_level\n\nfrom pandas.core.dtypes.common import (\n    is_datetime64tz_dtype,\n    is_dict_like,\n    is_integer,\n    is_list_like,\n)\nfrom pandas.core.dtypes.dtypes import DatetimeTZDtype\nfrom pandas.core.dtypes.missing import isna\n\nfrom pandas import get_option\nfrom pandas.core.api import (\n    DataFrame,\n    Series,\n)\nfrom pandas.core.base import PandasObject\nimport pandas.core.common as com\nfrom pandas.core.tools.datetimes import to_datetime\n\nif TYPE_CHECKING:\n    from sqlalchemy import Table\n\n\n# -----------------------------------------------------------------------------\n# -- Helper functions\n\n\ndef _convert_params(sql, params):\n    \"\"\"Convert SQL and params args to DBAPI2.0 compliant format.\"\"\"\n    args = [sql]\n    if params is not None:\n        if hasattr(params, \"keys\"):  # test if params is a mapping\n            args += [params]\n        else:\n            args += [list(params)]\n    return args\n\n\ndef _process_parse_dates_argument(parse_dates):\n    \"\"\"Process parse_dates argument for read_sql functions\"\"\"\n    # handle non-list entries for parse_dates gracefully\n    if parse_dates is True or parse_dates is None or parse_dates is False:\n        parse_dates = []\n\n    elif not hasattr(parse_dates, \"__iter__\"):\n        parse_dates = [parse_dates]\n    return parse_dates\n\n\ndef _handle_date_column(\n    col, utc: bool | None = None, format: str | dict[str, Any] | None = None\n):\n    if isinstance(format, dict):\n        # GH35185 Allow custom error values in parse_dates argument of\n        # read_sql like functions.\n        # Format can take on custom to_datetime argument values such as\n        # {\"errors\": \"coerce\"} or {\"dayfirst\": True}\n        error: DateTimeErrorChoices = format.pop(\"errors\", None) or \"ignore\"\n        return to_datetime(col, errors=error, **format)\n    else:\n        # Allow passing of formatting string for integers\n        # GH17855\n        if format is None and (\n            issubclass(col.dtype.type, np.floating)\n            or issubclass(col.dtype.type, np.integer)\n        ):\n            format = \"s\"\n        if format in [\"D\", \"d\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\"]:\n            return to_datetime(col, errors=\"coerce\", unit=format, utc=utc)\n        elif is_datetime64tz_dtype(col.dtype):\n            # coerce to UTC timezone\n            # GH11216\n            return to_datetime(col, utc=True)\n        else:\n            return to_datetime(col, errors=\"coerce\", format=format, utc=utc)\n\n\ndef _parse_date_columns(data_frame, parse_dates):\n    \"\"\"\n    Force non-datetime columns to be read as such.\n    Supports both string formatted and integer timestamp columns.\n    \"\"\"\n    parse_dates = _process_parse_dates_argument(parse_dates)\n\n    # we want to coerce datetime64_tz dtypes for now to UTC\n    # we could in theory do a 'nice' conversion from a FixedOffset tz\n    # GH11216\n    for col_name, df_col in data_frame.items():\n        if is_datetime64tz_dtype(df_col.dtype) or col_name in parse_dates:\n            try:\n                fmt = parse_dates[col_name]\n            except TypeError:\n                fmt = None\n            data_frame[col_name] = _handle_date_column(df_col, format=fmt)\n\n    return data_frame\n\n\ndef _wrap_result(\n    data,\n    columns,\n    index_col=None,\n    coerce_float: bool = True,\n    parse_dates=None,\n    dtype: DtypeArg | None = None,\n):\n    \"\"\"Wrap result set of query in a DataFrame.\"\"\"\n    frame = DataFrame.from_records(data, columns=columns, coerce_float=coerce_float)\n\n    if dtype:\n        frame = frame.astype(dtype)\n\n    frame = _parse_date_columns(frame, parse_dates)\n\n    if index_col is not None:\n        frame.set_index(index_col, inplace=True)\n\n    return frame\n\n\ndef execute(sql, con, params=None):\n    \"\"\"\n    Execute the given SQL query using the provided connection object.\n\n    Parameters\n    ----------\n    sql : string\n        SQL query to be executed.\n    con : SQLAlchemy connectable(engine/connection) or sqlite3 connection\n        Using SQLAlchemy makes it possible to use any DB supported by the\n        library.\n        If a DBAPI2 object, only sqlite3 is supported.\n    params : list or tuple, optional, default: None\n        List of parameters to pass to execute method.\n\n    Returns\n    -------\n    Results Iterable\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con)\n    args = _convert_params(sql, params)\n    return pandas_sql.execute(*args)\n\n\n# -----------------------------------------------------------------------------\n# -- Read and write to DataFrames\n\n\n@overload\ndef read_sql_table(\n    table_name,\n    con,\n    schema=...,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    parse_dates: list[str] | dict[str, str] | None = ...,\n    columns: list[str] | None = ...,\n    chunksize: None = ...,\n) -> DataFrame:\n    ...\n\n\n@overload\ndef read_sql_table(\n    table_name,\n    con,\n    schema=...,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    parse_dates: list[str] | dict[str, str] | None = ...,\n    columns: list[str] | None = ...,\n    chunksize: int = ...,\n) -> Iterator[DataFrame]:\n    ...\n\n\ndef read_sql_table(\n    table_name: str,\n    con,\n    schema: str | None = None,\n    index_col: str | list[str] | None = None,\n    coerce_float: bool = True,\n    parse_dates: list[str] | dict[str, str] | None = None,\n    columns: list[str] | None = None,\n    chunksize: int | None = None,\n) -> DataFrame | Iterator[DataFrame]:\n    \"\"\"\n    Read SQL database table into a DataFrame.\n\n    Given a table name and a SQLAlchemy connectable, returns a DataFrame.\n    This function does not support DBAPI connections.\n\n    Parameters\n    ----------\n    table_name : str\n        Name of SQL table in database.\n    con : SQLAlchemy connectable or str\n        A database URI could be provided as str.\n        SQLite DBAPI connection mode not supported.\n    schema : str, default None\n        Name of SQL schema in database to query (if database flavor\n        supports this). Uses default schema if None (default).\n    index_col : str or list of str, optional, default: None\n        Column(s) to set as index(MultiIndex).\n    coerce_float : bool, default True\n        Attempts to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point. Can result in loss of Precision.\n    parse_dates : list or dict, default None\n        - List of column names to parse as dates.\n        - Dict of ``{column_name: format string}`` where format string is\n          strftime compatible in case of parsing string times or is one of\n          (D, s, ns, ms, us) in case of parsing integer timestamps.\n        - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n          to the keyword arguments of :func:`pandas.to_datetime`\n          Especially useful with databases without native Datetime support,\n          such as SQLite.\n    columns : list, default None\n        List of column names to select from SQL table.\n    chunksize : int, default None\n        If specified, returns an iterator where `chunksize` is the number of\n        rows to include in each chunk.\n\n    Returns\n    -------\n    DataFrame or Iterator[DataFrame]\n        A SQL table is returned as two-dimensional data structure with labeled\n        axes.\n\n    See Also\n    --------\n    read_sql_query : Read SQL query into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n\n    Notes\n    -----\n    Any datetime values with time zone information will be converted to UTC.\n\n    Examples\n    --------\n    >>> pd.read_sql_table('table_name', 'postgres:///db_name')  # doctest:+SKIP\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con, schema=schema)\n    if not pandas_sql.has_table(table_name):\n        raise ValueError(f\"Table {table_name} not found\")\n\n    # error: Item \"SQLiteDatabase\" of \"Union[SQLDatabase, SQLiteDatabase]\"\n    # has no attribute \"read_table\"\n    table = pandas_sql.read_table(  # type: ignore[union-attr]\n        table_name,\n        index_col=index_col,\n        coerce_float=coerce_float,\n        parse_dates=parse_dates,\n        columns=columns,\n        chunksize=chunksize,\n    )\n\n    if table is not None:\n        return table\n    else:\n        raise ValueError(f\"Table {table_name} not found\", con)\n\n\n@overload\ndef read_sql_query(\n    sql,\n    con,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    params: list[str] | dict[str, str] | None = ...,\n    parse_dates: list[str] | dict[str, str] | None = ...,\n    chunksize: None = ...,\n    dtype: DtypeArg | None = ...,\n) -> DataFrame:\n    ...\n\n\n@overload\ndef read_sql_query(\n    sql,\n    con,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    params: list[str] | dict[str, str] | None = ...,\n    parse_dates: list[str] | dict[str, str] | None = ...,\n    chunksize: int = ...,\n    dtype: DtypeArg | None = ...,\n) -> Iterator[DataFrame]:\n    ...\n\n\ndef read_sql_query(\n    sql,\n    con,\n    index_col: str | list[str] | None = None,\n    coerce_float: bool = True,\n    params: list[str] | dict[str, str] | None = None,\n    parse_dates: list[str] | dict[str, str] | None = None,\n    chunksize: int | None = None,\n    dtype: DtypeArg | None = None,\n) -> DataFrame | Iterator[DataFrame]:\n    \"\"\"\n    Read SQL query into a DataFrame.\n\n    Returns a DataFrame corresponding to the result set of the query\n    string. Optionally provide an `index_col` parameter to use one of the\n    columns as the index, otherwise default integer index will be used.\n\n    Parameters\n    ----------\n    sql : str SQL query or SQLAlchemy Selectable (select or text object)\n        SQL query to be executed.\n    con : SQLAlchemy connectable, str, or sqlite3 connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. If a DBAPI2 object, only sqlite3 is supported.\n    index_col : str or list of str, optional, default: None\n        Column(s) to set as index(MultiIndex).\n    coerce_float : bool, default True\n        Attempts to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point. Useful for SQL result sets.\n    params : list, tuple or dict, optional, default: None\n        List of parameters to pass to execute method.  The syntax used\n        to pass parameters is database driver dependent. Check your\n        database driver documentation for which of the five syntax styles,\n        described in PEP 249's paramstyle, is supported.\n        Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\n    parse_dates : list or dict, default: None\n        - List of column names to parse as dates.\n        - Dict of ``{column_name: format string}`` where format string is\n          strftime compatible in case of parsing string times, or is one of\n          (D, s, ns, ms, us) in case of parsing integer timestamps.\n        - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n          to the keyword arguments of :func:`pandas.to_datetime`\n          Especially useful with databases without native Datetime support,\n          such as SQLite.\n    chunksize : int, default None\n        If specified, return an iterator where `chunksize` is the number of\n        rows to include in each chunk.\n    dtype : Type name or dict of columns\n        Data type for data or columns. E.g. np.float64 or\n        {‘a’: np.float64, ‘b’: np.int32, ‘c’: ‘Int64’}.\n\n        .. versionadded:: 1.3.0\n\n    Returns\n    -------\n    DataFrame or Iterator[DataFrame]\n\n    See Also\n    --------\n    read_sql_table : Read SQL database table into a DataFrame.\n    read_sql : Read SQL query or database table into a DataFrame.\n\n    Notes\n    -----\n    Any datetime values with time zone information parsed via the `parse_dates`\n    parameter will be converted to UTC.\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con)\n    return pandas_sql.read_query(\n        sql,\n        index_col=index_col,\n        params=params,\n        coerce_float=coerce_float,\n        parse_dates=parse_dates,\n        chunksize=chunksize,\n        dtype=dtype,\n    )\n\n\n@overload\ndef read_sql(\n    sql,\n    con,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    params=...,\n    parse_dates=...,\n    columns: list[str] = ...,\n    chunksize: None = ...,\n) -> DataFrame:\n    ...\n\n\n@overload\ndef read_sql(\n    sql,\n    con,\n    index_col: str | list[str] | None = ...,\n    coerce_float=...,\n    params=...,\n    parse_dates=...,\n    columns: list[str] = ...,\n    chunksize: int = ...,\n) -> Iterator[DataFrame]:\n    ...\n\n\ndef read_sql(\n    sql,\n    con,\n    index_col: str | list[str] | None = None,\n    coerce_float: bool = True,\n    params=None,\n    parse_dates=None,\n    columns: list[str] | None = None,\n    chunksize: int | None = None,\n) -> DataFrame | Iterator[DataFrame]:\n    \"\"\"\n    Read SQL query or database table into a DataFrame.\n\n    This function is a convenience wrapper around ``read_sql_table`` and\n    ``read_sql_query`` (for backward compatibility). It will delegate\n    to the specific function depending on the provided input. A SQL query\n    will be routed to ``read_sql_query``, while a database table name will\n    be routed to ``read_sql_table``. Note that the delegated function might\n    have more specific notes about their functionality not listed here.\n\n    Parameters\n    ----------\n    sql : str or SQLAlchemy Selectable (select or text object)\n        SQL query to be executed or a table name.\n    con : SQLAlchemy connectable, str, or sqlite3 connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. If a DBAPI2 object, only sqlite3 is supported. The user is responsible\n        for engine disposal and connection closure for the SQLAlchemy connectable; str\n        connections are closed automatically. See\n        `here <https://docs.sqlalchemy.org/en/13/core/connections.html>`_.\n    index_col : str or list of str, optional, default: None\n        Column(s) to set as index(MultiIndex).\n    coerce_float : bool, default True\n        Attempts to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    params : list, tuple or dict, optional, default: None\n        List of parameters to pass to execute method.  The syntax used\n        to pass parameters is database driver dependent. Check your\n        database driver documentation for which of the five syntax styles,\n        described in PEP 249's paramstyle, is supported.\n        Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\n    parse_dates : list or dict, default: None\n        - List of column names to parse as dates.\n        - Dict of ``{column_name: format string}`` where format string is\n          strftime compatible in case of parsing string times, or is one of\n          (D, s, ns, ms, us) in case of parsing integer timestamps.\n        - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n          to the keyword arguments of :func:`pandas.to_datetime`\n          Especially useful with databases without native Datetime support,\n          such as SQLite.\n    columns : list, default: None\n        List of column names to select from SQL table (only used when reading\n        a table).\n    chunksize : int, default None\n        If specified, return an iterator where `chunksize` is the\n        number of rows to include in each chunk.\n\n    Returns\n    -------\n    DataFrame or Iterator[DataFrame]\n\n    See Also\n    --------\n    read_sql_table : Read SQL database table into a DataFrame.\n    read_sql_query : Read SQL query into a DataFrame.\n\n    Examples\n    --------\n    Read data from SQL via either a SQL query or a SQL tablename.\n    When using a SQLite database only SQL queries are accepted,\n    providing only the SQL tablename will result in an error.\n\n    >>> from sqlite3 import connect\n    >>> conn = connect(':memory:')\n    >>> df = pd.DataFrame(data=[[0, '10/11/12'], [1, '12/11/10']],\n    ...                   columns=['int_column', 'date_column'])\n    >>> df.to_sql('test_data', conn)\n    2\n\n    >>> pd.read_sql('SELECT int_column, date_column FROM test_data', conn)\n       int_column date_column\n    0           0    10/11/12\n    1           1    12/11/10\n\n    >>> pd.read_sql('test_data', 'postgres:///db_name')  # doctest:+SKIP\n\n    Apply date parsing to columns through the ``parse_dates`` argument\n\n    >>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n    ...             conn,\n    ...             parse_dates=[\"date_column\"])\n       int_column date_column\n    0           0  2012-10-11\n    1           1  2010-12-11\n\n    The ``parse_dates`` argument calls ``pd.to_datetime`` on the provided columns.\n    Custom argument values for applying ``pd.to_datetime`` on a column are specified\n    via a dictionary format:\n    1. Ignore errors while parsing the values of \"date_column\"\n\n    >>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n    ...             conn,\n    ...             parse_dates={\"date_column\": {\"errors\": \"ignore\"}})\n       int_column date_column\n    0           0  2012-10-11\n    1           1  2010-12-11\n\n    2. Apply a dayfirst date parsing order on the values of \"date_column\"\n\n    >>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n    ...             conn,\n    ...             parse_dates={\"date_column\": {\"dayfirst\": True}})\n       int_column date_column\n    0           0  2012-11-10\n    1           1  2010-11-12\n\n    3. Apply custom formatting when date parsing the values of \"date_column\"\n\n    >>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n    ...             conn,\n    ...             parse_dates={\"date_column\": {\"format\": \"%d/%m/%y\"}})\n       int_column date_column\n    0           0  2012-11-10\n    1           1  2010-11-12\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con)\n\n    if isinstance(pandas_sql, SQLiteDatabase):\n        return pandas_sql.read_query(\n            sql,\n            index_col=index_col,\n            params=params,\n            coerce_float=coerce_float,\n            parse_dates=parse_dates,\n            chunksize=chunksize,\n        )\n\n    try:\n        _is_table_name = pandas_sql.has_table(sql)\n    except Exception:\n        # using generic exception to catch errors from sql drivers (GH24988)\n        _is_table_name = False\n\n    if _is_table_name:\n        pandas_sql.meta.reflect(bind=pandas_sql.connectable, only=[sql])\n        return pandas_sql.read_table(\n            sql,\n            index_col=index_col,\n            coerce_float=coerce_float,\n            parse_dates=parse_dates,\n            columns=columns,\n            chunksize=chunksize,\n        )\n    else:\n        return pandas_sql.read_query(\n            sql,\n            index_col=index_col,\n            params=params,\n            coerce_float=coerce_float,\n            parse_dates=parse_dates,\n            chunksize=chunksize,\n        )\n\n\ndef to_sql(\n    frame,\n    name: str,\n    con,\n    schema: str | None = None,\n    if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n    index: bool = True,\n    index_label: IndexLabel = None,\n    chunksize: int | None = None,\n    dtype: DtypeArg | None = None,\n    method: str | None = None,\n    engine: str = \"auto\",\n    **engine_kwargs,\n) -> int | None:\n    \"\"\"\n    Write records stored in a DataFrame to a SQL database.\n\n    Parameters\n    ----------\n    frame : DataFrame, Series\n    name : str\n        Name of SQL table.\n    con : SQLAlchemy connectable(engine/connection) or database string URI\n        or sqlite3 DBAPI2 connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library.\n        If a DBAPI2 object, only sqlite3 is supported.\n    schema : str, optional\n        Name of SQL schema in database to write to (if database flavor\n        supports this). If None, use default schema (default).\n    if_exists : {'fail', 'replace', 'append'}, default 'fail'\n        - fail: If table exists, do nothing.\n        - replace: If table exists, drop it, recreate it, and insert data.\n        - append: If table exists, insert data. Create if does not exist.\n    index : bool, default True\n        Write DataFrame index as a column.\n    index_label : str or sequence, optional\n        Column label for index column(s). If None is given (default) and\n        `index` is True, then the index names are used.\n        A sequence should be given if the DataFrame uses MultiIndex.\n    chunksize : int, optional\n        Specify the number of rows in each batch to be written at a time.\n        By default, all rows will be written at once.\n    dtype : dict or scalar, optional\n        Specifying the datatype for columns. If a dictionary is used, the\n        keys should be the column names and the values should be the\n        SQLAlchemy types or strings for the sqlite3 fallback mode. If a\n        scalar is provided, it will be applied to all columns.\n    method : {None, 'multi', callable}, optional\n        Controls the SQL insertion clause used:\n\n        - None : Uses standard SQL ``INSERT`` clause (one per row).\n        - ``'multi'``: Pass multiple values in a single ``INSERT`` clause.\n        - callable with signature ``(pd_table, conn, keys, data_iter) -> int | None``.\n\n        Details and a sample callable implementation can be found in the\n        section :ref:`insert method <io.sql.method>`.\n    engine : {'auto', 'sqlalchemy'}, default 'auto'\n        SQL engine library to use. If 'auto', then the option\n        ``io.sql.engine`` is used. The default ``io.sql.engine``\n        behavior is 'sqlalchemy'\n\n        .. versionadded:: 1.3.0\n\n    **engine_kwargs\n        Any additional kwargs are passed to the engine.\n\n    Returns\n    -------\n    None or int\n        Number of rows affected by to_sql. None is returned if the callable\n        passed into ``method`` does not return an integer number of rows.\n\n        .. versionadded:: 1.4.0\n\n    Notes\n    -----\n    The returned rows affected is the sum of the ``rowcount`` attribute of ``sqlite3.Cursor``\n    or SQLAlchemy connectable. The returned value may not reflect the exact number of written\n    rows as stipulated in the\n    `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n    `SQLAlchemy <https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.BaseCursorResult.rowcount>`__\n    \"\"\"  # noqa:E501\n    if if_exists not in (\"fail\", \"replace\", \"append\"):\n        raise ValueError(f\"'{if_exists}' is not valid for if_exists\")\n\n    pandas_sql = pandasSQL_builder(con, schema=schema)\n\n    if isinstance(frame, Series):\n        frame = frame.to_frame()\n    elif not isinstance(frame, DataFrame):\n        raise NotImplementedError(\n            \"'frame' argument should be either a Series or a DataFrame\"\n        )\n\n    return pandas_sql.to_sql(\n        frame,\n        name,\n        if_exists=if_exists,\n        index=index,\n        index_label=index_label,\n        schema=schema,\n        chunksize=chunksize,\n        dtype=dtype,\n        method=method,\n        engine=engine,\n        **engine_kwargs,\n    )\n\n\ndef has_table(table_name: str, con, schema: str | None = None) -> bool:\n    \"\"\"\n    Check if DataBase has named table.\n\n    Parameters\n    ----------\n    table_name: string\n        Name of SQL table.\n    con: SQLAlchemy connectable(engine/connection) or sqlite3 DBAPI2 connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library.\n        If a DBAPI2 object, only sqlite3 is supported.\n    schema : string, default None\n        Name of SQL schema in database to write to (if database flavor supports\n        this). If None, use default schema (default).\n\n    Returns\n    -------\n    boolean\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con, schema=schema)\n    return pandas_sql.has_table(table_name)\n\n\ntable_exists = has_table\n\n\ndef pandasSQL_builder(con, schema: str | None = None) -> SQLDatabase | SQLiteDatabase:\n    \"\"\"\n    Convenience function to return the correct PandasSQL subclass based on the\n    provided parameters.\n    \"\"\"\n    import sqlite3\n\n    if isinstance(con, sqlite3.Connection) or con is None:\n        return SQLiteDatabase(con)\n\n    sqlalchemy = import_optional_dependency(\"sqlalchemy\", errors=\"ignore\")\n\n    if isinstance(con, str):\n        if sqlalchemy is None:\n            raise ImportError(\"Using URI string without sqlalchemy installed.\")\n        con = sqlalchemy.create_engine(con)\n\n    if sqlalchemy is not None and isinstance(con, sqlalchemy.engine.Connectable):\n        return SQLDatabase(con, schema=schema)\n\n    warnings.warn(\n        \"pandas only supports SQLAlchemy connectable (engine/connection) or \"\n        \"database string URI or sqlite3 DBAPI2 connection. \"\n        \"Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\",\n        UserWarning,\n        stacklevel=find_stack_level(),\n    )\n    return SQLiteDatabase(con)\n\n\nclass SQLTable(PandasObject):\n    \"\"\"\n    For mapping Pandas tables to SQL tables.\n    Uses fact that table is reflected by SQLAlchemy to\n    do better type conversions.\n    Also holds various flags needed to avoid having to\n    pass them between functions all the time.\n    \"\"\"\n\n    # TODO: support for multiIndex\n\n    def __init__(\n        self,\n        name: str,\n        pandas_sql_engine,\n        frame=None,\n        index: bool | str | list[str] | None = True,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        prefix: str = \"pandas\",\n        index_label=None,\n        schema=None,\n        keys=None,\n        dtype: DtypeArg | None = None,\n    ) -> None:\n        self.name = name\n        self.pd_sql = pandas_sql_engine\n        self.prefix = prefix\n        self.frame = frame\n        self.index = self._index_name(index, index_label)\n        self.schema = schema\n        self.if_exists = if_exists\n        self.keys = keys\n        self.dtype = dtype\n\n        if frame is not None:\n            # We want to initialize based on a dataframe\n            self.table = self._create_table_setup()\n        else:\n            # no data provided, read-only mode\n            self.table = self.pd_sql.get_table(self.name, self.schema)\n\n        if self.table is None:\n            raise ValueError(f\"Could not init table '{name}'\")\n\n    def exists(self):\n        return self.pd_sql.has_table(self.name, self.schema)\n\n    def sql_schema(self) -> str:\n        from sqlalchemy.schema import CreateTable\n\n        return str(CreateTable(self.table).compile(self.pd_sql.connectable))\n\n    def _execute_create(self) -> None:\n        # Inserting table into database, add to MetaData object\n        self.table = self.table.to_metadata(self.pd_sql.meta)\n        self.table.create(bind=self.pd_sql.connectable)\n\n    def create(self) -> None:\n        if self.exists():\n            if self.if_exists == \"fail\":\n                raise ValueError(f\"Table '{self.name}' already exists.\")\n            if self.if_exists == \"replace\":\n                self.pd_sql.drop_table(self.name, self.schema)\n                self._execute_create()\n            elif self.if_exists == \"append\":\n                pass\n            else:\n                raise ValueError(f\"'{self.if_exists}' is not valid for if_exists\")\n        else:\n            self._execute_create()\n\n    def _execute_insert(self, conn, keys: list[str], data_iter) -> int:\n        \"\"\"\n        Execute SQL statement inserting data\n\n        Parameters\n        ----------\n        conn : sqlalchemy.engine.Engine or sqlalchemy.engine.Connection\n        keys : list of str\n           Column names\n        data_iter : generator of list\n           Each item contains a list of values to be inserted\n        \"\"\"\n        data = [dict(zip(keys, row)) for row in data_iter]\n        result = conn.execute(self.table.insert(), data)\n        return result.rowcount\n\n    def _execute_insert_multi(self, conn, keys: list[str], data_iter) -> int:\n        \"\"\"\n        Alternative to _execute_insert for DBs support multivalue INSERT.\n\n        Note: multi-value insert is usually faster for analytics DBs\n        and tables containing a few columns\n        but performance degrades quickly with increase of columns.\n        \"\"\"\n\n        from sqlalchemy import insert\n\n        data = [dict(zip(keys, row)) for row in data_iter]\n        stmt = insert(self.table).values(data)\n        result = conn.execute(stmt)\n        return result.rowcount\n\n    def insert_data(self) -> tuple[list[str], list[np.ndarray]]:\n        if self.index is not None:\n            temp = self.frame.copy()\n            temp.index.names = self.index\n            try:\n                temp.reset_index(inplace=True)\n            except ValueError as err:\n                raise ValueError(f\"duplicate name in index/columns: {err}\") from err\n        else:\n            temp = self.frame\n\n        column_names = list(map(str, temp.columns))\n        ncols = len(column_names)\n        # this just pre-allocates the list: None's will be replaced with ndarrays\n        # error: List item 0 has incompatible type \"None\"; expected \"ndarray\"\n        data_list: list[np.ndarray] = [None] * ncols  # type: ignore[list-item]\n\n        for i, (_, ser) in enumerate(temp.items()):\n            vals = ser._values\n            if vals.dtype.kind == \"M\":\n                d = vals.to_pydatetime()\n            elif vals.dtype.kind == \"m\":\n                # store as integers, see GH#6921, GH#7076\n                d = vals.view(\"i8\").astype(object)\n            else:\n                d = vals.astype(object)\n\n            assert isinstance(d, np.ndarray), type(d)\n\n            if ser._can_hold_na:\n                # Note: this will miss timedeltas since they are converted to int\n                mask = isna(d)\n                d[mask] = None\n\n            data_list[i] = d\n\n        return column_names, data_list\n\n    def insert(\n        self, chunksize: int | None = None, method: str | None = None\n    ) -> int | None:\n\n        # set insert method\n        if method is None:\n            exec_insert = self._execute_insert\n        elif method == \"multi\":\n            exec_insert = self._execute_insert_multi\n        elif callable(method):\n            exec_insert = partial(method, self)\n        else:\n            raise ValueError(f\"Invalid parameter `method`: {method}\")\n\n        keys, data_list = self.insert_data()\n\n        nrows = len(self.frame)\n\n        if nrows == 0:\n            return 0\n\n        if chunksize is None:\n            chunksize = nrows\n        elif chunksize == 0:\n            raise ValueError(\"chunksize argument should be non-zero\")\n\n        chunks = (nrows // chunksize) + 1\n        total_inserted = None\n        with self.pd_sql.run_transaction() as conn:\n            for i in range(chunks):\n                start_i = i * chunksize\n                end_i = min((i + 1) * chunksize, nrows)\n                if start_i >= end_i:\n                    break\n\n                chunk_iter = zip(*(arr[start_i:end_i] for arr in data_list))\n                num_inserted = exec_insert(conn, keys, chunk_iter)\n                # GH 46891\n                if is_integer(num_inserted):\n                    if total_inserted is None:\n                        total_inserted = num_inserted\n                    else:\n                        total_inserted += num_inserted\n        return total_inserted\n\n    def _query_iterator(\n        self,\n        result,\n        chunksize: str | None,\n        columns,\n        coerce_float: bool = True,\n        parse_dates=None,\n    ):\n        \"\"\"Return generator through chunked result set.\"\"\"\n        has_read_data = False\n        while True:\n            data = result.fetchmany(chunksize)\n            if not data:\n                if not has_read_data:\n                    yield DataFrame.from_records(\n                        [], columns=columns, coerce_float=coerce_float\n                    )\n                break\n\n            has_read_data = True\n            self.frame = DataFrame.from_records(\n                data, columns=columns, coerce_float=coerce_float\n            )\n\n            self._harmonize_columns(parse_dates=parse_dates)\n\n            if self.index is not None:\n                self.frame.set_index(self.index, inplace=True)\n\n            yield self.frame\n\n    def read(\n        self,\n        coerce_float: bool = True,\n        parse_dates=None,\n        columns=None,\n        chunksize=None,\n    ) -> DataFrame | Iterator[DataFrame]:\n        from sqlalchemy import select\n\n        if columns is not None and len(columns) > 0:\n            cols = [self.table.c[n] for n in columns]\n            if self.index is not None:\n                for idx in self.index[::-1]:\n                    cols.insert(0, self.table.c[idx])\n            sql_select = select(*cols)\n        else:\n            sql_select = select(self.table)\n        result = self.pd_sql.execute(sql_select)\n        column_names = result.keys()\n\n        if chunksize is not None:\n            return self._query_iterator(\n                result,\n                chunksize,\n                column_names,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n            )\n        else:\n            data = result.fetchall()\n            self.frame = DataFrame.from_records(\n                data, columns=column_names, coerce_float=coerce_float\n            )\n\n            self._harmonize_columns(parse_dates=parse_dates)\n\n            if self.index is not None:\n                self.frame.set_index(self.index, inplace=True)\n\n            return self.frame\n\n    def _index_name(self, index, index_label):\n        # for writing: index=True to include index in sql table\n        if index is True:\n            nlevels = self.frame.index.nlevels\n            # if index_label is specified, set this as index name(s)\n            if index_label is not None:\n                if not isinstance(index_label, list):\n                    index_label = [index_label]\n                if len(index_label) != nlevels:\n                    raise ValueError(\n                        \"Length of 'index_label' should match number of \"\n                        f\"levels, which is {nlevels}\"\n                    )\n                return index_label\n            # return the used column labels for the index columns\n            if (\n                nlevels == 1\n                and \"index\" not in self.frame.columns\n                and self.frame.index.name is None\n            ):\n                return [\"index\"]\n            else:\n                return com.fill_missing_names(self.frame.index.names)\n\n        # for reading: index=(list of) string to specify column to set as index\n        elif isinstance(index, str):\n            return [index]\n        elif isinstance(index, list):\n            return index\n        else:\n            return None\n\n    def _get_column_names_and_types(self, dtype_mapper):\n        column_names_and_types = []\n        if self.index is not None:\n            for i, idx_label in enumerate(self.index):\n                idx_type = dtype_mapper(self.frame.index._get_level_values(i))\n                column_names_and_types.append((str(idx_label), idx_type, True))\n\n        column_names_and_types += [\n            (str(self.frame.columns[i]), dtype_mapper(self.frame.iloc[:, i]), False)\n            for i in range(len(self.frame.columns))\n        ]\n\n        return column_names_and_types\n\n    def _create_table_setup(self):\n        from sqlalchemy import (\n            Column,\n            PrimaryKeyConstraint,\n            Table,\n        )\n        from sqlalchemy.schema import MetaData\n\n        column_names_and_types = self._get_column_names_and_types(self._sqlalchemy_type)\n\n        columns = [\n            Column(name, typ, index=is_index)\n            for name, typ, is_index in column_names_and_types\n        ]\n\n        if self.keys is not None:\n            if not is_list_like(self.keys):\n                keys = [self.keys]\n            else:\n                keys = self.keys\n            pkc = PrimaryKeyConstraint(*keys, name=self.name + \"_pk\")\n            columns.append(pkc)\n\n        schema = self.schema or self.pd_sql.meta.schema\n\n        # At this point, attach to new metadata, only attach to self.meta\n        # once table is created.\n        meta = MetaData()\n        return Table(self.name, meta, *columns, schema=schema)\n\n    def _harmonize_columns(self, parse_dates=None) -> None:\n        \"\"\"\n        Make the DataFrame's column types align with the SQL table\n        column types.\n        Need to work around limited NA value support. Floats are always\n        fine, ints must always be floats if there are Null values.\n        Booleans are hard because converting bool column with None replaces\n        all Nones with false. Therefore only convert bool if there are no\n        NA values.\n        Datetimes should already be converted to np.datetime64 if supported,\n        but here we also force conversion if required.\n        \"\"\"\n        parse_dates = _process_parse_dates_argument(parse_dates)\n\n        for sql_col in self.table.columns:\n            col_name = sql_col.name\n            try:\n                df_col = self.frame[col_name]\n\n                # Handle date parsing upfront; don't try to convert columns\n                # twice\n                if col_name in parse_dates:\n                    try:\n                        fmt = parse_dates[col_name]\n                    except TypeError:\n                        fmt = None\n                    self.frame[col_name] = _handle_date_column(df_col, format=fmt)\n                    continue\n\n                # the type the dataframe column should have\n                col_type = self._get_dtype(sql_col.type)\n\n                if (\n                    col_type is datetime\n                    or col_type is date\n                    or col_type is DatetimeTZDtype\n                ):\n                    # Convert tz-aware Datetime SQL columns to UTC\n                    utc = col_type is DatetimeTZDtype\n                    self.frame[col_name] = _handle_date_column(df_col, utc=utc)\n                elif col_type is float:\n                    # floats support NA, can always convert!\n                    self.frame[col_name] = df_col.astype(col_type, copy=False)\n\n                elif len(df_col) == df_col.count():\n                    # No NA values, can convert ints and bools\n                    if col_type is np.dtype(\"int64\") or col_type is bool:\n                        self.frame[col_name] = df_col.astype(col_type, copy=False)\n            except KeyError:\n                pass  # this column not in results\n\n    def _sqlalchemy_type(self, col):\n\n        dtype: DtypeArg = self.dtype or {}\n        if is_dict_like(dtype):\n            dtype = cast(dict, dtype)\n            if col.name in dtype:\n                return dtype[col.name]\n\n        # Infer type of column, while ignoring missing values.\n        # Needed for inserting typed data containing NULLs, GH 8778.\n        col_type = lib.infer_dtype(col, skipna=True)\n\n        from sqlalchemy.types import (\n            TIMESTAMP,\n            BigInteger,\n            Boolean,\n            Date,\n            DateTime,\n            Float,\n            Integer,\n            SmallInteger,\n            Text,\n            Time,\n        )\n\n        if col_type in (\"datetime64\", \"datetime\"):\n            # GH 9086: TIMESTAMP is the suggested type if the column contains\n            # timezone information\n            try:\n                if col.dt.tz is not None:\n                    return TIMESTAMP(timezone=True)\n            except AttributeError:\n                # The column is actually a DatetimeIndex\n                # GH 26761 or an Index with date-like data e.g. 9999-01-01\n                if getattr(col, \"tz\", None) is not None:\n                    return TIMESTAMP(timezone=True)\n            return DateTime\n        if col_type == \"timedelta64\":\n            warnings.warn(\n                \"the 'timedelta' type is not supported, and will be \"\n                \"written as integer values (ns frequency) to the database.\",\n                UserWarning,\n                stacklevel=find_stack_level(),\n            )\n            return BigInteger\n        elif col_type == \"floating\":\n            if col.dtype == \"float32\":\n                return Float(precision=23)\n            else:\n                return Float(precision=53)\n        elif col_type == \"integer\":\n            # GH35076 Map pandas integer to optimal SQLAlchemy integer type\n            if col.dtype.name.lower() in (\"int8\", \"uint8\", \"int16\"):\n                return SmallInteger\n            elif col.dtype.name.lower() in (\"uint16\", \"int32\"):\n                return Integer\n            elif col.dtype.name.lower() == \"uint64\":\n                raise ValueError(\"Unsigned 64 bit integer datatype is not supported\")\n            else:\n                return BigInteger\n        elif col_type == \"boolean\":\n            return Boolean\n        elif col_type == \"date\":\n            return Date\n        elif col_type == \"time\":\n            return Time\n        elif col_type == \"complex\":\n            raise ValueError(\"Complex datatypes not supported\")\n\n        return Text\n\n    def _get_dtype(self, sqltype):\n        from sqlalchemy.types import (\n            TIMESTAMP,\n            Boolean,\n            Date,\n            DateTime,\n            Float,\n            Integer,\n        )\n\n        if isinstance(sqltype, Float):\n            return float\n        elif isinstance(sqltype, Integer):\n            # TODO: Refine integer size.\n            return np.dtype(\"int64\")\n        elif isinstance(sqltype, TIMESTAMP):\n            # we have a timezone capable type\n            if not sqltype.timezone:\n                return datetime\n            return DatetimeTZDtype\n        elif isinstance(sqltype, DateTime):\n            # Caution: np.datetime64 is also a subclass of np.number.\n            return datetime\n        elif isinstance(sqltype, Date):\n            return date\n        elif isinstance(sqltype, Boolean):\n            return bool\n        return object\n\n\nclass PandasSQL(PandasObject):\n    \"\"\"\n    Subclasses Should define read_sql and to_sql.\n    \"\"\"\n\n    def read_sql(self, *args, **kwargs):\n        raise ValueError(\n            \"PandasSQL must be created with an SQLAlchemy \"\n            \"connectable or sqlite connection\"\n        )\n\n    def to_sql(\n        self,\n        frame,\n        name,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        index: bool = True,\n        index_label=None,\n        schema=None,\n        chunksize=None,\n        dtype: DtypeArg | None = None,\n        method=None,\n    ) -> int | None:\n        raise ValueError(\n            \"PandasSQL must be created with an SQLAlchemy \"\n            \"connectable or sqlite connection\"\n        )\n\n\nclass BaseEngine:\n    def insert_records(\n        self,\n        table: SQLTable,\n        con,\n        frame,\n        name,\n        index: bool | str | list[str] | None = True,\n        schema=None,\n        chunksize=None,\n        method=None,\n        **engine_kwargs,\n    ) -> int | None:\n        \"\"\"\n        Inserts data into already-prepared table\n        \"\"\"\n        raise AbstractMethodError(self)\n\n\nclass SQLAlchemyEngine(BaseEngine):\n    def __init__(self) -> None:\n        import_optional_dependency(\n            \"sqlalchemy\", extra=\"sqlalchemy is required for SQL support.\"\n        )\n\n    def insert_records(\n        self,\n        table: SQLTable,\n        con,\n        frame,\n        name,\n        index: bool | str | list[str] | None = True,\n        schema=None,\n        chunksize=None,\n        method=None,\n        **engine_kwargs,\n    ) -> int | None:\n        from sqlalchemy import exc\n\n        try:\n            return table.insert(chunksize=chunksize, method=method)\n        except exc.SQLAlchemyError as err:\n            # GH34431\n            # https://stackoverflow.com/a/67358288/6067848\n            msg = r\"\"\"(\\(1054, \"Unknown column 'inf(e0)?' in 'field list'\"\\))(?#\n            )|inf can not be used with MySQL\"\"\"\n            err_text = str(err.orig)\n            if re.search(msg, err_text):\n                raise ValueError(\"inf cannot be used with MySQL\") from err\n            raise err\n\n\ndef get_engine(engine: str) -> BaseEngine:\n    \"\"\"return our implementation\"\"\"\n    if engine == \"auto\":\n        engine = get_option(\"io.sql.engine\")\n\n    if engine == \"auto\":\n        # try engines in this order\n        engine_classes = [SQLAlchemyEngine]\n\n        error_msgs = \"\"\n        for engine_class in engine_classes:\n            try:\n                return engine_class()\n            except ImportError as err:\n                error_msgs += \"\\n - \" + str(err)\n\n        raise ImportError(\n            \"Unable to find a usable engine; \"\n            \"tried using: 'sqlalchemy'.\\n\"\n            \"A suitable version of \"\n            \"sqlalchemy is required for sql I/O \"\n            \"support.\\n\"\n            \"Trying to import the above resulted in these errors:\"\n            f\"{error_msgs}\"\n        )\n\n    if engine == \"sqlalchemy\":\n        return SQLAlchemyEngine()\n\n    raise ValueError(\"engine must be one of 'auto', 'sqlalchemy'\")\n\n\nclass SQLDatabase(PandasSQL):\n    \"\"\"\n    This class enables conversion between DataFrame and SQL databases\n    using SQLAlchemy to handle DataBase abstraction.\n\n    Parameters\n    ----------\n    engine : SQLAlchemy connectable\n        Connectable to connect with the database. Using SQLAlchemy makes it\n        possible to use any DB supported by that library.\n    schema : string, default None\n        Name of SQL schema in database to write to (if database flavor\n        supports this). If None, use default schema (default).\n\n    \"\"\"\n\n    def __init__(self, engine, schema: str | None = None) -> None:\n        from sqlalchemy.schema import MetaData\n\n        self.connectable = engine\n        self.meta = MetaData(schema=schema)\n\n    @contextmanager\n    def run_transaction(self):\n        from sqlalchemy.engine import Engine\n\n        if isinstance(self.connectable, Engine):\n            with self.connectable.connect() as conn:\n                with conn.begin():\n                    yield conn\n        else:\n            yield self.connectable\n\n    def execute(self, *args, **kwargs):\n        \"\"\"Simple passthrough to SQLAlchemy connectable\"\"\"\n        return self.connectable.execution_options().execute(*args, **kwargs)\n\n    def read_table(\n        self,\n        table_name: str,\n        index_col: str | list[str] | None = None,\n        coerce_float: bool = True,\n        parse_dates=None,\n        columns=None,\n        schema: str | None = None,\n        chunksize: int | None = None,\n    ) -> DataFrame | Iterator[DataFrame]:\n        \"\"\"\n        Read SQL database table into a DataFrame.\n\n        Parameters\n        ----------\n        table_name : str\n            Name of SQL table in database.\n        index_col : string, optional, default: None\n            Column to set as index.\n        coerce_float : bool, default True\n            Attempts to convert values of non-string, non-numeric objects\n            (like decimal.Decimal) to floating point. This can result in\n            loss of precision.\n        parse_dates : list or dict, default: None\n            - List of column names to parse as dates.\n            - Dict of ``{column_name: format string}`` where format string is\n              strftime compatible in case of parsing string times, or is one of\n              (D, s, ns, ms, us) in case of parsing integer timestamps.\n            - Dict of ``{column_name: arg}``, where the arg corresponds\n              to the keyword arguments of :func:`pandas.to_datetime`.\n              Especially useful with databases without native Datetime support,\n              such as SQLite.\n        columns : list, default: None\n            List of column names to select from SQL table.\n        schema : string, default None\n            Name of SQL schema in database to query (if database flavor\n            supports this).  If specified, this overwrites the default\n            schema of the SQL database object.\n        chunksize : int, default None\n            If specified, return an iterator where `chunksize` is the number\n            of rows to include in each chunk.\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        pandas.read_sql_table\n        SQLDatabase.read_query\n\n        \"\"\"\n        table = SQLTable(table_name, self, index=index_col, schema=schema)\n        return table.read(\n            coerce_float=coerce_float,\n            parse_dates=parse_dates,\n            columns=columns,\n            chunksize=chunksize,\n        )\n\n    @staticmethod\n    def _query_iterator(\n        result,\n        chunksize: int,\n        columns,\n        index_col=None,\n        coerce_float: bool = True,\n        parse_dates=None,\n        dtype: DtypeArg | None = None,\n    ):\n        \"\"\"Return generator through chunked result set\"\"\"\n        has_read_data = False\n        while True:\n            data = result.fetchmany(chunksize)\n            if not data:\n                if not has_read_data:\n                    yield _wrap_result(\n                        [],\n                        columns,\n                        index_col=index_col,\n                        coerce_float=coerce_float,\n                        parse_dates=parse_dates,\n                    )\n                break\n\n            has_read_data = True\n            yield _wrap_result(\n                data,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n\n    def read_query(\n        self,\n        sql: str,\n        index_col: str | list[str] | None = None,\n        coerce_float: bool = True,\n        parse_dates=None,\n        params=None,\n        chunksize: int | None = None,\n        dtype: DtypeArg | None = None,\n    ) -> DataFrame | Iterator[DataFrame]:\n        \"\"\"\n        Read SQL query into a DataFrame.\n\n        Parameters\n        ----------\n        sql : str\n            SQL query to be executed.\n        index_col : string, optional, default: None\n            Column name to use as index for the returned DataFrame object.\n        coerce_float : bool, default True\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets.\n        params : list, tuple or dict, optional, default: None\n            List of parameters to pass to execute method.  The syntax used\n            to pass parameters is database driver dependent. Check your\n            database driver documentation for which of the five syntax styles,\n            described in PEP 249's paramstyle, is supported.\n            Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}\n        parse_dates : list or dict, default: None\n            - List of column names to parse as dates.\n            - Dict of ``{column_name: format string}`` where format string is\n              strftime compatible in case of parsing string times, or is one of\n              (D, s, ns, ms, us) in case of parsing integer timestamps.\n            - Dict of ``{column_name: arg dict}``, where the arg dict\n              corresponds to the keyword arguments of\n              :func:`pandas.to_datetime` Especially useful with databases\n              without native Datetime support, such as SQLite.\n        chunksize : int, default None\n            If specified, return an iterator where `chunksize` is the number\n            of rows to include in each chunk.\n        dtype : Type name or dict of columns\n            Data type for data or columns. E.g. np.float64 or\n            {‘a’: np.float64, ‘b’: np.int32, ‘c’: ‘Int64’}\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        read_sql_table : Read SQL database table into a DataFrame.\n        read_sql\n\n        \"\"\"\n        args = _convert_params(sql, params)\n\n        result = self.execute(*args)\n        columns = result.keys()\n\n        if chunksize is not None:\n            return self._query_iterator(\n                result,\n                chunksize,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n        else:\n            data = result.fetchall()\n            frame = _wrap_result(\n                data,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n            return frame\n\n    read_sql = read_query\n\n    def prep_table(\n        self,\n        frame,\n        name,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        index: bool | str | list[str] | None = True,\n        index_label=None,\n        schema=None,\n        dtype: DtypeArg | None = None,\n    ) -> SQLTable:\n        \"\"\"\n        Prepares table in the database for data insertion. Creates it if needed, etc.\n        \"\"\"\n        if dtype:\n            if not is_dict_like(dtype):\n                # error: Value expression in dictionary comprehension has incompatible\n                # type \"Union[ExtensionDtype, str, dtype[Any], Type[object],\n                # Dict[Hashable, Union[ExtensionDtype, Union[str, dtype[Any]],\n                # Type[str], Type[float], Type[int], Type[complex], Type[bool],\n                # Type[object]]]]\"; expected type \"Union[ExtensionDtype, str,\n                # dtype[Any], Type[object]]\"\n                dtype = {col_name: dtype for col_name in frame}  # type: ignore[misc]\n            else:\n                dtype = cast(dict, dtype)\n\n            from sqlalchemy.types import (\n                TypeEngine,\n                to_instance,\n            )\n\n            for col, my_type in dtype.items():\n                if not isinstance(to_instance(my_type), TypeEngine):\n                    raise ValueError(f\"The type of {col} is not a SQLAlchemy type\")\n\n        table = SQLTable(\n            name,\n            self,\n            frame=frame,\n            index=index,\n            if_exists=if_exists,\n            index_label=index_label,\n            schema=schema,\n            dtype=dtype,\n        )\n        table.create()\n        return table\n\n    def check_case_sensitive(\n        self,\n        name: str,\n        schema: str | None,\n    ) -> None:\n        \"\"\"\n        Checks table name for issues with case-sensitivity.\n        Method is called after data is inserted.\n        \"\"\"\n        if not name.isdigit() and not name.islower():\n            # check for potentially case sensitivity issues (GH7815)\n            # Only check when name is not a number and name is not lower case\n            from sqlalchemy import inspect as sqlalchemy_inspect\n\n            with self.connectable.connect() as conn:\n                insp = sqlalchemy_inspect(conn)\n                table_names = insp.get_table_names(schema=schema or self.meta.schema)\n            if name not in table_names:\n                msg = (\n                    f\"The provided table name '{name}' is not found exactly as \"\n                    \"such in the database after writing the table, possibly \"\n                    \"due to case sensitivity issues. Consider using lower \"\n                    \"case table names.\"\n                )\n                warnings.warn(\n                    msg,\n                    UserWarning,\n                    stacklevel=find_stack_level(),\n                )\n\n    def to_sql(\n        self,\n        frame,\n        name: str,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        index: bool = True,\n        index_label=None,\n        schema: str | None = None,\n        chunksize=None,\n        dtype: DtypeArg | None = None,\n        method=None,\n        engine: str = \"auto\",\n        **engine_kwargs,\n    ) -> int | None:\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Parameters\n        ----------\n        frame : DataFrame\n        name : string\n            Name of SQL table.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            - fail: If table exists, do nothing.\n            - replace: If table exists, drop it, recreate it, and insert data.\n            - append: If table exists, insert data. Create if does not exist.\n        index : boolean, default True\n            Write DataFrame index as a column.\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        schema : string, default None\n            Name of SQL schema in database to write to (if database flavor\n            supports this). If specified, this overwrites the default\n            schema of the SQLDatabase object.\n        chunksize : int, default None\n            If not None, then rows will be written in batches of this size at a\n            time.  If None, all rows will be written at once.\n        dtype : single type or dict of column name to SQL type, default None\n            Optional specifying the datatype for columns. The SQL type should\n            be a SQLAlchemy type. If all columns are of the same type, one\n            single value can be used.\n        method : {None', 'multi', callable}, default None\n            Controls the SQL insertion clause used:\n\n            * None : Uses standard SQL ``INSERT`` clause (one per row).\n            * 'multi': Pass multiple values in a single ``INSERT`` clause.\n            * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n            Details and a sample callable implementation can be found in the\n            section :ref:`insert method <io.sql.method>`.\n        engine : {'auto', 'sqlalchemy'}, default 'auto'\n            SQL engine library to use. If 'auto', then the option\n            ``io.sql.engine`` is used. The default ``io.sql.engine``\n            behavior is 'sqlalchemy'\n\n            .. versionadded:: 1.3.0\n\n        **engine_kwargs\n            Any additional kwargs are passed to the engine.\n        \"\"\"\n        sql_engine = get_engine(engine)\n\n        table = self.prep_table(\n            frame=frame,\n            name=name,\n            if_exists=if_exists,\n            index=index,\n            index_label=index_label,\n            schema=schema,\n            dtype=dtype,\n        )\n\n        total_inserted = sql_engine.insert_records(\n            table=table,\n            con=self.connectable,\n            frame=frame,\n            name=name,\n            index=index,\n            schema=schema,\n            chunksize=chunksize,\n            method=method,\n            **engine_kwargs,\n        )\n\n        self.check_case_sensitive(name=name, schema=schema)\n        return total_inserted\n\n    @property\n    def tables(self):\n        return self.meta.tables\n\n    def has_table(self, name: str, schema: str | None = None):\n        from sqlalchemy import inspect as sqlalchemy_inspect\n\n        insp = sqlalchemy_inspect(self.connectable)\n        return insp.has_table(name, schema or self.meta.schema)\n\n    def get_table(self, table_name: str, schema: str | None = None) -> Table:\n        from sqlalchemy import (\n            Numeric,\n            Table,\n        )\n\n        schema = schema or self.meta.schema\n        tbl = Table(\n            table_name, self.meta, autoload_with=self.connectable, schema=schema\n        )\n        for column in tbl.columns:\n            if isinstance(column.type, Numeric):\n                column.type.asdecimal = False\n        return tbl\n\n    def drop_table(self, table_name: str, schema: str | None = None) -> None:\n        schema = schema or self.meta.schema\n        if self.has_table(table_name, schema):\n            self.meta.reflect(bind=self.connectable, only=[table_name], schema=schema)\n            self.get_table(table_name, schema).drop(bind=self.connectable)\n            self.meta.clear()\n\n    def _create_sql_schema(\n        self,\n        frame: DataFrame,\n        table_name: str,\n        keys: list[str] | None = None,\n        dtype: DtypeArg | None = None,\n        schema: str | None = None,\n    ):\n        table = SQLTable(\n            table_name,\n            self,\n            frame=frame,\n            index=False,\n            keys=keys,\n            dtype=dtype,\n            schema=schema,\n        )\n        return str(table.sql_schema())\n\n\n# ---- SQL without SQLAlchemy ---\n# sqlite-specific sql strings and handler class\n# dictionary used for readability purposes\n_SQL_TYPES = {\n    \"string\": \"TEXT\",\n    \"floating\": \"REAL\",\n    \"integer\": \"INTEGER\",\n    \"datetime\": \"TIMESTAMP\",\n    \"date\": \"DATE\",\n    \"time\": \"TIME\",\n    \"boolean\": \"INTEGER\",\n}\n\n\ndef _get_unicode_name(name):\n    try:\n        uname = str(name).encode(\"utf-8\", \"strict\").decode(\"utf-8\")\n    except UnicodeError as err:\n        raise ValueError(f\"Cannot convert identifier to UTF-8: '{name}'\") from err\n    return uname\n\n\ndef _get_valid_sqlite_name(name):\n    # See https://stackoverflow.com/questions/6514274/how-do-you-escape-strings\\\n    # -for-sqlite-table-column-names-in-python\n    # Ensure the string can be encoded as UTF-8.\n    # Ensure the string does not include any NUL characters.\n    # Replace all \" with \"\".\n    # Wrap the entire thing in double quotes.\n\n    uname = _get_unicode_name(name)\n    if not len(uname):\n        raise ValueError(\"Empty table or column name specified\")\n\n    nul_index = uname.find(\"\\x00\")\n    if nul_index >= 0:\n        raise ValueError(\"SQLite identifier cannot contain NULs\")\n    return '\"' + uname.replace('\"', '\"\"') + '\"'\n\n\nclass SQLiteTable(SQLTable):\n    \"\"\"\n    Patch the SQLTable for fallback support.\n    Instead of a table variable just use the Create Table statement.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs) -> None:\n        # GH 8341\n        # register an adapter callable for datetime.time object\n        import sqlite3\n\n        # this will transform time(12,34,56,789) into '12:34:56.000789'\n        # (this is what sqlalchemy does)\n        def _adapt_time(t) -> str:\n            # This is faster than strftime\n            return f\"{t.hour:02d}:{t.minute:02d}:{t.second:02d}.{t.microsecond:06d}\"\n\n        sqlite3.register_adapter(time, _adapt_time)\n        super().__init__(*args, **kwargs)\n\n    def sql_schema(self) -> str:\n        return str(\";\\n\".join(self.table))\n\n    def _execute_create(self) -> None:\n        with self.pd_sql.run_transaction() as conn:\n            for stmt in self.table:\n                conn.execute(stmt)\n\n    def insert_statement(self, *, num_rows: int) -> str:\n        names = list(map(str, self.frame.columns))\n        wld = \"?\"  # wildcard char\n        escape = _get_valid_sqlite_name\n\n        if self.index is not None:\n            for idx in self.index[::-1]:\n                names.insert(0, idx)\n\n        bracketed_names = [escape(column) for column in names]\n        col_names = \",\".join(bracketed_names)\n\n        row_wildcards = \",\".join([wld] * len(names))\n        wildcards = \",\".join([f\"({row_wildcards})\" for _ in range(num_rows)])\n        insert_statement = (\n            f\"INSERT INTO {escape(self.name)} ({col_names}) VALUES {wildcards}\"\n        )\n        return insert_statement\n\n    def _execute_insert(self, conn, keys, data_iter) -> int:\n        data_list = list(data_iter)\n        conn.executemany(self.insert_statement(num_rows=1), data_list)\n        return conn.rowcount\n\n    def _execute_insert_multi(self, conn, keys, data_iter) -> int:\n        data_list = list(data_iter)\n        flattened_data = [x for row in data_list for x in row]\n        conn.execute(self.insert_statement(num_rows=len(data_list)), flattened_data)\n        return conn.rowcount\n\n    def _create_table_setup(self):\n        \"\"\"\n        Return a list of SQL statements that creates a table reflecting the\n        structure of a DataFrame.  The first entry will be a CREATE TABLE\n        statement while the rest will be CREATE INDEX statements.\n        \"\"\"\n        column_names_and_types = self._get_column_names_and_types(self._sql_type_name)\n        escape = _get_valid_sqlite_name\n\n        create_tbl_stmts = [\n            escape(cname) + \" \" + ctype for cname, ctype, _ in column_names_and_types\n        ]\n\n        if self.keys is not None and len(self.keys):\n            if not is_list_like(self.keys):\n                keys = [self.keys]\n            else:\n                keys = self.keys\n            cnames_br = \", \".join([escape(c) for c in keys])\n            create_tbl_stmts.append(\n                f\"CONSTRAINT {self.name}_pk PRIMARY KEY ({cnames_br})\"\n            )\n        if self.schema:\n            schema_name = self.schema + \".\"\n        else:\n            schema_name = \"\"\n        create_stmts = [\n            \"CREATE TABLE \"\n            + schema_name\n            + escape(self.name)\n            + \" (\\n\"\n            + \",\\n  \".join(create_tbl_stmts)\n            + \"\\n)\"\n        ]\n\n        ix_cols = [cname for cname, _, is_index in column_names_and_types if is_index]\n        if len(ix_cols):\n            cnames = \"_\".join(ix_cols)\n            cnames_br = \",\".join([escape(c) for c in ix_cols])\n            create_stmts.append(\n                \"CREATE INDEX \"\n                + escape(\"ix_\" + self.name + \"_\" + cnames)\n                + \"ON \"\n                + escape(self.name)\n                + \" (\"\n                + cnames_br\n                + \")\"\n            )\n\n        return create_stmts\n\n    def _sql_type_name(self, col):\n        dtype: DtypeArg = self.dtype or {}\n        if is_dict_like(dtype):\n            dtype = cast(dict, dtype)\n            if col.name in dtype:\n                return dtype[col.name]\n\n        # Infer type of column, while ignoring missing values.\n        # Needed for inserting typed data containing NULLs, GH 8778.\n        col_type = lib.infer_dtype(col, skipna=True)\n\n        if col_type == \"timedelta64\":\n            warnings.warn(\n                \"the 'timedelta' type is not supported, and will be \"\n                \"written as integer values (ns frequency) to the database.\",\n                UserWarning,\n                stacklevel=find_stack_level(),\n            )\n            col_type = \"integer\"\n\n        elif col_type == \"datetime64\":\n            col_type = \"datetime\"\n\n        elif col_type == \"empty\":\n            col_type = \"string\"\n\n        elif col_type == \"complex\":\n            raise ValueError(\"Complex datatypes not supported\")\n\n        if col_type not in _SQL_TYPES:\n            col_type = \"string\"\n\n        return _SQL_TYPES[col_type]\n\n\nclass SQLiteDatabase(PandasSQL):\n    \"\"\"\n    Version of SQLDatabase to support SQLite connections (fallback without\n    SQLAlchemy). This should only be used internally.\n\n    Parameters\n    ----------\n    con : sqlite connection object\n\n    \"\"\"\n\n    def __init__(self, con) -> None:\n        self.con = con\n\n    @contextmanager\n    def run_transaction(self):\n        cur = self.con.cursor()\n        try:\n            yield cur\n            self.con.commit()\n        except Exception:\n            self.con.rollback()\n            raise\n        finally:\n            cur.close()\n\n    def execute(self, *args, **kwargs):\n        cur = self.con.cursor()\n        try:\n            cur.execute(*args, **kwargs)\n            return cur\n        except Exception as exc:\n            try:\n                self.con.rollback()\n            except Exception as inner_exc:  # pragma: no cover\n                ex = DatabaseError(\n                    f\"Execution failed on sql: {args[0]}\\n{exc}\\nunable to rollback\"\n                )\n                raise ex from inner_exc\n\n            ex = DatabaseError(f\"Execution failed on sql '{args[0]}': {exc}\")\n            raise ex from exc\n\n    @staticmethod\n    def _query_iterator(\n        cursor,\n        chunksize: int,\n        columns,\n        index_col=None,\n        coerce_float: bool = True,\n        parse_dates=None,\n        dtype: DtypeArg | None = None,\n    ):\n        \"\"\"Return generator through chunked result set\"\"\"\n        has_read_data = False\n        while True:\n            data = cursor.fetchmany(chunksize)\n            if type(data) == tuple:\n                data = list(data)\n            if not data:\n                cursor.close()\n                if not has_read_data:\n                    yield DataFrame.from_records(\n                        [], columns=columns, coerce_float=coerce_float\n                    )\n                break\n\n            has_read_data = True\n            yield _wrap_result(\n                data,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n\n    def read_query(\n        self,\n        sql,\n        index_col=None,\n        coerce_float: bool = True,\n        params=None,\n        parse_dates=None,\n        chunksize: int | None = None,\n        dtype: DtypeArg | None = None,\n    ) -> DataFrame | Iterator[DataFrame]:\n\n        args = _convert_params(sql, params)\n        cursor = self.execute(*args)\n        columns = [col_desc[0] for col_desc in cursor.description]\n\n        if chunksize is not None:\n            return self._query_iterator(\n                cursor,\n                chunksize,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n        else:\n            data = self._fetchall_as_list(cursor)\n            cursor.close()\n\n            frame = _wrap_result(\n                data,\n                columns,\n                index_col=index_col,\n                coerce_float=coerce_float,\n                parse_dates=parse_dates,\n                dtype=dtype,\n            )\n            return frame\n\n    def _fetchall_as_list(self, cur):\n        result = cur.fetchall()\n        if not isinstance(result, list):\n            result = list(result)\n        return result\n\n    def to_sql(\n        self,\n        frame,\n        name,\n        if_exists: str = \"fail\",\n        index: bool = True,\n        index_label=None,\n        schema=None,\n        chunksize=None,\n        dtype: DtypeArg | None = None,\n        method=None,\n        **kwargs,\n    ) -> int | None:\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Parameters\n        ----------\n        frame: DataFrame\n        name: string\n            Name of SQL table.\n        if_exists: {'fail', 'replace', 'append'}, default 'fail'\n            fail: If table exists, do nothing.\n            replace: If table exists, drop it, recreate it, and insert data.\n            append: If table exists, insert data. Create if it does not exist.\n        index : bool, default True\n            Write DataFrame index as a column\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        schema : string, default None\n            Ignored parameter included for compatibility with SQLAlchemy\n            version of ``to_sql``.\n        chunksize : int, default None\n            If not None, then rows will be written in batches of this\n            size at a time. If None, all rows will be written at once.\n        dtype : single type or dict of column name to SQL type, default None\n            Optional specifying the datatype for columns. The SQL type should\n            be a string. If all columns are of the same type, one single value\n            can be used.\n        method : {None, 'multi', callable}, default None\n            Controls the SQL insertion clause used:\n\n            * None : Uses standard SQL ``INSERT`` clause (one per row).\n            * 'multi': Pass multiple values in a single ``INSERT`` clause.\n            * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n            Details and a sample callable implementation can be found in the\n            section :ref:`insert method <io.sql.method>`.\n        \"\"\"\n        if dtype:\n            if not is_dict_like(dtype):\n                # error: Value expression in dictionary comprehension has incompatible\n                # type \"Union[ExtensionDtype, str, dtype[Any], Type[object],\n                # Dict[Hashable, Union[ExtensionDtype, Union[str, dtype[Any]],\n                # Type[str], Type[float], Type[int], Type[complex], Type[bool],\n                # Type[object]]]]\"; expected type \"Union[ExtensionDtype, str,\n                # dtype[Any], Type[object]]\"\n                dtype = {col_name: dtype for col_name in frame}  # type: ignore[misc]\n            else:\n                dtype = cast(dict, dtype)\n\n            for col, my_type in dtype.items():\n                if not isinstance(my_type, str):\n                    raise ValueError(f\"{col} ({my_type}) not a string\")\n\n        table = SQLiteTable(\n            name,\n            self,\n            frame=frame,\n            index=index,\n            if_exists=if_exists,\n            index_label=index_label,\n            dtype=dtype,\n        )\n        table.create()\n        return table.insert(chunksize, method)\n\n    def has_table(self, name: str, schema: str | None = None) -> bool:\n\n        wld = \"?\"\n        query = f\"SELECT name FROM sqlite_master WHERE type='table' AND name={wld};\"\n\n        return len(self.execute(query, [name]).fetchall()) > 0\n\n    def get_table(self, table_name: str, schema: str | None = None) -> None:\n        return None  # not supported in fallback mode\n\n    def drop_table(self, name: str, schema: str | None = None) -> None:\n        drop_sql = f\"DROP TABLE {_get_valid_sqlite_name(name)}\"\n        self.execute(drop_sql)\n\n    def _create_sql_schema(\n        self,\n        frame,\n        table_name: str,\n        keys=None,\n        dtype: DtypeArg | None = None,\n        schema: str | None = None,\n    ):\n        table = SQLiteTable(\n            table_name,\n            self,\n            frame=frame,\n            index=False,\n            keys=keys,\n            dtype=dtype,\n            schema=schema,\n        )\n        return str(table.sql_schema())\n\n\ndef get_schema(\n    frame,\n    name: str,\n    keys=None,\n    con=None,\n    dtype: DtypeArg | None = None,\n    schema: str | None = None,\n) -> str:\n    \"\"\"\n    Get the SQL db table schema for the given frame.\n\n    Parameters\n    ----------\n    frame : DataFrame\n    name : str\n        name of SQL table\n    keys : string or sequence, default: None\n        columns to use a primary key\n    con: an open SQL database connection object or a SQLAlchemy connectable\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library, default: None\n        If a DBAPI2 object, only sqlite3 is supported.\n    dtype : dict of column name to SQL type, default None\n        Optional specifying the datatype for columns. The SQL type should\n        be a SQLAlchemy type, or a string for sqlite3 fallback connection.\n    schema: str, default: None\n        Optional specifying the schema to be used in creating the table.\n\n        .. versionadded:: 1.2.0\n    \"\"\"\n    pandas_sql = pandasSQL_builder(con=con)\n    return pandas_sql._create_sql_schema(\n        frame, name, keys=keys, dtype=dtype, schema=schema\n    )\n"
    },
    {
      "filename": "pandas/plotting/_matplotlib/core.py",
      "content": "from __future__ import annotations\n\nfrom abc import (\n    ABC,\n    abstractmethod,\n)\nfrom typing import (\n    TYPE_CHECKING,\n    Hashable,\n    Iterable,\n    Literal,\n    Sequence,\n)\nimport warnings\n\nimport matplotlib as mpl\nfrom matplotlib.artist import Artist\nimport numpy as np\n\nfrom pandas._typing import (\n    IndexLabel,\n    PlottingOrientation,\n    npt,\n)\nfrom pandas.errors import AbstractMethodError\nfrom pandas.util._decorators import cache_readonly\nfrom pandas.util._exceptions import find_stack_level\n\nfrom pandas.core.dtypes.common import (\n    is_categorical_dtype,\n    is_extension_array_dtype,\n    is_float,\n    is_float_dtype,\n    is_hashable,\n    is_integer,\n    is_integer_dtype,\n    is_iterator,\n    is_list_like,\n    is_number,\n    is_numeric_dtype,\n)\nfrom pandas.core.dtypes.generic import (\n    ABCDataFrame,\n    ABCIndex,\n    ABCMultiIndex,\n    ABCPeriodIndex,\n    ABCSeries,\n)\nfrom pandas.core.dtypes.missing import (\n    isna,\n    notna,\n)\n\nimport pandas.core.common as com\nfrom pandas.core.frame import DataFrame\n\nfrom pandas.io.formats.printing import pprint_thing\nfrom pandas.plotting._matplotlib.converter import register_pandas_matplotlib_converters\nfrom pandas.plotting._matplotlib.groupby import reconstruct_data_with_by\nfrom pandas.plotting._matplotlib.misc import unpack_single_str_list\nfrom pandas.plotting._matplotlib.style import get_standard_colors\nfrom pandas.plotting._matplotlib.timeseries import (\n    decorate_axes,\n    format_dateaxis,\n    maybe_convert_index,\n    maybe_resample,\n    use_dynamic_x,\n)\nfrom pandas.plotting._matplotlib.tools import (\n    create_subplots,\n    flatten_axes,\n    format_date_labels,\n    get_all_lines,\n    get_xlim,\n    handle_shared_axes,\n    table,\n)\n\nif TYPE_CHECKING:\n    from matplotlib.axes import Axes\n    from matplotlib.axis import Axis\n\n\ndef _color_in_style(style: str) -> bool:\n    \"\"\"\n    Check if there is a color letter in the style string.\n    \"\"\"\n    from matplotlib.colors import BASE_COLORS\n\n    return not set(BASE_COLORS).isdisjoint(style)\n\n\nclass MPLPlot(ABC):\n    \"\"\"\n    Base class for assembling a pandas plot using matplotlib\n\n    Parameters\n    ----------\n    data :\n\n    \"\"\"\n\n    @property\n    @abstractmethod\n    def _kind(self) -> str:\n        \"\"\"Specify kind str. Must be overridden in child class\"\"\"\n        raise NotImplementedError\n\n    _layout_type = \"vertical\"\n    _default_rot = 0\n\n    @property\n    def orientation(self) -> str | None:\n        return None\n\n    axes: np.ndarray  # of Axes objects\n\n    def __init__(\n        self,\n        data,\n        kind=None,\n        by: IndexLabel | None = None,\n        subplots: bool | Sequence[Sequence[str]] = False,\n        sharex=None,\n        sharey: bool = False,\n        use_index: bool = True,\n        figsize=None,\n        grid=None,\n        legend: bool | str = True,\n        rot=None,\n        ax=None,\n        fig=None,\n        title=None,\n        xlim=None,\n        ylim=None,\n        xticks=None,\n        yticks=None,\n        xlabel: Hashable | None = None,\n        ylabel: Hashable | None = None,\n        fontsize=None,\n        secondary_y: bool | tuple | list | np.ndarray = False,\n        colormap=None,\n        table: bool = False,\n        layout=None,\n        include_bool: bool = False,\n        column: IndexLabel | None = None,\n        **kwds,\n    ) -> None:\n\n        import matplotlib.pyplot as plt\n\n        self.data = data\n\n        # if users assign an empty list or tuple, raise `ValueError`\n        # similar to current `df.box` and `df.hist` APIs.\n        if by in ([], ()):\n            raise ValueError(\"No group keys passed!\")\n        self.by = com.maybe_make_list(by)\n\n        # Assign the rest of columns into self.columns if by is explicitly defined\n        # while column is not, only need `columns` in hist/box plot when it's DF\n        # TODO: Might deprecate `column` argument in future PR (#28373)\n        if isinstance(data, DataFrame):\n            if column:\n                self.columns = com.maybe_make_list(column)\n            else:\n                if self.by is None:\n                    self.columns = [\n                        col for col in data.columns if is_numeric_dtype(data[col])\n                    ]\n                else:\n                    self.columns = [\n                        col\n                        for col in data.columns\n                        if col not in self.by and is_numeric_dtype(data[col])\n                    ]\n\n        # For `hist` plot, need to get grouped original data before `self.data` is\n        # updated later\n        if self.by is not None and self._kind == \"hist\":\n            self._grouped = data.groupby(unpack_single_str_list(self.by))\n\n        self.kind = kind\n\n        self.subplots = self._validate_subplots_kwarg(subplots)\n\n        if sharex is None:\n\n            # if by is defined, subplots are used and sharex should be False\n            if ax is None and by is None:\n                self.sharex = True\n            else:\n                # if we get an axis, the users should do the visibility\n                # setting...\n                self.sharex = False\n        else:\n            self.sharex = sharex\n\n        self.sharey = sharey\n        self.figsize = figsize\n        self.layout = layout\n\n        self.xticks = xticks\n        self.yticks = yticks\n        self.xlim = xlim\n        self.ylim = ylim\n        self.title = title\n        self.use_index = use_index\n        self.xlabel = xlabel\n        self.ylabel = ylabel\n\n        self.fontsize = fontsize\n\n        if rot is not None:\n            self.rot = rot\n            # need to know for format_date_labels since it's rotated to 30 by\n            # default\n            self._rot_set = True\n        else:\n            self._rot_set = False\n            self.rot = self._default_rot\n\n        if grid is None:\n            grid = False if secondary_y else plt.rcParams[\"axes.grid\"]\n\n        self.grid = grid\n        self.legend = legend\n        self.legend_handles: list[Artist] = []\n        self.legend_labels: list[Hashable] = []\n\n        self.logx = kwds.pop(\"logx\", False)\n        self.logy = kwds.pop(\"logy\", False)\n        self.loglog = kwds.pop(\"loglog\", False)\n        self.label = kwds.pop(\"label\", None)\n        self.style = kwds.pop(\"style\", None)\n        self.mark_right = kwds.pop(\"mark_right\", True)\n        self.stacked = kwds.pop(\"stacked\", False)\n\n        self.ax = ax\n        self.fig = fig\n        self.axes = np.array([], dtype=object)  # \"real\" version get set in `generate`\n\n        # parse errorbar input if given\n        xerr = kwds.pop(\"xerr\", None)\n        yerr = kwds.pop(\"yerr\", None)\n        self.errors = {\n            kw: self._parse_errorbars(kw, err)\n            for kw, err in zip([\"xerr\", \"yerr\"], [xerr, yerr])\n        }\n\n        if not isinstance(secondary_y, (bool, tuple, list, np.ndarray, ABCIndex)):\n            secondary_y = [secondary_y]\n        self.secondary_y = secondary_y\n\n        # ugly TypeError if user passes matplotlib's `cmap` name.\n        # Probably better to accept either.\n        if \"cmap\" in kwds and colormap:\n            raise TypeError(\"Only specify one of `cmap` and `colormap`.\")\n        if \"cmap\" in kwds:\n            self.colormap = kwds.pop(\"cmap\")\n        else:\n            self.colormap = colormap\n\n        self.table = table\n        self.include_bool = include_bool\n\n        self.kwds = kwds\n\n        self._validate_color_args()\n\n    def _validate_subplots_kwarg(\n        self, subplots: bool | Sequence[Sequence[str]]\n    ) -> bool | list[tuple[int, ...]]:\n        \"\"\"\n        Validate the subplots parameter\n\n        - check type and content\n        - check for duplicate columns\n        - check for invalid column names\n        - convert column names into indices\n        - add missing columns in a group of their own\n        See comments in code below for more details.\n\n        Parameters\n        ----------\n        subplots : subplots parameters as passed to PlotAccessor\n\n        Returns\n        -------\n        validated subplots : a bool or a list of tuples of column indices. Columns\n        in the same tuple will be grouped together in the resulting plot.\n        \"\"\"\n\n        if isinstance(subplots, bool):\n            return subplots\n        elif not isinstance(subplots, Iterable):\n            raise ValueError(\"subplots should be a bool or an iterable\")\n\n        supported_kinds = (\n            \"line\",\n            \"bar\",\n            \"barh\",\n            \"hist\",\n            \"kde\",\n            \"density\",\n            \"area\",\n            \"pie\",\n        )\n        if self._kind not in supported_kinds:\n            raise ValueError(\n                \"When subplots is an iterable, kind must be \"\n                f\"one of {', '.join(supported_kinds)}. Got {self._kind}.\"\n            )\n\n        if isinstance(self.data, ABCSeries):\n            raise NotImplementedError(\n                \"An iterable subplots for a Series is not supported.\"\n            )\n\n        columns = self.data.columns\n        if isinstance(columns, ABCMultiIndex):\n            raise NotImplementedError(\n                \"An iterable subplots for a DataFrame with a MultiIndex column \"\n                \"is not supported.\"\n            )\n\n        if columns.nunique() != len(columns):\n            raise NotImplementedError(\n                \"An iterable subplots for a DataFrame with non-unique column \"\n                \"labels is not supported.\"\n            )\n\n        # subplots is a list of tuples where each tuple is a group of\n        # columns to be grouped together (one ax per group).\n        # we consolidate the subplots list such that:\n        # - the tuples contain indices instead of column names\n        # - the columns that aren't yet in the list are added in a group\n        #   of their own.\n        # For example with columns from a to g, and\n        # subplots = [(a, c), (b, f, e)],\n        # we end up with [(ai, ci), (bi, fi, ei), (di,), (gi,)]\n        # This way, we can handle self.subplots in a homogeneous manner\n        # later.\n        # TODO: also accept indices instead of just names?\n\n        out = []\n        seen_columns: set[Hashable] = set()\n        for group in subplots:\n            if not is_list_like(group):\n                raise ValueError(\n                    \"When subplots is an iterable, each entry \"\n                    \"should be a list/tuple of column names.\"\n                )\n            idx_locs = columns.get_indexer_for(group)\n            if (idx_locs == -1).any():\n                bad_labels = np.extract(idx_locs == -1, group)\n                raise ValueError(\n                    f\"Column label(s) {list(bad_labels)} not found in the DataFrame.\"\n                )\n            unique_columns = set(group)\n            duplicates = seen_columns.intersection(unique_columns)\n            if duplicates:\n                raise ValueError(\n                    \"Each column should be in only one subplot. \"\n                    f\"Columns {duplicates} were found in multiple subplots.\"\n                )\n            seen_columns = seen_columns.union(unique_columns)\n            out.append(tuple(idx_locs))\n\n        unseen_columns = columns.difference(seen_columns)\n        for column in unseen_columns:\n            idx_loc = columns.get_loc(column)\n            out.append((idx_loc,))\n        return out\n\n    def _validate_color_args(self):\n        if (\n            \"color\" in self.kwds\n            and self.nseries == 1\n            and not is_list_like(self.kwds[\"color\"])\n        ):\n            # support series.plot(color='green')\n            self.kwds[\"color\"] = [self.kwds[\"color\"]]\n\n        if (\n            \"color\" in self.kwds\n            and isinstance(self.kwds[\"color\"], tuple)\n            and self.nseries == 1\n            and len(self.kwds[\"color\"]) in (3, 4)\n        ):\n            # support RGB and RGBA tuples in series plot\n            self.kwds[\"color\"] = [self.kwds[\"color\"]]\n\n        if (\n            \"color\" in self.kwds or \"colors\" in self.kwds\n        ) and self.colormap is not None:\n            warnings.warn(\n                \"'color' and 'colormap' cannot be used simultaneously. Using 'color'\",\n                stacklevel=find_stack_level(),\n            )\n\n        if \"color\" in self.kwds and self.style is not None:\n            if is_list_like(self.style):\n                styles = self.style\n            else:\n                styles = [self.style]\n            # need only a single match\n            for s in styles:\n                if _color_in_style(s):\n                    raise ValueError(\n                        \"Cannot pass 'style' string with a color symbol and \"\n                        \"'color' keyword argument. Please use one or the \"\n                        \"other or pass 'style' without a color symbol\"\n                    )\n\n    def _iter_data(self, data=None, keep_index: bool = False, fillna=None):\n        if data is None:\n            data = self.data\n        if fillna is not None:\n            data = data.fillna(fillna)\n\n        for col, values in data.items():\n            if keep_index is True:\n                yield col, values\n            else:\n                yield col, values.values\n\n    @property\n    def nseries(self) -> int:\n\n        # When `by` is explicitly assigned, grouped data size will be defined, and\n        # this will determine number of subplots to have, aka `self.nseries`\n        if self.data.ndim == 1:\n            return 1\n        elif self.by is not None and self._kind == \"hist\":\n            return len(self._grouped)\n        elif self.by is not None and self._kind == \"box\":\n            return len(self.columns)\n        else:\n            return self.data.shape[1]\n\n    def draw(self) -> None:\n        self.plt.draw_if_interactive()\n\n    def generate(self) -> None:\n        self._args_adjust()\n        self._compute_plot_data()\n        self._setup_subplots()\n        self._make_plot()\n        self._add_table()\n        self._make_legend()\n        self._adorn_subplots()\n\n        for ax in self.axes:\n            self._post_plot_logic_common(ax, self.data)\n            self._post_plot_logic(ax, self.data)\n\n    def _args_adjust(self) -> None:\n        pass\n\n    def _has_plotted_object(self, ax: Axes) -> bool:\n        \"\"\"check whether ax has data\"\"\"\n        return len(ax.lines) != 0 or len(ax.artists) != 0 or len(ax.containers) != 0\n\n    def _maybe_right_yaxis(self, ax: Axes, axes_num):\n        if not self.on_right(axes_num):\n            # secondary axes may be passed via ax kw\n            return self._get_ax_layer(ax)\n\n        if hasattr(ax, \"right_ax\"):\n            # if it has right_ax property, ``ax`` must be left axes\n            return ax.right_ax\n        elif hasattr(ax, \"left_ax\"):\n            # if it has left_ax property, ``ax`` must be right axes\n            return ax\n        else:\n            # otherwise, create twin axes\n            orig_ax, new_ax = ax, ax.twinx()\n            # TODO: use Matplotlib public API when available\n            new_ax._get_lines = orig_ax._get_lines\n            new_ax._get_patches_for_fill = orig_ax._get_patches_for_fill\n            orig_ax.right_ax, new_ax.left_ax = new_ax, orig_ax\n\n            if not self._has_plotted_object(orig_ax):  # no data on left y\n                orig_ax.get_yaxis().set_visible(False)\n\n            if self.logy is True or self.loglog is True:\n                new_ax.set_yscale(\"log\")\n            elif self.logy == \"sym\" or self.loglog == \"sym\":\n                new_ax.set_yscale(\"symlog\")\n            return new_ax\n\n    def _setup_subplots(self):\n        if self.subplots:\n            naxes = (\n                self.nseries if isinstance(self.subplots, bool) else len(self.subplots)\n            )\n            fig, axes = create_subplots(\n                naxes=naxes,\n                sharex=self.sharex,\n                sharey=self.sharey,\n                figsize=self.figsize,\n                ax=self.ax,\n                layout=self.layout,\n                layout_type=self._layout_type,\n            )\n        else:\n            if self.ax is None:\n                fig = self.plt.figure(figsize=self.figsize)\n                axes = fig.add_subplot(111)\n            else:\n                fig = self.ax.get_figure()\n                if self.figsize is not None:\n                    fig.set_size_inches(self.figsize)\n                axes = self.ax\n\n        axes = flatten_axes(axes)\n\n        valid_log = {False, True, \"sym\", None}\n        input_log = {self.logx, self.logy, self.loglog}\n        if input_log - valid_log:\n            invalid_log = next(iter(input_log - valid_log))\n            raise ValueError(\n                f\"Boolean, None and 'sym' are valid options, '{invalid_log}' is given.\"\n            )\n\n        if self.logx is True or self.loglog is True:\n            [a.set_xscale(\"log\") for a in axes]\n        elif self.logx == \"sym\" or self.loglog == \"sym\":\n            [a.set_xscale(\"symlog\") for a in axes]\n\n        if self.logy is True or self.loglog is True:\n            [a.set_yscale(\"log\") for a in axes]\n        elif self.logy == \"sym\" or self.loglog == \"sym\":\n            [a.set_yscale(\"symlog\") for a in axes]\n\n        self.fig = fig\n        self.axes = axes\n\n    @property\n    def result(self):\n        \"\"\"\n        Return result axes\n        \"\"\"\n        if self.subplots:\n            if self.layout is not None and not is_list_like(self.ax):\n                return self.axes.reshape(*self.layout)\n            else:\n                return self.axes\n        else:\n            sec_true = isinstance(self.secondary_y, bool) and self.secondary_y\n            # error: Argument 1 to \"len\" has incompatible type \"Union[bool,\n            # Tuple[Any, ...], List[Any], ndarray[Any, Any]]\"; expected \"Sized\"\n            all_sec = (\n                is_list_like(self.secondary_y)\n                and len(self.secondary_y) == self.nseries  # type: ignore[arg-type]\n            )\n            if sec_true or all_sec:\n                # if all data is plotted on secondary, return right axes\n                return self._get_ax_layer(self.axes[0], primary=False)\n            else:\n                return self.axes[0]\n\n    def _convert_to_ndarray(self, data):\n        # GH31357: categorical columns are processed separately\n        if is_categorical_dtype(data):\n            return data\n\n        # GH32073: cast to float if values contain nulled integers\n        if (\n            is_integer_dtype(data.dtype) or is_float_dtype(data.dtype)\n        ) and is_extension_array_dtype(data.dtype):\n            return data.to_numpy(dtype=\"float\", na_value=np.nan)\n\n        # GH25587: cast ExtensionArray of pandas (IntegerArray, etc.) to\n        # np.ndarray before plot.\n        if len(data) > 0:\n            return np.asarray(data)\n\n        return data\n\n    def _compute_plot_data(self):\n        data = self.data\n\n        if isinstance(data, ABCSeries):\n            label = self.label\n            if label is None and data.name is None:\n                label = \"\"\n            if label is None:\n                # We'll end up with columns of [0] instead of [None]\n                data = data.to_frame()\n            else:\n                data = data.to_frame(name=label)\n        elif self._kind in (\"hist\", \"box\"):\n            cols = self.columns if self.by is None else self.columns + self.by\n            data = data.loc[:, cols]\n\n        # GH15079 reconstruct data if by is defined\n        if self.by is not None:\n            self.subplots = True\n            data = reconstruct_data_with_by(self.data, by=self.by, cols=self.columns)\n\n        # GH16953, _convert is needed as fallback, for ``Series``\n        # with ``dtype == object``\n        data = data._convert(datetime=True, timedelta=True)\n        include_type = [np.number, \"datetime\", \"datetimetz\", \"timedelta\"]\n\n        # GH23719, allow plotting boolean\n        if self.include_bool is True:\n            include_type.append(np.bool_)\n\n        # GH22799, exclude datetime-like type for boxplot\n        exclude_type = None\n        if self._kind == \"box\":\n            # TODO: change after solving issue 27881\n            include_type = [np.number]\n            exclude_type = [\"timedelta\"]\n\n        # GH 18755, include object and category type for scatter plot\n        if self._kind == \"scatter\":\n            include_type.extend([\"object\", \"category\"])\n\n        numeric_data = data.select_dtypes(include=include_type, exclude=exclude_type)\n\n        try:\n            is_empty = numeric_data.columns.empty\n        except AttributeError:\n            is_empty = not len(numeric_data)\n\n        # no non-numeric frames or series allowed\n        if is_empty:\n            raise TypeError(\"no numeric data to plot\")\n\n        self.data = numeric_data.apply(self._convert_to_ndarray)\n\n    def _make_plot(self):\n        raise AbstractMethodError(self)\n\n    def _add_table(self) -> None:\n        if self.table is False:\n            return\n        elif self.table is True:\n            data = self.data.transpose()\n        else:\n            data = self.table\n        ax = self._get_ax(0)\n        table(ax, data)\n\n    def _post_plot_logic_common(self, ax, data):\n        \"\"\"Common post process for each axes\"\"\"\n        if self.orientation == \"vertical\" or self.orientation is None:\n            self._apply_axis_properties(ax.xaxis, rot=self.rot, fontsize=self.fontsize)\n            self._apply_axis_properties(ax.yaxis, fontsize=self.fontsize)\n\n            if hasattr(ax, \"right_ax\"):\n                self._apply_axis_properties(ax.right_ax.yaxis, fontsize=self.fontsize)\n\n        elif self.orientation == \"horizontal\":\n            self._apply_axis_properties(ax.yaxis, rot=self.rot, fontsize=self.fontsize)\n            self._apply_axis_properties(ax.xaxis, fontsize=self.fontsize)\n\n            if hasattr(ax, \"right_ax\"):\n                self._apply_axis_properties(ax.right_ax.yaxis, fontsize=self.fontsize)\n        else:  # pragma no cover\n            raise ValueError\n\n    def _post_plot_logic(self, ax, data) -> None:\n        \"\"\"Post process for each axes. Overridden in child classes\"\"\"\n\n    def _adorn_subplots(self):\n        \"\"\"Common post process unrelated to data\"\"\"\n        if len(self.axes) > 0:\n            all_axes = self._get_subplots()\n            nrows, ncols = self._get_axes_layout()\n            handle_shared_axes(\n                axarr=all_axes,\n                nplots=len(all_axes),\n                naxes=nrows * ncols,\n                nrows=nrows,\n                ncols=ncols,\n                sharex=self.sharex,\n                sharey=self.sharey,\n            )\n\n        for ax in self.axes:\n            ax = getattr(ax, \"right_ax\", ax)\n            if self.yticks is not None:\n                ax.set_yticks(self.yticks)\n\n            if self.xticks is not None:\n                ax.set_xticks(self.xticks)\n\n            if self.ylim is not None:\n                ax.set_ylim(self.ylim)\n\n            if self.xlim is not None:\n                ax.set_xlim(self.xlim)\n\n            # GH9093, currently Pandas does not show ylabel, so if users provide\n            # ylabel will set it as ylabel in the plot.\n            if self.ylabel is not None:\n                ax.set_ylabel(pprint_thing(self.ylabel))\n\n            ax.grid(self.grid)\n\n        if self.title:\n            if self.subplots:\n                if is_list_like(self.title):\n                    if len(self.title) != self.nseries:\n                        raise ValueError(\n                            \"The length of `title` must equal the number \"\n                            \"of columns if using `title` of type `list` \"\n                            \"and `subplots=True`.\\n\"\n                            f\"length of title = {len(self.title)}\\n\"\n                            f\"number of columns = {self.nseries}\"\n                        )\n\n                    for (ax, title) in zip(self.axes, self.title):\n                        ax.set_title(title)\n                else:\n                    self.fig.suptitle(self.title)\n            else:\n                if is_list_like(self.title):\n                    msg = (\n                        \"Using `title` of type `list` is not supported \"\n                        \"unless `subplots=True` is passed\"\n                    )\n                    raise ValueError(msg)\n                self.axes[0].set_title(self.title)\n\n    def _apply_axis_properties(self, axis: Axis, rot=None, fontsize=None) -> None:\n        \"\"\"\n        Tick creation within matplotlib is reasonably expensive and is\n        internally deferred until accessed as Ticks are created/destroyed\n        multiple times per draw. It's therefore beneficial for us to avoid\n        accessing unless we will act on the Tick.\n        \"\"\"\n        if rot is not None or fontsize is not None:\n            # rot=0 is a valid setting, hence the explicit None check\n            labels = axis.get_majorticklabels() + axis.get_minorticklabels()\n            for label in labels:\n                if rot is not None:\n                    label.set_rotation(rot)\n                if fontsize is not None:\n                    label.set_fontsize(fontsize)\n\n    @property\n    def legend_title(self) -> str | None:\n        if not isinstance(self.data.columns, ABCMultiIndex):\n            name = self.data.columns.name\n            if name is not None:\n                name = pprint_thing(name)\n            return name\n        else:\n            stringified = map(pprint_thing, self.data.columns.names)\n            return \",\".join(stringified)\n\n    def _mark_right_label(self, label: str, index: int) -> str:\n        \"\"\"\n        Append ``(right)`` to the label of a line if it's plotted on the right axis.\n\n        Note that ``(right)`` is only appended when ``subplots=False``.\n        \"\"\"\n        if not self.subplots and self.mark_right and self.on_right(index):\n            label += \" (right)\"\n        return label\n\n    def _append_legend_handles_labels(self, handle: Artist, label: str) -> None:\n        \"\"\"\n        Append current handle and label to ``legend_handles`` and ``legend_labels``.\n\n        These will be used to make the legend.\n        \"\"\"\n        self.legend_handles.append(handle)\n        self.legend_labels.append(label)\n\n    def _make_legend(self) -> None:\n        ax, leg = self._get_ax_legend(self.axes[0])\n\n        handles = []\n        labels = []\n        title = \"\"\n\n        if not self.subplots:\n            if leg is not None:\n                title = leg.get_title().get_text()\n                # Replace leg.LegendHandles because it misses marker info\n                handles = leg.legendHandles\n                labels = [x.get_text() for x in leg.get_texts()]\n\n            if self.legend:\n                if self.legend == \"reverse\":\n                    handles += reversed(self.legend_handles)\n                    labels += reversed(self.legend_labels)\n                else:\n                    handles += self.legend_handles\n                    labels += self.legend_labels\n\n                if self.legend_title is not None:\n                    title = self.legend_title\n\n            if len(handles) > 0:\n                ax.legend(handles, labels, loc=\"best\", title=title)\n\n        elif self.subplots and self.legend:\n            for ax in self.axes:\n                if ax.get_visible():\n                    ax.legend(loc=\"best\")\n\n    def _get_ax_legend(self, ax: Axes):\n        \"\"\"\n        Take in axes and return ax and legend under different scenarios\n        \"\"\"\n        leg = ax.get_legend()\n\n        other_ax = getattr(ax, \"left_ax\", None) or getattr(ax, \"right_ax\", None)\n        other_leg = None\n        if other_ax is not None:\n            other_leg = other_ax.get_legend()\n        if leg is None and other_leg is not None:\n            leg = other_leg\n            ax = other_ax\n        return ax, leg\n\n    @cache_readonly\n    def plt(self):\n        import matplotlib.pyplot as plt\n\n        return plt\n\n    _need_to_set_index = False\n\n    def _get_xticks(self, convert_period: bool = False):\n        index = self.data.index\n        is_datetype = index.inferred_type in (\"datetime\", \"date\", \"datetime64\", \"time\")\n\n        if self.use_index:\n            if convert_period and isinstance(index, ABCPeriodIndex):\n                self.data = self.data.reindex(index=index.sort_values())\n                x = self.data.index.to_timestamp()._mpl_repr()\n            elif index.is_numeric():\n                \"\"\"\n                Matplotlib supports numeric values or datetime objects as\n                xaxis values. Taking LBYL approach here, by the time\n                matplotlib raises exception when using non numeric/datetime\n                values for xaxis, several actions are already taken by plt.\n                \"\"\"\n                x = index._mpl_repr()\n            elif is_datetype:\n                self.data = self.data[notna(self.data.index)]\n                self.data = self.data.sort_index()\n                x = self.data.index._mpl_repr()\n            else:\n                self._need_to_set_index = True\n                x = list(range(len(index)))\n        else:\n            x = list(range(len(index)))\n\n        return x\n\n    @classmethod\n    @register_pandas_matplotlib_converters\n    def _plot(\n        cls, ax: Axes, x, y: np.ndarray, style=None, is_errorbar: bool = False, **kwds\n    ):\n        mask = isna(y)\n        if mask.any():\n            y = np.ma.array(y)\n            y = np.ma.masked_where(mask, y)\n\n        if isinstance(x, ABCIndex):\n            x = x._mpl_repr()\n\n        if is_errorbar:\n            if \"xerr\" in kwds:\n                kwds[\"xerr\"] = np.array(kwds.get(\"xerr\"))\n            if \"yerr\" in kwds:\n                kwds[\"yerr\"] = np.array(kwds.get(\"yerr\"))\n            return ax.errorbar(x, y, **kwds)\n        else:\n            # prevent style kwarg from going to errorbar, where it is unsupported\n            args = (x, y, style) if style is not None else (x, y)\n            return ax.plot(*args, **kwds)\n\n    def _get_custom_index_name(self):\n        \"\"\"Specify whether xlabel/ylabel should be used to override index name\"\"\"\n        return self.xlabel\n\n    def _get_index_name(self) -> str | None:\n        if isinstance(self.data.index, ABCMultiIndex):\n            name = self.data.index.names\n            if com.any_not_none(*name):\n                name = \",\".join([pprint_thing(x) for x in name])\n            else:\n                name = None\n        else:\n            name = self.data.index.name\n            if name is not None:\n                name = pprint_thing(name)\n\n        # GH 45145, override the default axis label if one is provided.\n        index_name = self._get_custom_index_name()\n        if index_name is not None:\n            name = pprint_thing(index_name)\n\n        return name\n\n    @classmethod\n    def _get_ax_layer(cls, ax, primary: bool = True):\n        \"\"\"get left (primary) or right (secondary) axes\"\"\"\n        if primary:\n            return getattr(ax, \"left_ax\", ax)\n        else:\n            return getattr(ax, \"right_ax\", ax)\n\n    def _col_idx_to_axis_idx(self, col_idx: int) -> int:\n        \"\"\"Return the index of the axis where the column at col_idx should be plotted\"\"\"\n        if isinstance(self.subplots, list):\n            # Subplots is a list: some columns will be grouped together in the same ax\n            return next(\n                group_idx\n                for (group_idx, group) in enumerate(self.subplots)\n                if col_idx in group\n            )\n        else:\n            # subplots is True: one ax per column\n            return col_idx\n\n    def _get_ax(self, i: int):\n        # get the twinx ax if appropriate\n        if self.subplots:\n            i = self._col_idx_to_axis_idx(i)\n            ax = self.axes[i]\n            ax = self._maybe_right_yaxis(ax, i)\n            self.axes[i] = ax\n        else:\n            ax = self.axes[0]\n            ax = self._maybe_right_yaxis(ax, i)\n\n        ax.get_yaxis().set_visible(True)\n        return ax\n\n    @classmethod\n    def get_default_ax(cls, ax) -> None:\n        import matplotlib.pyplot as plt\n\n        if ax is None and len(plt.get_fignums()) > 0:\n            with plt.rc_context():\n                ax = plt.gca()\n            ax = cls._get_ax_layer(ax)\n\n    def on_right(self, i):\n        if isinstance(self.secondary_y, bool):\n            return self.secondary_y\n\n        if isinstance(self.secondary_y, (tuple, list, np.ndarray, ABCIndex)):\n            return self.data.columns[i] in self.secondary_y\n\n    def _apply_style_colors(self, colors, kwds, col_num, label):\n        \"\"\"\n        Manage style and color based on column number and its label.\n        Returns tuple of appropriate style and kwds which \"color\" may be added.\n        \"\"\"\n        style = None\n        if self.style is not None:\n            if isinstance(self.style, list):\n                try:\n                    style = self.style[col_num]\n                except IndexError:\n                    pass\n            elif isinstance(self.style, dict):\n                style = self.style.get(label, style)\n            else:\n                style = self.style\n\n        has_color = \"color\" in kwds or self.colormap is not None\n        nocolor_style = style is None or not _color_in_style(style)\n        if (has_color or self.subplots) and nocolor_style:\n            if isinstance(colors, dict):\n                kwds[\"color\"] = colors[label]\n            else:\n                kwds[\"color\"] = colors[col_num % len(colors)]\n        return style, kwds\n\n    def _get_colors(\n        self,\n        num_colors: int | None = None,\n        color_kwds: str = \"color\",\n    ):\n        if num_colors is None:\n            num_colors = self.nseries\n\n        return get_standard_colors(\n            num_colors=num_colors,\n            colormap=self.colormap,\n            color=self.kwds.get(color_kwds),\n        )\n\n    def _parse_errorbars(self, label, err):\n        \"\"\"\n        Look for error keyword arguments and return the actual errorbar data\n        or return the error DataFrame/dict\n\n        Error bars can be specified in several ways:\n            Series: the user provides a pandas.Series object of the same\n                    length as the data\n            ndarray: provides a np.ndarray of the same length as the data\n            DataFrame/dict: error values are paired with keys matching the\n                    key in the plotted DataFrame\n            str: the name of the column within the plotted DataFrame\n\n        Asymmetrical error bars are also supported, however raw error values\n        must be provided in this case. For a ``N`` length :class:`Series`, a\n        ``2xN`` array should be provided indicating lower and upper (or left\n        and right) errors. For a ``MxN`` :class:`DataFrame`, asymmetrical errors\n        should be in a ``Mx2xN`` array.\n        \"\"\"\n        if err is None:\n            return None\n\n        def match_labels(data, e):\n            e = e.reindex(data.index)\n            return e\n\n        # key-matched DataFrame\n        if isinstance(err, ABCDataFrame):\n\n            err = match_labels(self.data, err)\n        # key-matched dict\n        elif isinstance(err, dict):\n            pass\n\n        # Series of error values\n        elif isinstance(err, ABCSeries):\n            # broadcast error series across data\n            err = match_labels(self.data, err)\n            err = np.atleast_2d(err)\n            err = np.tile(err, (self.nseries, 1))\n\n        # errors are a column in the dataframe\n        elif isinstance(err, str):\n            evalues = self.data[err].values\n            self.data = self.data[self.data.columns.drop(err)]\n            err = np.atleast_2d(evalues)\n            err = np.tile(err, (self.nseries, 1))\n\n        elif is_list_like(err):\n            if is_iterator(err):\n                err = np.atleast_2d(list(err))\n            else:\n                # raw error values\n                err = np.atleast_2d(err)\n\n            err_shape = err.shape\n\n            # asymmetrical error bars\n            if isinstance(self.data, ABCSeries) and err_shape[0] == 2:\n                err = np.expand_dims(err, 0)\n                err_shape = err.shape\n                if err_shape[2] != len(self.data):\n                    raise ValueError(\n                        \"Asymmetrical error bars should be provided \"\n                        f\"with the shape (2, {len(self.data)})\"\n                    )\n            elif isinstance(self.data, ABCDataFrame) and err.ndim == 3:\n                if (\n                    (err_shape[0] != self.nseries)\n                    or (err_shape[1] != 2)\n                    or (err_shape[2] != len(self.data))\n                ):\n                    raise ValueError(\n                        \"Asymmetrical error bars should be provided \"\n                        f\"with the shape ({self.nseries}, 2, {len(self.data)})\"\n                    )\n\n            # broadcast errors to each data series\n            if len(err) == 1:\n                err = np.tile(err, (self.nseries, 1))\n\n        elif is_number(err):\n            err = np.tile([err], (self.nseries, len(self.data)))\n\n        else:\n            msg = f\"No valid {label} detected\"\n            raise ValueError(msg)\n\n        return err\n\n    def _get_errorbars(\n        self, label=None, index=None, xerr: bool = True, yerr: bool = True\n    ):\n        errors = {}\n\n        for kw, flag in zip([\"xerr\", \"yerr\"], [xerr, yerr]):\n            if flag:\n                err = self.errors[kw]\n                # user provided label-matched dataframe of errors\n                if isinstance(err, (ABCDataFrame, dict)):\n                    if label is not None and label in err.keys():\n                        err = err[label]\n                    else:\n                        err = None\n                elif index is not None and err is not None:\n                    err = err[index]\n\n                if err is not None:\n                    errors[kw] = err\n        return errors\n\n    def _get_subplots(self):\n        from matplotlib.axes import Subplot\n\n        return [\n            ax for ax in self.axes[0].get_figure().get_axes() if isinstance(ax, Subplot)\n        ]\n\n    def _get_axes_layout(self) -> tuple[int, int]:\n        axes = self._get_subplots()\n        x_set = set()\n        y_set = set()\n        for ax in axes:\n            # check axes coordinates to estimate layout\n            points = ax.get_position().get_points()\n            x_set.add(points[0][0])\n            y_set.add(points[0][1])\n        return (len(y_set), len(x_set))\n\n\nclass PlanePlot(MPLPlot, ABC):\n    \"\"\"\n    Abstract class for plotting on plane, currently scatter and hexbin.\n    \"\"\"\n\n    _layout_type = \"single\"\n\n    def __init__(self, data, x, y, **kwargs) -> None:\n        MPLPlot.__init__(self, data, **kwargs)\n        if x is None or y is None:\n            raise ValueError(self._kind + \" requires an x and y column\")\n        if is_integer(x) and not self.data.columns.holds_integer():\n            x = self.data.columns[x]\n        if is_integer(y) and not self.data.columns.holds_integer():\n            y = self.data.columns[y]\n\n        # Scatter plot allows to plot objects data\n        if self._kind == \"hexbin\":\n            if len(self.data[x]._get_numeric_data()) == 0:\n                raise ValueError(self._kind + \" requires x column to be numeric\")\n            if len(self.data[y]._get_numeric_data()) == 0:\n                raise ValueError(self._kind + \" requires y column to be numeric\")\n\n        self.x = x\n        self.y = y\n\n    @property\n    def nseries(self) -> int:\n        return 1\n\n    def _post_plot_logic(self, ax: Axes, data) -> None:\n        x, y = self.x, self.y\n        xlabel = self.xlabel if self.xlabel is not None else pprint_thing(x)\n        ylabel = self.ylabel if self.ylabel is not None else pprint_thing(y)\n        ax.set_xlabel(xlabel)\n        ax.set_ylabel(ylabel)\n\n    def _plot_colorbar(self, ax: Axes, **kwds):\n        # Addresses issues #10611 and #10678:\n        # When plotting scatterplots and hexbinplots in IPython\n        # inline backend the colorbar axis height tends not to\n        # exactly match the parent axis height.\n        # The difference is due to small fractional differences\n        # in floating points with similar representation.\n        # To deal with this, this method forces the colorbar\n        # height to take the height of the parent axes.\n        # For a more detailed description of the issue\n        # see the following link:\n        # https://github.com/ipython/ipython/issues/11215\n\n        # GH33389, if ax is used multiple times, we should always\n        # use the last one which contains the latest information\n        # about the ax\n        img = ax.collections[-1]\n        return self.fig.colorbar(img, ax=ax, **kwds)\n\n\nclass ScatterPlot(PlanePlot):\n    @property\n    def _kind(self) -> Literal[\"scatter\"]:\n        return \"scatter\"\n\n    def __init__(self, data, x, y, s=None, c=None, **kwargs) -> None:\n        if s is None:\n            # hide the matplotlib default for size, in case we want to change\n            # the handling of this argument later\n            s = 20\n        elif is_hashable(s) and s in data.columns:\n            s = data[s]\n        super().__init__(data, x, y, s=s, **kwargs)\n        if is_integer(c) and not self.data.columns.holds_integer():\n            c = self.data.columns[c]\n        self.c = c\n\n    def _make_plot(self):\n        x, y, c, data = self.x, self.y, self.c, self.data\n        ax = self.axes[0]\n\n        c_is_column = is_hashable(c) and c in self.data.columns\n\n        color_by_categorical = c_is_column and is_categorical_dtype(self.data[c])\n\n        color = self.kwds.pop(\"color\", None)\n        if c is not None and color is not None:\n            raise TypeError(\"Specify exactly one of `c` and `color`\")\n        if c is None and color is None:\n            c_values = self.plt.rcParams[\"patch.facecolor\"]\n        elif color is not None:\n            c_values = color\n        elif color_by_categorical:\n            c_values = self.data[c].cat.codes\n        elif c_is_column:\n            c_values = self.data[c].values\n        else:\n            c_values = c\n\n        if self.colormap is not None:\n            cmap = mpl.colormaps.get_cmap(self.colormap)\n        else:\n            # cmap is only used if c_values are integers, otherwise UserWarning\n            if is_integer_dtype(c_values):\n                # pandas uses colormap, matplotlib uses cmap.\n                cmap = \"Greys\"\n                cmap = mpl.colormaps[cmap]\n            else:\n                cmap = None\n\n        if color_by_categorical:\n            from matplotlib import colors\n\n            n_cats = len(self.data[c].cat.categories)\n            cmap = colors.ListedColormap([cmap(i) for i in range(cmap.N)])\n            bounds = np.linspace(0, n_cats, n_cats + 1)\n            norm = colors.BoundaryNorm(bounds, cmap.N)\n        else:\n            norm = self.kwds.pop(\"norm\", None)\n        # plot colorbar if\n        # 1. colormap is assigned, and\n        # 2.`c` is a column containing only numeric values\n        plot_colorbar = self.colormap or c_is_column\n        cb = self.kwds.pop(\"colorbar\", is_numeric_dtype(c_values) and plot_colorbar)\n\n        if self.legend and hasattr(self, \"label\"):\n            label = self.label\n        else:\n            label = None\n        scatter = ax.scatter(\n            data[x].values,\n            data[y].values,\n            c=c_values,\n            label=label,\n            cmap=cmap,\n            norm=norm,\n            **self.kwds,\n        )\n        if cb:\n            cbar_label = c if c_is_column else \"\"\n            cbar = self._plot_colorbar(ax, label=cbar_label)\n            if color_by_categorical:\n                cbar.set_ticks(np.linspace(0.5, n_cats - 0.5, n_cats))\n                cbar.ax.set_yticklabels(self.data[c].cat.categories)\n\n        if label is not None:\n            self._append_legend_handles_labels(scatter, label)\n        else:\n            self.legend = False\n\n        errors_x = self._get_errorbars(label=x, index=0, yerr=False)\n        errors_y = self._get_errorbars(label=y, index=0, xerr=False)\n        if len(errors_x) > 0 or len(errors_y) > 0:\n            err_kwds = dict(errors_x, **errors_y)\n            err_kwds[\"ecolor\"] = scatter.get_facecolor()[0]\n            ax.errorbar(data[x].values, data[y].values, linestyle=\"none\", **err_kwds)\n\n\nclass HexBinPlot(PlanePlot):\n    @property\n    def _kind(self) -> Literal[\"hexbin\"]:\n        return \"hexbin\"\n\n    def __init__(self, data, x, y, C=None, **kwargs) -> None:\n        super().__init__(data, x, y, **kwargs)\n        if is_integer(C) and not self.data.columns.holds_integer():\n            C = self.data.columns[C]\n        self.C = C\n\n    def _make_plot(self) -> None:\n        x, y, data, C = self.x, self.y, self.data, self.C\n        ax = self.axes[0]\n        # pandas uses colormap, matplotlib uses cmap.\n        cmap = self.colormap or \"BuGn\"\n        cmap = mpl.colormaps.get_cmap(cmap)\n        cb = self.kwds.pop(\"colorbar\", True)\n\n        if C is None:\n            c_values = None\n        else:\n            c_values = data[C].values\n\n        ax.hexbin(data[x].values, data[y].values, C=c_values, cmap=cmap, **self.kwds)\n        if cb:\n            self._plot_colorbar(ax)\n\n    def _make_legend(self) -> None:\n        pass\n\n\nclass LinePlot(MPLPlot):\n    _default_rot = 0\n\n    @property\n    def orientation(self) -> PlottingOrientation:\n        return \"vertical\"\n\n    @property\n    def _kind(self) -> Literal[\"line\", \"area\", \"hist\", \"kde\", \"box\"]:\n        return \"line\"\n\n    def __init__(self, data, **kwargs) -> None:\n        from pandas.plotting import plot_params\n\n        MPLPlot.__init__(self, data, **kwargs)\n        if self.stacked:\n            self.data = self.data.fillna(value=0)\n        self.x_compat = plot_params[\"x_compat\"]\n        if \"x_compat\" in self.kwds:\n            self.x_compat = bool(self.kwds.pop(\"x_compat\"))\n\n    def _is_ts_plot(self) -> bool:\n        # this is slightly deceptive\n        return not self.x_compat and self.use_index and self._use_dynamic_x()\n\n    def _use_dynamic_x(self):\n        return use_dynamic_x(self._get_ax(0), self.data)\n\n    def _make_plot(self) -> None:\n        if self._is_ts_plot():\n            data = maybe_convert_index(self._get_ax(0), self.data)\n\n            x = data.index  # dummy, not used\n            plotf = self._ts_plot\n            it = self._iter_data(data=data, keep_index=True)\n        else:\n            x = self._get_xticks(convert_period=True)\n            # error: Incompatible types in assignment (expression has type\n            # \"Callable[[Any, Any, Any, Any, Any, Any, KwArg(Any)], Any]\", variable has\n            # type \"Callable[[Any, Any, Any, Any, KwArg(Any)], Any]\")\n            plotf = self._plot  # type: ignore[assignment]\n            it = self._iter_data()\n\n        stacking_id = self._get_stacking_id()\n        is_errorbar = com.any_not_none(*self.errors.values())\n\n        colors = self._get_colors()\n        for i, (label, y) in enumerate(it):\n            ax = self._get_ax(i)\n            kwds = self.kwds.copy()\n            style, kwds = self._apply_style_colors(colors, kwds, i, label)\n\n            errors = self._get_errorbars(label=label, index=i)\n            kwds = dict(kwds, **errors)\n\n            label = pprint_thing(label)  # .encode('utf-8')\n            label = self._mark_right_label(label, index=i)\n            kwds[\"label\"] = label\n\n            newlines = plotf(\n                ax,\n                x,\n                y,\n                style=style,\n                column_num=i,\n                stacking_id=stacking_id,\n                is_errorbar=is_errorbar,\n                **kwds,\n            )\n            self._append_legend_handles_labels(newlines[0], label)\n\n            if self._is_ts_plot():\n\n                # reset of xlim should be used for ts data\n                # TODO: GH28021, should find a way to change view limit on xaxis\n                lines = get_all_lines(ax)\n                left, right = get_xlim(lines)\n                ax.set_xlim(left, right)\n\n    # error: Signature of \"_plot\" incompatible with supertype \"MPLPlot\"\n    @classmethod\n    def _plot(  # type: ignore[override]\n        cls, ax: Axes, x, y, style=None, column_num=None, stacking_id=None, **kwds\n    ):\n        # column_num is used to get the target column from plotf in line and\n        # area plots\n        if column_num == 0:\n            cls._initialize_stacker(ax, stacking_id, len(y))\n        y_values = cls._get_stacked_values(ax, stacking_id, y, kwds[\"label\"])\n        lines = MPLPlot._plot(ax, x, y_values, style=style, **kwds)\n        cls._update_stacker(ax, stacking_id, y)\n        return lines\n\n    def _ts_plot(self, ax: Axes, x, data, style=None, **kwds):\n        # accept x to be consistent with normal plot func,\n        # x is not passed to tsplot as it uses data.index as x coordinate\n        # column_num must be in kwds for stacking purpose\n        freq, data = maybe_resample(data, ax, kwds)\n\n        # Set ax with freq info\n        decorate_axes(ax, freq, kwds)\n        # digging deeper\n        if hasattr(ax, \"left_ax\"):\n            decorate_axes(ax.left_ax, freq, kwds)\n        if hasattr(ax, \"right_ax\"):\n            decorate_axes(ax.right_ax, freq, kwds)\n        ax._plot_data.append((data, self._kind, kwds))\n\n        lines = self._plot(ax, data.index, data.values, style=style, **kwds)\n        # set date formatter, locators and rescale limits\n        format_dateaxis(ax, ax.freq, data.index)\n        return lines\n\n    def _get_stacking_id(self):\n        if self.stacked:\n            return id(self.data)\n        else:\n            return None\n\n    @classmethod\n    def _initialize_stacker(cls, ax: Axes, stacking_id, n: int) -> None:\n        if stacking_id is None:\n            return\n        if not hasattr(ax, \"_stacker_pos_prior\"):\n            ax._stacker_pos_prior = {}\n        if not hasattr(ax, \"_stacker_neg_prior\"):\n            ax._stacker_neg_prior = {}\n        ax._stacker_pos_prior[stacking_id] = np.zeros(n)\n        ax._stacker_neg_prior[stacking_id] = np.zeros(n)\n\n    @classmethod\n    def _get_stacked_values(cls, ax: Axes, stacking_id, values, label):\n        if stacking_id is None:\n            return values\n        if not hasattr(ax, \"_stacker_pos_prior\"):\n            # stacker may not be initialized for subplots\n            cls._initialize_stacker(ax, stacking_id, len(values))\n\n        if (values >= 0).all():\n            return ax._stacker_pos_prior[stacking_id] + values\n        elif (values <= 0).all():\n            return ax._stacker_neg_prior[stacking_id] + values\n\n        raise ValueError(\n            \"When stacked is True, each column must be either \"\n            \"all positive or all negative. \"\n            f\"Column '{label}' contains both positive and negative values\"\n        )\n\n    @classmethod\n    def _update_stacker(cls, ax: Axes, stacking_id, values) -> None:\n        if stacking_id is None:\n            return\n        if (values >= 0).all():\n            ax._stacker_pos_prior[stacking_id] += values\n        elif (values <= 0).all():\n            ax._stacker_neg_prior[stacking_id] += values\n\n    def _post_plot_logic(self, ax: Axes, data) -> None:\n        from matplotlib.ticker import FixedLocator\n\n        def get_label(i):\n            if is_float(i) and i.is_integer():\n                i = int(i)\n            try:\n                return pprint_thing(data.index[i])\n            except Exception:\n                return \"\"\n\n        if self._need_to_set_index:\n            xticks = ax.get_xticks()\n            xticklabels = [get_label(x) for x in xticks]\n            ax.xaxis.set_major_locator(FixedLocator(xticks))\n            ax.set_xticklabels(xticklabels)\n\n        # If the index is an irregular time series, then by default\n        # we rotate the tick labels. The exception is if there are\n        # subplots which don't share their x-axes, in which we case\n        # we don't rotate the ticklabels as by default the subplots\n        # would be too close together.\n        condition = (\n            not self._use_dynamic_x()\n            and (data.index._is_all_dates and self.use_index)\n            and (not self.subplots or (self.subplots and self.sharex))\n        )\n\n        index_name = self._get_index_name()\n\n        if condition:\n            # irregular TS rotated 30 deg. by default\n            # probably a better place to check / set this.\n            if not self._rot_set:\n                self.rot = 30\n            format_date_labels(ax, rot=self.rot)\n\n        if index_name is not None and self.use_index:\n            ax.set_xlabel(index_name)\n\n\nclass AreaPlot(LinePlot):\n    @property\n    def _kind(self) -> Literal[\"area\"]:\n        return \"area\"\n\n    def __init__(self, data, **kwargs) -> None:\n        kwargs.setdefault(\"stacked\", True)\n        data = data.fillna(value=0)\n        LinePlot.__init__(self, data, **kwargs)\n\n        if not self.stacked:\n            # use smaller alpha to distinguish overlap\n            self.kwds.setdefault(\"alpha\", 0.5)\n\n        if self.logy or self.loglog:\n            raise ValueError(\"Log-y scales are not supported in area plot\")\n\n    # error: Signature of \"_plot\" incompatible with supertype \"MPLPlot\"\n    @classmethod\n    def _plot(  # type: ignore[override]\n        cls,\n        ax: Axes,\n        x,\n        y,\n        style=None,\n        column_num=None,\n        stacking_id=None,\n        is_errorbar: bool = False,\n        **kwds,\n    ):\n\n        if column_num == 0:\n            cls._initialize_stacker(ax, stacking_id, len(y))\n        y_values = cls._get_stacked_values(ax, stacking_id, y, kwds[\"label\"])\n\n        # need to remove label, because subplots uses mpl legend as it is\n        line_kwds = kwds.copy()\n        line_kwds.pop(\"label\")\n        lines = MPLPlot._plot(ax, x, y_values, style=style, **line_kwds)\n\n        # get data from the line to get coordinates for fill_between\n        xdata, y_values = lines[0].get_data(orig=False)\n\n        # unable to use ``_get_stacked_values`` here to get starting point\n        if stacking_id is None:\n            start = np.zeros(len(y))\n        elif (y >= 0).all():\n            start = ax._stacker_pos_prior[stacking_id]\n        elif (y <= 0).all():\n            start = ax._stacker_neg_prior[stacking_id]\n        else:\n            start = np.zeros(len(y))\n\n        if \"color\" not in kwds:\n            kwds[\"color\"] = lines[0].get_color()\n\n        rect = ax.fill_between(xdata, start, y_values, **kwds)\n        cls._update_stacker(ax, stacking_id, y)\n\n        # LinePlot expects list of artists\n        res = [rect]\n        return res\n\n    def _post_plot_logic(self, ax: Axes, data) -> None:\n        LinePlot._post_plot_logic(self, ax, data)\n\n        is_shared_y = len(list(ax.get_shared_y_axes())) > 0\n        # do not override the default axis behaviour in case of shared y axes\n        if self.ylim is None and not is_shared_y:\n            if (data >= 0).all().all():\n                ax.set_ylim(0, None)\n            elif (data <= 0).all().all():\n                ax.set_ylim(None, 0)\n\n\nclass BarPlot(MPLPlot):\n    @property\n    def _kind(self) -> Literal[\"bar\", \"barh\"]:\n        return \"bar\"\n\n    _default_rot = 90\n\n    @property\n    def orientation(self) -> PlottingOrientation:\n        return \"vertical\"\n\n    def __init__(self, data, **kwargs) -> None:\n        # we have to treat a series differently than a\n        # 1-column DataFrame w.r.t. color handling\n        self._is_series = isinstance(data, ABCSeries)\n        self.bar_width = kwargs.pop(\"width\", 0.5)\n        pos = kwargs.pop(\"position\", 0.5)\n        kwargs.setdefault(\"align\", \"center\")\n        self.tick_pos = np.arange(len(data))\n\n        self.bottom = kwargs.pop(\"bottom\", 0)\n        self.left = kwargs.pop(\"left\", 0)\n\n        self.log = kwargs.pop(\"log\", False)\n        MPLPlot.__init__(self, data, **kwargs)\n\n        if self.stacked or self.subplots:\n            self.tickoffset = self.bar_width * pos\n            if kwargs[\"align\"] == \"edge\":\n                self.lim_offset = self.bar_width / 2\n            else:\n                self.lim_offset = 0\n        else:\n            if kwargs[\"align\"] == \"edge\":\n                w = self.bar_width / self.nseries\n                self.tickoffset = self.bar_width * (pos - 0.5) + w * 0.5\n                self.lim_offset = w * 0.5\n            else:\n                self.tickoffset = self.bar_width * pos\n                self.lim_offset = 0\n\n        self.ax_pos = self.tick_pos - self.tickoffset\n\n    def _args_adjust(self) -> None:\n        if is_list_like(self.bottom):\n            self.bottom = np.array(self.bottom)\n        if is_list_like(self.left):\n            self.left = np.array(self.left)\n\n    # error: Signature of \"_plot\" incompatible with supertype \"MPLPlot\"\n    @classmethod\n    def _plot(  # type: ignore[override]\n        cls,\n        ax: Axes,\n        x,\n        y,\n        w,\n        start: int | npt.NDArray[np.intp] = 0,\n        log: bool = False,\n        **kwds,\n    ):\n        return ax.bar(x, y, w, bottom=start, log=log, **kwds)\n\n    @property\n    def _start_base(self):\n        return self.bottom\n\n    def _make_plot(self) -> None:\n        colors = self._get_colors()\n        ncolors = len(colors)\n\n        pos_prior = neg_prior = np.zeros(len(self.data))\n        K = self.nseries\n\n        for i, (label, y) in enumerate(self._iter_data(fillna=0)):\n            ax = self._get_ax(i)\n            kwds = self.kwds.copy()\n            if self._is_series:\n                kwds[\"color\"] = colors\n            elif isinstance(colors, dict):\n                kwds[\"color\"] = colors[label]\n            else:\n                kwds[\"color\"] = colors[i % ncolors]\n\n            errors = self._get_errorbars(label=label, index=i)\n            kwds = dict(kwds, **errors)\n\n            label = pprint_thing(label)\n            label = self._mark_right_label(label, index=i)\n\n            if ((\"yerr\" in kwds) or (\"xerr\" in kwds)) and (kwds.get(\"ecolor\") is None):\n                kwds[\"ecolor\"] = mpl.rcParams[\"xtick.color\"]\n\n            start = 0\n            if self.log and (y >= 1).all():\n                start = 1\n            start = start + self._start_base\n\n            if self.subplots:\n                w = self.bar_width / 2\n                rect = self._plot(\n                    ax,\n                    self.ax_pos + w,\n                    y,\n                    self.bar_width,\n                    start=start,\n                    label=label,\n                    log=self.log,\n                    **kwds,\n                )\n                ax.set_title(label)\n            elif self.stacked:\n                mask = y > 0\n                start = np.where(mask, pos_prior, neg_prior) + self._start_base\n                w = self.bar_width / 2\n                rect = self._plot(\n                    ax,\n                    self.ax_pos + w,\n                    y,\n                    self.bar_width,\n                    start=start,\n                    label=label,\n                    log=self.log,\n                    **kwds,\n                )\n                pos_prior = pos_prior + np.where(mask, y, 0)\n                neg_prior = neg_prior + np.where(mask, 0, y)\n            else:\n                w = self.bar_width / K\n                rect = self._plot(\n                    ax,\n                    self.ax_pos + (i + 0.5) * w,\n                    y,\n                    w,\n                    start=start,\n                    label=label,\n                    log=self.log,\n                    **kwds,\n                )\n            self._append_legend_handles_labels(rect, label)\n\n    def _post_plot_logic(self, ax: Axes, data) -> None:\n        if self.use_index:\n            str_index = [pprint_thing(key) for key in data.index]\n        else:\n            str_index = [pprint_thing(key) for key in range(data.shape[0])]\n\n        s_edge = self.ax_pos[0] - 0.25 + self.lim_offset\n        e_edge = self.ax_pos[-1] + 0.25 + self.bar_width + self.lim_offset\n\n        self._decorate_ticks(ax, self._get_index_name(), str_index, s_edge, e_edge)\n\n    def _decorate_ticks(self, ax: Axes, name, ticklabels, start_edge, end_edge) -> None:\n        ax.set_xlim((start_edge, end_edge))\n\n        if self.xticks is not None:\n            ax.set_xticks(np.array(self.xticks))\n        else:\n            ax.set_xticks(self.tick_pos)\n            ax.set_xticklabels(ticklabels)\n\n        if name is not None and self.use_index:\n            ax.set_xlabel(name)\n\n\nclass BarhPlot(BarPlot):\n    @property\n    def _kind(self) -> Literal[\"barh\"]:\n        return \"barh\"\n\n    _default_rot = 0\n\n    @property\n    def orientation(self) -> Literal[\"horizontal\"]:\n        return \"horizontal\"\n\n    @property\n    def _start_base(self):\n        return self.left\n\n    # error: Signature of \"_plot\" incompatible with supertype \"MPLPlot\"\n    @classmethod\n    def _plot(  # type: ignore[override]\n        cls,\n        ax: Axes,\n        x,\n        y,\n        w,\n        start: int | npt.NDArray[np.intp] = 0,\n        log: bool = False,\n        **kwds,\n    ):\n        return ax.barh(x, y, w, left=start, log=log, **kwds)\n\n    def _get_custom_index_name(self):\n        return self.ylabel\n\n    def _decorate_ticks(self, ax: Axes, name, ticklabels, start_edge, end_edge) -> None:\n        # horizontal bars\n        ax.set_ylim((start_edge, end_edge))\n        ax.set_yticks(self.tick_pos)\n        ax.set_yticklabels(ticklabels)\n        if name is not None and self.use_index:\n            ax.set_ylabel(name)\n        ax.set_xlabel(self.xlabel)\n\n\nclass PiePlot(MPLPlot):\n    @property\n    def _kind(self) -> Literal[\"pie\"]:\n        return \"pie\"\n\n    _layout_type = \"horizontal\"\n\n    def __init__(self, data, kind=None, **kwargs) -> None:\n        data = data.fillna(value=0)\n        if (data < 0).any().any():\n            raise ValueError(f\"{self._kind} plot doesn't allow negative values\")\n        MPLPlot.__init__(self, data, kind=kind, **kwargs)\n\n    def _args_adjust(self) -> None:\n        self.grid = False\n        self.logy = False\n        self.logx = False\n        self.loglog = False\n\n    def _validate_color_args(self) -> None:\n        pass\n\n    def _make_plot(self) -> None:\n        colors = self._get_colors(num_colors=len(self.data), color_kwds=\"colors\")\n        self.kwds.setdefault(\"colors\", colors)\n\n        for i, (label, y) in enumerate(self._iter_data()):\n            ax = self._get_ax(i)\n            if label is not None:\n                label = pprint_thing(label)\n                ax.set_ylabel(label)\n\n            kwds = self.kwds.copy()\n\n            def blank_labeler(label, value):\n                if value == 0:\n                    return \"\"\n                else:\n                    return label\n\n            idx = [pprint_thing(v) for v in self.data.index]\n            labels = kwds.pop(\"labels\", idx)\n            # labels is used for each wedge's labels\n            # Blank out labels for values of 0 so they don't overlap\n            # with nonzero wedges\n            if labels is not None:\n                blabels = [blank_labeler(left, value) for left, value in zip(labels, y)]\n            else:\n                blabels = None\n            results = ax.pie(y, labels=blabels, **kwds)\n\n            if kwds.get(\"autopct\", None) is not None:\n                patches, texts, autotexts = results\n            else:\n                patches, texts = results\n                autotexts = []\n\n            if self.fontsize is not None:\n                for t in texts + autotexts:\n                    t.set_fontsize(self.fontsize)\n\n            # leglabels is used for legend labels\n            leglabels = labels if labels is not None else idx\n            for p, l in zip(patches, leglabels):\n                self._append_legend_handles_labels(p, l)\n"
    },
    {
      "filename": "pandas/tests/groupby/test_grouping.py",
      "content": "\"\"\" test where we are determining what we are grouping, or getting groups \"\"\"\n\nimport numpy as np\nimport pytest\n\nimport pandas as pd\nfrom pandas import (\n    CategoricalIndex,\n    DataFrame,\n    Index,\n    MultiIndex,\n    Series,\n    Timestamp,\n    date_range,\n)\nimport pandas._testing as tm\nfrom pandas.core.api import (\n    Float64Index,\n    Int64Index,\n)\nfrom pandas.core.groupby.grouper import Grouping\n\n# selection\n# --------------------------------\n\n\nclass TestSelection:\n    def test_select_bad_cols(self):\n        df = DataFrame([[1, 2]], columns=[\"A\", \"B\"])\n        g = df.groupby(\"A\")\n        with pytest.raises(KeyError, match=\"\\\"Columns not found: 'C'\\\"\"):\n            g[[\"C\"]]\n\n        with pytest.raises(KeyError, match=\"^[^A]+$\"):\n            # A should not be referenced as a bad column...\n            # will have to rethink regex if you change message!\n            g[[\"A\", \"C\"]]\n\n    def test_groupby_duplicated_column_errormsg(self):\n        # GH7511\n        df = DataFrame(\n            columns=[\"A\", \"B\", \"A\", \"C\"], data=[range(4), range(2, 6), range(0, 8, 2)]\n        )\n\n        msg = \"Grouper for 'A' not 1-dimensional\"\n        with pytest.raises(ValueError, match=msg):\n            df.groupby(\"A\")\n        with pytest.raises(ValueError, match=msg):\n            df.groupby([\"A\", \"B\"])\n\n        grouped = df.groupby(\"B\")\n        c = grouped.count()\n        assert c.columns.nlevels == 1\n        assert c.columns.size == 3\n\n    def test_column_select_via_attr(self, df):\n        result = df.groupby(\"A\").C.sum()\n        expected = df.groupby(\"A\")[\"C\"].sum()\n        tm.assert_series_equal(result, expected)\n\n        df[\"mean\"] = 1.5\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df.groupby(\"A\").mean()\n            expected = df.groupby(\"A\").agg(np.mean)\n        tm.assert_frame_equal(result, expected)\n\n    def test_getitem_list_of_columns(self):\n        df = DataFrame(\n            {\n                \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n                \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n                \"C\": np.random.randn(8),\n                \"D\": np.random.randn(8),\n                \"E\": np.random.randn(8),\n            }\n        )\n\n        result = df.groupby(\"A\")[[\"C\", \"D\"]].mean()\n        result2 = df.groupby(\"A\")[df.columns[2:4]].mean()\n\n        expected = df.loc[:, [\"A\", \"C\", \"D\"]].groupby(\"A\").mean()\n\n        tm.assert_frame_equal(result, expected)\n        tm.assert_frame_equal(result2, expected)\n\n    def test_getitem_numeric_column_names(self):\n        # GH #13731\n        df = DataFrame(\n            {\n                0: list(\"abcd\") * 2,\n                2: np.random.randn(8),\n                4: np.random.randn(8),\n                6: np.random.randn(8),\n            }\n        )\n        result = df.groupby(0)[df.columns[1:3]].mean()\n        result2 = df.groupby(0)[[2, 4]].mean()\n\n        expected = df.loc[:, [0, 2, 4]].groupby(0).mean()\n\n        tm.assert_frame_equal(result, expected)\n        tm.assert_frame_equal(result2, expected)\n\n        # per GH 23566 enforced deprecation raises a ValueError\n        with pytest.raises(ValueError, match=\"Cannot subset columns with a tuple\"):\n            df.groupby(0)[2, 4].mean()\n\n    def test_getitem_single_tuple_of_columns_raises(self, df):\n        # per GH 23566 enforced deprecation raises a ValueError\n        with pytest.raises(ValueError, match=\"Cannot subset columns with a tuple\"):\n            df.groupby(\"A\")[\"C\", \"D\"].mean()\n\n    def test_getitem_single_column(self):\n        df = DataFrame(\n            {\n                \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n                \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n                \"C\": np.random.randn(8),\n                \"D\": np.random.randn(8),\n                \"E\": np.random.randn(8),\n            }\n        )\n\n        result = df.groupby(\"A\")[\"C\"].mean()\n\n        as_frame = df.loc[:, [\"A\", \"C\"]].groupby(\"A\").mean()\n        as_series = as_frame.iloc[:, 0]\n        expected = as_series\n\n        tm.assert_series_equal(result, expected)\n\n    def test_indices_grouped_by_tuple_with_lambda(self):\n        # GH 36158\n        df = DataFrame(\n            {\"Tuples\": ((x, y) for x in [0, 1] for y in np.random.randint(3, 5, 5))}\n        )\n\n        gb = df.groupby(\"Tuples\")\n        gb_lambda = df.groupby(lambda x: df.iloc[x, 0])\n\n        expected = gb.indices\n        result = gb_lambda.indices\n\n        tm.assert_dict_equal(result, expected)\n\n\n# grouping\n# --------------------------------\n\n\nclass TestGrouping:\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            tm.makeFloatIndex,\n            tm.makeStringIndex,\n            tm.makeIntIndex,\n            tm.makeDateIndex,\n            tm.makePeriodIndex,\n        ],\n    )\n    def test_grouper_index_types(self, index):\n        # related GH5375\n        # groupby misbehaving when using a Floatlike index\n        df = DataFrame(np.arange(10).reshape(5, 2), columns=list(\"AB\"))\n\n        df.index = index(len(df))\n        df.groupby(list(\"abcde\"), group_keys=False).apply(lambda x: x)\n\n        df.index = list(reversed(df.index.tolist()))\n        df.groupby(list(\"abcde\"), group_keys=False).apply(lambda x: x)\n\n    def test_grouper_multilevel_freq(self):\n\n        # GH 7885\n        # with level and freq specified in a pd.Grouper\n        from datetime import (\n            date,\n            timedelta,\n        )\n\n        d0 = date.today() - timedelta(days=14)\n        dates = date_range(d0, date.today())\n        date_index = MultiIndex.from_product([dates, dates], names=[\"foo\", \"bar\"])\n        df = DataFrame(np.random.randint(0, 100, 225), index=date_index)\n\n        # Check string level\n        expected = (\n            df.reset_index()\n            .groupby([pd.Grouper(key=\"foo\", freq=\"W\"), pd.Grouper(key=\"bar\", freq=\"W\")])\n            .sum()\n        )\n        # reset index changes columns dtype to object\n        expected.columns = Index([0], dtype=\"int64\")\n\n        result = df.groupby(\n            [pd.Grouper(level=\"foo\", freq=\"W\"), pd.Grouper(level=\"bar\", freq=\"W\")]\n        ).sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Check integer level\n        result = df.groupby(\n            [pd.Grouper(level=0, freq=\"W\"), pd.Grouper(level=1, freq=\"W\")]\n        ).sum()\n        tm.assert_frame_equal(result, expected)\n\n    def test_grouper_creation_bug(self):\n\n        # GH 8795\n        df = DataFrame({\"A\": [0, 0, 1, 1, 2, 2], \"B\": [1, 2, 3, 4, 5, 6]})\n        g = df.groupby(\"A\")\n        expected = g.sum()\n\n        g = df.groupby(pd.Grouper(key=\"A\"))\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        g = df.groupby(pd.Grouper(key=\"A\", axis=0))\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        result = g.apply(lambda x: x.sum())\n        expected[\"A\"] = [0, 2, 4]\n        expected = expected.loc[:, [\"A\", \"B\"]]\n        tm.assert_frame_equal(result, expected)\n\n        # GH14334\n        # pd.Grouper(key=...) may be passed in a list\n        df = DataFrame(\n            {\"A\": [0, 0, 0, 1, 1, 1], \"B\": [1, 1, 2, 2, 3, 3], \"C\": [1, 2, 3, 4, 5, 6]}\n        )\n        # Group by single column\n        expected = df.groupby(\"A\").sum()\n        g = df.groupby([pd.Grouper(key=\"A\")])\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Group by two columns\n        # using a combination of strings and Grouper objects\n        expected = df.groupby([\"A\", \"B\"]).sum()\n\n        # Group with two Grouper objects\n        g = df.groupby([pd.Grouper(key=\"A\"), pd.Grouper(key=\"B\")])\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Group with a string and a Grouper object\n        g = df.groupby([\"A\", pd.Grouper(key=\"B\")])\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Group with a Grouper object and a string\n        g = df.groupby([pd.Grouper(key=\"A\"), \"B\"])\n        result = g.sum()\n        tm.assert_frame_equal(result, expected)\n\n        # GH8866\n        s = Series(\n            np.arange(8, dtype=\"int64\"),\n            index=MultiIndex.from_product(\n                [list(\"ab\"), range(2), date_range(\"20130101\", periods=2)],\n                names=[\"one\", \"two\", \"three\"],\n            ),\n        )\n        result = s.groupby(pd.Grouper(level=\"three\", freq=\"M\")).sum()\n        expected = Series(\n            [28],\n            index=pd.DatetimeIndex([Timestamp(\"2013-01-31\")], freq=\"M\", name=\"three\"),\n        )\n        tm.assert_series_equal(result, expected)\n\n        # just specifying a level breaks\n        result = s.groupby(pd.Grouper(level=\"one\")).sum()\n        expected = s.groupby(level=\"one\").sum()\n        tm.assert_series_equal(result, expected)\n\n    def test_grouper_column_and_index(self):\n        # GH 14327\n\n        # Grouping a multi-index frame by a column and an index level should\n        # be equivalent to resetting the index and grouping by two columns\n        idx = MultiIndex.from_tuples(\n            [(\"a\", 1), (\"a\", 2), (\"a\", 3), (\"b\", 1), (\"b\", 2), (\"b\", 3)]\n        )\n        idx.names = [\"outer\", \"inner\"]\n        df_multi = DataFrame(\n            {\"A\": np.arange(6), \"B\": [\"one\", \"one\", \"two\", \"two\", \"one\", \"one\"]},\n            index=idx,\n        )\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df_multi.groupby([\"B\", pd.Grouper(level=\"inner\")]).mean()\n            expected = df_multi.reset_index().groupby([\"B\", \"inner\"]).mean()\n        tm.assert_frame_equal(result, expected)\n\n        # Test the reverse grouping order\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df_multi.groupby([pd.Grouper(level=\"inner\"), \"B\"]).mean()\n            expected = df_multi.reset_index().groupby([\"inner\", \"B\"]).mean()\n        tm.assert_frame_equal(result, expected)\n\n        # Grouping a single-index frame by a column and the index should\n        # be equivalent to resetting the index and grouping by two columns\n        df_single = df_multi.reset_index(\"outer\")\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df_single.groupby([\"B\", pd.Grouper(level=\"inner\")]).mean()\n            expected = df_single.reset_index().groupby([\"B\", \"inner\"]).mean()\n        tm.assert_frame_equal(result, expected)\n\n        # Test the reverse grouping order\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df_single.groupby([pd.Grouper(level=\"inner\"), \"B\"]).mean()\n            expected = df_single.reset_index().groupby([\"inner\", \"B\"]).mean()\n        tm.assert_frame_equal(result, expected)\n\n    def test_groupby_levels_and_columns(self):\n        # GH9344, GH9049\n        idx_names = [\"x\", \"y\"]\n        idx = MultiIndex.from_tuples([(1, 1), (1, 2), (3, 4), (5, 6)], names=idx_names)\n        df = DataFrame(np.arange(12).reshape(-1, 3), index=idx)\n\n        by_levels = df.groupby(level=idx_names).mean()\n        # reset_index changes columns dtype to object\n        by_columns = df.reset_index().groupby(idx_names).mean()\n\n        # without casting, by_columns.columns is object-dtype\n        by_columns.columns = by_columns.columns.astype(np.int64)\n        tm.assert_frame_equal(by_levels, by_columns)\n\n    def test_groupby_categorical_index_and_columns(self, observed):\n        # GH18432, adapted for GH25871\n        columns = [\"A\", \"B\", \"A\", \"B\"]\n        categories = [\"B\", \"A\"]\n        data = np.array(\n            [[1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2], [1, 2, 1, 2]], int\n        )\n        cat_columns = CategoricalIndex(columns, categories=categories, ordered=True)\n        df = DataFrame(data=data, columns=cat_columns)\n        result = df.groupby(axis=1, level=0, observed=observed).sum()\n        expected_data = np.array([[4, 2], [4, 2], [4, 2], [4, 2], [4, 2]], int)\n        expected_columns = CategoricalIndex(\n            categories, categories=categories, ordered=True\n        )\n        expected = DataFrame(data=expected_data, columns=expected_columns)\n        tm.assert_frame_equal(result, expected)\n\n        # test transposed version\n        df = DataFrame(data.T, index=cat_columns)\n        result = df.groupby(axis=0, level=0, observed=observed).sum()\n        expected = DataFrame(data=expected_data.T, index=expected_columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_grouper_getting_correct_binner(self):\n\n        # GH 10063\n        # using a non-time-based grouper and a time-based grouper\n        # and specifying levels\n        df = DataFrame(\n            {\"A\": 1},\n            index=MultiIndex.from_product(\n                [list(\"ab\"), date_range(\"20130101\", periods=80)], names=[\"one\", \"two\"]\n            ),\n        )\n        result = df.groupby(\n            [pd.Grouper(level=\"one\"), pd.Grouper(level=\"two\", freq=\"M\")]\n        ).sum()\n        expected = DataFrame(\n            {\"A\": [31, 28, 21, 31, 28, 21]},\n            index=MultiIndex.from_product(\n                [list(\"ab\"), date_range(\"20130101\", freq=\"M\", periods=3)],\n                names=[\"one\", \"two\"],\n            ),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_grouper_iter(self, df):\n        assert sorted(df.groupby(\"A\").grouper) == [\"bar\", \"foo\"]\n\n    def test_empty_groups(self, df):\n        # see gh-1048\n        with pytest.raises(ValueError, match=\"No group keys passed!\"):\n            df.groupby([])\n\n    def test_groupby_grouper(self, df):\n        grouped = df.groupby(\"A\")\n\n        msg = \"The default value of numeric_only\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            result = df.groupby(grouped.grouper).mean()\n            expected = grouped.mean()\n        tm.assert_frame_equal(result, expected)\n\n    def test_groupby_dict_mapping(self):\n        # GH #679\n        s = Series({\"T1\": 5})\n        result = s.groupby({\"T1\": \"T2\"}).agg(sum)\n        expected = s.groupby([\"T2\"]).agg(sum)\n        tm.assert_series_equal(result, expected)\n\n        s = Series([1.0, 2.0, 3.0, 4.0], index=list(\"abcd\"))\n        mapping = {\"a\": 0, \"b\": 0, \"c\": 1, \"d\": 1}\n\n        result = s.groupby(mapping).mean()\n        result2 = s.groupby(mapping).agg(np.mean)\n        expected = s.groupby([0, 0, 1, 1]).mean()\n        expected2 = s.groupby([0, 0, 1, 1]).mean()\n        tm.assert_series_equal(result, expected)\n        tm.assert_series_equal(result, result2)\n        tm.assert_series_equal(result, expected2)\n\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            [0, 1, 2, 3],\n            [\"a\", \"b\", \"c\", \"d\"],\n            [Timestamp(2021, 7, 28 + i) for i in range(4)],\n        ],\n    )\n    def test_groupby_series_named_with_tuple(self, frame_or_series, index):\n        # GH 42731\n        obj = frame_or_series([1, 2, 3, 4], index=index)\n        groups = Series([1, 0, 1, 0], index=index, name=(\"a\", \"a\"))\n        result = obj.groupby(groups).last()\n        expected = frame_or_series([4, 3])\n        expected.index.name = (\"a\", \"a\")\n        tm.assert_equal(result, expected)\n\n    def test_groupby_grouper_f_sanity_checked(self):\n        dates = date_range(\"01-Jan-2013\", periods=12, freq=\"MS\")\n        ts = Series(np.random.randn(12), index=dates)\n\n        # GH3035\n        # index.map is used to apply grouper to the index\n        # if it fails on the elements, map tries it on the entire index as\n        # a sequence. That can yield invalid results that cause trouble\n        # down the line.\n        # the surprise comes from using key[0:6] rather than str(key)[0:6]\n        # when the elements are Timestamp.\n        # the result is Index[0:6], very confusing.\n\n        msg = r\"Grouper result violates len\\(labels\\) == len\\(data\\)\"\n        with pytest.raises(AssertionError, match=msg):\n            ts.groupby(lambda key: key[0:6])\n\n    def test_grouping_error_on_multidim_input(self, df):\n        msg = \"Grouper for '<class 'pandas.core.frame.DataFrame'>' not 1-dimensional\"\n        with pytest.raises(ValueError, match=msg):\n            Grouping(df.index, df[[\"A\", \"A\"]])\n\n    def test_multiindex_passthru(self):\n\n        # GH 7997\n        # regression from 0.14.1\n        df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        df.columns = MultiIndex.from_tuples([(0, 1), (1, 1), (2, 1)])\n\n        result = df.groupby(axis=1, level=[0, 1]).first()\n        tm.assert_frame_equal(result, df)\n\n    def test_multiindex_negative_level(self, mframe):\n        # GH 13901\n        result = mframe.groupby(level=-1).sum()\n        expected = mframe.groupby(level=\"second\").sum()\n        tm.assert_frame_equal(result, expected)\n\n        result = mframe.groupby(level=-2).sum()\n        expected = mframe.groupby(level=\"first\").sum()\n        tm.assert_frame_equal(result, expected)\n\n        result = mframe.groupby(level=[-2, -1]).sum()\n        expected = mframe.sort_index()\n        tm.assert_frame_equal(result, expected)\n\n        result = mframe.groupby(level=[-1, \"first\"]).sum()\n        expected = mframe.groupby(level=[\"second\", \"first\"]).sum()\n        tm.assert_frame_equal(result, expected)\n\n    def test_multifunc_select_col_integer_cols(self, df):\n        df.columns = np.arange(len(df.columns))\n\n        # it works!\n        df.groupby(1, as_index=False)[2].agg({\"Q\": np.mean})\n\n    def test_multiindex_columns_empty_level(self):\n        lst = [[\"count\", \"values\"], [\"to filter\", \"\"]]\n        midx = MultiIndex.from_tuples(lst)\n\n        df = DataFrame([[1, \"A\"]], columns=midx)\n\n        grouped = df.groupby(\"to filter\").groups\n        assert grouped[\"A\"] == [0]\n\n        grouped = df.groupby([(\"to filter\", \"\")]).groups\n        assert grouped[\"A\"] == [0]\n\n        df = DataFrame([[1, \"A\"], [2, \"B\"]], columns=midx)\n\n        expected = df.groupby(\"to filter\").groups\n        result = df.groupby([(\"to filter\", \"\")]).groups\n        assert result == expected\n\n        df = DataFrame([[1, \"A\"], [2, \"A\"]], columns=midx)\n\n        expected = df.groupby(\"to filter\").groups\n        result = df.groupby([(\"to filter\", \"\")]).groups\n        tm.assert_dict_equal(result, expected)\n\n    def test_groupby_multiindex_tuple(self):\n        # GH 17979\n        df = DataFrame(\n            [[1, 2, 3, 4], [3, 4, 5, 6], [1, 4, 2, 3]],\n            columns=MultiIndex.from_arrays([[\"a\", \"b\", \"b\", \"c\"], [1, 1, 2, 2]]),\n        )\n        expected = df.groupby([(\"b\", 1)]).groups\n        result = df.groupby((\"b\", 1)).groups\n        tm.assert_dict_equal(expected, result)\n\n        df2 = DataFrame(\n            df.values,\n            columns=MultiIndex.from_arrays(\n                [[\"a\", \"b\", \"b\", \"c\"], [\"d\", \"d\", \"e\", \"e\"]]\n            ),\n        )\n        expected = df2.groupby([(\"b\", \"d\")]).groups\n        result = df.groupby((\"b\", 1)).groups\n        tm.assert_dict_equal(expected, result)\n\n        df3 = DataFrame(df.values, columns=[(\"a\", \"d\"), (\"b\", \"d\"), (\"b\", \"e\"), \"c\"])\n        expected = df3.groupby([(\"b\", \"d\")]).groups\n        result = df.groupby((\"b\", 1)).groups\n        tm.assert_dict_equal(expected, result)\n\n    @pytest.mark.parametrize(\"sort\", [True, False])\n    def test_groupby_level(self, sort, mframe, df):\n        # GH 17537\n        frame = mframe\n        deleveled = frame.reset_index()\n\n        result0 = frame.groupby(level=0, sort=sort).sum()\n        result1 = frame.groupby(level=1, sort=sort).sum()\n\n        expected0 = frame.groupby(deleveled[\"first\"].values, sort=sort).sum()\n        expected1 = frame.groupby(deleveled[\"second\"].values, sort=sort).sum()\n\n        expected0.index.name = \"first\"\n        expected1.index.name = \"second\"\n\n        assert result0.index.name == \"first\"\n        assert result1.index.name == \"second\"\n\n        tm.assert_frame_equal(result0, expected0)\n        tm.assert_frame_equal(result1, expected1)\n        assert result0.index.name == frame.index.names[0]\n        assert result1.index.name == frame.index.names[1]\n\n        # groupby level name\n        result0 = frame.groupby(level=\"first\", sort=sort).sum()\n        result1 = frame.groupby(level=\"second\", sort=sort).sum()\n        tm.assert_frame_equal(result0, expected0)\n        tm.assert_frame_equal(result1, expected1)\n\n        # axis=1\n\n        result0 = frame.T.groupby(level=0, axis=1, sort=sort).sum()\n        result1 = frame.T.groupby(level=1, axis=1, sort=sort).sum()\n        tm.assert_frame_equal(result0, expected0.T)\n        tm.assert_frame_equal(result1, expected1.T)\n\n        # raise exception for non-MultiIndex\n        msg = \"level > 0 or level < -1 only valid with MultiIndex\"\n        with pytest.raises(ValueError, match=msg):\n            df.groupby(level=1)\n\n    def test_groupby_level_index_names(self, axis):\n        # GH4014 this used to raise ValueError since 'exp'>1 (in py2)\n        df = DataFrame({\"exp\": [\"A\"] * 3 + [\"B\"] * 3, \"var1\": range(6)}).set_index(\n            \"exp\"\n        )\n        if axis in (1, \"columns\"):\n            df = df.T\n        df.groupby(level=\"exp\", axis=axis)\n        msg = f\"level name foo is not the name of the {df._get_axis_name(axis)}\"\n        with pytest.raises(ValueError, match=msg):\n            df.groupby(level=\"foo\", axis=axis)\n\n    @pytest.mark.parametrize(\"sort\", [True, False])\n    def test_groupby_level_with_nas(self, sort):\n        # GH 17537\n        index = MultiIndex(\n            levels=[[1, 0], [0, 1, 2, 3]],\n            codes=[[1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 2, 3, 0, 1, 2, 3]],\n        )\n\n        # factorizing doesn't confuse things\n        s = Series(np.arange(8.0), index=index)\n        result = s.groupby(level=0, sort=sort).sum()\n        expected = Series([6.0, 22.0], index=[0, 1])\n        tm.assert_series_equal(result, expected)\n\n        index = MultiIndex(\n            levels=[[1, 0], [0, 1, 2, 3]],\n            codes=[[1, 1, 1, 1, -1, 0, 0, 0], [0, 1, 2, 3, 0, 1, 2, 3]],\n        )\n\n        # factorizing doesn't confuse things\n        s = Series(np.arange(8.0), index=index)\n        result = s.groupby(level=0, sort=sort).sum()\n        expected = Series([6.0, 18.0], index=[0.0, 1.0])\n        tm.assert_series_equal(result, expected)\n\n    def test_groupby_args(self, mframe):\n        # PR8618 and issue 8015\n        frame = mframe\n\n        msg = \"You have to supply one of 'by' and 'level'\"\n        with pytest.raises(TypeError, match=msg):\n            frame.groupby()\n\n        msg = \"You have to supply one of 'by' and 'level'\"\n        with pytest.raises(TypeError, match=msg):\n            frame.groupby(by=None, level=None)\n\n    @pytest.mark.parametrize(\n        \"sort,labels\",\n        [\n            [True, [2, 2, 2, 0, 0, 1, 1, 3, 3, 3]],\n            [False, [0, 0, 0, 1, 1, 2, 2, 3, 3, 3]],\n        ],\n    )\n    def test_level_preserve_order(self, sort, labels, mframe):\n        # GH 17537\n        grouped = mframe.groupby(level=0, sort=sort)\n        exp_labels = np.array(labels, np.intp)\n        tm.assert_almost_equal(grouped.grouper.codes[0], exp_labels)\n\n    def test_grouping_labels(self, mframe):\n        grouped = mframe.groupby(mframe.index.get_level_values(0))\n        exp_labels = np.array([2, 2, 2, 0, 0, 1, 1, 3, 3, 3], dtype=np.intp)\n        tm.assert_almost_equal(grouped.grouper.codes[0], exp_labels)\n\n    def test_list_grouper_with_nat(self):\n        # GH 14715\n        df = DataFrame({\"date\": date_range(\"1/1/2011\", periods=365, freq=\"D\")})\n        df.iloc[-1] = pd.NaT\n        grouper = pd.Grouper(key=\"date\", freq=\"AS\")\n\n        # Grouper in a list grouping\n        result = df.groupby([grouper])\n        expected = {Timestamp(\"2011-01-01\"): Index(list(range(364)))}\n        tm.assert_dict_equal(result.groups, expected)\n\n        # Test case without a list\n        result = df.groupby(grouper)\n        expected = {Timestamp(\"2011-01-01\"): 365}\n        tm.assert_dict_equal(result.groups, expected)\n\n    @pytest.mark.parametrize(\n        \"func,expected\",\n        [\n            (\n                \"transform\",\n                Series(name=2, dtype=np.float64, index=Index([])),\n            ),\n            (\n                \"agg\",\n                Series(name=2, dtype=np.float64, index=Float64Index([], name=1)),\n            ),\n            (\n                \"apply\",\n                Series(name=2, dtype=np.float64, index=Float64Index([], name=1)),\n            ),\n        ],\n    )\n    def test_evaluate_with_empty_groups(self, func, expected):\n        # 26208\n        # test transform'ing empty groups\n        # (not testing other agg fns, because they return\n        # different index objects.\n        df = DataFrame({1: [], 2: []})\n        g = df.groupby(1, group_keys=False)\n        result = getattr(g[2], func)(lambda x: x)\n        tm.assert_series_equal(result, expected)\n\n    def test_groupby_empty(self):\n        # https://github.com/pandas-dev/pandas/issues/27190\n        s = Series([], name=\"name\", dtype=\"float64\")\n        gr = s.groupby([])\n\n        result = gr.mean()\n        tm.assert_series_equal(result, s)\n\n        # check group properties\n        assert len(gr.grouper.groupings) == 1\n        tm.assert_numpy_array_equal(\n            gr.grouper.group_info[0], np.array([], dtype=np.dtype(np.intp))\n        )\n\n        tm.assert_numpy_array_equal(\n            gr.grouper.group_info[1], np.array([], dtype=np.dtype(np.intp))\n        )\n\n        assert gr.grouper.group_info[2] == 0\n\n        # check name\n        assert s.groupby(s).grouper.names == [\"name\"]\n\n    def test_groupby_level_index_value_all_na(self):\n        # issue 20519\n        df = DataFrame(\n            [[\"x\", np.nan, 10], [None, np.nan, 20]], columns=[\"A\", \"B\", \"C\"]\n        ).set_index([\"A\", \"B\"])\n        result = df.groupby(level=[\"A\", \"B\"]).sum()\n        expected = DataFrame(\n            data=[],\n            index=MultiIndex(\n                levels=[Index([\"x\"], dtype=\"object\"), Index([], dtype=\"float64\")],\n                codes=[[], []],\n                names=[\"A\", \"B\"],\n            ),\n            columns=[\"C\"],\n            dtype=\"int64\",\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_groupby_multiindex_level_empty(self):\n        # https://github.com/pandas-dev/pandas/issues/31670\n        df = DataFrame(\n            [[123, \"a\", 1.0], [123, \"b\", 2.0]], columns=[\"id\", \"category\", \"value\"]\n        )\n        df = df.set_index([\"id\", \"category\"])\n        empty = df[df.value < 0]\n        result = empty.groupby(\"id\").sum()\n        expected = DataFrame(\n            dtype=\"float64\", columns=[\"value\"], index=Int64Index([], name=\"id\")\n        )\n        tm.assert_frame_equal(result, expected)\n\n\n# get_group\n# --------------------------------\n\n\nclass TestGetGroup:\n    def test_get_group(self):\n        # GH 5267\n        # be datelike friendly\n        df = DataFrame(\n            {\n                \"DATE\": pd.to_datetime(\n                    [\n                        \"10-Oct-2013\",\n                        \"10-Oct-2013\",\n                        \"10-Oct-2013\",\n                        \"11-Oct-2013\",\n                        \"11-Oct-2013\",\n                        \"11-Oct-2013\",\n                    ]\n                ),\n                \"label\": [\"foo\", \"foo\", \"bar\", \"foo\", \"foo\", \"bar\"],\n                \"VAL\": [1, 2, 3, 4, 5, 6],\n            }\n        )\n\n        g = df.groupby(\"DATE\")\n        key = list(g.groups)[0]\n        result1 = g.get_group(key)\n        result2 = g.get_group(Timestamp(key).to_pydatetime())\n        result3 = g.get_group(str(Timestamp(key)))\n        tm.assert_frame_equal(result1, result2)\n        tm.assert_frame_equal(result1, result3)\n\n        g = df.groupby([\"DATE\", \"label\"])\n\n        key = list(g.groups)[0]\n        result1 = g.get_group(key)\n        result2 = g.get_group((Timestamp(key[0]).to_pydatetime(), key[1]))\n        result3 = g.get_group((str(Timestamp(key[0])), key[1]))\n        tm.assert_frame_equal(result1, result2)\n        tm.assert_frame_equal(result1, result3)\n\n        # must pass a same-length tuple with multiple keys\n        msg = \"must supply a tuple to get_group with multiple grouping keys\"\n        with pytest.raises(ValueError, match=msg):\n            g.get_group(\"foo\")\n        with pytest.raises(ValueError, match=msg):\n            g.get_group(\"foo\")\n        msg = \"must supply a same-length tuple to get_group with multiple grouping keys\"\n        with pytest.raises(ValueError, match=msg):\n            g.get_group((\"foo\", \"bar\", \"baz\"))\n\n    def test_get_group_empty_bins(self, observed):\n\n        d = DataFrame([3, 1, 7, 6])\n        bins = [0, 5, 10, 15]\n        g = d.groupby(pd.cut(d[0], bins), observed=observed)\n\n        # TODO: should prob allow a str of Interval work as well\n        # IOW '(0, 5]'\n        result = g.get_group(pd.Interval(0, 5))\n        expected = DataFrame([3, 1], index=[0, 1])\n        tm.assert_frame_equal(result, expected)\n\n        msg = r\"Interval\\(10, 15, closed='right'\\)\"\n        with pytest.raises(KeyError, match=msg):\n            g.get_group(pd.Interval(10, 15))\n\n    def test_get_group_grouped_by_tuple(self):\n        # GH 8121\n        df = DataFrame([[(1,), (1, 2), (1,), (1, 2)]], index=[\"ids\"]).T\n        gr = df.groupby(\"ids\")\n        expected = DataFrame({\"ids\": [(1,), (1,)]}, index=[0, 2])\n        result = gr.get_group((1,))\n        tm.assert_frame_equal(result, expected)\n\n        dt = pd.to_datetime([\"2010-01-01\", \"2010-01-02\", \"2010-01-01\", \"2010-01-02\"])\n        df = DataFrame({\"ids\": [(x,) for x in dt]})\n        gr = df.groupby(\"ids\")\n        result = gr.get_group((\"2010-01-01\",))\n        expected = DataFrame({\"ids\": [(dt[0],), (dt[0],)]}, index=[0, 2])\n        tm.assert_frame_equal(result, expected)\n\n    def test_get_group_grouped_by_tuple_with_lambda(self):\n        # GH 36158\n        df = DataFrame(\n            {\"Tuples\": ((x, y) for x in [0, 1] for y in np.random.randint(3, 5, 5))}\n        )\n\n        gb = df.groupby(\"Tuples\")\n        gb_lambda = df.groupby(lambda x: df.iloc[x, 0])\n\n        expected = gb.get_group(list(gb.groups.keys())[0])\n        result = gb_lambda.get_group(list(gb_lambda.groups.keys())[0])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_groupby_with_empty(self):\n        index = pd.DatetimeIndex(())\n        data = ()\n        series = Series(data, index, dtype=object)\n        grouper = pd.Grouper(freq=\"D\")\n        grouped = series.groupby(grouper)\n        assert next(iter(grouped), None) is None\n\n    def test_groupby_with_single_column(self):\n        df = DataFrame({\"a\": list(\"abssbab\")})\n        tm.assert_frame_equal(df.groupby(\"a\").get_group(\"a\"), df.iloc[[0, 5]])\n        # GH 13530\n        exp = DataFrame(index=Index([\"a\", \"b\", \"s\"], name=\"a\"))\n        tm.assert_frame_equal(df.groupby(\"a\").count(), exp)\n        tm.assert_frame_equal(df.groupby(\"a\").sum(), exp)\n\n        exp = df.iloc[[3, 4, 5]]\n        tm.assert_frame_equal(df.groupby(\"a\").nth(1), exp)\n\n    def test_gb_key_len_equal_axis_len(self):\n        # GH16843\n        # test ensures that index and column keys are recognized correctly\n        # when number of keys equals axis length of groupby\n        df = DataFrame(\n            [[\"foo\", \"bar\", \"B\", 1], [\"foo\", \"bar\", \"B\", 2], [\"foo\", \"baz\", \"C\", 3]],\n            columns=[\"first\", \"second\", \"third\", \"one\"],\n        )\n        df = df.set_index([\"first\", \"second\"])\n        df = df.groupby([\"first\", \"second\", \"third\"]).size()\n        assert df.loc[(\"foo\", \"bar\", \"B\")] == 2\n        assert df.loc[(\"foo\", \"baz\", \"C\")] == 1\n\n\n# groups & iteration\n# --------------------------------\n\n\nclass TestIteration:\n    def test_groups(self, df):\n        grouped = df.groupby([\"A\"])\n        groups = grouped.groups\n        assert groups is grouped.groups  # caching works\n\n        for k, v in grouped.groups.items():\n            assert (df.loc[v][\"A\"] == k).all()\n\n        grouped = df.groupby([\"A\", \"B\"])\n        groups = grouped.groups\n        assert groups is grouped.groups  # caching works\n\n        for k, v in grouped.groups.items():\n            assert (df.loc[v][\"A\"] == k[0]).all()\n            assert (df.loc[v][\"B\"] == k[1]).all()\n\n    def test_grouping_is_iterable(self, tsframe):\n        # this code path isn't used anywhere else\n        # not sure it's useful\n        grouped = tsframe.groupby([lambda x: x.weekday(), lambda x: x.year])\n\n        # test it works\n        for g in grouped.grouper.groupings[0]:\n            pass\n\n    def test_multi_iter(self):\n        s = Series(np.arange(6))\n        k1 = np.array([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"])\n        k2 = np.array([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\"])\n\n        grouped = s.groupby([k1, k2])\n\n        iterated = list(grouped)\n        expected = [\n            (\"a\", \"1\", s[[0, 2]]),\n            (\"a\", \"2\", s[[1]]),\n            (\"b\", \"1\", s[[4]]),\n            (\"b\", \"2\", s[[3, 5]]),\n        ]\n        for i, ((one, two), three) in enumerate(iterated):\n            e1, e2, e3 = expected[i]\n            assert e1 == one\n            assert e2 == two\n            tm.assert_series_equal(three, e3)\n\n    def test_multi_iter_frame(self, three_group):\n        k1 = np.array([\"b\", \"b\", \"b\", \"a\", \"a\", \"a\"])\n        k2 = np.array([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\"])\n        df = DataFrame(\n            {\"v1\": np.random.randn(6), \"v2\": np.random.randn(6), \"k1\": k1, \"k2\": k2},\n            index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\n        )\n\n        grouped = df.groupby([\"k1\", \"k2\"])\n\n        # things get sorted!\n        iterated = list(grouped)\n        idx = df.index\n        expected = [\n            (\"a\", \"1\", df.loc[idx[[4]]]),\n            (\"a\", \"2\", df.loc[idx[[3, 5]]]),\n            (\"b\", \"1\", df.loc[idx[[0, 2]]]),\n            (\"b\", \"2\", df.loc[idx[[1]]]),\n        ]\n        for i, ((one, two), three) in enumerate(iterated):\n            e1, e2, e3 = expected[i]\n            assert e1 == one\n            assert e2 == two\n            tm.assert_frame_equal(three, e3)\n\n        # don't iterate through groups with no data\n        df[\"k1\"] = np.array([\"b\", \"b\", \"b\", \"a\", \"a\", \"a\"])\n        df[\"k2\"] = np.array([\"1\", \"1\", \"1\", \"2\", \"2\", \"2\"])\n        grouped = df.groupby([\"k1\", \"k2\"])\n        groups = {key: gp for key, gp in grouped}\n        assert len(groups) == 2\n\n        # axis = 1\n        three_levels = three_group.groupby([\"A\", \"B\", \"C\"]).mean()\n        grouped = three_levels.T.groupby(axis=1, level=(1, 2))\n        for key, group in grouped:\n            pass\n\n    def test_dictify(self, df):\n        dict(iter(df.groupby(\"A\")))\n        dict(iter(df.groupby([\"A\", \"B\"])))\n        dict(iter(df[\"C\"].groupby(df[\"A\"])))\n        dict(iter(df[\"C\"].groupby([df[\"A\"], df[\"B\"]])))\n        dict(iter(df.groupby(\"A\")[\"C\"]))\n        dict(iter(df.groupby([\"A\", \"B\"])[\"C\"]))\n\n    def test_groupby_with_small_elem(self):\n        # GH 8542\n        # length=2\n        df = DataFrame(\n            {\"event\": [\"start\", \"start\"], \"change\": [1234, 5678]},\n            index=pd.DatetimeIndex([\"2014-09-10\", \"2013-10-10\"]),\n        )\n        grouped = df.groupby([pd.Grouper(freq=\"M\"), \"event\"])\n        assert len(grouped.groups) == 2\n        assert grouped.ngroups == 2\n        assert (Timestamp(\"2014-09-30\"), \"start\") in grouped.groups\n        assert (Timestamp(\"2013-10-31\"), \"start\") in grouped.groups\n\n        res = grouped.get_group((Timestamp(\"2014-09-30\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[0], :])\n        res = grouped.get_group((Timestamp(\"2013-10-31\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[1], :])\n\n        df = DataFrame(\n            {\"event\": [\"start\", \"start\", \"start\"], \"change\": [1234, 5678, 9123]},\n            index=pd.DatetimeIndex([\"2014-09-10\", \"2013-10-10\", \"2014-09-15\"]),\n        )\n        grouped = df.groupby([pd.Grouper(freq=\"M\"), \"event\"])\n        assert len(grouped.groups) == 2\n        assert grouped.ngroups == 2\n        assert (Timestamp(\"2014-09-30\"), \"start\") in grouped.groups\n        assert (Timestamp(\"2013-10-31\"), \"start\") in grouped.groups\n\n        res = grouped.get_group((Timestamp(\"2014-09-30\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[0, 2], :])\n        res = grouped.get_group((Timestamp(\"2013-10-31\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[1], :])\n\n        # length=3\n        df = DataFrame(\n            {\"event\": [\"start\", \"start\", \"start\"], \"change\": [1234, 5678, 9123]},\n            index=pd.DatetimeIndex([\"2014-09-10\", \"2013-10-10\", \"2014-08-05\"]),\n        )\n        grouped = df.groupby([pd.Grouper(freq=\"M\"), \"event\"])\n        assert len(grouped.groups) == 3\n        assert grouped.ngroups == 3\n        assert (Timestamp(\"2014-09-30\"), \"start\") in grouped.groups\n        assert (Timestamp(\"2013-10-31\"), \"start\") in grouped.groups\n        assert (Timestamp(\"2014-08-31\"), \"start\") in grouped.groups\n\n        res = grouped.get_group((Timestamp(\"2014-09-30\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[0], :])\n        res = grouped.get_group((Timestamp(\"2013-10-31\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[1], :])\n        res = grouped.get_group((Timestamp(\"2014-08-31\"), \"start\"))\n        tm.assert_frame_equal(res, df.iloc[[2], :])\n\n    def test_grouping_string_repr(self):\n        # GH 13394\n        mi = MultiIndex.from_arrays([list(\"AAB\"), list(\"aba\")])\n        df = DataFrame([[1, 2, 3]], columns=mi)\n        gr = df.groupby(df[(\"A\", \"a\")])\n\n        result = gr.grouper.groupings[0].__repr__()\n        expected = \"Grouping(('A', 'a'))\"\n        assert result == expected\n"
    },
    {
      "filename": "pandas/tests/indexing/test_loc.py",
      "content": "\"\"\" test label based indexing with loc \"\"\"\nfrom collections import namedtuple\nfrom datetime import (\n    date,\n    datetime,\n    time,\n    timedelta,\n)\nimport re\n\nfrom dateutil.tz import gettz\nimport numpy as np\nimport pytest\n\nfrom pandas.errors import IndexingError\nimport pandas.util._test_decorators as td\n\nimport pandas as pd\nfrom pandas import (\n    Categorical,\n    CategoricalDtype,\n    CategoricalIndex,\n    DataFrame,\n    DatetimeIndex,\n    Index,\n    IndexSlice,\n    MultiIndex,\n    Period,\n    PeriodIndex,\n    Series,\n    SparseDtype,\n    Timedelta,\n    Timestamp,\n    date_range,\n    timedelta_range,\n    to_datetime,\n    to_timedelta,\n)\nimport pandas._testing as tm\nfrom pandas.api.types import is_scalar\nfrom pandas.core.api import Float64Index\nfrom pandas.core.indexing import _one_ellipsis_message\nfrom pandas.tests.indexing.common import check_indexing_smoketest_or_raises\n\n\n@pytest.mark.parametrize(\n    \"series, new_series, expected_ser\",\n    [\n        [[np.nan, np.nan, \"b\"], [\"a\", np.nan, np.nan], [False, True, True]],\n        [[np.nan, \"b\"], [\"a\", np.nan], [False, True]],\n    ],\n)\ndef test_not_change_nan_loc(series, new_series, expected_ser):\n    # GH 28403\n    df = DataFrame({\"A\": series})\n    df.loc[:, \"A\"] = new_series\n    expected = DataFrame({\"A\": expected_ser})\n    tm.assert_frame_equal(df.isna(), expected)\n    tm.assert_frame_equal(df.notna(), ~expected)\n\n\nclass TestLoc:\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_int(self, kind, request):\n\n        # int label\n        obj = request.getfixturevalue(f\"{kind}_labels\")\n        check_indexing_smoketest_or_raises(obj, \"loc\", 2, fails=KeyError)\n\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label(self, kind, request):\n\n        # label\n        obj = request.getfixturevalue(f\"{kind}_empty\")\n        check_indexing_smoketest_or_raises(obj, \"loc\", \"c\", fails=KeyError)\n\n    @pytest.mark.parametrize(\n        \"key, typs, axes\",\n        [\n            [\"f\", [\"ints\", \"uints\", \"labels\", \"mixed\", \"ts\"], None],\n            [\"f\", [\"floats\"], None],\n            [20, [\"ints\", \"uints\", \"mixed\"], None],\n            [20, [\"labels\"], None],\n            [20, [\"ts\"], 0],\n            [20, [\"floats\"], 0],\n        ],\n    )\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label_out_of_range(self, key, typs, axes, kind, request):\n        for typ in typs:\n            obj = request.getfixturevalue(f\"{kind}_{typ}\")\n            # out of range label\n            check_indexing_smoketest_or_raises(\n                obj, \"loc\", key, axes=axes, fails=KeyError\n            )\n\n    @pytest.mark.parametrize(\n        \"key, typs\",\n        [\n            [[0, 1, 2], [\"ints\", \"uints\", \"floats\"]],\n            [[1, 3.0, \"A\"], [\"ints\", \"uints\", \"floats\"]],\n        ],\n    )\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label_list(self, key, typs, kind, request):\n        for typ in typs:\n            obj = request.getfixturevalue(f\"{kind}_{typ}\")\n            # list of labels\n            check_indexing_smoketest_or_raises(obj, \"loc\", key, fails=KeyError)\n\n    @pytest.mark.parametrize(\n        \"key, typs, axes\",\n        [\n            [[0, 1, 2], [\"empty\"], None],\n            [[0, 2, 10], [\"ints\", \"uints\", \"floats\"], 0],\n            [[3, 6, 7], [\"ints\", \"uints\", \"floats\"], 1],\n            # GH 17758 - MultiIndex and missing keys\n            [[(1, 3), (1, 4), (2, 5)], [\"multi\"], 0],\n        ],\n    )\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label_list_with_missing(self, key, typs, axes, kind, request):\n        for typ in typs:\n            obj = request.getfixturevalue(f\"{kind}_{typ}\")\n            check_indexing_smoketest_or_raises(\n                obj, \"loc\", key, axes=axes, fails=KeyError\n            )\n\n    @pytest.mark.parametrize(\"typs\", [\"ints\", \"uints\"])\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label_list_fails(self, typs, kind, request):\n        # fails\n        obj = request.getfixturevalue(f\"{kind}_{typs}\")\n        check_indexing_smoketest_or_raises(\n            obj, \"loc\", [20, 30, 40], axes=1, fails=KeyError\n        )\n\n    def test_loc_getitem_label_array_like(self):\n        # TODO: test something?\n        # array like\n        pass\n\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_bool(self, kind, request):\n        obj = request.getfixturevalue(f\"{kind}_empty\")\n        # boolean indexers\n        b = [True, False, True, False]\n\n        check_indexing_smoketest_or_raises(obj, \"loc\", b, fails=IndexError)\n\n    @pytest.mark.parametrize(\n        \"slc, typs, axes, fails\",\n        [\n            [\n                slice(1, 3),\n                [\"labels\", \"mixed\", \"empty\", \"ts\", \"floats\"],\n                None,\n                TypeError,\n            ],\n            [slice(\"20130102\", \"20130104\"), [\"ts\"], 1, TypeError],\n            [slice(2, 8), [\"mixed\"], 0, TypeError],\n            [slice(2, 8), [\"mixed\"], 1, KeyError],\n            [slice(2, 4, 2), [\"mixed\"], 0, TypeError],\n        ],\n    )\n    @pytest.mark.parametrize(\"kind\", [\"series\", \"frame\"])\n    def test_loc_getitem_label_slice(self, slc, typs, axes, fails, kind, request):\n\n        # label slices (with ints)\n\n        # real label slices\n\n        # GH 14316\n        for typ in typs:\n            obj = request.getfixturevalue(f\"{kind}_{typ}\")\n            check_indexing_smoketest_or_raises(\n                obj,\n                \"loc\",\n                slc,\n                axes=axes,\n                fails=fails,\n            )\n\n    def test_setitem_from_duplicate_axis(self):\n        # GH#34034\n        df = DataFrame(\n            [[20, \"a\"], [200, \"a\"], [200, \"a\"]],\n            columns=[\"col1\", \"col2\"],\n            index=[10, 1, 1],\n        )\n        df.loc[1, \"col1\"] = np.arange(2)\n        expected = DataFrame(\n            [[20, \"a\"], [0, \"a\"], [1, \"a\"]], columns=[\"col1\", \"col2\"], index=[10, 1, 1]\n        )\n        tm.assert_frame_equal(df, expected)\n\n    def test_column_types_consistent(self):\n        # GH 26779\n        df = DataFrame(\n            data={\n                \"channel\": [1, 2, 3],\n                \"A\": [\"String 1\", np.NaN, \"String 2\"],\n                \"B\": [\n                    Timestamp(\"2019-06-11 11:00:00\"),\n                    pd.NaT,\n                    Timestamp(\"2019-06-11 12:00:00\"),\n                ],\n            }\n        )\n        df2 = DataFrame(\n            data={\"A\": [\"String 3\"], \"B\": [Timestamp(\"2019-06-11 12:00:00\")]}\n        )\n        # Change Columns A and B to df2.values wherever Column A is NaN\n        df.loc[df[\"A\"].isna(), [\"A\", \"B\"]] = df2.values\n        expected = DataFrame(\n            data={\n                \"channel\": [1, 2, 3],\n                \"A\": [\"String 1\", \"String 3\", \"String 2\"],\n                \"B\": [\n                    Timestamp(\"2019-06-11 11:00:00\"),\n                    Timestamp(\"2019-06-11 12:00:00\"),\n                    Timestamp(\"2019-06-11 12:00:00\"),\n                ],\n            }\n        )\n        tm.assert_frame_equal(df, expected)\n\n    @pytest.mark.parametrize(\n        \"obj, key, exp\",\n        [\n            (\n                DataFrame([[1]], columns=Index([False])),\n                IndexSlice[:, False],\n                Series([1], name=False),\n            ),\n            (Series([1], index=Index([False])), False, [1]),\n            (DataFrame([[1]], index=Index([False])), False, Series([1], name=False)),\n        ],\n    )\n    def test_loc_getitem_single_boolean_arg(self, obj, key, exp):\n        # GH 44322\n        res = obj.loc[key]\n        if isinstance(exp, (DataFrame, Series)):\n            tm.assert_equal(res, exp)\n        else:\n            assert res == exp\n\n\nclass TestLocBaseIndependent:\n    # Tests for loc that do not depend on subclassing Base\n    def test_loc_npstr(self):\n        # GH#45580\n        df = DataFrame(index=date_range(\"2021\", \"2022\"))\n        result = df.loc[np.array([\"2021/6/1\"])[0] :]\n        expected = df.iloc[151:]\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"msg, key\",\n        [\n            (r\"Period\\('2019', 'A-DEC'\\), 'foo', 'bar'\", (Period(2019), \"foo\", \"bar\")),\n            (r\"Period\\('2019', 'A-DEC'\\), 'y1', 'bar'\", (Period(2019), \"y1\", \"bar\")),\n            (r\"Period\\('2019', 'A-DEC'\\), 'foo', 'z1'\", (Period(2019), \"foo\", \"z1\")),\n            (\n                r\"Period\\('2018', 'A-DEC'\\), Period\\('2016', 'A-DEC'\\), 'bar'\",\n                (Period(2018), Period(2016), \"bar\"),\n            ),\n            (r\"Period\\('2018', 'A-DEC'\\), 'foo', 'y1'\", (Period(2018), \"foo\", \"y1\")),\n            (\n                r\"Period\\('2017', 'A-DEC'\\), 'foo', Period\\('2015', 'A-DEC'\\)\",\n                (Period(2017), \"foo\", Period(2015)),\n            ),\n            (r\"Period\\('2017', 'A-DEC'\\), 'z1', 'bar'\", (Period(2017), \"z1\", \"bar\")),\n        ],\n    )\n    def test_contains_raise_error_if_period_index_is_in_multi_index(self, msg, key):\n        # GH#20684\n        \"\"\"\n        parse_time_string return parameter if type not matched.\n        PeriodIndex.get_loc takes returned value from parse_time_string as a tuple.\n        If first argument is Period and a tuple has 3 items,\n        process go on not raise exception\n        \"\"\"\n        df = DataFrame(\n            {\n                \"A\": [Period(2019), \"x1\", \"x2\"],\n                \"B\": [Period(2018), Period(2016), \"y1\"],\n                \"C\": [Period(2017), \"z1\", Period(2015)],\n                \"V1\": [1, 2, 3],\n                \"V2\": [10, 20, 30],\n            }\n        ).set_index([\"A\", \"B\", \"C\"])\n        with pytest.raises(KeyError, match=msg):\n            df.loc[key]\n\n    def test_loc_getitem_missing_unicode_key(self):\n        df = DataFrame({\"a\": [1]})\n        with pytest.raises(KeyError, match=\"\\u05d0\"):\n            df.loc[:, \"\\u05d0\"]  # should not raise UnicodeEncodeError\n\n    def test_loc_getitem_dups(self):\n        # GH 5678\n        # repeated getitems on a dup index returning a ndarray\n        df = DataFrame(\n            np.random.random_sample((20, 5)), index=[\"ABCDE\"[x % 5] for x in range(20)]\n        )\n        expected = df.loc[\"A\", 0]\n        result = df.loc[:, 0].loc[\"A\"]\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_getitem_dups2(self):\n\n        # GH4726\n        # dup indexing with iloc/loc\n        df = DataFrame(\n            [[1, 2, \"foo\", \"bar\", Timestamp(\"20130101\")]],\n            columns=[\"a\", \"a\", \"a\", \"a\", \"a\"],\n            index=[1],\n        )\n        expected = Series(\n            [1, 2, \"foo\", \"bar\", Timestamp(\"20130101\")],\n            index=[\"a\", \"a\", \"a\", \"a\", \"a\"],\n            name=1,\n        )\n\n        result = df.iloc[0]\n        tm.assert_series_equal(result, expected)\n\n        result = df.loc[1]\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_dups(self):\n\n        # GH 6541\n        df_orig = DataFrame(\n            {\n                \"me\": list(\"rttti\"),\n                \"foo\": list(\"aaade\"),\n                \"bar\": np.arange(5, dtype=\"float64\") * 1.34 + 2,\n                \"bar2\": np.arange(5, dtype=\"float64\") * -0.34 + 2,\n            }\n        ).set_index(\"me\")\n\n        indexer = (\n            \"r\",\n            [\"bar\", \"bar2\"],\n        )\n        df = df_orig.copy()\n        df.loc[indexer] *= 2.0\n        tm.assert_series_equal(df.loc[indexer], 2.0 * df_orig.loc[indexer])\n\n        indexer = (\n            \"r\",\n            \"bar\",\n        )\n        df = df_orig.copy()\n        df.loc[indexer] *= 2.0\n        assert df.loc[indexer] == 2.0 * df_orig.loc[indexer]\n\n        indexer = (\n            \"t\",\n            [\"bar\", \"bar2\"],\n        )\n        df = df_orig.copy()\n        df.loc[indexer] *= 2.0\n        tm.assert_frame_equal(df.loc[indexer], 2.0 * df_orig.loc[indexer])\n\n    def test_loc_setitem_slice(self):\n        # GH10503\n\n        # assigning the same type should not change the type\n        df1 = DataFrame({\"a\": [0, 1, 1], \"b\": Series([100, 200, 300], dtype=\"uint32\")})\n        ix = df1[\"a\"] == 1\n        newb1 = df1.loc[ix, \"b\"] + 1\n        df1.loc[ix, \"b\"] = newb1\n        expected = DataFrame(\n            {\"a\": [0, 1, 1], \"b\": Series([100, 201, 301], dtype=\"uint32\")}\n        )\n        tm.assert_frame_equal(df1, expected)\n\n        # assigning a new type should get the inferred type\n        df2 = DataFrame({\"a\": [0, 1, 1], \"b\": [100, 200, 300]}, dtype=\"uint64\")\n        ix = df1[\"a\"] == 1\n        newb2 = df2.loc[ix, \"b\"]\n        df1.loc[ix, \"b\"] = newb2\n        expected = DataFrame({\"a\": [0, 1, 1], \"b\": [100, 200, 300]}, dtype=\"uint64\")\n        tm.assert_frame_equal(df2, expected)\n\n    def test_loc_setitem_dtype(self):\n        # GH31340\n        df = DataFrame({\"id\": [\"A\"], \"a\": [1.2], \"b\": [0.0], \"c\": [-2.5]})\n        cols = [\"a\", \"b\", \"c\"]\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[:, cols] = df.loc[:, cols].astype(\"float32\")\n\n        expected = DataFrame(\n            {\n                \"id\": [\"A\"],\n                \"a\": np.array([1.2], dtype=\"float32\"),\n                \"b\": np.array([0.0], dtype=\"float32\"),\n                \"c\": np.array([-2.5], dtype=\"float32\"),\n            }\n        )  # id is inferred as object\n\n        tm.assert_frame_equal(df, expected)\n\n    def test_getitem_label_list_with_missing(self):\n        s = Series(range(3), index=[\"a\", \"b\", \"c\"])\n\n        # consistency\n        with pytest.raises(KeyError, match=\"not in index\"):\n            s[[\"a\", \"d\"]]\n\n        s = Series(range(3))\n        with pytest.raises(KeyError, match=\"not in index\"):\n            s[[0, 3]]\n\n    @pytest.mark.parametrize(\"index\", [[True, False], [True, False, True, False]])\n    def test_loc_getitem_bool_diff_len(self, index):\n        # GH26658\n        s = Series([1, 2, 3])\n        msg = f\"Boolean index has wrong length: {len(index)} instead of {len(s)}\"\n        with pytest.raises(IndexError, match=msg):\n            s.loc[index]\n\n    def test_loc_getitem_int_slice(self):\n        # TODO: test something here?\n        pass\n\n    def test_loc_to_fail(self):\n\n        # GH3449\n        df = DataFrame(\n            np.random.random((3, 3)), index=[\"a\", \"b\", \"c\"], columns=[\"e\", \"f\", \"g\"]\n        )\n\n        # raise a KeyError?\n        msg = (\n            r\"\\\"None of \\[Int64Index\\(\\[1, 2\\], dtype='int64'\\)\\] are \"\n            r\"in the \\[index\\]\\\"\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            df.loc[[1, 2], [1, 2]]\n\n    def test_loc_to_fail2(self):\n        # GH  7496\n        # loc should not fallback\n\n        s = Series(dtype=object)\n        s.loc[1] = 1\n        s.loc[\"a\"] = 2\n\n        with pytest.raises(KeyError, match=r\"^-1$\"):\n            s.loc[-1]\n\n        msg = (\n            r\"\\\"None of \\[Int64Index\\(\\[-1, -2\\], dtype='int64'\\)\\] are \"\n            r\"in the \\[index\\]\\\"\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            s.loc[[-1, -2]]\n\n        msg = r\"\\\"None of \\[Index\\(\\['4'\\], dtype='object'\\)\\] are in the \\[index\\]\\\"\"\n        with pytest.raises(KeyError, match=msg):\n            s.loc[[\"4\"]]\n\n        s.loc[-1] = 3\n        with pytest.raises(KeyError, match=\"not in index\"):\n            s.loc[[-1, -2]]\n\n        s[\"a\"] = 2\n        msg = (\n            r\"\\\"None of \\[Int64Index\\(\\[-2\\], dtype='int64'\\)\\] are \"\n            r\"in the \\[index\\]\\\"\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            s.loc[[-2]]\n\n        del s[\"a\"]\n\n        with pytest.raises(KeyError, match=msg):\n            s.loc[[-2]] = 0\n\n    def test_loc_to_fail3(self):\n        # inconsistency between .loc[values] and .loc[values,:]\n        # GH 7999\n        df = DataFrame([[\"a\"], [\"b\"]], index=[1, 2], columns=[\"value\"])\n\n        msg = (\n            r\"\\\"None of \\[Int64Index\\(\\[3\\], dtype='int64'\\)\\] are \"\n            r\"in the \\[index\\]\\\"\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            df.loc[[3], :]\n\n        with pytest.raises(KeyError, match=msg):\n            df.loc[[3]]\n\n    def test_loc_getitem_list_with_fail(self):\n        # 15747\n        # should KeyError if *any* missing labels\n\n        s = Series([1, 2, 3])\n\n        s.loc[[2]]\n\n        with pytest.raises(\n            KeyError,\n            match=re.escape(\n                \"\\\"None of [Int64Index([3], dtype='int64')] are in the [index]\\\"\"\n            ),\n        ):\n            s.loc[[3]]\n\n        # a non-match and a match\n        with pytest.raises(KeyError, match=\"not in index\"):\n            s.loc[[2, 3]]\n\n    def test_loc_index(self):\n        # gh-17131\n        # a boolean index should index like a boolean numpy array\n\n        df = DataFrame(\n            np.random.random(size=(5, 10)),\n            index=[\"alpha_0\", \"alpha_1\", \"alpha_2\", \"beta_0\", \"beta_1\"],\n        )\n\n        mask = df.index.map(lambda x: \"alpha\" in x)\n        expected = df.loc[np.array(mask)]\n\n        result = df.loc[mask]\n        tm.assert_frame_equal(result, expected)\n\n        result = df.loc[mask.values]\n        tm.assert_frame_equal(result, expected)\n\n        result = df.loc[pd.array(mask, dtype=\"boolean\")]\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_general(self):\n\n        df = DataFrame(\n            np.random.rand(4, 4),\n            columns=[\"A\", \"B\", \"C\", \"D\"],\n            index=[\"A\", \"B\", \"C\", \"D\"],\n        )\n\n        # want this to work\n        result = df.loc[:, \"A\":\"B\"].iloc[0:2, :]\n        assert (result.columns == [\"A\", \"B\"]).all()\n        assert (result.index == [\"A\", \"B\"]).all()\n\n        # mixed type\n        result = DataFrame({\"a\": [Timestamp(\"20130101\")], \"b\": [1]}).iloc[0]\n        expected = Series([Timestamp(\"20130101\"), 1], index=[\"a\", \"b\"], name=0)\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == object\n\n    @pytest.fixture\n    def frame_for_consistency(self):\n        return DataFrame(\n            {\n                \"date\": date_range(\"2000-01-01\", \"2000-01-5\"),\n                \"val\": Series(range(5), dtype=np.int64),\n            }\n        )\n\n    @pytest.mark.parametrize(\n        \"val\",\n        [0, np.array(0, dtype=np.int64), np.array([0, 0, 0, 0, 0], dtype=np.int64)],\n    )\n    def test_loc_setitem_consistency(self, frame_for_consistency, val):\n        # GH 6149\n        # coerce similarly for setitem and loc when rows have a null-slice\n        expected = DataFrame(\n            {\n                \"date\": Series(0, index=range(5), dtype=np.int64),\n                \"val\": Series(range(5), dtype=np.int64),\n            }\n        )\n        df = frame_for_consistency.copy()\n        df.loc[:, \"date\"] = val\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_consistency_dt64_to_str(self, frame_for_consistency):\n        # GH 6149\n        # coerce similarly for setitem and loc when rows have a null-slice\n\n        expected = DataFrame(\n            {\n                \"date\": Series(\"foo\", index=range(5)),\n                \"val\": Series(range(5), dtype=np.int64),\n            }\n        )\n        df = frame_for_consistency.copy()\n        df.loc[:, \"date\"] = \"foo\"\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_consistency_dt64_to_float(self, frame_for_consistency):\n        # GH 6149\n        # coerce similarly for setitem and loc when rows have a null-slice\n        expected = DataFrame(\n            {\n                \"date\": Series(1.0, index=range(5)),\n                \"val\": Series(range(5), dtype=np.int64),\n            }\n        )\n        df = frame_for_consistency.copy()\n        df.loc[:, \"date\"] = 1.0\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_consistency_single_row(self):\n        # GH 15494\n        # setting on frame with single row\n        df = DataFrame({\"date\": Series([Timestamp(\"20180101\")])})\n        df.loc[:, \"date\"] = \"string\"\n        expected = DataFrame({\"date\": Series([\"string\"])})\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_consistency_empty(self):\n        # empty (essentially noops)\n        expected = DataFrame(columns=[\"x\", \"y\"])\n        expected[\"x\"] = expected[\"x\"].astype(np.int64)\n        df = DataFrame(columns=[\"x\", \"y\"])\n        with tm.assert_produces_warning(None):\n            df.loc[:, \"x\"] = 1\n        tm.assert_frame_equal(df, expected)\n\n        df = DataFrame(columns=[\"x\", \"y\"])\n        df[\"x\"] = 1\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_consistency_slice_column_len(self):\n        # .loc[:,column] setting with slice == len of the column\n        # GH10408\n        levels = [\n            [\"Region_1\"] * 4,\n            [\"Site_1\", \"Site_1\", \"Site_2\", \"Site_2\"],\n            [3987227376, 3980680971, 3977723249, 3977723089],\n        ]\n        mi = MultiIndex.from_arrays(levels, names=[\"Region\", \"Site\", \"RespondentID\"])\n\n        clevels = [\n            [\"Respondent\", \"Respondent\", \"Respondent\", \"OtherCat\", \"OtherCat\"],\n            [\"Something\", \"StartDate\", \"EndDate\", \"Yes/No\", \"SomethingElse\"],\n        ]\n        cols = MultiIndex.from_arrays(clevels, names=[\"Level_0\", \"Level_1\"])\n\n        values = [\n            [\"A\", \"5/25/2015 10:59\", \"5/25/2015 11:22\", \"Yes\", np.nan],\n            [\"A\", \"5/21/2015 9:40\", \"5/21/2015 9:52\", \"Yes\", \"Yes\"],\n            [\"A\", \"5/20/2015 8:27\", \"5/20/2015 8:41\", \"Yes\", np.nan],\n            [\"A\", \"5/20/2015 8:33\", \"5/20/2015 9:09\", \"Yes\", \"No\"],\n        ]\n        df = DataFrame(values, index=mi, columns=cols)\n\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[:, (\"Respondent\", \"StartDate\")] = to_datetime(\n                df.loc[:, (\"Respondent\", \"StartDate\")]\n            )\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[:, (\"Respondent\", \"EndDate\")] = to_datetime(\n                df.loc[:, (\"Respondent\", \"EndDate\")]\n            )\n        with tm.assert_produces_warning(None, match=msg):\n            # Adding a new key -> no warning\n            df.loc[:, (\"Respondent\", \"Duration\")] = (\n                df.loc[:, (\"Respondent\", \"EndDate\")]\n                - df.loc[:, (\"Respondent\", \"StartDate\")]\n            )\n\n        with tm.assert_produces_warning(None, match=msg):\n            # timedelta64[m] -> float, so this cannot be done inplace, so\n            #  no warning\n            df.loc[:, (\"Respondent\", \"Duration\")] = df.loc[\n                :, (\"Respondent\", \"Duration\")\n            ] / Timedelta(60_000_000_000)\n\n        expected = Series(\n            [23.0, 12.0, 14.0, 36.0], index=df.index, name=(\"Respondent\", \"Duration\")\n        )\n        tm.assert_series_equal(df[(\"Respondent\", \"Duration\")], expected)\n\n    @pytest.mark.parametrize(\"unit\", [\"Y\", \"M\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\"])\n    def test_loc_assign_non_ns_datetime(self, unit):\n        # GH 27395, non-ns dtype assignment via .loc should work\n        # and return the same result when using simple assignment\n        df = DataFrame(\n            {\n                \"timestamp\": [\n                    np.datetime64(\"2017-02-11 12:41:29\"),\n                    np.datetime64(\"1991-11-07 04:22:37\"),\n                ]\n            }\n        )\n\n        df.loc[:, unit] = df.loc[:, \"timestamp\"].values.astype(f\"datetime64[{unit}]\")\n        df[\"expected\"] = df.loc[:, \"timestamp\"].values.astype(f\"datetime64[{unit}]\")\n        expected = Series(df.loc[:, \"expected\"], name=unit)\n        tm.assert_series_equal(df.loc[:, unit], expected)\n\n    def test_loc_modify_datetime(self):\n        # see gh-28837\n        df = DataFrame.from_dict(\n            {\"date\": [1485264372711, 1485265925110, 1540215845888, 1540282121025]}\n        )\n\n        df[\"date_dt\"] = to_datetime(df[\"date\"], unit=\"ms\", cache=True)\n\n        df.loc[:, \"date_dt_cp\"] = df.loc[:, \"date_dt\"]\n        df.loc[[2, 3], \"date_dt_cp\"] = df.loc[[2, 3], \"date_dt\"]\n\n        expected = DataFrame(\n            [\n                [1485264372711, \"2017-01-24 13:26:12.711\", \"2017-01-24 13:26:12.711\"],\n                [1485265925110, \"2017-01-24 13:52:05.110\", \"2017-01-24 13:52:05.110\"],\n                [1540215845888, \"2018-10-22 13:44:05.888\", \"2018-10-22 13:44:05.888\"],\n                [1540282121025, \"2018-10-23 08:08:41.025\", \"2018-10-23 08:08:41.025\"],\n            ],\n            columns=[\"date\", \"date_dt\", \"date_dt_cp\"],\n        )\n\n        columns = [\"date_dt\", \"date_dt_cp\"]\n        expected[columns] = expected[columns].apply(to_datetime)\n\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame_with_reindex(self):\n        # GH#6254 setting issue\n        df = DataFrame(index=[3, 5, 4], columns=[\"A\"], dtype=float)\n        df.loc[[4, 3, 5], \"A\"] = np.array([1, 2, 3], dtype=\"int64\")\n\n        # setting integer values into a float dataframe with loc is inplace,\n        #  so we retain float dtype\n        ser = Series([2, 3, 1], index=[3, 5, 4], dtype=float)\n        expected = DataFrame({\"A\": ser})\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame_with_reindex_mixed(self):\n        # GH#40480\n        df = DataFrame(index=[3, 5, 4], columns=[\"A\", \"B\"], dtype=float)\n        df[\"B\"] = \"string\"\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[[4, 3, 5], \"A\"] = np.array([1, 2, 3], dtype=\"int64\")\n        ser = Series([2, 3, 1], index=[3, 5, 4], dtype=\"int64\")\n        expected = DataFrame({\"A\": ser})\n        expected[\"B\"] = \"string\"\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame_with_inverted_slice(self):\n        # GH#40480\n        df = DataFrame(index=[1, 2, 3], columns=[\"A\", \"B\"], dtype=float)\n        df[\"B\"] = \"string\"\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[slice(3, 0, -1), \"A\"] = np.array([1, 2, 3], dtype=\"int64\")\n        expected = DataFrame({\"A\": [3, 2, 1], \"B\": \"string\"}, index=[1, 2, 3])\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_empty_frame(self):\n        # GH#6252 setting with an empty frame\n        keys1 = [\"@\" + str(i) for i in range(5)]\n        val1 = np.arange(5, dtype=\"int64\")\n\n        keys2 = [\"@\" + str(i) for i in range(4)]\n        val2 = np.arange(4, dtype=\"int64\")\n\n        index = list(set(keys1).union(keys2))\n        df = DataFrame(index=index)\n        df[\"A\"] = np.nan\n        df.loc[keys1, \"A\"] = val1\n\n        df[\"B\"] = np.nan\n        df.loc[keys2, \"B\"] = val2\n\n        # Because df[\"A\"] was initialized as float64, setting values into it\n        #  is inplace, so that dtype is retained\n        sera = Series(val1, index=keys1, dtype=np.float64)\n        serb = Series(val2, index=keys2)\n        expected = DataFrame({\"A\": sera, \"B\": serb}).reindex(index=index)\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame(self):\n        df = DataFrame(np.random.randn(4, 4), index=list(\"abcd\"), columns=list(\"ABCD\"))\n\n        result = df.iloc[0, 0]\n\n        df.loc[\"a\", \"A\"] = 1\n        result = df.loc[\"a\", \"A\"]\n        assert result == 1\n\n        result = df.iloc[0, 0]\n        assert result == 1\n\n        df.loc[:, \"B\":\"D\"] = 0\n        expected = df.loc[:, \"B\":\"D\"]\n        result = df.iloc[:, 1:]\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_setitem_frame_nan_int_coercion_invalid(self):\n        # GH 8669\n        # invalid coercion of nan -> int\n        df = DataFrame({\"A\": [1, 2, 3], \"B\": np.nan})\n        df.loc[df.B > df.A, \"B\"] = df.A\n        expected = DataFrame({\"A\": [1, 2, 3], \"B\": np.nan})\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame_mixed_labels(self):\n        # GH 6546\n        # setting with mixed labels\n        df = DataFrame({1: [1, 2], 2: [3, 4], \"a\": [\"a\", \"b\"]})\n\n        result = df.loc[0, [1, 2]]\n        expected = Series(\n            [1, 3], index=Index([1, 2], dtype=object), dtype=object, name=0\n        )\n        tm.assert_series_equal(result, expected)\n\n        expected = DataFrame({1: [5, 2], 2: [6, 4], \"a\": [\"a\", \"b\"]})\n        df.loc[0, [1, 2]] = [5, 6]\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_frame_multiples(self):\n        # multiple setting\n        df = DataFrame(\n            {\"A\": [\"foo\", \"bar\", \"baz\"], \"B\": Series(range(3), dtype=np.int64)}\n        )\n        rhs = df.loc[1:2]\n        rhs.index = df.index[0:2]\n        df.loc[0:1] = rhs\n        expected = DataFrame(\n            {\"A\": [\"bar\", \"baz\", \"baz\"], \"B\": Series([1, 2, 2], dtype=np.int64)}\n        )\n        tm.assert_frame_equal(df, expected)\n\n        # multiple setting with frame on rhs (with M8)\n        df = DataFrame(\n            {\n                \"date\": date_range(\"2000-01-01\", \"2000-01-5\"),\n                \"val\": Series(range(5), dtype=np.int64),\n            }\n        )\n        expected = DataFrame(\n            {\n                \"date\": [\n                    Timestamp(\"20000101\"),\n                    Timestamp(\"20000102\"),\n                    Timestamp(\"20000101\"),\n                    Timestamp(\"20000102\"),\n                    Timestamp(\"20000103\"),\n                ],\n                \"val\": Series([0, 1, 0, 1, 2], dtype=np.int64),\n            }\n        )\n        rhs = df.loc[0:2]\n        rhs.index = df.index[2:5]\n        df.loc[2:4] = rhs\n        tm.assert_frame_equal(df, expected)\n\n    @pytest.mark.parametrize(\n        \"indexer\", [[\"A\"], slice(None, \"A\", None), np.array([\"A\"])]\n    )\n    @pytest.mark.parametrize(\"value\", [[\"Z\"], np.array([\"Z\"])])\n    def test_loc_setitem_with_scalar_index(self, indexer, value):\n        # GH #19474\n        # assigning like \"df.loc[0, ['A']] = ['Z']\" should be evaluated\n        # elementwisely, not using \"setter('A', ['Z'])\".\n\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"A\", \"B\"])\n        df.loc[0, indexer] = value\n        result = df.loc[0, \"A\"]\n\n        assert is_scalar(result) and result == \"Z\"\n\n    @pytest.mark.parametrize(\n        \"index,box,expected\",\n        [\n            (\n                ([0, 2], [\"A\", \"B\", \"C\", \"D\"]),\n                7,\n                DataFrame(\n                    [[7, 7, 7, 7], [3, 4, np.nan, np.nan], [7, 7, 7, 7]],\n                    columns=[\"A\", \"B\", \"C\", \"D\"],\n                ),\n            ),\n            (\n                (1, [\"C\", \"D\"]),\n                [7, 8],\n                DataFrame(\n                    [[1, 2, np.nan, np.nan], [3, 4, 7, 8], [5, 6, np.nan, np.nan]],\n                    columns=[\"A\", \"B\", \"C\", \"D\"],\n                ),\n            ),\n            (\n                (1, [\"A\", \"B\", \"C\"]),\n                np.array([7, 8, 9], dtype=np.int64),\n                DataFrame(\n                    [[1, 2, np.nan], [7, 8, 9], [5, 6, np.nan]], columns=[\"A\", \"B\", \"C\"]\n                ),\n            ),\n            (\n                (slice(1, 3, None), [\"B\", \"C\", \"D\"]),\n                [[7, 8, 9], [10, 11, 12]],\n                DataFrame(\n                    [[1, 2, np.nan, np.nan], [3, 7, 8, 9], [5, 10, 11, 12]],\n                    columns=[\"A\", \"B\", \"C\", \"D\"],\n                ),\n            ),\n            (\n                (slice(1, 3, None), [\"C\", \"A\", \"D\"]),\n                np.array([[7, 8, 9], [10, 11, 12]], dtype=np.int64),\n                DataFrame(\n                    [[1, 2, np.nan, np.nan], [8, 4, 7, 9], [11, 6, 10, 12]],\n                    columns=[\"A\", \"B\", \"C\", \"D\"],\n                ),\n            ),\n            (\n                (slice(None, None, None), [\"A\", \"C\"]),\n                DataFrame([[7, 8], [9, 10], [11, 12]], columns=[\"A\", \"C\"]),\n                DataFrame(\n                    [[7, 2, 8], [9, 4, 10], [11, 6, 12]], columns=[\"A\", \"B\", \"C\"]\n                ),\n            ),\n        ],\n    )\n    def test_loc_setitem_missing_columns(self, index, box, expected):\n        # GH 29334\n        df = DataFrame([[1, 2], [3, 4], [5, 6]], columns=[\"A\", \"B\"])\n\n        warn = None\n        if isinstance(index[0], slice) and index[0] == slice(None):\n            warn = FutureWarning\n\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(warn, match=msg):\n            df.loc[index] = box\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_coercion(self):\n\n        # GH#12411\n        df = DataFrame({\"date\": [Timestamp(\"20130101\").tz_localize(\"UTC\"), pd.NaT]})\n        expected = df.dtypes\n\n        result = df.iloc[[0]]\n        tm.assert_series_equal(result.dtypes, expected)\n\n        result = df.iloc[[1]]\n        tm.assert_series_equal(result.dtypes, expected)\n\n    def test_loc_coercion2(self):\n        # GH#12045\n        df = DataFrame({\"date\": [datetime(2012, 1, 1), datetime(1012, 1, 2)]})\n        expected = df.dtypes\n\n        result = df.iloc[[0]]\n        tm.assert_series_equal(result.dtypes, expected)\n\n        result = df.iloc[[1]]\n        tm.assert_series_equal(result.dtypes, expected)\n\n    def test_loc_coercion3(self):\n        # GH#11594\n        df = DataFrame({\"text\": [\"some words\"] + [None] * 9})\n        expected = df.dtypes\n\n        result = df.iloc[0:2]\n        tm.assert_series_equal(result.dtypes, expected)\n\n        result = df.iloc[3:]\n        tm.assert_series_equal(result.dtypes, expected)\n\n    def test_setitem_new_key_tz(self, indexer_sl):\n        # GH#12862 should not raise on assigning the second value\n        vals = [\n            to_datetime(42).tz_localize(\"UTC\"),\n            to_datetime(666).tz_localize(\"UTC\"),\n        ]\n        expected = Series(vals, index=[\"foo\", \"bar\"])\n\n        ser = Series(dtype=object)\n        indexer_sl(ser)[\"foo\"] = vals[0]\n        indexer_sl(ser)[\"bar\"] = vals[1]\n\n        tm.assert_series_equal(ser, expected)\n\n    def test_loc_non_unique(self):\n        # GH3659\n        # non-unique indexer with loc slice\n        # https://groups.google.com/forum/?fromgroups#!topic/pydata/zTm2No0crYs\n\n        # these are going to raise because the we are non monotonic\n        df = DataFrame(\n            {\"A\": [1, 2, 3, 4, 5, 6], \"B\": [3, 4, 5, 6, 7, 8]}, index=[0, 1, 0, 1, 2, 3]\n        )\n        msg = \"'Cannot get left slice bound for non-unique label: 1'\"\n        with pytest.raises(KeyError, match=msg):\n            df.loc[1:]\n        msg = \"'Cannot get left slice bound for non-unique label: 0'\"\n        with pytest.raises(KeyError, match=msg):\n            df.loc[0:]\n        msg = \"'Cannot get left slice bound for non-unique label: 1'\"\n        with pytest.raises(KeyError, match=msg):\n            df.loc[1:2]\n\n        # monotonic are ok\n        df = DataFrame(\n            {\"A\": [1, 2, 3, 4, 5, 6], \"B\": [3, 4, 5, 6, 7, 8]}, index=[0, 1, 0, 1, 2, 3]\n        ).sort_index(axis=0)\n        result = df.loc[1:]\n        expected = DataFrame({\"A\": [2, 4, 5, 6], \"B\": [4, 6, 7, 8]}, index=[1, 1, 2, 3])\n        tm.assert_frame_equal(result, expected)\n\n        result = df.loc[0:]\n        tm.assert_frame_equal(result, df)\n\n        result = df.loc[1:2]\n        expected = DataFrame({\"A\": [2, 4, 5], \"B\": [4, 6, 7]}, index=[1, 1, 2])\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.arm_slow\n    @pytest.mark.parametrize(\"length, l2\", [[900, 100], [900000, 100000]])\n    def test_loc_non_unique_memory_error(self, length, l2):\n\n        # GH 4280\n        # non_unique index with a large selection triggers a memory error\n\n        columns = list(\"ABCDEFG\")\n\n        df = pd.concat(\n            [\n                DataFrame(\n                    np.random.randn(length, len(columns)),\n                    index=np.arange(length),\n                    columns=columns,\n                ),\n                DataFrame(np.ones((l2, len(columns))), index=[0] * l2, columns=columns),\n            ]\n        )\n\n        assert df.index.is_unique is False\n\n        mask = np.arange(l2)\n        result = df.loc[mask]\n        expected = pd.concat(\n            [\n                df.take([0]),\n                DataFrame(\n                    np.ones((len(mask), len(columns))),\n                    index=[0] * len(mask),\n                    columns=columns,\n                ),\n                df.take(mask[1:]),\n            ]\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_name(self):\n        # GH 3880\n        df = DataFrame([[1, 1], [1, 1]])\n        df.index.name = \"index_name\"\n        result = df.iloc[[0, 1]].index.name\n        assert result == \"index_name\"\n\n        result = df.loc[[0, 1]].index.name\n        assert result == \"index_name\"\n\n    def test_loc_empty_list_indexer_is_ok(self):\n\n        df = tm.makeCustomDataframe(5, 2)\n        # vertical empty\n        tm.assert_frame_equal(\n            df.loc[:, []], df.iloc[:, :0], check_index_type=True, check_column_type=True\n        )\n        # horizontal empty\n        tm.assert_frame_equal(\n            df.loc[[], :], df.iloc[:0, :], check_index_type=True, check_column_type=True\n        )\n        # horizontal empty\n        tm.assert_frame_equal(\n            df.loc[[]], df.iloc[:0, :], check_index_type=True, check_column_type=True\n        )\n\n    def test_identity_slice_returns_new_object(\n        self, using_array_manager, request, using_copy_on_write\n    ):\n        # GH13873\n        if using_array_manager:\n            mark = pytest.mark.xfail(\n                reason=\"setting with .loc[:, 'a'] does not alter inplace\"\n            )\n            request.node.add_marker(mark)\n\n        original_df = DataFrame({\"a\": [1, 2, 3]})\n        sliced_df = original_df.loc[:]\n        assert sliced_df is not original_df\n        assert original_df[:] is not original_df\n\n        # should be a shallow copy\n        assert np.shares_memory(original_df[\"a\"]._values, sliced_df[\"a\"]._values)\n\n        # Setting using .loc[:, \"a\"] sets inplace so alters both sliced and orig\n        # depending on CoW\n        original_df.loc[:, \"a\"] = [4, 4, 4]\n        if using_copy_on_write:\n            assert (sliced_df[\"a\"] == [1, 2, 3]).all()\n        else:\n            assert (sliced_df[\"a\"] == 4).all()\n\n        # These should not return copies\n        assert original_df is original_df.loc[:, :]\n        df = DataFrame(np.random.randn(10, 4))\n        assert df[0] is df.loc[:, 0]\n\n        # Same tests for Series\n        original_series = Series([1, 2, 3, 4, 5, 6])\n        sliced_series = original_series.loc[:]\n        assert sliced_series is not original_series\n        assert original_series[:] is not original_series\n\n        original_series[:3] = [7, 8, 9]\n        if using_copy_on_write:\n            assert all(sliced_series[:3] == [1, 2, 3])\n        else:\n            assert all(sliced_series[:3] == [7, 8, 9])\n\n    @pytest.mark.xfail(reason=\"accidental fix reverted - GH37497\")\n    def test_loc_copy_vs_view(self):\n        # GH 15631\n        x = DataFrame(zip(range(3), range(3)), columns=[\"a\", \"b\"])\n\n        y = x.copy()\n        q = y.loc[:, \"a\"]\n        q += 2\n\n        tm.assert_frame_equal(x, y)\n\n        z = x.copy()\n        q = z.loc[x.index, \"a\"]\n        q += 2\n\n        tm.assert_frame_equal(x, z)\n\n    def test_loc_uint64(self):\n        # GH20722\n        # Test whether loc accept uint64 max value as index.\n        umax = np.iinfo(\"uint64\").max\n        ser = Series([1, 2], index=[umax - 1, umax])\n\n        result = ser.loc[umax - 1]\n        expected = ser.iloc[0]\n        assert result == expected\n\n        result = ser.loc[[umax - 1]]\n        expected = ser.iloc[[0]]\n        tm.assert_series_equal(result, expected)\n\n        result = ser.loc[[umax - 1, umax]]\n        tm.assert_series_equal(result, ser)\n\n    def test_loc_uint64_disallow_negative(self):\n        # GH#41775\n        umax = np.iinfo(\"uint64\").max\n        ser = Series([1, 2], index=[umax - 1, umax])\n\n        with pytest.raises(KeyError, match=\"-1\"):\n            # don't wrap around\n            ser.loc[-1]\n\n        with pytest.raises(KeyError, match=\"-1\"):\n            # don't wrap around\n            ser.loc[[-1]]\n\n    # FIXME: warning issued here is false-positive\n    @pytest.mark.filterwarnings(\"ignore:.*will attempt to set.*:FutureWarning\")\n    def test_loc_setitem_empty_append_expands_rows(self):\n        # GH6173, various appends to an empty dataframe\n\n        data = [1, 2, 3]\n        expected = DataFrame({\"x\": data, \"y\": [None] * len(data)})\n\n        # appends to fit length of data\n        df = DataFrame(columns=[\"x\", \"y\"])\n        df.loc[:, \"x\"] = data\n        tm.assert_frame_equal(df, expected)\n\n    # FIXME: warning issued here is false-positive\n    @pytest.mark.filterwarnings(\"ignore:.*will attempt to set.*:FutureWarning\")\n    def test_loc_setitem_empty_append_expands_rows_mixed_dtype(self):\n        # GH#37932 same as test_loc_setitem_empty_append_expands_rows\n        #  but with mixed dtype so we go through take_split_path\n        data = [1, 2, 3]\n        expected = DataFrame({\"x\": data, \"y\": [None] * len(data)})\n\n        df = DataFrame(columns=[\"x\", \"y\"])\n        df[\"x\"] = df[\"x\"].astype(np.int64)\n        df.loc[:, \"x\"] = data\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_empty_append_single_value(self):\n        # only appends one value\n        expected = DataFrame({\"x\": [1.0], \"y\": [np.nan]})\n        df = DataFrame(columns=[\"x\", \"y\"], dtype=float)\n        df.loc[0, \"x\"] = expected.loc[0, \"x\"]\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_empty_append_raises(self):\n        # GH6173, various appends to an empty dataframe\n\n        data = [1, 2]\n        df = DataFrame(columns=[\"x\", \"y\"])\n        df.index = df.index.astype(np.int64)\n        msg = (\n            r\"None of \\[Int64Index\\(\\[0, 1\\], dtype='int64'\\)\\] \"\n            r\"are in the \\[index\\]\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            df.loc[[0, 1], \"x\"] = data\n\n        msg = \"|\".join(\n            [\n                \"cannot copy sequence with size 2 to array axis with dimension 0\",\n                r\"could not broadcast input array from shape \\(2,\\) into shape \\(0,\\)\",\n                \"Must have equal len keys and value when setting with an iterable\",\n            ]\n        )\n        with pytest.raises(ValueError, match=msg):\n            df.loc[0:2, \"x\"] = data\n\n    def test_indexing_zerodim_np_array(self):\n        # GH24924\n        df = DataFrame([[1, 2], [3, 4]])\n        result = df.loc[np.array(0)]\n        s = Series([1, 2], name=0)\n        tm.assert_series_equal(result, s)\n\n    def test_series_indexing_zerodim_np_array(self):\n        # GH24924\n        s = Series([1, 2])\n        result = s.loc[np.array(0)]\n        assert result == 1\n\n    def test_loc_reverse_assignment(self):\n        # GH26939\n        data = [1, 2, 3, 4, 5, 6] + [None] * 4\n        expected = Series(data, index=range(2010, 2020))\n\n        result = Series(index=range(2010, 2020), dtype=np.float64)\n        result.loc[2015:2010:-1] = [6, 5, 4, 3, 2, 1]\n\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_str_to_small_float_conversion_type(self):\n        # GH#20388\n        np.random.seed(13)\n        col_data = [str(np.random.random() * 1e-12) for _ in range(5)]\n        result = DataFrame(col_data, columns=[\"A\"])\n        expected = DataFrame(col_data, columns=[\"A\"], dtype=object)\n        tm.assert_frame_equal(result, expected)\n\n        # assigning with loc/iloc attempts to set the values inplace, which\n        #  in this case is successful\n        result.loc[result.index, \"A\"] = [float(x) for x in col_data]\n        expected = DataFrame(col_data, columns=[\"A\"], dtype=float).astype(object)\n        tm.assert_frame_equal(result, expected)\n\n        # assigning the entire column using __setitem__ swaps in the new array\n        # GH#???\n        result[\"A\"] = [float(x) for x in col_data]\n        expected = DataFrame(col_data, columns=[\"A\"], dtype=float)\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_time_object(self, frame_or_series):\n        rng = date_range(\"1/1/2000\", \"1/5/2000\", freq=\"5min\")\n        mask = (rng.hour == 9) & (rng.minute == 30)\n\n        obj = DataFrame(np.random.randn(len(rng), 3), index=rng)\n        obj = tm.get_obj(obj, frame_or_series)\n\n        result = obj.loc[time(9, 30)]\n        exp = obj.loc[mask]\n        tm.assert_equal(result, exp)\n\n        chunk = obj.loc[\"1/4/2000\":]\n        result = chunk.loc[time(9, 30)]\n        expected = result[-1:]\n\n        # Without resetting the freqs, these are 5 min and 1440 min, respectively\n        result.index = result.index._with_freq(None)\n        expected.index = expected.index._with_freq(None)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize(\"spmatrix_t\", [\"coo_matrix\", \"csc_matrix\", \"csr_matrix\"])\n    @pytest.mark.parametrize(\"dtype\", [np.int64, np.float64, complex])\n    @td.skip_if_no_scipy\n    def test_loc_getitem_range_from_spmatrix(self, spmatrix_t, dtype):\n        import scipy.sparse\n\n        spmatrix_t = getattr(scipy.sparse, spmatrix_t)\n\n        # The bug is triggered by a sparse matrix with purely sparse columns.  So the\n        # recipe below generates a rectangular matrix of dimension (5, 7) where all the\n        # diagonal cells are ones, meaning the last two columns are purely sparse.\n        rows, cols = 5, 7\n        spmatrix = spmatrix_t(np.eye(rows, cols, dtype=dtype), dtype=dtype)\n        df = DataFrame.sparse.from_spmatrix(spmatrix)\n\n        # regression test for GH#34526\n        itr_idx = range(2, rows)\n        result = df.loc[itr_idx].values\n        expected = spmatrix.toarray()[itr_idx]\n        tm.assert_numpy_array_equal(result, expected)\n\n        # regression test for GH#34540\n        result = df.loc[itr_idx].dtypes.values\n        expected = np.full(cols, SparseDtype(dtype, fill_value=0))\n        tm.assert_numpy_array_equal(result, expected)\n\n    def test_loc_getitem_listlike_all_retains_sparse(self):\n        df = DataFrame({\"A\": pd.array([0, 0], dtype=SparseDtype(\"int64\"))})\n        result = df.loc[[0, 1]]\n        tm.assert_frame_equal(result, df)\n\n    @td.skip_if_no_scipy\n    def test_loc_getitem_sparse_frame(self):\n        # GH34687\n        from scipy.sparse import eye\n\n        df = DataFrame.sparse.from_spmatrix(eye(5))\n        result = df.loc[range(2)]\n        expected = DataFrame(\n            [[1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]],\n            dtype=SparseDtype(\"float64\", 0.0),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = df.loc[range(2)].loc[range(1)]\n        expected = DataFrame(\n            [[1.0, 0.0, 0.0, 0.0, 0.0]], dtype=SparseDtype(\"float64\", 0.0)\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_sparse_series(self):\n        # GH34687\n        s = Series([1.0, 0.0, 0.0, 0.0, 0.0], dtype=SparseDtype(\"float64\", 0.0))\n\n        result = s.loc[range(2)]\n        expected = Series([1.0, 0.0], dtype=SparseDtype(\"float64\", 0.0))\n        tm.assert_series_equal(result, expected)\n\n        result = s.loc[range(3)].loc[range(2)]\n        expected = Series([1.0, 0.0], dtype=SparseDtype(\"float64\", 0.0))\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"indexer\", [\"loc\", \"iloc\"])\n    def test_getitem_single_row_sparse_df(self, indexer):\n        # GH#46406\n        df = DataFrame([[1.0, 0.0, 1.5], [0.0, 2.0, 0.0]], dtype=SparseDtype(float))\n        result = getattr(df, indexer)[0]\n        expected = Series([1.0, 0.0, 1.5], dtype=SparseDtype(float), name=0)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"key_type\", [iter, np.array, Series, Index])\n    def test_loc_getitem_iterable(self, float_frame, key_type):\n        idx = key_type([\"A\", \"B\", \"C\"])\n        result = float_frame.loc[:, idx]\n        expected = float_frame.loc[:, [\"A\", \"B\", \"C\"]]\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_timedelta_0seconds(self):\n        # GH#10583\n        df = DataFrame(np.random.normal(size=(10, 4)))\n        df.index = timedelta_range(start=\"0s\", periods=10, freq=\"s\")\n        expected = df.loc[Timedelta(\"0s\") :, :]\n        result = df.loc[\"0s\":, :]\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"val,expected\", [(2**63 - 1, Series([1])), (2**63, Series([2]))]\n    )\n    def test_loc_getitem_uint64_scalar(self, val, expected):\n        # see GH#19399\n        df = DataFrame([1, 2], index=[2**63 - 1, 2**63])\n        result = df.loc[val]\n\n        expected.name = val\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_int_label_with_float64index(self):\n        # note labels are floats\n        ser = Series([\"a\", \"b\", \"c\"], index=[0, 0.5, 1])\n        expected = ser.copy()\n\n        ser.loc[1] = \"zoo\"\n        expected.iloc[2] = \"zoo\"\n\n        tm.assert_series_equal(ser, expected)\n\n    @pytest.mark.parametrize(\n        \"indexer, expected\",\n        [\n            # The test name is a misnomer in the 0 case as df.index[indexer]\n            #  is a scalar.\n            (0, [20, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n            (slice(4, 8), [0, 1, 2, 3, 20, 20, 20, 20, 8, 9]),\n            ([3, 5], [0, 1, 2, 20, 4, 20, 6, 7, 8, 9]),\n        ],\n    )\n    def test_loc_setitem_listlike_with_timedelta64index(self, indexer, expected):\n        # GH#16637\n        tdi = to_timedelta(range(10), unit=\"s\")\n        df = DataFrame({\"x\": range(10)}, dtype=\"int64\", index=tdi)\n\n        df.loc[df.index[indexer], \"x\"] = 20\n\n        expected = DataFrame(\n            expected,\n            index=tdi,\n            columns=[\"x\"],\n            dtype=\"int64\",\n        )\n\n        tm.assert_frame_equal(expected, df)\n\n    def test_loc_setitem_categorical_values_partial_column_slice(self):\n        # Assigning a Category to parts of a int/... column uses the values of\n        # the Categorical\n        df = DataFrame({\"a\": [1, 1, 1, 1, 1], \"b\": list(\"aaaaa\")})\n        exp = DataFrame({\"a\": [1, \"b\", \"b\", 1, 1], \"b\": list(\"aabba\")})\n        df.loc[1:2, \"a\"] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        df.loc[2:3, \"b\"] = Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n        tm.assert_frame_equal(df, exp)\n\n    def test_loc_setitem_single_row_categorical(self):\n        # GH#25495\n        df = DataFrame({\"Alpha\": [\"a\"], \"Numeric\": [0]})\n        categories = Categorical(df[\"Alpha\"], categories=[\"a\", \"b\", \"c\"])\n\n        msg = \"will attempt to set the values inplace instead\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            df.loc[:, \"Alpha\"] = categories\n\n        result = df[\"Alpha\"]\n        expected = Series(categories, index=df.index, name=\"Alpha\")\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_datetime_coercion(self):\n        # GH#1048\n        df = DataFrame({\"c\": [Timestamp(\"2010-10-01\")] * 3})\n        df.loc[0:1, \"c\"] = np.datetime64(\"2008-08-08\")\n        assert Timestamp(\"2008-08-08\") == df.loc[0, \"c\"]\n        assert Timestamp(\"2008-08-08\") == df.loc[1, \"c\"]\n        df.loc[2, \"c\"] = date(2005, 5, 5)\n        assert Timestamp(\"2005-05-05\").date() == df.loc[2, \"c\"]\n\n    @pytest.mark.parametrize(\"idxer\", [\"var\", [\"var\"]])\n    def test_loc_setitem_datetimeindex_tz(self, idxer, tz_naive_fixture):\n        # GH#11365\n        tz = tz_naive_fixture\n        idx = date_range(start=\"2015-07-12\", periods=3, freq=\"H\", tz=tz)\n        expected = DataFrame(1.2, index=idx, columns=[\"var\"])\n        # if result started off with object dtype, then the .loc.__setitem__\n        #  below would retain object dtype\n        result = DataFrame(index=idx, columns=[\"var\"], dtype=np.float64)\n        result.loc[:, idxer] = expected\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_setitem_time_key(self, using_array_manager):\n        index = date_range(\"2012-01-01\", \"2012-01-05\", freq=\"30min\")\n        df = DataFrame(np.random.randn(len(index), 5), index=index)\n        akey = time(12, 0, 0)\n        bkey = slice(time(13, 0, 0), time(14, 0, 0))\n        ainds = [24, 72, 120, 168]\n        binds = [26, 27, 28, 74, 75, 76, 122, 123, 124, 170, 171, 172]\n\n        result = df.copy()\n        result.loc[akey] = 0\n        result = result.loc[akey]\n        expected = df.loc[akey].copy()\n        expected.loc[:] = 0\n        if using_array_manager:\n            # TODO(ArrayManager) we are still overwriting columns\n            expected = expected.astype(float)\n        tm.assert_frame_equal(result, expected)\n\n        result = df.copy()\n        result.loc[akey] = 0\n        result.loc[akey] = df.iloc[ainds]\n        tm.assert_frame_equal(result, df)\n\n        result = df.copy()\n        result.loc[bkey] = 0\n        result = result.loc[bkey]\n        expected = df.loc[bkey].copy()\n        expected.loc[:] = 0\n        if using_array_manager:\n            # TODO(ArrayManager) we are still overwriting columns\n            expected = expected.astype(float)\n        tm.assert_frame_equal(result, expected)\n\n        result = df.copy()\n        result.loc[bkey] = 0\n        result.loc[bkey] = df.iloc[binds]\n        tm.assert_frame_equal(result, df)\n\n    @pytest.mark.parametrize(\"key\", [\"A\", [\"A\"], (\"A\", slice(None))])\n    def test_loc_setitem_unsorted_multiindex_columns(self, key):\n        # GH#38601\n        mi = MultiIndex.from_tuples([(\"A\", 4), (\"B\", \"3\"), (\"A\", \"2\")])\n        df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=mi)\n        obj = df.copy()\n        obj.loc[:, key] = np.zeros((2, 2), dtype=\"int64\")\n        expected = DataFrame([[0, 2, 0], [0, 5, 0]], columns=mi)\n        tm.assert_frame_equal(obj, expected)\n\n        df = df.sort_index(axis=1)\n        df.loc[:, key] = np.zeros((2, 2), dtype=\"int64\")\n        expected = expected.sort_index(axis=1)\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_uint_drop(self, any_int_numpy_dtype):\n        # see GH#18311\n        # assigning series.loc[0] = 4 changed series.dtype to int\n        series = Series([1, 2, 3], dtype=any_int_numpy_dtype)\n        series.loc[0] = 4\n        expected = Series([4, 2, 3], dtype=any_int_numpy_dtype)\n        tm.assert_series_equal(series, expected)\n\n    def test_loc_setitem_td64_non_nano(self):\n        # GH#14155\n        ser = Series(10 * [np.timedelta64(10, \"m\")])\n        ser.loc[[1, 2, 3]] = np.timedelta64(20, \"m\")\n        expected = Series(10 * [np.timedelta64(10, \"m\")])\n        expected.loc[[1, 2, 3]] = Timedelta(np.timedelta64(20, \"m\"))\n        tm.assert_series_equal(ser, expected)\n\n    def test_loc_setitem_2d_to_1d_raises(self):\n        data = np.random.randn(2, 2)\n        ser = Series(range(2))\n\n        msg = \"|\".join(\n            [\n                r\"shape mismatch: value array of shape \\(2,2\\)\",\n                r\"cannot reshape array of size 4 into shape \\(2,\\)\",\n            ]\n        )\n        with pytest.raises(ValueError, match=msg):\n            ser.loc[range(2)] = data\n\n        msg = r\"could not broadcast input array from shape \\(2,2\\) into shape \\(2,?\\)\"\n        with pytest.raises(ValueError, match=msg):\n            ser.loc[:] = data\n\n    def test_loc_getitem_interval_index(self):\n        # GH#19977\n        index = pd.interval_range(start=0, periods=3)\n        df = DataFrame(\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=index, columns=[\"A\", \"B\", \"C\"]\n        )\n\n        expected = 1\n        result = df.loc[0.5, \"A\"]\n        tm.assert_almost_equal(result, expected)\n\n    def test_loc_getitem_interval_index2(self):\n        # GH#19977\n        index = pd.interval_range(start=0, periods=3, closed=\"both\")\n        df = DataFrame(\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=index, columns=[\"A\", \"B\", \"C\"]\n        )\n\n        index_exp = pd.interval_range(start=0, periods=2, freq=1, closed=\"both\")\n        expected = Series([1, 4], index=index_exp, name=\"A\")\n        result = df.loc[1, \"A\"]\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"tpl\", [(1,), (1, 2)])\n    def test_loc_getitem_index_single_double_tuples(self, tpl):\n        # GH#20991\n        idx = Index(\n            [(1,), (1, 2)],\n            name=\"A\",\n            tupleize_cols=False,\n        )\n        df = DataFrame(index=idx)\n\n        result = df.loc[[tpl]]\n        idx = Index([tpl], name=\"A\", tupleize_cols=False)\n        expected = DataFrame(index=idx)\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_index_namedtuple(self):\n        IndexType = namedtuple(\"IndexType\", [\"a\", \"b\"])\n        idx1 = IndexType(\"foo\", \"bar\")\n        idx2 = IndexType(\"baz\", \"bof\")\n        index = Index([idx1, idx2], name=\"composite_index\", tupleize_cols=False)\n        df = DataFrame([(1, 2), (3, 4)], index=index, columns=[\"A\", \"B\"])\n\n        result = df.loc[IndexType(\"foo\", \"bar\")][\"A\"]\n        assert result == 1\n\n    def test_loc_setitem_single_column_mixed(self):\n        df = DataFrame(\n            np.random.randn(5, 3),\n            index=[\"a\", \"b\", \"c\", \"d\", \"e\"],\n            columns=[\"foo\", \"bar\", \"baz\"],\n        )\n        df[\"str\"] = \"qux\"\n        df.loc[df.index[::2], \"str\"] = np.nan\n        expected = np.array([np.nan, \"qux\", np.nan, \"qux\", np.nan], dtype=object)\n        tm.assert_almost_equal(df[\"str\"].values, expected)\n\n    def test_loc_setitem_cast2(self):\n        # GH#7704\n        # dtype conversion on setting\n        df = DataFrame(np.random.rand(30, 3), columns=tuple(\"ABC\"))\n        df[\"event\"] = np.nan\n        df.loc[10, \"event\"] = \"foo\"\n        result = df.dtypes\n        expected = Series(\n            [np.dtype(\"float64\")] * 3 + [np.dtype(\"object\")],\n            index=[\"A\", \"B\", \"C\", \"event\"],\n        )\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_cast3(self):\n        # Test that data type is preserved . GH#5782\n        df = DataFrame({\"one\": np.arange(6, dtype=np.int8)})\n        df.loc[1, \"one\"] = 6\n        assert df.dtypes.one == np.dtype(np.int8)\n        df.one = np.int8(7)\n        assert df.dtypes.one == np.dtype(np.int8)\n\n    def test_loc_setitem_range_key(self, frame_or_series):\n        # GH#45479 don't treat range key as positional\n        obj = frame_or_series(range(5), index=[3, 4, 1, 0, 2])\n\n        values = [9, 10, 11]\n        if obj.ndim == 2:\n            values = [[9], [10], [11]]\n\n        obj.loc[range(3)] = values\n\n        expected = frame_or_series([0, 1, 10, 9, 11], index=obj.index)\n        tm.assert_equal(obj, expected)\n\n\nclass TestLocWithEllipsis:\n    @pytest.fixture(params=[tm.loc, tm.iloc])\n    def indexer(self, request):\n        # Test iloc while we're here\n        return request.param\n\n    @pytest.fixture\n    def obj(self, series_with_simple_index, frame_or_series):\n        obj = series_with_simple_index\n        if frame_or_series is not Series:\n            obj = obj.to_frame()\n        return obj\n\n    def test_loc_iloc_getitem_ellipsis(self, obj, indexer):\n        result = indexer(obj)[...]\n        tm.assert_equal(result, obj)\n\n    def test_loc_iloc_getitem_leading_ellipses(self, series_with_simple_index, indexer):\n        obj = series_with_simple_index\n        key = 0 if (indexer is tm.iloc or len(obj) == 0) else obj.index[0]\n\n        if indexer is tm.loc and obj.index.is_boolean():\n            # passing [False] will get interpreted as a boolean mask\n            # TODO: should it?  unambiguous when lengths dont match?\n            return\n        if indexer is tm.loc and isinstance(obj.index, MultiIndex):\n            msg = \"MultiIndex does not support indexing with Ellipsis\"\n            with pytest.raises(NotImplementedError, match=msg):\n                result = indexer(obj)[..., [key]]\n\n        elif len(obj) != 0:\n            result = indexer(obj)[..., [key]]\n            expected = indexer(obj)[[key]]\n            tm.assert_series_equal(result, expected)\n\n        key2 = 0 if indexer is tm.iloc else obj.name\n        df = obj.to_frame()\n        result = indexer(df)[..., [key2]]\n        expected = indexer(df)[:, [key2]]\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_iloc_getitem_ellipses_only_one_ellipsis(self, obj, indexer):\n        # GH37750\n        key = 0 if (indexer is tm.iloc or len(obj) == 0) else obj.index[0]\n\n        with pytest.raises(IndexingError, match=_one_ellipsis_message):\n            indexer(obj)[..., ...]\n\n        with pytest.raises(IndexingError, match=_one_ellipsis_message):\n            indexer(obj)[..., [key], ...]\n\n        with pytest.raises(IndexingError, match=_one_ellipsis_message):\n            indexer(obj)[..., ..., key]\n\n        # one_ellipsis_message takes precedence over \"Too many indexers\"\n        #  only when the first key is Ellipsis\n        with pytest.raises(IndexingError, match=\"Too many indexers\"):\n            indexer(obj)[key, ..., ...]\n\n\nclass TestLocWithMultiIndex:\n    @pytest.mark.parametrize(\n        \"keys, expected\",\n        [\n            ([\"b\", \"a\"], [[\"b\", \"b\", \"a\", \"a\"], [1, 2, 1, 2]]),\n            ([\"a\", \"b\"], [[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]]),\n            (([\"a\", \"b\"], [1, 2]), [[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]]),\n            (([\"a\", \"b\"], [2, 1]), [[\"a\", \"a\", \"b\", \"b\"], [2, 1, 2, 1]]),\n            (([\"b\", \"a\"], [2, 1]), [[\"b\", \"b\", \"a\", \"a\"], [2, 1, 2, 1]]),\n            (([\"b\", \"a\"], [1, 2]), [[\"b\", \"b\", \"a\", \"a\"], [1, 2, 1, 2]]),\n            (([\"c\", \"a\"], [2, 1]), [[\"c\", \"a\", \"a\"], [1, 2, 1]]),\n        ],\n    )\n    @pytest.mark.parametrize(\"dim\", [\"index\", \"columns\"])\n    def test_loc_getitem_multilevel_index_order(self, dim, keys, expected):\n        # GH#22797\n        # Try to respect order of keys given for MultiIndex.loc\n        kwargs = {dim: [[\"c\", \"a\", \"a\", \"b\", \"b\"], [1, 1, 2, 1, 2]]}\n        df = DataFrame(np.arange(25).reshape(5, 5), **kwargs)\n        exp_index = MultiIndex.from_arrays(expected)\n        if dim == \"index\":\n            res = df.loc[keys, :]\n            tm.assert_index_equal(res.index, exp_index)\n        elif dim == \"columns\":\n            res = df.loc[:, keys]\n            tm.assert_index_equal(res.columns, exp_index)\n\n    def test_loc_preserve_names(self, multiindex_year_month_day_dataframe_random_data):\n        ymd = multiindex_year_month_day_dataframe_random_data\n\n        result = ymd.loc[2000]\n        result2 = ymd[\"A\"].loc[2000]\n        assert result.index.names == ymd.index.names[1:]\n        assert result2.index.names == ymd.index.names[1:]\n\n        result = ymd.loc[2000, 2]\n        result2 = ymd[\"A\"].loc[2000, 2]\n        assert result.index.name == ymd.index.names[2]\n        assert result2.index.name == ymd.index.names[2]\n\n    def test_loc_getitem_multiindex_nonunique_len_zero(self):\n        # GH#13691\n        mi = MultiIndex.from_product([[0], [1, 1]])\n        ser = Series(0, index=mi)\n\n        res = ser.loc[[]]\n\n        expected = ser[:0]\n        tm.assert_series_equal(res, expected)\n\n        res2 = ser.loc[ser.iloc[0:0]]\n        tm.assert_series_equal(res2, expected)\n\n    def test_loc_getitem_access_none_value_in_multiindex(self):\n        # GH#34318: test that you can access a None value using .loc\n        #  through a Multiindex\n\n        ser = Series([None], MultiIndex.from_arrays([[\"Level1\"], [\"Level2\"]]))\n        result = ser.loc[(\"Level1\", \"Level2\")]\n        assert result is None\n\n        midx = MultiIndex.from_product([[\"Level1\"], [\"Level2_a\", \"Level2_b\"]])\n        ser = Series([None] * len(midx), dtype=object, index=midx)\n        result = ser.loc[(\"Level1\", \"Level2_a\")]\n        assert result is None\n\n        ser = Series([1] * len(midx), dtype=object, index=midx)\n        result = ser.loc[(\"Level1\", \"Level2_a\")]\n        assert result == 1\n\n    def test_loc_setitem_multiindex_slice(self):\n        # GH 34870\n\n        index = MultiIndex.from_tuples(\n            zip(\n                [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n                [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n            ),\n            names=[\"first\", \"second\"],\n        )\n\n        result = Series([1, 1, 1, 1, 1, 1, 1, 1], index=index)\n        result.loc[(\"baz\", \"one\"):(\"foo\", \"two\")] = 100\n\n        expected = Series([1, 1, 100, 100, 100, 100, 1, 1], index=index)\n\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_getitem_slice_datetime_objs_with_datetimeindex(self):\n        times = date_range(\"2000-01-01\", freq=\"10min\", periods=100000)\n        ser = Series(range(100000), times)\n        result = ser.loc[datetime(1900, 1, 1) : datetime(2100, 1, 1)]\n        tm.assert_series_equal(result, ser)\n\n    def test_loc_getitem_datetime_string_with_datetimeindex(self):\n        # GH 16710\n        df = DataFrame(\n            {\"a\": range(10), \"b\": range(10)},\n            index=date_range(\"2010-01-01\", \"2010-01-10\"),\n        )\n        result = df.loc[[\"2010-01-01\", \"2010-01-05\"], [\"a\", \"b\"]]\n        expected = DataFrame(\n            {\"a\": [0, 4], \"b\": [0, 4]},\n            index=DatetimeIndex([\"2010-01-01\", \"2010-01-05\"]),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_sorted_index_level_with_duplicates(self):\n        # GH#4516 sorting a MultiIndex with duplicates and multiple dtypes\n        mi = MultiIndex.from_tuples(\n            [\n                (\"foo\", \"bar\"),\n                (\"foo\", \"bar\"),\n                (\"bah\", \"bam\"),\n                (\"bah\", \"bam\"),\n                (\"foo\", \"bar\"),\n                (\"bah\", \"bam\"),\n            ],\n            names=[\"A\", \"B\"],\n        )\n        df = DataFrame(\n            [\n                [1.0, 1],\n                [2.0, 2],\n                [3.0, 3],\n                [4.0, 4],\n                [5.0, 5],\n                [6.0, 6],\n            ],\n            index=mi,\n            columns=[\"C\", \"D\"],\n        )\n        df = df.sort_index(level=0)\n\n        expected = DataFrame(\n            [[1.0, 1], [2.0, 2], [5.0, 5]], columns=[\"C\", \"D\"], index=mi.take([0, 1, 4])\n        )\n\n        result = df.loc[(\"foo\", \"bar\")]\n        tm.assert_frame_equal(result, expected)\n\n    def test_additional_element_to_categorical_series_loc(self):\n        # GH#47677\n        result = Series([\"a\", \"b\", \"c\"], dtype=\"category\")\n        result.loc[3] = 0\n        expected = Series([\"a\", \"b\", \"c\", 0], dtype=\"object\")\n        tm.assert_series_equal(result, expected)\n\n    def test_additional_categorical_element_loc(self):\n        # GH#47677\n        result = Series([\"a\", \"b\", \"c\"], dtype=\"category\")\n        result.loc[3] = \"a\"\n        expected = Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_set_nan_in_categorical_series(self, any_numeric_ea_dtype):\n        # GH#47677\n        srs = Series(\n            [1, 2, 3],\n            dtype=CategoricalDtype(Index([1, 2, 3], dtype=any_numeric_ea_dtype)),\n        )\n        # enlarge\n        srs.loc[3] = np.nan\n        expected = Series(\n            [1, 2, 3, np.nan],\n            dtype=CategoricalDtype(Index([1, 2, 3], dtype=any_numeric_ea_dtype)),\n        )\n        tm.assert_series_equal(srs, expected)\n        # set into\n        srs.loc[1] = np.nan\n        expected = Series(\n            [1, np.nan, 3, np.nan],\n            dtype=CategoricalDtype(Index([1, 2, 3], dtype=any_numeric_ea_dtype)),\n        )\n        tm.assert_series_equal(srs, expected)\n\n    @pytest.mark.parametrize(\"na\", (np.nan, pd.NA, None, pd.NaT))\n    def test_loc_consistency_series_enlarge_set_into(self, na):\n        # GH#47677\n        srs_enlarge = Series([\"a\", \"b\", \"c\"], dtype=\"category\")\n        srs_enlarge.loc[3] = na\n\n        srs_setinto = Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n        srs_setinto.loc[3] = na\n\n        tm.assert_series_equal(srs_enlarge, srs_setinto)\n        expected = Series([\"a\", \"b\", \"c\", na], dtype=\"category\")\n        tm.assert_series_equal(srs_enlarge, expected)\n\n    def test_loc_getitem_preserves_index_level_category_dtype(self):\n        # GH#15166\n        df = DataFrame(\n            data=np.arange(2, 22, 2),\n            index=MultiIndex(\n                levels=[CategoricalIndex([\"a\", \"b\"]), range(10)],\n                codes=[[0] * 5 + [1] * 5, range(10)],\n                names=[\"Index1\", \"Index2\"],\n            ),\n        )\n\n        expected = CategoricalIndex(\n            [\"a\", \"b\"],\n            categories=[\"a\", \"b\"],\n            ordered=False,\n            name=\"Index1\",\n            dtype=\"category\",\n        )\n\n        result = df.index.levels[0]\n        tm.assert_index_equal(result, expected)\n\n        result = df.loc[[\"a\"]].index.levels[0]\n        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.parametrize(\"lt_value\", [30, 10])\n    def test_loc_multiindex_levels_contain_values_not_in_index_anymore(self, lt_value):\n        # GH#41170\n        df = DataFrame({\"a\": [12, 23, 34, 45]}, index=[list(\"aabb\"), [0, 1, 2, 3]])\n        with pytest.raises(KeyError, match=r\"\\['b'\\] not in index\"):\n            df.loc[df[\"a\"] < lt_value, :].loc[[\"b\"], :]\n\n    def test_loc_multiindex_null_slice_na_level(self):\n        # GH#42055\n        lev1 = np.array([np.nan, np.nan])\n        lev2 = [\"bar\", \"baz\"]\n        mi = MultiIndex.from_arrays([lev1, lev2])\n        ser = Series([0, 1], index=mi)\n        result = ser.loc[:, \"bar\"]\n\n        # TODO: should we have name=\"bar\"?\n        expected = Series([0], index=[np.nan])\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_drops_level(self):\n        # Based on test_series_varied_multiindex_alignment, where\n        #  this used to fail to drop the first level\n        mi = MultiIndex.from_product(\n            [list(\"ab\"), list(\"xy\"), [1, 2]], names=[\"ab\", \"xy\", \"num\"]\n        )\n        ser = Series(range(8), index=mi)\n\n        loc_result = ser.loc[\"a\", :, :]\n        expected = ser.index.droplevel(0)[:4]\n        tm.assert_index_equal(loc_result.index, expected)\n\n\nclass TestLocSetitemWithExpansion:\n    @pytest.mark.slow\n    def test_loc_setitem_with_expansion_large_dataframe(self):\n        # GH#10692\n        result = DataFrame({\"x\": range(10**6)}, dtype=\"int64\")\n        result.loc[len(result)] = len(result) + 1\n        expected = DataFrame({\"x\": range(10**6 + 1)}, dtype=\"int64\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_setitem_empty_series(self):\n        # GH#5226\n\n        # partially set with an empty object series\n        ser = Series(dtype=object)\n        ser.loc[1] = 1\n        tm.assert_series_equal(ser, Series([1], index=[1]))\n        ser.loc[3] = 3\n        tm.assert_series_equal(ser, Series([1, 3], index=[1, 3]))\n\n    def test_loc_setitem_empty_series_float(self):\n        # GH#5226\n\n        # partially set with an empty object series\n        ser = Series(dtype=object)\n        ser.loc[1] = 1.0\n        tm.assert_series_equal(ser, Series([1.0], index=[1]))\n        ser.loc[3] = 3.0\n        tm.assert_series_equal(ser, Series([1.0, 3.0], index=[1, 3]))\n\n    def test_loc_setitem_empty_series_str_idx(self):\n        # GH#5226\n\n        # partially set with an empty object series\n        ser = Series(dtype=object)\n        ser.loc[\"foo\"] = 1\n        tm.assert_series_equal(ser, Series([1], index=[\"foo\"]))\n        ser.loc[\"bar\"] = 3\n        tm.assert_series_equal(ser, Series([1, 3], index=[\"foo\", \"bar\"]))\n        ser.loc[3] = 4\n        tm.assert_series_equal(ser, Series([1, 3, 4], index=[\"foo\", \"bar\", 3]))\n\n    def test_loc_setitem_incremental_with_dst(self):\n        # GH#20724\n        base = datetime(2015, 11, 1, tzinfo=gettz(\"US/Pacific\"))\n        idxs = [base + timedelta(seconds=i * 900) for i in range(16)]\n        result = Series([0], index=[idxs[0]])\n        for ts in idxs:\n            result.loc[ts] = 1\n        expected = Series(1, index=idxs)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"conv\",\n        [\n            lambda x: x,\n            lambda x: x.to_datetime64(),\n            lambda x: x.to_pydatetime(),\n            lambda x: np.datetime64(x),\n        ],\n        ids=[\"self\", \"to_datetime64\", \"to_pydatetime\", \"np.datetime64\"],\n    )\n    def test_loc_setitem_datetime_keys_cast(self, conv):\n        # GH#9516\n        dt1 = Timestamp(\"20130101 09:00:00\")\n        dt2 = Timestamp(\"20130101 10:00:00\")\n        df = DataFrame()\n        df.loc[conv(dt1), \"one\"] = 100\n        df.loc[conv(dt2), \"one\"] = 200\n\n        expected = DataFrame({\"one\": [100.0, 200.0]}, index=[dt1, dt2])\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_categorical_column_retains_dtype(self, ordered):\n        # GH16360\n        result = DataFrame({\"A\": [1]})\n        result.loc[:, \"B\"] = Categorical([\"b\"], ordered=ordered)\n        expected = DataFrame({\"A\": [1], \"B\": Categorical([\"b\"], ordered=ordered)})\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_setitem_with_expansion_and_existing_dst(self):\n        # GH#18308\n        start = Timestamp(\"2017-10-29 00:00:00+0200\", tz=\"Europe/Madrid\")\n        end = Timestamp(\"2017-10-29 03:00:00+0100\", tz=\"Europe/Madrid\")\n        ts = Timestamp(\"2016-10-10 03:00:00\", tz=\"Europe/Madrid\")\n        idx = date_range(start, end, inclusive=\"left\", freq=\"H\")\n        assert ts not in idx  # i.e. result.loc setitem is with-expansion\n\n        result = DataFrame(index=idx, columns=[\"value\"])\n        result.loc[ts, \"value\"] = 12\n        expected = DataFrame(\n            [np.nan] * len(idx) + [12],\n            index=idx.append(DatetimeIndex([ts])),\n            columns=[\"value\"],\n            dtype=object,\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_setitem_with_expansion(self):\n        # indexing - setting an element\n        df = DataFrame(\n            data=to_datetime([\"2015-03-30 20:12:32\", \"2015-03-12 00:11:11\"]),\n            columns=[\"time\"],\n        )\n        df[\"new_col\"] = [\"new\", \"old\"]\n        df.time = df.set_index(\"time\").index.tz_localize(\"UTC\")\n        v = df[df.new_col == \"new\"].set_index(\"time\").index.tz_convert(\"US/Pacific\")\n\n        # pre-2.0  trying to set a single element on a part of a different\n        #  timezone converted to object; in 2.0 it retains dtype\n        df2 = df.copy()\n        df2.loc[df2.new_col == \"new\", \"time\"] = v\n\n        expected = Series([v[0].tz_convert(\"UTC\"), df.loc[1, \"time\"]], name=\"time\")\n        tm.assert_series_equal(df2.time, expected)\n\n        v = df.loc[df.new_col == \"new\", \"time\"] + Timedelta(\"1s\")\n        df.loc[df.new_col == \"new\", \"time\"] = v\n        tm.assert_series_equal(df.loc[df.new_col == \"new\", \"time\"], v)\n\n    def test_loc_setitem_with_expansion_inf_upcast_empty(self):\n        # Test with np.inf in columns\n        df = DataFrame()\n        df.loc[0, 0] = 1\n        df.loc[1, 1] = 2\n        df.loc[0, np.inf] = 3\n\n        result = df.columns\n        expected = Float64Index([0, 1, np.inf])\n        tm.assert_index_equal(result, expected)\n\n    @pytest.mark.filterwarnings(\"ignore:indexing past lexsort depth\")\n    def test_loc_setitem_with_expansion_nonunique_index(self, index):\n        # GH#40096\n        if not len(index):\n            return\n\n        index = index.repeat(2)  # ensure non-unique\n        N = len(index)\n        arr = np.arange(N).astype(np.int64)\n\n        orig = DataFrame(arr, index=index, columns=[0])\n\n        # key that will requiring object-dtype casting in the index\n        key = \"kapow\"\n        assert key not in index  # otherwise test is invalid\n        # TODO: using a tuple key breaks here in many cases\n\n        exp_index = index.insert(len(index), key)\n        if isinstance(index, MultiIndex):\n            assert exp_index[-1][0] == key\n        else:\n            assert exp_index[-1] == key\n        exp_data = np.arange(N + 1).astype(np.float64)\n        expected = DataFrame(exp_data, index=exp_index, columns=[0])\n\n        # Add new row, but no new columns\n        df = orig.copy()\n        df.loc[key, 0] = N\n        tm.assert_frame_equal(df, expected)\n\n        # add new row on a Series\n        ser = orig.copy()[0]\n        ser.loc[key] = N\n        # the series machinery lets us preserve int dtype instead of float\n        expected = expected[0].astype(np.int64)\n        tm.assert_series_equal(ser, expected)\n\n        # add new row and new column\n        df = orig.copy()\n        df.loc[key, 1] = N\n        expected = DataFrame(\n            {0: list(arr) + [np.nan], 1: [np.nan] * N + [float(N)]},\n            index=exp_index,\n        )\n        tm.assert_frame_equal(df, expected)\n\n    @pytest.mark.parametrize(\n        \"dtype\", [\"Int32\", \"Int64\", \"UInt32\", \"UInt64\", \"Float32\", \"Float64\"]\n    )\n    def test_loc_setitem_with_expansion_preserves_nullable_int(self, dtype):\n        # GH#42099\n        ser = Series([0, 1, 2, 3], dtype=dtype)\n        df = DataFrame({\"data\": ser})\n\n        result = DataFrame(index=df.index)\n        result.loc[df.index, \"data\"] = ser\n\n        tm.assert_frame_equal(result, df)\n\n        result = DataFrame(index=df.index)\n        result.loc[df.index, \"data\"] = ser._values\n        tm.assert_frame_equal(result, df)\n\n\nclass TestLocCallable:\n    def test_frame_loc_getitem_callable(self):\n        # GH#11485\n        df = DataFrame({\"A\": [1, 2, 3, 4], \"B\": list(\"aabb\"), \"C\": [1, 2, 3, 4]})\n        # iloc cannot use boolean Series (see GH3635)\n\n        # return bool indexer\n        res = df.loc[lambda x: x.A > 2]\n        tm.assert_frame_equal(res, df.loc[df.A > 2])\n\n        res = df.loc[lambda x: x.B == \"b\", :]\n        tm.assert_frame_equal(res, df.loc[df.B == \"b\", :])\n\n        res = df.loc[lambda x: x.A > 2, lambda x: x.columns == \"B\"]\n        tm.assert_frame_equal(res, df.loc[df.A > 2, [False, True, False]])\n\n        res = df.loc[lambda x: x.A > 2, lambda x: \"B\"]\n        tm.assert_series_equal(res, df.loc[df.A > 2, \"B\"])\n\n        res = df.loc[lambda x: x.A > 2, lambda x: [\"A\", \"B\"]]\n        tm.assert_frame_equal(res, df.loc[df.A > 2, [\"A\", \"B\"]])\n\n        res = df.loc[lambda x: x.A == 2, lambda x: [\"A\", \"B\"]]\n        tm.assert_frame_equal(res, df.loc[df.A == 2, [\"A\", \"B\"]])\n\n        # scalar\n        res = df.loc[lambda x: 1, lambda x: \"A\"]\n        assert res == df.loc[1, \"A\"]\n\n    def test_frame_loc_getitem_callable_mixture(self):\n        # GH#11485\n        df = DataFrame({\"A\": [1, 2, 3, 4], \"B\": list(\"aabb\"), \"C\": [1, 2, 3, 4]})\n\n        res = df.loc[lambda x: x.A > 2, [\"A\", \"B\"]]\n        tm.assert_frame_equal(res, df.loc[df.A > 2, [\"A\", \"B\"]])\n\n        res = df.loc[[2, 3], lambda x: [\"A\", \"B\"]]\n        tm.assert_frame_equal(res, df.loc[[2, 3], [\"A\", \"B\"]])\n\n        res = df.loc[3, lambda x: [\"A\", \"B\"]]\n        tm.assert_series_equal(res, df.loc[3, [\"A\", \"B\"]])\n\n    def test_frame_loc_getitem_callable_labels(self):\n        # GH#11485\n        df = DataFrame({\"X\": [1, 2, 3, 4], \"Y\": list(\"aabb\")}, index=list(\"ABCD\"))\n\n        # return label\n        res = df.loc[lambda x: [\"A\", \"C\"]]\n        tm.assert_frame_equal(res, df.loc[[\"A\", \"C\"]])\n\n        res = df.loc[lambda x: [\"A\", \"C\"], :]\n        tm.assert_frame_equal(res, df.loc[[\"A\", \"C\"], :])\n\n        res = df.loc[lambda x: [\"A\", \"C\"], lambda x: \"X\"]\n        tm.assert_series_equal(res, df.loc[[\"A\", \"C\"], \"X\"])\n\n        res = df.loc[lambda x: [\"A\", \"C\"], lambda x: [\"X\"]]\n        tm.assert_frame_equal(res, df.loc[[\"A\", \"C\"], [\"X\"]])\n\n        # mixture\n        res = df.loc[[\"A\", \"C\"], lambda x: \"X\"]\n        tm.assert_series_equal(res, df.loc[[\"A\", \"C\"], \"X\"])\n\n        res = df.loc[[\"A\", \"C\"], lambda x: [\"X\"]]\n        tm.assert_frame_equal(res, df.loc[[\"A\", \"C\"], [\"X\"]])\n\n        res = df.loc[lambda x: [\"A\", \"C\"], \"X\"]\n        tm.assert_series_equal(res, df.loc[[\"A\", \"C\"], \"X\"])\n\n        res = df.loc[lambda x: [\"A\", \"C\"], [\"X\"]]\n        tm.assert_frame_equal(res, df.loc[[\"A\", \"C\"], [\"X\"]])\n\n    def test_frame_loc_setitem_callable(self):\n        # GH#11485\n        df = DataFrame({\"X\": [1, 2, 3, 4], \"Y\": list(\"aabb\")}, index=list(\"ABCD\"))\n\n        # return label\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"]] = -20\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"]] = -20\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"], :] = 20\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], :] = 20\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"], lambda x: \"X\"] = -1\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], \"X\"] = -1\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"], lambda x: [\"X\"]] = [5, 10]\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], [\"X\"]] = [5, 10]\n        tm.assert_frame_equal(res, exp)\n\n        # mixture\n        res = df.copy()\n        res.loc[[\"A\", \"C\"], lambda x: \"X\"] = np.array([-1, -2])\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], \"X\"] = np.array([-1, -2])\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[[\"A\", \"C\"], lambda x: [\"X\"]] = 10\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], [\"X\"]] = 10\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"], \"X\"] = -2\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], \"X\"] = -2\n        tm.assert_frame_equal(res, exp)\n\n        res = df.copy()\n        res.loc[lambda x: [\"A\", \"C\"], [\"X\"]] = -4\n        exp = df.copy()\n        exp.loc[[\"A\", \"C\"], [\"X\"]] = -4\n        tm.assert_frame_equal(res, exp)\n\n\nclass TestPartialStringSlicing:\n    def test_loc_getitem_partial_string_slicing_datetimeindex(self):\n        # GH#35509\n        df = DataFrame(\n            {\"col1\": [\"a\", \"b\", \"c\"], \"col2\": [1, 2, 3]},\n            index=to_datetime([\"2020-08-01\", \"2020-07-02\", \"2020-08-05\"]),\n        )\n        expected = DataFrame(\n            {\"col1\": [\"a\", \"c\"], \"col2\": [1, 3]},\n            index=to_datetime([\"2020-08-01\", \"2020-08-05\"]),\n        )\n        result = df.loc[\"2020-08\"]\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_partial_string_slicing_with_periodindex(self):\n        pi = pd.period_range(start=\"2017-01-01\", end=\"2018-01-01\", freq=\"M\")\n        ser = pi.to_series()\n        result = ser.loc[:\"2017-12\"]\n        expected = ser.iloc[:-1]\n\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_getitem_partial_string_slicing_with_timedeltaindex(self):\n        ix = timedelta_range(start=\"1 day\", end=\"2 days\", freq=\"1H\")\n        ser = ix.to_series()\n        result = ser.loc[:\"1 days\"]\n        expected = ser.iloc[:-1]\n\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_getitem_str_timedeltaindex(self):\n        # GH#16896\n        df = DataFrame({\"x\": range(3)}, index=to_timedelta(range(3), unit=\"days\"))\n        expected = df.iloc[0]\n        sliced = df.loc[\"0 days\"]\n        tm.assert_series_equal(sliced, expected)\n\n    @pytest.mark.parametrize(\"indexer_end\", [None, \"2020-01-02 23:59:59.999999999\"])\n    def test_loc_getitem_partial_slice_non_monotonicity(\n        self, tz_aware_fixture, indexer_end, frame_or_series\n    ):\n        # GH#33146\n        obj = frame_or_series(\n            [1] * 5,\n            index=DatetimeIndex(\n                [\n                    Timestamp(\"2019-12-30\"),\n                    Timestamp(\"2020-01-01\"),\n                    Timestamp(\"2019-12-25\"),\n                    Timestamp(\"2020-01-02 23:59:59.999999999\"),\n                    Timestamp(\"2019-12-19\"),\n                ],\n                tz=tz_aware_fixture,\n            ),\n        )\n        expected = frame_or_series(\n            [1] * 2,\n            index=DatetimeIndex(\n                [\n                    Timestamp(\"2020-01-01\"),\n                    Timestamp(\"2020-01-02 23:59:59.999999999\"),\n                ],\n                tz=tz_aware_fixture,\n            ),\n        )\n        indexer = slice(\"2020-01-01\", indexer_end)\n\n        result = obj[indexer]\n        tm.assert_equal(result, expected)\n\n        result = obj.loc[indexer]\n        tm.assert_equal(result, expected)\n\n\nclass TestLabelSlicing:\n    def test_loc_getitem_slicing_datetimes_frame(self):\n        # GH#7523\n\n        # unique\n        df_unique = DataFrame(\n            np.arange(4.0, dtype=\"float64\"),\n            index=[datetime(2001, 1, i, 10, 00) for i in [1, 2, 3, 4]],\n        )\n\n        # duplicates\n        df_dups = DataFrame(\n            np.arange(5.0, dtype=\"float64\"),\n            index=[datetime(2001, 1, i, 10, 00) for i in [1, 2, 2, 3, 4]],\n        )\n\n        for df in [df_unique, df_dups]:\n            result = df.loc[datetime(2001, 1, 1, 10) :]\n            tm.assert_frame_equal(result, df)\n            result = df.loc[: datetime(2001, 1, 4, 10)]\n            tm.assert_frame_equal(result, df)\n            result = df.loc[datetime(2001, 1, 1, 10) : datetime(2001, 1, 4, 10)]\n            tm.assert_frame_equal(result, df)\n\n            result = df.loc[datetime(2001, 1, 1, 11) :]\n            expected = df.iloc[1:]\n            tm.assert_frame_equal(result, expected)\n            result = df.loc[\"20010101 11\":]\n            tm.assert_frame_equal(result, expected)\n\n    def test_loc_getitem_label_slice_across_dst(self):\n        # GH#21846\n        idx = date_range(\n            \"2017-10-29 01:30:00\", tz=\"Europe/Berlin\", periods=5, freq=\"30 min\"\n        )\n        series2 = Series([0, 1, 2, 3, 4], index=idx)\n\n        t_1 = Timestamp(\"2017-10-29 02:30:00+02:00\", tz=\"Europe/Berlin\")\n        t_2 = Timestamp(\"2017-10-29 02:00:00+01:00\", tz=\"Europe/Berlin\")\n        result = series2.loc[t_1:t_2]\n        expected = Series([2, 3], index=idx[2:4])\n        tm.assert_series_equal(result, expected)\n\n        result = series2[t_1]\n        expected = 2\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            pd.period_range(start=\"2017-01-01\", end=\"2018-01-01\", freq=\"M\"),\n            timedelta_range(start=\"1 day\", end=\"2 days\", freq=\"1H\"),\n        ],\n    )\n    def test_loc_getitem_label_slice_period_timedelta(self, index):\n        ser = index.to_series()\n        result = ser.loc[: index[-2]]\n        expected = ser.iloc[:-1]\n\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_getitem_slice_floats_inexact(self):\n        index = [52195.504153, 52196.303147, 52198.369883]\n        df = DataFrame(np.random.rand(3, 2), index=index)\n\n        s1 = df.loc[52195.1:52196.5]\n        assert len(s1) == 2\n\n        s1 = df.loc[52195.1:52196.6]\n        assert len(s1) == 2\n\n        s1 = df.loc[52195.1:52198.9]\n        assert len(s1) == 3\n\n    def test_loc_getitem_float_slice_float64index(self):\n        ser = Series(np.random.rand(10), index=np.arange(10, 20, dtype=float))\n\n        assert len(ser.loc[12.0:]) == 8\n        assert len(ser.loc[12.5:]) == 7\n\n        idx = np.arange(10, 20, dtype=float)\n        idx[2] = 12.2\n        ser.index = idx\n        assert len(ser.loc[12.0:]) == 8\n        assert len(ser.loc[12.5:]) == 7\n\n    @pytest.mark.parametrize(\n        \"start,stop, expected_slice\",\n        [\n            [np.timedelta64(0, \"ns\"), None, slice(0, 11)],\n            [np.timedelta64(1, \"D\"), np.timedelta64(6, \"D\"), slice(1, 7)],\n            [None, np.timedelta64(4, \"D\"), slice(0, 5)],\n        ],\n    )\n    def test_loc_getitem_slice_label_td64obj(self, start, stop, expected_slice):\n        # GH#20393\n        ser = Series(range(11), timedelta_range(\"0 days\", \"10 days\"))\n        result = ser.loc[slice(start, stop)]\n        expected = ser.iloc[expected_slice]\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"start\", [\"2018\", \"2020\"])\n    def test_loc_getitem_slice_unordered_dt_index(self, frame_or_series, start):\n        obj = frame_or_series(\n            [1, 2, 3],\n            index=[Timestamp(\"2016\"), Timestamp(\"2019\"), Timestamp(\"2017\")],\n        )\n        with pytest.raises(\n            KeyError, match=\"Value based partial slicing on non-monotonic\"\n        ):\n            obj.loc[start:\"2022\"]\n\n    @pytest.mark.parametrize(\"value\", [1, 1.5])\n    def test_loc_getitem_slice_labels_int_in_object_index(self, frame_or_series, value):\n        # GH: 26491\n        obj = frame_or_series(range(4), index=[value, \"first\", 2, \"third\"])\n        result = obj.loc[value:\"third\"]\n        expected = frame_or_series(range(4), index=[value, \"first\", 2, \"third\"])\n        tm.assert_equal(result, expected)\n\n    def test_loc_getitem_slice_columns_mixed_dtype(self):\n        # GH: 20975\n        df = DataFrame({\"test\": 1, 1: 2, 2: 3}, index=[0])\n        expected = DataFrame(\n            data=[[2, 3]], index=[0], columns=Index([1, 2], dtype=object)\n        )\n        tm.assert_frame_equal(df.loc[:, 1:], expected)\n\n\nclass TestLocBooleanLabelsAndSlices:\n    @pytest.mark.parametrize(\"bool_value\", [True, False])\n    def test_loc_bool_incompatible_index_raises(\n        self, index, frame_or_series, bool_value\n    ):\n        # GH20432\n        message = f\"{bool_value}: boolean label can not be used without a boolean index\"\n        if index.inferred_type != \"boolean\":\n            obj = frame_or_series(index=index, dtype=\"object\")\n            with pytest.raises(KeyError, match=message):\n                obj.loc[bool_value]\n\n    @pytest.mark.parametrize(\"bool_value\", [True, False])\n    def test_loc_bool_should_not_raise(self, frame_or_series, bool_value):\n        obj = frame_or_series(\n            index=Index([True, False], dtype=\"boolean\"), dtype=\"object\"\n        )\n        obj.loc[bool_value]\n\n    def test_loc_bool_slice_raises(self, index, frame_or_series):\n        # GH20432\n        message = (\n            r\"slice\\(True, False, None\\): boolean values can not be used in a slice\"\n        )\n        obj = frame_or_series(index=index, dtype=\"object\")\n        with pytest.raises(TypeError, match=message):\n            obj.loc[True:False]\n\n\nclass TestLocBooleanMask:\n    def test_loc_setitem_bool_mask_timedeltaindex(self):\n        # GH#14946\n        df = DataFrame({\"x\": range(10)})\n        df.index = to_timedelta(range(10), unit=\"s\")\n        conditions = [df[\"x\"] > 3, df[\"x\"] == 3, df[\"x\"] < 3]\n        expected_data = [\n            [0, 1, 2, 3, 10, 10, 10, 10, 10, 10],\n            [0, 1, 2, 10, 4, 5, 6, 7, 8, 9],\n            [10, 10, 10, 3, 4, 5, 6, 7, 8, 9],\n        ]\n        for cond, data in zip(conditions, expected_data):\n            result = df.copy()\n            result.loc[cond, \"x\"] = 10\n\n            expected = DataFrame(\n                data,\n                index=to_timedelta(range(10), unit=\"s\"),\n                columns=[\"x\"],\n                dtype=\"int64\",\n            )\n            tm.assert_frame_equal(expected, result)\n\n    @pytest.mark.parametrize(\"tz\", [None, \"UTC\"])\n    def test_loc_setitem_mask_with_datetimeindex_tz(self, tz):\n        # GH#16889\n        # support .loc with alignment and tz-aware DatetimeIndex\n        mask = np.array([True, False, True, False])\n\n        idx = date_range(\"20010101\", periods=4, tz=tz)\n        df = DataFrame({\"a\": np.arange(4)}, index=idx).astype(\"float64\")\n\n        result = df.copy()\n        result.loc[mask, :] = df.loc[mask, :]\n        tm.assert_frame_equal(result, df)\n\n        result = df.copy()\n        result.loc[mask] = df.loc[mask]\n        tm.assert_frame_equal(result, df)\n\n    def test_loc_setitem_mask_and_label_with_datetimeindex(self):\n        # GH#9478\n        # a datetimeindex alignment issue with partial setting\n        df = DataFrame(\n            np.arange(6.0).reshape(3, 2),\n            columns=list(\"AB\"),\n            index=date_range(\"1/1/2000\", periods=3, freq=\"1H\"),\n        )\n        expected = df.copy()\n        expected[\"C\"] = [expected.index[0]] + [pd.NaT, pd.NaT]\n\n        mask = df.A < 1\n        df.loc[mask, \"C\"] = df.loc[mask].index\n        tm.assert_frame_equal(df, expected)\n\n    def test_loc_setitem_mask_td64_series_value(self):\n        # GH#23462 key list of bools, value is a Series\n        td1 = Timedelta(0)\n        td2 = Timedelta(28767471428571405)\n        df = DataFrame({\"col\": Series([td1, td2])})\n        df_copy = df.copy()\n        ser = Series([td1])\n\n        expected = df[\"col\"].iloc[1].value\n        df.loc[[True, False]] = ser\n        result = df[\"col\"].iloc[1].value\n\n        assert expected == result\n        tm.assert_frame_equal(df, df_copy)\n\n    @td.skip_array_manager_invalid_test  # TODO(ArrayManager) rewrite not using .values\n    def test_loc_setitem_boolean_and_column(self, float_frame):\n        expected = float_frame.copy()\n        mask = float_frame[\"A\"] > 0\n\n        float_frame.loc[mask, \"B\"] = 0\n        expected.values[mask.values, 1] = 0\n\n        tm.assert_frame_equal(float_frame, expected)\n\n    def test_loc_setitem_ndframe_values_alignment(self, using_copy_on_write):\n        # GH#45501\n        df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n        df.loc[[False, False, True], [\"a\"]] = DataFrame(\n            {\"a\": [10, 20, 30]}, index=[2, 1, 0]\n        )\n\n        expected = DataFrame({\"a\": [1, 2, 10], \"b\": [4, 5, 6]})\n        tm.assert_frame_equal(df, expected)\n\n        # same thing with Series RHS\n        df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n        df.loc[[False, False, True], [\"a\"]] = Series([10, 11, 12], index=[2, 1, 0])\n        tm.assert_frame_equal(df, expected)\n\n        # same thing but setting \"a\" instead of [\"a\"]\n        df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n        df.loc[[False, False, True], \"a\"] = Series([10, 11, 12], index=[2, 1, 0])\n        tm.assert_frame_equal(df, expected)\n\n        df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n        df_orig = df.copy()\n        ser = df[\"a\"]\n        ser.loc[[False, False, True]] = Series([10, 11, 12], index=[2, 1, 0])\n        if using_copy_on_write:\n            tm.assert_frame_equal(df, df_orig)\n        else:\n            tm.assert_frame_equal(df, expected)\n\n\nclass TestLocListlike:\n    @pytest.mark.parametrize(\"box\", [lambda x: x, np.asarray, list])\n    def test_loc_getitem_list_of_labels_categoricalindex_with_na(self, box):\n        # passing a list can include valid categories _or_ NA values\n        ci = CategoricalIndex([\"A\", \"B\", np.nan])\n        ser = Series(range(3), index=ci)\n\n        result = ser.loc[box(ci)]\n        tm.assert_series_equal(result, ser)\n\n        result = ser[box(ci)]\n        tm.assert_series_equal(result, ser)\n\n        result = ser.to_frame().loc[box(ci)]\n        tm.assert_frame_equal(result, ser.to_frame())\n\n        ser2 = ser[:-1]\n        ci2 = ci[1:]\n        # but if there are no NAs present, this should raise KeyError\n        msg = \"not in index\"\n        with pytest.raises(KeyError, match=msg):\n            ser2.loc[box(ci2)]\n\n        with pytest.raises(KeyError, match=msg):\n            ser2[box(ci2)]\n\n        with pytest.raises(KeyError, match=msg):\n            ser2.to_frame().loc[box(ci2)]\n\n    def test_loc_getitem_series_label_list_missing_values(self):\n        # gh-11428\n        key = np.array(\n            [\"2001-01-04\", \"2001-01-02\", \"2001-01-04\", \"2001-01-14\"], dtype=\"datetime64\"\n        )\n        ser = Series([2, 5, 8, 11], date_range(\"2001-01-01\", freq=\"D\", periods=4))\n        with pytest.raises(KeyError, match=\"not in index\"):\n            ser.loc[key]\n\n    def test_loc_getitem_series_label_list_missing_integer_values(self):\n        # GH: 25927\n        ser = Series(\n            index=np.array([9730701000001104, 10049011000001109]),\n            data=np.array([999000011000001104, 999000011000001104]),\n        )\n        with pytest.raises(KeyError, match=\"not in index\"):\n            ser.loc[np.array([9730701000001104, 10047311000001102])]\n\n    @pytest.mark.parametrize(\"to_period\", [True, False])\n    def test_loc_getitem_listlike_of_datetimelike_keys(self, to_period):\n        # GH#11497\n\n        idx = date_range(\"2011-01-01\", \"2011-01-02\", freq=\"D\", name=\"idx\")\n        if to_period:\n            idx = idx.to_period(\"D\")\n        ser = Series([0.1, 0.2], index=idx, name=\"s\")\n\n        keys = [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")]\n        if to_period:\n            keys = [x.to_period(\"D\") for x in keys]\n        result = ser.loc[keys]\n        exp = Series([0.1, 0.2], index=idx, name=\"s\")\n        if not to_period:\n            exp.index = exp.index._with_freq(None)\n        tm.assert_series_equal(result, exp, check_index_type=True)\n\n        keys = [\n            Timestamp(\"2011-01-02\"),\n            Timestamp(\"2011-01-02\"),\n            Timestamp(\"2011-01-01\"),\n        ]\n        if to_period:\n            keys = [x.to_period(\"D\") for x in keys]\n        exp = Series(\n            [0.2, 0.2, 0.1], index=Index(keys, name=\"idx\", dtype=idx.dtype), name=\"s\"\n        )\n        result = ser.loc[keys]\n        tm.assert_series_equal(result, exp, check_index_type=True)\n\n        keys = [\n            Timestamp(\"2011-01-03\"),\n            Timestamp(\"2011-01-02\"),\n            Timestamp(\"2011-01-03\"),\n        ]\n        if to_period:\n            keys = [x.to_period(\"D\") for x in keys]\n\n        with pytest.raises(KeyError, match=\"not in index\"):\n            ser.loc[keys]\n\n    def test_loc_named_index(self):\n        # GH 42790\n        df = DataFrame(\n            [[1, 2], [4, 5], [7, 8]],\n            index=[\"cobra\", \"viper\", \"sidewinder\"],\n            columns=[\"max_speed\", \"shield\"],\n        )\n        expected = df.iloc[:2]\n        expected.index.name = \"foo\"\n        result = df.loc[Index([\"cobra\", \"viper\"], name=\"foo\")]\n        tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\n    \"columns, column_key, expected_columns\",\n    [\n        ([2011, 2012, 2013], [2011, 2012], [0, 1]),\n        ([2011, 2012, \"All\"], [2011, 2012], [0, 1]),\n        ([2011, 2012, \"All\"], [2011, \"All\"], [0, 2]),\n    ],\n)\ndef test_loc_getitem_label_list_integer_labels(columns, column_key, expected_columns):\n    # gh-14836\n    df = DataFrame(np.random.rand(3, 3), columns=columns, index=list(\"ABC\"))\n    expected = df.iloc[:, expected_columns]\n    result = df.loc[[\"A\", \"B\", \"C\"], column_key]\n\n    tm.assert_frame_equal(result, expected, check_column_type=True)\n\n\ndef test_loc_setitem_float_intindex():\n    # GH 8720\n    rand_data = np.random.randn(8, 4)\n    result = DataFrame(rand_data)\n    result.loc[:, 0.5] = np.nan\n    expected_data = np.hstack((rand_data, np.array([np.nan] * 8).reshape(8, 1)))\n    expected = DataFrame(expected_data, columns=[0.0, 1.0, 2.0, 3.0, 0.5])\n    tm.assert_frame_equal(result, expected)\n\n    result = DataFrame(rand_data)\n    result.loc[:, 0.5] = np.nan\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_loc_axis_1_slice():\n    # GH 10586\n    cols = [(yr, m) for yr in [2014, 2015] for m in [7, 8, 9, 10]]\n    df = DataFrame(\n        np.ones((10, 8)),\n        index=tuple(\"ABCDEFGHIJ\"),\n        columns=MultiIndex.from_tuples(cols),\n    )\n    result = df.loc(axis=1)[(2014, 9):(2015, 8)]\n    expected = DataFrame(\n        np.ones((10, 4)),\n        index=tuple(\"ABCDEFGHIJ\"),\n        columns=MultiIndex.from_tuples([(2014, 9), (2014, 10), (2015, 7), (2015, 8)]),\n    )\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_loc_set_dataframe_multiindex():\n    # GH 14592\n    expected = DataFrame(\n        \"a\", index=range(2), columns=MultiIndex.from_product([range(2), range(2)])\n    )\n    result = expected.copy()\n    result.loc[0, [(0, 1)]] = result.loc[0, [(0, 1)]]\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_loc_mixed_int_float():\n    # GH#19456\n    ser = Series(range(2), Index([1, 2.0], dtype=object))\n\n    result = ser.loc[1]\n    assert result == 0\n\n\ndef test_loc_with_positional_slice_raises():\n    # GH#31840\n    ser = Series(range(4), index=[\"A\", \"B\", \"C\", \"D\"])\n\n    with pytest.raises(TypeError, match=\"Slicing a positional slice with .loc\"):\n        ser.loc[:3] = 2\n\n\ndef test_loc_slice_disallows_positional():\n    # GH#16121, GH#24612, GH#31810\n    dti = date_range(\"2016-01-01\", periods=3)\n    df = DataFrame(np.random.random((3, 2)), index=dti)\n\n    ser = df[0]\n\n    msg = (\n        \"cannot do slice indexing on DatetimeIndex with these \"\n        r\"indexers \\[1\\] of type int\"\n    )\n\n    for obj in [df, ser]:\n        with pytest.raises(TypeError, match=msg):\n            obj.loc[1:3]\n\n        with pytest.raises(TypeError, match=\"Slicing a positional slice with .loc\"):\n            # GH#31840 enforce incorrect behavior\n            obj.loc[1:3] = 1\n\n    with pytest.raises(TypeError, match=msg):\n        df.loc[1:3, 1]\n\n    with pytest.raises(TypeError, match=\"Slicing a positional slice with .loc\"):\n        # GH#31840 enforce incorrect behavior\n        df.loc[1:3, 1] = 2\n\n\ndef test_loc_datetimelike_mismatched_dtypes():\n    # GH#32650 dont mix and match datetime/timedelta/period dtypes\n\n    df = DataFrame(\n        np.random.randn(5, 3),\n        columns=[\"a\", \"b\", \"c\"],\n        index=date_range(\"2012\", freq=\"H\", periods=5),\n    )\n    # create dataframe with non-unique DatetimeIndex\n    df = df.iloc[[0, 2, 2, 3]].copy()\n\n    dti = df.index\n    tdi = pd.TimedeltaIndex(dti.asi8)  # matching i8 values\n\n    msg = r\"None of \\[TimedeltaIndex.* are in the \\[index\\]\"\n    with pytest.raises(KeyError, match=msg):\n        df.loc[tdi]\n\n    with pytest.raises(KeyError, match=msg):\n        df[\"a\"].loc[tdi]\n\n\ndef test_loc_with_period_index_indexer():\n    # GH#4125\n    idx = pd.period_range(\"2002-01\", \"2003-12\", freq=\"M\")\n    df = DataFrame(np.random.randn(24, 10), index=idx)\n    tm.assert_frame_equal(df, df.loc[idx])\n    tm.assert_frame_equal(df, df.loc[list(idx)])\n    tm.assert_frame_equal(df, df.loc[list(idx)])\n    tm.assert_frame_equal(df.iloc[0:5], df.loc[idx[0:5]])\n    tm.assert_frame_equal(df, df.loc[list(idx)])\n\n\ndef test_loc_setitem_multiindex_timestamp():\n    # GH#13831\n    vals = np.random.randn(8, 6)\n    idx = date_range(\"1/1/2000\", periods=8)\n    cols = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    exp = DataFrame(vals, index=idx, columns=cols)\n    exp.loc[exp.index[1], (\"A\", \"B\")] = np.nan\n    vals[1][0:2] = np.nan\n    res = DataFrame(vals, index=idx, columns=cols)\n    tm.assert_frame_equal(res, exp)\n\n\ndef test_loc_getitem_multiindex_tuple_level():\n    # GH#27591\n    lev1 = [\"a\", \"b\", \"c\"]\n    lev2 = [(0, 1), (1, 0)]\n    lev3 = [0, 1]\n    cols = MultiIndex.from_product([lev1, lev2, lev3], names=[\"x\", \"y\", \"z\"])\n    df = DataFrame(6, index=range(5), columns=cols)\n\n    # the lev2[0] here should be treated as a single label, not as a sequence\n    #  of labels\n    result = df.loc[:, (lev1[0], lev2[0], lev3[0])]\n\n    # TODO: i think this actually should drop levels\n    expected = df.iloc[:, :1]\n    tm.assert_frame_equal(result, expected)\n\n    alt = df.xs((lev1[0], lev2[0], lev3[0]), level=[0, 1, 2], axis=1)\n    tm.assert_frame_equal(alt, expected)\n\n    # same thing on a Series\n    ser = df.iloc[0]\n    expected2 = ser.iloc[:1]\n\n    alt2 = ser.xs((lev1[0], lev2[0], lev3[0]), level=[0, 1, 2], axis=0)\n    tm.assert_series_equal(alt2, expected2)\n\n    result2 = ser.loc[lev1[0], lev2[0], lev3[0]]\n    assert result2 == 6\n\n\ndef test_loc_getitem_nullable_index_with_duplicates():\n    # GH#34497\n    df = DataFrame(\n        data=np.array([[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, np.nan, np.nan]]).T,\n        columns=[\"a\", \"b\", \"c\"],\n        dtype=\"Int64\",\n    )\n    df2 = df.set_index(\"c\")\n    assert df2.index.dtype == \"Int64\"\n\n    res = df2.loc[1]\n    expected = Series([1, 5], index=df2.columns, dtype=\"Int64\", name=1)\n    tm.assert_series_equal(res, expected)\n\n    # pd.NA and duplicates in an object-dtype Index\n    df2.index = df2.index.astype(object)\n    res = df2.loc[1]\n    tm.assert_series_equal(res, expected)\n\n\n@pytest.mark.parametrize(\"value\", [300, np.uint16(300), np.int16(300)])\ndef test_loc_setitem_uint8_upcast(value):\n    # GH#26049\n\n    df = DataFrame([1, 2, 3, 4], columns=[\"col1\"], dtype=\"uint8\")\n    df.loc[2, \"col1\"] = value  # value that can't be held in uint8\n\n    expected = DataFrame([1, 2, 300, 4], columns=[\"col1\"], dtype=\"uint16\")\n    tm.assert_frame_equal(df, expected)\n\n\n@pytest.mark.parametrize(\n    \"fill_val,exp_dtype\",\n    [\n        (Timestamp(\"2022-01-06\"), \"datetime64[ns]\"),\n        (Timestamp(\"2022-01-07\", tz=\"US/Eastern\"), \"datetime64[ns, US/Eastern]\"),\n    ],\n)\ndef test_loc_setitem_using_datetimelike_str_as_index(fill_val, exp_dtype):\n\n    data = [\"2022-01-02\", \"2022-01-03\", \"2022-01-04\", fill_val.date()]\n    index = DatetimeIndex(data, tz=fill_val.tz, dtype=exp_dtype)\n    df = DataFrame([10, 11, 12, 14], columns=[\"a\"], index=index)\n    # adding new row using an unexisting datetime-like str index\n    df.loc[\"2022-01-08\", \"a\"] = 13\n\n    data.append(\"2022-01-08\")\n    expected_index = DatetimeIndex(data, dtype=exp_dtype)\n    tm.assert_index_equal(df.index, expected_index, exact=True)\n\n\ndef test_loc_set_int_dtype():\n    # GH#23326\n    df = DataFrame([list(\"abc\")])\n    df.loc[:, \"col1\"] = 5\n\n    expected = DataFrame({0: [\"a\"], 1: [\"b\"], 2: [\"c\"], \"col1\": [5]})\n    tm.assert_frame_equal(df, expected)\n\n\ndef test_loc_periodindex_3_levels():\n    # GH#24091\n    p_index = PeriodIndex(\n        [\"20181101 1100\", \"20181101 1200\", \"20181102 1300\", \"20181102 1400\"],\n        name=\"datetime\",\n        freq=\"B\",\n    )\n    mi_series = DataFrame(\n        [[\"A\", \"B\", 1.0], [\"A\", \"C\", 2.0], [\"Z\", \"Q\", 3.0], [\"W\", \"F\", 4.0]],\n        index=p_index,\n        columns=[\"ONE\", \"TWO\", \"VALUES\"],\n    )\n    mi_series = mi_series.set_index([\"ONE\", \"TWO\"], append=True)[\"VALUES\"]\n    assert mi_series.loc[(p_index[0], \"A\", \"B\")] == 1.0\n\n\nclass TestLocSeries:\n    @pytest.mark.parametrize(\"val,expected\", [(2**63 - 1, 3), (2**63, 4)])\n    def test_loc_uint64(self, val, expected):\n        # see GH#19399\n        ser = Series({2**63 - 1: 3, 2**63: 4})\n        assert ser.loc[val] == expected\n\n    def test_loc_getitem(self, string_series, datetime_series):\n        inds = string_series.index[[3, 4, 7]]\n        tm.assert_series_equal(string_series.loc[inds], string_series.reindex(inds))\n        tm.assert_series_equal(string_series.iloc[5::2], string_series[5::2])\n\n        # slice with indices\n        d1, d2 = datetime_series.index[[5, 15]]\n        result = datetime_series.loc[d1:d2]\n        expected = datetime_series.truncate(d1, d2)\n        tm.assert_series_equal(result, expected)\n\n        # boolean\n        mask = string_series > string_series.median()\n        tm.assert_series_equal(string_series.loc[mask], string_series[mask])\n\n        # ask for index value\n        assert datetime_series.loc[d1] == datetime_series[d1]\n        assert datetime_series.loc[d2] == datetime_series[d2]\n\n    def test_loc_getitem_not_monotonic(self, datetime_series):\n        d1, d2 = datetime_series.index[[5, 15]]\n\n        ts2 = datetime_series[::2][[1, 2, 0]]\n\n        msg = r\"Timestamp\\('2000-01-10 00:00:00'\\)\"\n        with pytest.raises(KeyError, match=msg):\n            ts2.loc[d1:d2]\n        with pytest.raises(KeyError, match=msg):\n            ts2.loc[d1:d2] = 0\n\n    def test_loc_getitem_setitem_integer_slice_keyerrors(self):\n        ser = Series(np.random.randn(10), index=list(range(0, 20, 2)))\n\n        # this is OK\n        cp = ser.copy()\n        cp.iloc[4:10] = 0\n        assert (cp.iloc[4:10] == 0).all()\n\n        # so is this\n        cp = ser.copy()\n        cp.iloc[3:11] = 0\n        assert (cp.iloc[3:11] == 0).values.all()\n\n        result = ser.iloc[2:6]\n        result2 = ser.loc[3:11]\n        expected = ser.reindex([4, 6, 8, 10])\n\n        tm.assert_series_equal(result, expected)\n        tm.assert_series_equal(result2, expected)\n\n        # non-monotonic, raise KeyError\n        s2 = ser.iloc[list(range(5)) + list(range(9, 4, -1))]\n        with pytest.raises(KeyError, match=r\"^3$\"):\n            s2.loc[3:11]\n        with pytest.raises(KeyError, match=r\"^3$\"):\n            s2.loc[3:11] = 0\n\n    def test_loc_getitem_iterator(self, string_series):\n        idx = iter(string_series.index[:10])\n        result = string_series.loc[idx]\n        tm.assert_series_equal(result, string_series[:10])\n\n    def test_loc_setitem_boolean(self, string_series):\n        mask = string_series > string_series.median()\n\n        result = string_series.copy()\n        result.loc[mask] = 0\n        expected = string_series\n        expected[mask] = 0\n        tm.assert_series_equal(result, expected)\n\n    def test_loc_setitem_corner(self, string_series):\n        inds = list(string_series.index[[5, 8, 12]])\n        string_series.loc[inds] = 5\n        msg = r\"\\['foo'\\] not in index\"\n        with pytest.raises(KeyError, match=msg):\n            string_series.loc[inds + [\"foo\"]] = 5\n\n    def test_basic_setitem_with_labels(self, datetime_series):\n        indices = datetime_series.index[[5, 10, 15]]\n\n        cp = datetime_series.copy()\n        exp = datetime_series.copy()\n        cp[indices] = 0\n        exp.loc[indices] = 0\n        tm.assert_series_equal(cp, exp)\n\n        cp = datetime_series.copy()\n        exp = datetime_series.copy()\n        cp[indices[0] : indices[2]] = 0\n        exp.loc[indices[0] : indices[2]] = 0\n        tm.assert_series_equal(cp, exp)\n\n    def test_loc_setitem_listlike_of_ints(self):\n\n        # integer indexes, be careful\n        ser = Series(np.random.randn(10), index=list(range(0, 20, 2)))\n        inds = [0, 4, 6]\n        arr_inds = np.array([0, 4, 6])\n\n        cp = ser.copy()\n        exp = ser.copy()\n        ser[inds] = 0\n        ser.loc[inds] = 0\n        tm.assert_series_equal(cp, exp)\n\n        cp = ser.copy()\n        exp = ser.copy()\n        ser[arr_inds] = 0\n        ser.loc[arr_inds] = 0\n        tm.assert_series_equal(cp, exp)\n\n        inds_notfound = [0, 4, 5, 6]\n        arr_inds_notfound = np.array([0, 4, 5, 6])\n        msg = r\"\\[5\\] not in index\"\n        with pytest.raises(KeyError, match=msg):\n            ser[inds_notfound] = 0\n        with pytest.raises(Exception, match=msg):\n            ser[arr_inds_notfound] = 0\n\n    def test_loc_setitem_dt64tz_values(self):\n        # GH#12089\n        ser = Series(\n            date_range(\"2011-01-01\", periods=3, tz=\"US/Eastern\"),\n            index=[\"a\", \"b\", \"c\"],\n        )\n        s2 = ser.copy()\n        expected = Timestamp(\"2011-01-03\", tz=\"US/Eastern\")\n        s2.loc[\"a\"] = expected\n        result = s2.loc[\"a\"]\n        assert result == expected\n\n        s2 = ser.copy()\n        s2.iloc[0] = expected\n        result = s2.iloc[0]\n        assert result == expected\n\n        s2 = ser.copy()\n        s2[\"a\"] = expected\n        result = s2[\"a\"]\n        assert result == expected\n\n    @pytest.mark.parametrize(\"array_fn\", [np.array, pd.array, list, tuple])\n    @pytest.mark.parametrize(\"size\", [0, 4, 5, 6])\n    def test_loc_iloc_setitem_with_listlike(self, size, array_fn):\n        # GH37748\n        # testing insertion, in a Series of size N (here 5), of a listlike object\n        # of size  0, N-1, N, N+1\n\n        arr = array_fn([0] * size)\n        expected = Series([arr, 0, 0, 0, 0], index=list(\"abcde\"), dtype=object)\n\n        ser = Series(0, index=list(\"abcde\"), dtype=object)\n        ser.loc[\"a\"] = arr\n        tm.assert_series_equal(ser, expected)\n\n        ser = Series(0, index=list(\"abcde\"), dtype=object)\n        ser.iloc[0] = arr\n        tm.assert_series_equal(ser, expected)\n\n    @pytest.mark.parametrize(\"indexer\", [IndexSlice[\"A\", :], (\"A\", slice(None))])\n    def test_loc_series_getitem_too_many_dimensions(self, indexer):\n        # GH#35349\n        ser = Series(\n            index=MultiIndex.from_tuples([(\"A\", \"0\"), (\"A\", \"1\"), (\"B\", \"0\")]),\n            data=[21, 22, 23],\n        )\n        msg = \"Too many indexers\"\n        with pytest.raises(IndexingError, match=msg):\n            ser.loc[indexer, :]\n\n        with pytest.raises(IndexingError, match=msg):\n            ser.loc[indexer, :] = 1\n\n    def test_loc_setitem(self, string_series):\n        inds = string_series.index[[3, 4, 7]]\n\n        result = string_series.copy()\n        result.loc[inds] = 5\n\n        expected = string_series.copy()\n        expected[[3, 4, 7]] = 5\n        tm.assert_series_equal(result, expected)\n\n        result.iloc[5:10] = 10\n        expected[5:10] = 10\n        tm.assert_series_equal(result, expected)\n\n        # set slice with indices\n        d1, d2 = string_series.index[[5, 15]]\n        result.loc[d1:d2] = 6\n        expected[5:16] = 6  # because it's inclusive\n        tm.assert_series_equal(result, expected)\n\n        # set index value\n        string_series.loc[d1] = 4\n        string_series.loc[d2] = 6\n        assert string_series[d1] == 4\n        assert string_series[d2] == 6\n\n    @pytest.mark.parametrize(\"dtype\", [\"object\", \"string\"])\n    def test_loc_assign_dict_to_row(self, dtype):\n        # GH41044\n        df = DataFrame({\"A\": [\"abc\", \"def\"], \"B\": [\"ghi\", \"jkl\"]}, dtype=dtype)\n        df.loc[0, :] = {\"A\": \"newA\", \"B\": \"newB\"}\n\n        expected = DataFrame({\"A\": [\"newA\", \"def\"], \"B\": [\"newB\", \"jkl\"]}, dtype=dtype)\n\n        tm.assert_frame_equal(df, expected)\n\n    @td.skip_array_manager_invalid_test\n    def test_loc_setitem_dict_timedelta_multiple_set(self):\n        # GH 16309\n        result = DataFrame(columns=[\"time\", \"value\"])\n        result.loc[1] = {\"time\": Timedelta(6, unit=\"s\"), \"value\": \"foo\"}\n        result.loc[1] = {\"time\": Timedelta(6, unit=\"s\"), \"value\": \"foo\"}\n        expected = DataFrame(\n            [[Timedelta(6, unit=\"s\"), \"foo\"]], columns=[\"time\", \"value\"], index=[1]\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_loc_set_multiple_items_in_multiple_new_columns(self):\n        # GH 25594\n        df = DataFrame(index=[1, 2], columns=[\"a\"])\n        df.loc[1, [\"b\", \"c\"]] = [6, 7]\n\n        expected = DataFrame(\n            {\n                \"a\": Series([np.nan, np.nan], dtype=\"object\"),\n                \"b\": [6, np.nan],\n                \"c\": [7, np.nan],\n            },\n            index=[1, 2],\n        )\n\n        tm.assert_frame_equal(df, expected)\n\n    def test_getitem_loc_str_periodindex(self):\n        # GH#33964\n        index = pd.period_range(start=\"2000\", periods=20, freq=\"B\")\n        series = Series(range(20), index=index)\n        assert series.loc[\"2000-01-14\"] == 9\n"
    },
    {
      "filename": "pandas/tests/io/excel/test_readers.py",
      "content": "from datetime import (\n    datetime,\n    time,\n)\nfrom functools import partial\nimport os\nfrom pathlib import Path\nfrom urllib.error import URLError\nfrom zipfile import BadZipFile\n\nimport numpy as np\nimport pytest\n\nimport pandas.util._test_decorators as td\n\nimport pandas as pd\nfrom pandas import (\n    DataFrame,\n    Index,\n    MultiIndex,\n    Series,\n)\nimport pandas._testing as tm\nfrom pandas.core.arrays import (\n    ArrowStringArray,\n    StringArray,\n)\n\nread_ext_params = [\".xls\", \".xlsx\", \".xlsm\", \".xlsb\", \".ods\"]\nengine_params = [\n    # Add any engines to test here\n    # When defusedxml is installed it triggers deprecation warnings for\n    # xlrd and openpyxl, so catch those here\n    pytest.param(\n        \"xlrd\",\n        marks=[\n            td.skip_if_no(\"xlrd\"),\n        ],\n    ),\n    pytest.param(\n        \"openpyxl\",\n        marks=[\n            td.skip_if_no(\"openpyxl\"),\n            pytest.mark.filterwarnings(\"ignore:.*html argument\"),\n        ],\n    ),\n    pytest.param(\n        None,\n        marks=[\n            td.skip_if_no(\"xlrd\"),\n        ],\n    ),\n    pytest.param(\"pyxlsb\", marks=td.skip_if_no(\"pyxlsb\")),\n    pytest.param(\"odf\", marks=td.skip_if_no(\"odf\")),\n]\n\n\ndef _is_valid_engine_ext_pair(engine, read_ext: str) -> bool:\n    \"\"\"\n    Filter out invalid (engine, ext) pairs instead of skipping, as that\n    produces 500+ pytest.skips.\n    \"\"\"\n    engine = engine.values[0]\n    if engine == \"openpyxl\" and read_ext == \".xls\":\n        return False\n    if engine == \"odf\" and read_ext != \".ods\":\n        return False\n    if read_ext == \".ods\" and engine != \"odf\":\n        return False\n    if engine == \"pyxlsb\" and read_ext != \".xlsb\":\n        return False\n    if read_ext == \".xlsb\" and engine != \"pyxlsb\":\n        return False\n    if engine == \"xlrd\" and read_ext != \".xls\":\n        return False\n    return True\n\n\ndef _transfer_marks(engine, read_ext):\n    \"\"\"\n    engine gives us a pytest.param object with some marks, read_ext is just\n    a string.  We need to generate a new pytest.param inheriting the marks.\n    \"\"\"\n    values = engine.values + (read_ext,)\n    new_param = pytest.param(values, marks=engine.marks)\n    return new_param\n\n\n@pytest.fixture(\n    params=[\n        _transfer_marks(eng, ext)\n        for eng in engine_params\n        for ext in read_ext_params\n        if _is_valid_engine_ext_pair(eng, ext)\n    ],\n    ids=str,\n)\ndef engine_and_read_ext(request):\n    \"\"\"\n    Fixture for Excel reader engine and read_ext, only including valid pairs.\n    \"\"\"\n    return request.param\n\n\n@pytest.fixture\ndef engine(engine_and_read_ext):\n    engine, read_ext = engine_and_read_ext\n    return engine\n\n\n@pytest.fixture\ndef read_ext(engine_and_read_ext):\n    engine, read_ext = engine_and_read_ext\n    return read_ext\n\n\nclass TestReaders:\n    @pytest.fixture(autouse=True)\n    def cd_and_set_engine(self, engine, datapath, monkeypatch):\n        \"\"\"\n        Change directory and set engine for read_excel calls.\n        \"\"\"\n        func = partial(pd.read_excel, engine=engine)\n        monkeypatch.chdir(datapath(\"io\", \"data\", \"excel\"))\n        monkeypatch.setattr(pd, \"read_excel\", func)\n\n    def test_engine_used(self, read_ext, engine, monkeypatch):\n        # GH 38884\n        def parser(self, *args, **kwargs):\n            return self.engine\n\n        monkeypatch.setattr(pd.ExcelFile, \"parse\", parser)\n\n        expected_defaults = {\n            \"xlsx\": \"openpyxl\",\n            \"xlsm\": \"openpyxl\",\n            \"xlsb\": \"pyxlsb\",\n            \"xls\": \"xlrd\",\n            \"ods\": \"odf\",\n        }\n\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            result = pd.read_excel(f)\n\n        if engine is not None:\n            expected = engine\n        else:\n            expected = expected_defaults[read_ext[1:]]\n        assert result == expected\n\n    def test_usecols_int(self, read_ext):\n        # usecols as int\n        msg = \"Passing an integer for `usecols`\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=3\n            )\n\n        # usecols as int\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext,\n                sheet_name=\"Sheet2\",\n                skiprows=[1],\n                index_col=0,\n                usecols=3,\n            )\n\n    def test_usecols_list(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        df_ref = df_ref.reindex(columns=[\"B\", \"C\"])\n        df1 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=[0, 2, 3]\n        )\n        df2 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=[0, 2, 3],\n        )\n\n        # TODO add index to xls file)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n    def test_usecols_str(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        df1 = df_ref.reindex(columns=[\"A\", \"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A:D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A:D\",\n        )\n\n        # TODO add index to xls, read xls ignores index name ?\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n        df1 = df_ref.reindex(columns=[\"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,C,D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A,C,D\",\n        )\n        # TODO add index to xls file\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n        df1 = df_ref.reindex(columns=[\"B\", \"C\"])\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,C:D\"\n        )\n        df3 = pd.read_excel(\n            \"test1\" + read_ext,\n            sheet_name=\"Sheet2\",\n            skiprows=[1],\n            index_col=0,\n            usecols=\"A,C:D\",\n        )\n        tm.assert_frame_equal(df2, df1, check_names=False)\n        tm.assert_frame_equal(df3, df1, check_names=False)\n\n    @pytest.mark.parametrize(\n        \"usecols\", [[0, 1, 3], [0, 3, 1], [1, 0, 3], [1, 3, 0], [3, 0, 1], [3, 1, 0]]\n    )\n    def test_usecols_diff_positional_int_columns_order(\n        self, request, read_ext, usecols, df_ref\n    ):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        expected = df_ref[[\"A\", \"C\"]]\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=usecols\n        )\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    @pytest.mark.parametrize(\"usecols\", [[\"B\", \"D\"], [\"D\", \"B\"]])\n    def test_usecols_diff_positional_str_columns_order(self, read_ext, usecols, df_ref):\n        expected = df_ref[[\"B\", \"D\"]]\n        expected.index = range(len(expected))\n\n        result = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", usecols=usecols)\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_read_excel_without_slicing(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        expected = df_ref\n        result = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0)\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_usecols_excel_range_str(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        expected = df_ref[[\"C\", \"D\"]]\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, usecols=\"A,D:E\"\n        )\n        tm.assert_frame_equal(result, expected, check_names=False)\n\n    def test_usecols_excel_range_str_invalid(self, read_ext):\n        msg = \"Invalid column name: E1\"\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", usecols=\"D:E1\")\n\n    def test_index_col_label_error(self, read_ext):\n        msg = \"list indices must be integers.*, not str\"\n\n        with pytest.raises(TypeError, match=msg):\n            pd.read_excel(\n                \"test1\" + read_ext,\n                sheet_name=\"Sheet1\",\n                index_col=[\"A\"],\n                usecols=[\"A\", \"C\"],\n            )\n\n    def test_index_col_empty(self, read_ext):\n        # see gh-9208\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet3\", index_col=[\"A\", \"B\", \"C\"]\n        )\n        expected = DataFrame(\n            columns=[\"D\", \"E\", \"F\"],\n            index=MultiIndex(levels=[[]] * 3, codes=[[]] * 3, names=[\"A\", \"B\", \"C\"]),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"index_col\", [None, 2])\n    def test_index_col_with_unnamed(self, read_ext, index_col):\n        # see gh-18792\n        result = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet4\", index_col=index_col\n        )\n        expected = DataFrame(\n            [[\"i1\", \"a\", \"x\"], [\"i2\", \"b\", \"y\"]], columns=[\"Unnamed: 0\", \"col1\", \"col2\"]\n        )\n        if index_col:\n            expected = expected.set_index(expected.columns[index_col])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_usecols_pass_non_existent_column(self, read_ext):\n        msg = (\n            \"Usecols do not match columns, \"\n            \"columns expected but not found: \" + r\"\\['E'\\]\"\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, usecols=[\"E\"])\n\n    def test_usecols_wrong_type(self, read_ext):\n        msg = (\n            \"'usecols' must either be list-like of \"\n            \"all strings, all unicode, all integers or a callable.\"\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, usecols=[\"E1\", 0])\n\n    def test_excel_stop_iterator(self, read_ext):\n\n        parsed = pd.read_excel(\"test2\" + read_ext, sheet_name=\"Sheet1\")\n        expected = DataFrame([[\"aaaa\", \"bbbbb\"]], columns=[\"Test\", \"Test1\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_cell_error_na(self, request, read_ext):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        parsed = pd.read_excel(\"test3\" + read_ext, sheet_name=\"Sheet1\")\n        expected = DataFrame([[np.nan]], columns=[\"Test\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_table(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        df1 = pd.read_excel(\"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0)\n        df2 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet2\", skiprows=[1], index_col=0\n        )\n        # TODO add index to file\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        df3 = pd.read_excel(\n            \"test1\" + read_ext, sheet_name=\"Sheet1\", index_col=0, skipfooter=1\n        )\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n    def test_reader_special_dtypes(self, request, read_ext):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        expected = DataFrame.from_dict(\n            {\n                \"IntCol\": [1, 2, -3, 4, 0],\n                \"FloatCol\": [1.25, 2.25, 1.83, 1.92, 0.0000000005],\n                \"BoolCol\": [True, False, True, True, False],\n                \"StrCol\": [1, 2, 3, 4, 5],\n                \"Str2Col\": [\"a\", 3, \"c\", \"d\", \"e\"],\n                \"DateCol\": [\n                    datetime(2013, 10, 30),\n                    datetime(2013, 10, 31),\n                    datetime(1905, 1, 1),\n                    datetime(2013, 12, 14),\n                    datetime(2015, 3, 14),\n                ],\n            },\n        )\n        basename = \"test_types\"\n\n        # should read in correctly and infer types\n        actual = pd.read_excel(basename + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n        # if not coercing number, then int comes in as float\n        float_expected = expected.copy()\n        float_expected.loc[float_expected.index[1], \"Str2Col\"] = 3.0\n        actual = pd.read_excel(basename + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, float_expected)\n\n        # check setting Index (assuming xls and xlsx are the same here)\n        for icol, name in enumerate(expected.columns):\n            actual = pd.read_excel(\n                basename + read_ext, sheet_name=\"Sheet1\", index_col=icol\n            )\n            exp = expected.set_index(name)\n            tm.assert_frame_equal(actual, exp)\n\n        expected[\"StrCol\"] = expected[\"StrCol\"].apply(str)\n        actual = pd.read_excel(\n            basename + read_ext, sheet_name=\"Sheet1\", converters={\"StrCol\": str}\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    # GH8212 - support for converters and missing values\n    def test_reader_converters(self, read_ext):\n\n        basename = \"test_converters\"\n\n        expected = DataFrame.from_dict(\n            {\n                \"IntCol\": [1, 2, -3, -1000, 0],\n                \"FloatCol\": [12.5, np.nan, 18.3, 19.2, 0.000000005],\n                \"BoolCol\": [\"Found\", \"Found\", \"Found\", \"Not found\", \"Found\"],\n                \"StrCol\": [\"1\", np.nan, \"3\", \"4\", \"5\"],\n            }\n        )\n\n        converters = {\n            \"IntCol\": lambda x: int(x) if x != \"\" else -1000,\n            \"FloatCol\": lambda x: 10 * x if x else np.nan,\n            2: lambda x: \"Found\" if x != \"\" else \"Not found\",\n            3: lambda x: str(x) if x else \"\",\n        }\n\n        # should read in correctly and set types of single cells (not array\n        # dtypes)\n        actual = pd.read_excel(\n            basename + read_ext, sheet_name=\"Sheet1\", converters=converters\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_reader_dtype(self, read_ext):\n        # GH 8212\n        basename = \"testdtype\"\n        actual = pd.read_excel(basename + read_ext)\n\n        expected = DataFrame(\n            {\n                \"a\": [1, 2, 3, 4],\n                \"b\": [2.5, 3.5, 4.5, 5.5],\n                \"c\": [1, 2, 3, 4],\n                \"d\": [1.0, 2.0, np.nan, 4.0],\n            }\n        ).reindex(columns=[\"a\", \"b\", \"c\", \"d\"])\n\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            basename + read_ext, dtype={\"a\": \"float64\", \"b\": \"float32\", \"c\": str}\n        )\n\n        expected[\"a\"] = expected[\"a\"].astype(\"float64\")\n        expected[\"b\"] = expected[\"b\"].astype(\"float32\")\n        expected[\"c\"] = [\"001\", \"002\", \"003\", \"004\"]\n        tm.assert_frame_equal(actual, expected)\n\n        msg = \"Unable to convert column d to type int64\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(basename + read_ext, dtype={\"d\": \"int64\"})\n\n    @pytest.mark.parametrize(\n        \"dtype,expected\",\n        [\n            (\n                None,\n                DataFrame(\n                    {\n                        \"a\": [1, 2, 3, 4],\n                        \"b\": [2.5, 3.5, 4.5, 5.5],\n                        \"c\": [1, 2, 3, 4],\n                        \"d\": [1.0, 2.0, np.nan, 4.0],\n                    }\n                ),\n            ),\n            (\n                {\"a\": \"float64\", \"b\": \"float32\", \"c\": str, \"d\": str},\n                DataFrame(\n                    {\n                        \"a\": Series([1, 2, 3, 4], dtype=\"float64\"),\n                        \"b\": Series([2.5, 3.5, 4.5, 5.5], dtype=\"float32\"),\n                        \"c\": [\"001\", \"002\", \"003\", \"004\"],\n                        \"d\": [\"1\", \"2\", np.nan, \"4\"],\n                    }\n                ),\n            ),\n        ],\n    )\n    def test_reader_dtype_str(self, read_ext, dtype, expected):\n        # see gh-20377\n        basename = \"testdtype\"\n\n        actual = pd.read_excel(basename + read_ext, dtype=dtype)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_use_nullable_dtypes(self, read_ext):\n        # GH#36712\n        if read_ext in (\".xlsb\", \".xls\"):\n            pytest.skip(f\"No engine for filetype: '{read_ext}'\")\n\n        df = DataFrame(\n            {\n                \"a\": Series([1, 3], dtype=\"Int64\"),\n                \"b\": Series([2.5, 4.5], dtype=\"Float64\"),\n                \"c\": Series([True, False], dtype=\"boolean\"),\n                \"d\": Series([\"a\", \"b\"], dtype=\"string\"),\n                \"e\": Series([pd.NA, 6], dtype=\"Int64\"),\n                \"f\": Series([pd.NA, 7.5], dtype=\"Float64\"),\n                \"g\": Series([pd.NA, True], dtype=\"boolean\"),\n                \"h\": Series([pd.NA, \"a\"], dtype=\"string\"),\n                \"i\": Series([pd.Timestamp(\"2019-12-31\")] * 2),\n                \"j\": Series([pd.NA, pd.NA], dtype=\"Int64\"),\n            }\n        )\n        with tm.ensure_clean(read_ext) as file_path:\n            df.to_excel(file_path, \"test\", index=False)\n            result = pd.read_excel(\n                file_path, sheet_name=\"test\", use_nullable_dtypes=True\n            )\n        tm.assert_frame_equal(result, df)\n\n    def test_use_nullabla_dtypes_and_dtype(self, read_ext):\n        # GH#36712\n        if read_ext in (\".xlsb\", \".xls\"):\n            pytest.skip(f\"No engine for filetype: '{read_ext}'\")\n\n        df = DataFrame({\"a\": [np.nan, 1.0], \"b\": [2.5, np.nan]})\n        with tm.ensure_clean(read_ext) as file_path:\n            df.to_excel(file_path, \"test\", index=False)\n            result = pd.read_excel(\n                file_path, sheet_name=\"test\", use_nullable_dtypes=True, dtype=\"float64\"\n            )\n        tm.assert_frame_equal(result, df)\n\n    @td.skip_if_no(\"pyarrow\")\n    @pytest.mark.parametrize(\"storage\", [\"pyarrow\", \"python\"])\n    def test_use_nullable_dtypes_string(self, read_ext, storage):\n        # GH#36712\n        if read_ext in (\".xlsb\", \".xls\"):\n            pytest.skip(f\"No engine for filetype: '{read_ext}'\")\n\n        import pyarrow as pa\n\n        with pd.option_context(\"mode.string_storage\", storage):\n\n            df = DataFrame(\n                {\n                    \"a\": np.array([\"a\", \"b\"], dtype=np.object_),\n                    \"b\": np.array([\"x\", pd.NA], dtype=np.object_),\n                }\n            )\n            with tm.ensure_clean(read_ext) as file_path:\n                df.to_excel(file_path, \"test\", index=False)\n                result = pd.read_excel(\n                    file_path, sheet_name=\"test\", use_nullable_dtypes=True\n                )\n\n            if storage == \"python\":\n                expected = DataFrame(\n                    {\n                        \"a\": StringArray(np.array([\"a\", \"b\"], dtype=np.object_)),\n                        \"b\": StringArray(np.array([\"x\", pd.NA], dtype=np.object_)),\n                    }\n                )\n            else:\n                expected = DataFrame(\n                    {\n                        \"a\": ArrowStringArray(pa.array([\"a\", \"b\"])),\n                        \"b\": ArrowStringArray(pa.array([\"x\", None])),\n                    }\n                )\n            tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"dtypes, exp_value\", [({}, \"1\"), ({\"a.1\": \"int64\"}, 1)])\n    def test_dtype_mangle_dup_cols(self, read_ext, dtypes, exp_value):\n        # GH#35211\n        basename = \"df_mangle_dup_col_dtypes\"\n        dtype_dict = {\"a\": str, **dtypes}\n        dtype_dict_copy = dtype_dict.copy()\n        # GH#42462\n        result = pd.read_excel(basename + read_ext, dtype=dtype_dict)\n        expected = DataFrame({\"a\": [\"1\"], \"a.1\": [exp_value]})\n        assert dtype_dict == dtype_dict_copy, \"dtype dict changed\"\n        tm.assert_frame_equal(result, expected)\n\n    def test_reader_spaces(self, read_ext):\n        # see gh-32207\n        basename = \"test_spaces\"\n\n        actual = pd.read_excel(basename + read_ext)\n        expected = DataFrame(\n            {\n                \"testcol\": [\n                    \"this is great\",\n                    \"4    spaces\",\n                    \"1 trailing \",\n                    \" 1 leading\",\n                    \"2  spaces  multiple  times\",\n                ]\n            }\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    # gh-36122, gh-35802\n    @pytest.mark.parametrize(\n        \"basename,expected\",\n        [\n            (\"gh-35802\", DataFrame({\"COLUMN\": [\"Test (1)\"]})),\n            (\"gh-36122\", DataFrame(columns=[\"got 2nd sa\"])),\n        ],\n    )\n    def test_read_excel_ods_nested_xml(self, engine, read_ext, basename, expected):\n        # see gh-35802\n        if engine != \"odf\":\n            pytest.skip(f\"Skipped for engine: {engine}\")\n\n        actual = pd.read_excel(basename + read_ext)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_reading_all_sheets(self, read_ext):\n        # Test reading all sheet names by setting sheet_name to None,\n        # Ensure a dict is returned.\n        # See PR #9450\n        basename = \"test_multisheet\"\n        dfs = pd.read_excel(basename + read_ext, sheet_name=None)\n        # ensure this is not alphabetical to test order preservation\n        expected_keys = [\"Charlie\", \"Alpha\", \"Beta\"]\n        tm.assert_contains_all(expected_keys, dfs.keys())\n        # Issue 9930\n        # Ensure sheet order is preserved\n        assert expected_keys == list(dfs.keys())\n\n    def test_reading_multiple_specific_sheets(self, read_ext):\n        # Test reading specific sheet names by specifying a mixed list\n        # of integers and strings, and confirm that duplicated sheet\n        # references (positions/names) are removed properly.\n        # Ensure a dict is returned\n        # See PR #9450\n        basename = \"test_multisheet\"\n        # Explicitly request duplicates. Only the set should be returned.\n        expected_keys = [2, \"Charlie\", \"Charlie\"]\n        dfs = pd.read_excel(basename + read_ext, sheet_name=expected_keys)\n        expected_keys = list(set(expected_keys))\n        tm.assert_contains_all(expected_keys, dfs.keys())\n        assert len(expected_keys) == len(dfs.keys())\n\n    def test_reading_all_sheets_with_blank(self, read_ext):\n        # Test reading all sheet names by setting sheet_name to None,\n        # In the case where some sheets are blank.\n        # Issue #11711\n        basename = \"blank_with_header\"\n        dfs = pd.read_excel(basename + read_ext, sheet_name=None)\n        expected_keys = [\"Sheet1\", \"Sheet2\", \"Sheet3\"]\n        tm.assert_contains_all(expected_keys, dfs.keys())\n\n    # GH6403\n    def test_read_excel_blank(self, read_ext):\n        actual = pd.read_excel(\"blank\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, DataFrame())\n\n    def test_read_excel_blank_with_header(self, read_ext):\n        expected = DataFrame(columns=[\"col_1\", \"col_2\"])\n        actual = pd.read_excel(\"blank_with_header\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n    def test_exception_message_includes_sheet_name(self, read_ext):\n        # GH 48706\n        with pytest.raises(ValueError, match=r\" \\(sheet: Sheet1\\)$\"):\n            pd.read_excel(\"blank_with_header\" + read_ext, header=[1], sheet_name=None)\n        with pytest.raises(ZeroDivisionError, match=r\" \\(sheet: Sheet1\\)$\"):\n            pd.read_excel(\"test1\" + read_ext, usecols=lambda x: 1 / 0, sheet_name=None)\n\n    @pytest.mark.filterwarnings(\"ignore:Cell A4 is marked:UserWarning:openpyxl\")\n    def test_date_conversion_overflow(self, request, engine, read_ext):\n        # GH 10001 : pandas.ExcelFile ignore parse_dates=False\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        expected = DataFrame(\n            [\n                [pd.Timestamp(\"2016-03-12\"), \"Marc Johnson\"],\n                [pd.Timestamp(\"2016-03-16\"), \"Jack Black\"],\n                [1e20, \"Timothy Brown\"],\n            ],\n            columns=[\"DateColWithBigInt\", \"StringCol\"],\n        )\n\n        if engine == \"openpyxl\":\n            request.node.add_marker(\n                pytest.mark.xfail(reason=\"Maybe not supported by openpyxl\")\n            )\n\n        if engine is None and read_ext in (\".xlsx\", \".xlsm\"):\n            # GH 35029\n            request.node.add_marker(\n                pytest.mark.xfail(reason=\"Defaults to openpyxl, maybe not supported\")\n            )\n\n        result = pd.read_excel(\"testdateoverflow\" + read_ext)\n        tm.assert_frame_equal(result, expected)\n\n    def test_sheet_name(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n        filename = \"test1\"\n        sheet_name = \"Sheet1\"\n\n        df1 = pd.read_excel(\n            filename + read_ext, sheet_name=sheet_name, index_col=0\n        )  # doc\n        df2 = pd.read_excel(filename + read_ext, index_col=0, sheet_name=sheet_name)\n\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n    def test_excel_read_buffer(self, read_ext):\n\n        pth = \"test1\" + read_ext\n        expected = pd.read_excel(pth, sheet_name=\"Sheet1\", index_col=0)\n        with open(pth, \"rb\") as f:\n            actual = pd.read_excel(f, sheet_name=\"Sheet1\", index_col=0)\n            tm.assert_frame_equal(expected, actual)\n\n    def test_bad_engine_raises(self):\n        bad_engine = \"foo\"\n        with pytest.raises(ValueError, match=\"Unknown engine: foo\"):\n            pd.read_excel(\"\", engine=bad_engine)\n\n    @pytest.mark.parametrize(\n        \"sheet_name\",\n        [3, [0, 3], [3, 0], \"Sheet4\", [\"Sheet1\", \"Sheet4\"], [\"Sheet4\", \"Sheet1\"]],\n    )\n    def test_bad_sheetname_raises(self, read_ext, sheet_name):\n        # GH 39250\n        msg = \"Worksheet index 3 is invalid|Worksheet named 'Sheet4' not found\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"blank\" + read_ext, sheet_name=sheet_name)\n\n    def test_missing_file_raises(self, read_ext):\n        bad_file = f\"foo{read_ext}\"\n        # CI tests with other languages, translates to \"No such file or directory\"\n        match = r\"(No such file or directory|没有那个文件或目录|File o directory non esistente)\"\n        with pytest.raises(FileNotFoundError, match=match):\n            pd.read_excel(bad_file)\n\n    def test_corrupt_bytes_raises(self, engine):\n        bad_stream = b\"foo\"\n        if engine is None:\n            error = ValueError\n            msg = (\n                \"Excel file format cannot be determined, you must \"\n                \"specify an engine manually.\"\n            )\n        elif engine == \"xlrd\":\n            from xlrd import XLRDError\n\n            error = XLRDError\n            msg = (\n                \"Unsupported format, or corrupt file: Expected BOF \"\n                \"record; found b'foo'\"\n            )\n        else:\n            error = BadZipFile\n            msg = \"File is not a zip file\"\n        with pytest.raises(error, match=msg):\n            pd.read_excel(bad_stream)\n\n    @pytest.mark.network\n    @tm.network(\n        url=(\n            \"https://raw.githubusercontent.com/pandas-dev/pandas/main/\"\n            \"pandas/tests/io/data/excel/test1.xlsx\"\n        ),\n        check_before_test=True,\n    )\n    def test_read_from_http_url(self, read_ext):\n        url = (\n            \"https://raw.githubusercontent.com/pandas-dev/pandas/main/\"\n            \"pandas/tests/io/data/excel/test1\" + read_ext\n        )\n        url_table = pd.read_excel(url)\n        local_table = pd.read_excel(\"test1\" + read_ext)\n        tm.assert_frame_equal(url_table, local_table)\n\n    @td.skip_if_not_us_locale\n    @pytest.mark.single_cpu\n    def test_read_from_s3_url(self, read_ext, s3_resource, s3so):\n        # Bucket \"pandas-test\" created in tests/io/conftest.py\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            s3_resource.Bucket(\"pandas-test\").put_object(Key=\"test1\" + read_ext, Body=f)\n\n        url = \"s3://pandas-test/test1\" + read_ext\n\n        url_table = pd.read_excel(url, storage_options=s3so)\n        local_table = pd.read_excel(\"test1\" + read_ext)\n        tm.assert_frame_equal(url_table, local_table)\n\n    @pytest.mark.single_cpu\n    def test_read_from_s3_object(self, read_ext, s3_resource, s3so):\n        # GH 38788\n        # Bucket \"pandas-test\" created in tests/io/conftest.py\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            s3_resource.Bucket(\"pandas-test\").put_object(Key=\"test1\" + read_ext, Body=f)\n\n        import s3fs\n\n        s3 = s3fs.S3FileSystem(**s3so)\n\n        with s3.open(\"s3://pandas-test/test1\" + read_ext) as f:\n            url_table = pd.read_excel(f)\n\n        local_table = pd.read_excel(\"test1\" + read_ext)\n        tm.assert_frame_equal(url_table, local_table)\n\n    @pytest.mark.slow\n    def test_read_from_file_url(self, read_ext, datapath):\n\n        # FILE\n        localtable = os.path.join(datapath(\"io\", \"data\", \"excel\"), \"test1\" + read_ext)\n        local_table = pd.read_excel(localtable)\n\n        try:\n            url_table = pd.read_excel(\"file://localhost/\" + localtable)\n        except URLError:\n            # fails on some systems\n            import platform\n\n            platform_info = \" \".join(platform.uname()).strip()\n            pytest.skip(f\"failing on {platform_info}\")\n\n        tm.assert_frame_equal(url_table, local_table)\n\n    def test_read_from_pathlib_path(self, read_ext):\n        # GH12655\n        str_path = \"test1\" + read_ext\n        expected = pd.read_excel(str_path, sheet_name=\"Sheet1\", index_col=0)\n\n        path_obj = Path(\"test1\" + read_ext)\n        actual = pd.read_excel(path_obj, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    @td.skip_if_no(\"py.path\")\n    @td.check_file_leaks\n    def test_read_from_py_localpath(self, read_ext):\n\n        # GH12655\n        from py.path import local as LocalPath\n\n        str_path = os.path.join(\"test1\" + read_ext)\n        expected = pd.read_excel(str_path, sheet_name=\"Sheet1\", index_col=0)\n\n        path_obj = LocalPath().join(\"test1\" + read_ext)\n        actual = pd.read_excel(path_obj, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    @td.check_file_leaks\n    def test_close_from_py_localpath(self, read_ext):\n\n        # GH31467\n        str_path = os.path.join(\"test1\" + read_ext)\n        with open(str_path, \"rb\") as f:\n            x = pd.read_excel(f, sheet_name=\"Sheet1\", index_col=0)\n            del x\n            # should not throw an exception because the passed file was closed\n            f.read()\n\n    def test_reader_seconds(self, request, engine, read_ext):\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        # Test reading times with and without milliseconds. GH5945.\n        expected = DataFrame.from_dict(\n            {\n                \"Time\": [\n                    time(1, 2, 3),\n                    time(2, 45, 56, 100000),\n                    time(4, 29, 49, 200000),\n                    time(6, 13, 42, 300000),\n                    time(7, 57, 35, 400000),\n                    time(9, 41, 28, 500000),\n                    time(11, 25, 21, 600000),\n                    time(13, 9, 14, 700000),\n                    time(14, 53, 7, 800000),\n                    time(16, 37, 0, 900000),\n                    time(18, 20, 54),\n                ]\n            }\n        )\n\n        actual = pd.read_excel(\"times_1900\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\"times_1904\" + read_ext, sheet_name=\"Sheet1\")\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_multiindex(self, request, read_ext):\n        # see gh-4679\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        mi = MultiIndex.from_product([[\"foo\", \"bar\"], [\"a\", \"b\"]])\n        mi_file = \"testmultiindex\" + read_ext\n\n        # \"mi_column\" sheet\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=mi,\n        )\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"mi_column\", header=[0, 1], index_col=0\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"mi_index\" sheet\n        expected.index = mi\n        expected.columns = [\"a\", \"b\", \"c\", \"d\"]\n\n        actual = pd.read_excel(mi_file, sheet_name=\"mi_index\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n        # \"both\" sheet\n        expected.columns = mi\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"both\", index_col=[0, 1], header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n        # \"mi_index_name\" sheet\n        expected.columns = [\"a\", \"b\", \"c\", \"d\"]\n        expected.index = mi.set_names([\"ilvl1\", \"ilvl2\"])\n\n        actual = pd.read_excel(mi_file, sheet_name=\"mi_index_name\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected)\n\n        # \"mi_column_name\" sheet\n        expected.index = list(range(4))\n        expected.columns = mi.set_names([\"c1\", \"c2\"])\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"mi_column_name\", header=[0, 1], index_col=0\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # see gh-11317\n        # \"name_with_int\" sheet\n        expected.columns = mi.set_levels([1, 2], level=1).set_names([\"c1\", \"c2\"])\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"name_with_int\", index_col=0, header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"both_name\" sheet\n        expected.columns = mi.set_names([\"c1\", \"c2\"])\n        expected.index = mi.set_names([\"ilvl1\", \"ilvl2\"])\n\n        actual = pd.read_excel(\n            mi_file, sheet_name=\"both_name\", index_col=[0, 1], header=[0, 1]\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # \"both_skiprows\" sheet\n        actual = pd.read_excel(\n            mi_file,\n            sheet_name=\"both_name_skiprows\",\n            index_col=[0, 1],\n            header=[0, 1],\n            skiprows=2,\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    @pytest.mark.parametrize(\n        \"sheet_name,idx_lvl2\",\n        [\n            (\"both_name_blank_after_mi_name\", [np.nan, \"b\", \"a\", \"b\"]),\n            (\"both_name_multiple_blanks\", [np.nan] * 4),\n        ],\n    )\n    def test_read_excel_multiindex_blank_after_name(\n        self, request, read_ext, sheet_name, idx_lvl2\n    ):\n        # GH34673\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb (GH4679\"\n                )\n            )\n\n        mi_file = \"testmultiindex\" + read_ext\n        mi = MultiIndex.from_product([[\"foo\", \"bar\"], [\"a\", \"b\"]], names=[\"c1\", \"c2\"])\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=mi,\n            index=MultiIndex.from_arrays(\n                ([\"foo\", \"foo\", \"bar\", \"bar\"], idx_lvl2),\n                names=[\"ilvl1\", \"ilvl2\"],\n            ),\n        )\n        result = pd.read_excel(\n            mi_file,\n            sheet_name=sheet_name,\n            index_col=[0, 1],\n            header=[0, 1],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_read_excel_multiindex_header_only(self, read_ext):\n        # see gh-11733.\n        #\n        # Don't try to parse a header name if there isn't one.\n        mi_file = \"testmultiindex\" + read_ext\n        result = pd.read_excel(mi_file, sheet_name=\"index_col_none\", header=[0, 1])\n\n        exp_columns = MultiIndex.from_product([(\"A\", \"B\"), (\"key\", \"val\")])\n        expected = DataFrame([[1, 2, 3, 4]] * 2, columns=exp_columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_excel_old_index_format(self, read_ext):\n        # see gh-4679\n        filename = \"test_index_name_pre17\" + read_ext\n\n        # We detect headers to determine if index names exist, so\n        # that \"index\" name in the \"names\" version of the data will\n        # now be interpreted as rows that include null data.\n        data = np.array(\n            [\n                [None, None, None, None, None],\n                [\"R0C0\", \"R0C1\", \"R0C2\", \"R0C3\", \"R0C4\"],\n                [\"R1C0\", \"R1C1\", \"R1C2\", \"R1C3\", \"R1C4\"],\n                [\"R2C0\", \"R2C1\", \"R2C2\", \"R2C3\", \"R2C4\"],\n                [\"R3C0\", \"R3C1\", \"R3C2\", \"R3C3\", \"R3C4\"],\n                [\"R4C0\", \"R4C1\", \"R4C2\", \"R4C3\", \"R4C4\"],\n            ]\n        )\n        columns = [\"C_l0_g0\", \"C_l0_g1\", \"C_l0_g2\", \"C_l0_g3\", \"C_l0_g4\"]\n        mi = MultiIndex(\n            levels=[\n                [\"R0\", \"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"],\n                [\"R1\", \"R_l1_g0\", \"R_l1_g1\", \"R_l1_g2\", \"R_l1_g3\", \"R_l1_g4\"],\n            ],\n            codes=[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]],\n            names=[None, None],\n        )\n        si = Index(\n            [\"R0\", \"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"], name=None\n        )\n\n        expected = DataFrame(data, index=si, columns=columns)\n\n        actual = pd.read_excel(filename, sheet_name=\"single_names\", index_col=0)\n        tm.assert_frame_equal(actual, expected)\n\n        expected.index = mi\n\n        actual = pd.read_excel(filename, sheet_name=\"multi_names\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected)\n\n        # The analogous versions of the \"names\" version data\n        # where there are explicitly no names for the indices.\n        data = np.array(\n            [\n                [\"R0C0\", \"R0C1\", \"R0C2\", \"R0C3\", \"R0C4\"],\n                [\"R1C0\", \"R1C1\", \"R1C2\", \"R1C3\", \"R1C4\"],\n                [\"R2C0\", \"R2C1\", \"R2C2\", \"R2C3\", \"R2C4\"],\n                [\"R3C0\", \"R3C1\", \"R3C2\", \"R3C3\", \"R3C4\"],\n                [\"R4C0\", \"R4C1\", \"R4C2\", \"R4C3\", \"R4C4\"],\n            ]\n        )\n        columns = [\"C_l0_g0\", \"C_l0_g1\", \"C_l0_g2\", \"C_l0_g3\", \"C_l0_g4\"]\n        mi = MultiIndex(\n            levels=[\n                [\"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"],\n                [\"R_l1_g0\", \"R_l1_g1\", \"R_l1_g2\", \"R_l1_g3\", \"R_l1_g4\"],\n            ],\n            codes=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]],\n            names=[None, None],\n        )\n        si = Index([\"R_l0_g0\", \"R_l0_g1\", \"R_l0_g2\", \"R_l0_g3\", \"R_l0_g4\"], name=None)\n\n        expected = DataFrame(data, index=si, columns=columns)\n\n        actual = pd.read_excel(filename, sheet_name=\"single_no_names\", index_col=0)\n        tm.assert_frame_equal(actual, expected)\n\n        expected.index = mi\n\n        actual = pd.read_excel(filename, sheet_name=\"multi_no_names\", index_col=[0, 1])\n        tm.assert_frame_equal(actual, expected, check_names=False)\n\n    def test_read_excel_bool_header_arg(self, read_ext):\n        # GH 6114\n        msg = \"Passing a bool to header is invalid\"\n        for arg in [True, False]:\n            with pytest.raises(TypeError, match=msg):\n                pd.read_excel(\"test1\" + read_ext, header=arg)\n\n    def test_read_excel_skiprows(self, request, read_ext):\n        # GH 4903\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext, sheet_name=\"skiprows_list\", skiprows=[0, 2]\n        )\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=np.array([0, 2]),\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        # GH36435\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=lambda x: x in [0, 2],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=3,\n            names=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        expected = DataFrame(\n            [\n                # [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_skiprows_callable_not_in(self, request, read_ext):\n        # GH 4903\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        actual = pd.read_excel(\n            \"testskiprows\" + read_ext,\n            sheet_name=\"skiprows_list\",\n            skiprows=lambda x: x not in [1, 3, 5],\n        )\n        expected = DataFrame(\n            [\n                [1, 2.5, pd.Timestamp(\"2015-01-01\"), True],\n                # [2, 3.5, pd.Timestamp(\"2015-01-02\"), False],\n                [3, 4.5, pd.Timestamp(\"2015-01-03\"), False],\n                # [4, 5.5, pd.Timestamp(\"2015-01-04\"), True],\n            ],\n            columns=[\"a\", \"b\", \"c\", \"d\"],\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows(self, read_ext):\n        # GH 16645\n        num_rows_to_pull = 5\n        actual = pd.read_excel(\"test1\" + read_ext, nrows=num_rows_to_pull)\n        expected = pd.read_excel(\"test1\" + read_ext)\n        expected = expected[:num_rows_to_pull]\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows_greater_than_nrows_in_file(self, read_ext):\n        # GH 16645\n        expected = pd.read_excel(\"test1\" + read_ext)\n        num_records_in_file = len(expected)\n        num_rows_to_pull = num_records_in_file + 10\n        actual = pd.read_excel(\"test1\" + read_ext, nrows=num_rows_to_pull)\n        tm.assert_frame_equal(actual, expected)\n\n    def test_read_excel_nrows_non_integer_parameter(self, read_ext):\n        # GH 16645\n        msg = \"'nrows' must be an integer >=0\"\n        with pytest.raises(ValueError, match=msg):\n            pd.read_excel(\"test1\" + read_ext, nrows=\"5\")\n\n    @pytest.mark.parametrize(\n        \"filename,sheet_name,header,index_col,skiprows\",\n        [\n            (\"testmultiindex\", \"mi_column\", [0, 1], 0, None),\n            (\"testmultiindex\", \"mi_index\", None, [0, 1], None),\n            (\"testmultiindex\", \"both\", [0, 1], [0, 1], None),\n            (\"testmultiindex\", \"mi_column_name\", [0, 1], 0, None),\n            (\"testskiprows\", \"skiprows_list\", None, None, [0, 2]),\n            (\"testskiprows\", \"skiprows_list\", None, None, lambda x: x in (0, 2)),\n        ],\n    )\n    def test_read_excel_nrows_params(\n        self, read_ext, filename, sheet_name, header, index_col, skiprows\n    ):\n        \"\"\"\n        For various parameters, we should get the same result whether we\n        limit the rows during load (nrows=3) or after (df.iloc[:3]).\n        \"\"\"\n        # GH 46894\n        expected = pd.read_excel(\n            filename + read_ext,\n            sheet_name=sheet_name,\n            header=header,\n            index_col=index_col,\n            skiprows=skiprows,\n        ).iloc[:3]\n        actual = pd.read_excel(\n            filename + read_ext,\n            sheet_name=sheet_name,\n            header=header,\n            index_col=index_col,\n            skiprows=skiprows,\n            nrows=3,\n        )\n        tm.assert_frame_equal(actual, expected)\n\n    def test_deprecated_kwargs(self, read_ext):\n        with pytest.raises(TypeError, match=\"but 3 positional arguments\"):\n            pd.read_excel(\"test1\" + read_ext, \"Sheet1\", 0)\n\n    def test_no_header_with_list_index_col(self, read_ext):\n        # GH 31783\n        file_name = \"testmultiindex\" + read_ext\n        data = [(\"B\", \"B\"), (\"key\", \"val\"), (3, 4), (3, 4)]\n        idx = MultiIndex.from_tuples(\n            [(\"A\", \"A\"), (\"key\", \"val\"), (1, 2), (1, 2)], names=(0, 1)\n        )\n        expected = DataFrame(data, index=idx, columns=(2, 3))\n        result = pd.read_excel(\n            file_name, sheet_name=\"index_col_none\", index_col=[0, 1], header=None\n        )\n        tm.assert_frame_equal(expected, result)\n\n    def test_one_col_noskip_blank_line(self, read_ext):\n        # GH 39808\n        file_name = \"one_col_blank_line\" + read_ext\n        data = [0.5, np.nan, 1, 2]\n        expected = DataFrame(data, columns=[\"numbers\"])\n        result = pd.read_excel(file_name)\n        tm.assert_frame_equal(result, expected)\n\n    def test_multiheader_two_blank_lines(self, read_ext):\n        # GH 40442\n        file_name = \"testmultiindex\" + read_ext\n        columns = MultiIndex.from_tuples([(\"a\", \"A\"), (\"b\", \"B\")])\n        data = [[np.nan, np.nan], [np.nan, np.nan], [1, 3], [2, 4]]\n        expected = DataFrame(data, columns=columns)\n        result = pd.read_excel(\n            file_name, sheet_name=\"mi_column_empty_rows\", header=[0, 1]\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_trailing_blanks(self, read_ext):\n        \"\"\"\n        Sheets can contain blank cells with no data. Some of our readers\n        were including those cells, creating many empty rows and columns\n        \"\"\"\n        file_name = \"trailing_blanks\" + read_ext\n        result = pd.read_excel(file_name)\n        assert result.shape == (3, 3)\n\n    def test_ignore_chartsheets_by_str(self, request, engine, read_ext):\n        # GH 41448\n        if engine == \"odf\":\n            pytest.skip(\"chartsheets do not exist in the ODF format\")\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"pyxlsb can't distinguish chartsheets from worksheets\"\n                )\n            )\n        with pytest.raises(ValueError, match=\"Worksheet named 'Chart1' not found\"):\n            pd.read_excel(\"chartsheet\" + read_ext, sheet_name=\"Chart1\")\n\n    def test_ignore_chartsheets_by_int(self, request, engine, read_ext):\n        # GH 41448\n        if engine == \"odf\":\n            pytest.skip(\"chartsheets do not exist in the ODF format\")\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"pyxlsb can't distinguish chartsheets from worksheets\"\n                )\n            )\n        with pytest.raises(\n            ValueError, match=\"Worksheet index 1 is invalid, 1 worksheets found\"\n        ):\n            pd.read_excel(\"chartsheet\" + read_ext, sheet_name=1)\n\n    def test_euro_decimal_format(self, read_ext):\n        # copied from read_csv\n        result = pd.read_excel(\"test_decimal\" + read_ext, decimal=\",\", skiprows=1)\n        expected = DataFrame(\n            [\n                [1, 1521.1541, 187101.9543, \"ABC\", \"poi\", 4.738797819],\n                [2, 121.12, 14897.76, \"DEF\", \"uyt\", 0.377320872],\n                [3, 878.158, 108013.434, \"GHI\", \"rez\", 2.735694704],\n            ],\n            columns=[\"Id\", \"Number1\", \"Number2\", \"Text1\", \"Text2\", \"Number3\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n\nclass TestExcelFileRead:\n    @pytest.fixture(autouse=True)\n    def cd_and_set_engine(self, engine, datapath, monkeypatch):\n        \"\"\"\n        Change directory and set engine for ExcelFile objects.\n        \"\"\"\n        func = partial(pd.ExcelFile, engine=engine)\n        monkeypatch.chdir(datapath(\"io\", \"data\", \"excel\"))\n        monkeypatch.setattr(pd, \"ExcelFile\", func)\n\n    def test_engine_used(self, read_ext, engine):\n        expected_defaults = {\n            \"xlsx\": \"openpyxl\",\n            \"xlsm\": \"openpyxl\",\n            \"xlsb\": \"pyxlsb\",\n            \"xls\": \"xlrd\",\n            \"ods\": \"odf\",\n        }\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            result = excel.engine\n\n        if engine is not None:\n            expected = engine\n        else:\n            expected = expected_defaults[read_ext[1:]]\n        assert result == expected\n\n    def test_excel_passes_na(self, read_ext):\n        with pd.ExcelFile(\"test4\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=False, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[\"NA\"], [1], [\"NA\"], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        with pd.ExcelFile(\"test4\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=True, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        # 13967\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=False, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[\"1.#QNAN\"], [1], [\"nan\"], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel, sheet_name=\"Sheet1\", keep_default_na=True, na_values=[\"apple\"]\n            )\n        expected = DataFrame(\n            [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]], columns=[\"Test\"]\n        )\n        tm.assert_frame_equal(parsed, expected)\n\n    @pytest.mark.parametrize(\"na_filter\", [None, True, False])\n    def test_excel_passes_na_filter(self, read_ext, na_filter):\n        # gh-25453\n        kwargs = {}\n\n        if na_filter is not None:\n            kwargs[\"na_filter\"] = na_filter\n\n        with pd.ExcelFile(\"test5\" + read_ext) as excel:\n            parsed = pd.read_excel(\n                excel,\n                sheet_name=\"Sheet1\",\n                keep_default_na=True,\n                na_values=[\"apple\"],\n                **kwargs,\n            )\n\n        if na_filter is False:\n            expected = [[\"1.#QNAN\"], [1], [\"nan\"], [\"apple\"], [\"rabbit\"]]\n        else:\n            expected = [[np.nan], [1], [np.nan], [np.nan], [\"rabbit\"]]\n\n        expected = DataFrame(expected, columns=[\"Test\"])\n        tm.assert_frame_equal(parsed, expected)\n\n    def test_excel_table_sheet_by_index(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df1 = pd.read_excel(excel, sheet_name=0, index_col=0)\n            df2 = pd.read_excel(excel, sheet_name=1, skiprows=[1], index_col=0)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df1 = excel.parse(0, index_col=0)\n            df2 = excel.parse(1, skiprows=[1], index_col=0)\n        tm.assert_frame_equal(df1, df_ref, check_names=False)\n        tm.assert_frame_equal(df2, df_ref, check_names=False)\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df3 = pd.read_excel(excel, sheet_name=0, index_col=0, skipfooter=1)\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n        with pd.ExcelFile(\"test1\" + read_ext) as excel:\n            df3 = excel.parse(0, index_col=0, skipfooter=1)\n\n        tm.assert_frame_equal(df3, df1.iloc[:-1])\n\n    def test_sheet_name(self, request, read_ext, df_ref):\n        if read_ext == \".xlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        filename = \"test1\"\n        sheet_name = \"Sheet1\"\n\n        with pd.ExcelFile(filename + read_ext) as excel:\n            df1_parse = excel.parse(sheet_name=sheet_name, index_col=0)  # doc\n\n        with pd.ExcelFile(filename + read_ext) as excel:\n            df2_parse = excel.parse(index_col=0, sheet_name=sheet_name)\n\n        tm.assert_frame_equal(df1_parse, df_ref, check_names=False)\n        tm.assert_frame_equal(df2_parse, df_ref, check_names=False)\n\n    @pytest.mark.parametrize(\n        \"sheet_name\",\n        [3, [0, 3], [3, 0], \"Sheet4\", [\"Sheet1\", \"Sheet4\"], [\"Sheet4\", \"Sheet1\"]],\n    )\n    def test_bad_sheetname_raises(self, read_ext, sheet_name):\n        # GH 39250\n        msg = \"Worksheet index 3 is invalid|Worksheet named 'Sheet4' not found\"\n        with pytest.raises(ValueError, match=msg):\n            with pd.ExcelFile(\"blank\" + read_ext) as excel:\n                excel.parse(sheet_name=sheet_name)\n\n    def test_excel_read_buffer(self, engine, read_ext):\n        pth = \"test1\" + read_ext\n        expected = pd.read_excel(pth, sheet_name=\"Sheet1\", index_col=0, engine=engine)\n\n        with open(pth, \"rb\") as f:\n            with pd.ExcelFile(f) as xls:\n                actual = pd.read_excel(xls, sheet_name=\"Sheet1\", index_col=0)\n\n        tm.assert_frame_equal(expected, actual)\n\n    def test_reader_closes_file(self, engine, read_ext):\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            with pd.ExcelFile(f) as xlsx:\n                # parses okay\n                pd.read_excel(xlsx, sheet_name=\"Sheet1\", index_col=0, engine=engine)\n\n        assert f.closed\n\n    def test_conflicting_excel_engines(self, read_ext):\n        # GH 26566\n        msg = \"Engine should not be specified when passing an ExcelFile\"\n\n        with pd.ExcelFile(\"test1\" + read_ext) as xl:\n            with pytest.raises(ValueError, match=msg):\n                pd.read_excel(xl, engine=\"foo\")\n\n    def test_excel_read_binary(self, engine, read_ext):\n        # GH 15914\n        expected = pd.read_excel(\"test1\" + read_ext, engine=engine)\n\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            data = f.read()\n\n        actual = pd.read_excel(data, engine=engine)\n        tm.assert_frame_equal(expected, actual)\n\n    def test_excel_read_binary_via_read_excel(self, read_ext, engine):\n        # GH 38424\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            result = pd.read_excel(f)\n        expected = pd.read_excel(\"test1\" + read_ext, engine=engine)\n        tm.assert_frame_equal(result, expected)\n\n    def test_read_excel_header_index_out_of_range(self, engine):\n        # GH#43143\n        with open(\"df_header_oob.xlsx\", \"rb\") as f:\n            with pytest.raises(ValueError, match=\"exceeds maximum\"):\n                pd.read_excel(f, header=[0, 1])\n\n    @pytest.mark.parametrize(\"filename\", [\"df_empty.xlsx\", \"df_equals.xlsx\"])\n    def test_header_with_index_col(self, filename):\n        # GH 33476\n        idx = Index([\"Z\"], name=\"I2\")\n        cols = MultiIndex.from_tuples([(\"A\", \"B\"), (\"A\", \"B.1\")], names=[\"I11\", \"I12\"])\n        expected = DataFrame([[1, 3]], index=idx, columns=cols, dtype=\"int64\")\n        result = pd.read_excel(\n            filename, sheet_name=\"Sheet1\", index_col=0, header=[0, 1]\n        )\n        tm.assert_frame_equal(expected, result)\n\n    def test_read_datetime_multiindex(self, request, engine, read_ext):\n        # GH 34748\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"Sheets containing datetimes not supported by pyxlsb\"\n                )\n            )\n\n        f = \"test_datetime_mi\" + read_ext\n        with pd.ExcelFile(f) as excel:\n            actual = pd.read_excel(excel, header=[0, 1], index_col=0, engine=engine)\n        expected_column_index = MultiIndex.from_tuples(\n            [(pd.to_datetime(\"02/29/2020\"), pd.to_datetime(\"03/01/2020\"))],\n            names=[\n                pd.to_datetime(\"02/29/2020\").to_pydatetime(),\n                pd.to_datetime(\"03/01/2020\").to_pydatetime(),\n            ],\n        )\n        expected = DataFrame([], columns=expected_column_index)\n\n        tm.assert_frame_equal(expected, actual)\n\n    def test_engine_invalid_option(self, read_ext):\n        # read_ext includes the '.' hence the weird formatting\n        with pytest.raises(ValueError, match=\"Value must be one of *\"):\n            with pd.option_context(f\"io.excel{read_ext}.reader\", \"abc\"):\n                pass\n\n    def test_ignore_chartsheets(self, request, engine, read_ext):\n        # GH 41448\n        if engine == \"odf\":\n            pytest.skip(\"chartsheets do not exist in the ODF format\")\n        if engine == \"pyxlsb\":\n            request.node.add_marker(\n                pytest.mark.xfail(\n                    reason=\"pyxlsb can't distinguish chartsheets from worksheets\"\n                )\n            )\n        with pd.ExcelFile(\"chartsheet\" + read_ext) as excel:\n            assert excel.sheet_names == [\"Sheet1\"]\n\n    def test_corrupt_files_closed(self, engine, read_ext):\n        # GH41778\n        errors = (BadZipFile,)\n        if engine is None:\n            pytest.skip(f\"Invalid test for engine={engine}\")\n        elif engine == \"xlrd\":\n            import xlrd\n\n            errors = (BadZipFile, xlrd.biffh.XLRDError)\n\n        with tm.ensure_clean(f\"corrupt{read_ext}\") as file:\n            Path(file).write_text(\"corrupt\")\n            with tm.assert_produces_warning(False):\n                try:\n                    pd.ExcelFile(file, engine=engine)\n                except errors:\n                    pass\n"
    },
    {
      "filename": "pandas/tests/io/formats/test_format.py",
      "content": "\"\"\"\nTest output formatting for Series/DataFrame, including to_string & reprs\n\"\"\"\nfrom contextlib import nullcontext\nfrom datetime import (\n    datetime,\n    time,\n    timedelta,\n)\nfrom io import StringIO\nimport itertools\nimport locale\nfrom operator import methodcaller\nimport os\nfrom pathlib import Path\nimport re\nfrom shutil import get_terminal_size\nimport sys\nimport textwrap\n\nimport dateutil\nimport numpy as np\nimport pytest\nimport pytz\n\nfrom pandas.compat import (\n    IS64,\n    is_platform_windows,\n)\nimport pandas.util._test_decorators as td\n\nimport pandas as pd\nfrom pandas import (\n    DataFrame,\n    Index,\n    MultiIndex,\n    NaT,\n    Series,\n    Timestamp,\n    date_range,\n    get_option,\n    option_context,\n    read_csv,\n    reset_option,\n    set_option,\n)\nimport pandas._testing as tm\n\nfrom pandas.io.formats import printing\nimport pandas.io.formats.format as fmt\n\nuse_32bit_repr = is_platform_windows() or not IS64\n\n\ndef get_local_am_pm():\n    \"\"\"Return the AM and PM strings returned by strftime in current locale.\"\"\"\n    am_local = time(1).strftime(\"%p\")\n    pm_local = time(13).strftime(\"%p\")\n    return am_local, pm_local\n\n\n@pytest.fixture(params=[\"string\", \"pathlike\", \"buffer\"])\ndef filepath_or_buffer_id(request):\n    \"\"\"\n    A fixture yielding test ids for filepath_or_buffer testing.\n    \"\"\"\n    return request.param\n\n\n@pytest.fixture\ndef filepath_or_buffer(filepath_or_buffer_id, tmp_path):\n    \"\"\"\n    A fixture yielding a string representing a filepath, a path-like object\n    and a StringIO buffer. Also checks that buffer is not closed.\n    \"\"\"\n    if filepath_or_buffer_id == \"buffer\":\n        buf = StringIO()\n        yield buf\n        assert not buf.closed\n    else:\n        assert isinstance(tmp_path, Path)\n        if filepath_or_buffer_id == \"pathlike\":\n            yield tmp_path / \"foo\"\n        else:\n            yield str(tmp_path / \"foo\")\n\n\n@pytest.fixture\ndef assert_filepath_or_buffer_equals(\n    filepath_or_buffer, filepath_or_buffer_id, encoding\n):\n    \"\"\"\n    Assertion helper for checking filepath_or_buffer.\n    \"\"\"\n\n    def _assert_filepath_or_buffer_equals(expected):\n        if filepath_or_buffer_id == \"string\":\n            with open(filepath_or_buffer, encoding=encoding) as f:\n                result = f.read()\n        elif filepath_or_buffer_id == \"pathlike\":\n            result = filepath_or_buffer.read_text(encoding=encoding)\n        elif filepath_or_buffer_id == \"buffer\":\n            result = filepath_or_buffer.getvalue()\n        assert result == expected\n\n    return _assert_filepath_or_buffer_equals\n\n\ndef curpath():\n    pth, _ = os.path.split(os.path.abspath(__file__))\n    return pth\n\n\ndef has_info_repr(df):\n    r = repr(df)\n    c1 = r.split(\"\\n\")[0].startswith(\"<class\")\n    c2 = r.split(\"\\n\")[0].startswith(r\"&lt;class\")  # _repr_html_\n    return c1 or c2\n\n\ndef has_non_verbose_info_repr(df):\n    has_info = has_info_repr(df)\n    r = repr(df)\n\n    # 1. <class>\n    # 2. Index\n    # 3. Columns\n    # 4. dtype\n    # 5. memory usage\n    # 6. trailing newline\n    nv = len(r.split(\"\\n\")) == 6\n    return has_info and nv\n\n\ndef has_horizontally_truncated_repr(df):\n    try:  # Check header row\n        fst_line = np.array(repr(df).splitlines()[0].split())\n        cand_col = np.where(fst_line == \"...\")[0][0]\n    except IndexError:\n        return False\n    # Make sure each row has this ... in the same place\n    r = repr(df)\n    for ix, l in enumerate(r.splitlines()):\n        if not r.split()[cand_col] == \"...\":\n            return False\n    return True\n\n\ndef has_vertically_truncated_repr(df):\n    r = repr(df)\n    only_dot_row = False\n    for row in r.splitlines():\n        if re.match(r\"^[\\.\\ ]+$\", row):\n            only_dot_row = True\n    return only_dot_row\n\n\ndef has_truncated_repr(df):\n    return has_horizontally_truncated_repr(df) or has_vertically_truncated_repr(df)\n\n\ndef has_doubly_truncated_repr(df):\n    return has_horizontally_truncated_repr(df) and has_vertically_truncated_repr(df)\n\n\ndef has_expanded_repr(df):\n    r = repr(df)\n    for line in r.split(\"\\n\"):\n        if line.endswith(\"\\\\\"):\n            return True\n    return False\n\n\n@pytest.mark.filterwarnings(\"ignore::FutureWarning:.*format\")\nclass TestDataFrameFormatting:\n    def test_eng_float_formatter(self, float_frame):\n        df = float_frame\n        df.loc[5] = 0\n\n        fmt.set_eng_float_format()\n        repr(df)\n\n        fmt.set_eng_float_format(use_eng_prefix=True)\n        repr(df)\n\n        fmt.set_eng_float_format(accuracy=0)\n        repr(df)\n        tm.reset_display_options()\n\n    @pytest.mark.parametrize(\n        \"row, columns, show_counts, result\",\n        [\n            [20, 20, None, True],\n            [20, 20, True, True],\n            [20, 20, False, False],\n            [5, 5, None, False],\n            [5, 5, True, False],\n            [5, 5, False, False],\n        ],\n    )\n    def test_show_counts(self, row, columns, show_counts, result):\n\n        df = DataFrame(1, columns=range(10), index=range(10))\n        df.iloc[1, 1] = np.nan\n\n        with option_context(\n            \"display.max_info_rows\", row, \"display.max_info_columns\", columns\n        ):\n            with StringIO() as buf:\n                df.info(buf=buf, show_counts=show_counts)\n                assert (\"non-null\" in buf.getvalue()) is result\n\n    def test_repr_truncation(self):\n        max_len = 20\n        with option_context(\"display.max_colwidth\", max_len):\n            df = DataFrame(\n                {\n                    \"A\": np.random.randn(10),\n                    \"B\": [\n                        tm.rands(np.random.randint(max_len - 1, max_len + 1))\n                        for i in range(10)\n                    ],\n                }\n            )\n            r = repr(df)\n            r = r[r.find(\"\\n\") + 1 :]\n\n            adj = fmt.get_adjustment()\n\n            for line, value in zip(r.split(\"\\n\"), df[\"B\"]):\n                if adj.len(value) + 1 > max_len:\n                    assert \"...\" in line\n                else:\n                    assert \"...\" not in line\n\n        with option_context(\"display.max_colwidth\", 999999):\n            assert \"...\" not in repr(df)\n\n        with option_context(\"display.max_colwidth\", max_len + 2):\n            assert \"...\" not in repr(df)\n\n    def test_max_colwidth_negative_int_raises(self):\n        # Deprecation enforced from:\n        # https://github.com/pandas-dev/pandas/issues/31532\n        width = get_option(\"display.max_colwidth\")\n        with pytest.raises(\n            ValueError, match=\"Value must be a nonnegative integer or None\"\n        ):\n            set_option(\"display.max_colwidth\", -1)\n        set_option(\"display.max_colwidth\", width)\n\n    def test_repr_chop_threshold(self):\n        df = DataFrame([[0.1, 0.5], [0.5, -0.1]])\n        reset_option(\"display.chop_threshold\")  # default None\n        assert repr(df) == \"     0    1\\n0  0.1  0.5\\n1  0.5 -0.1\"\n\n        with option_context(\"display.chop_threshold\", 0.2):\n            assert repr(df) == \"     0    1\\n0  0.0  0.5\\n1  0.5  0.0\"\n\n        with option_context(\"display.chop_threshold\", 0.6):\n            assert repr(df) == \"     0    1\\n0  0.0  0.0\\n1  0.0  0.0\"\n\n        with option_context(\"display.chop_threshold\", None):\n            assert repr(df) == \"     0    1\\n0  0.1  0.5\\n1  0.5 -0.1\"\n\n    def test_repr_chop_threshold_column_below(self):\n        # GH 6839: validation case\n\n        df = DataFrame([[10, 20, 30, 40], [8e-10, -1e-11, 2e-9, -2e-11]]).T\n\n        with option_context(\"display.chop_threshold\", 0):\n            assert repr(df) == (\n                \"      0             1\\n\"\n                \"0  10.0  8.000000e-10\\n\"\n                \"1  20.0 -1.000000e-11\\n\"\n                \"2  30.0  2.000000e-09\\n\"\n                \"3  40.0 -2.000000e-11\"\n            )\n\n        with option_context(\"display.chop_threshold\", 1e-8):\n            assert repr(df) == (\n                \"      0             1\\n\"\n                \"0  10.0  0.000000e+00\\n\"\n                \"1  20.0  0.000000e+00\\n\"\n                \"2  30.0  0.000000e+00\\n\"\n                \"3  40.0  0.000000e+00\"\n            )\n\n        with option_context(\"display.chop_threshold\", 5e-11):\n            assert repr(df) == (\n                \"      0             1\\n\"\n                \"0  10.0  8.000000e-10\\n\"\n                \"1  20.0  0.000000e+00\\n\"\n                \"2  30.0  2.000000e-09\\n\"\n                \"3  40.0  0.000000e+00\"\n            )\n\n    def test_repr_obeys_max_seq_limit(self):\n        with option_context(\"display.max_seq_items\", 2000):\n            assert len(printing.pprint_thing(list(range(1000)))) > 1000\n\n        with option_context(\"display.max_seq_items\", 5):\n            assert len(printing.pprint_thing(list(range(1000)))) < 100\n\n        with option_context(\"display.max_seq_items\", 1):\n            assert len(printing.pprint_thing(list(range(1000)))) < 9\n\n    def test_repr_set(self):\n        assert printing.pprint_thing({1}) == \"{1}\"\n\n    def test_repr_is_valid_construction_code(self):\n        # for the case of Index, where the repr is traditional rather than\n        # stylized\n        idx = Index([\"a\", \"b\"])\n        res = eval(\"pd.\" + repr(idx))\n        tm.assert_series_equal(Series(res), Series(idx))\n\n    def test_repr_should_return_str(self):\n        # https://docs.python.org/3/reference/datamodel.html#object.__repr__\n        # \"...The return value must be a string object.\"\n\n        # (str on py2.x, str (unicode) on py3)\n\n        data = [8, 5, 3, 5]\n        index1 = [\"\\u03c3\", \"\\u03c4\", \"\\u03c5\", \"\\u03c6\"]\n        cols = [\"\\u03c8\"]\n        df = DataFrame(data, columns=cols, index=index1)\n        assert type(df.__repr__()) == str  # both py2 / 3\n\n    def test_repr_no_backslash(self):\n        with option_context(\"mode.sim_interactive\", True):\n            df = DataFrame(np.random.randn(10, 4))\n            assert \"\\\\\" not in repr(df)\n\n    def test_expand_frame_repr(self):\n        df_small = DataFrame(\"hello\", index=[0], columns=[0])\n        df_wide = DataFrame(\"hello\", index=[0], columns=range(10))\n        df_tall = DataFrame(\"hello\", index=range(30), columns=range(5))\n\n        with option_context(\"mode.sim_interactive\", True):\n            with option_context(\n                \"display.max_columns\",\n                10,\n                \"display.width\",\n                20,\n                \"display.max_rows\",\n                20,\n                \"display.show_dimensions\",\n                True,\n            ):\n                with option_context(\"display.expand_frame_repr\", True):\n                    assert not has_truncated_repr(df_small)\n                    assert not has_expanded_repr(df_small)\n                    assert not has_truncated_repr(df_wide)\n                    assert has_expanded_repr(df_wide)\n                    assert has_vertically_truncated_repr(df_tall)\n                    assert has_expanded_repr(df_tall)\n\n                with option_context(\"display.expand_frame_repr\", False):\n                    assert not has_truncated_repr(df_small)\n                    assert not has_expanded_repr(df_small)\n                    assert not has_horizontally_truncated_repr(df_wide)\n                    assert not has_expanded_repr(df_wide)\n                    assert has_vertically_truncated_repr(df_tall)\n                    assert not has_expanded_repr(df_tall)\n\n    def test_repr_non_interactive(self):\n        # in non interactive mode, there can be no dependency on the\n        # result of terminal auto size detection\n        df = DataFrame(\"hello\", index=range(1000), columns=range(5))\n\n        with option_context(\n            \"mode.sim_interactive\", False, \"display.width\", 0, \"display.max_rows\", 5000\n        ):\n            assert not has_truncated_repr(df)\n            assert not has_expanded_repr(df)\n\n    def test_repr_truncates_terminal_size(self, monkeypatch):\n        # see gh-21180\n\n        terminal_size = (118, 96)\n        monkeypatch.setattr(\n            \"pandas.io.formats.format.get_terminal_size\", lambda: terminal_size\n        )\n\n        index = range(5)\n        columns = MultiIndex.from_tuples(\n            [\n                (\"This is a long title with > 37 chars.\", \"cat\"),\n                (\"This is a loooooonger title with > 43 chars.\", \"dog\"),\n            ]\n        )\n        df = DataFrame(1, index=index, columns=columns)\n\n        result = repr(df)\n\n        h1, h2 = result.split(\"\\n\")[:2]\n        assert \"long\" in h1\n        assert \"loooooonger\" in h1\n        assert \"cat\" in h2\n        assert \"dog\" in h2\n\n        # regular columns\n        df2 = DataFrame({\"A\" * 41: [1, 2], \"B\" * 41: [1, 2]})\n        result = repr(df2)\n\n        assert df2.columns[0] in result.split(\"\\n\")[0]\n\n    def test_repr_truncates_terminal_size_full(self, monkeypatch):\n        # GH 22984 ensure entire window is filled\n        terminal_size = (80, 24)\n        df = DataFrame(np.random.rand(1, 7))\n\n        monkeypatch.setattr(\n            \"pandas.io.formats.format.get_terminal_size\", lambda: terminal_size\n        )\n        assert \"...\" not in str(df)\n\n    def test_repr_truncation_column_size(self):\n        # dataframe with last column very wide -> check it is not used to\n        # determine size of truncation (...) column\n        df = DataFrame(\n            {\n                \"a\": [108480, 30830],\n                \"b\": [12345, 12345],\n                \"c\": [12345, 12345],\n                \"d\": [12345, 12345],\n                \"e\": [\"a\" * 50] * 2,\n            }\n        )\n        assert \"...\" in str(df)\n        assert \"    ...    \" not in str(df)\n\n    def test_repr_max_columns_max_rows(self):\n        term_width, term_height = get_terminal_size()\n        if term_width < 10 or term_height < 10:\n            pytest.skip(f\"terminal size too small, {term_width} x {term_height}\")\n\n        def mkframe(n):\n            index = [f\"{i:05d}\" for i in range(n)]\n            return DataFrame(0, index, index)\n\n        df6 = mkframe(6)\n        df10 = mkframe(10)\n        with option_context(\"mode.sim_interactive\", True):\n            with option_context(\"display.width\", term_width * 2):\n                with option_context(\"display.max_rows\", 5, \"display.max_columns\", 5):\n                    assert not has_expanded_repr(mkframe(4))\n                    assert not has_expanded_repr(mkframe(5))\n                    assert not has_expanded_repr(df6)\n                    assert has_doubly_truncated_repr(df6)\n\n                with option_context(\"display.max_rows\", 20, \"display.max_columns\", 10):\n                    # Out off max_columns boundary, but no extending\n                    # since not exceeding width\n                    assert not has_expanded_repr(df6)\n                    assert not has_truncated_repr(df6)\n\n                with option_context(\"display.max_rows\", 9, \"display.max_columns\", 10):\n                    # out vertical bounds can not result in expanded repr\n                    assert not has_expanded_repr(df10)\n                    assert has_vertically_truncated_repr(df10)\n\n            # width=None in terminal, auto detection\n            with option_context(\n                \"display.max_columns\",\n                100,\n                \"display.max_rows\",\n                term_width * 20,\n                \"display.width\",\n                None,\n            ):\n                df = mkframe((term_width // 7) - 2)\n                assert not has_expanded_repr(df)\n                df = mkframe((term_width // 7) + 2)\n                printing.pprint_thing(df._repr_fits_horizontal_())\n                assert has_expanded_repr(df)\n\n    def test_repr_min_rows(self):\n        df = DataFrame({\"a\": range(20)})\n\n        # default setting no truncation even if above min_rows\n        assert \"..\" not in repr(df)\n        assert \"..\" not in df._repr_html_()\n\n        df = DataFrame({\"a\": range(61)})\n\n        # default of max_rows 60 triggers truncation if above\n        assert \"..\" in repr(df)\n        assert \"..\" in df._repr_html_()\n\n        with option_context(\"display.max_rows\", 10, \"display.min_rows\", 4):\n            # truncated after first two rows\n            assert \"..\" in repr(df)\n            assert \"2  \" not in repr(df)\n            assert \"...\" in df._repr_html_()\n            assert \"<td>2</td>\" not in df._repr_html_()\n\n        with option_context(\"display.max_rows\", 12, \"display.min_rows\", None):\n            # when set to None, follow value of max_rows\n            assert \"5    5\" in repr(df)\n            assert \"<td>5</td>\" in df._repr_html_()\n\n        with option_context(\"display.max_rows\", 10, \"display.min_rows\", 12):\n            # when set value higher as max_rows, use the minimum\n            assert \"5    5\" not in repr(df)\n            assert \"<td>5</td>\" not in df._repr_html_()\n\n        with option_context(\"display.max_rows\", None, \"display.min_rows\", 12):\n            # max_rows of None -> never truncate\n            assert \"..\" not in repr(df)\n            assert \"..\" not in df._repr_html_()\n\n    def test_str_max_colwidth(self):\n        # GH 7856\n        df = DataFrame(\n            [\n                {\n                    \"a\": \"foo\",\n                    \"b\": \"bar\",\n                    \"c\": \"uncomfortably long line with lots of stuff\",\n                    \"d\": 1,\n                },\n                {\"a\": \"foo\", \"b\": \"bar\", \"c\": \"stuff\", \"d\": 1},\n            ]\n        )\n        df.set_index([\"a\", \"b\", \"c\"])\n        assert str(df) == (\n            \"     a    b                                           c  d\\n\"\n            \"0  foo  bar  uncomfortably long line with lots of stuff  1\\n\"\n            \"1  foo  bar                                       stuff  1\"\n        )\n        with option_context(\"max_colwidth\", 20):\n            assert str(df) == (\n                \"     a    b                    c  d\\n\"\n                \"0  foo  bar  uncomfortably lo...  1\\n\"\n                \"1  foo  bar                stuff  1\"\n            )\n\n    def test_auto_detect(self):\n        term_width, term_height = get_terminal_size()\n        fac = 1.05  # Arbitrary large factor to exceed term width\n        cols = range(int(term_width * fac))\n        index = range(10)\n        df = DataFrame(index=index, columns=cols)\n        with option_context(\"mode.sim_interactive\", True):\n            with option_context(\"display.max_rows\", None):\n                with option_context(\"display.max_columns\", None):\n                    # Wrap around with None\n                    assert has_expanded_repr(df)\n            with option_context(\"display.max_rows\", 0):\n                with option_context(\"display.max_columns\", 0):\n                    # Truncate with auto detection.\n                    assert has_horizontally_truncated_repr(df)\n\n            index = range(int(term_height * fac))\n            df = DataFrame(index=index, columns=cols)\n            with option_context(\"display.max_rows\", 0):\n                with option_context(\"display.max_columns\", None):\n                    # Wrap around with None\n                    assert has_expanded_repr(df)\n                    # Truncate vertically\n                    assert has_vertically_truncated_repr(df)\n\n            with option_context(\"display.max_rows\", None):\n                with option_context(\"display.max_columns\", 0):\n                    assert has_horizontally_truncated_repr(df)\n\n    def test_to_string_repr_unicode(self):\n        buf = StringIO()\n\n        unicode_values = [\"\\u03c3\"] * 10\n        unicode_values = np.array(unicode_values, dtype=object)\n        df = DataFrame({\"unicode\": unicode_values})\n        df.to_string(col_space=10, buf=buf)\n\n        # it works!\n        repr(df)\n\n        idx = Index([\"abc\", \"\\u03c3a\", \"aegdvg\"])\n        ser = Series(np.random.randn(len(idx)), idx)\n        rs = repr(ser).split(\"\\n\")\n        line_len = len(rs[0])\n        for line in rs[1:]:\n            try:\n                line = line.decode(get_option(\"display.encoding\"))\n            except AttributeError:\n                pass\n            if not line.startswith(\"dtype:\"):\n                assert len(line) == line_len\n\n        # it works even if sys.stdin in None\n        _stdin = sys.stdin\n        try:\n            sys.stdin = None\n            repr(df)\n        finally:\n            sys.stdin = _stdin\n\n    def test_east_asian_unicode_false(self):\n        # not aligned properly because of east asian width\n\n        # mid col\n        df = DataFrame(\n            {\"a\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"], \"b\": [1, 222, 33333, 4]},\n            index=[\"a\", \"bb\", \"c\", \"ddd\"],\n        )\n        expected = (\n            \"          a      b\\na         あ      1\\n\"\n            \"bb      いいい    222\\nc         う  33333\\n\"\n            \"ddd  ええええええ      4\"\n        )\n        assert repr(df) == expected\n\n        # last col\n        df = DataFrame(\n            {\"a\": [1, 222, 33333, 4], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n            index=[\"a\", \"bb\", \"c\", \"ddd\"],\n        )\n        expected = (\n            \"         a       b\\na        1       あ\\n\"\n            \"bb     222     いいい\\nc    33333       う\\n\"\n            \"ddd      4  ええええええ\"\n        )\n        assert repr(df) == expected\n\n        # all col\n        df = DataFrame(\n            {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n            index=[\"a\", \"bb\", \"c\", \"ddd\"],\n        )\n        expected = (\n            \"         a       b\\na    あああああ       あ\\n\"\n            \"bb       い     いいい\\nc        う       う\\n\"\n            \"ddd    えええ  ええええええ\"\n        )\n        assert repr(df) == expected\n\n        # column name\n        df = DataFrame(\n            {\"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"], \"あああああ\": [1, 222, 33333, 4]},\n            index=[\"a\", \"bb\", \"c\", \"ddd\"],\n        )\n        expected = (\n            \"          b  あああああ\\na         あ      1\\n\"\n            \"bb      いいい    222\\nc         う  33333\\n\"\n            \"ddd  ええええええ      4\"\n        )\n        assert repr(df) == expected\n\n        # index\n        df = DataFrame(\n            {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n            index=[\"あああ\", \"いいいいいい\", \"うう\", \"え\"],\n        )\n        expected = (\n            \"            a       b\\nあああ     あああああ       あ\\n\"\n            \"いいいいいい      い     いいい\\nうう          う       う\\n\"\n            \"え         えええ  ええええええ\"\n        )\n        assert repr(df) == expected\n\n        # index name\n        df = DataFrame(\n            {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n            index=Index([\"あ\", \"い\", \"うう\", \"え\"], name=\"おおおお\"),\n        )\n        expected = (\n            \"          a       b\\n\"\n            \"おおおお               \\n\"\n            \"あ     あああああ       あ\\n\"\n            \"い         い     いいい\\n\"\n            \"うう        う       う\\n\"\n            \"え       えええ  ええええええ\"\n        )\n        assert repr(df) == expected\n\n        # all\n        df = DataFrame(\n            {\"あああ\": [\"あああ\", \"い\", \"う\", \"えええええ\"], \"いいいいい\": [\"あ\", \"いいい\", \"う\", \"ええ\"]},\n            index=Index([\"あ\", \"いいい\", \"うう\", \"え\"], name=\"お\"),\n        )\n        expected = (\n            \"       あああ いいいいい\\n\"\n            \"お               \\n\"\n            \"あ      あああ     あ\\n\"\n            \"いいい      い   いいい\\n\"\n            \"うう       う     う\\n\"\n            \"え    えええええ    ええ\"\n        )\n        assert repr(df) == expected\n\n        # MultiIndex\n        idx = MultiIndex.from_tuples(\n            [(\"あ\", \"いい\"), (\"う\", \"え\"), (\"おおお\", \"かかかか\"), (\"き\", \"くく\")]\n        )\n        df = DataFrame(\n            {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n            index=idx,\n        )\n        expected = (\n            \"              a       b\\n\"\n            \"あ   いい    あああああ       あ\\n\"\n            \"う   え         い     いいい\\n\"\n            \"おおお かかかか      う       う\\n\"\n            \"き   くく      えええ  ええええええ\"\n        )\n        assert repr(df) == expected\n\n        # truncate\n        with option_context(\"display.max_rows\", 3, \"display.max_columns\", 3):\n            df = DataFrame(\n                {\n                    \"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"],\n                    \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"],\n                    \"c\": [\"お\", \"か\", \"ききき\", \"くくくくくく\"],\n                    \"ああああ\": [\"さ\", \"し\", \"す\", \"せ\"],\n                },\n                columns=[\"a\", \"b\", \"c\", \"ああああ\"],\n            )\n\n            expected = (\n                \"        a  ... ああああ\\n0   あああああ  ...    さ\\n\"\n                \"..    ...  ...  ...\\n3     えええ  ...    せ\\n\"\n                \"\\n[4 rows x 4 columns]\"\n            )\n            assert repr(df) == expected\n\n            df.index = [\"あああ\", \"いいいい\", \"う\", \"aaa\"]\n            expected = (\n                \"         a  ... ああああ\\nあああ  あああああ  ...    さ\\n\"\n                \"..     ...  ...  ...\\naaa    えええ  ...    せ\\n\"\n                \"\\n[4 rows x 4 columns]\"\n            )\n            assert repr(df) == expected\n\n    def test_east_asian_unicode_true(self):\n        # Enable Unicode option -----------------------------------------\n        with option_context(\"display.unicode.east_asian_width\", True):\n\n            # mid col\n            df = DataFrame(\n                {\"a\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"], \"b\": [1, 222, 33333, 4]},\n                index=[\"a\", \"bb\", \"c\", \"ddd\"],\n            )\n            expected = (\n                \"                a      b\\na              あ      1\\n\"\n                \"bb         いいい    222\\nc              う  33333\\n\"\n                \"ddd  ええええええ      4\"\n            )\n            assert repr(df) == expected\n\n            # last col\n            df = DataFrame(\n                {\"a\": [1, 222, 33333, 4], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n                index=[\"a\", \"bb\", \"c\", \"ddd\"],\n            )\n            expected = (\n                \"         a             b\\na        1            あ\\n\"\n                \"bb     222        いいい\\nc    33333            う\\n\"\n                \"ddd      4  ええええええ\"\n            )\n            assert repr(df) == expected\n\n            # all col\n            df = DataFrame(\n                {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n                index=[\"a\", \"bb\", \"c\", \"ddd\"],\n            )\n            expected = (\n                \"              a             b\\n\"\n                \"a    あああああ            あ\\n\"\n                \"bb           い        いいい\\n\"\n                \"c            う            う\\n\"\n                \"ddd      えええ  ええええええ\"\n            )\n            assert repr(df) == expected\n\n            # column name\n            df = DataFrame(\n                {\"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"], \"あああああ\": [1, 222, 33333, 4]},\n                index=[\"a\", \"bb\", \"c\", \"ddd\"],\n            )\n            expected = (\n                \"                b  あああああ\\n\"\n                \"a              あ           1\\n\"\n                \"bb         いいい         222\\n\"\n                \"c              う       33333\\n\"\n                \"ddd  ええええええ           4\"\n            )\n            assert repr(df) == expected\n\n            # index\n            df = DataFrame(\n                {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n                index=[\"あああ\", \"いいいいいい\", \"うう\", \"え\"],\n            )\n            expected = (\n                \"                       a             b\\n\"\n                \"あああ        あああああ            あ\\n\"\n                \"いいいいいい          い        いいい\\n\"\n                \"うう                  う            う\\n\"\n                \"え                えええ  ええええええ\"\n            )\n            assert repr(df) == expected\n\n            # index name\n            df = DataFrame(\n                {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n                index=Index([\"あ\", \"い\", \"うう\", \"え\"], name=\"おおおお\"),\n            )\n            expected = (\n                \"                   a             b\\n\"\n                \"おおおお                          \\n\"\n                \"あ        あああああ            あ\\n\"\n                \"い                い        いいい\\n\"\n                \"うう              う            う\\n\"\n                \"え            えええ  ええええええ\"\n            )\n            assert repr(df) == expected\n\n            # all\n            df = DataFrame(\n                {\"あああ\": [\"あああ\", \"い\", \"う\", \"えええええ\"], \"いいいいい\": [\"あ\", \"いいい\", \"う\", \"ええ\"]},\n                index=Index([\"あ\", \"いいい\", \"うう\", \"え\"], name=\"お\"),\n            )\n            expected = (\n                \"            あああ いいいいい\\n\"\n                \"お                           \\n\"\n                \"あ          あああ         あ\\n\"\n                \"いいい          い     いいい\\n\"\n                \"うう            う         う\\n\"\n                \"え      えええええ       ええ\"\n            )\n            assert repr(df) == expected\n\n            # MultiIndex\n            idx = MultiIndex.from_tuples(\n                [(\"あ\", \"いい\"), (\"う\", \"え\"), (\"おおお\", \"かかかか\"), (\"き\", \"くく\")]\n            )\n            df = DataFrame(\n                {\"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"], \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"]},\n                index=idx,\n            )\n            expected = (\n                \"                          a             b\\n\"\n                \"あ     いい      あああああ            あ\\n\"\n                \"う     え                い        いいい\\n\"\n                \"おおお かかかか          う            う\\n\"\n                \"き     くく          えええ  ええええええ\"\n            )\n            assert repr(df) == expected\n\n            # truncate\n            with option_context(\"display.max_rows\", 3, \"display.max_columns\", 3):\n\n                df = DataFrame(\n                    {\n                        \"a\": [\"あああああ\", \"い\", \"う\", \"えええ\"],\n                        \"b\": [\"あ\", \"いいい\", \"う\", \"ええええええ\"],\n                        \"c\": [\"お\", \"か\", \"ききき\", \"くくくくくく\"],\n                        \"ああああ\": [\"さ\", \"し\", \"す\", \"せ\"],\n                    },\n                    columns=[\"a\", \"b\", \"c\", \"ああああ\"],\n                )\n\n                expected = (\n                    \"             a  ... ああああ\\n\"\n                    \"0   あああああ  ...       さ\\n\"\n                    \"..         ...  ...      ...\\n\"\n                    \"3       えええ  ...       せ\\n\"\n                    \"\\n[4 rows x 4 columns]\"\n                )\n                assert repr(df) == expected\n\n                df.index = [\"あああ\", \"いいいい\", \"う\", \"aaa\"]\n                expected = (\n                    \"                 a  ... ああああ\\n\"\n                    \"あああ  あああああ  ...       さ\\n\"\n                    \"...            ...  ...      ...\\n\"\n                    \"aaa         えええ  ...       せ\\n\"\n                    \"\\n[4 rows x 4 columns]\"\n                )\n                assert repr(df) == expected\n\n            # ambiguous unicode\n            df = DataFrame(\n                {\"b\": [\"あ\", \"いいい\", \"¡¡\", \"ええええええ\"], \"あああああ\": [1, 222, 33333, 4]},\n                index=[\"a\", \"bb\", \"c\", \"¡¡¡\"],\n            )\n            expected = (\n                \"                b  あああああ\\n\"\n                \"a              あ           1\\n\"\n                \"bb         いいい         222\\n\"\n                \"c              ¡¡       33333\\n\"\n                \"¡¡¡  ええええええ           4\"\n            )\n            assert repr(df) == expected\n\n    def test_to_string_buffer_all_unicode(self):\n        buf = StringIO()\n\n        empty = DataFrame({\"c/\\u03c3\": Series(dtype=object)})\n        nonempty = DataFrame({\"c/\\u03c3\": Series([1, 2, 3])})\n\n        print(empty, file=buf)\n        print(nonempty, file=buf)\n\n        # this should work\n        buf.getvalue()\n\n    def test_to_string_with_col_space(self):\n        df = DataFrame(np.random.random(size=(1, 3)))\n        c10 = len(df.to_string(col_space=10).split(\"\\n\")[1])\n        c20 = len(df.to_string(col_space=20).split(\"\\n\")[1])\n        c30 = len(df.to_string(col_space=30).split(\"\\n\")[1])\n        assert c10 < c20 < c30\n\n        # GH 8230\n        # col_space wasn't being applied with header=False\n        with_header = df.to_string(col_space=20)\n        with_header_row1 = with_header.splitlines()[1]\n        no_header = df.to_string(col_space=20, header=False)\n        assert len(with_header_row1) == len(no_header)\n\n    def test_to_string_with_column_specific_col_space_raises(self):\n        df = DataFrame(np.random.random(size=(3, 3)), columns=[\"a\", \"b\", \"c\"])\n\n        msg = (\n            \"Col_space length\\\\(\\\\d+\\\\) should match \"\n            \"DataFrame number of columns\\\\(\\\\d+\\\\)\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            df.to_string(col_space=[30, 40])\n\n        with pytest.raises(ValueError, match=msg):\n            df.to_string(col_space=[30, 40, 50, 60])\n\n        msg = \"unknown column\"\n        with pytest.raises(ValueError, match=msg):\n            df.to_string(col_space={\"a\": \"foo\", \"b\": 23, \"d\": 34})\n\n    def test_to_string_with_column_specific_col_space(self):\n        df = DataFrame(np.random.random(size=(3, 3)), columns=[\"a\", \"b\", \"c\"])\n\n        result = df.to_string(col_space={\"a\": 10, \"b\": 11, \"c\": 12})\n        # 3 separating space + each col_space for (id, a, b, c)\n        assert len(result.split(\"\\n\")[1]) == (3 + 1 + 10 + 11 + 12)\n\n        result = df.to_string(col_space=[10, 11, 12])\n        assert len(result.split(\"\\n\")[1]) == (3 + 1 + 10 + 11 + 12)\n\n    @pytest.mark.parametrize(\n        \"index\",\n        [\n            tm.makeStringIndex,\n            tm.makeIntIndex,\n            tm.makeDateIndex,\n            tm.makePeriodIndex,\n        ],\n    )\n    @pytest.mark.parametrize(\"h\", [10, 20])\n    @pytest.mark.parametrize(\"w\", [10, 20])\n    def test_to_string_truncate_indices(self, index, h, w):\n        with option_context(\"display.expand_frame_repr\", False):\n            df = DataFrame(index=index(h), columns=tm.makeStringIndex(w))\n            with option_context(\"display.max_rows\", 15):\n                if h == 20:\n                    assert has_vertically_truncated_repr(df)\n                else:\n                    assert not has_vertically_truncated_repr(df)\n            with option_context(\"display.max_columns\", 15):\n                if w == 20:\n                    assert has_horizontally_truncated_repr(df)\n                else:\n                    assert not has_horizontally_truncated_repr(df)\n            with option_context(\"display.max_rows\", 15, \"display.max_columns\", 15):\n                if h == 20 and w == 20:\n                    assert has_doubly_truncated_repr(df)\n                else:\n                    assert not has_doubly_truncated_repr(df)\n\n    def test_to_string_truncate_multilevel(self):\n        arrays = [\n            [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n            [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n        ]\n        df = DataFrame(index=arrays, columns=arrays)\n        with option_context(\"display.max_rows\", 7, \"display.max_columns\", 7):\n            assert has_doubly_truncated_repr(df)\n\n    def test_truncate_with_different_dtypes(self):\n\n        # 11594, 12045\n        # when truncated the dtypes of the splits can differ\n\n        # 11594\n        s = Series(\n            [datetime(2012, 1, 1)] * 10\n            + [datetime(1012, 1, 2)]\n            + [datetime(2012, 1, 3)] * 10\n        )\n\n        with option_context(\"display.max_rows\", 8):\n            result = str(s)\n            assert \"object\" in result\n\n        # 12045\n        df = DataFrame({\"text\": [\"some words\"] + [None] * 9})\n\n        with option_context(\"display.max_rows\", 8, \"display.max_columns\", 3):\n            result = str(df)\n            assert \"None\" in result\n            assert \"NaN\" not in result\n\n    def test_truncate_with_different_dtypes_multiindex(self):\n        # GH#13000\n        df = DataFrame({\"Vals\": range(100)})\n        frame = pd.concat([df], keys=[\"Sweep\"], names=[\"Sweep\", \"Index\"])\n        result = repr(frame)\n\n        result2 = repr(frame.iloc[:5])\n        assert result.startswith(result2)\n\n    def test_datetimelike_frame(self):\n\n        # GH 12211\n        df = DataFrame({\"date\": [Timestamp(\"20130101\").tz_localize(\"UTC\")] + [NaT] * 5})\n\n        with option_context(\"display.max_rows\", 5):\n            result = str(df)\n            assert \"2013-01-01 00:00:00+00:00\" in result\n            assert \"NaT\" in result\n            assert \"...\" in result\n            assert \"[6 rows x 1 columns]\" in result\n\n        dts = [Timestamp(\"2011-01-01\", tz=\"US/Eastern\")] * 5 + [NaT] * 5\n        df = DataFrame({\"dt\": dts, \"x\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n        with option_context(\"display.max_rows\", 5):\n            expected = (\n                \"                          dt   x\\n\"\n                \"0  2011-01-01 00:00:00-05:00   1\\n\"\n                \"1  2011-01-01 00:00:00-05:00   2\\n\"\n                \"..                       ...  ..\\n\"\n                \"8                        NaT   9\\n\"\n                \"9                        NaT  10\\n\\n\"\n                \"[10 rows x 2 columns]\"\n            )\n            assert repr(df) == expected\n\n        dts = [NaT] * 5 + [Timestamp(\"2011-01-01\", tz=\"US/Eastern\")] * 5\n        df = DataFrame({\"dt\": dts, \"x\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n        with option_context(\"display.max_rows\", 5):\n            expected = (\n                \"                          dt   x\\n\"\n                \"0                        NaT   1\\n\"\n                \"1                        NaT   2\\n\"\n                \"..                       ...  ..\\n\"\n                \"8  2011-01-01 00:00:00-05:00   9\\n\"\n                \"9  2011-01-01 00:00:00-05:00  10\\n\\n\"\n                \"[10 rows x 2 columns]\"\n            )\n            assert repr(df) == expected\n\n        dts = [Timestamp(\"2011-01-01\", tz=\"Asia/Tokyo\")] * 5 + [\n            Timestamp(\"2011-01-01\", tz=\"US/Eastern\")\n        ] * 5\n        df = DataFrame({\"dt\": dts, \"x\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})\n        with option_context(\"display.max_rows\", 5):\n            expected = (\n                \"                           dt   x\\n\"\n                \"0   2011-01-01 00:00:00+09:00   1\\n\"\n                \"1   2011-01-01 00:00:00+09:00   2\\n\"\n                \"..                        ...  ..\\n\"\n                \"8   2011-01-01 00:00:00-05:00   9\\n\"\n                \"9   2011-01-01 00:00:00-05:00  10\\n\\n\"\n                \"[10 rows x 2 columns]\"\n            )\n            assert repr(df) == expected\n\n    @pytest.mark.parametrize(\n        \"start_date\",\n        [\n            \"2017-01-01 23:59:59.999999999\",\n            \"2017-01-01 23:59:59.99999999\",\n            \"2017-01-01 23:59:59.9999999\",\n            \"2017-01-01 23:59:59.999999\",\n            \"2017-01-01 23:59:59.99999\",\n            \"2017-01-01 23:59:59.9999\",\n        ],\n    )\n    def test_datetimeindex_highprecision(self, start_date):\n        # GH19030\n        # Check that high-precision time values for the end of day are\n        # included in repr for DatetimeIndex\n        df = DataFrame({\"A\": date_range(start=start_date, freq=\"D\", periods=5)})\n        result = str(df)\n        assert start_date in result\n\n        dti = date_range(start=start_date, freq=\"D\", periods=5)\n        df = DataFrame({\"A\": range(5)}, index=dti)\n        result = str(df.index)\n        assert start_date in result\n\n    def test_nonunicode_nonascii_alignment(self):\n        df = DataFrame([[\"aa\\xc3\\xa4\\xc3\\xa4\", 1], [\"bbbb\", 2]])\n        rep_str = df.to_string()\n        lines = rep_str.split(\"\\n\")\n        assert len(lines[1]) == len(lines[2])\n\n    def test_unicode_problem_decoding_as_ascii(self):\n        dm = DataFrame({\"c/\\u03c3\": Series({\"test\": np.nan})})\n        str(dm.to_string())\n\n    def test_string_repr_encoding(self, datapath):\n        filepath = datapath(\"io\", \"parser\", \"data\", \"unicode_series.csv\")\n        df = read_csv(filepath, header=None, encoding=\"latin1\")\n        repr(df)\n        repr(df[1])\n\n    def test_repr_corner(self):\n        # representing infs poses no problems\n        df = DataFrame({\"foo\": [-np.inf, np.inf]})\n        repr(df)\n\n    def test_frame_info_encoding(self):\n        index = [\"'Til There Was You (1997)\", \"ldum klaka (Cold Fever) (1994)\"]\n        fmt.set_option(\"display.max_rows\", 1)\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"], index=index)\n        repr(df)\n        repr(df.T)\n        fmt.set_option(\"display.max_rows\", 200)\n\n    def test_wide_repr(self):\n        with option_context(\n            \"mode.sim_interactive\",\n            True,\n            \"display.show_dimensions\",\n            True,\n            \"display.max_columns\",\n            20,\n        ):\n            max_cols = get_option(\"display.max_columns\")\n            df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))\n            with option_context(\"display.expand_frame_repr\", False):\n                rep_str = repr(df)\n\n            assert f\"10 rows x {max_cols - 1} columns\" in rep_str\n            with option_context(\"display.expand_frame_repr\", True):\n                wide_repr = repr(df)\n            assert rep_str != wide_repr\n\n            with option_context(\"display.width\", 120):\n                wider_repr = repr(df)\n                assert len(wider_repr) < len(wide_repr)\n\n    def test_wide_repr_wide_columns(self):\n        with option_context(\"mode.sim_interactive\", True, \"display.max_columns\", 20):\n            df = DataFrame(\n                np.random.randn(5, 3), columns=[\"a\" * 90, \"b\" * 90, \"c\" * 90]\n            )\n            rep_str = repr(df)\n\n            assert len(rep_str.splitlines()) == 20\n\n    def test_wide_repr_named(self):\n        with option_context(\"mode.sim_interactive\", True, \"display.max_columns\", 20):\n            max_cols = get_option(\"display.max_columns\")\n            df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))\n            df.index.name = \"DataFrame Index\"\n            with option_context(\"display.expand_frame_repr\", False):\n                rep_str = repr(df)\n            with option_context(\"display.expand_frame_repr\", True):\n                wide_repr = repr(df)\n            assert rep_str != wide_repr\n\n            with option_context(\"display.width\", 150):\n                wider_repr = repr(df)\n                assert len(wider_repr) < len(wide_repr)\n\n            for line in wide_repr.splitlines()[1::13]:\n                assert \"DataFrame Index\" in line\n\n    def test_wide_repr_multiindex(self):\n        with option_context(\"mode.sim_interactive\", True, \"display.max_columns\", 20):\n            midx = MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))\n            max_cols = get_option(\"display.max_columns\")\n            df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)), index=midx)\n            df.index.names = [\"Level 0\", \"Level 1\"]\n            with option_context(\"display.expand_frame_repr\", False):\n                rep_str = repr(df)\n            with option_context(\"display.expand_frame_repr\", True):\n                wide_repr = repr(df)\n            assert rep_str != wide_repr\n\n            with option_context(\"display.width\", 150):\n                wider_repr = repr(df)\n                assert len(wider_repr) < len(wide_repr)\n\n            for line in wide_repr.splitlines()[1::13]:\n                assert \"Level 0 Level 1\" in line\n\n    def test_wide_repr_multiindex_cols(self):\n        with option_context(\"mode.sim_interactive\", True, \"display.max_columns\", 20):\n            max_cols = get_option(\"display.max_columns\")\n            midx = MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))\n            mcols = MultiIndex.from_arrays(tm.rands_array(3, size=(2, max_cols - 1)))\n            df = DataFrame(\n                tm.rands_array(25, (10, max_cols - 1)), index=midx, columns=mcols\n            )\n            df.index.names = [\"Level 0\", \"Level 1\"]\n            with option_context(\"display.expand_frame_repr\", False):\n                rep_str = repr(df)\n            with option_context(\"display.expand_frame_repr\", True):\n                wide_repr = repr(df)\n            assert rep_str != wide_repr\n\n        with option_context(\"display.width\", 150, \"display.max_columns\", 20):\n            wider_repr = repr(df)\n            assert len(wider_repr) < len(wide_repr)\n\n    def test_wide_repr_unicode(self):\n        with option_context(\"mode.sim_interactive\", True, \"display.max_columns\", 20):\n            max_cols = 20\n            df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))\n            with option_context(\"display.expand_frame_repr\", False):\n                rep_str = repr(df)\n            with option_context(\"display.expand_frame_repr\", True):\n                wide_repr = repr(df)\n            assert rep_str != wide_repr\n\n            with option_context(\"display.width\", 150):\n                wider_repr = repr(df)\n                assert len(wider_repr) < len(wide_repr)\n\n    def test_wide_repr_wide_long_columns(self):\n        with option_context(\"mode.sim_interactive\", True):\n            df = DataFrame({\"a\": [\"a\" * 30, \"b\" * 30], \"b\": [\"c\" * 70, \"d\" * 80]})\n\n            result = repr(df)\n            assert \"ccccc\" in result\n            assert \"ddddd\" in result\n\n    def test_long_series(self):\n        n = 1000\n        s = Series(\n            np.random.randint(-50, 50, n),\n            index=[f\"s{x:04d}\" for x in range(n)],\n            dtype=\"int64\",\n        )\n\n        str_rep = str(s)\n        nmatches = len(re.findall(\"dtype\", str_rep))\n        assert nmatches == 1\n\n    def test_index_with_nan(self):\n        #  GH 2850\n        df = DataFrame(\n            {\n                \"id1\": {0: \"1a3\", 1: \"9h4\"},\n                \"id2\": {0: np.nan, 1: \"d67\"},\n                \"id3\": {0: \"78d\", 1: \"79d\"},\n                \"value\": {0: 123, 1: 64},\n            }\n        )\n\n        # multi-index\n        y = df.set_index([\"id1\", \"id2\", \"id3\"])\n        result = y.to_string()\n        expected = (\n            \"             value\\nid1 id2 id3       \\n\"\n            \"1a3 NaN 78d    123\\n9h4 d67 79d     64\"\n        )\n        assert result == expected\n\n        # index\n        y = df.set_index(\"id2\")\n        result = y.to_string()\n        expected = (\n            \"     id1  id3  value\\nid2                 \\n\"\n            \"NaN  1a3  78d    123\\nd67  9h4  79d     64\"\n        )\n        assert result == expected\n\n        # with append (this failed in 0.12)\n        y = df.set_index([\"id1\", \"id2\"]).set_index(\"id3\", append=True)\n        result = y.to_string()\n        expected = (\n            \"             value\\nid1 id2 id3       \\n\"\n            \"1a3 NaN 78d    123\\n9h4 d67 79d     64\"\n        )\n        assert result == expected\n\n        # all-nan in mi\n        df2 = df.copy()\n        df2.loc[:, \"id2\"] = np.nan\n        y = df2.set_index(\"id2\")\n        result = y.to_string()\n        expected = (\n            \"     id1  id3  value\\nid2                 \\n\"\n            \"NaN  1a3  78d    123\\nNaN  9h4  79d     64\"\n        )\n        assert result == expected\n\n        # partial nan in mi\n        df2 = df.copy()\n        df2.loc[:, \"id2\"] = np.nan\n        y = df2.set_index([\"id2\", \"id3\"])\n        result = y.to_string()\n        expected = (\n            \"         id1  value\\nid2 id3            \\n\"\n            \"NaN 78d  1a3    123\\n    79d  9h4     64\"\n        )\n        assert result == expected\n\n        df = DataFrame(\n            {\n                \"id1\": {0: np.nan, 1: \"9h4\"},\n                \"id2\": {0: np.nan, 1: \"d67\"},\n                \"id3\": {0: np.nan, 1: \"79d\"},\n                \"value\": {0: 123, 1: 64},\n            }\n        )\n\n        y = df.set_index([\"id1\", \"id2\", \"id3\"])\n        result = y.to_string()\n        expected = (\n            \"             value\\nid1 id2 id3       \\n\"\n            \"NaN NaN NaN    123\\n9h4 d67 79d     64\"\n        )\n        assert result == expected\n\n    def test_to_string(self):\n\n        # big mixed\n        biggie = DataFrame(\n            {\"A\": np.random.randn(200), \"B\": tm.makeStringIndex(200)},\n            index=np.arange(200),\n        )\n\n        biggie.loc[:20, \"A\"] = np.nan\n        biggie.loc[:20, \"B\"] = np.nan\n        s = biggie.to_string()\n\n        buf = StringIO()\n        retval = biggie.to_string(buf=buf)\n        assert retval is None\n        assert buf.getvalue() == s\n\n        assert isinstance(s, str)\n\n        # print in right order\n        result = biggie.to_string(\n            columns=[\"B\", \"A\"], col_space=17, float_format=\"%.5f\".__mod__\n        )\n        lines = result.split(\"\\n\")\n        header = lines[0].strip().split()\n        joined = \"\\n\".join([re.sub(r\"\\s+\", \" \", x).strip() for x in lines[1:]])\n        recons = read_csv(StringIO(joined), names=header, header=None, sep=\" \")\n        tm.assert_series_equal(recons[\"B\"], biggie[\"B\"])\n        assert recons[\"A\"].count() == biggie[\"A\"].count()\n        assert (np.abs(recons[\"A\"].dropna() - biggie[\"A\"].dropna()) < 0.1).all()\n\n        # expected = ['B', 'A']\n        # assert header == expected\n\n        result = biggie.to_string(columns=[\"A\"], col_space=17)\n        header = result.split(\"\\n\")[0].strip().split()\n        expected = [\"A\"]\n        assert header == expected\n\n        biggie.to_string(columns=[\"B\", \"A\"], formatters={\"A\": lambda x: f\"{x:.1f}\"})\n\n        biggie.to_string(columns=[\"B\", \"A\"], float_format=str)\n        biggie.to_string(columns=[\"B\", \"A\"], col_space=12, float_format=str)\n\n        frame = DataFrame(index=np.arange(200))\n        frame.to_string()\n\n    def test_to_string_no_header(self):\n        df = DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\n        df_s = df.to_string(header=False)\n        expected = \"0  1  4\\n1  2  5\\n2  3  6\"\n\n        assert df_s == expected\n\n    def test_to_string_specified_header(self):\n        df = DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\n        df_s = df.to_string(header=[\"X\", \"Y\"])\n        expected = \"   X  Y\\n0  1  4\\n1  2  5\\n2  3  6\"\n\n        assert df_s == expected\n\n        msg = \"Writing 2 cols but got 1 aliases\"\n        with pytest.raises(ValueError, match=msg):\n            df.to_string(header=[\"X\"])\n\n    def test_to_string_no_index(self):\n        # GH 16839, GH 13032\n        df = DataFrame({\"x\": [11, 22], \"y\": [33, -44], \"z\": [\"AAA\", \"   \"]})\n\n        df_s = df.to_string(index=False)\n        # Leading space is expected for positive numbers.\n        expected = \" x   y   z\\n11  33 AAA\\n22 -44    \"\n        assert df_s == expected\n\n        df_s = df[[\"y\", \"x\", \"z\"]].to_string(index=False)\n        expected = \"  y  x   z\\n 33 11 AAA\\n-44 22    \"\n        assert df_s == expected\n\n    def test_to_string_line_width_no_index(self):\n        # GH 13998, GH 22505\n        df = DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\n        df_s = df.to_string(line_width=1, index=False)\n        expected = \" x  \\\\\\n 1   \\n 2   \\n 3   \\n\\n y  \\n 4  \\n 5  \\n 6  \"\n\n        assert df_s == expected\n\n        df = DataFrame({\"x\": [11, 22, 33], \"y\": [4, 5, 6]})\n\n        df_s = df.to_string(line_width=1, index=False)\n        expected = \" x  \\\\\\n11   \\n22   \\n33   \\n\\n y  \\n 4  \\n 5  \\n 6  \"\n\n        assert df_s == expected\n\n        df = DataFrame({\"x\": [11, 22, -33], \"y\": [4, 5, -6]})\n\n        df_s = df.to_string(line_width=1, index=False)\n        expected = \"  x  \\\\\\n 11   \\n 22   \\n-33   \\n\\n y  \\n 4  \\n 5  \\n-6  \"\n\n        assert df_s == expected\n\n    def test_to_string_float_formatting(self):\n        tm.reset_display_options()\n        fmt.set_option(\n            \"display.precision\",\n            5,\n            \"display.notebook_repr_html\",\n            False,\n        )\n\n        df = DataFrame(\n            {\"x\": [0, 0.25, 3456.000, 12e45, 1.64e6, 1.7e8, 1.253456, np.pi, -1e6]}\n        )\n\n        df_s = df.to_string()\n\n        if _three_digit_exp():\n            expected = (\n                \"              x\\n0  0.00000e+000\\n1  2.50000e-001\\n\"\n                \"2  3.45600e+003\\n3  1.20000e+046\\n4  1.64000e+006\\n\"\n                \"5  1.70000e+008\\n6  1.25346e+000\\n7  3.14159e+000\\n\"\n                \"8 -1.00000e+006\"\n            )\n        else:\n            expected = (\n                \"             x\\n0  0.00000e+00\\n1  2.50000e-01\\n\"\n                \"2  3.45600e+03\\n3  1.20000e+46\\n4  1.64000e+06\\n\"\n                \"5  1.70000e+08\\n6  1.25346e+00\\n7  3.14159e+00\\n\"\n                \"8 -1.00000e+06\"\n            )\n        assert df_s == expected\n\n        df = DataFrame({\"x\": [3234, 0.253]})\n        df_s = df.to_string()\n\n        expected = \"          x\\n0  3234.000\\n1     0.253\"\n        assert df_s == expected\n\n        tm.reset_display_options()\n        assert get_option(\"display.precision\") == 6\n\n        df = DataFrame({\"x\": [1e9, 0.2512]})\n        df_s = df.to_string()\n\n        if _three_digit_exp():\n            expected = \"               x\\n0  1.000000e+009\\n1  2.512000e-001\"\n        else:\n            expected = \"              x\\n0  1.000000e+09\\n1  2.512000e-01\"\n        assert df_s == expected\n\n    def test_to_string_float_format_no_fixed_width(self):\n\n        # GH 21625\n        df = DataFrame({\"x\": [0.19999]})\n        expected = \"      x\\n0 0.200\"\n        assert df.to_string(float_format=\"%.3f\") == expected\n\n        # GH 22270\n        df = DataFrame({\"x\": [100.0]})\n        expected = \"    x\\n0 100\"\n        assert df.to_string(float_format=\"%.0f\") == expected\n\n    def test_to_string_small_float_values(self):\n        df = DataFrame({\"a\": [1.5, 1e-17, -5.5e-7]})\n\n        result = df.to_string()\n        # sadness per above\n        if _three_digit_exp():\n            expected = (\n                \"               a\\n\"\n                \"0  1.500000e+000\\n\"\n                \"1  1.000000e-017\\n\"\n                \"2 -5.500000e-007\"\n            )\n        else:\n            expected = (\n                \"              a\\n\"\n                \"0  1.500000e+00\\n\"\n                \"1  1.000000e-17\\n\"\n                \"2 -5.500000e-07\"\n            )\n        assert result == expected\n\n        # but not all exactly zero\n        df = df * 0\n        result = df.to_string()\n        expected = \"   0\\n0  0\\n1  0\\n2 -0\"\n\n    def test_to_string_float_index(self):\n        index = Index([1.5, 2, 3, 4, 5])\n        df = DataFrame(np.arange(5), index=index)\n\n        result = df.to_string()\n        expected = \"     0\\n1.5  0\\n2.0  1\\n3.0  2\\n4.0  3\\n5.0  4\"\n        assert result == expected\n\n    def test_to_string_complex_float_formatting(self):\n        # GH #25514, 25745\n        with option_context(\"display.precision\", 5):\n            df = DataFrame(\n                {\n                    \"x\": [\n                        (0.4467846931321966 + 0.0715185102060818j),\n                        (0.2739442392974528 + 0.23515228785438969j),\n                        (0.26974928742135185 + 0.3250604054898979j),\n                        (-1j),\n                    ]\n                }\n            )\n            result = df.to_string()\n            expected = (\n                \"                  x\\n0  0.44678+0.07152j\\n\"\n                \"1  0.27394+0.23515j\\n\"\n                \"2  0.26975+0.32506j\\n\"\n                \"3 -0.00000-1.00000j\"\n            )\n            assert result == expected\n\n    def test_to_string_ascii_error(self):\n        data = [\n            (\n                \"0  \",\n                \"                        .gitignore \",\n                \"     5 \",\n                \" \\xe2\\x80\\xa2\\xe2\\x80\\xa2\\xe2\\x80\\xa2\\xe2\\x80\\xa2\\xe2\\x80\\xa2\",\n            )\n        ]\n        df = DataFrame(data)\n\n        # it works!\n        repr(df)\n\n    def test_to_string_int_formatting(self):\n        df = DataFrame({\"x\": [-15, 20, 25, -35]})\n        assert issubclass(df[\"x\"].dtype.type, np.integer)\n\n        output = df.to_string()\n        expected = \"    x\\n0 -15\\n1  20\\n2  25\\n3 -35\"\n        assert output == expected\n\n    def test_to_string_index_formatter(self):\n        df = DataFrame([range(5), range(5, 10), range(10, 15)])\n\n        rs = df.to_string(formatters={\"__index__\": lambda x: \"abc\"[x]})\n\n        xp = \"\"\"\\\n    0   1   2   3   4\na   0   1   2   3   4\nb   5   6   7   8   9\nc  10  11  12  13  14\\\n\"\"\"\n\n        assert rs == xp\n\n    def test_to_string_left_justify_cols(self):\n        tm.reset_display_options()\n        df = DataFrame({\"x\": [3234, 0.253]})\n        df_s = df.to_string(justify=\"left\")\n        expected = \"   x       \\n0  3234.000\\n1     0.253\"\n        assert df_s == expected\n\n    def test_to_string_format_na(self):\n        tm.reset_display_options()\n        df = DataFrame(\n            {\n                \"A\": [np.nan, -1, -2.1234, 3, 4],\n                \"B\": [np.nan, \"foo\", \"foooo\", \"fooooo\", \"bar\"],\n            }\n        )\n        result = df.to_string()\n\n        expected = (\n            \"        A       B\\n\"\n            \"0     NaN     NaN\\n\"\n            \"1 -1.0000     foo\\n\"\n            \"2 -2.1234   foooo\\n\"\n            \"3  3.0000  fooooo\\n\"\n            \"4  4.0000     bar\"\n        )\n        assert result == expected\n\n        df = DataFrame(\n            {\n                \"A\": [np.nan, -1.0, -2.0, 3.0, 4.0],\n                \"B\": [np.nan, \"foo\", \"foooo\", \"fooooo\", \"bar\"],\n            }\n        )\n        result = df.to_string()\n\n        expected = (\n            \"     A       B\\n\"\n            \"0  NaN     NaN\\n\"\n            \"1 -1.0     foo\\n\"\n            \"2 -2.0   foooo\\n\"\n            \"3  3.0  fooooo\\n\"\n            \"4  4.0     bar\"\n        )\n        assert result == expected\n\n    def test_to_string_format_inf(self):\n        # Issue #24861\n        tm.reset_display_options()\n        df = DataFrame(\n            {\n                \"A\": [-np.inf, np.inf, -1, -2.1234, 3, 4],\n                \"B\": [-np.inf, np.inf, \"foo\", \"foooo\", \"fooooo\", \"bar\"],\n            }\n        )\n        result = df.to_string()\n\n        expected = (\n            \"        A       B\\n\"\n            \"0    -inf    -inf\\n\"\n            \"1     inf     inf\\n\"\n            \"2 -1.0000     foo\\n\"\n            \"3 -2.1234   foooo\\n\"\n            \"4  3.0000  fooooo\\n\"\n            \"5  4.0000     bar\"\n        )\n        assert result == expected\n\n        df = DataFrame(\n            {\n                \"A\": [-np.inf, np.inf, -1.0, -2.0, 3.0, 4.0],\n                \"B\": [-np.inf, np.inf, \"foo\", \"foooo\", \"fooooo\", \"bar\"],\n            }\n        )\n        result = df.to_string()\n\n        expected = (\n            \"     A       B\\n\"\n            \"0 -inf    -inf\\n\"\n            \"1  inf     inf\\n\"\n            \"2 -1.0     foo\\n\"\n            \"3 -2.0   foooo\\n\"\n            \"4  3.0  fooooo\\n\"\n            \"5  4.0     bar\"\n        )\n        assert result == expected\n\n    def test_to_string_decimal(self):\n        # Issue #23614\n        df = DataFrame({\"A\": [6.0, 3.1, 2.2]})\n        expected = \"     A\\n0  6,0\\n1  3,1\\n2  2,2\"\n        assert df.to_string(decimal=\",\") == expected\n\n    def test_to_string_line_width(self):\n        df = DataFrame(123, index=range(10, 15), columns=range(30))\n        s = df.to_string(line_width=80)\n        assert max(len(line) for line in s.split(\"\\n\")) == 80\n\n    def test_show_dimensions(self):\n        df = DataFrame(123, index=range(10, 15), columns=range(30))\n\n        with option_context(\n            \"display.max_rows\",\n            10,\n            \"display.max_columns\",\n            40,\n            \"display.width\",\n            500,\n            \"display.expand_frame_repr\",\n            \"info\",\n            \"display.show_dimensions\",\n            True,\n        ):\n            assert \"5 rows\" in str(df)\n            assert \"5 rows\" in df._repr_html_()\n        with option_context(\n            \"display.max_rows\",\n            10,\n            \"display.max_columns\",\n            40,\n            \"display.width\",\n            500,\n            \"display.expand_frame_repr\",\n            \"info\",\n            \"display.show_dimensions\",\n            False,\n        ):\n            assert \"5 rows\" not in str(df)\n            assert \"5 rows\" not in df._repr_html_()\n        with option_context(\n            \"display.max_rows\",\n            2,\n            \"display.max_columns\",\n            2,\n            \"display.width\",\n            500,\n            \"display.expand_frame_repr\",\n            \"info\",\n            \"display.show_dimensions\",\n            \"truncate\",\n        ):\n            assert \"5 rows\" in str(df)\n            assert \"5 rows\" in df._repr_html_()\n        with option_context(\n            \"display.max_rows\",\n            10,\n            \"display.max_columns\",\n            40,\n            \"display.width\",\n            500,\n            \"display.expand_frame_repr\",\n            \"info\",\n            \"display.show_dimensions\",\n            \"truncate\",\n        ):\n            assert \"5 rows\" not in str(df)\n            assert \"5 rows\" not in df._repr_html_()\n\n    def test_repr_html(self, float_frame):\n        df = float_frame\n        df._repr_html_()\n\n        fmt.set_option(\"display.max_rows\", 1, \"display.max_columns\", 1)\n        df._repr_html_()\n\n        fmt.set_option(\"display.notebook_repr_html\", False)\n        df._repr_html_()\n\n        tm.reset_display_options()\n\n        df = DataFrame([[1, 2], [3, 4]])\n        fmt.set_option(\"display.show_dimensions\", True)\n        assert \"2 rows\" in df._repr_html_()\n        fmt.set_option(\"display.show_dimensions\", False)\n        assert \"2 rows\" not in df._repr_html_()\n\n        tm.reset_display_options()\n\n    def test_repr_html_mathjax(self):\n        df = DataFrame([[1, 2], [3, 4]])\n        assert \"tex2jax_ignore\" not in df._repr_html_()\n\n        with option_context(\"display.html.use_mathjax\", False):\n            assert \"tex2jax_ignore\" in df._repr_html_()\n\n    def test_repr_html_wide(self):\n        max_cols = 20\n        df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            assert \"...\" not in df._repr_html_()\n\n        wide_df = DataFrame(tm.rands_array(25, size=(10, max_cols + 1)))\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            assert \"...\" in wide_df._repr_html_()\n\n    def test_repr_html_wide_multiindex_cols(self):\n        max_cols = 20\n\n        mcols = MultiIndex.from_product(\n            [np.arange(max_cols // 2), [\"foo\", \"bar\"]], names=[\"first\", \"second\"]\n        )\n        df = DataFrame(tm.rands_array(25, size=(10, len(mcols))), columns=mcols)\n        reg_repr = df._repr_html_()\n        assert \"...\" not in reg_repr\n\n        mcols = MultiIndex.from_product(\n            (np.arange(1 + (max_cols // 2)), [\"foo\", \"bar\"]), names=[\"first\", \"second\"]\n        )\n        df = DataFrame(tm.rands_array(25, size=(10, len(mcols))), columns=mcols)\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            assert \"...\" in df._repr_html_()\n\n    def test_repr_html_long(self):\n        with option_context(\"display.max_rows\", 60):\n            max_rows = get_option(\"display.max_rows\")\n            h = max_rows - 1\n            df = DataFrame({\"A\": np.arange(1, 1 + h), \"B\": np.arange(41, 41 + h)})\n            reg_repr = df._repr_html_()\n            assert \"..\" not in reg_repr\n            assert str(41 + max_rows // 2) in reg_repr\n\n            h = max_rows + 1\n            df = DataFrame({\"A\": np.arange(1, 1 + h), \"B\": np.arange(41, 41 + h)})\n            long_repr = df._repr_html_()\n            assert \"..\" in long_repr\n            assert str(41 + max_rows // 2) not in long_repr\n            assert f\"{h} rows \" in long_repr\n            assert \"2 columns\" in long_repr\n\n    def test_repr_html_float(self):\n        with option_context(\"display.max_rows\", 60):\n\n            max_rows = get_option(\"display.max_rows\")\n            h = max_rows - 1\n            df = DataFrame(\n                {\n                    \"idx\": np.linspace(-10, 10, h),\n                    \"A\": np.arange(1, 1 + h),\n                    \"B\": np.arange(41, 41 + h),\n                }\n            ).set_index(\"idx\")\n            reg_repr = df._repr_html_()\n            assert \"..\" not in reg_repr\n            assert f\"<td>{40 + h}</td>\" in reg_repr\n\n            h = max_rows + 1\n            df = DataFrame(\n                {\n                    \"idx\": np.linspace(-10, 10, h),\n                    \"A\": np.arange(1, 1 + h),\n                    \"B\": np.arange(41, 41 + h),\n                }\n            ).set_index(\"idx\")\n            long_repr = df._repr_html_()\n            assert \"..\" in long_repr\n            assert \"<td>31</td>\" not in long_repr\n            assert f\"{h} rows \" in long_repr\n            assert \"2 columns\" in long_repr\n\n    def test_repr_html_long_multiindex(self):\n        max_rows = 60\n        max_L1 = max_rows // 2\n\n        tuples = list(itertools.product(np.arange(max_L1), [\"foo\", \"bar\"]))\n        idx = MultiIndex.from_tuples(tuples, names=[\"first\", \"second\"])\n        df = DataFrame(np.random.randn(max_L1 * 2, 2), index=idx, columns=[\"A\", \"B\"])\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            reg_repr = df._repr_html_()\n        assert \"...\" not in reg_repr\n\n        tuples = list(itertools.product(np.arange(max_L1 + 1), [\"foo\", \"bar\"]))\n        idx = MultiIndex.from_tuples(tuples, names=[\"first\", \"second\"])\n        df = DataFrame(\n            np.random.randn((max_L1 + 1) * 2, 2), index=idx, columns=[\"A\", \"B\"]\n        )\n        long_repr = df._repr_html_()\n        assert \"...\" in long_repr\n\n    def test_repr_html_long_and_wide(self):\n        max_cols = 20\n        max_rows = 60\n\n        h, w = max_rows - 1, max_cols - 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            assert \"...\" not in df._repr_html_()\n\n        h, w = max_rows + 1, max_cols + 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        with option_context(\"display.max_rows\", 60, \"display.max_columns\", 20):\n            assert \"...\" in df._repr_html_()\n\n    def test_info_repr(self):\n        # GH#21746 For tests inside a terminal (i.e. not CI) we need to detect\n        # the terminal size to ensure that we try to print something \"too big\"\n        term_width, term_height = get_terminal_size()\n\n        max_rows = 60\n        max_cols = 20 + (max(term_width, 80) - 80) // 4\n        # Long\n        h, w = max_rows + 1, max_cols - 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        assert has_vertically_truncated_repr(df)\n        with option_context(\"display.large_repr\", \"info\"):\n            assert has_info_repr(df)\n\n        # Wide\n        h, w = max_rows - 1, max_cols + 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        assert has_horizontally_truncated_repr(df)\n        with option_context(\n            \"display.large_repr\", \"info\", \"display.max_columns\", max_cols\n        ):\n            assert has_info_repr(df)\n\n    def test_info_repr_max_cols(self):\n        # GH #6939\n        df = DataFrame(np.random.randn(10, 5))\n        with option_context(\n            \"display.large_repr\",\n            \"info\",\n            \"display.max_columns\",\n            1,\n            \"display.max_info_columns\",\n            4,\n        ):\n            assert has_non_verbose_info_repr(df)\n\n        with option_context(\n            \"display.large_repr\",\n            \"info\",\n            \"display.max_columns\",\n            1,\n            \"display.max_info_columns\",\n            5,\n        ):\n            assert not has_non_verbose_info_repr(df)\n\n        # test verbose overrides\n        # fmt.set_option('display.max_info_columns', 4)  # exceeded\n\n    def test_info_repr_html(self):\n        max_rows = 60\n        max_cols = 20\n        # Long\n        h, w = max_rows + 1, max_cols - 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        assert r\"&lt;class\" not in df._repr_html_()\n        with option_context(\"display.large_repr\", \"info\"):\n            assert r\"&lt;class\" in df._repr_html_()\n\n        # Wide\n        h, w = max_rows - 1, max_cols + 1\n        df = DataFrame({k: np.arange(1, 1 + h) for k in np.arange(w)})\n        assert \"<class\" not in df._repr_html_()\n        with option_context(\n            \"display.large_repr\", \"info\", \"display.max_columns\", max_cols\n        ):\n            assert \"&lt;class\" in df._repr_html_()\n\n    def test_fake_qtconsole_repr_html(self, float_frame):\n        df = float_frame\n\n        def get_ipython():\n            return {\"config\": {\"KernelApp\": {\"parent_appname\": \"ipython-qtconsole\"}}}\n\n        repstr = df._repr_html_()\n        assert repstr is not None\n\n        fmt.set_option(\"display.max_rows\", 5, \"display.max_columns\", 2)\n        repstr = df._repr_html_()\n\n        assert \"class\" in repstr  # info fallback\n        tm.reset_display_options()\n\n    def test_pprint_pathological_object(self):\n        \"\"\"\n        If the test fails, it at least won't hang.\n        \"\"\"\n\n        class A:\n            def __getitem__(self, key):\n                return 3  # obviously simplified\n\n        df = DataFrame([A()])\n        repr(df)  # just don't die\n\n    def test_float_trim_zeros(self):\n        vals = [\n            2.08430917305e10,\n            3.52205017305e10,\n            2.30674817305e10,\n            2.03954217305e10,\n            5.59897817305e10,\n        ]\n        skip = True\n        for line in repr(DataFrame({\"A\": vals})).split(\"\\n\")[:-2]:\n            if line.startswith(\"dtype:\"):\n                continue\n            if _three_digit_exp():\n                assert (\"+010\" in line) or skip\n            else:\n                assert (\"+10\" in line) or skip\n            skip = False\n\n    @pytest.mark.parametrize(\n        \"data, expected\",\n        [\n            ([\"3.50\"], \"0    3.50\\ndtype: object\"),\n            ([1.20, \"1.00\"], \"0     1.2\\n1    1.00\\ndtype: object\"),\n            ([np.nan], \"0   NaN\\ndtype: float64\"),\n            ([None], \"0    None\\ndtype: object\"),\n            ([\"3.50\", np.nan], \"0    3.50\\n1     NaN\\ndtype: object\"),\n            ([3.50, np.nan], \"0    3.5\\n1    NaN\\ndtype: float64\"),\n            ([3.50, np.nan, \"3.50\"], \"0     3.5\\n1     NaN\\n2    3.50\\ndtype: object\"),\n            ([3.50, None, \"3.50\"], \"0     3.5\\n1    None\\n2    3.50\\ndtype: object\"),\n        ],\n    )\n    def test_repr_str_float_truncation(self, data, expected):\n        # GH#38708\n        series = Series(data)\n        result = repr(series)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        \"float_format,expected\",\n        [\n            (\"{:,.0f}\".format, \"0   1,000\\n1    test\\ndtype: object\"),\n            (\"{:.4f}\".format, \"0   1000.0000\\n1        test\\ndtype: object\"),\n        ],\n    )\n    def test_repr_float_format_in_object_col(self, float_format, expected):\n        # GH#40024\n        df = Series([1000.0, \"test\"])\n        with option_context(\"display.float_format\", float_format):\n            result = repr(df)\n\n        assert result == expected\n\n    def test_dict_entries(self):\n        df = DataFrame({\"A\": [{\"a\": 1, \"b\": 2}]})\n\n        val = df.to_string()\n        assert \"'a': 1\" in val\n        assert \"'b': 2\" in val\n\n    def test_categorical_columns(self):\n        # GH35439\n        data = [[4, 2], [3, 2], [4, 3]]\n        cols = [\"aaaaaaaaa\", \"b\"]\n        df = DataFrame(data, columns=cols)\n        df_cat_cols = DataFrame(data, columns=pd.CategoricalIndex(cols))\n\n        assert df.to_string() == df_cat_cols.to_string()\n\n    def test_period(self):\n        # GH 12615\n        df = DataFrame(\n            {\n                \"A\": pd.period_range(\"2013-01\", periods=4, freq=\"M\"),\n                \"B\": [\n                    pd.Period(\"2011-01\", freq=\"M\"),\n                    pd.Period(\"2011-02-01\", freq=\"D\"),\n                    pd.Period(\"2011-03-01 09:00\", freq=\"H\"),\n                    pd.Period(\"2011-04\", freq=\"M\"),\n                ],\n                \"C\": list(\"abcd\"),\n            }\n        )\n        exp = (\n            \"         A                 B  C\\n\"\n            \"0  2013-01           2011-01  a\\n\"\n            \"1  2013-02        2011-02-01  b\\n\"\n            \"2  2013-03  2011-03-01 09:00  c\\n\"\n            \"3  2013-04           2011-04  d\"\n        )\n        assert str(df) == exp\n\n    @pytest.mark.parametrize(\n        \"length, max_rows, min_rows, expected\",\n        [\n            (10, 10, 10, 10),\n            (10, 10, None, 10),\n            (10, 8, None, 8),\n            (20, 30, 10, 30),  # max_rows > len(frame), hence max_rows\n            (50, 30, 10, 10),  # max_rows < len(frame), hence min_rows\n            (100, 60, 10, 10),  # same\n            (60, 60, 10, 60),  # edge case\n            (61, 60, 10, 10),  # edge case\n        ],\n    )\n    def test_max_rows_fitted(self, length, min_rows, max_rows, expected):\n        \"\"\"Check that display logic is correct.\n\n        GH #37359\n\n        See description here:\n        https://pandas.pydata.org/docs/dev/user_guide/options.html#frequently-used-options\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(\n            DataFrame(np.random.rand(length, 3)),\n            max_rows=max_rows,\n            min_rows=min_rows,\n        )\n        result = formatter.max_rows_fitted\n        assert result == expected\n\n\ndef gen_series_formatting():\n    s1 = Series([\"a\"] * 100)\n    s2 = Series([\"ab\"] * 100)\n    s3 = Series([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"])\n    s4 = s3[::-1]\n    test_sers = {\"onel\": s1, \"twol\": s2, \"asc\": s3, \"desc\": s4}\n    return test_sers\n\n\nclass TestSeriesFormatting:\n    def test_repr_unicode(self):\n        s = Series([\"\\u03c3\"] * 10)\n        repr(s)\n\n        a = Series([\"\\u05d0\"] * 1000)\n        a.name = \"title1\"\n        repr(a)\n\n    def test_to_string(self):\n        ts = tm.makeTimeSeries()\n        buf = StringIO()\n\n        s = ts.to_string()\n\n        retval = ts.to_string(buf=buf)\n        assert retval is None\n        assert buf.getvalue().strip() == s\n\n        # pass float_format\n        format = \"%.4f\".__mod__\n        result = ts.to_string(float_format=format)\n        result = [x.split()[1] for x in result.split(\"\\n\")[:-1]]\n        expected = [format(x) for x in ts]\n        assert result == expected\n\n        # empty string\n        result = ts[:0].to_string()\n        assert result == \"Series([], Freq: B)\"\n\n        result = ts[:0].to_string(length=0)\n        assert result == \"Series([], Freq: B)\"\n\n        # name and length\n        cp = ts.copy()\n        cp.name = \"foo\"\n        result = cp.to_string(length=True, name=True, dtype=True)\n        last_line = result.split(\"\\n\")[-1].strip()\n        assert last_line == (f\"Freq: B, Name: foo, Length: {len(cp)}, dtype: float64\")\n\n    def test_freq_name_separation(self):\n        s = Series(\n            np.random.randn(10), index=date_range(\"1/1/2000\", periods=10), name=0\n        )\n\n        result = repr(s)\n        assert \"Freq: D, Name: 0\" in result\n\n    def test_to_string_mixed(self):\n        s = Series([\"foo\", np.nan, -1.23, 4.56])\n        result = s.to_string()\n        expected = \"0     foo\\n\" + \"1     NaN\\n\" + \"2   -1.23\\n\" + \"3    4.56\"\n        assert result == expected\n\n        # but don't count NAs as floats\n        s = Series([\"foo\", np.nan, \"bar\", \"baz\"])\n        result = s.to_string()\n        expected = \"0    foo\\n\" + \"1    NaN\\n\" + \"2    bar\\n\" + \"3    baz\"\n        assert result == expected\n\n        s = Series([\"foo\", 5, \"bar\", \"baz\"])\n        result = s.to_string()\n        expected = \"0    foo\\n\" + \"1      5\\n\" + \"2    bar\\n\" + \"3    baz\"\n        assert result == expected\n\n    def test_to_string_float_na_spacing(self):\n        s = Series([0.0, 1.5678, 2.0, -3.0, 4.0])\n        s[::2] = np.nan\n\n        result = s.to_string()\n        expected = (\n            \"0       NaN\\n\"\n            + \"1    1.5678\\n\"\n            + \"2       NaN\\n\"\n            + \"3   -3.0000\\n\"\n            + \"4       NaN\"\n        )\n        assert result == expected\n\n    def test_to_string_without_index(self):\n        # GH 11729 Test index=False option\n        s = Series([1, 2, 3, 4])\n        result = s.to_string(index=False)\n        expected = \"1\\n\" + \"2\\n\" + \"3\\n\" + \"4\"\n        assert result == expected\n\n    def test_unicode_name_in_footer(self):\n        s = Series([1, 2], name=\"\\u05e2\\u05d1\\u05e8\\u05d9\\u05ea\")\n        sf = fmt.SeriesFormatter(s, name=\"\\u05e2\\u05d1\\u05e8\\u05d9\\u05ea\")\n        sf._get_footer()  # should not raise exception\n\n    def test_east_asian_unicode_series(self):\n        # not aligned properly because of east asian width\n\n        # unicode index\n        s = Series([\"a\", \"bb\", \"CCC\", \"D\"], index=[\"あ\", \"いい\", \"ううう\", \"ええええ\"])\n        expected = \"あ         a\\nいい       bb\\nううう     CCC\\nええええ      D\\ndtype: object\"\n        assert repr(s) == expected\n\n        # unicode values\n        s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], index=[\"a\", \"bb\", \"c\", \"ddd\"])\n        expected = \"a         あ\\nbb       いい\\nc       ううう\\nddd    ええええ\\ndtype: object\"\n        assert repr(s) == expected\n\n        # both\n        s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], index=[\"ああ\", \"いいいい\", \"う\", \"えええ\"])\n        expected = (\n            \"ああ         あ\\nいいいい      いい\\nう        ううう\\nえええ     ええええ\\ndtype: object\"\n        )\n        assert repr(s) == expected\n\n        # unicode footer\n        s = Series(\n            [\"あ\", \"いい\", \"ううう\", \"ええええ\"], index=[\"ああ\", \"いいいい\", \"う\", \"えええ\"], name=\"おおおおおおお\"\n        )\n        expected = (\n            \"ああ         あ\\nいいいい      いい\\nう        ううう\\n\"\n            \"えええ     ええええ\\nName: おおおおおおお, dtype: object\"\n        )\n        assert repr(s) == expected\n\n        # MultiIndex\n        idx = MultiIndex.from_tuples(\n            [(\"あ\", \"いい\"), (\"う\", \"え\"), (\"おおお\", \"かかかか\"), (\"き\", \"くく\")]\n        )\n        s = Series([1, 22, 3333, 44444], index=idx)\n        expected = (\n            \"あ    いい          1\\n\"\n            \"う    え          22\\n\"\n            \"おおお  かかかか     3333\\n\"\n            \"き    くく      44444\\ndtype: int64\"\n        )\n        assert repr(s) == expected\n\n        # object dtype, shorter than unicode repr\n        s = Series([1, 22, 3333, 44444], index=[1, \"AB\", np.nan, \"あああ\"])\n        expected = (\n            \"1          1\\nAB        22\\nNaN     3333\\nあああ    44444\\ndtype: int64\"\n        )\n        assert repr(s) == expected\n\n        # object dtype, longer than unicode repr\n        s = Series(\n            [1, 22, 3333, 44444], index=[1, \"AB\", Timestamp(\"2011-01-01\"), \"あああ\"]\n        )\n        expected = (\n            \"1                          1\\n\"\n            \"AB                        22\\n\"\n            \"2011-01-01 00:00:00     3333\\n\"\n            \"あああ                    44444\\ndtype: int64\"\n        )\n        assert repr(s) == expected\n\n        # truncate\n        with option_context(\"display.max_rows\", 3):\n            s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], name=\"おおおおおおお\")\n\n            expected = (\n                \"0       あ\\n     ... \\n\"\n                \"3    ええええ\\n\"\n                \"Name: おおおおおおお, Length: 4, dtype: object\"\n            )\n            assert repr(s) == expected\n\n            s.index = [\"ああ\", \"いいいい\", \"う\", \"えええ\"]\n            expected = (\n                \"ああ        あ\\n       ... \\n\"\n                \"えええ    ええええ\\n\"\n                \"Name: おおおおおおお, Length: 4, dtype: object\"\n            )\n            assert repr(s) == expected\n\n        # Enable Unicode option -----------------------------------------\n        with option_context(\"display.unicode.east_asian_width\", True):\n\n            # unicode index\n            s = Series([\"a\", \"bb\", \"CCC\", \"D\"], index=[\"あ\", \"いい\", \"ううう\", \"ええええ\"])\n            expected = (\n                \"あ            a\\nいい         bb\\nううう      CCC\\n\"\n                \"ええええ      D\\ndtype: object\"\n            )\n            assert repr(s) == expected\n\n            # unicode values\n            s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], index=[\"a\", \"bb\", \"c\", \"ddd\"])\n            expected = (\n                \"a            あ\\nbb         いい\\nc        ううう\\n\"\n                \"ddd    ええええ\\ndtype: object\"\n            )\n            assert repr(s) == expected\n\n            # both\n            s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], index=[\"ああ\", \"いいいい\", \"う\", \"えええ\"])\n            expected = (\n                \"ああ              あ\\n\"\n                \"いいいい        いい\\n\"\n                \"う            ううう\\n\"\n                \"えええ      ええええ\\ndtype: object\"\n            )\n            assert repr(s) == expected\n\n            # unicode footer\n            s = Series(\n                [\"あ\", \"いい\", \"ううう\", \"ええええ\"],\n                index=[\"ああ\", \"いいいい\", \"う\", \"えええ\"],\n                name=\"おおおおおおお\",\n            )\n            expected = (\n                \"ああ              あ\\n\"\n                \"いいいい        いい\\n\"\n                \"う            ううう\\n\"\n                \"えええ      ええええ\\n\"\n                \"Name: おおおおおおお, dtype: object\"\n            )\n            assert repr(s) == expected\n\n            # MultiIndex\n            idx = MultiIndex.from_tuples(\n                [(\"あ\", \"いい\"), (\"う\", \"え\"), (\"おおお\", \"かかかか\"), (\"き\", \"くく\")]\n            )\n            s = Series([1, 22, 3333, 44444], index=idx)\n            expected = (\n                \"あ      いい            1\\n\"\n                \"う      え             22\\n\"\n                \"おおお  かかかか     3333\\n\"\n                \"き      くく        44444\\n\"\n                \"dtype: int64\"\n            )\n            assert repr(s) == expected\n\n            # object dtype, shorter than unicode repr\n            s = Series([1, 22, 3333, 44444], index=[1, \"AB\", np.nan, \"あああ\"])\n            expected = (\n                \"1             1\\nAB           22\\nNaN        3333\\n\"\n                \"あああ    44444\\ndtype: int64\"\n            )\n            assert repr(s) == expected\n\n            # object dtype, longer than unicode repr\n            s = Series(\n                [1, 22, 3333, 44444],\n                index=[1, \"AB\", Timestamp(\"2011-01-01\"), \"あああ\"],\n            )\n            expected = (\n                \"1                          1\\n\"\n                \"AB                        22\\n\"\n                \"2011-01-01 00:00:00     3333\\n\"\n                \"あああ                 44444\\ndtype: int64\"\n            )\n            assert repr(s) == expected\n\n            # truncate\n            with option_context(\"display.max_rows\", 3):\n                s = Series([\"あ\", \"いい\", \"ううう\", \"ええええ\"], name=\"おおおおおおお\")\n                expected = (\n                    \"0          あ\\n       ...   \\n\"\n                    \"3    ええええ\\n\"\n                    \"Name: おおおおおおお, Length: 4, dtype: object\"\n                )\n                assert repr(s) == expected\n\n                s.index = [\"ああ\", \"いいいい\", \"う\", \"えええ\"]\n                expected = (\n                    \"ああ            あ\\n\"\n                    \"            ...   \\n\"\n                    \"えええ    ええええ\\n\"\n                    \"Name: おおおおおおお, Length: 4, dtype: object\"\n                )\n                assert repr(s) == expected\n\n            # ambiguous unicode\n            s = Series(\n                [\"¡¡\", \"い¡¡\", \"ううう\", \"ええええ\"], index=[\"ああ\", \"¡¡¡¡いい\", \"¡¡\", \"えええ\"]\n            )\n            expected = (\n                \"ああ              ¡¡\\n\"\n                \"¡¡¡¡いい        い¡¡\\n\"\n                \"¡¡            ううう\\n\"\n                \"えええ      ええええ\\ndtype: object\"\n            )\n            assert repr(s) == expected\n\n    def test_float_trim_zeros(self):\n        vals = [\n            2.08430917305e10,\n            3.52205017305e10,\n            2.30674817305e10,\n            2.03954217305e10,\n            5.59897817305e10,\n        ]\n        for line in repr(Series(vals)).split(\"\\n\"):\n            if line.startswith(\"dtype:\"):\n                continue\n            if _three_digit_exp():\n                assert \"+010\" in line\n            else:\n                assert \"+10\" in line\n\n    def test_datetimeindex(self):\n\n        index = date_range(\"20130102\", periods=6)\n        s = Series(1, index=index)\n        result = s.to_string()\n        assert \"2013-01-02\" in result\n\n        # nat in index\n        s2 = Series(2, index=[Timestamp(\"20130111\"), NaT])\n        s = pd.concat([s2, s])\n        result = s.to_string()\n        assert \"NaT\" in result\n\n        # nat in summary\n        result = str(s2.index)\n        assert \"NaT\" in result\n\n    @pytest.mark.parametrize(\n        \"start_date\",\n        [\n            \"2017-01-01 23:59:59.999999999\",\n            \"2017-01-01 23:59:59.99999999\",\n            \"2017-01-01 23:59:59.9999999\",\n            \"2017-01-01 23:59:59.999999\",\n            \"2017-01-01 23:59:59.99999\",\n            \"2017-01-01 23:59:59.9999\",\n        ],\n    )\n    def test_datetimeindex_highprecision(self, start_date):\n        # GH19030\n        # Check that high-precision time values for the end of day are\n        # included in repr for DatetimeIndex\n        s1 = Series(date_range(start=start_date, freq=\"D\", periods=5))\n        result = str(s1)\n        assert start_date in result\n\n        dti = date_range(start=start_date, freq=\"D\", periods=5)\n        s2 = Series(3, index=dti)\n        result = str(s2.index)\n        assert start_date in result\n\n    def test_timedelta64(self):\n        Series(np.array([1100, 20], dtype=\"timedelta64[ns]\")).to_string()\n\n        s = Series(date_range(\"2012-1-1\", periods=3, freq=\"D\"))\n\n        # GH2146\n\n        # adding NaTs\n        y = s - s.shift(1)\n        result = y.to_string()\n        assert \"1 days\" in result\n        assert \"00:00:00\" not in result\n        assert \"NaT\" in result\n\n        # with frac seconds\n        o = Series([datetime(2012, 1, 1, microsecond=150)] * 3)\n        y = s - o\n        result = y.to_string()\n        assert \"-1 days +23:59:59.999850\" in result\n\n        # rounding?\n        o = Series([datetime(2012, 1, 1, 1)] * 3)\n        y = s - o\n        result = y.to_string()\n        assert \"-1 days +23:00:00\" in result\n        assert \"1 days 23:00:00\" in result\n\n        o = Series([datetime(2012, 1, 1, 1, 1)] * 3)\n        y = s - o\n        result = y.to_string()\n        assert \"-1 days +22:59:00\" in result\n        assert \"1 days 22:59:00\" in result\n\n        o = Series([datetime(2012, 1, 1, 1, 1, microsecond=150)] * 3)\n        y = s - o\n        result = y.to_string()\n        assert \"-1 days +22:58:59.999850\" in result\n        assert \"0 days 22:58:59.999850\" in result\n\n        # neg time\n        td = timedelta(minutes=5, seconds=3)\n        s2 = Series(date_range(\"2012-1-1\", periods=3, freq=\"D\")) + td\n        y = s - s2\n        result = y.to_string()\n        assert \"-1 days +23:54:57\" in result\n\n        td = timedelta(microseconds=550)\n        s2 = Series(date_range(\"2012-1-1\", periods=3, freq=\"D\")) + td\n        y = s - td\n        result = y.to_string()\n        assert \"2012-01-01 23:59:59.999450\" in result\n\n        # no boxing of the actual elements\n        td = Series(pd.timedelta_range(\"1 days\", periods=3))\n        result = td.to_string()\n        assert result == \"0   1 days\\n1   2 days\\n2   3 days\"\n\n    def test_mixed_datetime64(self):\n        df = DataFrame({\"A\": [1, 2], \"B\": [\"2012-01-01\", \"2012-01-02\"]})\n        df[\"B\"] = pd.to_datetime(df.B)\n\n        result = repr(df.loc[0])\n        assert \"2012-01-01\" in result\n\n    def test_period(self):\n        # GH 12615\n        index = pd.period_range(\"2013-01\", periods=6, freq=\"M\")\n        s = Series(np.arange(6, dtype=\"int64\"), index=index)\n        exp = (\n            \"2013-01    0\\n\"\n            \"2013-02    1\\n\"\n            \"2013-03    2\\n\"\n            \"2013-04    3\\n\"\n            \"2013-05    4\\n\"\n            \"2013-06    5\\n\"\n            \"Freq: M, dtype: int64\"\n        )\n        assert str(s) == exp\n\n        s = Series(index)\n        exp = (\n            \"0    2013-01\\n\"\n            \"1    2013-02\\n\"\n            \"2    2013-03\\n\"\n            \"3    2013-04\\n\"\n            \"4    2013-05\\n\"\n            \"5    2013-06\\n\"\n            \"dtype: period[M]\"\n        )\n        assert str(s) == exp\n\n        # periods with mixed freq\n        s = Series(\n            [\n                pd.Period(\"2011-01\", freq=\"M\"),\n                pd.Period(\"2011-02-01\", freq=\"D\"),\n                pd.Period(\"2011-03-01 09:00\", freq=\"H\"),\n            ]\n        )\n        exp = (\n            \"0             2011-01\\n1          2011-02-01\\n\"\n            \"2    2011-03-01 09:00\\ndtype: object\"\n        )\n        assert str(s) == exp\n\n    def test_max_multi_index_display(self):\n        # GH 7101\n\n        # doc example (indexing.rst)\n\n        # multi-index\n        arrays = [\n            [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n            [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n        ]\n        tuples = list(zip(*arrays))\n        index = MultiIndex.from_tuples(tuples, names=[\"first\", \"second\"])\n        s = Series(np.random.randn(8), index=index)\n\n        with option_context(\"display.max_rows\", 10):\n            assert len(str(s).split(\"\\n\")) == 10\n        with option_context(\"display.max_rows\", 3):\n            assert len(str(s).split(\"\\n\")) == 5\n        with option_context(\"display.max_rows\", 2):\n            assert len(str(s).split(\"\\n\")) == 5\n        with option_context(\"display.max_rows\", 1):\n            assert len(str(s).split(\"\\n\")) == 4\n        with option_context(\"display.max_rows\", 0):\n            assert len(str(s).split(\"\\n\")) == 10\n\n        # index\n        s = Series(np.random.randn(8), None)\n\n        with option_context(\"display.max_rows\", 10):\n            assert len(str(s).split(\"\\n\")) == 9\n        with option_context(\"display.max_rows\", 3):\n            assert len(str(s).split(\"\\n\")) == 4\n        with option_context(\"display.max_rows\", 2):\n            assert len(str(s).split(\"\\n\")) == 4\n        with option_context(\"display.max_rows\", 1):\n            assert len(str(s).split(\"\\n\")) == 3\n        with option_context(\"display.max_rows\", 0):\n            assert len(str(s).split(\"\\n\")) == 9\n\n    # Make sure #8532 is fixed\n    def test_consistent_format(self):\n        s = Series([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9999, 1, 1] * 10)\n        with option_context(\"display.max_rows\", 10, \"display.show_dimensions\", False):\n            res = repr(s)\n        exp = (\n            \"0      1.0000\\n1      1.0000\\n2      1.0000\\n3      \"\n            \"1.0000\\n4      1.0000\\n        ...  \\n125    \"\n            \"1.0000\\n126    1.0000\\n127    0.9999\\n128    \"\n            \"1.0000\\n129    1.0000\\ndtype: float64\"\n        )\n        assert res == exp\n\n    def chck_ncols(self, s):\n        with option_context(\"display.max_rows\", 10):\n            res = repr(s)\n        lines = res.split(\"\\n\")\n        lines = [\n            line for line in repr(s).split(\"\\n\") if not re.match(r\"[^\\.]*\\.+\", line)\n        ][:-1]\n        ncolsizes = len({len(line.strip()) for line in lines})\n        assert ncolsizes == 1\n\n    def test_format_explicit(self):\n        test_sers = gen_series_formatting()\n        with option_context(\"display.max_rows\", 4, \"display.show_dimensions\", False):\n            res = repr(test_sers[\"onel\"])\n            exp = \"0     a\\n1     a\\n     ..\\n98    a\\n99    a\\ndtype: object\"\n            assert exp == res\n            res = repr(test_sers[\"twol\"])\n            exp = \"0     ab\\n1     ab\\n      ..\\n98    ab\\n99    ab\\ndtype: object\"\n            assert exp == res\n            res = repr(test_sers[\"asc\"])\n            exp = (\n                \"0         a\\n1        ab\\n      ...  \\n4     abcde\\n5    \"\n                \"abcdef\\ndtype: object\"\n            )\n            assert exp == res\n            res = repr(test_sers[\"desc\"])\n            exp = (\n                \"5    abcdef\\n4     abcde\\n      ...  \\n1        ab\\n0         \"\n                \"a\\ndtype: object\"\n            )\n            assert exp == res\n\n    def test_ncols(self):\n        test_sers = gen_series_formatting()\n        for s in test_sers.values():\n            self.chck_ncols(s)\n\n    def test_max_rows_eq_one(self):\n        s = Series(range(10), dtype=\"int64\")\n        with option_context(\"display.max_rows\", 1):\n            strrepr = repr(s).split(\"\\n\")\n        exp1 = [\"0\", \"0\"]\n        res1 = strrepr[0].split()\n        assert exp1 == res1\n        exp2 = [\"..\"]\n        res2 = strrepr[1].split()\n        assert exp2 == res2\n\n    def test_truncate_ndots(self):\n        def getndots(s):\n            return len(re.match(r\"[^\\.]*(\\.*)\", s).groups()[0])\n\n        s = Series([0, 2, 3, 6])\n        with option_context(\"display.max_rows\", 2):\n            strrepr = repr(s).replace(\"\\n\", \"\")\n        assert getndots(strrepr) == 2\n\n        s = Series([0, 100, 200, 400])\n        with option_context(\"display.max_rows\", 2):\n            strrepr = repr(s).replace(\"\\n\", \"\")\n        assert getndots(strrepr) == 3\n\n    def test_show_dimensions(self):\n        # gh-7117\n        s = Series(range(5))\n\n        assert \"Length\" not in repr(s)\n\n        with option_context(\"display.max_rows\", 4):\n            assert \"Length\" in repr(s)\n\n        with option_context(\"display.show_dimensions\", True):\n            assert \"Length\" in repr(s)\n\n        with option_context(\"display.max_rows\", 4, \"display.show_dimensions\", False):\n            assert \"Length\" not in repr(s)\n\n    def test_repr_min_rows(self):\n        s = Series(range(20))\n\n        # default setting no truncation even if above min_rows\n        assert \"..\" not in repr(s)\n\n        s = Series(range(61))\n\n        # default of max_rows 60 triggers truncation if above\n        assert \"..\" in repr(s)\n\n        with option_context(\"display.max_rows\", 10, \"display.min_rows\", 4):\n            # truncated after first two rows\n            assert \"..\" in repr(s)\n            assert \"2  \" not in repr(s)\n\n        with option_context(\"display.max_rows\", 12, \"display.min_rows\", None):\n            # when set to None, follow value of max_rows\n            assert \"5      5\" in repr(s)\n\n        with option_context(\"display.max_rows\", 10, \"display.min_rows\", 12):\n            # when set value higher as max_rows, use the minimum\n            assert \"5      5\" not in repr(s)\n\n        with option_context(\"display.max_rows\", None, \"display.min_rows\", 12):\n            # max_rows of None -> never truncate\n            assert \"..\" not in repr(s)\n\n    def test_to_string_name(self):\n        s = Series(range(100), dtype=\"int64\")\n        s.name = \"myser\"\n        res = s.to_string(max_rows=2, name=True)\n        exp = \"0      0\\n      ..\\n99    99\\nName: myser\"\n        assert res == exp\n        res = s.to_string(max_rows=2, name=False)\n        exp = \"0      0\\n      ..\\n99    99\"\n        assert res == exp\n\n    def test_to_string_dtype(self):\n        s = Series(range(100), dtype=\"int64\")\n        res = s.to_string(max_rows=2, dtype=True)\n        exp = \"0      0\\n      ..\\n99    99\\ndtype: int64\"\n        assert res == exp\n        res = s.to_string(max_rows=2, dtype=False)\n        exp = \"0      0\\n      ..\\n99    99\"\n        assert res == exp\n\n    def test_to_string_length(self):\n        s = Series(range(100), dtype=\"int64\")\n        res = s.to_string(max_rows=2, length=True)\n        exp = \"0      0\\n      ..\\n99    99\\nLength: 100\"\n        assert res == exp\n\n    def test_to_string_na_rep(self):\n        s = Series(index=range(100), dtype=np.float64)\n        res = s.to_string(na_rep=\"foo\", max_rows=2)\n        exp = \"0    foo\\n      ..\\n99   foo\"\n        assert res == exp\n\n    def test_to_string_float_format(self):\n        s = Series(range(10), dtype=\"float64\")\n        res = s.to_string(float_format=lambda x: f\"{x:2.1f}\", max_rows=2)\n        exp = \"0   0.0\\n     ..\\n9   9.0\"\n        assert res == exp\n\n    def test_to_string_header(self):\n        s = Series(range(10), dtype=\"int64\")\n        s.index.name = \"foo\"\n        res = s.to_string(header=True, max_rows=2)\n        exp = \"foo\\n0    0\\n    ..\\n9    9\"\n        assert res == exp\n        res = s.to_string(header=False, max_rows=2)\n        exp = \"0    0\\n    ..\\n9    9\"\n        assert res == exp\n\n    def test_to_string_multindex_header(self):\n        # GH 16718\n        df = DataFrame({\"a\": [0], \"b\": [1], \"c\": [2], \"d\": [3]}).set_index([\"a\", \"b\"])\n        res = df.to_string(header=[\"r1\", \"r2\"])\n        exp = \"    r1 r2\\na b      \\n0 1  2  3\"\n        assert res == exp\n\n    def test_to_string_empty_col(self):\n        # GH 13653\n        s = Series([\"\", \"Hello\", \"World\", \"\", \"\", \"Mooooo\", \"\", \"\"])\n        res = s.to_string(index=False)\n        exp = \"      \\n Hello\\n World\\n      \\n      \\nMooooo\\n      \\n      \"\n        assert re.match(exp, res)\n\n\nclass TestGenericArrayFormatter:\n    def test_1d_array(self):\n        # GenericArrayFormatter is used on types for which there isn't a dedicated\n        # formatter. np.bool_ is one of those types.\n        obj = fmt.GenericArrayFormatter(np.array([True, False]))\n        res = obj.get_result()\n        assert len(res) == 2\n        # Results should be right-justified.\n        assert res[0] == \"  True\"\n        assert res[1] == \" False\"\n\n    def test_2d_array(self):\n        obj = fmt.GenericArrayFormatter(np.array([[True, False], [False, True]]))\n        res = obj.get_result()\n        assert len(res) == 2\n        assert res[0] == \" [True, False]\"\n        assert res[1] == \" [False, True]\"\n\n    def test_3d_array(self):\n        obj = fmt.GenericArrayFormatter(\n            np.array([[[True, True], [False, False]], [[False, True], [True, False]]])\n        )\n        res = obj.get_result()\n        assert len(res) == 2\n        assert res[0] == \" [[True, True], [False, False]]\"\n        assert res[1] == \" [[False, True], [True, False]]\"\n\n    def test_2d_extension_type(self):\n        # GH 33770\n\n        # Define a stub extension type with just enough code to run Series.__repr__()\n        class DtypeStub(pd.api.extensions.ExtensionDtype):\n            @property\n            def type(self):\n                return np.ndarray\n\n            @property\n            def name(self):\n                return \"DtypeStub\"\n\n        class ExtTypeStub(pd.api.extensions.ExtensionArray):\n            def __len__(self) -> int:\n                return 2\n\n            def __getitem__(self, ix):\n                return [ix == 1, ix == 0]\n\n            @property\n            def dtype(self):\n                return DtypeStub()\n\n        series = Series(ExtTypeStub())\n        res = repr(series)  # This line crashed before #33770 was fixed.\n        expected = \"0    [False  True]\\n\" + \"1    [ True False]\\n\" + \"dtype: DtypeStub\"\n        assert res == expected\n\n\ndef _three_digit_exp():\n    return f\"{1.7e8:.4g}\" == \"1.7e+008\"\n\n\nclass TestFloatArrayFormatter:\n    def test_misc(self):\n        obj = fmt.FloatArrayFormatter(np.array([], dtype=np.float64))\n        result = obj.get_result()\n        assert len(result) == 0\n\n    def test_format(self):\n        obj = fmt.FloatArrayFormatter(np.array([12, 0], dtype=np.float64))\n        result = obj.get_result()\n        assert result[0] == \" 12.0\"\n        assert result[1] == \"  0.0\"\n\n    def test_output_display_precision_trailing_zeroes(self):\n        # Issue #20359: trimming zeros while there is no decimal point\n\n        # Happens when display precision is set to zero\n        with option_context(\"display.precision\", 0):\n            s = Series([840.0, 4200.0])\n            expected_output = \"0     840\\n1    4200\\ndtype: float64\"\n            assert str(s) == expected_output\n\n    @pytest.mark.parametrize(\n        \"value,expected\",\n        [\n            ([9.4444], \"   0\\n0  9\"),\n            ([0.49], \"       0\\n0  5e-01\"),\n            ([10.9999], \"    0\\n0  11\"),\n            ([9.5444, 9.6], \"    0\\n0  10\\n1  10\"),\n            ([0.46, 0.78, -9.9999], \"       0\\n0  5e-01\\n1  8e-01\\n2 -1e+01\"),\n        ],\n    )\n    def test_set_option_precision(self, value, expected):\n        # Issue #30122\n        # Precision was incorrectly shown\n\n        with option_context(\"display.precision\", 0):\n\n            df_value = DataFrame(value)\n            assert str(df_value) == expected\n\n    def test_output_significant_digits(self):\n        # Issue #9764\n\n        # In case default display precision changes:\n        with option_context(\"display.precision\", 6):\n            # DataFrame example from issue #9764\n            d = DataFrame(\n                {\n                    \"col1\": [\n                        9.999e-8,\n                        1e-7,\n                        1.0001e-7,\n                        2e-7,\n                        4.999e-7,\n                        5e-7,\n                        5.0001e-7,\n                        6e-7,\n                        9.999e-7,\n                        1e-6,\n                        1.0001e-6,\n                        2e-6,\n                        4.999e-6,\n                        5e-6,\n                        5.0001e-6,\n                        6e-6,\n                    ]\n                }\n            )\n\n            expected_output = {\n                (0, 6): \"           col1\\n\"\n                \"0  9.999000e-08\\n\"\n                \"1  1.000000e-07\\n\"\n                \"2  1.000100e-07\\n\"\n                \"3  2.000000e-07\\n\"\n                \"4  4.999000e-07\\n\"\n                \"5  5.000000e-07\",\n                (1, 6): \"           col1\\n\"\n                \"1  1.000000e-07\\n\"\n                \"2  1.000100e-07\\n\"\n                \"3  2.000000e-07\\n\"\n                \"4  4.999000e-07\\n\"\n                \"5  5.000000e-07\",\n                (1, 8): \"           col1\\n\"\n                \"1  1.000000e-07\\n\"\n                \"2  1.000100e-07\\n\"\n                \"3  2.000000e-07\\n\"\n                \"4  4.999000e-07\\n\"\n                \"5  5.000000e-07\\n\"\n                \"6  5.000100e-07\\n\"\n                \"7  6.000000e-07\",\n                (8, 16): \"            col1\\n\"\n                \"8   9.999000e-07\\n\"\n                \"9   1.000000e-06\\n\"\n                \"10  1.000100e-06\\n\"\n                \"11  2.000000e-06\\n\"\n                \"12  4.999000e-06\\n\"\n                \"13  5.000000e-06\\n\"\n                \"14  5.000100e-06\\n\"\n                \"15  6.000000e-06\",\n                (9, 16): \"        col1\\n\"\n                \"9   0.000001\\n\"\n                \"10  0.000001\\n\"\n                \"11  0.000002\\n\"\n                \"12  0.000005\\n\"\n                \"13  0.000005\\n\"\n                \"14  0.000005\\n\"\n                \"15  0.000006\",\n            }\n\n            for (start, stop), v in expected_output.items():\n                assert str(d[start:stop]) == v\n\n    def test_too_long(self):\n        # GH 10451\n        with option_context(\"display.precision\", 4):\n            # need both a number > 1e6 and something that normally formats to\n            # having length > display.precision + 6\n            df = DataFrame({\"x\": [12345.6789]})\n            assert str(df) == \"            x\\n0  12345.6789\"\n            df = DataFrame({\"x\": [2e6]})\n            assert str(df) == \"           x\\n0  2000000.0\"\n            df = DataFrame({\"x\": [12345.6789, 2e6]})\n            assert str(df) == \"            x\\n0  1.2346e+04\\n1  2.0000e+06\"\n\n\nclass TestRepr_timedelta64:\n    def test_none(self):\n        delta_1d = pd.to_timedelta(1, unit=\"D\")\n        delta_0d = pd.to_timedelta(0, unit=\"D\")\n        delta_1s = pd.to_timedelta(1, unit=\"s\")\n        delta_500ms = pd.to_timedelta(500, unit=\"ms\")\n\n        drepr = lambda x: x._repr_base()\n        assert drepr(delta_1d) == \"1 days\"\n        assert drepr(-delta_1d) == \"-1 days\"\n        assert drepr(delta_0d) == \"0 days\"\n        assert drepr(delta_1s) == \"0 days 00:00:01\"\n        assert drepr(delta_500ms) == \"0 days 00:00:00.500000\"\n        assert drepr(delta_1d + delta_1s) == \"1 days 00:00:01\"\n        assert drepr(-delta_1d + delta_1s) == \"-1 days +00:00:01\"\n        assert drepr(delta_1d + delta_500ms) == \"1 days 00:00:00.500000\"\n        assert drepr(-delta_1d + delta_500ms) == \"-1 days +00:00:00.500000\"\n\n    def test_sub_day(self):\n        delta_1d = pd.to_timedelta(1, unit=\"D\")\n        delta_0d = pd.to_timedelta(0, unit=\"D\")\n        delta_1s = pd.to_timedelta(1, unit=\"s\")\n        delta_500ms = pd.to_timedelta(500, unit=\"ms\")\n\n        drepr = lambda x: x._repr_base(format=\"sub_day\")\n        assert drepr(delta_1d) == \"1 days\"\n        assert drepr(-delta_1d) == \"-1 days\"\n        assert drepr(delta_0d) == \"00:00:00\"\n        assert drepr(delta_1s) == \"00:00:01\"\n        assert drepr(delta_500ms) == \"00:00:00.500000\"\n        assert drepr(delta_1d + delta_1s) == \"1 days 00:00:01\"\n        assert drepr(-delta_1d + delta_1s) == \"-1 days +00:00:01\"\n        assert drepr(delta_1d + delta_500ms) == \"1 days 00:00:00.500000\"\n        assert drepr(-delta_1d + delta_500ms) == \"-1 days +00:00:00.500000\"\n\n    def test_long(self):\n        delta_1d = pd.to_timedelta(1, unit=\"D\")\n        delta_0d = pd.to_timedelta(0, unit=\"D\")\n        delta_1s = pd.to_timedelta(1, unit=\"s\")\n        delta_500ms = pd.to_timedelta(500, unit=\"ms\")\n\n        drepr = lambda x: x._repr_base(format=\"long\")\n        assert drepr(delta_1d) == \"1 days 00:00:00\"\n        assert drepr(-delta_1d) == \"-1 days +00:00:00\"\n        assert drepr(delta_0d) == \"0 days 00:00:00\"\n        assert drepr(delta_1s) == \"0 days 00:00:01\"\n        assert drepr(delta_500ms) == \"0 days 00:00:00.500000\"\n        assert drepr(delta_1d + delta_1s) == \"1 days 00:00:01\"\n        assert drepr(-delta_1d + delta_1s) == \"-1 days +00:00:01\"\n        assert drepr(delta_1d + delta_500ms) == \"1 days 00:00:00.500000\"\n        assert drepr(-delta_1d + delta_500ms) == \"-1 days +00:00:00.500000\"\n\n    def test_all(self):\n        delta_1d = pd.to_timedelta(1, unit=\"D\")\n        delta_0d = pd.to_timedelta(0, unit=\"D\")\n        delta_1ns = pd.to_timedelta(1, unit=\"ns\")\n\n        drepr = lambda x: x._repr_base(format=\"all\")\n        assert drepr(delta_1d) == \"1 days 00:00:00.000000000\"\n        assert drepr(-delta_1d) == \"-1 days +00:00:00.000000000\"\n        assert drepr(delta_0d) == \"0 days 00:00:00.000000000\"\n        assert drepr(delta_1ns) == \"0 days 00:00:00.000000001\"\n        assert drepr(-delta_1d + delta_1ns) == \"-1 days +00:00:00.000000001\"\n\n\nclass TestTimedelta64Formatter:\n    def test_days(self):\n        x = pd.to_timedelta(list(range(5)) + [NaT], unit=\"D\")\n        result = fmt.Timedelta64Formatter(x, box=True).get_result()\n        assert result[0].strip() == \"'0 days'\"\n        assert result[1].strip() == \"'1 days'\"\n\n        result = fmt.Timedelta64Formatter(x[1:2], box=True).get_result()\n        assert result[0].strip() == \"'1 days'\"\n\n        result = fmt.Timedelta64Formatter(x, box=False).get_result()\n        assert result[0].strip() == \"0 days\"\n        assert result[1].strip() == \"1 days\"\n\n        result = fmt.Timedelta64Formatter(x[1:2], box=False).get_result()\n        assert result[0].strip() == \"1 days\"\n\n    def test_days_neg(self):\n        x = pd.to_timedelta(list(range(5)) + [NaT], unit=\"D\")\n        result = fmt.Timedelta64Formatter(-x, box=True).get_result()\n        assert result[0].strip() == \"'0 days'\"\n        assert result[1].strip() == \"'-1 days'\"\n\n    def test_subdays(self):\n        y = pd.to_timedelta(list(range(5)) + [NaT], unit=\"s\")\n        result = fmt.Timedelta64Formatter(y, box=True).get_result()\n        assert result[0].strip() == \"'0 days 00:00:00'\"\n        assert result[1].strip() == \"'0 days 00:00:01'\"\n\n    def test_subdays_neg(self):\n        y = pd.to_timedelta(list(range(5)) + [NaT], unit=\"s\")\n        result = fmt.Timedelta64Formatter(-y, box=True).get_result()\n        assert result[0].strip() == \"'0 days 00:00:00'\"\n        assert result[1].strip() == \"'-1 days +23:59:59'\"\n\n    def test_zero(self):\n        x = pd.to_timedelta(list(range(1)) + [NaT], unit=\"D\")\n        result = fmt.Timedelta64Formatter(x, box=True).get_result()\n        assert result[0].strip() == \"'0 days'\"\n\n        x = pd.to_timedelta(list(range(1)), unit=\"D\")\n        result = fmt.Timedelta64Formatter(x, box=True).get_result()\n        assert result[0].strip() == \"'0 days'\"\n\n\nclass TestDatetime64Formatter:\n    def test_mixed(self):\n        x = Series([datetime(2013, 1, 1), datetime(2013, 1, 1, 12), NaT])\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 00:00:00\"\n        assert result[1].strip() == \"2013-01-01 12:00:00\"\n\n    def test_dates(self):\n        x = Series([datetime(2013, 1, 1), datetime(2013, 1, 2), NaT])\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01\"\n        assert result[1].strip() == \"2013-01-02\"\n\n    def test_date_nanos(self):\n        x = Series([Timestamp(200)])\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"1970-01-01 00:00:00.000000200\"\n\n    def test_dates_display(self):\n\n        # 10170\n        # make sure that we are consistently display date formatting\n        x = Series(date_range(\"20130101 09:00:00\", periods=5, freq=\"D\"))\n        x.iloc[1] = np.nan\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 09:00:00\"\n        assert result[1].strip() == \"NaT\"\n        assert result[4].strip() == \"2013-01-05 09:00:00\"\n\n        x = Series(date_range(\"20130101 09:00:00\", periods=5, freq=\"s\"))\n        x.iloc[1] = np.nan\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 09:00:00\"\n        assert result[1].strip() == \"NaT\"\n        assert result[4].strip() == \"2013-01-01 09:00:04\"\n\n        x = Series(date_range(\"20130101 09:00:00\", periods=5, freq=\"ms\"))\n        x.iloc[1] = np.nan\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 09:00:00.000\"\n        assert result[1].strip() == \"NaT\"\n        assert result[4].strip() == \"2013-01-01 09:00:00.004\"\n\n        x = Series(date_range(\"20130101 09:00:00\", periods=5, freq=\"us\"))\n        x.iloc[1] = np.nan\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 09:00:00.000000\"\n        assert result[1].strip() == \"NaT\"\n        assert result[4].strip() == \"2013-01-01 09:00:00.000004\"\n\n        x = Series(date_range(\"20130101 09:00:00\", periods=5, freq=\"N\"))\n        x.iloc[1] = np.nan\n        result = fmt.Datetime64Formatter(x).get_result()\n        assert result[0].strip() == \"2013-01-01 09:00:00.000000000\"\n        assert result[1].strip() == \"NaT\"\n        assert result[4].strip() == \"2013-01-01 09:00:00.000000004\"\n\n    def test_datetime64formatter_yearmonth(self):\n        x = Series([datetime(2016, 1, 1), datetime(2016, 2, 2)])\n\n        def format_func(x):\n            return x.strftime(\"%Y-%m\")\n\n        formatter = fmt.Datetime64Formatter(x, formatter=format_func)\n        result = formatter.get_result()\n        assert result == [\"2016-01\", \"2016-02\"]\n\n    def test_datetime64formatter_hoursecond(self):\n\n        x = Series(\n            pd.to_datetime([\"10:10:10.100\", \"12:12:12.120\"], format=\"%H:%M:%S.%f\")\n        )\n\n        def format_func(x):\n            return x.strftime(\"%H:%M\")\n\n        formatter = fmt.Datetime64Formatter(x, formatter=format_func)\n        result = formatter.get_result()\n        assert result == [\"10:10\", \"12:12\"]\n\n\nclass TestNaTFormatting:\n    def test_repr(self):\n        assert repr(NaT) == \"NaT\"\n\n    def test_str(self):\n        assert str(NaT) == \"NaT\"\n\n\nclass TestPeriodIndexFormat:\n    def test_period_format_and_strftime_default(self):\n        per = pd.PeriodIndex([datetime(2003, 1, 1, 12), None], freq=\"H\")\n\n        # Default formatting\n        formatted = per.format()\n        assert formatted[0] == \"2003-01-01 12:00\"  # default: minutes not shown\n        assert formatted[1] == \"NaT\"\n        # format is equivalent to strftime(None)...\n        assert formatted[0] == per.strftime(None)[0]\n        assert per.strftime(None)[1] is np.nan  # ...except for NaTs\n\n        # Same test with nanoseconds freq\n        per = pd.period_range(\"2003-01-01 12:01:01.123456789\", periods=2, freq=\"n\")\n        formatted = per.format()\n        assert (formatted == per.strftime(None)).all()\n        assert formatted[0] == \"2003-01-01 12:01:01.123456789\"\n        assert formatted[1] == \"2003-01-01 12:01:01.123456790\"\n\n    def test_period_custom(self):\n        # GH#46252 custom formatting directives %l (ms) and %u (us)\n\n        # 3 digits\n        per = pd.period_range(\"2003-01-01 12:01:01.123\", periods=2, freq=\"l\")\n        formatted = per.format(date_format=\"%y %I:%M:%S (ms=%l us=%u ns=%n)\")\n        assert formatted[0] == \"03 12:01:01 (ms=123 us=123000 ns=123000000)\"\n        assert formatted[1] == \"03 12:01:01 (ms=124 us=124000 ns=124000000)\"\n\n        # 6 digits\n        per = pd.period_range(\"2003-01-01 12:01:01.123456\", periods=2, freq=\"u\")\n        formatted = per.format(date_format=\"%y %I:%M:%S (ms=%l us=%u ns=%n)\")\n        assert formatted[0] == \"03 12:01:01 (ms=123 us=123456 ns=123456000)\"\n        assert formatted[1] == \"03 12:01:01 (ms=123 us=123457 ns=123457000)\"\n\n        # 9 digits\n        per = pd.period_range(\"2003-01-01 12:01:01.123456789\", periods=2, freq=\"n\")\n        formatted = per.format(date_format=\"%y %I:%M:%S (ms=%l us=%u ns=%n)\")\n        assert formatted[0] == \"03 12:01:01 (ms=123 us=123456 ns=123456789)\"\n        assert formatted[1] == \"03 12:01:01 (ms=123 us=123456 ns=123456790)\"\n\n    def test_period_tz(self):\n        # Formatting periods created from a datetime with timezone.\n\n        # This timestamp is in 2013 in Europe/Paris but is 2012 in UTC\n        dt = pd.to_datetime([\"2013-01-01 00:00:00+01:00\"], utc=True)\n\n        # Converting to a period looses the timezone information\n        # Since tz is currently set as utc, we'll see 2012\n        with tm.assert_produces_warning(UserWarning, match=\"will drop timezone\"):\n            per = dt.to_period(freq=\"H\")\n        assert per.format()[0] == \"2012-12-31 23:00\"\n\n        # If tz is currently set as paris before conversion, we'll see 2013\n        dt = dt.tz_convert(\"Europe/Paris\")\n        with tm.assert_produces_warning(UserWarning, match=\"will drop timezone\"):\n            per = dt.to_period(freq=\"H\")\n        assert per.format()[0] == \"2013-01-01 00:00\"\n\n    @pytest.mark.parametrize(\n        \"locale_str\",\n        [\n            pytest.param(None, id=str(locale.getlocale())),\n            \"it_IT.utf8\",\n            \"it_IT\",  # Note: encoding will be 'ISO8859-1'\n            \"zh_CN.utf8\",\n            \"zh_CN\",  # Note: encoding will be 'gb2312'\n        ],\n    )\n    def test_period_non_ascii_fmt(self, locale_str):\n        # GH#46468 non-ascii char in input format string leads to wrong output\n\n        # Skip if locale cannot be set\n        if locale_str is not None and not tm.can_set_locale(locale_str, locale.LC_ALL):\n            pytest.skip(f\"Skipping as locale '{locale_str}' cannot be set on host.\")\n\n        # Change locale temporarily for this test.\n        with tm.set_locale(locale_str, locale.LC_ALL) if locale_str else nullcontext():\n            # Scalar\n            per = pd.Period(\"2018-03-11 13:00\", freq=\"H\")\n            assert per.strftime(\"%y é\") == \"18 é\"\n\n            # Index\n            per = pd.period_range(\"2003-01-01 01:00:00\", periods=2, freq=\"12h\")\n            formatted = per.format(date_format=\"%y é\")\n            assert formatted[0] == \"03 é\"\n            assert formatted[1] == \"03 é\"\n\n    @pytest.mark.parametrize(\n        \"locale_str\",\n        [\n            pytest.param(None, id=str(locale.getlocale())),\n            \"it_IT.utf8\",\n            \"it_IT\",  # Note: encoding will be 'ISO8859-1'\n            \"zh_CN.utf8\",\n            \"zh_CN\",  # Note: encoding will be 'gb2312'\n        ],\n    )\n    def test_period_custom_locale_directive(self, locale_str):\n        # GH#46319 locale-specific directive leads to non-utf8 c strftime char* result\n\n        # Skip if locale cannot be set\n        if locale_str is not None and not tm.can_set_locale(locale_str, locale.LC_ALL):\n            pytest.skip(f\"Skipping as locale '{locale_str}' cannot be set on host.\")\n\n        # Change locale temporarily for this test.\n        with tm.set_locale(locale_str, locale.LC_ALL) if locale_str else nullcontext():\n            # Get locale-specific reference\n            am_local, pm_local = get_local_am_pm()\n\n            # Scalar\n            per = pd.Period(\"2018-03-11 13:00\", freq=\"H\")\n            assert per.strftime(\"%p\") == pm_local\n\n            # Index\n            per = pd.period_range(\"2003-01-01 01:00:00\", periods=2, freq=\"12h\")\n            formatted = per.format(date_format=\"%y %I:%M:%S%p\")\n            assert formatted[0] == f\"03 01:00:00{am_local}\"\n            assert formatted[1] == f\"03 01:00:00{pm_local}\"\n\n\nclass TestDatetimeIndexFormat:\n    def test_datetime(self):\n        formatted = pd.to_datetime([datetime(2003, 1, 1, 12), NaT]).format()\n        assert formatted[0] == \"2003-01-01 12:00:00\"\n        assert formatted[1] == \"NaT\"\n\n    def test_date(self):\n        formatted = pd.to_datetime([datetime(2003, 1, 1), NaT]).format()\n        assert formatted[0] == \"2003-01-01\"\n        assert formatted[1] == \"NaT\"\n\n    def test_date_tz(self):\n        formatted = pd.to_datetime([datetime(2013, 1, 1)], utc=True).format()\n        assert formatted[0] == \"2013-01-01 00:00:00+00:00\"\n\n        formatted = pd.to_datetime([datetime(2013, 1, 1), NaT], utc=True).format()\n        assert formatted[0] == \"2013-01-01 00:00:00+00:00\"\n\n    def test_date_explicit_date_format(self):\n        formatted = pd.to_datetime([datetime(2003, 2, 1), NaT]).format(\n            date_format=\"%m-%d-%Y\", na_rep=\"UT\"\n        )\n        assert formatted[0] == \"02-01-2003\"\n        assert formatted[1] == \"UT\"\n\n\nclass TestDatetimeIndexUnicode:\n    def test_dates(self):\n        text = str(pd.to_datetime([datetime(2013, 1, 1), datetime(2014, 1, 1)]))\n        assert \"['2013-01-01',\" in text\n        assert \", '2014-01-01']\" in text\n\n    def test_mixed(self):\n        text = str(\n            pd.to_datetime(\n                [datetime(2013, 1, 1), datetime(2014, 1, 1, 12), datetime(2014, 1, 1)]\n            )\n        )\n        assert \"'2013-01-01 00:00:00',\" in text\n        assert \"'2014-01-01 00:00:00']\" in text\n\n\nclass TestStringRepTimestamp:\n    def test_no_tz(self):\n        dt_date = datetime(2013, 1, 2)\n        assert str(dt_date) == str(Timestamp(dt_date))\n\n        dt_datetime = datetime(2013, 1, 2, 12, 1, 3)\n        assert str(dt_datetime) == str(Timestamp(dt_datetime))\n\n        dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45)\n        assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))\n\n        ts_nanos_only = Timestamp(200)\n        assert str(ts_nanos_only) == \"1970-01-01 00:00:00.000000200\"\n\n        ts_nanos_micros = Timestamp(1200)\n        assert str(ts_nanos_micros) == \"1970-01-01 00:00:00.000001200\"\n\n    def test_tz_pytz(self):\n        dt_date = datetime(2013, 1, 2, tzinfo=pytz.utc)\n        assert str(dt_date) == str(Timestamp(dt_date))\n\n        dt_datetime = datetime(2013, 1, 2, 12, 1, 3, tzinfo=pytz.utc)\n        assert str(dt_datetime) == str(Timestamp(dt_datetime))\n\n        dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=pytz.utc)\n        assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))\n\n    def test_tz_dateutil(self):\n        utc = dateutil.tz.tzutc()\n\n        dt_date = datetime(2013, 1, 2, tzinfo=utc)\n        assert str(dt_date) == str(Timestamp(dt_date))\n\n        dt_datetime = datetime(2013, 1, 2, 12, 1, 3, tzinfo=utc)\n        assert str(dt_datetime) == str(Timestamp(dt_datetime))\n\n        dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=utc)\n        assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))\n\n    def test_nat_representations(self):\n        for f in (str, repr, methodcaller(\"isoformat\")):\n            assert f(NaT) == \"NaT\"\n\n\n@pytest.mark.parametrize(\n    \"percentiles, expected\",\n    [\n        (\n            [0.01999, 0.02001, 0.5, 0.666666, 0.9999],\n            [\"1.999%\", \"2.001%\", \"50%\", \"66.667%\", \"99.99%\"],\n        ),\n        (\n            [0, 0.5, 0.02001, 0.5, 0.666666, 0.9999],\n            [\"0%\", \"50%\", \"2.0%\", \"50%\", \"66.67%\", \"99.99%\"],\n        ),\n        ([0.281, 0.29, 0.57, 0.58], [\"28.1%\", \"29%\", \"57%\", \"58%\"]),\n        ([0.28, 0.29, 0.57, 0.58], [\"28%\", \"29%\", \"57%\", \"58%\"]),\n    ],\n)\ndef test_format_percentiles(percentiles, expected):\n    result = fmt.format_percentiles(percentiles)\n    assert result == expected\n\n\n@pytest.mark.parametrize(\n    \"percentiles\",\n    [([0.1, np.nan, 0.5]), ([-0.001, 0.1, 0.5]), ([2, 0.1, 0.5]), ([0.1, 0.5, \"a\"])],\n)\ndef test_error_format_percentiles(percentiles):\n    msg = r\"percentiles should all be in the interval \\[0,1\\]\"\n    with pytest.raises(ValueError, match=msg):\n        fmt.format_percentiles(percentiles)\n\n\ndef test_format_percentiles_integer_idx():\n    # Issue #26660\n    result = fmt.format_percentiles(np.linspace(0, 1, 10 + 1))\n    expected = [\n        \"0%\",\n        \"10%\",\n        \"20%\",\n        \"30%\",\n        \"40%\",\n        \"50%\",\n        \"60%\",\n        \"70%\",\n        \"80%\",\n        \"90%\",\n        \"100%\",\n    ]\n    assert result == expected\n\n\n@td.check_file_leaks\ndef test_repr_html_ipython_config(ip):\n    code = textwrap.dedent(\n        \"\"\"\\\n    from pandas import DataFrame\n    df = DataFrame({\"A\": [1, 2]})\n    df._repr_html_()\n\n    cfg = get_ipython().config\n    cfg['IPKernelApp']['parent_appname']\n    df._repr_html_()\n    \"\"\"\n    )\n    result = ip.run_cell(code)\n    assert not result.error_in_exec\n\n\n@pytest.mark.filterwarnings(\"ignore:In future versions `DataFrame.to_latex`\")\n@pytest.mark.parametrize(\"method\", [\"to_string\", \"to_html\", \"to_latex\"])\n@pytest.mark.parametrize(\n    \"encoding, data\",\n    [(None, \"abc\"), (\"utf-8\", \"abc\"), (\"gbk\", \"造成输出中文显示乱码\"), (\"foo\", \"abc\")],\n)\ndef test_filepath_or_buffer_arg(\n    method,\n    filepath_or_buffer,\n    assert_filepath_or_buffer_equals,\n    encoding,\n    data,\n    filepath_or_buffer_id,\n):\n    df = DataFrame([data])\n\n    if filepath_or_buffer_id not in [\"string\", \"pathlike\"] and encoding is not None:\n        with pytest.raises(\n            ValueError, match=\"buf is not a file name and encoding is specified.\"\n        ):\n            getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n    elif encoding == \"foo\":\n        expected_warning = FutureWarning if method == \"to_latex\" else None\n        with tm.assert_produces_warning(expected_warning):\n            with pytest.raises(LookupError, match=\"unknown encoding\"):\n                getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n    else:\n        expected = getattr(df, method)()\n        getattr(df, method)(buf=filepath_or_buffer, encoding=encoding)\n        assert_filepath_or_buffer_equals(expected)\n\n\n@pytest.mark.filterwarnings(\"ignore::FutureWarning\")\n@pytest.mark.parametrize(\"method\", [\"to_string\", \"to_html\", \"to_latex\"])\ndef test_filepath_or_buffer_bad_arg_raises(float_frame, method):\n    msg = \"buf is not a file name and it has no write method\"\n    with pytest.raises(TypeError, match=msg):\n        getattr(float_frame, method)(buf=object())\n"
    },
    {
      "filename": "pandas/tests/io/json/test_normalize.py",
      "content": "import json\n\nimport numpy as np\nimport pytest\n\nfrom pandas import (\n    DataFrame,\n    Index,\n    Series,\n    json_normalize,\n)\nimport pandas._testing as tm\n\nfrom pandas.io.json._normalize import nested_to_record\n\n\n@pytest.fixture\ndef deep_nested():\n    # deeply nested data\n    return [\n        {\n            \"country\": \"USA\",\n            \"states\": [\n                {\n                    \"name\": \"California\",\n                    \"cities\": [\n                        {\"name\": \"San Francisco\", \"pop\": 12345},\n                        {\"name\": \"Los Angeles\", \"pop\": 12346},\n                    ],\n                },\n                {\n                    \"name\": \"Ohio\",\n                    \"cities\": [\n                        {\"name\": \"Columbus\", \"pop\": 1234},\n                        {\"name\": \"Cleveland\", \"pop\": 1236},\n                    ],\n                },\n            ],\n        },\n        {\n            \"country\": \"Germany\",\n            \"states\": [\n                {\"name\": \"Bayern\", \"cities\": [{\"name\": \"Munich\", \"pop\": 12347}]},\n                {\n                    \"name\": \"Nordrhein-Westfalen\",\n                    \"cities\": [\n                        {\"name\": \"Duesseldorf\", \"pop\": 1238},\n                        {\"name\": \"Koeln\", \"pop\": 1239},\n                    ],\n                },\n            ],\n        },\n    ]\n\n\n@pytest.fixture\ndef state_data():\n    return [\n        {\n            \"counties\": [\n                {\"name\": \"Dade\", \"population\": 12345},\n                {\"name\": \"Broward\", \"population\": 40000},\n                {\"name\": \"Palm Beach\", \"population\": 60000},\n            ],\n            \"info\": {\"governor\": \"Rick Scott\"},\n            \"shortname\": \"FL\",\n            \"state\": \"Florida\",\n        },\n        {\n            \"counties\": [\n                {\"name\": \"Summit\", \"population\": 1234},\n                {\"name\": \"Cuyahoga\", \"population\": 1337},\n            ],\n            \"info\": {\"governor\": \"John Kasich\"},\n            \"shortname\": \"OH\",\n            \"state\": \"Ohio\",\n        },\n    ]\n\n\n@pytest.fixture\ndef author_missing_data():\n    return [\n        {\"info\": None},\n        {\n            \"info\": {\"created_at\": \"11/08/1993\", \"last_updated\": \"26/05/2012\"},\n            \"author_name\": {\"first\": \"Jane\", \"last_name\": \"Doe\"},\n        },\n    ]\n\n\n@pytest.fixture\ndef missing_metadata():\n    return [\n        {\n            \"name\": \"Alice\",\n            \"addresses\": [\n                {\n                    \"number\": 9562,\n                    \"street\": \"Morris St.\",\n                    \"city\": \"Massillon\",\n                    \"state\": \"OH\",\n                    \"zip\": 44646,\n                }\n            ],\n            \"previous_residences\": {\"cities\": [{\"city_name\": \"Foo York City\"}]},\n        },\n        {\n            \"addresses\": [\n                {\n                    \"number\": 8449,\n                    \"street\": \"Spring St.\",\n                    \"city\": \"Elizabethton\",\n                    \"state\": \"TN\",\n                    \"zip\": 37643,\n                }\n            ],\n            \"previous_residences\": {\"cities\": [{\"city_name\": \"Barmingham\"}]},\n        },\n    ]\n\n\n@pytest.fixture\ndef max_level_test_input_data():\n    \"\"\"\n    input data to test json_normalize with max_level param\n    \"\"\"\n    return [\n        {\n            \"CreatedBy\": {\"Name\": \"User001\"},\n            \"Lookup\": {\n                \"TextField\": \"Some text\",\n                \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n            },\n            \"Image\": {\"a\": \"b\"},\n        }\n    ]\n\n\nclass TestJSONNormalize:\n    def test_simple_records(self):\n        recs = [\n            {\"a\": 1, \"b\": 2, \"c\": 3},\n            {\"a\": 4, \"b\": 5, \"c\": 6},\n            {\"a\": 7, \"b\": 8, \"c\": 9},\n            {\"a\": 10, \"b\": 11, \"c\": 12},\n        ]\n\n        result = json_normalize(recs)\n        expected = DataFrame(recs)\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize(self, state_data):\n        result = json_normalize(state_data[0], \"counties\")\n        expected = DataFrame(state_data[0][\"counties\"])\n        tm.assert_frame_equal(result, expected)\n\n        result = json_normalize(state_data, \"counties\")\n\n        expected = []\n        for rec in state_data:\n            expected.extend(rec[\"counties\"])\n        expected = DataFrame(expected)\n\n        tm.assert_frame_equal(result, expected)\n\n        result = json_normalize(state_data, \"counties\", meta=\"state\")\n        expected[\"state\"] = np.array([\"Florida\", \"Ohio\"]).repeat([3, 2])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_empty_array(self):\n        result = json_normalize([])\n        expected = DataFrame()\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"data, record_path, exception_type\",\n        [\n            ([{\"a\": 0}, {\"a\": 1}], None, None),\n            ({\"a\": [{\"a\": 0}, {\"a\": 1}]}, \"a\", None),\n            ('{\"a\": [{\"a\": 0}, {\"a\": 1}]}', None, NotImplementedError),\n            (None, None, NotImplementedError),\n        ],\n    )\n    def test_accepted_input(self, data, record_path, exception_type):\n        if exception_type is not None:\n            with pytest.raises(exception_type, match=tm.EMPTY_STRING_PATTERN):\n                json_normalize(data, record_path=record_path)\n        else:\n            result = json_normalize(data, record_path=record_path)\n            expected = DataFrame([0, 1], columns=[\"a\"])\n            tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize_with_separator(self, deep_nested):\n        # GH 14883\n        result = json_normalize({\"A\": {\"A\": 1, \"B\": 2}})\n        expected = DataFrame([[1, 2]], columns=[\"A.A\", \"A.B\"])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n\n        result = json_normalize({\"A\": {\"A\": 1, \"B\": 2}}, sep=\"_\")\n        expected = DataFrame([[1, 2]], columns=[\"A_A\", \"A_B\"])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n\n        result = json_normalize({\"A\": {\"A\": 1, \"B\": 2}}, sep=\"\\u03c3\")\n        expected = DataFrame([[1, 2]], columns=[\"A\\u03c3A\", \"A\\u03c3B\"])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n\n        result = json_normalize(\n            deep_nested,\n            [\"states\", \"cities\"],\n            meta=[\"country\", [\"states\", \"name\"]],\n            sep=\"_\",\n        )\n        expected = Index([\"name\", \"pop\", \"country\", \"states_name\"]).sort_values()\n        assert result.columns.sort_values().equals(expected)\n\n    def test_normalize_with_multichar_separator(self):\n        # GH #43831\n        data = {\"a\": [1, 2], \"b\": {\"b_1\": 2, \"b_2\": (3, 4)}}\n        result = json_normalize(data, sep=\"__\")\n        expected = DataFrame([[[1, 2], 2, (3, 4)]], columns=[\"a\", \"b__b_1\", \"b__b_2\"])\n        tm.assert_frame_equal(result, expected)\n\n    def test_value_array_record_prefix(self):\n        # GH 21536\n        result = json_normalize({\"A\": [1, 2]}, \"A\", record_prefix=\"Prefix.\")\n        expected = DataFrame([[1], [2]], columns=[\"Prefix.0\"])\n        tm.assert_frame_equal(result, expected)\n\n    def test_nested_object_record_path(self):\n        # GH 22706\n        data = {\n            \"state\": \"Florida\",\n            \"info\": {\n                \"governor\": \"Rick Scott\",\n                \"counties\": [\n                    {\"name\": \"Dade\", \"population\": 12345},\n                    {\"name\": \"Broward\", \"population\": 40000},\n                    {\"name\": \"Palm Beach\", \"population\": 60000},\n                ],\n            },\n        }\n        result = json_normalize(data, record_path=[\"info\", \"counties\"])\n        expected = DataFrame(\n            [[\"Dade\", 12345], [\"Broward\", 40000], [\"Palm Beach\", 60000]],\n            columns=[\"name\", \"population\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_more_deeply_nested(self, deep_nested):\n\n        result = json_normalize(\n            deep_nested, [\"states\", \"cities\"], meta=[\"country\", [\"states\", \"name\"]]\n        )\n        ex_data = {\n            \"country\": [\"USA\"] * 4 + [\"Germany\"] * 3,\n            \"states.name\": [\n                \"California\",\n                \"California\",\n                \"Ohio\",\n                \"Ohio\",\n                \"Bayern\",\n                \"Nordrhein-Westfalen\",\n                \"Nordrhein-Westfalen\",\n            ],\n            \"name\": [\n                \"San Francisco\",\n                \"Los Angeles\",\n                \"Columbus\",\n                \"Cleveland\",\n                \"Munich\",\n                \"Duesseldorf\",\n                \"Koeln\",\n            ],\n            \"pop\": [12345, 12346, 1234, 1236, 12347, 1238, 1239],\n        }\n\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_shallow_nested(self):\n        data = [\n            {\n                \"state\": \"Florida\",\n                \"shortname\": \"FL\",\n                \"info\": {\"governor\": \"Rick Scott\"},\n                \"counties\": [\n                    {\"name\": \"Dade\", \"population\": 12345},\n                    {\"name\": \"Broward\", \"population\": 40000},\n                    {\"name\": \"Palm Beach\", \"population\": 60000},\n                ],\n            },\n            {\n                \"state\": \"Ohio\",\n                \"shortname\": \"OH\",\n                \"info\": {\"governor\": \"John Kasich\"},\n                \"counties\": [\n                    {\"name\": \"Summit\", \"population\": 1234},\n                    {\"name\": \"Cuyahoga\", \"population\": 1337},\n                ],\n            },\n        ]\n\n        result = json_normalize(\n            data, \"counties\", [\"state\", \"shortname\", [\"info\", \"governor\"]]\n        )\n        ex_data = {\n            \"name\": [\"Dade\", \"Broward\", \"Palm Beach\", \"Summit\", \"Cuyahoga\"],\n            \"state\": [\"Florida\"] * 3 + [\"Ohio\"] * 2,\n            \"shortname\": [\"FL\", \"FL\", \"FL\", \"OH\", \"OH\"],\n            \"info.governor\": [\"Rick Scott\"] * 3 + [\"John Kasich\"] * 2,\n            \"population\": [12345, 40000, 60000, 1234, 1337],\n        }\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_nested_meta_path_with_nested_record_path(self, state_data):\n        # GH 27220\n        result = json_normalize(\n            data=state_data,\n            record_path=[\"counties\"],\n            meta=[\"state\", \"shortname\", [\"info\", \"governor\"]],\n            errors=\"ignore\",\n        )\n\n        ex_data = {\n            \"name\": [\"Dade\", \"Broward\", \"Palm Beach\", \"Summit\", \"Cuyahoga\"],\n            \"population\": [12345, 40000, 60000, 1234, 1337],\n            \"state\": [\"Florida\"] * 3 + [\"Ohio\"] * 2,\n            \"shortname\": [\"FL\"] * 3 + [\"OH\"] * 2,\n            \"info.governor\": [\"Rick Scott\"] * 3 + [\"John Kasich\"] * 2,\n        }\n\n        expected = DataFrame(ex_data)\n        tm.assert_frame_equal(result, expected)\n\n    def test_meta_name_conflict(self):\n        data = [\n            {\n                \"foo\": \"hello\",\n                \"bar\": \"there\",\n                \"data\": [\n                    {\"foo\": \"something\", \"bar\": \"else\"},\n                    {\"foo\": \"something2\", \"bar\": \"else2\"},\n                ],\n            }\n        ]\n\n        msg = r\"Conflicting metadata name (foo|bar), need distinguishing prefix\"\n        with pytest.raises(ValueError, match=msg):\n            json_normalize(data, \"data\", meta=[\"foo\", \"bar\"])\n\n        result = json_normalize(data, \"data\", meta=[\"foo\", \"bar\"], meta_prefix=\"meta\")\n\n        for val in [\"metafoo\", \"metabar\", \"foo\", \"bar\"]:\n            assert val in result\n\n    def test_meta_parameter_not_modified(self):\n        # GH 18610\n        data = [\n            {\n                \"foo\": \"hello\",\n                \"bar\": \"there\",\n                \"data\": [\n                    {\"foo\": \"something\", \"bar\": \"else\"},\n                    {\"foo\": \"something2\", \"bar\": \"else2\"},\n                ],\n            }\n        ]\n\n        COLUMNS = [\"foo\", \"bar\"]\n        result = json_normalize(data, \"data\", meta=COLUMNS, meta_prefix=\"meta\")\n\n        assert COLUMNS == [\"foo\", \"bar\"]\n        for val in [\"metafoo\", \"metabar\", \"foo\", \"bar\"]:\n            assert val in result\n\n    def test_record_prefix(self, state_data):\n        result = json_normalize(state_data[0], \"counties\")\n        expected = DataFrame(state_data[0][\"counties\"])\n        tm.assert_frame_equal(result, expected)\n\n        result = json_normalize(\n            state_data, \"counties\", meta=\"state\", record_prefix=\"county_\"\n        )\n\n        expected = []\n        for rec in state_data:\n            expected.extend(rec[\"counties\"])\n        expected = DataFrame(expected)\n        expected = expected.rename(columns=lambda x: \"county_\" + x)\n        expected[\"state\"] = np.array([\"Florida\", \"Ohio\"]).repeat([3, 2])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_non_ascii_key(self):\n        testjson = (\n            b'[{\"\\xc3\\x9cnic\\xc3\\xb8de\":0,\"sub\":{\"A\":1, \"B\":2}},'\n            + b'{\"\\xc3\\x9cnic\\xc3\\xb8de\":1,\"sub\":{\"A\":3, \"B\":4}}]'\n        ).decode(\"utf8\")\n\n        testdata = {\n            b\"\\xc3\\x9cnic\\xc3\\xb8de\".decode(\"utf8\"): [0, 1],\n            \"sub.A\": [1, 3],\n            \"sub.B\": [2, 4],\n        }\n        expected = DataFrame(testdata)\n\n        result = json_normalize(json.loads(testjson))\n        tm.assert_frame_equal(result, expected)\n\n    def test_missing_field(self, author_missing_data):\n        # GH20030:\n        result = json_normalize(author_missing_data)\n        ex_data = [\n            {\n                \"info\": np.nan,\n                \"info.created_at\": np.nan,\n                \"info.last_updated\": np.nan,\n                \"author_name.first\": np.nan,\n                \"author_name.last_name\": np.nan,\n            },\n            {\n                \"info\": None,\n                \"info.created_at\": \"11/08/1993\",\n                \"info.last_updated\": \"26/05/2012\",\n                \"author_name.first\": \"Jane\",\n                \"author_name.last_name\": \"Doe\",\n            },\n        ]\n        expected = DataFrame(ex_data)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"max_level,expected\",\n        [\n            (\n                0,\n                [\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                        \"CreatedBy\": {\"Name\": \"User001\"},\n                        \"Image\": {\"a\": \"b\"},\n                    },\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                        \"CreatedBy\": {\"Name\": \"User001\"},\n                        \"Image\": {\"a\": \"b\"},\n                    },\n                ],\n            ),\n            (\n                1,\n                [\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField.Id\": \"ID001\",\n                        \"UserField.Name\": \"Name001\",\n                        \"CreatedBy\": {\"Name\": \"User001\"},\n                        \"Image\": {\"a\": \"b\"},\n                    },\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField.Id\": \"ID001\",\n                        \"UserField.Name\": \"Name001\",\n                        \"CreatedBy\": {\"Name\": \"User001\"},\n                        \"Image\": {\"a\": \"b\"},\n                    },\n                ],\n            ),\n        ],\n    )\n    def test_max_level_with_records_path(self, max_level, expected):\n        # GH23843: Enhanced JSON normalize\n        test_input = [\n            {\n                \"CreatedBy\": {\"Name\": \"User001\"},\n                \"Lookup\": [\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                    },\n                    {\n                        \"TextField\": \"Some text\",\n                        \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                    },\n                ],\n                \"Image\": {\"a\": \"b\"},\n                \"tags\": [\n                    {\"foo\": \"something\", \"bar\": \"else\"},\n                    {\"foo\": \"something2\", \"bar\": \"else2\"},\n                ],\n            }\n        ]\n\n        result = json_normalize(\n            test_input,\n            record_path=[\"Lookup\"],\n            meta=[[\"CreatedBy\"], [\"Image\"]],\n            max_level=max_level,\n        )\n        expected_df = DataFrame(data=expected, columns=result.columns.values)\n        tm.assert_equal(expected_df, result)\n\n    def test_nested_flattening_consistent(self):\n        # see gh-21537\n        df1 = json_normalize([{\"A\": {\"B\": 1}}])\n        df2 = json_normalize({\"dummy\": [{\"A\": {\"B\": 1}}]}, \"dummy\")\n\n        # They should be the same.\n        tm.assert_frame_equal(df1, df2)\n\n    def test_nonetype_record_path(self, nulls_fixture):\n        # see gh-30148\n        # should not raise TypeError\n        result = json_normalize(\n            [\n                {\"state\": \"Texas\", \"info\": nulls_fixture},\n                {\"state\": \"Florida\", \"info\": [{\"i\": 2}]},\n            ],\n            record_path=[\"info\"],\n        )\n        expected = DataFrame({\"i\": 2}, index=[0])\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize(\"value\", [\"false\", \"true\", \"{}\", \"1\", '\"text\"'])\n    def test_non_list_record_path_errors(self, value):\n        # see gh-30148, GH 26284\n        parsed_value = json.loads(value)\n        test_input = {\"state\": \"Texas\", \"info\": parsed_value}\n        test_path = \"info\"\n        msg = (\n            f\"{test_input} has non list value {parsed_value} for path {test_path}. \"\n            \"Must be list or null.\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            json_normalize([test_input], record_path=[test_path])\n\n    def test_meta_non_iterable(self):\n        # GH 31507\n        data = \"\"\"[{\"id\": 99, \"data\": [{\"one\": 1, \"two\": 2}]}]\"\"\"\n\n        result = json_normalize(json.loads(data), record_path=[\"data\"], meta=[\"id\"])\n        expected = DataFrame(\n            {\"one\": [1], \"two\": [2], \"id\": np.array([99], dtype=object)}\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_generator(self, state_data):\n        # GH35923 Fix pd.json_normalize to not skip the first element of a\n        # generator input\n        def generator_data():\n            yield from state_data[0][\"counties\"]\n\n        result = json_normalize(generator_data())\n        expected = DataFrame(state_data[0][\"counties\"])\n\n        tm.assert_frame_equal(result, expected)\n\n\nclass TestNestedToRecord:\n    def test_flat_stays_flat(self):\n        recs = [{\"flat1\": 1, \"flat2\": 2}, {\"flat3\": 3, \"flat2\": 4}]\n        result = nested_to_record(recs)\n        expected = recs\n        assert result == expected\n\n    def test_one_level_deep_flattens(self):\n        data = {\"flat1\": 1, \"dict1\": {\"c\": 1, \"d\": 2}}\n\n        result = nested_to_record(data)\n        expected = {\"dict1.c\": 1, \"dict1.d\": 2, \"flat1\": 1}\n\n        assert result == expected\n\n    def test_nested_flattens(self):\n        data = {\n            \"flat1\": 1,\n            \"dict1\": {\"c\": 1, \"d\": 2},\n            \"nested\": {\"e\": {\"c\": 1, \"d\": 2}, \"d\": 2},\n        }\n\n        result = nested_to_record(data)\n        expected = {\n            \"dict1.c\": 1,\n            \"dict1.d\": 2,\n            \"flat1\": 1,\n            \"nested.d\": 2,\n            \"nested.e.c\": 1,\n            \"nested.e.d\": 2,\n        }\n\n        assert result == expected\n\n    def test_json_normalize_errors(self, missing_metadata):\n        # GH14583:\n        # If meta keys are not always present a new option to set\n        # errors='ignore' has been implemented\n\n        msg = (\n            \"Key 'name' not found. To replace missing values of \"\n            \"'name' with np.nan, pass in errors='ignore'\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            json_normalize(\n                data=missing_metadata,\n                record_path=\"addresses\",\n                meta=\"name\",\n                errors=\"raise\",\n            )\n\n    def test_missing_meta(self, missing_metadata):\n        # GH25468\n        # If metadata is nullable with errors set to ignore, the null values\n        # should be numpy.nan values\n        result = json_normalize(\n            data=missing_metadata, record_path=\"addresses\", meta=\"name\", errors=\"ignore\"\n        )\n        ex_data = [\n            [9562, \"Morris St.\", \"Massillon\", \"OH\", 44646, \"Alice\"],\n            [8449, \"Spring St.\", \"Elizabethton\", \"TN\", 37643, np.nan],\n        ]\n        columns = [\"number\", \"street\", \"city\", \"state\", \"zip\", \"name\"]\n        expected = DataFrame(ex_data, columns=columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_missing_nested_meta(self):\n        # GH44312\n        # If errors=\"ignore\" and nested metadata is null, we should return nan\n        data = {\"meta\": \"foo\", \"nested_meta\": None, \"value\": [{\"rec\": 1}, {\"rec\": 2}]}\n        result = json_normalize(\n            data,\n            record_path=\"value\",\n            meta=[\"meta\", [\"nested_meta\", \"leaf\"]],\n            errors=\"ignore\",\n        )\n        ex_data = [[1, \"foo\", np.nan], [2, \"foo\", np.nan]]\n        columns = [\"rec\", \"meta\", \"nested_meta.leaf\"]\n        expected = DataFrame(ex_data, columns=columns).astype(\n            {\"nested_meta.leaf\": object}\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # If errors=\"raise\" and nested metadata is null, we should raise with the\n        # key of the first missing level\n        with pytest.raises(KeyError, match=\"'leaf' not found\"):\n            json_normalize(\n                data,\n                record_path=\"value\",\n                meta=[\"meta\", [\"nested_meta\", \"leaf\"]],\n                errors=\"raise\",\n            )\n\n    def test_missing_meta_multilevel_record_path_errors_raise(self, missing_metadata):\n        # GH41876\n        # Ensure errors='raise' works as intended even when a record_path of length\n        # greater than one is passed in\n        msg = (\n            \"Key 'name' not found. To replace missing values of \"\n            \"'name' with np.nan, pass in errors='ignore'\"\n        )\n        with pytest.raises(KeyError, match=msg):\n            json_normalize(\n                data=missing_metadata,\n                record_path=[\"previous_residences\", \"cities\"],\n                meta=\"name\",\n                errors=\"raise\",\n            )\n\n    def test_missing_meta_multilevel_record_path_errors_ignore(self, missing_metadata):\n        # GH41876\n        # Ensure errors='ignore' works as intended even when a record_path of length\n        # greater than one is passed in\n        result = json_normalize(\n            data=missing_metadata,\n            record_path=[\"previous_residences\", \"cities\"],\n            meta=\"name\",\n            errors=\"ignore\",\n        )\n        ex_data = [\n            [\"Foo York City\", \"Alice\"],\n            [\"Barmingham\", np.nan],\n        ]\n        columns = [\"city_name\", \"name\"]\n        expected = DataFrame(ex_data, columns=columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_donot_drop_nonevalues(self):\n        # GH21356\n        data = [\n            {\"info\": None, \"author_name\": {\"first\": \"Smith\", \"last_name\": \"Appleseed\"}},\n            {\n                \"info\": {\"created_at\": \"11/08/1993\", \"last_updated\": \"26/05/2012\"},\n                \"author_name\": {\"first\": \"Jane\", \"last_name\": \"Doe\"},\n            },\n        ]\n        result = nested_to_record(data)\n        expected = [\n            {\n                \"info\": None,\n                \"author_name.first\": \"Smith\",\n                \"author_name.last_name\": \"Appleseed\",\n            },\n            {\n                \"author_name.first\": \"Jane\",\n                \"author_name.last_name\": \"Doe\",\n                \"info.created_at\": \"11/08/1993\",\n                \"info.last_updated\": \"26/05/2012\",\n            },\n        ]\n\n        assert result == expected\n\n    def test_nonetype_top_level_bottom_level(self):\n        # GH21158: If inner level json has a key with a null value\n        # make sure it does not do a new_d.pop twice and except\n        data = {\n            \"id\": None,\n            \"location\": {\n                \"country\": {\n                    \"state\": {\n                        \"id\": None,\n                        \"town.info\": {\n                            \"id\": None,\n                            \"region\": None,\n                            \"x\": 49.151580810546875,\n                            \"y\": -33.148521423339844,\n                            \"z\": 27.572303771972656,\n                        },\n                    }\n                }\n            },\n        }\n        result = nested_to_record(data)\n        expected = {\n            \"id\": None,\n            \"location.country.state.id\": None,\n            \"location.country.state.town.info.id\": None,\n            \"location.country.state.town.info.region\": None,\n            \"location.country.state.town.info.x\": 49.151580810546875,\n            \"location.country.state.town.info.y\": -33.148521423339844,\n            \"location.country.state.town.info.z\": 27.572303771972656,\n        }\n        assert result == expected\n\n    def test_nonetype_multiple_levels(self):\n        # GH21158: If inner level json has a key with a null value\n        # make sure it does not do a new_d.pop twice and except\n        data = {\n            \"id\": None,\n            \"location\": {\n                \"id\": None,\n                \"country\": {\n                    \"id\": None,\n                    \"state\": {\n                        \"id\": None,\n                        \"town.info\": {\n                            \"region\": None,\n                            \"x\": 49.151580810546875,\n                            \"y\": -33.148521423339844,\n                            \"z\": 27.572303771972656,\n                        },\n                    },\n                },\n            },\n        }\n        result = nested_to_record(data)\n        expected = {\n            \"id\": None,\n            \"location.id\": None,\n            \"location.country.id\": None,\n            \"location.country.state.id\": None,\n            \"location.country.state.town.info.region\": None,\n            \"location.country.state.town.info.x\": 49.151580810546875,\n            \"location.country.state.town.info.y\": -33.148521423339844,\n            \"location.country.state.town.info.z\": 27.572303771972656,\n        }\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        \"max_level, expected\",\n        [\n            (\n                None,\n                [\n                    {\n                        \"CreatedBy.Name\": \"User001\",\n                        \"Lookup.TextField\": \"Some text\",\n                        \"Lookup.UserField.Id\": \"ID001\",\n                        \"Lookup.UserField.Name\": \"Name001\",\n                        \"Image.a\": \"b\",\n                    }\n                ],\n            ),\n            (\n                0,\n                [\n                    {\n                        \"CreatedBy\": {\"Name\": \"User001\"},\n                        \"Lookup\": {\n                            \"TextField\": \"Some text\",\n                            \"UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                        },\n                        \"Image\": {\"a\": \"b\"},\n                    }\n                ],\n            ),\n            (\n                1,\n                [\n                    {\n                        \"CreatedBy.Name\": \"User001\",\n                        \"Lookup.TextField\": \"Some text\",\n                        \"Lookup.UserField\": {\"Id\": \"ID001\", \"Name\": \"Name001\"},\n                        \"Image.a\": \"b\",\n                    }\n                ],\n            ),\n        ],\n    )\n    def test_with_max_level(self, max_level, expected, max_level_test_input_data):\n        # GH23843: Enhanced JSON normalize\n        output = nested_to_record(max_level_test_input_data, max_level=max_level)\n        assert output == expected\n\n    def test_with_large_max_level(self):\n        # GH23843: Enhanced JSON normalize\n        max_level = 100\n        input_data = [\n            {\n                \"CreatedBy\": {\n                    \"user\": {\n                        \"name\": {\"firstname\": \"Leo\", \"LastName\": \"Thomson\"},\n                        \"family_tree\": {\n                            \"father\": {\n                                \"name\": \"Father001\",\n                                \"father\": {\n                                    \"Name\": \"Father002\",\n                                    \"father\": {\n                                        \"name\": \"Father003\",\n                                        \"father\": {\"Name\": \"Father004\"},\n                                    },\n                                },\n                            }\n                        },\n                    }\n                }\n            }\n        ]\n        expected = [\n            {\n                \"CreatedBy.user.name.firstname\": \"Leo\",\n                \"CreatedBy.user.name.LastName\": \"Thomson\",\n                \"CreatedBy.user.family_tree.father.name\": \"Father001\",\n                \"CreatedBy.user.family_tree.father.father.Name\": \"Father002\",\n                \"CreatedBy.user.family_tree.father.father.father.name\": \"Father003\",\n                \"CreatedBy.user.family_tree.father.father.father.father.Name\": \"Father004\",  # noqa: E501\n            }\n        ]\n        output = nested_to_record(input_data, max_level=max_level)\n        assert output == expected\n\n    def test_deprecated_import(self):\n        with tm.assert_produces_warning(FutureWarning):\n            from pandas.io.json import json_normalize  # pylint: disable=reimported\n\n            recs = [{\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 4, \"b\": 5, \"c\": 6}]\n            json_normalize(recs)\n\n    def test_series_non_zero_index(self):\n        # GH 19020\n        data = {\n            0: {\"id\": 1, \"name\": \"Foo\", \"elements\": {\"a\": 1}},\n            1: {\"id\": 2, \"name\": \"Bar\", \"elements\": {\"b\": 2}},\n            2: {\"id\": 3, \"name\": \"Baz\", \"elements\": {\"c\": 3}},\n        }\n        s = Series(data)\n        s.index = [1, 2, 3]\n        result = json_normalize(s)\n        expected = DataFrame(\n            {\n                \"id\": [1, 2, 3],\n                \"name\": [\"Foo\", \"Bar\", \"Baz\"],\n                \"elements.a\": [1.0, np.nan, np.nan],\n                \"elements.b\": [np.nan, 2.0, np.nan],\n                \"elements.c\": [np.nan, np.nan, 3.0],\n            }\n        )\n        tm.assert_frame_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/reductions/test_reductions.py",
      "content": "from datetime import (\n    datetime,\n    timedelta,\n)\n\nimport numpy as np\nimport pytest\n\nimport pandas as pd\nfrom pandas import (\n    Categorical,\n    DataFrame,\n    DatetimeIndex,\n    Index,\n    NaT,\n    Period,\n    PeriodIndex,\n    RangeIndex,\n    Series,\n    Timedelta,\n    TimedeltaIndex,\n    Timestamp,\n    date_range,\n    isna,\n    timedelta_range,\n    to_timedelta,\n)\nimport pandas._testing as tm\nfrom pandas.core import nanops\n\n\ndef get_objs():\n    indexes = [\n        tm.makeBoolIndex(10, name=\"a\"),\n        tm.makeIntIndex(10, name=\"a\"),\n        tm.makeFloatIndex(10, name=\"a\"),\n        tm.makeDateIndex(10, name=\"a\"),\n        tm.makeDateIndex(10, name=\"a\").tz_localize(tz=\"US/Eastern\"),\n        tm.makePeriodIndex(10, name=\"a\"),\n        tm.makeStringIndex(10, name=\"a\"),\n    ]\n\n    arr = np.random.randn(10)\n    series = [Series(arr, index=idx, name=\"a\") for idx in indexes]\n\n    objs = indexes + series\n    return objs\n\n\nobjs = get_objs()\n\n\nclass TestReductions:\n    @pytest.mark.parametrize(\"opname\", [\"max\", \"min\"])\n    @pytest.mark.parametrize(\"obj\", objs)\n    def test_ops(self, opname, obj):\n        result = getattr(obj, opname)()\n        if not isinstance(obj, PeriodIndex):\n            expected = getattr(obj.values, opname)()\n        else:\n            expected = Period(ordinal=getattr(obj.asi8, opname)(), freq=obj.freq)\n\n        if getattr(obj, \"tz\", None) is not None:\n            # We need to de-localize before comparing to the numpy-produced result\n            expected = expected.astype(\"M8[ns]\").astype(\"int64\")\n            assert result.value == expected\n        else:\n            assert result == expected\n\n    @pytest.mark.parametrize(\"opname\", [\"max\", \"min\"])\n    @pytest.mark.parametrize(\n        \"dtype, val\",\n        [\n            (\"object\", 2.0),\n            (\"float64\", 2.0),\n            (\"datetime64[ns]\", datetime(2011, 11, 1)),\n            (\"Int64\", 2),\n            (\"boolean\", True),\n        ],\n    )\n    def test_nanminmax(self, opname, dtype, val, index_or_series):\n        # GH#7261\n        klass = index_or_series\n\n        def check_missing(res):\n            if dtype == \"datetime64[ns]\":\n                return res is NaT\n            elif dtype in [\"Int64\", \"boolean\"]:\n                return res is pd.NA\n            else:\n                return isna(res)\n\n        obj = klass([None], dtype=dtype)\n        assert check_missing(getattr(obj, opname)())\n        assert check_missing(getattr(obj, opname)(skipna=False))\n\n        obj = klass([], dtype=dtype)\n        assert check_missing(getattr(obj, opname)())\n        assert check_missing(getattr(obj, opname)(skipna=False))\n\n        if dtype == \"object\":\n            # generic test with object only works for empty / all NaN\n            return\n\n        obj = klass([None, val], dtype=dtype)\n        assert getattr(obj, opname)() == val\n        assert check_missing(getattr(obj, opname)(skipna=False))\n\n        obj = klass([None, val, None], dtype=dtype)\n        assert getattr(obj, opname)() == val\n        assert check_missing(getattr(obj, opname)(skipna=False))\n\n    @pytest.mark.parametrize(\"opname\", [\"max\", \"min\"])\n    def test_nanargminmax(self, opname, index_or_series):\n        # GH#7261\n        klass = index_or_series\n        arg_op = \"arg\" + opname if klass is Index else \"idx\" + opname\n\n        obj = klass([NaT, datetime(2011, 11, 1)])\n        assert getattr(obj, arg_op)() == 1\n        result = getattr(obj, arg_op)(skipna=False)\n        if klass is Series:\n            assert np.isnan(result)\n        else:\n            assert result == -1\n\n        obj = klass([NaT, datetime(2011, 11, 1), NaT])\n        # check DatetimeIndex non-monotonic path\n        assert getattr(obj, arg_op)() == 1\n        result = getattr(obj, arg_op)(skipna=False)\n        if klass is Series:\n            assert np.isnan(result)\n        else:\n            assert result == -1\n\n    @pytest.mark.parametrize(\"opname\", [\"max\", \"min\"])\n    @pytest.mark.parametrize(\"dtype\", [\"M8[ns]\", \"datetime64[ns, UTC]\"])\n    def test_nanops_empty_object(self, opname, index_or_series, dtype):\n        klass = index_or_series\n        arg_op = \"arg\" + opname if klass is Index else \"idx\" + opname\n\n        obj = klass([], dtype=dtype)\n\n        assert getattr(obj, opname)() is NaT\n        assert getattr(obj, opname)(skipna=False) is NaT\n\n        with pytest.raises(ValueError, match=\"empty sequence\"):\n            getattr(obj, arg_op)()\n        with pytest.raises(ValueError, match=\"empty sequence\"):\n            getattr(obj, arg_op)(skipna=False)\n\n    def test_argminmax(self):\n        obj = Index(np.arange(5, dtype=\"int64\"))\n        assert obj.argmin() == 0\n        assert obj.argmax() == 4\n\n        obj = Index([np.nan, 1, np.nan, 2])\n        assert obj.argmin() == 1\n        assert obj.argmax() == 3\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([np.nan])\n        assert obj.argmin() == -1\n        assert obj.argmax() == -1\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([NaT, datetime(2011, 11, 1), datetime(2011, 11, 2), NaT])\n        assert obj.argmin() == 1\n        assert obj.argmax() == 2\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([NaT])\n        assert obj.argmin() == -1\n        assert obj.argmax() == -1\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n    @pytest.mark.parametrize(\"op, expected_col\", [[\"max\", \"a\"], [\"min\", \"b\"]])\n    def test_same_tz_min_max_axis_1(self, op, expected_col):\n        # GH 10390\n        df = DataFrame(\n            date_range(\"2016-01-01 00:00:00\", periods=3, tz=\"UTC\"), columns=[\"a\"]\n        )\n        df[\"b\"] = df.a.subtract(Timedelta(seconds=3600))\n        result = getattr(df, op)(axis=1)\n        expected = df[expected_col].rename(None)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"func\", [\"maximum\", \"minimum\"])\n    def test_numpy_reduction_with_tz_aware_dtype(self, tz_aware_fixture, func):\n        # GH 15552\n        tz = tz_aware_fixture\n        arg = pd.to_datetime([\"2019\"]).tz_localize(tz)\n        expected = Series(arg)\n        result = getattr(np, func)(expected, expected)\n        tm.assert_series_equal(result, expected)\n\n    def test_nan_int_timedelta_sum(self):\n        # GH 27185\n        df = DataFrame(\n            {\n                \"A\": Series([1, 2, NaT], dtype=\"timedelta64[ns]\"),\n                \"B\": Series([1, 2, np.nan], dtype=\"Int64\"),\n            }\n        )\n        expected = Series({\"A\": Timedelta(3), \"B\": 3})\n        result = df.sum()\n        tm.assert_series_equal(result, expected)\n\n\nclass TestIndexReductions:\n    # Note: the name TestIndexReductions indicates these tests\n    #  were moved from a Index-specific test file, _not_ that these tests are\n    #  intended long-term to be Index-specific\n\n    @pytest.mark.parametrize(\n        \"start,stop,step\",\n        [\n            (0, 400, 3),\n            (500, 0, -6),\n            (-(10**6), 10**6, 4),\n            (10**6, -(10**6), -4),\n            (0, 10, 20),\n        ],\n    )\n    def test_max_min_range(self, start, stop, step):\n        # GH#17607\n        idx = RangeIndex(start, stop, step)\n        expected = idx._values.max()\n        result = idx.max()\n        assert result == expected\n\n        # skipna should be irrelevant since RangeIndex should never have NAs\n        result2 = idx.max(skipna=False)\n        assert result2 == expected\n\n        expected = idx._values.min()\n        result = idx.min()\n        assert result == expected\n\n        # skipna should be irrelevant since RangeIndex should never have NAs\n        result2 = idx.min(skipna=False)\n        assert result2 == expected\n\n        # empty\n        idx = RangeIndex(start, stop, -step)\n        assert isna(idx.max())\n        assert isna(idx.min())\n\n    def test_minmax_timedelta64(self):\n\n        # monotonic\n        idx1 = TimedeltaIndex([\"1 days\", \"2 days\", \"3 days\"])\n        assert idx1.is_monotonic_increasing\n\n        # non-monotonic\n        idx2 = TimedeltaIndex([\"1 days\", np.nan, \"3 days\", \"NaT\"])\n        assert not idx2.is_monotonic_increasing\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == Timedelta(\"1 days\")\n            assert idx.max() == Timedelta(\"3 days\")\n            assert idx.argmin() == 0\n            assert idx.argmax() == 2\n\n    @pytest.mark.parametrize(\"op\", [\"min\", \"max\"])\n    def test_minmax_timedelta_empty_or_na(self, op):\n        # Return NaT\n        obj = TimedeltaIndex([])\n        assert getattr(obj, op)() is NaT\n\n        obj = TimedeltaIndex([NaT])\n        assert getattr(obj, op)() is NaT\n\n        obj = TimedeltaIndex([NaT, NaT, NaT])\n        assert getattr(obj, op)() is NaT\n\n    def test_numpy_minmax_timedelta64(self):\n        td = timedelta_range(\"16815 days\", \"16820 days\", freq=\"D\")\n\n        assert np.min(td) == Timedelta(\"16815 days\")\n        assert np.max(td) == Timedelta(\"16820 days\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(td, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(td, out=0)\n\n        assert np.argmin(td) == 0\n        assert np.argmax(td) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(td, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(td, out=0)\n\n    def test_timedelta_ops(self):\n        # GH#4984\n        # make sure ops return Timedelta\n        s = Series(\n            [Timestamp(\"20130101\") + timedelta(seconds=i * i) for i in range(10)]\n        )\n        td = s.diff()\n\n        result = td.mean()\n        expected = to_timedelta(timedelta(seconds=9))\n        assert result == expected\n\n        result = td.to_frame().mean()\n        assert result[0] == expected\n\n        result = td.quantile(0.1)\n        expected = Timedelta(np.timedelta64(2600, \"ms\"))\n        assert result == expected\n\n        result = td.median()\n        expected = to_timedelta(\"00:00:09\")\n        assert result == expected\n\n        result = td.to_frame().median()\n        assert result[0] == expected\n\n        # GH#6462\n        # consistency in returned values for sum\n        result = td.sum()\n        expected = to_timedelta(\"00:01:21\")\n        assert result == expected\n\n        result = td.to_frame().sum()\n        assert result[0] == expected\n\n        # std\n        result = td.std()\n        expected = to_timedelta(Series(td.dropna().values).std())\n        assert result == expected\n\n        result = td.to_frame().std()\n        assert result[0] == expected\n\n        # GH#10040\n        # make sure NaT is properly handled by median()\n        s = Series([Timestamp(\"2015-02-03\"), Timestamp(\"2015-02-07\")])\n        assert s.diff().median() == timedelta(days=4)\n\n        s = Series(\n            [Timestamp(\"2015-02-03\"), Timestamp(\"2015-02-07\"), Timestamp(\"2015-02-15\")]\n        )\n        assert s.diff().median() == timedelta(days=6)\n\n    @pytest.mark.parametrize(\"opname\", [\"skew\", \"kurt\", \"sem\", \"prod\", \"var\"])\n    def test_invalid_td64_reductions(self, opname):\n        s = Series(\n            [Timestamp(\"20130101\") + timedelta(seconds=i * i) for i in range(10)]\n        )\n        td = s.diff()\n\n        msg = \"|\".join(\n            [\n                f\"reduction operation '{opname}' not allowed for this dtype\",\n                rf\"cannot perform {opname} with type timedelta64\\[ns\\]\",\n                f\"does not support reduction '{opname}'\",\n            ]\n        )\n\n        with pytest.raises(TypeError, match=msg):\n            getattr(td, opname)()\n\n        with pytest.raises(TypeError, match=msg):\n            getattr(td.to_frame(), opname)(numeric_only=False)\n\n    def test_minmax_tz(self, tz_naive_fixture):\n        tz = tz_naive_fixture\n        # monotonic\n        idx1 = DatetimeIndex([\"2011-01-01\", \"2011-01-02\", \"2011-01-03\"], tz=tz)\n        assert idx1.is_monotonic_increasing\n\n        # non-monotonic\n        idx2 = DatetimeIndex(\n            [\"2011-01-01\", NaT, \"2011-01-03\", \"2011-01-02\", NaT], tz=tz\n        )\n        assert not idx2.is_monotonic_increasing\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == Timestamp(\"2011-01-01\", tz=tz)\n            assert idx.max() == Timestamp(\"2011-01-03\", tz=tz)\n            assert idx.argmin() == 0\n            assert idx.argmax() == 2\n\n    @pytest.mark.parametrize(\"op\", [\"min\", \"max\"])\n    def test_minmax_nat_datetime64(self, op):\n        # Return NaT\n        obj = DatetimeIndex([])\n        assert isna(getattr(obj, op)())\n\n        obj = DatetimeIndex([NaT])\n        assert isna(getattr(obj, op)())\n\n        obj = DatetimeIndex([NaT, NaT, NaT])\n        assert isna(getattr(obj, op)())\n\n    def test_numpy_minmax_integer(self):\n        # GH#26125\n        idx = Index([1, 2, 3])\n\n        expected = idx.values.max()\n        result = np.max(idx)\n        assert result == expected\n\n        expected = idx.values.min()\n        result = np.min(idx)\n        assert result == expected\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(idx, out=0)\n\n        expected = idx.values.argmax()\n        result = np.argmax(idx)\n        assert result == expected\n\n        expected = idx.values.argmin()\n        result = np.argmin(idx)\n        assert result == expected\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(idx, out=0)\n\n    def test_numpy_minmax_range(self):\n        # GH#26125\n        idx = RangeIndex(0, 10, 3)\n\n        result = np.max(idx)\n        assert result == 9\n\n        result = np.min(idx)\n        assert result == 0\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(idx, out=0)\n\n        # No need to test again argmax/argmin compat since the implementation\n        # is the same as basic integer index\n\n    def test_numpy_minmax_datetime64(self):\n        dr = date_range(start=\"2016-01-15\", end=\"2016-01-20\")\n\n        assert np.min(dr) == Timestamp(\"2016-01-15 00:00:00\")\n        assert np.max(dr) == Timestamp(\"2016-01-20 00:00:00\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(dr, out=0)\n\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(dr, out=0)\n\n        assert np.argmin(dr) == 0\n        assert np.argmax(dr) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(dr, out=0)\n\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(dr, out=0)\n\n    def test_minmax_period(self):\n\n        # monotonic\n        idx1 = PeriodIndex([NaT, \"2011-01-01\", \"2011-01-02\", \"2011-01-03\"], freq=\"D\")\n        assert not idx1.is_monotonic_increasing\n        assert idx1[1:].is_monotonic_increasing\n\n        # non-monotonic\n        idx2 = PeriodIndex(\n            [\"2011-01-01\", NaT, \"2011-01-03\", \"2011-01-02\", NaT], freq=\"D\"\n        )\n        assert not idx2.is_monotonic_increasing\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == Period(\"2011-01-01\", freq=\"D\")\n            assert idx.max() == Period(\"2011-01-03\", freq=\"D\")\n        assert idx1.argmin() == 1\n        assert idx2.argmin() == 0\n        assert idx1.argmax() == 3\n        assert idx2.argmax() == 2\n\n    @pytest.mark.parametrize(\"op\", [\"min\", \"max\"])\n    @pytest.mark.parametrize(\"data\", [[], [NaT], [NaT, NaT, NaT]])\n    def test_minmax_period_empty_nat(self, op, data):\n        # Return NaT\n        obj = PeriodIndex(data, freq=\"M\")\n        result = getattr(obj, op)()\n        assert result is NaT\n\n    def test_numpy_minmax_period(self):\n        pr = pd.period_range(start=\"2016-01-15\", end=\"2016-01-20\")\n\n        assert np.min(pr) == Period(\"2016-01-15\", freq=\"D\")\n        assert np.max(pr) == Period(\"2016-01-20\", freq=\"D\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(pr, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(pr, out=0)\n\n        assert np.argmin(pr) == 0\n        assert np.argmax(pr) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(pr, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(pr, out=0)\n\n    def test_min_max_categorical(self):\n\n        ci = pd.CategoricalIndex(list(\"aabbca\"), categories=list(\"cab\"), ordered=False)\n        msg = (\n            r\"Categorical is not ordered for operation min\\n\"\n            r\"you can use .as_ordered\\(\\) to change the Categorical to an ordered one\\n\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            ci.min()\n        msg = (\n            r\"Categorical is not ordered for operation max\\n\"\n            r\"you can use .as_ordered\\(\\) to change the Categorical to an ordered one\\n\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            ci.max()\n\n        ci = pd.CategoricalIndex(list(\"aabbca\"), categories=list(\"cab\"), ordered=True)\n        assert ci.min() == \"c\"\n        assert ci.max() == \"b\"\n\n\nclass TestSeriesReductions:\n    # Note: the name TestSeriesReductions indicates these tests\n    #  were moved from a series-specific test file, _not_ that these tests are\n    #  intended long-term to be series-specific\n\n    def test_sum_inf(self):\n        s = Series(np.random.randn(10))\n        s2 = s.copy()\n\n        s[5:8] = np.inf\n        s2[5:8] = np.nan\n\n        assert np.isinf(s.sum())\n\n        arr = np.random.randn(100, 100).astype(\"f4\")\n        arr[:, 2] = np.inf\n\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            tm.assert_almost_equal(s.sum(), s2.sum())\n\n        res = nanops.nansum(arr, axis=1)\n        assert np.isinf(res).all()\n\n    @pytest.mark.parametrize(\n        \"dtype\", [\"float64\", \"Float32\", \"Int64\", \"boolean\", \"object\"]\n    )\n    @pytest.mark.parametrize(\"use_bottleneck\", [True, False])\n    @pytest.mark.parametrize(\"method, unit\", [(\"sum\", 0.0), (\"prod\", 1.0)])\n    def test_empty(self, method, unit, use_bottleneck, dtype):\n        with pd.option_context(\"use_bottleneck\", use_bottleneck):\n            # GH#9422 / GH#18921\n            # Entirely empty\n            s = Series([], dtype=dtype)\n            # NA by default\n            result = getattr(s, method)()\n            assert result == unit\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(min_count=1)\n            assert isna(result)\n\n            # Skipna, default\n            result = getattr(s, method)(skipna=True)\n            result == unit\n\n            # Skipna, explicit\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(skipna=True, min_count=1)\n            assert isna(result)\n\n            result = getattr(s, method)(skipna=False, min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(skipna=False, min_count=1)\n            assert isna(result)\n\n            # All-NA\n            s = Series([np.nan], dtype=dtype)\n            # NA by default\n            result = getattr(s, method)()\n            assert result == unit\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(min_count=1)\n            assert isna(result)\n\n            # Skipna, default\n            result = getattr(s, method)(skipna=True)\n            result == unit\n\n            # skipna, explicit\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(skipna=True, min_count=1)\n            assert isna(result)\n\n            # Mix of valid, empty\n            s = Series([np.nan, 1], dtype=dtype)\n            # Default\n            result = getattr(s, method)()\n            assert result == 1.0\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == 1.0\n\n            result = getattr(s, method)(min_count=1)\n            assert result == 1.0\n\n            # Skipna\n            result = getattr(s, method)(skipna=True)\n            assert result == 1.0\n\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == 1.0\n\n            # GH#844 (changed in GH#9422)\n            df = DataFrame(np.empty((10, 0)), dtype=dtype)\n            assert (getattr(df, method)(1) == unit).all()\n\n            s = Series([1], dtype=dtype)\n            result = getattr(s, method)(min_count=2)\n            assert isna(result)\n\n            result = getattr(s, method)(skipna=False, min_count=2)\n            assert isna(result)\n\n            s = Series([np.nan], dtype=dtype)\n            result = getattr(s, method)(min_count=2)\n            assert isna(result)\n\n            s = Series([np.nan, 1], dtype=dtype)\n            result = getattr(s, method)(min_count=2)\n            assert isna(result)\n\n    @pytest.mark.parametrize(\"method, unit\", [(\"sum\", 0.0), (\"prod\", 1.0)])\n    def test_empty_multi(self, method, unit):\n        s = Series(\n            [1, np.nan, np.nan, np.nan],\n            index=pd.MultiIndex.from_product([(\"a\", \"b\"), (0, 1)]),\n        )\n        # 1 / 0 by default\n        with tm.assert_produces_warning(FutureWarning):\n            result = getattr(s, method)(level=0)\n        expected = Series([1, unit], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)\n\n        # min_count=0\n        with tm.assert_produces_warning(FutureWarning):\n            result = getattr(s, method)(level=0, min_count=0)\n        expected = Series([1, unit], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)\n\n        # min_count=1\n        with tm.assert_produces_warning(FutureWarning):\n            result = getattr(s, method)(level=0, min_count=1)\n        expected = Series([1, np.nan], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [\"mean\", \"var\"])\n    @pytest.mark.parametrize(\"dtype\", [\"Float64\", \"Int64\", \"boolean\"])\n    def test_ops_consistency_on_empty_nullable(self, method, dtype):\n\n        # GH#34814\n        # consistency for nullable dtypes on empty or ALL-NA mean\n\n        # empty series\n        eser = Series([], dtype=dtype)\n        result = getattr(eser, method)()\n        assert result is pd.NA\n\n        # ALL-NA series\n        nser = Series([np.nan], dtype=dtype)\n        result = getattr(nser, method)()\n        assert result is pd.NA\n\n    @pytest.mark.parametrize(\"method\", [\"mean\", \"median\", \"std\", \"var\"])\n    def test_ops_consistency_on_empty(self, method):\n\n        # GH#7869\n        # consistency on empty\n\n        # float\n        result = getattr(Series(dtype=float), method)()\n        assert isna(result)\n\n        # timedelta64[ns]\n        tdser = Series([], dtype=\"m8[ns]\")\n        if method == \"var\":\n            msg = \"|\".join(\n                [\n                    \"operation 'var' not allowed\",\n                    r\"cannot perform var with type timedelta64\\[ns\\]\",\n                    \"does not support reduction 'var'\",\n                ]\n            )\n            with pytest.raises(TypeError, match=msg):\n                getattr(tdser, method)()\n        else:\n            result = getattr(tdser, method)()\n            assert result is NaT\n\n    def test_nansum_buglet(self):\n        ser = Series([1.0, np.nan], index=[0, 1])\n        result = np.nansum(ser)\n        tm.assert_almost_equal(result, 1)\n\n    @pytest.mark.parametrize(\"use_bottleneck\", [True, False])\n    @pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\"])\n    def test_sum_overflow_int(self, use_bottleneck, dtype):\n\n        with pd.option_context(\"use_bottleneck\", use_bottleneck):\n            # GH#6915\n            # overflowing on the smaller int dtypes\n            v = np.arange(5000000, dtype=dtype)\n            s = Series(v)\n\n            result = s.sum(skipna=False)\n            assert int(result) == v.sum(dtype=\"int64\")\n            result = s.min(skipna=False)\n            assert int(result) == 0\n            result = s.max(skipna=False)\n            assert int(result) == v[-1]\n\n    @pytest.mark.parametrize(\"use_bottleneck\", [True, False])\n    @pytest.mark.parametrize(\"dtype\", [\"float32\", \"float64\"])\n    def test_sum_overflow_float(self, use_bottleneck, dtype):\n        with pd.option_context(\"use_bottleneck\", use_bottleneck):\n            v = np.arange(5000000, dtype=dtype)\n            s = Series(v)\n\n            result = s.sum(skipna=False)\n            assert result == v.sum(dtype=dtype)\n            result = s.min(skipna=False)\n            assert np.allclose(float(result), 0.0)\n            result = s.max(skipna=False)\n            assert np.allclose(float(result), v[-1])\n\n    def test_mean_masked_overflow(self):\n        # GH#48378\n        val = 100_000_000_000_000_000\n        n_elements = 100\n        na = np.array([val] * n_elements)\n        ser = Series([val] * n_elements, dtype=\"Int64\")\n\n        result_numpy = np.mean(na)\n        result_masked = ser.mean()\n        assert result_masked - result_numpy == 0\n        assert result_masked == 1e17\n\n    @pytest.mark.parametrize(\"ddof, exp\", [(1, 2.5), (0, 2.0)])\n    def test_var_masked_array(self, ddof, exp):\n        # GH#48379\n        ser = Series([1, 2, 3, 4, 5], dtype=\"Int64\")\n        ser_numpy_dtype = Series([1, 2, 3, 4, 5], dtype=\"int64\")\n        result = ser.var(ddof=ddof)\n        result_numpy_dtype = ser_numpy_dtype.var(ddof=ddof)\n        assert result == result_numpy_dtype\n        assert result == exp\n\n    @pytest.mark.parametrize(\"dtype\", (\"m8[ns]\", \"m8[ns]\", \"M8[ns]\", \"M8[ns, UTC]\"))\n    @pytest.mark.parametrize(\"skipna\", [True, False])\n    def test_empty_timeseries_reductions_return_nat(self, dtype, skipna):\n        # covers GH#11245\n        assert Series([], dtype=dtype).min(skipna=skipna) is NaT\n        assert Series([], dtype=dtype).max(skipna=skipna) is NaT\n\n    def test_numpy_argmin(self):\n        # See GH#16830\n        data = np.arange(1, 11)\n\n        s = Series(data, index=data)\n        result = np.argmin(s)\n\n        expected = np.argmin(data)\n        assert result == expected\n\n        result = s.argmin()\n\n        assert result == expected\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.argmin(s, out=data)\n\n    def test_numpy_argmax(self):\n        # See GH#16830\n        data = np.arange(1, 11)\n\n        s = Series(data, index=data)\n        result = np.argmax(s)\n        expected = np.argmax(data)\n        assert result == expected\n\n        result = s.argmax()\n\n        assert result == expected\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.argmax(s, out=data)\n\n    def test_idxmin(self):\n        # test idxmin\n        # _check_stat_op approach can not be used here because of isna check.\n        string_series = tm.makeStringSeries().rename(\"series\")\n\n        # add some NaNs\n        string_series[5:15] = np.NaN\n\n        # skipna or no\n        assert string_series[string_series.idxmin()] == string_series.min()\n        assert isna(string_series.idxmin(skipna=False))\n\n        # no NaNs\n        nona = string_series.dropna()\n        assert nona[nona.idxmin()] == nona.min()\n        assert nona.index.values.tolist().index(nona.idxmin()) == nona.values.argmin()\n\n        # all NaNs\n        allna = string_series * np.nan\n        assert isna(allna.idxmin())\n\n        # datetime64[ns]\n        s = Series(date_range(\"20130102\", periods=6))\n        result = s.idxmin()\n        assert result == 0\n\n        s[0] = np.nan\n        result = s.idxmin()\n        assert result == 1\n\n    def test_idxmax(self):\n        # test idxmax\n        # _check_stat_op approach can not be used here because of isna check.\n        string_series = tm.makeStringSeries().rename(\"series\")\n\n        # add some NaNs\n        string_series[5:15] = np.NaN\n\n        # skipna or no\n        assert string_series[string_series.idxmax()] == string_series.max()\n        assert isna(string_series.idxmax(skipna=False))\n\n        # no NaNs\n        nona = string_series.dropna()\n        assert nona[nona.idxmax()] == nona.max()\n        assert nona.index.values.tolist().index(nona.idxmax()) == nona.values.argmax()\n\n        # all NaNs\n        allna = string_series * np.nan\n        assert isna(allna.idxmax())\n\n        s = Series(date_range(\"20130102\", periods=6))\n        result = s.idxmax()\n        assert result == 5\n\n        s[5] = np.nan\n        result = s.idxmax()\n        assert result == 4\n\n        # Float64Index\n        # GH#5914\n        s = Series([1, 2, 3], [1.1, 2.1, 3.1])\n        result = s.idxmax()\n        assert result == 3.1\n        result = s.idxmin()\n        assert result == 1.1\n\n        s = Series(s.index, s.index)\n        result = s.idxmax()\n        assert result == 3.1\n        result = s.idxmin()\n        assert result == 1.1\n\n    def test_all_any(self):\n        ts = tm.makeTimeSeries()\n        bool_series = ts > 0\n        assert not bool_series.all()\n        assert bool_series.any()\n\n        # Alternative types, with implicit 'object' dtype.\n        s = Series([\"abc\", True])\n        assert s.any()\n\n    def test_numpy_all_any(self, index_or_series):\n        # GH#40180\n        idx = index_or_series([0, 1, 2])\n        assert not np.all(idx)\n        assert np.any(idx)\n        idx = Index([1, 2, 3])\n        assert np.all(idx)\n\n    def test_all_any_params(self):\n        # Check skipna, with implicit 'object' dtype.\n        s1 = Series([np.nan, True])\n        s2 = Series([np.nan, False])\n        assert s1.all(skipna=False)  # nan && True => True\n        assert s1.all(skipna=True)\n        assert s2.any(skipna=False)\n        assert not s2.any(skipna=True)\n\n        # Check level.\n        s = Series([False, False, True, True, False, True], index=[0, 0, 1, 1, 2, 2])\n        with tm.assert_produces_warning(FutureWarning):\n            tm.assert_series_equal(s.all(level=0), Series([False, True, False]))\n        with tm.assert_produces_warning(FutureWarning):\n            tm.assert_series_equal(s.any(level=0), Series([False, True, True]))\n\n        msg = \"Option bool_only is not implemented with option level\"\n        with pytest.raises(NotImplementedError, match=msg):\n            with tm.assert_produces_warning(FutureWarning):\n                s.any(bool_only=True, level=0)\n        with pytest.raises(NotImplementedError, match=msg):\n            with tm.assert_produces_warning(FutureWarning):\n                s.all(bool_only=True, level=0)\n\n        # GH#47500 - test bool_only works\n        assert s.any(bool_only=True)\n        assert not s.all(bool_only=True)\n\n    @pytest.mark.parametrize(\"bool_agg_func\", [\"any\", \"all\"])\n    @pytest.mark.parametrize(\"skipna\", [True, False])\n    def test_any_all_object_dtype(self, bool_agg_func, skipna):\n        # GH#12863\n        ser = Series([\"a\", \"b\", \"c\", \"d\", \"e\"], dtype=object)\n        result = getattr(ser, bool_agg_func)(skipna=skipna)\n        expected = True\n\n        assert result == expected\n\n    @pytest.mark.parametrize(\"bool_agg_func\", [\"any\", \"all\"])\n    @pytest.mark.parametrize(\n        \"data\", [[False, None], [None, False], [False, np.nan], [np.nan, False]]\n    )\n    def test_any_all_object_dtype_missing(self, data, bool_agg_func):\n        # GH#27709\n        ser = Series(data)\n        result = getattr(ser, bool_agg_func)(skipna=False)\n\n        # None is treated is False, but np.nan is treated as True\n        expected = bool_agg_func == \"any\" and None not in data\n        assert result == expected\n\n    @pytest.mark.parametrize(\"dtype\", [\"boolean\", \"Int64\", \"UInt64\", \"Float64\"])\n    @pytest.mark.parametrize(\"bool_agg_func\", [\"any\", \"all\"])\n    @pytest.mark.parametrize(\"skipna\", [True, False])\n    @pytest.mark.parametrize(\n        # expected_data indexed as [[skipna=False/any, skipna=False/all],\n        #                           [skipna=True/any, skipna=True/all]]\n        \"data,expected_data\",\n        [\n            ([0, 0, 0], [[False, False], [False, False]]),\n            ([1, 1, 1], [[True, True], [True, True]]),\n            ([pd.NA, pd.NA, pd.NA], [[pd.NA, pd.NA], [False, True]]),\n            ([0, pd.NA, 0], [[pd.NA, False], [False, False]]),\n            ([1, pd.NA, 1], [[True, pd.NA], [True, True]]),\n            ([1, pd.NA, 0], [[True, False], [True, False]]),\n        ],\n    )\n    def test_any_all_nullable_kleene_logic(\n        self, bool_agg_func, skipna, data, dtype, expected_data\n    ):\n        # GH-37506, GH-41967\n        ser = Series(data, dtype=dtype)\n        expected = expected_data[skipna][bool_agg_func == \"all\"]\n\n        result = getattr(ser, bool_agg_func)(skipna=skipna)\n        assert (result is pd.NA and expected is pd.NA) or result == expected\n\n    @pytest.mark.parametrize(\n        \"bool_agg_func,expected\",\n        [(\"all\", [False, True, False]), (\"any\", [False, True, True])],\n    )\n    def test_any_all_boolean_level(self, bool_agg_func, expected):\n        # GH#33449\n        ser = Series(\n            [False, False, True, True, False, True],\n            index=[0, 0, 1, 1, 2, 2],\n            dtype=\"boolean\",\n        )\n        with tm.assert_produces_warning(FutureWarning):\n            result = getattr(ser, bool_agg_func)(level=0)\n        expected = Series(expected, dtype=\"boolean\")\n        tm.assert_series_equal(result, expected)\n\n    def test_any_axis1_bool_only(self):\n        # GH#32432\n        df = DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n        result = df.any(axis=1, bool_only=True)\n        expected = Series([True, False])\n        tm.assert_series_equal(result, expected)\n\n    def test_any_all_datetimelike(self):\n        # GH#38723 these may not be the desired long-term behavior (GH#34479)\n        #  but in the interim should be internally consistent\n        dta = date_range(\"1995-01-02\", periods=3)._data\n        ser = Series(dta)\n        df = DataFrame(ser)\n\n        assert dta.all()\n        assert dta.any()\n\n        assert ser.all()\n        assert ser.any()\n\n        assert df.any().all()\n        assert df.all().all()\n\n        dta = dta.tz_localize(\"UTC\")\n        ser = Series(dta)\n        df = DataFrame(ser)\n\n        assert dta.all()\n        assert dta.any()\n\n        assert ser.all()\n        assert ser.any()\n\n        assert df.any().all()\n        assert df.all().all()\n\n        tda = dta - dta[0]\n        ser = Series(tda)\n        df = DataFrame(ser)\n\n        assert tda.any()\n        assert not tda.all()\n\n        assert ser.any()\n        assert not ser.all()\n\n        assert df.any().all()\n        assert not df.all().any()\n\n    def test_timedelta64_analytics(self):\n\n        # index min/max\n        dti = date_range(\"2012-1-1\", periods=3, freq=\"D\")\n        td = Series(dti) - Timestamp(\"20120101\")\n\n        result = td.idxmin()\n        assert result == 0\n\n        result = td.idxmax()\n        assert result == 2\n\n        # GH#2982\n        # with NaT\n        td[0] = np.nan\n\n        result = td.idxmin()\n        assert result == 1\n\n        result = td.idxmax()\n        assert result == 2\n\n        # abs\n        s1 = Series(date_range(\"20120101\", periods=3))\n        s2 = Series(date_range(\"20120102\", periods=3))\n        expected = Series(s2 - s1)\n\n        result = np.abs(s1 - s2)\n        tm.assert_series_equal(result, expected)\n\n        result = (s1 - s2).abs()\n        tm.assert_series_equal(result, expected)\n\n        # max/min\n        result = td.max()\n        expected = Timedelta(\"2 days\")\n        assert result == expected\n\n        result = td.min()\n        expected = Timedelta(\"1 days\")\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        \"test_input,error_type\",\n        [\n            (Series([], dtype=\"float64\"), ValueError),\n            # For strings, or any Series with dtype 'O'\n            (Series([\"foo\", \"bar\", \"baz\"]), TypeError),\n            (Series([(1,), (2,)]), TypeError),\n            # For mixed data types\n            (Series([\"foo\", \"foo\", \"bar\", \"bar\", None, np.nan, \"baz\"]), TypeError),\n        ],\n    )\n    def test_assert_idxminmax_raises(self, test_input, error_type):\n        \"\"\"\n        Cases where ``Series.argmax`` and related should raise an exception\n        \"\"\"\n        msg = (\n            \"reduction operation 'argmin' not allowed for this dtype|\"\n            \"attempt to get argmin of an empty sequence\"\n        )\n        with pytest.raises(error_type, match=msg):\n            test_input.idxmin()\n        with pytest.raises(error_type, match=msg):\n            test_input.idxmin(skipna=False)\n        msg = (\n            \"reduction operation 'argmax' not allowed for this dtype|\"\n            \"attempt to get argmax of an empty sequence\"\n        )\n        with pytest.raises(error_type, match=msg):\n            test_input.idxmax()\n        with pytest.raises(error_type, match=msg):\n            test_input.idxmax(skipna=False)\n\n    def test_idxminmax_with_inf(self):\n        # For numeric data with NA and Inf (GH #13595)\n        s = Series([0, -np.inf, np.inf, np.nan])\n\n        assert s.idxmin() == 1\n        assert np.isnan(s.idxmin(skipna=False))\n\n        assert s.idxmax() == 2\n        assert np.isnan(s.idxmax(skipna=False))\n\n        # Using old-style behavior that treats floating point nan, -inf, and\n        # +inf as missing\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            assert s.idxmin() == 0\n            assert np.isnan(s.idxmin(skipna=False))\n            assert s.idxmax() == 0\n            np.isnan(s.idxmax(skipna=False))\n\n\nclass TestDatetime64SeriesReductions:\n    # Note: the name TestDatetime64SeriesReductions indicates these tests\n    #  were moved from a series-specific test file, _not_ that these tests are\n    #  intended long-term to be series-specific\n\n    @pytest.mark.parametrize(\n        \"nat_ser\",\n        [\n            Series([NaT, NaT]),\n            Series([NaT, Timedelta(\"nat\")]),\n            Series([Timedelta(\"nat\"), Timedelta(\"nat\")]),\n        ],\n    )\n    def test_minmax_nat_series(self, nat_ser):\n        # GH#23282\n        assert nat_ser.min() is NaT\n        assert nat_ser.max() is NaT\n        assert nat_ser.min(skipna=False) is NaT\n        assert nat_ser.max(skipna=False) is NaT\n\n    @pytest.mark.parametrize(\n        \"nat_df\",\n        [\n            DataFrame([NaT, NaT]),\n            DataFrame([NaT, Timedelta(\"nat\")]),\n            DataFrame([Timedelta(\"nat\"), Timedelta(\"nat\")]),\n        ],\n    )\n    def test_minmax_nat_dataframe(self, nat_df):\n        # GH#23282\n        assert nat_df.min()[0] is NaT\n        assert nat_df.max()[0] is NaT\n        assert nat_df.min(skipna=False)[0] is NaT\n        assert nat_df.max(skipna=False)[0] is NaT\n\n    def test_min_max(self):\n        rng = date_range(\"1/1/2000\", \"12/31/2000\")\n        rng2 = rng.take(np.random.permutation(len(rng)))\n\n        the_min = rng2.min()\n        the_max = rng2.max()\n        assert isinstance(the_min, Timestamp)\n        assert isinstance(the_max, Timestamp)\n        assert the_min == rng[0]\n        assert the_max == rng[-1]\n\n        assert rng.min() == rng[0]\n        assert rng.max() == rng[-1]\n\n    def test_min_max_series(self):\n        rng = date_range(\"1/1/2000\", periods=10, freq=\"4h\")\n        lvls = [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\"]\n        df = DataFrame({\"TS\": rng, \"V\": np.random.randn(len(rng)), \"L\": lvls})\n\n        result = df.TS.max()\n        exp = Timestamp(df.TS.iat[-1])\n        assert isinstance(result, Timestamp)\n        assert result == exp\n\n        result = df.TS.min()\n        exp = Timestamp(df.TS.iat[0])\n        assert isinstance(result, Timestamp)\n        assert result == exp\n\n\nclass TestCategoricalSeriesReductions:\n    # Note: the name TestCategoricalSeriesReductions indicates these tests\n    #  were moved from a series-specific test file, _not_ that these tests are\n    #  intended long-term to be series-specific\n\n    @pytest.mark.parametrize(\"function\", [\"min\", \"max\"])\n    def test_min_max_unordered_raises(self, function):\n        # unordered cats have no min/max\n        cat = Series(Categorical([\"a\", \"b\", \"c\", \"d\"], ordered=False))\n        msg = f\"Categorical is not ordered for operation {function}\"\n        with pytest.raises(TypeError, match=msg):\n            getattr(cat, function)()\n\n    @pytest.mark.parametrize(\n        \"values, categories\",\n        [\n            (list(\"abc\"), list(\"abc\")),\n            (list(\"abc\"), list(\"cba\")),\n            (list(\"abc\") + [np.nan], list(\"cba\")),\n            ([1, 2, 3], [3, 2, 1]),\n            ([1, 2, 3, np.nan], [3, 2, 1]),\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"min\", \"max\"])\n    def test_min_max_ordered(self, values, categories, function):\n        # GH 25303\n        cat = Series(Categorical(values, categories=categories, ordered=True))\n        result = getattr(cat, function)(skipna=True)\n        expected = categories[0] if function == \"min\" else categories[2]\n        assert result == expected\n\n    @pytest.mark.parametrize(\"function\", [\"min\", \"max\"])\n    @pytest.mark.parametrize(\"skipna\", [True, False])\n    def test_min_max_ordered_with_nan_only(self, function, skipna):\n        # https://github.com/pandas-dev/pandas/issues/33450\n        cat = Series(Categorical([np.nan], categories=[1, 2], ordered=True))\n        result = getattr(cat, function)(skipna=skipna)\n        assert result is np.nan\n\n    @pytest.mark.parametrize(\"function\", [\"min\", \"max\"])\n    @pytest.mark.parametrize(\"skipna\", [True, False])\n    def test_min_max_skipna(self, function, skipna):\n        cat = Series(\n            Categorical([\"a\", \"b\", np.nan, \"a\"], categories=[\"b\", \"a\"], ordered=True)\n        )\n        result = getattr(cat, function)(skipna=skipna)\n\n        if skipna is True:\n            expected = \"b\" if function == \"min\" else \"a\"\n            assert result == expected\n        else:\n            assert result is np.nan\n\n\nclass TestSeriesMode:\n    # Note: the name TestSeriesMode indicates these tests\n    #  were moved from a series-specific test file, _not_ that these tests are\n    #  intended long-term to be series-specific\n\n    @pytest.mark.parametrize(\n        \"dropna, expected\",\n        [(True, Series([], dtype=np.float64)), (False, Series([], dtype=np.float64))],\n    )\n    def test_mode_empty(self, dropna, expected):\n        s = Series([], dtype=np.float64)\n        result = s.mode(dropna)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"dropna, data, expected\",\n        [\n            (True, [1, 1, 1, 2], [1]),\n            (True, [1, 1, 1, 2, 3, 3, 3], [1, 3]),\n            (False, [1, 1, 1, 2], [1]),\n            (False, [1, 1, 1, 2, 3, 3, 3], [1, 3]),\n        ],\n    )\n    @pytest.mark.parametrize(\n        \"dt\", list(np.typecodes[\"AllInteger\"] + np.typecodes[\"Float\"])\n    )\n    def test_mode_numerical(self, dropna, data, expected, dt):\n        s = Series(data, dtype=dt)\n        result = s.mode(dropna)\n        expected = Series(expected, dtype=dt)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"dropna, expected\", [(True, [1.0]), (False, [1, np.nan])])\n    def test_mode_numerical_nan(self, dropna, expected):\n        s = Series([1, 1, 2, np.nan, np.nan])\n        result = s.mode(dropna)\n        expected = Series(expected)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2, expected3\",\n        [(True, [\"b\"], [\"bar\"], [\"nan\"]), (False, [\"b\"], [np.nan], [\"nan\"])],\n    )\n    def test_mode_str_obj(self, dropna, expected1, expected2, expected3):\n        # Test string and object types.\n        data = [\"a\"] * 2 + [\"b\"] * 3\n\n        s = Series(data, dtype=\"c\")\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"c\")\n        tm.assert_series_equal(result, expected1)\n\n        data = [\"foo\", \"bar\", \"bar\", np.nan, np.nan, np.nan]\n\n        s = Series(data, dtype=object)\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=object)\n        tm.assert_series_equal(result, expected2)\n\n        data = [\"foo\", \"bar\", \"bar\", np.nan, np.nan, np.nan]\n\n        s = Series(data, dtype=object).astype(str)\n        result = s.mode(dropna)\n        expected3 = Series(expected3, dtype=str)\n        tm.assert_series_equal(result, expected3)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2\",\n        [(True, [\"foo\"], [\"foo\"]), (False, [\"foo\"], [np.nan])],\n    )\n    def test_mode_mixeddtype(self, dropna, expected1, expected2):\n        s = Series([1, \"foo\", \"foo\"])\n        result = s.mode(dropna)\n        expected = Series(expected1)\n        tm.assert_series_equal(result, expected)\n\n        s = Series([1, \"foo\", \"foo\", np.nan, np.nan, np.nan])\n        result = s.mode(dropna)\n        expected = Series(expected2, dtype=object)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2\",\n        [\n            (\n                True,\n                [\"1900-05-03\", \"2011-01-03\", \"2013-01-02\"],\n                [\"2011-01-03\", \"2013-01-02\"],\n            ),\n            (False, [np.nan], [np.nan, \"2011-01-03\", \"2013-01-02\"]),\n        ],\n    )\n    def test_mode_datetime(self, dropna, expected1, expected2):\n        s = Series(\n            [\"2011-01-03\", \"2013-01-02\", \"1900-05-03\", \"nan\", \"nan\"], dtype=\"M8[ns]\"\n        )\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"M8[ns]\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(\n            [\n                \"2011-01-03\",\n                \"2013-01-02\",\n                \"1900-05-03\",\n                \"2011-01-03\",\n                \"2013-01-02\",\n                \"nan\",\n                \"nan\",\n            ],\n            dtype=\"M8[ns]\",\n        )\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"M8[ns]\")\n        tm.assert_series_equal(result, expected2)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2\",\n        [\n            (True, [\"-1 days\", \"0 days\", \"1 days\"], [\"2 min\", \"1 day\"]),\n            (False, [np.nan], [np.nan, \"2 min\", \"1 day\"]),\n        ],\n    )\n    def test_mode_timedelta(self, dropna, expected1, expected2):\n        # gh-5986: Test timedelta types.\n\n        s = Series(\n            [\"1 days\", \"-1 days\", \"0 days\", \"nan\", \"nan\"], dtype=\"timedelta64[ns]\"\n        )\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"timedelta64[ns]\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(\n            [\n                \"1 day\",\n                \"1 day\",\n                \"-1 day\",\n                \"-1 day 2 min\",\n                \"2 min\",\n                \"2 min\",\n                \"nan\",\n                \"nan\",\n            ],\n            dtype=\"timedelta64[ns]\",\n        )\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"timedelta64[ns]\")\n        tm.assert_series_equal(result, expected2)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2, expected3\",\n        [\n            (\n                True,\n                Categorical([1, 2], categories=[1, 2]),\n                Categorical([\"a\"], categories=[1, \"a\"]),\n                Categorical([3, 1], categories=[3, 2, 1], ordered=True),\n            ),\n            (\n                False,\n                Categorical([np.nan], categories=[1, 2]),\n                Categorical([np.nan, \"a\"], categories=[1, \"a\"]),\n                Categorical([np.nan, 3, 1], categories=[3, 2, 1], ordered=True),\n            ),\n        ],\n    )\n    def test_mode_category(self, dropna, expected1, expected2, expected3):\n        s = Series(Categorical([1, 2, np.nan, np.nan]))\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"category\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(Categorical([1, \"a\", \"a\", np.nan, np.nan]))\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"category\")\n        tm.assert_series_equal(result, expected2)\n\n        s = Series(\n            Categorical(\n                [1, 1, 2, 3, 3, np.nan, np.nan], categories=[3, 2, 1], ordered=True\n            )\n        )\n        result = s.mode(dropna)\n        expected3 = Series(expected3, dtype=\"category\")\n        tm.assert_series_equal(result, expected3)\n\n    @pytest.mark.parametrize(\n        \"dropna, expected1, expected2\",\n        [(True, [2**63], [1, 2**63]), (False, [2**63], [1, 2**63])],\n    )\n    def test_mode_intoverflow(self, dropna, expected1, expected2):\n        # Test for uint64 overflow.\n        s = Series([1, 2**63, 2**63], dtype=np.uint64)\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=np.uint64)\n        tm.assert_series_equal(result, expected1)\n\n        s = Series([1, 2**63], dtype=np.uint64)\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=np.uint64)\n        tm.assert_series_equal(result, expected2)\n\n    def test_mode_sortwarning(self):\n        # Check for the warning that is raised when the mode\n        # results cannot be sorted\n\n        expected = Series([\"foo\", np.nan])\n        s = Series([1, \"foo\", \"foo\", np.nan, np.nan])\n\n        with tm.assert_produces_warning(UserWarning):\n            result = s.mode(dropna=False)\n            result = result.sort_values().reset_index(drop=True)\n\n        tm.assert_series_equal(result, expected)\n\n    def test_mode_boolean_with_na(self):\n        # GH#42107\n        ser = Series([True, False, True, pd.NA], dtype=\"boolean\")\n        result = ser.mode()\n        expected = Series({0: True}, dtype=\"boolean\")\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"array,expected,dtype\",\n        [\n            (\n                [0, 1j, 1, 1, 1 + 1j, 1 + 2j],\n                Series([1], dtype=np.complex128),\n                np.complex128,\n            ),\n            (\n                [0, 1j, 1, 1, 1 + 1j, 1 + 2j],\n                Series([1], dtype=np.complex64),\n                np.complex64,\n            ),\n            (\n                [1 + 1j, 2j, 1 + 1j],\n                Series([1 + 1j], dtype=np.complex128),\n                np.complex128,\n            ),\n        ],\n    )\n    def test_single_mode_value_complex(self, array, expected, dtype):\n        result = Series(array, dtype=dtype).mode()\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"array,expected,dtype\",\n        [\n            (\n                # no modes\n                [0, 1j, 1, 1 + 1j, 1 + 2j],\n                Series([0j, 1j, 1 + 0j, 1 + 1j, 1 + 2j], dtype=np.complex128),\n                np.complex128,\n            ),\n            (\n                [1 + 1j, 2j, 1 + 1j, 2j, 3],\n                Series([2j, 1 + 1j], dtype=np.complex64),\n                np.complex64,\n            ),\n        ],\n    )\n    def test_multimode_complex(self, array, expected, dtype):\n        # GH 17927\n        # mode tries to sort multimodal series.\n        # Complex numbers are sorted by their magnitude\n        result = Series(array, dtype=dtype).mode()\n        tm.assert_series_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/reshape/concat/test_datetimes.py",
      "content": "import datetime as dt\nfrom datetime import datetime\n\nimport dateutil\nimport numpy as np\nimport pytest\n\nimport pandas as pd\nfrom pandas import (\n    DataFrame,\n    DatetimeIndex,\n    Index,\n    MultiIndex,\n    Series,\n    Timestamp,\n    concat,\n    date_range,\n    to_timedelta,\n)\nimport pandas._testing as tm\n\n\nclass TestDatetimeConcat:\n    def test_concat_datetime64_block(self):\n        rng = date_range(\"1/1/2000\", periods=10)\n\n        df = DataFrame({\"time\": rng})\n\n        result = concat([df, df])\n        assert (result.iloc[:10][\"time\"] == rng).all()\n        assert (result.iloc[10:][\"time\"] == rng).all()\n\n    def test_concat_datetime_datetime64_frame(self):\n        # GH#2624\n        rows = []\n        rows.append([datetime(2010, 1, 1), 1])\n        rows.append([datetime(2010, 1, 2), \"hi\"])\n\n        df2_obj = DataFrame.from_records(rows, columns=[\"date\", \"test\"])\n\n        ind = date_range(start=\"2000/1/1\", freq=\"D\", periods=10)\n        df1 = DataFrame({\"date\": ind, \"test\": range(10)})\n\n        # it works!\n        concat([df1, df2_obj])\n\n    def test_concat_datetime_timezone(self):\n        # GH 18523\n        idx1 = date_range(\"2011-01-01\", periods=3, freq=\"H\", tz=\"Europe/Paris\")\n        idx2 = date_range(start=idx1[0], end=idx1[-1], freq=\"H\")\n        df1 = DataFrame({\"a\": [1, 2, 3]}, index=idx1)\n        df2 = DataFrame({\"b\": [1, 2, 3]}, index=idx2)\n        result = concat([df1, df2], axis=1)\n\n        exp_idx = (\n            DatetimeIndex(\n                [\n                    \"2011-01-01 00:00:00+01:00\",\n                    \"2011-01-01 01:00:00+01:00\",\n                    \"2011-01-01 02:00:00+01:00\",\n                ],\n                freq=\"H\",\n            )\n            .tz_convert(\"UTC\")\n            .tz_convert(\"Europe/Paris\")\n        )\n\n        expected = DataFrame(\n            [[1, 1], [2, 2], [3, 3]], index=exp_idx, columns=[\"a\", \"b\"]\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        idx3 = date_range(\"2011-01-01\", periods=3, freq=\"H\", tz=\"Asia/Tokyo\")\n        df3 = DataFrame({\"b\": [1, 2, 3]}, index=idx3)\n        result = concat([df1, df3], axis=1)\n\n        exp_idx = DatetimeIndex(\n            [\n                \"2010-12-31 15:00:00+00:00\",\n                \"2010-12-31 16:00:00+00:00\",\n                \"2010-12-31 17:00:00+00:00\",\n                \"2010-12-31 23:00:00+00:00\",\n                \"2011-01-01 00:00:00+00:00\",\n                \"2011-01-01 01:00:00+00:00\",\n            ]\n        )\n\n        expected = DataFrame(\n            [\n                [np.nan, 1],\n                [np.nan, 2],\n                [np.nan, 3],\n                [1, np.nan],\n                [2, np.nan],\n                [3, np.nan],\n            ],\n            index=exp_idx,\n            columns=[\"a\", \"b\"],\n        )\n\n        tm.assert_frame_equal(result, expected)\n\n        # GH 13783: Concat after resample\n        result = concat([df1.resample(\"H\").mean(), df2.resample(\"H\").mean()], sort=True)\n        expected = DataFrame(\n            {\"a\": [1, 2, 3] + [np.nan] * 3, \"b\": [np.nan] * 3 + [1, 2, 3]},\n            index=idx1.append(idx1),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_concat_datetimeindex_freq(self):\n        # GH 3232\n        # Monotonic index result\n        dr = date_range(\"01-Jan-2013\", periods=100, freq=\"50L\", tz=\"UTC\")\n        data = list(range(100))\n        expected = DataFrame(data, index=dr)\n        result = concat([expected[:50], expected[50:]])\n        tm.assert_frame_equal(result, expected)\n\n        # Non-monotonic index result\n        result = concat([expected[50:], expected[:50]])\n        expected = DataFrame(data[50:] + data[:50], index=dr[50:].append(dr[:50]))\n        expected.index._data.freq = None\n        tm.assert_frame_equal(result, expected)\n\n    def test_concat_multiindex_datetime_object_index(self):\n        # https://github.com/pandas-dev/pandas/issues/11058\n        idx = Index(\n            [dt.date(2013, 1, 1), dt.date(2014, 1, 1), dt.date(2015, 1, 1)],\n            dtype=\"object\",\n        )\n\n        s = Series(\n            [\"a\", \"b\"],\n            index=MultiIndex.from_arrays(\n                [\n                    [1, 2],\n                    idx[:-1],\n                ],\n                names=[\"first\", \"second\"],\n            ),\n        )\n        s2 = Series(\n            [\"a\", \"b\"],\n            index=MultiIndex.from_arrays(\n                [[1, 2], idx[::2]],\n                names=[\"first\", \"second\"],\n            ),\n        )\n        mi = MultiIndex.from_arrays(\n            [[1, 2, 2], idx],\n            names=[\"first\", \"second\"],\n        )\n        assert mi.levels[1].dtype == object\n\n        expected = DataFrame(\n            [[\"a\", \"a\"], [\"b\", np.nan], [np.nan, \"b\"]],\n            index=mi,\n        )\n        result = concat([s, s2], axis=1)\n        tm.assert_frame_equal(result, expected)\n\n    def test_concat_NaT_series(self):\n        # GH 11693\n        # test for merging NaT series with datetime series.\n        x = Series(\n            date_range(\"20151124 08:00\", \"20151124 09:00\", freq=\"1h\", tz=\"US/Eastern\")\n        )\n        y = Series(pd.NaT, index=[0, 1], dtype=\"datetime64[ns, US/Eastern]\")\n        expected = Series([x[0], x[1], pd.NaT, pd.NaT])\n\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n        # all NaT with tz\n        expected = Series(pd.NaT, index=range(4), dtype=\"datetime64[ns, US/Eastern]\")\n        result = concat([y, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n        # without tz\n        x = Series(date_range(\"20151124 08:00\", \"20151124 09:00\", freq=\"1h\"))\n        y = Series(date_range(\"20151124 10:00\", \"20151124 11:00\", freq=\"1h\"))\n        y[:] = pd.NaT\n        expected = Series([x[0], x[1], pd.NaT, pd.NaT])\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n        # all NaT without tz\n        x[:] = pd.NaT\n        expected = Series(pd.NaT, index=range(4), dtype=\"datetime64[ns]\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"tz\", [None, \"UTC\"])\n    def test_concat_NaT_dataframes(self, tz):\n        # GH 12396\n\n        first = DataFrame([[pd.NaT], [pd.NaT]])\n        first = first.apply(lambda x: x.dt.tz_localize(tz))\n        second = DataFrame(\n            [[Timestamp(\"2015/01/01\", tz=tz)], [Timestamp(\"2016/01/01\", tz=tz)]],\n            index=[2, 3],\n        )\n        expected = DataFrame(\n            [\n                pd.NaT,\n                pd.NaT,\n                Timestamp(\"2015/01/01\", tz=tz),\n                Timestamp(\"2016/01/01\", tz=tz),\n            ]\n        )\n\n        result = concat([first, second], axis=0)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"tz1\", [None, \"UTC\"])\n    @pytest.mark.parametrize(\"tz2\", [None, \"UTC\"])\n    @pytest.mark.parametrize(\"s\", [pd.NaT, Timestamp(\"20150101\")])\n    def test_concat_NaT_dataframes_all_NaT_axis_0(self, tz1, tz2, s):\n        # GH 12396\n\n        # tz-naive\n        first = DataFrame([[pd.NaT], [pd.NaT]]).apply(lambda x: x.dt.tz_localize(tz1))\n        second = DataFrame([s]).apply(lambda x: x.dt.tz_localize(tz2))\n\n        result = concat([first, second], axis=0)\n        expected = DataFrame(Series([pd.NaT, pd.NaT, s], index=[0, 1, 0]))\n        expected = expected.apply(lambda x: x.dt.tz_localize(tz2))\n        if tz1 != tz2:\n            expected = expected.astype(object)\n\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"tz1\", [None, \"UTC\"])\n    @pytest.mark.parametrize(\"tz2\", [None, \"UTC\"])\n    def test_concat_NaT_dataframes_all_NaT_axis_1(self, tz1, tz2):\n        # GH 12396\n\n        first = DataFrame(Series([pd.NaT, pd.NaT]).dt.tz_localize(tz1))\n        second = DataFrame(Series([pd.NaT]).dt.tz_localize(tz2), columns=[1])\n        expected = DataFrame(\n            {\n                0: Series([pd.NaT, pd.NaT]).dt.tz_localize(tz1),\n                1: Series([pd.NaT, pd.NaT]).dt.tz_localize(tz2),\n            }\n        )\n        result = concat([first, second], axis=1)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"tz1\", [None, \"UTC\"])\n    @pytest.mark.parametrize(\"tz2\", [None, \"UTC\"])\n    def test_concat_NaT_series_dataframe_all_NaT(self, tz1, tz2):\n        # GH 12396\n\n        # tz-naive\n        first = Series([pd.NaT, pd.NaT]).dt.tz_localize(tz1)\n        second = DataFrame(\n            [\n                [Timestamp(\"2015/01/01\", tz=tz2)],\n                [Timestamp(\"2016/01/01\", tz=tz2)],\n            ],\n            index=[2, 3],\n        )\n\n        expected = DataFrame(\n            [\n                pd.NaT,\n                pd.NaT,\n                Timestamp(\"2015/01/01\", tz=tz2),\n                Timestamp(\"2016/01/01\", tz=tz2),\n            ]\n        )\n        if tz1 != tz2:\n            expected = expected.astype(object)\n\n        result = concat([first, second])\n        tm.assert_frame_equal(result, expected)\n\n\nclass TestTimezoneConcat:\n    def test_concat_tz_series(self):\n        # gh-11755: tz and no tz\n        x = Series(date_range(\"20151124 08:00\", \"20151124 09:00\", freq=\"1h\", tz=\"UTC\"))\n        y = Series(date_range(\"2012-01-01\", \"2012-01-02\"))\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n        # gh-11887: concat tz and object\n        x = Series(date_range(\"20151124 08:00\", \"20151124 09:00\", freq=\"1h\", tz=\"UTC\"))\n        y = Series([\"a\", \"b\"])\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n        # see gh-12217 and gh-12306\n        # Concatenating two UTC times\n        first = DataFrame([[datetime(2016, 1, 1)]])\n        first[0] = first[0].dt.tz_localize(\"UTC\")\n\n        second = DataFrame([[datetime(2016, 1, 2)]])\n        second[0] = second[0].dt.tz_localize(\"UTC\")\n\n        result = concat([first, second])\n        assert result[0].dtype == \"datetime64[ns, UTC]\"\n\n        # Concatenating two London times\n        first = DataFrame([[datetime(2016, 1, 1)]])\n        first[0] = first[0].dt.tz_localize(\"Europe/London\")\n\n        second = DataFrame([[datetime(2016, 1, 2)]])\n        second[0] = second[0].dt.tz_localize(\"Europe/London\")\n\n        result = concat([first, second])\n        assert result[0].dtype == \"datetime64[ns, Europe/London]\"\n\n        # Concatenating 2+1 London times\n        first = DataFrame([[datetime(2016, 1, 1)], [datetime(2016, 1, 2)]])\n        first[0] = first[0].dt.tz_localize(\"Europe/London\")\n\n        second = DataFrame([[datetime(2016, 1, 3)]])\n        second[0] = second[0].dt.tz_localize(\"Europe/London\")\n\n        result = concat([first, second])\n        assert result[0].dtype == \"datetime64[ns, Europe/London]\"\n\n        # Concat'ing 1+2 London times\n        first = DataFrame([[datetime(2016, 1, 1)]])\n        first[0] = first[0].dt.tz_localize(\"Europe/London\")\n\n        second = DataFrame([[datetime(2016, 1, 2)], [datetime(2016, 1, 3)]])\n        second[0] = second[0].dt.tz_localize(\"Europe/London\")\n\n        result = concat([first, second])\n        assert result[0].dtype == \"datetime64[ns, Europe/London]\"\n\n    def test_concat_tz_series_tzlocal(self):\n        # see gh-13583\n        x = [\n            Timestamp(\"2011-01-01\", tz=dateutil.tz.tzlocal()),\n            Timestamp(\"2011-02-01\", tz=dateutil.tz.tzlocal()),\n        ]\n        y = [\n            Timestamp(\"2012-01-01\", tz=dateutil.tz.tzlocal()),\n            Timestamp(\"2012-02-01\", tz=dateutil.tz.tzlocal()),\n        ]\n\n        result = concat([Series(x), Series(y)], ignore_index=True)\n        tm.assert_series_equal(result, Series(x + y))\n        assert result.dtype == \"datetime64[ns, tzlocal()]\"\n\n    def test_concat_tz_series_with_datetimelike(self):\n        # see gh-12620: tz and timedelta\n        x = [\n            Timestamp(\"2011-01-01\", tz=\"US/Eastern\"),\n            Timestamp(\"2011-02-01\", tz=\"US/Eastern\"),\n        ]\n        y = [pd.Timedelta(\"1 day\"), pd.Timedelta(\"2 day\")]\n        result = concat([Series(x), Series(y)], ignore_index=True)\n        tm.assert_series_equal(result, Series(x + y, dtype=\"object\"))\n\n        # tz and period\n        y = [pd.Period(\"2011-03\", freq=\"M\"), pd.Period(\"2011-04\", freq=\"M\")]\n        result = concat([Series(x), Series(y)], ignore_index=True)\n        tm.assert_series_equal(result, Series(x + y, dtype=\"object\"))\n\n    def test_concat_tz_frame(self):\n        df2 = DataFrame(\n            {\n                \"A\": Timestamp(\"20130102\", tz=\"US/Eastern\"),\n                \"B\": Timestamp(\"20130603\", tz=\"CET\"),\n            },\n            index=range(5),\n        )\n\n        # concat\n        df3 = concat([df2.A.to_frame(), df2.B.to_frame()], axis=1)\n        tm.assert_frame_equal(df2, df3)\n\n    def test_concat_multiple_tzs(self):\n        # GH#12467\n        # combining datetime tz-aware and naive DataFrames\n        ts1 = Timestamp(\"2015-01-01\", tz=None)\n        ts2 = Timestamp(\"2015-01-01\", tz=\"UTC\")\n        ts3 = Timestamp(\"2015-01-01\", tz=\"EST\")\n\n        df1 = DataFrame({\"time\": [ts1]})\n        df2 = DataFrame({\"time\": [ts2]})\n        df3 = DataFrame({\"time\": [ts3]})\n\n        results = concat([df1, df2]).reset_index(drop=True)\n        expected = DataFrame({\"time\": [ts1, ts2]}, dtype=object)\n        tm.assert_frame_equal(results, expected)\n\n        results = concat([df1, df3]).reset_index(drop=True)\n        expected = DataFrame({\"time\": [ts1, ts3]}, dtype=object)\n        tm.assert_frame_equal(results, expected)\n\n        results = concat([df2, df3]).reset_index(drop=True)\n        expected = DataFrame({\"time\": [ts2, ts3]})\n        tm.assert_frame_equal(results, expected)\n\n    def test_concat_multiindex_with_tz(self):\n        # GH 6606\n        df = DataFrame(\n            {\n                \"dt\": [\n                    datetime(2014, 1, 1),\n                    datetime(2014, 1, 2),\n                    datetime(2014, 1, 3),\n                ],\n                \"b\": [\"A\", \"B\", \"C\"],\n                \"c\": [1, 2, 3],\n                \"d\": [4, 5, 6],\n            }\n        )\n        df[\"dt\"] = df[\"dt\"].apply(lambda d: Timestamp(d, tz=\"US/Pacific\"))\n        df = df.set_index([\"dt\", \"b\"])\n\n        exp_idx1 = DatetimeIndex(\n            [\"2014-01-01\", \"2014-01-02\", \"2014-01-03\"] * 2, tz=\"US/Pacific\", name=\"dt\"\n        )\n        exp_idx2 = Index([\"A\", \"B\", \"C\"] * 2, name=\"b\")\n        exp_idx = MultiIndex.from_arrays([exp_idx1, exp_idx2])\n        expected = DataFrame(\n            {\"c\": [1, 2, 3] * 2, \"d\": [4, 5, 6] * 2}, index=exp_idx, columns=[\"c\", \"d\"]\n        )\n\n        result = concat([df, df])\n        tm.assert_frame_equal(result, expected)\n\n    def test_concat_tz_not_aligned(self):\n        # GH#22796\n        ts = pd.to_datetime([1, 2]).tz_localize(\"UTC\")\n        a = DataFrame({\"A\": ts})\n        b = DataFrame({\"A\": ts, \"B\": ts})\n        result = concat([a, b], sort=True, ignore_index=True)\n        expected = DataFrame(\n            {\"A\": list(ts) + list(ts), \"B\": [pd.NaT, pd.NaT] + list(ts)}\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"t1\",\n        [\n            \"2015-01-01\",\n            pytest.param(\n                pd.NaT,\n                marks=pytest.mark.xfail(\n                    reason=\"GH23037 incorrect dtype when concatenating\"\n                ),\n            ),\n        ],\n    )\n    def test_concat_tz_NaT(self, t1):\n        # GH#22796\n        # Concatenating tz-aware multicolumn DataFrames\n        ts1 = Timestamp(t1, tz=\"UTC\")\n        ts2 = Timestamp(\"2015-01-01\", tz=\"UTC\")\n        ts3 = Timestamp(\"2015-01-01\", tz=\"UTC\")\n\n        df1 = DataFrame([[ts1, ts2]])\n        df2 = DataFrame([[ts3]])\n\n        result = concat([df1, df2])\n        expected = DataFrame([[ts1, ts2], [ts3, pd.NaT]], index=[0, 0])\n\n        tm.assert_frame_equal(result, expected)\n\n    def test_concat_tz_with_empty(self):\n        # GH 9188\n        result = concat(\n            [DataFrame(date_range(\"2000\", periods=1, tz=\"UTC\")), DataFrame()]\n        )\n        expected = DataFrame(date_range(\"2000\", periods=1, tz=\"UTC\"))\n        tm.assert_frame_equal(result, expected)\n\n\nclass TestPeriodConcat:\n    def test_concat_period_series(self):\n        x = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"D\"))\n        y = Series(pd.PeriodIndex([\"2015-10-01\", \"2016-01-01\"], freq=\"D\"))\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"Period[D]\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n\n    def test_concat_period_multiple_freq_series(self):\n        x = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"D\"))\n        y = Series(pd.PeriodIndex([\"2015-10-01\", \"2016-01-01\"], freq=\"M\"))\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == \"object\"\n\n    def test_concat_period_other_series(self):\n        x = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"D\"))\n        y = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"M\"))\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == \"object\"\n\n        # non-period\n        x = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"D\"))\n        y = Series(DatetimeIndex([\"2015-11-01\", \"2015-12-01\"]))\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == \"object\"\n\n        x = Series(pd.PeriodIndex([\"2015-11-01\", \"2015-12-01\"], freq=\"D\"))\n        y = Series([\"A\", \"B\"])\n        expected = Series([x[0], x[1], y[0], y[1]], dtype=\"object\")\n        result = concat([x, y], ignore_index=True)\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == \"object\"\n\n\ndef test_concat_timedelta64_block():\n    rng = to_timedelta(np.arange(10), unit=\"s\")\n\n    df = DataFrame({\"time\": rng})\n\n    result = concat([df, df])\n    tm.assert_frame_equal(result.iloc[:10], df)\n    tm.assert_frame_equal(result.iloc[10:], df)\n\n\ndef test_concat_multiindex_datetime_nat():\n    # GH#44900\n    left = DataFrame({\"a\": 1}, index=MultiIndex.from_tuples([(1, pd.NaT)]))\n    right = DataFrame(\n        {\"b\": 2}, index=MultiIndex.from_tuples([(1, pd.NaT), (2, pd.NaT)])\n    )\n    result = concat([left, right], axis=\"columns\")\n    expected = DataFrame(\n        {\"a\": [1.0, np.nan], \"b\": 2}, MultiIndex.from_tuples([(1, pd.NaT), (2, pd.NaT)])\n    )\n    tm.assert_frame_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/series/accessors/test_dt_accessor.py",
      "content": "import calendar\nfrom datetime import (\n    date,\n    datetime,\n    time,\n)\nimport locale\nimport unicodedata\n\nimport numpy as np\nimport pytest\nimport pytz\n\nfrom pandas._libs.tslibs.timezones import maybe_get_tz\nfrom pandas.errors import SettingWithCopyError\n\nfrom pandas.core.dtypes.common import (\n    is_integer_dtype,\n    is_list_like,\n)\n\nimport pandas as pd\nfrom pandas import (\n    DataFrame,\n    DatetimeIndex,\n    Index,\n    Period,\n    PeriodIndex,\n    Series,\n    TimedeltaIndex,\n    date_range,\n    period_range,\n    timedelta_range,\n)\nimport pandas._testing as tm\nfrom pandas.core.arrays import (\n    DatetimeArray,\n    PeriodArray,\n    TimedeltaArray,\n)\n\nok_for_period = PeriodArray._datetimelike_ops\nok_for_period_methods = [\"strftime\", \"to_timestamp\", \"asfreq\"]\nok_for_dt = DatetimeArray._datetimelike_ops\nok_for_dt_methods = [\n    \"to_period\",\n    \"to_pydatetime\",\n    \"tz_localize\",\n    \"tz_convert\",\n    \"normalize\",\n    \"strftime\",\n    \"round\",\n    \"floor\",\n    \"ceil\",\n    \"day_name\",\n    \"month_name\",\n    \"isocalendar\",\n]\nok_for_td = TimedeltaArray._datetimelike_ops\nok_for_td_methods = [\n    \"components\",\n    \"to_pytimedelta\",\n    \"total_seconds\",\n    \"round\",\n    \"floor\",\n    \"ceil\",\n]\n\n\ndef get_dir(ser):\n    # check limited display api\n    results = [r for r in ser.dt.__dir__() if not r.startswith(\"_\")]\n    return sorted(set(results))\n\n\nclass TestSeriesDatetimeValues:\n    def _compare(self, ser, name):\n        # GH 7207, 11128\n        # test .dt namespace accessor\n\n        def get_expected(ser, prop):\n            result = getattr(Index(ser._values), prop)\n            if isinstance(result, np.ndarray):\n                if is_integer_dtype(result):\n                    result = result.astype(\"int64\")\n            elif not is_list_like(result) or isinstance(result, DataFrame):\n                return result\n            return Series(result, index=ser.index, name=ser.name)\n\n        left = getattr(ser.dt, name)\n        right = get_expected(ser, name)\n        if not (is_list_like(left) and is_list_like(right)):\n            assert left == right\n        elif isinstance(left, DataFrame):\n            tm.assert_frame_equal(left, right)\n        else:\n            tm.assert_series_equal(left, right)\n\n    @pytest.mark.parametrize(\"freq\", [\"D\", \"s\", \"ms\"])\n    def test_dt_namespace_accessor_datetime64(self, freq):\n        # GH#7207, GH#11128\n        # test .dt namespace accessor\n\n        # datetimeindex\n        dti = date_range(\"20130101\", periods=5, freq=freq)\n        ser = Series(dti, name=\"xxx\")\n\n        for prop in ok_for_dt:\n            # we test freq below\n            if prop != \"freq\":\n                self._compare(ser, prop)\n\n        for prop in ok_for_dt_methods:\n            getattr(ser.dt, prop)\n\n        result = ser.dt.to_pydatetime()\n        assert isinstance(result, np.ndarray)\n        assert result.dtype == object\n\n        result = ser.dt.tz_localize(\"US/Eastern\")\n        exp_values = DatetimeIndex(ser.values).tz_localize(\"US/Eastern\")\n        expected = Series(exp_values, index=ser.index, name=\"xxx\")\n        tm.assert_series_equal(result, expected)\n\n        tz_result = result.dt.tz\n        assert str(tz_result) == \"US/Eastern\"\n        freq_result = ser.dt.freq\n        assert freq_result == DatetimeIndex(ser.values, freq=\"infer\").freq\n\n        # let's localize, then convert\n        result = ser.dt.tz_localize(\"UTC\").dt.tz_convert(\"US/Eastern\")\n        exp_values = (\n            DatetimeIndex(ser.values).tz_localize(\"UTC\").tz_convert(\"US/Eastern\")\n        )\n        expected = Series(exp_values, index=ser.index, name=\"xxx\")\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_namespace_accessor_datetime64tz(self):\n        # GH#7207, GH#11128\n        # test .dt namespace accessor\n\n        # datetimeindex with tz\n        dti = date_range(\"20130101\", periods=5, tz=\"US/Eastern\")\n        ser = Series(dti, name=\"xxx\")\n        for prop in ok_for_dt:\n\n            # we test freq below\n            if prop != \"freq\":\n                self._compare(ser, prop)\n\n        for prop in ok_for_dt_methods:\n            getattr(ser.dt, prop)\n\n        result = ser.dt.to_pydatetime()\n        assert isinstance(result, np.ndarray)\n        assert result.dtype == object\n\n        result = ser.dt.tz_convert(\"CET\")\n        expected = Series(ser._values.tz_convert(\"CET\"), index=ser.index, name=\"xxx\")\n        tm.assert_series_equal(result, expected)\n\n        tz_result = result.dt.tz\n        assert str(tz_result) == \"CET\"\n        freq_result = ser.dt.freq\n        assert freq_result == DatetimeIndex(ser.values, freq=\"infer\").freq\n\n    def test_dt_namespace_accessor_timedelta(self):\n        # GH#7207, GH#11128\n        # test .dt namespace accessor\n\n        # timedelta index\n        cases = [\n            Series(\n                timedelta_range(\"1 day\", periods=5), index=list(\"abcde\"), name=\"xxx\"\n            ),\n            Series(timedelta_range(\"1 day 01:23:45\", periods=5, freq=\"s\"), name=\"xxx\"),\n            Series(\n                timedelta_range(\"2 days 01:23:45.012345\", periods=5, freq=\"ms\"),\n                name=\"xxx\",\n            ),\n        ]\n        for ser in cases:\n            for prop in ok_for_td:\n                # we test freq below\n                if prop != \"freq\":\n                    self._compare(ser, prop)\n\n            for prop in ok_for_td_methods:\n                getattr(ser.dt, prop)\n\n            result = ser.dt.components\n            assert isinstance(result, DataFrame)\n            tm.assert_index_equal(result.index, ser.index)\n\n            result = ser.dt.to_pytimedelta()\n            assert isinstance(result, np.ndarray)\n            assert result.dtype == object\n\n            result = ser.dt.total_seconds()\n            assert isinstance(result, Series)\n            assert result.dtype == \"float64\"\n\n            freq_result = ser.dt.freq\n            assert freq_result == TimedeltaIndex(ser.values, freq=\"infer\").freq\n\n    def test_dt_namespace_accessor_period(self):\n        # GH#7207, GH#11128\n        # test .dt namespace accessor\n\n        # periodindex\n        pi = period_range(\"20130101\", periods=5, freq=\"D\")\n        ser = Series(pi, name=\"xxx\")\n\n        for prop in ok_for_period:\n            # we test freq below\n            if prop != \"freq\":\n                self._compare(ser, prop)\n\n        for prop in ok_for_period_methods:\n            getattr(ser.dt, prop)\n\n        freq_result = ser.dt.freq\n        assert freq_result == PeriodIndex(ser.values).freq\n\n    def test_dt_namespace_accessor_index_and_values(self):\n\n        # both\n        index = date_range(\"20130101\", periods=3, freq=\"D\")\n        dti = date_range(\"20140204\", periods=3, freq=\"s\")\n        ser = Series(dti, index=index, name=\"xxx\")\n        exp = Series(\n            np.array([2014, 2014, 2014], dtype=\"int64\"), index=index, name=\"xxx\"\n        )\n        tm.assert_series_equal(ser.dt.year, exp)\n\n        exp = Series(np.array([2, 2, 2], dtype=\"int64\"), index=index, name=\"xxx\")\n        tm.assert_series_equal(ser.dt.month, exp)\n\n        exp = Series(np.array([0, 1, 2], dtype=\"int64\"), index=index, name=\"xxx\")\n        tm.assert_series_equal(ser.dt.second, exp)\n\n        exp = Series([ser[0]] * 3, index=index, name=\"xxx\")\n        tm.assert_series_equal(ser.dt.normalize(), exp)\n\n    def test_dt_accessor_limited_display_api(self):\n        # tznaive\n        ser = Series(date_range(\"20130101\", periods=5, freq=\"D\"), name=\"xxx\")\n        results = get_dir(ser)\n        tm.assert_almost_equal(results, sorted(set(ok_for_dt + ok_for_dt_methods)))\n\n        # tzaware\n        ser = Series(date_range(\"2015-01-01\", \"2016-01-01\", freq=\"T\"), name=\"xxx\")\n        ser = ser.dt.tz_localize(\"UTC\").dt.tz_convert(\"America/Chicago\")\n        results = get_dir(ser)\n        tm.assert_almost_equal(results, sorted(set(ok_for_dt + ok_for_dt_methods)))\n\n        # Period\n        ser = Series(\n            period_range(\"20130101\", periods=5, freq=\"D\", name=\"xxx\").astype(object)\n        )\n        results = get_dir(ser)\n        tm.assert_almost_equal(\n            results, sorted(set(ok_for_period + ok_for_period_methods))\n        )\n\n    def test_dt_accessor_ambiguous_freq_conversions(self):\n        # GH#11295\n        # ambiguous time error on the conversions\n        ser = Series(date_range(\"2015-01-01\", \"2016-01-01\", freq=\"T\"), name=\"xxx\")\n        ser = ser.dt.tz_localize(\"UTC\").dt.tz_convert(\"America/Chicago\")\n\n        exp_values = date_range(\n            \"2015-01-01\", \"2016-01-01\", freq=\"T\", tz=\"UTC\"\n        ).tz_convert(\"America/Chicago\")\n        # freq not preserved by tz_localize above\n        exp_values = exp_values._with_freq(None)\n        expected = Series(exp_values, name=\"xxx\")\n        tm.assert_series_equal(ser, expected)\n\n    def test_dt_accessor_not_writeable(self, using_copy_on_write):\n        # no setting allowed\n        ser = Series(date_range(\"20130101\", periods=5, freq=\"D\"), name=\"xxx\")\n        with pytest.raises(ValueError, match=\"modifications\"):\n            ser.dt.hour = 5\n\n        # trying to set a copy\n        msg = \"modifications to a property of a datetimelike.+not supported\"\n        with pd.option_context(\"chained_assignment\", \"raise\"):\n            if using_copy_on_write:\n                # TODO(CoW) it would be nice to keep a warning/error for this case\n                ser.dt.hour[0] = 5\n            else:\n                with pytest.raises(SettingWithCopyError, match=msg):\n                    ser.dt.hour[0] = 5\n\n    @pytest.mark.parametrize(\n        \"method, dates\",\n        [\n            [\"round\", [\"2012-01-02\", \"2012-01-02\", \"2012-01-01\"]],\n            [\"floor\", [\"2012-01-01\", \"2012-01-01\", \"2012-01-01\"]],\n            [\"ceil\", [\"2012-01-02\", \"2012-01-02\", \"2012-01-02\"]],\n        ],\n    )\n    def test_dt_round(self, method, dates):\n        # round\n        ser = Series(\n            pd.to_datetime(\n                [\"2012-01-01 13:00:00\", \"2012-01-01 12:01:00\", \"2012-01-01 08:00:00\"]\n            ),\n            name=\"xxx\",\n        )\n        result = getattr(ser.dt, method)(\"D\")\n        expected = Series(pd.to_datetime(dates), name=\"xxx\")\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_round_tz(self):\n        ser = Series(\n            pd.to_datetime(\n                [\"2012-01-01 13:00:00\", \"2012-01-01 12:01:00\", \"2012-01-01 08:00:00\"]\n            ),\n            name=\"xxx\",\n        )\n        result = ser.dt.tz_localize(\"UTC\").dt.tz_convert(\"US/Eastern\").dt.round(\"D\")\n\n        exp_values = pd.to_datetime(\n            [\"2012-01-01\", \"2012-01-01\", \"2012-01-01\"]\n        ).tz_localize(\"US/Eastern\")\n        expected = Series(exp_values, name=\"xxx\")\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"method\", [\"ceil\", \"round\", \"floor\"])\n    def test_dt_round_tz_ambiguous(self, method):\n        # GH 18946 round near \"fall back\" DST\n        df1 = DataFrame(\n            [\n                pd.to_datetime(\"2017-10-29 02:00:00+02:00\", utc=True),\n                pd.to_datetime(\"2017-10-29 02:00:00+01:00\", utc=True),\n                pd.to_datetime(\"2017-10-29 03:00:00+01:00\", utc=True),\n            ],\n            columns=[\"date\"],\n        )\n        df1[\"date\"] = df1[\"date\"].dt.tz_convert(\"Europe/Madrid\")\n        # infer\n        result = getattr(df1.date.dt, method)(\"H\", ambiguous=\"infer\")\n        expected = df1[\"date\"]\n        tm.assert_series_equal(result, expected)\n\n        # bool-array\n        result = getattr(df1.date.dt, method)(\"H\", ambiguous=[True, False, False])\n        tm.assert_series_equal(result, expected)\n\n        # NaT\n        result = getattr(df1.date.dt, method)(\"H\", ambiguous=\"NaT\")\n        expected = df1[\"date\"].copy()\n        expected.iloc[0:2] = pd.NaT\n        tm.assert_series_equal(result, expected)\n\n        # raise\n        with tm.external_error_raised(pytz.AmbiguousTimeError):\n            getattr(df1.date.dt, method)(\"H\", ambiguous=\"raise\")\n\n    @pytest.mark.parametrize(\n        \"method, ts_str, freq\",\n        [\n            [\"ceil\", \"2018-03-11 01:59:00-0600\", \"5min\"],\n            [\"round\", \"2018-03-11 01:59:00-0600\", \"5min\"],\n            [\"floor\", \"2018-03-11 03:01:00-0500\", \"2H\"],\n        ],\n    )\n    def test_dt_round_tz_nonexistent(self, method, ts_str, freq):\n        # GH 23324 round near \"spring forward\" DST\n        ser = Series([pd.Timestamp(ts_str, tz=\"America/Chicago\")])\n        result = getattr(ser.dt, method)(freq, nonexistent=\"shift_forward\")\n        expected = Series([pd.Timestamp(\"2018-03-11 03:00:00\", tz=\"America/Chicago\")])\n        tm.assert_series_equal(result, expected)\n\n        result = getattr(ser.dt, method)(freq, nonexistent=\"NaT\")\n        expected = Series([pd.NaT]).dt.tz_localize(result.dt.tz)\n        tm.assert_series_equal(result, expected)\n\n        with pytest.raises(pytz.NonExistentTimeError, match=\"2018-03-11 02:00:00\"):\n            getattr(ser.dt, method)(freq, nonexistent=\"raise\")\n\n    def test_dt_namespace_accessor_categorical(self):\n        # GH 19468\n        dti = DatetimeIndex([\"20171111\", \"20181212\"]).repeat(2)\n        ser = Series(pd.Categorical(dti), name=\"foo\")\n        result = ser.dt.year\n        expected = Series([2017, 2017, 2018, 2018], name=\"foo\")\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_tz_localize_categorical(self, tz_aware_fixture):\n        # GH 27952\n        tz = tz_aware_fixture\n        datetimes = Series(\n            [\"2019-01-01\", \"2019-01-01\", \"2019-01-02\"], dtype=\"datetime64[ns]\"\n        )\n        categorical = datetimes.astype(\"category\")\n        result = categorical.dt.tz_localize(tz)\n        expected = datetimes.dt.tz_localize(tz)\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_tz_convert_categorical(self, tz_aware_fixture):\n        # GH 27952\n        tz = tz_aware_fixture\n        datetimes = Series(\n            [\"2019-01-01\", \"2019-01-01\", \"2019-01-02\"], dtype=\"datetime64[ns, MET]\"\n        )\n        categorical = datetimes.astype(\"category\")\n        result = categorical.dt.tz_convert(tz)\n        expected = datetimes.dt.tz_convert(tz)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"accessor\", [\"year\", \"month\", \"day\"])\n    def test_dt_other_accessors_categorical(self, accessor):\n        # GH 27952\n        datetimes = Series(\n            [\"2018-01-01\", \"2018-01-01\", \"2019-01-02\"], dtype=\"datetime64[ns]\"\n        )\n        categorical = datetimes.astype(\"category\")\n        result = getattr(categorical.dt, accessor)\n        expected = getattr(datetimes.dt, accessor)\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_accessor_no_new_attributes(self):\n        # https://github.com/pandas-dev/pandas/issues/10673\n        ser = Series(date_range(\"20130101\", periods=5, freq=\"D\"))\n        with pytest.raises(AttributeError, match=\"You cannot add any new attribute\"):\n            ser.dt.xlabel = \"a\"\n\n    # error: Unsupported operand types for + (\"List[None]\" and \"List[str]\")\n    @pytest.mark.parametrize(\n        \"time_locale\", [None] + tm.get_locales()  # type: ignore[operator]\n    )\n    def test_dt_accessor_datetime_name_accessors(self, time_locale):\n        # Test Monday -> Sunday and January -> December, in that sequence\n        if time_locale is None:\n            # If the time_locale is None, day-name and month_name should\n            # return the english attributes\n            expected_days = [\n                \"Monday\",\n                \"Tuesday\",\n                \"Wednesday\",\n                \"Thursday\",\n                \"Friday\",\n                \"Saturday\",\n                \"Sunday\",\n            ]\n            expected_months = [\n                \"January\",\n                \"February\",\n                \"March\",\n                \"April\",\n                \"May\",\n                \"June\",\n                \"July\",\n                \"August\",\n                \"September\",\n                \"October\",\n                \"November\",\n                \"December\",\n            ]\n        else:\n            with tm.set_locale(time_locale, locale.LC_TIME):\n                expected_days = calendar.day_name[:]\n                expected_months = calendar.month_name[1:]\n\n        ser = Series(date_range(freq=\"D\", start=datetime(1998, 1, 1), periods=365))\n        english_days = [\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n            \"Sunday\",\n        ]\n        for day, name, eng_name in zip(range(4, 11), expected_days, english_days):\n            name = name.capitalize()\n            assert ser.dt.day_name(locale=time_locale)[day] == name\n            assert ser.dt.day_name(locale=None)[day] == eng_name\n        ser = pd.concat([ser, Series([pd.NaT])])\n        assert np.isnan(ser.dt.day_name(locale=time_locale).iloc[-1])\n\n        ser = Series(date_range(freq=\"M\", start=\"2012\", end=\"2013\"))\n        result = ser.dt.month_name(locale=time_locale)\n        expected = Series([month.capitalize() for month in expected_months])\n\n        # work around https://github.com/pandas-dev/pandas/issues/22342\n        result = result.str.normalize(\"NFD\")\n        expected = expected.str.normalize(\"NFD\")\n\n        tm.assert_series_equal(result, expected)\n\n        for s_date, expected in zip(ser, expected_months):\n            result = s_date.month_name(locale=time_locale)\n            expected = expected.capitalize()\n\n            result = unicodedata.normalize(\"NFD\", result)\n            expected = unicodedata.normalize(\"NFD\", expected)\n\n            assert result == expected\n\n        ser = pd.concat([ser, Series([pd.NaT])])\n        assert np.isnan(ser.dt.month_name(locale=time_locale).iloc[-1])\n\n    def test_strftime(self):\n        # GH 10086\n        ser = Series(date_range(\"20130101\", periods=5))\n        result = ser.dt.strftime(\"%Y/%m/%d\")\n        expected = Series(\n            [\"2013/01/01\", \"2013/01/02\", \"2013/01/03\", \"2013/01/04\", \"2013/01/05\"]\n        )\n        tm.assert_series_equal(result, expected)\n\n        ser = Series(date_range(\"2015-02-03 11:22:33.4567\", periods=5))\n        result = ser.dt.strftime(\"%Y/%m/%d %H-%M-%S\")\n        expected = Series(\n            [\n                \"2015/02/03 11-22-33\",\n                \"2015/02/04 11-22-33\",\n                \"2015/02/05 11-22-33\",\n                \"2015/02/06 11-22-33\",\n                \"2015/02/07 11-22-33\",\n            ]\n        )\n        tm.assert_series_equal(result, expected)\n\n        ser = Series(period_range(\"20130101\", periods=5))\n        result = ser.dt.strftime(\"%Y/%m/%d\")\n        expected = Series(\n            [\"2013/01/01\", \"2013/01/02\", \"2013/01/03\", \"2013/01/04\", \"2013/01/05\"]\n        )\n        tm.assert_series_equal(result, expected)\n\n        ser = Series(period_range(\"2015-02-03 11:22:33.4567\", periods=5, freq=\"s\"))\n        result = ser.dt.strftime(\"%Y/%m/%d %H-%M-%S\")\n        expected = Series(\n            [\n                \"2015/02/03 11-22-33\",\n                \"2015/02/03 11-22-34\",\n                \"2015/02/03 11-22-35\",\n                \"2015/02/03 11-22-36\",\n                \"2015/02/03 11-22-37\",\n            ]\n        )\n        tm.assert_series_equal(result, expected)\n\n    def test_strftime_dt64_days(self):\n        ser = Series(date_range(\"20130101\", periods=5))\n        ser.iloc[0] = pd.NaT\n        result = ser.dt.strftime(\"%Y/%m/%d\")\n        expected = Series(\n            [np.nan, \"2013/01/02\", \"2013/01/03\", \"2013/01/04\", \"2013/01/05\"]\n        )\n        tm.assert_series_equal(result, expected)\n\n        datetime_index = date_range(\"20150301\", periods=5)\n        result = datetime_index.strftime(\"%Y/%m/%d\")\n\n        expected = Index(\n            [\"2015/03/01\", \"2015/03/02\", \"2015/03/03\", \"2015/03/04\", \"2015/03/05\"],\n            dtype=np.object_,\n        )\n        # dtype may be S10 or U10 depending on python version\n        tm.assert_index_equal(result, expected)\n\n    def test_strftime_period_days(self):\n        period_index = period_range(\"20150301\", periods=5)\n        result = period_index.strftime(\"%Y/%m/%d\")\n        expected = Index(\n            [\"2015/03/01\", \"2015/03/02\", \"2015/03/03\", \"2015/03/04\", \"2015/03/05\"],\n            dtype=\"=U10\",\n        )\n        tm.assert_index_equal(result, expected)\n\n    def test_strftime_dt64_microsecond_resolution(self):\n        ser = Series([datetime(2013, 1, 1, 2, 32, 59), datetime(2013, 1, 2, 14, 32, 1)])\n        result = ser.dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n        expected = Series([\"2013-01-01 02:32:59\", \"2013-01-02 14:32:01\"])\n        tm.assert_series_equal(result, expected)\n\n    def test_strftime_period_hours(self):\n        ser = Series(period_range(\"20130101\", periods=4, freq=\"H\"))\n        result = ser.dt.strftime(\"%Y/%m/%d %H:%M:%S\")\n        expected = Series(\n            [\n                \"2013/01/01 00:00:00\",\n                \"2013/01/01 01:00:00\",\n                \"2013/01/01 02:00:00\",\n                \"2013/01/01 03:00:00\",\n            ]\n        )\n        tm.assert_series_equal(result, expected)\n\n    def test_strftime_period_minutes(self):\n        ser = Series(period_range(\"20130101\", periods=4, freq=\"L\"))\n        result = ser.dt.strftime(\"%Y/%m/%d %H:%M:%S.%l\")\n        expected = Series(\n            [\n                \"2013/01/01 00:00:00.000\",\n                \"2013/01/01 00:00:00.001\",\n                \"2013/01/01 00:00:00.002\",\n                \"2013/01/01 00:00:00.003\",\n            ]\n        )\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"data\",\n        [\n            DatetimeIndex([\"2019-01-01\", pd.NaT]),\n            PeriodIndex([\"2019-01-01\", pd.NaT], dtype=\"period[D]\"),\n        ],\n    )\n    def test_strftime_nat(self, data):\n        # GH 29578\n        ser = Series(data)\n        result = ser.dt.strftime(\"%Y-%m-%d\")\n        expected = Series([\"2019-01-01\", np.nan])\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"data\", [DatetimeIndex([pd.NaT]), PeriodIndex([pd.NaT], dtype=\"period[D]\")]\n    )\n    def test_strftime_all_nat(self, data):\n        # https://github.com/pandas-dev/pandas/issues/45858\n        ser = Series(data)\n        with tm.assert_produces_warning(None):\n            result = ser.dt.strftime(\"%Y-%m-%d\")\n        expected = Series([np.nan], dtype=object)\n        tm.assert_series_equal(result, expected)\n\n    def test_valid_dt_with_missing_values(self):\n        # GH 8689\n        ser = Series(date_range(\"20130101\", periods=5, freq=\"D\"))\n        ser.iloc[2] = pd.NaT\n\n        for attr in [\"microsecond\", \"nanosecond\", \"second\", \"minute\", \"hour\", \"day\"]:\n            expected = getattr(ser.dt, attr).copy()\n            expected.iloc[2] = np.nan\n            result = getattr(ser.dt, attr)\n            tm.assert_series_equal(result, expected)\n\n        result = ser.dt.date\n        expected = Series(\n            [\n                date(2013, 1, 1),\n                date(2013, 1, 2),\n                np.nan,\n                date(2013, 1, 4),\n                date(2013, 1, 5),\n            ],\n            dtype=\"object\",\n        )\n        tm.assert_series_equal(result, expected)\n\n        result = ser.dt.time\n        expected = Series([time(0), time(0), np.nan, time(0), time(0)], dtype=\"object\")\n        tm.assert_series_equal(result, expected)\n\n    def test_dt_accessor_api(self):\n        # GH 9322\n        from pandas.core.indexes.accessors import (\n            CombinedDatetimelikeProperties,\n            DatetimeProperties,\n        )\n\n        assert Series.dt is CombinedDatetimelikeProperties\n\n        ser = Series(date_range(\"2000-01-01\", periods=3))\n        assert isinstance(ser.dt, DatetimeProperties)\n\n    @pytest.mark.parametrize(\n        \"ser\", [Series(np.arange(5)), Series(list(\"abcde\")), Series(np.random.randn(5))]\n    )\n    def test_dt_accessor_invalid(self, ser):\n        # GH#9322 check that series with incorrect dtypes don't have attr\n        with pytest.raises(AttributeError, match=\"only use .dt accessor\"):\n            ser.dt\n        assert not hasattr(ser, \"dt\")\n\n    def test_dt_accessor_updates_on_inplace(self):\n        ser = Series(date_range(\"2018-01-01\", periods=10))\n        ser[2] = None\n        return_value = ser.fillna(pd.Timestamp(\"2018-01-01\"), inplace=True)\n        assert return_value is None\n        result = ser.dt.date\n        assert result[0] == result[2]\n\n    def test_date_tz(self):\n        # GH11757\n        rng = DatetimeIndex(\n            [\"2014-04-04 23:56\", \"2014-07-18 21:24\", \"2015-11-22 22:14\"],\n            tz=\"US/Eastern\",\n        )\n        ser = Series(rng)\n        expected = Series([date(2014, 4, 4), date(2014, 7, 18), date(2015, 11, 22)])\n        tm.assert_series_equal(ser.dt.date, expected)\n        tm.assert_series_equal(ser.apply(lambda x: x.date()), expected)\n\n    def test_dt_timetz_accessor(self, tz_naive_fixture):\n        # GH21358\n        tz = maybe_get_tz(tz_naive_fixture)\n\n        dtindex = DatetimeIndex(\n            [\"2014-04-04 23:56\", \"2014-07-18 21:24\", \"2015-11-22 22:14\"], tz=tz\n        )\n        ser = Series(dtindex)\n        expected = Series(\n            [time(23, 56, tzinfo=tz), time(21, 24, tzinfo=tz), time(22, 14, tzinfo=tz)]\n        )\n        result = ser.dt.timetz\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\n        \"input_series, expected_output\",\n        [\n            [[\"2020-01-01\"], [[2020, 1, 3]]],\n            [[pd.NaT], [[np.NaN, np.NaN, np.NaN]]],\n            [[\"2019-12-31\", \"2019-12-29\"], [[2020, 1, 2], [2019, 52, 7]]],\n            [[\"2010-01-01\", pd.NaT], [[2009, 53, 5], [np.NaN, np.NaN, np.NaN]]],\n            # see GH#36032\n            [[\"2016-01-08\", \"2016-01-04\"], [[2016, 1, 5], [2016, 1, 1]]],\n            [[\"2016-01-07\", \"2016-01-01\"], [[2016, 1, 4], [2015, 53, 5]]],\n        ],\n    )\n    def test_isocalendar(self, input_series, expected_output):\n        result = pd.to_datetime(Series(input_series)).dt.isocalendar()\n        expected_frame = DataFrame(\n            expected_output, columns=[\"year\", \"week\", \"day\"], dtype=\"UInt32\"\n        )\n        tm.assert_frame_equal(result, expected_frame)\n\n    def test_hour_index(self):\n        dt_series = Series(\n            date_range(start=\"2021-01-01\", periods=5, freq=\"h\"),\n            index=[2, 6, 7, 8, 11],\n            dtype=\"category\",\n        )\n        result = dt_series.dt.hour\n        expected = Series(\n            [0, 1, 2, 3, 4],\n            index=[2, 6, 7, 8, 11],\n        )\n        tm.assert_series_equal(result, expected)\n\n\nclass TestSeriesPeriodValuesDtAccessor:\n    @pytest.mark.parametrize(\n        \"input_vals\",\n        [\n            [Period(\"2016-01\", freq=\"M\"), Period(\"2016-02\", freq=\"M\")],\n            [Period(\"2016-01-01\", freq=\"D\"), Period(\"2016-01-02\", freq=\"D\")],\n            [\n                Period(\"2016-01-01 00:00:00\", freq=\"H\"),\n                Period(\"2016-01-01 01:00:00\", freq=\"H\"),\n            ],\n            [\n                Period(\"2016-01-01 00:00:00\", freq=\"M\"),\n                Period(\"2016-01-01 00:01:00\", freq=\"M\"),\n            ],\n            [\n                Period(\"2016-01-01 00:00:00\", freq=\"S\"),\n                Period(\"2016-01-01 00:00:01\", freq=\"S\"),\n            ],\n        ],\n    )\n    def test_end_time_timevalues(self, input_vals):\n        # GH#17157\n        # Check that the time part of the Period is adjusted by end_time\n        # when using the dt accessor on a Series\n        input_vals = PeriodArray._from_sequence(np.asarray(input_vals))\n\n        ser = Series(input_vals)\n        result = ser.dt.end_time\n        expected = ser.apply(lambda x: x.end_time)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize(\"input_vals\", [(\"2001\"), (\"NaT\")])\n    def test_to_period(self, input_vals):\n        # GH#21205\n        expected = Series([input_vals], dtype=\"Period[D]\")\n        result = Series([input_vals], dtype=\"datetime64[ns]\").dt.to_period(\"D\")\n        tm.assert_series_equal(result, expected)\n\n\ndef test_normalize_pre_epoch_dates():\n    # GH: 36294\n    ser = pd.to_datetime(Series([\"1969-01-01 09:00:00\", \"2016-01-01 09:00:00\"]))\n    result = ser.dt.normalize()\n    expected = pd.to_datetime(Series([\"1969-01-01\", \"2016-01-01\"]))\n    tm.assert_series_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/tseries/offsets/test_custom_business_month.py",
      "content": "\"\"\"\nTests for the following offsets:\n- CustomBusinessMonthBase\n- CustomBusinessMonthBegin\n- CustomBusinessMonthEnd\n\"\"\"\nfrom __future__ import annotations\n\nfrom datetime import (\n    date,\n    datetime,\n    timedelta,\n)\n\nimport numpy as np\nimport pytest\n\nfrom pandas._libs.tslibs.offsets import (\n    CBMonthBegin,\n    CBMonthEnd,\n    CDay,\n)\n\nfrom pandas import (\n    _testing as tm,\n    date_range,\n)\nfrom pandas.tests.tseries.offsets.common import (\n    assert_is_on_offset,\n    assert_offset_equal,\n)\nfrom pandas.tests.tseries.offsets.test_offsets import _ApplyCases\n\nfrom pandas.tseries import offsets as offsets\nfrom pandas.tseries.holiday import USFederalHolidayCalendar\n\n\n@pytest.fixture\ndef dt():\n    return datetime(2008, 1, 1)\n\n\nclass TestCommonCBM:\n    @pytest.mark.parametrize(\"offset2\", [CBMonthBegin(2), CBMonthEnd(2)])\n    def test_eq(self, offset2):\n        assert offset2 == offset2\n\n    @pytest.mark.parametrize(\"offset2\", [CBMonthBegin(2), CBMonthEnd(2)])\n    def test_hash(self, offset2):\n        assert hash(offset2) == hash(offset2)\n\n    @pytest.mark.parametrize(\"_offset\", [CBMonthBegin, CBMonthEnd])\n    def test_roundtrip_pickle(self, _offset):\n        def _check_roundtrip(obj):\n            unpickled = tm.round_trip_pickle(obj)\n            assert unpickled == obj\n\n        _check_roundtrip(_offset())\n        _check_roundtrip(_offset(2))\n        _check_roundtrip(_offset() * 2)\n\n    @pytest.mark.parametrize(\"_offset\", [CBMonthBegin, CBMonthEnd])\n    def test_copy(self, _offset):\n        # GH 17452\n        off = _offset(weekmask=\"Mon Wed Fri\")\n        assert off == off.copy()\n\n\nclass TestCustomBusinessMonthBegin:\n    @pytest.fixture\n    def _offset(self):\n        return CBMonthBegin\n\n    @pytest.fixture\n    def offset(self):\n        return CBMonthBegin()\n\n    @pytest.fixture\n    def offset2(self):\n        return CBMonthBegin(2)\n\n    def test_different_normalize_equals(self, _offset):\n        # GH#21404 changed __eq__ to return False when `normalize` does not match\n        offset = _offset()\n        offset2 = _offset(normalize=True)\n        assert offset != offset2\n\n    def test_repr(self, offset, offset2):\n        assert repr(offset) == \"<CustomBusinessMonthBegin>\"\n        assert repr(offset2) == \"<2 * CustomBusinessMonthBegins>\"\n\n    def test_add_datetime(self, dt, offset2):\n        assert offset2 + dt == datetime(2008, 3, 3)\n\n    def testRollback1(self):\n        assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)\n\n    def testRollback2(self, dt):\n        assert CBMonthBegin(10).rollback(dt) == datetime(2008, 1, 1)\n\n    def testRollforward1(self, dt):\n        assert CBMonthBegin(10).rollforward(dt) == datetime(2008, 1, 1)\n\n    def test_roll_date_object(self):\n        offset = CBMonthBegin()\n\n        dt = date(2012, 9, 15)\n\n        result = offset.rollback(dt)\n        assert result == datetime(2012, 9, 3)\n\n        result = offset.rollforward(dt)\n        assert result == datetime(2012, 10, 1)\n\n        offset = offsets.Day()\n        result = offset.rollback(dt)\n        assert result == datetime(2012, 9, 15)\n\n        result = offset.rollforward(dt)\n        assert result == datetime(2012, 9, 15)\n\n    on_offset_cases = [\n        (CBMonthBegin(), datetime(2008, 1, 1), True),\n        (CBMonthBegin(), datetime(2008, 1, 31), False),\n    ]\n\n    @pytest.mark.parametrize(\"case\", on_offset_cases)\n    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)\n\n    apply_cases: _ApplyCases = [\n        (\n            CBMonthBegin(),\n            {\n                datetime(2008, 1, 1): datetime(2008, 2, 1),\n                datetime(2008, 2, 7): datetime(2008, 3, 3),\n            },\n        ),\n        (\n            2 * CBMonthBegin(),\n            {\n                datetime(2008, 1, 1): datetime(2008, 3, 3),\n                datetime(2008, 2, 7): datetime(2008, 4, 1),\n            },\n        ),\n        (\n            -CBMonthBegin(),\n            {\n                datetime(2008, 1, 1): datetime(2007, 12, 3),\n                datetime(2008, 2, 8): datetime(2008, 2, 1),\n            },\n        ),\n        (\n            -2 * CBMonthBegin(),\n            {\n                datetime(2008, 1, 1): datetime(2007, 11, 1),\n                datetime(2008, 2, 9): datetime(2008, 1, 1),\n            },\n        ),\n        (\n            CBMonthBegin(0),\n            {\n                datetime(2008, 1, 1): datetime(2008, 1, 1),\n                datetime(2008, 1, 7): datetime(2008, 2, 1),\n            },\n        ),\n    ]\n\n    @pytest.mark.parametrize(\"case\", apply_cases)\n    def test_apply(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)\n\n    def test_apply_large_n(self):\n        dt = datetime(2012, 10, 23)\n\n        result = dt + CBMonthBegin(10)\n        assert result == datetime(2013, 8, 1)\n\n        result = dt + CDay(100) - CDay(100)\n        assert result == dt\n\n        off = CBMonthBegin() * 6\n        rs = datetime(2012, 1, 1) - off\n        xp = datetime(2011, 7, 1)\n        assert rs == xp\n\n        st = datetime(2011, 12, 18)\n        rs = st + off\n\n        xp = datetime(2012, 6, 1)\n        assert rs == xp\n\n    def test_holidays(self):\n        # Define a TradingDay offset\n        holidays = [\"2012-02-01\", datetime(2012, 2, 2), np.datetime64(\"2012-03-01\")]\n        bm_offset = CBMonthBegin(holidays=holidays)\n        dt = datetime(2012, 1, 1)\n\n        assert dt + bm_offset == datetime(2012, 1, 2)\n        assert dt + 2 * bm_offset == datetime(2012, 2, 3)\n\n    @pytest.mark.filterwarnings(\"ignore:Non:pandas.errors.PerformanceWarning\")\n    def test_datetimeindex(self):\n        hcal = USFederalHolidayCalendar()\n        cbmb = CBMonthBegin(calendar=hcal)\n        assert date_range(start=\"20120101\", end=\"20130101\", freq=cbmb).tolist()[\n            0\n        ] == datetime(2012, 1, 3)\n\n    @pytest.mark.parametrize(\n        \"case\",\n        [\n            (\n                CBMonthBegin(n=1, offset=timedelta(days=5)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 4, 1) + timedelta(days=5),\n                    datetime(2021, 4, 17): datetime(2021, 5, 3) + timedelta(days=5),\n                },\n            ),\n            (\n                CBMonthBegin(n=2, offset=timedelta(days=40)),\n                {\n                    datetime(2021, 3, 10): datetime(2021, 5, 3) + timedelta(days=40),\n                    datetime(2021, 4, 30): datetime(2021, 6, 1) + timedelta(days=40),\n                },\n            ),\n            (\n                CBMonthBegin(n=1, offset=timedelta(days=-5)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 4, 1) - timedelta(days=5),\n                    datetime(2021, 4, 11): datetime(2021, 5, 3) - timedelta(days=5),\n                },\n            ),\n            (\n                -2 * CBMonthBegin(n=1, offset=timedelta(days=10)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 1, 1) + timedelta(days=10),\n                    datetime(2021, 4, 3): datetime(2021, 3, 1) + timedelta(days=10),\n                },\n            ),\n            (\n                CBMonthBegin(n=0, offset=timedelta(days=1)),\n                {\n                    datetime(2021, 3, 2): datetime(2021, 4, 1) + timedelta(days=1),\n                    datetime(2021, 4, 1): datetime(2021, 4, 1) + timedelta(days=1),\n                },\n            ),\n            (\n                CBMonthBegin(\n                    n=1, holidays=[\"2021-04-01\", \"2021-04-02\"], offset=timedelta(days=1)\n                ),\n                {\n                    datetime(2021, 3, 2): datetime(2021, 4, 5) + timedelta(days=1),\n                },\n            ),\n        ],\n    )\n    def test_apply_with_extra_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)\n\n\nclass TestCustomBusinessMonthEnd:\n    @pytest.fixture\n    def _offset(self):\n        return CBMonthEnd\n\n    @pytest.fixture\n    def offset(self):\n        return CBMonthEnd()\n\n    @pytest.fixture\n    def offset2(self):\n        return CBMonthEnd(2)\n\n    def test_different_normalize_equals(self, _offset):\n        # GH#21404 changed __eq__ to return False when `normalize` does not match\n        offset = _offset()\n        offset2 = _offset(normalize=True)\n        assert offset != offset2\n\n    def test_repr(self, offset, offset2):\n        assert repr(offset) == \"<CustomBusinessMonthEnd>\"\n        assert repr(offset2) == \"<2 * CustomBusinessMonthEnds>\"\n\n    def test_add_datetime(self, dt, offset2):\n        assert offset2 + dt == datetime(2008, 2, 29)\n\n    def testRollback1(self):\n        assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)\n\n    def testRollback2(self, dt):\n        assert CBMonthEnd(10).rollback(dt) == datetime(2007, 12, 31)\n\n    def testRollforward1(self, dt):\n        assert CBMonthEnd(10).rollforward(dt) == datetime(2008, 1, 31)\n\n    def test_roll_date_object(self):\n        offset = CBMonthEnd()\n\n        dt = date(2012, 9, 15)\n\n        result = offset.rollback(dt)\n        assert result == datetime(2012, 8, 31)\n\n        result = offset.rollforward(dt)\n        assert result == datetime(2012, 9, 28)\n\n        offset = offsets.Day()\n        result = offset.rollback(dt)\n        assert result == datetime(2012, 9, 15)\n\n        result = offset.rollforward(dt)\n        assert result == datetime(2012, 9, 15)\n\n    on_offset_cases = [\n        (CBMonthEnd(), datetime(2008, 1, 31), True),\n        (CBMonthEnd(), datetime(2008, 1, 1), False),\n    ]\n\n    @pytest.mark.parametrize(\"case\", on_offset_cases)\n    def test_is_on_offset(self, case):\n        offset, dt, expected = case\n        assert_is_on_offset(offset, dt, expected)\n\n    apply_cases: _ApplyCases = [\n        (\n            CBMonthEnd(),\n            {\n                datetime(2008, 1, 1): datetime(2008, 1, 31),\n                datetime(2008, 2, 7): datetime(2008, 2, 29),\n            },\n        ),\n        (\n            2 * CBMonthEnd(),\n            {\n                datetime(2008, 1, 1): datetime(2008, 2, 29),\n                datetime(2008, 2, 7): datetime(2008, 3, 31),\n            },\n        ),\n        (\n            -CBMonthEnd(),\n            {\n                datetime(2008, 1, 1): datetime(2007, 12, 31),\n                datetime(2008, 2, 8): datetime(2008, 1, 31),\n            },\n        ),\n        (\n            -2 * CBMonthEnd(),\n            {\n                datetime(2008, 1, 1): datetime(2007, 11, 30),\n                datetime(2008, 2, 9): datetime(2007, 12, 31),\n            },\n        ),\n        (\n            CBMonthEnd(0),\n            {\n                datetime(2008, 1, 1): datetime(2008, 1, 31),\n                datetime(2008, 2, 7): datetime(2008, 2, 29),\n            },\n        ),\n    ]\n\n    @pytest.mark.parametrize(\"case\", apply_cases)\n    def test_apply(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)\n\n    def test_apply_large_n(self):\n        dt = datetime(2012, 10, 23)\n\n        result = dt + CBMonthEnd(10)\n        assert result == datetime(2013, 7, 31)\n\n        result = dt + CDay(100) - CDay(100)\n        assert result == dt\n\n        off = CBMonthEnd() * 6\n        rs = datetime(2012, 1, 1) - off\n        xp = datetime(2011, 7, 29)\n        assert rs == xp\n\n        st = datetime(2011, 12, 18)\n        rs = st + off\n        xp = datetime(2012, 5, 31)\n        assert rs == xp\n\n    def test_holidays(self):\n        # Define a TradingDay offset\n        holidays = [\"2012-01-31\", datetime(2012, 2, 28), np.datetime64(\"2012-02-29\")]\n        bm_offset = CBMonthEnd(holidays=holidays)\n        dt = datetime(2012, 1, 1)\n        assert dt + bm_offset == datetime(2012, 1, 30)\n        assert dt + 2 * bm_offset == datetime(2012, 2, 27)\n\n    @pytest.mark.filterwarnings(\"ignore:Non:pandas.errors.PerformanceWarning\")\n    def test_datetimeindex(self):\n        hcal = USFederalHolidayCalendar()\n        freq = CBMonthEnd(calendar=hcal)\n\n        assert date_range(start=\"20120101\", end=\"20130101\", freq=freq).tolist()[\n            0\n        ] == datetime(2012, 1, 31)\n\n    @pytest.mark.parametrize(\n        \"case\",\n        [\n            (\n                CBMonthEnd(n=1, offset=timedelta(days=5)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 3, 31) + timedelta(days=5),\n                    datetime(2021, 4, 17): datetime(2021, 4, 30) + timedelta(days=5),\n                },\n            ),\n            (\n                CBMonthEnd(n=2, offset=timedelta(days=40)),\n                {\n                    datetime(2021, 3, 10): datetime(2021, 4, 30) + timedelta(days=40),\n                    datetime(2021, 4, 30): datetime(2021, 6, 30) + timedelta(days=40),\n                },\n            ),\n            (\n                CBMonthEnd(n=1, offset=timedelta(days=-5)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 3, 31) - timedelta(days=5),\n                    datetime(2021, 4, 11): datetime(2021, 4, 30) - timedelta(days=5),\n                },\n            ),\n            (\n                -2 * CBMonthEnd(n=1, offset=timedelta(days=10)),\n                {\n                    datetime(2021, 3, 1): datetime(2021, 1, 29) + timedelta(days=10),\n                    datetime(2021, 4, 3): datetime(2021, 2, 26) + timedelta(days=10),\n                },\n            ),\n            (\n                CBMonthEnd(n=0, offset=timedelta(days=1)),\n                {\n                    datetime(2021, 3, 2): datetime(2021, 3, 31) + timedelta(days=1),\n                    datetime(2021, 4, 1): datetime(2021, 4, 30) + timedelta(days=1),\n                },\n            ),\n            (\n                CBMonthEnd(n=1, holidays=[\"2021-03-31\"], offset=timedelta(days=1)),\n                {\n                    datetime(2021, 3, 2): datetime(2021, 3, 30) + timedelta(days=1),\n                },\n            ),\n        ],\n    )\n    def test_apply_with_extra_offset(self, case):\n        offset, cases = case\n        for base, expected in cases.items():\n            assert_offset_equal(offset, base, expected)\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the main issue being addressed in the repository issue, and why is it important for the pandas project?",
    "What steps are suggested in the issue description to identify and fix instances where standard library imports are not at the top of the file?",
    "What are some exceptions to placing imports at the top of the file, as mentioned in the issue description?",
    "In the provided code context, identify the types of imports and how they are organized. Why is this organization significant?",
    "What potential challenges might a contributor face when addressing this issue in the pandas repository, and how could they be mitigated?"
  ],
  "golden_answers_generated": [
    "The main issue is ensuring that standard library imports are placed at the top of the file. This is important for several reasons, including improving code readability, maintaining a consistent style across the codebase, and potentially avoiding issues with circular imports. Properly organizing imports helps developers quickly understand dependencies and maintain the code more effectively.",
    "The issue description suggests a series of steps: first, create a new branch named 'standard-library-imports' from the main branch. Then, pull the latest changes from a specific remote repository. After resetting the changes, run a pre-commit hook named 'stdlib-imports' on all files to detect import-related errors. Finally, fix the errors, stage the changes, commit them, push to a fork, and open a pull request.",
    "There are a few exceptions where imports might not be placed at the top of the file: to avoid circular imports or to prevent 'ImportError' if the dependency is optional. These exceptions are generally considered on a case-by-case basis and are typically documented or justified within the code.",
    "The provided code context shows a well-organized import section. Standard library imports are listed at the top, followed by third-party library imports (like numpy), and finally, imports from the pandas library itself. This organization is significant as it follows the conventional practice of separating standard library imports from third-party and local imports, enhancing readability and maintainability.",
    "A contributor might face challenges such as identifying all instances where imports are not correctly placed, especially in a large codebase like pandas. They might also encounter legacy code where exceptions are necessary. These challenges can be mitigated by using automated scripts or tools to detect misplaced imports, consulting with maintainers for guidance on exceptions, and thoroughly testing changes to ensure they don't introduce new issues."
  ]
}