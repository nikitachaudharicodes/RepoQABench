{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "14207",
  "issue_description": "# API: allow dependent assignment?\n\nSince kwarg order will be [guaranteed](https://docs.python.org/3.6/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order) in python 3.6, we could allow this...though would only want to try with a 3.6+ version check, otherwise code could more or less randomly work/not work, depending on dict order.\n\n``` python\nIn [44]: df = pd.DataFrame({'a': [1,2,3]})\n\nIn [45]: df.assign(b=1, c=lambda x: x['b'] * 2)\n```\n",
  "issue_comments": [
    {
      "id": 246448062,
      "user": "TomAugspurger",
      "body": "xref: https://github.com/pydata/pandas/issues/9777#issuecomment-246043778\n\nThis would be a great, but I want to think a bit about exposing a feature that would so easily lead to subtle differences between 3.5 and 3.6. Not sure how best to handle it :/\n\nEither way, we could probably deprecate the sorting of keys (documentation only; can't print a warning each time someone uses `.assign`).\n"
    },
    {
      "id": 246448988,
      "user": "TomAugspurger",
      "body": "FYI, here's the current docs (in a warning block):\n\n> Since the function signature of assign is **kwargs, a dictionary, the order of the new columns in the resulting DataFrame cannot be guaranteed to match the order you pass in. To make things predictable, items are inserted alphabetically (by key) at the end of the DataFrame.\n> All expressions are computed first, and then assigned. So you can't refer to another column being assigned in the same call to assign.\n"
    },
    {
      "id": 246474782,
      "user": "chris-b1",
      "body": "Yeah, the back-compat is awkward, maybe this could be opt-in from an option, so it would at least raise on older pythons, although that's ugly too.\n`pd.set_option('ordered_assign', True)  # raises on py < 3.6`\n"
    },
    {
      "id": 278182303,
      "user": "TomAugspurger",
      "body": "@mrocklin thoughts on this? IIRC you wanted this initially to make things easier for dask? How much would break for you / dask users if we just removed the sorting of keys?"
    },
    {
      "id": 278541770,
      "user": "mrocklin",
      "body": "I think that Pandas should make whatever decisions make sense for Pandas.  Dask.dataframe will adapt as necessary.  I suspect that this won't cause a problem.  Dask.dataframe will just try the `assign` operation on an empty dataframe to determine the column ordering.  Whatever Pandas does we'll probably do automatically."
    },
    {
      "id": 278545022,
      "user": "shoyer",
      "body": "Ultimately, I think this we should switch to this behavior and stop sorting.\r\n\r\nBut I don't see much of a rush. It might be better to wait until Python 3.6 is more widely used, even until pandas 2.0."
    },
    {
      "id": 278545248,
      "user": "shoyer",
      "body": "I would also be comfortable just changing this for Python 3.6+. My guess is that there aren't that many folks using Python 3.6 in production yet, so this will probably cause minimal issues."
    },
    {
      "id": 331228424,
      "user": "TomAugspurger",
      "body": "I think we should sort this out for 0.21. I propose\r\n\r\n- No change to 2.7 - 3.5; order is sorted by key\r\n- For 3.6+, we use the original order the user passed in\r\n- We don't allow dependent assignment yet\r\n\r\nMaybe in the future, when there's less 3.5 and lower code around, we can allow for dependent assignment."
    },
    {
      "id": 331371593,
      "user": "jorisvandenbossche",
      "body": " +1 on your summary"
    },
    {
      "id": 331450931,
      "user": "jreback",
      "body": "sgtm on @TomAugspurger summary as well."
    },
    {
      "id": 331472102,
      "user": "bobhaffner",
      "body": "HI All,  Tom said this was a good one for new contributors so I'm going after it. "
    },
    {
      "id": 331791635,
      "user": "jorisvandenbossche",
      "body": "Keep this open for the second part: allow dependent assignment somewhere in the future?"
    },
    {
      "id": 331848741,
      "user": "jreback",
      "body": "I would create a new separate issue if you really want to. That is a long time from now though."
    },
    {
      "id": 331861183,
      "user": "jorisvandenbossche",
      "body": "The title and description in the top post is exactly this, so no need to create a new one I think, if we want an issue for it"
    },
    {
      "id": 352115764,
      "user": "TomAugspurger",
      "body": "If you didn't see, as of python 3.7 dictionaries are ordered, as part of the language https://mail.python.org/pipermail/python-dev/2017-December/151283.html\r\n\r\nMy objection to allowing dependent assignment now was that it'd (potentially) lead to subtle bugs / confusing errors between versions of python. But since Python itself is opening the door, let's slip through too :) I think we should allow dependent assignment in 0.22."
    },
    {
      "id": 352288136,
      "user": "datajanko",
      "body": "Obviously, I am not good at looking through existing issues. Please accept my aplogogies.\r\n\r\nAs of https://github.com/pandas-dev/pandas/issues/18797 I am also interested in letting assign be able to accept dependent kwargs. I just performed the (in my opinion) naive/direct implementation (after adapting the test cases accordingly) and it works fine - for callables where references to the \"depenendet columns\" are evaluated lazily. Something like `df.assign(b=1, c=df['b'])` will - of course - not work. \r\n\r\nSo if it's okay, that dependent assignments only work for certain callables, I'd be happy to issue a pull request in the next days."
    },
    {
      "id": 352404311,
      "user": "TomAugspurger",
      "body": ">  if it's okay, that dependent assignments only work for certain callables\r\n\r\nYes, that sounds right. You'll need to use a callable to refer to newly created columns in the `.assign`."
    },
    {
      "id": 352566915,
      "user": "datajanko",
      "body": "before issuing pull request, I obviously need to provide an entry in the what's new file. I assume other api changes is the right place, correct? Sorry for asking again, but this is may first coding contribution for an open source project."
    },
    {
      "id": 352603504,
      "user": "chris-b1",
      "body": "Yes, I would suggest there with an example. Always feel free to put up a\nwork-in-progress PR for feedback.\n\nOn Dec 18, 2017 3:43 PM, \"Jan Koch\" <notifications@github.com> wrote:\n\n> before issuing pull request, I obviously need to provide an entry in the\n> what's new file. I assume other api changes is the right place, correct?\n> Sorry for asking again, but this is may first coding contribution for an\n> open source project.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/14207#issuecomment-352566915>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB1b_NkLM_BHJ8hW0sHnGK5FWxrdW0ZKks5tBtx0gaJpZM4J63ua>\n> .\n>\n"
    }
  ],
  "text_context": "# API: allow dependent assignment?\n\nSince kwarg order will be [guaranteed](https://docs.python.org/3.6/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order) in python 3.6, we could allow this...though would only want to try with a 3.6+ version check, otherwise code could more or less randomly work/not work, depending on dict order.\n\n``` python\nIn [44]: df = pd.DataFrame({'a': [1,2,3]})\n\nIn [45]: df.assign(b=1, c=lambda x: x['b'] * 2)\n```\n\n\nxref: https://github.com/pydata/pandas/issues/9777#issuecomment-246043778\n\nThis would be a great, but I want to think a bit about exposing a feature that would so easily lead to subtle differences between 3.5 and 3.6. Not sure how best to handle it :/\n\nEither way, we could probably deprecate the sorting of keys (documentation only; can't print a warning each time someone uses `.assign`).\n\n\nFYI, here's the current docs (in a warning block):\n\n> Since the function signature of assign is **kwargs, a dictionary, the order of the new columns in the resulting DataFrame cannot be guaranteed to match the order you pass in. To make things predictable, items are inserted alphabetically (by key) at the end of the DataFrame.\n> All expressions are computed first, and then assigned. So you can't refer to another column being assigned in the same call to assign.\n\n\nYeah, the back-compat is awkward, maybe this could be opt-in from an option, so it would at least raise on older pythons, although that's ugly too.\n`pd.set_option('ordered_assign', True)  # raises on py < 3.6`\n\n\n@mrocklin thoughts on this? IIRC you wanted this initially to make things easier for dask? How much would break for you / dask users if we just removed the sorting of keys?\n\nI think that Pandas should make whatever decisions make sense for Pandas.  Dask.dataframe will adapt as necessary.  I suspect that this won't cause a problem.  Dask.dataframe will just try the `assign` operation on an empty dataframe to determine the column ordering.  Whatever Pandas does we'll probably do automatically.\n\nUltimately, I think this we should switch to this behavior and stop sorting.\r\n\r\nBut I don't see much of a rush. It might be better to wait until Python 3.6 is more widely used, even until pandas 2.0.\n\nI would also be comfortable just changing this for Python 3.6+. My guess is that there aren't that many folks using Python 3.6 in production yet, so this will probably cause minimal issues.\n\nI think we should sort this out for 0.21. I propose\r\n\r\n- No change to 2.7 - 3.5; order is sorted by key\r\n- For 3.6+, we use the original order the user passed in\r\n- We don't allow dependent assignment yet\r\n\r\nMaybe in the future, when there's less 3.5 and lower code around, we can allow for dependent assignment.\n\n +1 on your summary\n\nsgtm on @TomAugspurger summary as well.\n\nHI All,  Tom said this was a good one for new contributors so I'm going after it. \n\nKeep this open for the second part: allow dependent assignment somewhere in the future?\n\nI would create a new separate issue if you really want to. That is a long time from now though.\n\nThe title and description in the top post is exactly this, so no need to create a new one I think, if we want an issue for it\n\nIf you didn't see, as of python 3.7 dictionaries are ordered, as part of the language https://mail.python.org/pipermail/python-dev/2017-December/151283.html\r\n\r\nMy objection to allowing dependent assignment now was that it'd (potentially) lead to subtle bugs / confusing errors between versions of python. But since Python itself is opening the door, let's slip through too :) I think we should allow dependent assignment in 0.22.\n\nObviously, I am not good at looking through existing issues. Please accept my aplogogies.\r\n\r\nAs of https://github.com/pandas-dev/pandas/issues/18797 I am also interested in letting assign be able to accept dependent kwargs. I just performed the (in my opinion) naive/direct implementation (after adapting the test cases accordingly) and it works fine - for callables where references to the \"depenendet columns\" are evaluated lazily. Something like `df.assign(b=1, c=df['b'])` will - of course - not work. \r\n\r\nSo if it's okay, that dependent assignments only work for certain callables, I'd be happy to issue a pull request in the next days.\n\n>  if it's okay, that dependent assignments only work for certain callables\r\n\r\nYes, that sounds right. You'll need to use a callable to refer to newly created columns in the `.assign`.\n\nbefore issuing pull request, I obviously need to provide an entry in the what's new file. I assume other api changes is the right place, correct? Sorry for asking again, but this is may first coding contribution for an open source project.\n\nYes, I would suggest there with an example. Always feel free to put up a\nwork-in-progress PR for feedback.\n\nOn Dec 18, 2017 3:43 PM, \"Jan Koch\" <notifications@github.com> wrote:\n\n> before issuing pull request, I obviously need to provide an entry in the\n> what's new file. I assume other api changes is the right place, correct?\n> Sorry for asking again, but this is may first coding contribution for an\n> open source project.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/14207#issuecomment-352566915>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB1b_NkLM_BHJ8hW0sHnGK5FWxrdW0ZKks5tBtx0gaJpZM4J63ua>\n> .\n>\n",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/18852",
  "code_context": [
    {
      "filename": "pandas/core/frame.py",
      "content": "\"\"\"\nDataFrame\n---------\nAn efficient 2D container for potentially mixed-type time series or other\nlabeled data series.\n\nSimilar to its R counterpart, data.frame, except providing automatic data\nalignment and a host of useful data manipulation methods having to do with the\nlabeling information\n\"\"\"\nfrom __future__ import division\n# pylint: disable=E1101,E1103\n# pylint: disable=W0212,W0231,W0703,W0622\n\nimport functools\nimport collections\nimport itertools\nimport sys\nimport types\nimport warnings\nfrom textwrap import dedent\n\nimport numpy as np\nimport numpy.ma as ma\n\nfrom pandas.core.accessor import CachedAccessor\nfrom pandas.core.dtypes.cast import (\n    maybe_upcast,\n    cast_scalar_to_array,\n    maybe_cast_to_datetime,\n    maybe_infer_to_datetimelike,\n    maybe_convert_platform,\n    maybe_downcast_to_dtype,\n    invalidate_string_dtypes,\n    coerce_to_dtypes,\n    maybe_upcast_putmask,\n    find_common_type)\nfrom pandas.core.dtypes.common import (\n    is_categorical_dtype,\n    is_object_dtype,\n    is_extension_type,\n    is_datetimetz,\n    is_datetime64_any_dtype,\n    is_datetime64tz_dtype,\n    is_bool_dtype,\n    is_integer_dtype,\n    is_float_dtype,\n    is_integer,\n    is_scalar,\n    is_dtype_equal,\n    needs_i8_conversion,\n    _get_dtype_from_object,\n    _ensure_float,\n    _ensure_float64,\n    _ensure_int64,\n    _ensure_platform_int,\n    is_list_like,\n    is_nested_list_like,\n    is_iterator,\n    is_sequence,\n    is_named_tuple)\nfrom pandas.core.dtypes.missing import isna, notna\n\n\nfrom pandas.core.generic import NDFrame, _shared_docs\nfrom pandas.core.index import (Index, MultiIndex, _ensure_index,\n                               _ensure_index_from_sequences)\nfrom pandas.core.indexing import (maybe_droplevels, convert_to_index_sliceable,\n                                  check_bool_indexer)\nfrom pandas.core.internals import (BlockManager,\n                                   create_block_manager_from_arrays,\n                                   create_block_manager_from_blocks)\nfrom pandas.core.series import Series\nfrom pandas.core.arrays import Categorical\nimport pandas.core.algorithms as algorithms\nfrom pandas.compat import (range, map, zip, lrange, lmap, lzip, StringIO, u,\n                           OrderedDict, raise_with_traceback)\nfrom pandas import compat\nfrom pandas.compat import PY36\nfrom pandas.compat.numpy import function as nv\nfrom pandas.util._decorators import (Appender, Substitution,\n                                     rewrite_axis_style_signature)\nfrom pandas.util._validators import (validate_bool_kwarg,\n                                     validate_axis_style_args)\n\nfrom pandas.core.indexes.period import PeriodIndex\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.timedeltas import TimedeltaIndex\n\nimport pandas.core.common as com\nimport pandas.core.nanops as nanops\nimport pandas.core.ops as ops\nimport pandas.io.formats.format as fmt\nimport pandas.io.formats.console as console\nfrom pandas.io.formats.printing import pprint_thing\nimport pandas.plotting._core as gfx\n\nfrom pandas._libs import lib, algos as libalgos\n\nfrom pandas.core.config import get_option\n\n# ---------------------------------------------------------------------\n# Docstring templates\n\n_shared_doc_kwargs = dict(\n    axes='index, columns', klass='DataFrame',\n    axes_single_arg=\"{0 or 'index', 1 or 'columns'}\",\n    optional_by=\"\"\"\n        by : str or list of str\n            Name or list of names to sort by.\n\n            - if `axis` is 0 or `'index'` then `by` may contain index\n              levels and/or column labels\n            - if `axis` is 1 or `'columns'` then `by` may contain column\n              levels and/or index labels\n\n        .. versionmodified:: 0.23.0\n           Allow specifying index or column level names.\"\"\",\n    versionadded_to_excel='',\n    optional_labels=\"\"\"labels : array-like, optional\n            New labels / index to conform the axis specified by 'axis' to.\"\"\",\n    optional_axis=\"\"\"axis : int or str, optional\n            Axis to target. Can be either the axis name ('index', 'columns')\n            or number (0, 1).\"\"\",\n)\n\n_numeric_only_doc = \"\"\"numeric_only : boolean, default None\n    Include only float, int, boolean data. If None, will attempt to use\n    everything, then use only numeric data\n\"\"\"\n\n_merge_doc = \"\"\"\nMerge DataFrame objects by performing a database-style join operation by\ncolumns or indexes.\n\nIf joining columns on columns, the DataFrame indexes *will be\nignored*. Otherwise if joining indexes on indexes or indexes on a column or\ncolumns, the index will be passed on.\n\nParameters\n----------%s\nright : DataFrame\nhow : {'left', 'right', 'outer', 'inner'}, default 'inner'\n    * left: use only keys from left frame, similar to a SQL left outer join;\n      preserve key order\n    * right: use only keys from right frame, similar to a SQL right outer join;\n      preserve key order\n    * outer: use union of keys from both frames, similar to a SQL full outer\n      join; sort keys lexicographically\n    * inner: use intersection of keys from both frames, similar to a SQL inner\n      join; preserve the order of the left keys\non : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If `on` is None and not merging on indexes then this defaults\n    to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column or index level names to join on in the left DataFrame. Can also\n    be an array or list of arrays of the length of the left DataFrame.\n    These arrays are treated as if they are columns.\nright_on : label or list, or array-like\n    Column or index level names to join on in the right DataFrame. Can also\n    be an array or list of arrays of the length of the right DataFrame.\n    These arrays are treated as if they are columns.\nleft_index : boolean, default False\n    Use the index from the left DataFrame as the join key(s). If it is a\n    MultiIndex, the number of keys in the other DataFrame (either the index\n    or a number of columns) must match the number of levels\nright_index : boolean, default False\n    Use the index from the right DataFrame as the join key. Same caveats as\n    left_index\nsort : boolean, default False\n    Sort the join keys lexicographically in the result DataFrame. If False,\n    the order of the join keys depends on the join type (how keyword)\nsuffixes : 2-length sequence (tuple, list, ...)\n    Suffix to apply to overlapping column names in the left and right\n    side, respectively\ncopy : boolean, default True\n    If False, do not copy data unnecessarily\nindicator : boolean or string, default False\n    If True, adds a column to output DataFrame called \"_merge\" with\n    information on the source of each row.\n    If string, column with information on source of each row will be added to\n    output DataFrame, and column will be named value of string.\n    Information column is Categorical-type and takes on a value of \"left_only\"\n    for observations whose merge key only appears in 'left' DataFrame,\n    \"right_only\" for observations whose merge key only appears in 'right'\n    DataFrame, and \"both\" if the observation's merge key is found in both.\n\nvalidate : string, default None\n    If specified, checks if merge is of specified type.\n\n    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n      left and right datasets.\n    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n      dataset.\n    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n      dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n\n    .. versionadded:: 0.21.0\n\nNotes\n-----\nSupport for specifying index levels as the `on`, `left_on`, and\n`right_on` parameters was added in version 0.23.0\n\nExamples\n--------\n\n>>> A              >>> B\n    lkey value         rkey value\n0   foo  1         0   foo  5\n1   bar  2         1   bar  6\n2   baz  3         2   qux  7\n3   foo  4         3   bar  8\n\n>>> A.merge(B, left_on='lkey', right_on='rkey', how='outer')\n   lkey  value_x  rkey  value_y\n0  foo   1        foo   5\n1  foo   4        foo   5\n2  bar   2        bar   6\n3  bar   2        bar   8\n4  baz   3        NaN   NaN\n5  NaN   NaN      qux   7\n\nReturns\n-------\nmerged : DataFrame\n    The output type will the be same as 'left', if it is a subclass\n    of DataFrame.\n\nSee also\n--------\nmerge_ordered\nmerge_asof\nDataFrame.join\n\"\"\"\n\n# -----------------------------------------------------------------------\n# DataFrame class\n\n\nclass DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : numpy ndarray (structured or homogeneous), dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n    index : Index or array-like\n        Index to use for resulting frame. Will default to np.arange(n) if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        np.arange(n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.random.randint(low=0, high=10, size=(5, 5)),\n    ...                    columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df2\n        a   b   c   d   e\n    0   2   8   8   3   4\n    1   4   2   9   0   9\n    2   1   0   7   8   0\n    3   5   1   7   1   3\n    4   6   0   2   4   2\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(\n        ['sortlevel', 'get_value', 'set_value', 'from_csv', 'from_items'])\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n                 copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n                                 dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                                               copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                         copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                                      dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                         copy=copy)\n        elif isinstance(data, (list, types.GeneratorType)):\n            if isinstance(data, types.GeneratorType):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = _ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = com._default_index(len(data[0]))\n                        else:\n                            index = com._default_index(len(data))\n\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                                         dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                                             copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        elif isinstance(data, collections.Iterator):\n            raise TypeError(\"data argument can't be an iterator\")\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError('DataFrame constructor called with '\n                                'incompatible data and dtype: %s' % e)\n                raise_with_traceback(exc)\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                                              data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns,\n                                         dtype=values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            columns = _ensure_index(columns)\n\n            # GH10856\n            # raise ValueError if only scalars in dict\n            if index is None:\n                extract_index(list(data.values()))\n\n            # prefilter if columns passed\n            data = {k: v for k, v in compat.iteritems(data) if k in columns}\n\n            if index is None:\n                index = extract_index(list(data.values()))\n\n            else:\n                index = _ensure_index(index)\n\n            arrays = []\n            data_names = []\n            for k in columns:\n                if k not in data:\n                    # no obvious \"empty\" int column\n                    if dtype is not None and issubclass(dtype.type,\n                                                        np.integer):\n                        continue\n\n                    if dtype is None:\n                        # 1783\n                        v = np.empty(len(index), dtype=object)\n                    elif np.issubdtype(dtype, np.flexible):\n                        v = np.empty(len(index), dtype=object)\n                    else:\n                        v = np.empty(len(index), dtype=dtype)\n\n                    v.fill(np.nan)\n                else:\n                    v = data[k]\n                data_names.append(k)\n                arrays.append(v)\n\n        else:\n            keys = list(data.keys())\n            if not isinstance(data, OrderedDict):\n                keys = com._try_sort(keys)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        # input must be a ndarray, list, Series, index\n\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n            # zero len case (GH #2234)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        # helper to create the axes as indexes\n        def _get_axes(N, K, index=index, columns=columns):\n            # return axes or defaults\n\n            if index is None:\n                index = com._default_index(N)\n            else:\n                index = _ensure_index(index)\n\n            if columns is None:\n                columns = com._default_index(K)\n            else:\n                columns = _ensure_index(columns)\n            return index, columns\n\n        # we could have a categorical type passed or coerced to 'category'\n        # recast this to an _arrays_to_mgr\n        if (is_categorical_dtype(getattr(values, 'dtype', None)) or\n                is_categorical_dtype(dtype)):\n\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns,\n                                  dtype=dtype)\n        elif is_datetimetz(values):\n            # GH19157\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns,\n                                  dtype=dtype)\n\n        # by definition an array here\n        # the dtypes will be coerced to a single dtype\n        values = _prep_ndarray(values, copy=copy)\n\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\"failed to cast to '%s' (Exception was: %s)\"\n                                   % (dtype, orig))\n                    raise_with_traceback(e)\n\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n\n        # if we don't have a dtype specified, then try to convert objects\n        # on the entire block; this is to convert if we have datetimelike's\n        # embedded in an object type\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list with the row axis labels and column axis labels as the\n        only members. They are returned in that order.\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option(\"display.max_rows\")\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n\n        width, height = console.get_console_size()\n        max_columns = get_option(\"display.max_columns\")\n        nb_columns = len(self.columns)\n\n        # exceed max columns\n        if ((max_columns and nb_columns > max_columns) or\n                ((not ignore_width) and width and nb_columns > (width // 2))):\n            return False\n\n        # used by repr_html under IPython notebook or scripts ignore terminal\n        # dims\n        if ignore_width or not com.in_interactive_session():\n            return True\n\n        if (get_option('display.width') is not None or\n                com.in_ipython_frontend()):\n            # check at least the column row for excessive width\n            max_rows = 1\n        else:\n            max_rows = get_option(\"display.max_rows\")\n\n        # when auto-detecting, so width=None and not in ipython front end\n        # check whether repr fits horizontal by actually checking\n        # the width of the rendered repr\n        buf = StringIO()\n\n        # only care about the stuff we'll actually print out\n        # and to_string on entire frame may be expensive\n        d = self\n\n        if not (max_rows is None):  # unlimited rows\n            # min of two, where one may be None\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = (get_option(\"display.large_repr\") == \"info\")\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n                                         self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(\"\"))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n\n        max_rows = get_option(\"display.max_rows\")\n        max_cols = get_option(\"display.max_columns\")\n        show_dimensions = get_option(\"display.show_dimensions\")\n        if get_option(\"display.expand_frame_repr\"):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n                       line_width=width, show_dimensions=show_dimensions)\n\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        # qtconsole doesn't report its line width, and also\n        # behaves badly when outputting an HTML table\n        # that doesn't fit the window, so disable it.\n        # XXX: In IPython 3.x and above, the Qt console will not attempt to\n        # display HTML, so this check can be removed when support for\n        # IPython 2.x is no longer needed.\n        if com.in_qtconsole():\n            # 'HTML output is disabled in QtConsole'\n            return None\n\n        if self._info_repr():\n            buf = StringIO(u(\"\"))\n            self.info(buf=buf)\n            # need to escape the <class>, should be the first line.\n            val = buf.getvalue().replace('<', r'&lt;', 1)\n            val = val.replace('>', r'&gt;', 1)\n            return '<pre>' + val + '</pre>'\n\n        if get_option(\"display.notebook_repr_html\"):\n            max_rows = get_option(\"display.max_rows\")\n            max_cols = get_option(\"display.max_columns\")\n            show_dimensions = get_option(\"display.show_dimensions\")\n\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name=\"Pandas\"):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append(\"Index\")\n\n        # use integer indexing because of possible duplicate column names\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n        # Python 3 supports at most 255 arguments to constructor, and\n        # things get slow with this many fields in Python 2\n        if name is not None and len(self.columns) + index < 256:\n            # `rename` is unsupported in Python 2.6\n            try:\n                itertuple = collections.namedtuple(name,\n                                                   fields + list(self.columns),\n                                                   rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n\n        # fallback to regular tuples\n        return zip(*arrays)\n\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if (len(common) > len(self.columns) or\n                    len(common) > len(other.index)):\n                raise ValueError('matrices are not aligned')\n\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, %s vs %s' %\n                                 (lvals.shape, rvals.shape))\n\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                                     columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:  # pragma: no cover\n            raise TypeError('unsupported type: %s' % type(other))\n\n    # ----------------------------------------------------------------------\n    # IO methods (to / from other formats)\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts\n\n        Parameters\n        ----------\n        data : dict\n            {field : array-like} or {field : dict}\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        index, columns = None, None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                # TODO speed up Series case\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient != 'columns':  # pragma: no cover\n            raise ValueError('only recognize index or columns for orient')\n\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"Convert DataFrame to dictionary.\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - dict (default) : dict like {column -> {index -> value}}\n            - list : dict like {column -> [values]}\n            - series : dict like {column -> Series(values)}\n            - split : dict like\n              {index -> [index], columns -> [columns], data -> [values]}\n            - records : list like\n              [{column -> value}, ... , {column -> value}]\n            - index : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n                {'col1': [1, 2], 'col2': [0.5, 0.75]}, index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n        b    2\n        Name: col1, dtype: int64, 'col2': a    0.50\n        b    0.75\n        Name: col2, dtype: float64}\n        >>> df.to_dict('split')\n        {'columns': ['col1', 'col2'],\n        'data': [[1.0, 0.5], [2.0, 0.75]],\n        'index': ['a', 'b']}\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                   ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<type 'list'>, {'col2': 0.5, 'col1': 1.0}),\n        defaultdict(<type 'list'>, {'col2': 0.75, 'col1': 2.0})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\"DataFrame columns are not unique, some \"\n                          \"columns will be omitted.\", UserWarning,\n                          stacklevel=2)\n        # GH16122\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c(\n                (k, v.to_dict(into)) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()),\n                           ('columns', self.columns.tolist()),\n                           ('data', lib.map_infer(self.values.ravel(),\n                                                  com._maybe_box_datetimelike)\n                            .reshape(self.values.shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com._maybe_box_datetimelike(v))\n                          for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com._maybe_box_datetimelike(v))\n                           for k, v in zip(self.columns, np.atleast_1d(row)))\n                    for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((k, v.to_dict(into)) for k, v in self.iterrows())\n        else:\n            raise ValueError(\"orient '%s' not understood\" % orient)\n\n    def to_gbq(self, destination_table, project_id, chunksize=10000,\n               verbose=True, reauth=False, if_exists='fail', private_key=None):\n        \"\"\"Write a DataFrame to a Google BigQuery table.\n\n        The main method a user calls to export pandas DataFrame contents to\n        Google BigQuery table.\n\n        Google BigQuery API Client Library v2 for Python is used.\n        Documentation is available `here\n        <https://developers.google.com/api-client-library/python/apis/bigquery/v2>`__\n\n        Authentication to the Google BigQuery service is via OAuth 2.0.\n\n        - If \"private_key\" is not provided:\n\n          By default \"application default credentials\" are used.\n\n          If default application credentials are not found or are restrictive,\n          user account credentials are used. In this case, you will be asked to\n          grant permissions for product name 'pandas GBQ'.\n\n        - If \"private_key\" is provided:\n\n          Service account credentials will be used to authenticate.\n\n        Parameters\n        ----------\n        dataframe : DataFrame\n            DataFrame to be written\n        destination_table : string\n            Name of table to be written, in the form 'dataset.tablename'\n        project_id : str\n            Google BigQuery Account project ID.\n        chunksize : int (default 10000)\n            Number of rows to be inserted in each chunk from the dataframe.\n        verbose : boolean (default True)\n            Show percentage complete\n        reauth : boolean (default False)\n            Force Google BigQuery to reauthenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            'fail': If table exists, do nothing.\n            'replace': If table exists, drop it, recreate it, and insert data.\n            'append': If table exists, insert data. Create if does not exist.\n        private_key : str (optional)\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. jupyter iPython notebook on remote host)\n        \"\"\"\n\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n                          chunksize=chunksize, verbose=verbose, reauth=reauth,\n                          if_exists=if_exists, private_key=private_key)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n                     coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n\n        # Make a copy of the input columns so we can modify it\n        if columns is not None:\n            columns = _ensure_index(columns)\n\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n\n            values = [first_row]\n\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = _ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                                                      columns)\n\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns,\n                                             coerce_float=coerce_float)\n\n            arr_columns = _ensure_index(arr_columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            else:\n                columns = arr_columns\n\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n\n        result_index = None\n        if index is not None:\n            if (isinstance(index, compat.string_types) or\n                    not hasattr(index, \"__iter__\")):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = _ensure_index_from_sequences(index_data,\n                                                                names=index)\n\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=True):\n        \"\"\"\n        Convert DataFrame to record array. Index will be put in the\n        'index' field of the record array if requested\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field\n        convert_datetime64 : boolean, default True\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex\n\n        Returns\n        -------\n        y : recarray\n        \"\"\"\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            else:\n                if isinstance(self.index, MultiIndex):\n                    # array of tuples to numpy cols. copy copy copy\n                    ix_vals = lmap(np.array, zip(*self.index.values))\n                else:\n                    ix_vals = [self.index.values]\n\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = (lmap(compat.text_type, index_names) +\n                     lmap(compat.text_type, self.columns))\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(\n            arrays,\n            dtype={'names': names, 'formats': formats}\n        )\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"\n        .. deprecated:: 0.23.0\n            from_items is deprecated and will be removed in a\n            future version. Use :meth:`DataFrame.from_dict(dict())`\n            instead. :meth:`DataFrame.from_dict(OrderedDict(...))` may be used\n            to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n\n        warnings.warn(\"from_items is deprecated. Please use \"\n                      \"DataFrame.from_dict(dict()) instead. \"\n                      \"DataFrame.from_dict(OrderedDict()) may be used to \"\n                      \"preserve the key order.\",\n                      FutureWarning, stacklevel=2)\n\n        keys, values = lzip(*items)\n\n        if orient == 'columns':\n            if columns is not None:\n                columns = _ensure_index(columns)\n\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(_ensure_index(keys)):\n                        raise ValueError('With non-unique item names, passed '\n                                         'columns must be identical')\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = _ensure_index(keys)\n                arrays = values\n\n            # GH 17312\n            # Provide more informative error msg when scalar values passed\n            try:\n                return cls._from_arrays(arrays, columns, None)\n\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError('The value in each (key, value) pair '\n                                     'must be an array, Series, or dict')\n\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n\n            keys = _ensure_index(keys)\n\n            # GH 17312\n            # Provide more informative error msg when scalar values passed\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError('The value in each (key, value) pair '\n                                     'must be an array, Series, or dict')\n\n        else:  # pragma: no cover\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=True,\n                 encoding=None, tupleize_cols=None,\n                 infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n\n        warnings.warn(\"from_csv is deprecated. Please use read_csv(...) \"\n                      \"instead. Note that some of the default arguments are \"\n                      \"different, so please refer to the documentation \"\n                      \"for from_csv when changing your function calls\",\n                      FutureWarning, stacklevel=2)\n\n        from pandas.io.parsers import read_table\n        return read_table(path, header=header, sep=sep,\n                          parse_dates=parse_dates, index_col=index_col,\n                          encoding=encoding, tupleize_cols=tupleize_cols,\n                          infer_datetime_format=infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame\n\n        Parameters\n        ----------\n        fill_value : float, default NaN\n        kind : {'block', 'integer'}\n\n        Returns\n        -------\n        y : SparseDataFrame\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index,\n                               columns=self.columns, default_kind=kind,\n                               default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        # only support this kind for now\n        if (not isinstance(self.index, MultiIndex) or  # pragma: no cover\n                len(self.index.levels) != 2):\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n\n        if not self.index.is_unique:\n            raise ValueError(\"Can't convert non-uniquely indexed \"\n                             \"DataFrame to Panel\")\n\n        self._consolidate_inplace()\n\n        # minor axis must be sorted\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n\n        # preserve names, if any\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n\n        # create new axes\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n\n        # create new manager\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes,\n                                              labels=[major_labels,\n                                                      minor_labels],\n                                              shape=shape,\n                                              ref_items=selfsorted.columns)\n\n        return self._constructor_expanddim(new_mgr)\n\n    def to_csv(self, path_or_buf=None, sep=\",\", na_rep='', float_format=None,\n               columns=None, header=True, index=True, index_label=None,\n               mode='w', encoding=None, compression=None, quoting=None,\n               quotechar='\"', line_terminator='\\n', chunksize=None,\n               tupleize_cols=None, date_format=None, doublequote=True,\n               escapechar=None, decimal='.'):\n        r\"\"\"Write DataFrame to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        sep : character, default ','\n            Field delimiter for the output file.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        columns : sequence, optional\n            Columns to write\n        header : boolean or list of string, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.  If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R\n        mode : str\n            Python write mode, default 'w'\n        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        compression : string, optional\n            a string representing the compression to use in the output file,\n            allowed values are 'gzip', 'bz2', 'xz',\n            only used when the first argument is a filename\n        line_terminator : string, default ``'\\n'``\n            The newline character or character sequence to use in the output\n            file\n        quoting : optional constant from csv module\n            defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric\n        quotechar : string (length 1), default '\\\"'\n            character used to quote fields\n        doublequote : boolean, default True\n            Control quoting of `quotechar` inside a field\n        escapechar : string (length 1), default None\n            character used to escape `sep` and `quotechar` when appropriate\n        chunksize : int or None\n            rows to write at a time\n        tupleize_cols : boolean, default False\n            .. deprecated:: 0.21.0\n               This argument will be removed and will always write each row\n               of the multi-index as a separate row in the CSV file.\n\n            Write MultiIndex columns as a list of tuples (if True) or in\n            the new, expanded format, where each MultiIndex column is a row\n            in the CSV (if False).\n        date_format : string, default None\n            Format string for datetime objects\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n\n        \"\"\"\n\n        if tupleize_cols is not None:\n            warnings.warn(\"The 'tupleize_cols' parameter is deprecated and \"\n                          \"will be removed in a future version\",\n                          FutureWarning, stacklevel=2)\n        else:\n            tupleize_cols = False\n\n        formatter = fmt.CSVFormatter(self, path_or_buf,\n                                     line_terminator=line_terminator, sep=sep,\n                                     encoding=encoding,\n                                     compression=compression, quoting=quoting,\n                                     na_rep=na_rep, float_format=float_format,\n                                     cols=columns, header=header, index=index,\n                                     index_label=index_label, mode=mode,\n                                     chunksize=chunksize, quotechar=quotechar,\n                                     tupleize_cols=tupleize_cols,\n                                     date_format=date_format,\n                                     doublequote=doublequote,\n                                     escapechar=escapechar, decimal=decimal)\n        formatter.save()\n\n        if path_or_buf is None:\n            return formatter.path_or_buf.getvalue()\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n                 float_format=None, columns=None, header=True, index=True,\n                 index_label=None, startrow=0, startcol=0, engine=None,\n                 merge_cells=True, encoding=None, inf_rep='inf', verbose=True,\n                 freeze_panes=None):\n\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n                                   header=header,\n                                   float_format=float_format, index=index,\n                                   index_label=index_label,\n                                   merge_cells=merge_cells,\n                                   inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=startrow,\n                        startcol=startcol, freeze_panes=freeze_panes,\n                        engine=engine)\n\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n                 encoding=\"latin-1\", byteorder=None, time_stamp=None,\n                 data_label=None, variable_labels=None):\n        \"\"\"\n        A class for writing Stata binary dta files from array-like objects\n\n        Parameters\n        ----------\n        fname : str or buffer\n            String path of file-like object\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        dataset_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        Examples\n        --------\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        Or with dates\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        from pandas.io.stata import StataWriter\n        writer = StataWriter(fname, self, convert_dates=convert_dates,\n                             encoding=encoding, byteorder=byteorder,\n                             time_stamp=time_stamp, data_label=data_label,\n                             write_index=write_index,\n                             variable_labels=variable_labels)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy',\n                   **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet reader library to use. If 'auto', then the option\n            'io.parquet.engine' is used. If 'auto', then the first\n            library to be installed is used.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        kwargs\n            Additional keyword arguments passed to the engine\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine,\n                   compression=compression, **kwargs)\n\n    @Substitution(header='Write out the column names. If a list of strings '\n                         'is given, it is assumed to be aliases for the '\n                         'column names')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n                  index=True, na_rep='NaN', formatters=None, float_format=None,\n                  sparsify=None, index_names=True, justify=None,\n                  line_width=None, max_rows=None, max_cols=None,\n                  show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        \"\"\"\n\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n                                           col_space=col_space, na_rep=na_rep,\n                                           formatters=formatters,\n                                           float_format=float_format,\n                                           sparsify=sparsify, justify=justify,\n                                           index_names=index_names,\n                                           header=header, index=index,\n                                           line_width=line_width,\n                                           max_rows=max_rows,\n                                           max_cols=max_cols,\n                                           show_dimensions=show_dimensions)\n        formatter.to_string()\n\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n                index=True, na_rep='NaN', formatters=None, float_format=None,\n                sparsify=None, index_names=True, justify=None, bold_rows=True,\n                classes=None, escape=True, max_rows=None, max_cols=None,\n                show_dimensions=False, notebook=False, decimal='.',\n                border=None, table_id=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        `to_html`-specific options:\n\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        max_cols : int, optional\n            Maximum number of columns to show before truncating. If None, show\n            all.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        \"\"\"\n\n        if (justify is not None and\n                justify not in fmt._VALID_JUSTIFY_PARAMETERS):\n            raise ValueError(\"Invalid value for justify parameter\")\n\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n                                           col_space=col_space, na_rep=na_rep,\n                                           formatters=formatters,\n                                           float_format=float_format,\n                                           sparsify=sparsify, justify=justify,\n                                           index_names=index_names,\n                                           header=header, index=index,\n                                           bold_rows=bold_rows, escape=escape,\n                                           max_rows=max_rows,\n                                           max_cols=max_cols,\n                                           show_dimensions=show_dimensions,\n                                           decimal=decimal, table_id=table_id)\n        # TODO: a generic formatter wld b in DataFrameFormatter\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n             null_counts=None):\n        \"\"\"\n        Concise summary of a DataFrame.\n\n        Parameters\n        ----------\n        verbose : {None, True, False}, optional\n            Whether to print the full summary.\n            None follows the `display.max_info_columns` setting.\n            True or False overrides the `display.max_info_columns` setting.\n        buf : writable buffer, defaults to sys.stdout\n        max_cols : int, default None\n            Determines whether full summary or short summary is printed.\n            None follows the `display.max_info_columns` setting.\n        memory_usage : boolean/string, default None\n            Specifies whether total memory usage of the DataFrame\n            elements (including index) should be displayed. None follows\n            the `display.memory_usage` setting. True or False overrides\n            the `display.memory_usage` setting. A value of 'deep' is equivalent\n            of True, with deep introspection. Memory usage is shown in\n            human-readable units (base-2 representation).\n        null_counts : boolean, default None\n            Whether to show the non-null counts\n\n            - If None, then only show if the frame is smaller than\n              max_info_rows and max_info_columns.\n            - If True, always show counts.\n            - If False, never show counts.\n\n        \"\"\"\n        from pandas.io.formats.format import _put_lines\n\n        if buf is None:  # pragma: no cover\n            buf = sys.stdout\n\n        lines = []\n\n        lines.append(str(type(self)))\n        lines.append(self.index.summary())\n\n        if len(self.columns) == 0:\n            lines.append('Empty %s' % type(self).__name__)\n            _put_lines(buf, lines)\n            return\n\n        cols = self.columns\n\n        # hack\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns',\n                                  len(self.columns) + 1)\n\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n\n        if null_counts is None:\n            show_counts = ((len(self.columns) <= max_cols) and\n                           (len(self) < max_rows))\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' %\n                         len(self.columns))\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n\n            tmpl = \"%s%s\"\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):  # pragma: no cover\n                    raise AssertionError('Columns must equal counts (%d != %d)'\n                                         % (len(cols), len(counts)))\n                tmpl = \"%s non-null %s\"\n\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n\n                count = \"\"\n                if show_counts:\n                    count = counts.iloc[i]\n\n                lines.append(_put_str(col, space) + tmpl % (count, dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns.summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            # returns size in human readable format\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return \"%3.1f%s %s\" % (num, size_qualifier, x)\n                num /= 1024.0\n            return \"%3.1f%s %s\" % (num, size_qualifier, 'PB')\n\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:  # specifically set to False, not nesc None\n            _non_verbose_repr()\n        else:\n            if exceeds_info_cols:\n                _non_verbose_repr()\n            else:\n                _verbose_repr()\n\n        counts = self.get_dtype_counts()\n        dtypes = ['%s(%d)' % k for k in sorted(compat.iteritems(counts))]\n        lines.append('dtypes: %s' % ', '.join(dtypes))\n\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            # append memory usage of df to display\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                # size_qualifier is just a best effort; not guaranteed to catch\n                # all cases (e.g., it misses categorical data even with object\n                # categories)\n                deep = False\n                if ('object' in counts or\n                        self.index._is_memory_usage_qualified()):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append(\"memory usage: %s\\n\" %\n                         _sizeof_fmt(mem_usage, size_qualifier))\n        _put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"Memory usage of DataFrame columns.\n\n        Parameters\n        ----------\n        index : bool\n            Specifies whether to include memory usage of DataFrame's\n            index in returned Series. If `index=True` (default is False)\n            the first index of the Series is `Index`.\n        deep : bool\n            Introspect the data deeply, interrogate\n            `object` dtypes for system-level memory consumption\n\n        Returns\n        -------\n        sizes : Series\n            A series with column names as index and memory usage of\n            columns with units of bytes.\n\n        Notes\n        -----\n        Memory usage does not include memory consumed by elements that\n        are not components of the array if deep=False\n\n        See Also\n        --------\n        numpy.ndarray.nbytes\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep)\n                         for col, c in self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep),\n                            index=['Index']).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"Transpose index and columns\"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n\n    T = property(transpose)\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    # legacy pickle formats\n    def _unpickle_frame_compat(self, state):  # pragma: no cover\n        if len(state) == 2:  # pragma: no cover\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):  # pragma: no cover\n        # old unpickling\n        (vals, idx, cols), object_state = state\n\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n                       copy=False)\n\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index,\n                                columns=com._unpickle_array(ocols), copy=False)\n\n            dm = dm.join(objects)\n\n        self._data = dm._data\n\n    # ----------------------------------------------------------------------\n    # Getting and setting elements\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n\n        warnings.warn(\"get_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com._maybe_box_datetimelike(series._values[index])\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n\n            # we cannot handle direct indexing\n            # use positional\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\"set_value is deprecated and will be removed \"\n                      \"in a future release. Please use \"\n                      \".at[] or .iat[] accessors instead\", FutureWarning,\n                      stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n\n            # set using a non-recursive method & reset the cache\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n\n        # irow\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    # a location index by definition\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n\n                    # if we are a copy, mark as such\n                    copy = (isinstance(new_values, np.ndarray) and\n                            new_values.base is None)\n                    result = self._constructor_sliced(new_values,\n                                                      index=self.columns,\n                                                      name=self.index[i],\n                                                      dtype=new_values.dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n\n        # icol\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n\n            label = self.columns[i]\n            if isinstance(i, slice):\n                # need to return view\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1, convert=True)\n\n                index_len = len(self.index)\n\n                # if the values returned are not the same length\n                # as the index (iow a not found value), iget returns\n                # a 0-len ndarray. This is effectively catching\n                # a numpy error (as numpy should really raise)\n                values = self._data.iget(i)\n\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._constructor_sliced._from_array(\n                    values, index=self.index, name=label, fastpath=True)\n\n                # this is a cached value, mark it so\n                result._set_as_cached(label, self)\n\n                return result\n\n    def __getitem__(self, key):\n        key = com._apply_if_callable(key, self)\n\n        # shortcut if we are an actual column\n        is_mi_columns = isinstance(self.columns, MultiIndex)\n        try:\n            if key in self.columns and not is_mi_columns:\n                return self._getitem_column(key)\n        except:\n            pass\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._getitem_slice(indexer)\n\n        if isinstance(key, (Series, np.ndarray, Index, list)):\n            # either boolean or fancy integer index\n            return self._getitem_array(key)\n        elif isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        elif is_mi_columns:\n            return self._getitem_multilevel(key)\n        else:\n            return self._getitem_column(key)\n\n    def _getitem_column(self, key):\n        \"\"\" return the actual column \"\"\"\n\n        # get column\n        if self.columns.is_unique:\n            return self._get_item_cache(key)\n\n        # duplicate columns & possible reduce dimensionality\n        result = self._constructor(self._data.get(key))\n        if result.columns.is_unique:\n            result = result[key]\n\n        return result\n\n    def _getitem_slice(self, key):\n        return self._slice(key, axis=0)\n\n    def _getitem_array(self, key):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            # warning here just in case -- previously __setitem__ was\n            # reindexing but __getitem__ was not; it seems more reasonable to\n            # go with the __setitem__ behavior since that is more consistent\n            # with all other indexing behavior\n            if isinstance(key, Series) and not key.index.equals(self.index):\n                warnings.warn(\"Boolean Series key will be reindexed to match \"\n                              \"DataFrame index.\", UserWarning, stacklevel=3)\n            elif len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d.' %\n                                 (len(key), len(self.index)))\n            # check_bool_indexer will throw exception if Series key cannot\n            # be reindexed to match DataFrame rows\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            return self._take(indexer, axis=0, convert=False)\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            return self._take(indexer, axis=1, convert=True)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                                           columns=result_columns)\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result,\n                                                          index=self.index,\n                                                          name=key)\n\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> from numpy.random import randn\n        >>> from pandas import DataFrame\n        >>> df = pd.DataFrame(randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"Evaluate an expression in the context of the calling DataFrame\n        instance.\n\n        Parameters\n        ----------\n        expr : string\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ret : ndarray, scalar, or pandas object\n\n        See Also\n        --------\n        pandas.DataFrame.query\n        pandas.DataFrame.assign\n        pandas.eval\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> from numpy.random import randn\n        >>> from pandas import DataFrame\n        >>> df = pd.DataFrame(randn(10, 2), columns=list('ab'))\n        >>> df.eval('a + b')\n        >>> df.eval('c = a + b')\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"Return a subset of a DataFrame including/excluding columns based on\n        their ``dtype``.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': np.random.randn(6).astype('f4'),\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0  0.3962   True  1.0\n        1  0.1459  False  2.0\n        2  0.2623   True  1.0\n        3  0.0764  False  2.0\n        4 -0.9703   True  1.0\n        5 -1.2094  False  2.0\n        >>> df.select_dtypes(include='bool')\n           c\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n        >>> df.select_dtypes(exclude=['floating'])\n               b\n        0   True\n        1  False\n        2   True\n        3  False\n        4   True\n        5  False\n        \"\"\"\n\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = tuple(map(frozenset, (include, exclude)))\n\n        if not any(selection):\n            raise ValueError('at least one of include or exclude must be '\n                             'nonempty')\n\n        # convert the myriad valid dtypes object to a single representation\n        include, exclude = map(\n            lambda x: frozenset(map(_get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on %s' %\n                             (include & exclude))\n\n        # empty include/exclude -> defaults to True\n        # three cases (we've already raised if both are empty)\n        # case 1: empty include, nonempty exclude\n        # we have True, True, ... True for include, same for exclude\n        # in the loop below we get the excluded\n        # and when we call '&' below we get only the excluded\n        # case 2: nonempty include, empty exclude\n        # same as case 1, but with include\n        # case 3: both nonempty\n        # the \"union\" of the logic of case 1 and case 2:\n        # we get the included and excluded, and return their logical and\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(column, dtype):\n            return column, functools.partial(issubclass, dtype.type)\n\n        for column, f in itertools.starmap(is_dtype_instance_mapper,\n                                           self.dtypes.iteritems()):\n            if include:  # checks for the case of empty include or exclude\n                include_these[column] = any(map(f, include))\n            if exclude:\n                exclude_these[column] = not any(map(f, exclude))\n\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com._get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        return self._constructor_sliced._from_array(values, index=self.index,\n                                                    name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com._apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' %\n                                 (len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        else:\n            if isinstance(value, DataFrame):\n                if len(value.columns) != len(key):\n                    raise ValueError('Columns must be same length as key')\n                for k1, k2 in zip(key, value.columns):\n                    self[k1] = value[k2]\n            else:\n                indexer = self.loc._convert_to_indexer(key, axis=1)\n                self._check_setitem_copy()\n                self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        # support boolean setting with DataFrame input, e.g.\n        # df[df > df2] = 0\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError(\n                    'Array conditional must be same shape as self'\n                )\n            key = self._constructor(key, **self._construct_axes_dict())\n\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only'\n            )\n\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError('Cannot set a frame with no defined index '\n                                 'and a value that cannot be converted to a '\n                                 'Series')\n\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                                                 fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value,\n                          allow_duplicates=allow_duplicates)\n\n    def assign(self, **kwargs):\n        r\"\"\"\n        Assign new columns to a DataFrame, returning a new object\n        (a copy) with all the original columns in addition to the new ones.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            keywords are the column names. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\*\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionmodified :: 0.23.0\n\n            Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the keyword arguments depend on each other\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3]})\n\n        >>> df.assign(B=df.A, C=lambda x:x['A']+ x['B'])\n            A  B  C\n         0  1  1  2\n         1  2  2  4\n         2  3  3  6\n        \"\"\"\n        data = self.copy()\n\n        # >= 3.6 preserve order of kwargs\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com._apply_if_callable(v, data)\n        else:\n            # <= 3.5: do all calculations first...\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com._apply_if_callable(v, data)\n\n            # <= 3.5 and earlier\n            results = sorted(results.items())\n            # ... and then assign\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n\n                    # duplicate axis\n                    if not value.index.is_unique:\n                        raise e\n\n                    # other\n                    raise TypeError('incompatible index of inserted column '\n                                    'with frame index')\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, Categorical):\n            value = value.copy()\n\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n\n            # turn me into an ndarray\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com._asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # upcast the scalar\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, value.dtype)\n\n        # return internal types directly\n        if is_extension_type(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if (not self.columns.is_unique or\n                    isinstance(self.columns, MultiIndex)):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                                  name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n\n        return result\n\n    # ----------------------------------------------------------------------\n    # Reindexing and alignment\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n                      copy):\n        frame = self\n\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                                           fill_value, limit, tolerance)\n\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                                         fill_value, limit, tolerance)\n\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.nan,\n                       limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n                                                level=level, limit=limit,\n                                                tolerance=tolerance)\n        return self._reindex_with_indexers({0: [new_index, indexer]},\n                                           copy=copy, fill_value=fill_value,\n                                           allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level,\n                         fill_value=np.nan, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=method,\n                                                    level=level, limit=limit,\n                                                    tolerance=tolerance)\n        return self._reindex_with_indexers({1: [new_columns, indexer]},\n                                           copy=copy, fill_value=fill_value,\n                                           allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                                                  fill_value=fill_value)\n            return self._constructor(new_values, index=new_index,\n                                     columns=new_columns)\n        else:\n            return self._reindex_with_indexers({0: [new_index, row_indexer],\n                                                1: [new_columns, col_indexer]},\n                                               copy=copy,\n                                               fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n              fill_value=None, method=None, limit=None, fill_axis=0,\n              broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n                                            level=level, copy=copy,\n                                            fill_value=fill_value,\n                                            method=method, limit=limit,\n                                            fill_axis=fill_axis,\n                                            broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None),\n                                             ('copy', True),\n                                             ('level', None),\n                                             ('fill_value', np.nan),\n                                             ('limit', None),\n                                             ('tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels',\n                                        'reindex')\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=True,\n                     limit=None, fill_value=np.nan):\n        return super(DataFrame,\n                     self).reindex_axis(labels=labels, axis=axis,\n                                        method=method, level=level, copy=copy,\n                                        limit=limit, fill_value=fill_value)\n\n    @rewrite_axis_style_signature('mapper', [('copy', True),\n                                             ('inplace', False),\n                                             ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Appender(_shared_docs['fillna'] % _shared_doc_kwargs)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n               limit=None, downcast=None, **kwargs):\n        return super(DataFrame,\n                     self).fillna(value=value, method=method, axis=axis,\n                                  inplace=inplace, limit=limit,\n                                  downcast=downcast, **kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=None,\n                regex=False, method='pad', axis=None):\n        return super(DataFrame, self).replace(to_replace=to_replace,\n                                              value=value, inplace=inplace,\n                                              limit=limit, regex=regex,\n                                              method=method, axis=axis)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n                                            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n                  verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                # append all but the last column so we don't have to modify\n                # the end of this loop\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n\n        index = _ensure_index_from_sequences(arrays, names)\n\n        if verify_integrity and not index.is_unique:\n            duplicates = index.get_duplicates()\n            raise ValueError('Index has duplicate keys: %s' % duplicates)\n\n        for c in to_remove:\n            del frame[c]\n\n        # clear up memory usage\n        index._cleanup()\n\n        frame.index = index\n\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=0,\n                    col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            if isinstance(index, PeriodIndex):\n                values = index.astype(object).values\n            elif isinstance(index, DatetimeIndex) and index.tz is not None:\n                values = index\n            else:\n                values = index.values\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(\n                            values, mask, np.nan)\n            return values\n\n        new_index = com._default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if isinstance(self.index, MultiIndex):\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [n if n is not None else ('level_%d' % i)\n                         for (i, n) in enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = ([default] if self.index.name is None\n                         else [self.index.name])\n                to_insert = ((self.index, None),)\n\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = (list(name) if isinstance(name, tuple)\n                                else [name])\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\"col_fill=None is incompatible \"\n                                             \"with incomplete column name \"\n                                             \"{}\".format(name))\n                        col_fill = col_name[0]\n\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                # to ndarray and maybe infer different dtype\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    # ----------------------------------------------------------------------\n    # Reindex-based selection methods\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None,\n               inplace=False):\n        \"\"\"\n        Return object with labels on given axis omitted where alternately any\n        or all of the data are missing\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, or tuple/list thereof\n            Pass tuple or list to drop on multiple axes\n        how : {'any', 'all'}\n            * any : if any NA values are present, drop that label\n            * all : if all values are NA, drop that label\n        thresh : int, default None\n            int value : require that many non-NA values\n        subset : array-like\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include\n        inplace : boolean, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        dropped : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0], [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5]],\n        ...                   columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n\n        Drop the columns where all elements are nan:\n\n        >>> df.dropna(axis=1, how='all')\n             A    B  D\n        0  NaN  2.0  0\n        1  3.0  4.0  1\n        2  NaN  NaN  5\n\n        Drop the columns where any of the elements is nan\n\n        >>> df.dropna(axis=1, how='any')\n           D\n        0  0\n        1  1\n        2  5\n\n        Drop the rows where all of the elements are nan\n        (there is no row to drop, so df stays the same):\n\n        >>> df.dropna(axis=0, how='all')\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n\n        Keep only the rows with at least 2 non-na values:\n\n        >>> df.dropna(thresh=2)\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=subset,\n                                       axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n\n            count = agg_obj.count(axis=agg_axis)\n\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            else:\n                if how is not None:\n                    raise ValueError('invalid how option: %s' % how)\n                else:\n                    raise TypeError('must specify how or thresh')\n\n            result = self._take(mask.nonzero()[0], axis=axis, convert=False)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n\n        if subset is None:\n            subset = self.columns\n        elif (not np.iterable(subset) or\n              isinstance(subset, compat.string_types) or\n              isinstance(subset, tuple) and subset in self.columns):\n            subset = subset,\n\n        vals = (col.values for name, col in self.iteritems()\n                if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    # ----------------------------------------------------------------------\n    # Sorting\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False,\n                    kind='quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2  # Number of stack levels from df.sort_values\n\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError('Length of ascending (%d) != length of by (%d)' %\n                             (len(ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                                                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending,\n                                      na_position=na_position)\n            indexer = _ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis,\n                                                stacklevel=stacklevel)\n\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        new_data = self._data.take(indexer,\n                                   axis=self._get_block_manager_axis(axis),\n                                   verify=False)\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n                   kind='quicksort', na_position='last', sort_remaining=True,\n                   by=None):\n\n        # TODO: this can be combined with Series.sort_index impl as\n        # almost identical\n\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        # 10726\n        if by is not None:\n            warnings.warn(\"by argument to sort_index is deprecated, \"\n                          \"please use .sort_values(by=...)\",\n                          FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError(\"unable to simultaneously sort by and level\")\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                                    inplace=inplace)\n\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n\n        if level:\n\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                                                 sort_remaining=sort_remaining)\n\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            # make sure that the axis is lexsorted to start\n            # if not we need to reconstruct to get the correct indexer\n            labels = labels._sort_levels_monotonic()\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                                      orders=ascending,\n                                      na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if ((ascending and labels.is_monotonic_increasing) or\n                    (not ascending and labels.is_monotonic_decreasing)):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                               na_position=na_position)\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer,\n                                   axis=baxis,\n                                   verify=False)\n\n        # reconstruct axis if needed\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n                  sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn(\"sortlevel is deprecated, use sort_index(level= ...)\",\n                      FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n                               inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` largest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df.nlargest(3, 'a')\n            a  b   c\n        3  11  c   3\n        1  10  b   2\n        2   8  d NaN\n        \"\"\"\n        return algorithms.SelectNFrame(self,\n                                       n=n,\n                                       keep=keep,\n                                       columns=columns).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df.nsmallest(3, 'a')\n           a  b   c\n        4 -1  e   4\n        0  1  a   1\n        2  8  d NaN\n        \"\"\"\n        return algorithms.SelectNFrame(self,\n                                       n=n,\n                                       keep=keep,\n                                       columns=columns).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis),\n                          MultiIndex):  # pragma: no cover\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n\n        result = self.copy()\n\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    # ----------------------------------------------------------------------\n    # Arithmetic / combination related\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            if fill_value is not None:\n                left_mask = isna(left)\n                right_mask = isna(right)\n                left = left.copy()\n                right = right.copy()\n\n                # one but not both\n                mask = left_mask ^ right_mask\n                left[left_mask & mask] = fill_value\n                right[right_mask & mask] = fill_value\n\n            return func(left, right)\n\n        if this._is_mixed_type or other._is_mixed_type:\n\n            # unique\n            if this.columns.is_unique:\n\n                def f(col):\n                    r = _arith_op(this[col].values, other[col].values)\n                    return self._constructor_sliced(r, index=new_index,\n                                                    dtype=r.dtype)\n\n                result = {col: f(col) for col in this}\n\n            # non-unique\n            else:\n\n                def f(i):\n                    r = _arith_op(this.iloc[:, i].values,\n                                  other.iloc[:, i].values)\n                    return self._constructor_sliced(r, index=new_index,\n                                                    dtype=r.dtype)\n\n                result = {i: f(i) for i, col in enumerate(this.columns)}\n                result = self._constructor(result, index=new_index, copy=False)\n                result.columns = new_columns\n                return result\n\n        else:\n            result = _arith_op(this.values, other.values)\n\n        return self._constructor(result, index=new_index, columns=new_columns,\n                                 copy=False)\n\n    def _combine_series(self, other, func, fill_value=None, axis=None,\n                        level=None, try_cast=True):\n        if fill_value is not None:\n            raise NotImplementedError(\"fill_value {fill} not supported.\"\n                                      .format(fill=fill_value))\n\n        if axis is not None:\n            axis = self._get_axis_name(axis)\n            if axis == 'index':\n                return self._combine_match_index(other, func, level=level)\n            else:\n                return self._combine_match_columns(other, func, level=level,\n                                                   try_cast=try_cast)\n        else:\n            if not len(other):\n                return self * np.nan\n\n            if not len(self):\n                # Ambiguous case, use _series so works with DataFrame\n                return self._constructor(data=self._series, index=self.index,\n                                         columns=self.columns)\n\n            # default axis is columns\n            return self._combine_match_columns(other, func, level=level,\n                                               try_cast=try_cast)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n                                 copy=False)\n        return self._constructor(func(left.values.T, right.values).T,\n                                 index=left.index, columns=self.columns,\n                                 copy=False)\n\n    def _combine_match_columns(self, other, func, level=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n                                 copy=False)\n\n        new_data = left._data.eval(func=func, other=right,\n                                   axes=[left.columns, self.index],\n                                   try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        new_data = self._data.eval(func=func, other=other,\n                                   errors=errors,\n                                   try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame_evaluate(self, other, func, str_rep, try_cast=True):\n\n        import pandas.core.computation.expressions as expressions\n        # unique\n        if self.columns.is_unique:\n\n            def _compare(a, b):\n                return {col: func(a[col], b[col]) for col in a.columns}\n\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            return self._constructor(data=new_data, index=self.index,\n                                     columns=self.columns, copy=False)\n        # non-unique\n        else:\n\n            def _compare(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[:, i])\n                        for i, col in enumerate(a.columns)}\n\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            result = self._constructor(data=new_data, index=self.index,\n                                       copy=False)\n            result.columns = self.columns\n            return result\n\n    def _compare_frame(self, other, func, str_rep, try_cast=True):\n        if not self._indexed_same(other):\n            raise ValueError('Can only compare identically-labeled '\n                             'DataFrame objects')\n        return self._compare_frame_evaluate(other, func, str_rep,\n                                            try_cast=try_cast)\n\n    def _flex_compare_frame(self, other, func, str_rep, level, try_cast=True):\n        if not self._indexed_same(other):\n            self, other = self.align(other, 'outer', level=level, copy=False)\n        return self._compare_frame_evaluate(other, func, str_rep,\n                                            try_cast=try_cast)\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Add two DataFrame objects and do not propagate NaN values, so if for a\n        (column, time) one frame is missing a value, it will default to the\n        other frame's value (which might be NaN as well)\n\n        Parameters\n        ----------\n        other : DataFrame\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar\n        fill_value : scalar value\n        overwrite : boolean, default True\n            If True then overwrite values for common keys in the calling frame\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        >>> df1 = DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, lambda s1, s2: s1 if s1.sum() < s2.sum() else s2)\n           A  B\n        0  0  3\n        1  0  3\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)  # save for compare\n\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n\n        # sorts if possible\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n\n            # don't overwrite columns unecessarily\n            # DO propagate if this column is not in the intersection\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n\n            # if we have different dtypes, possibly promote\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n\n            # see if we need to be represented as i8 (datetimelike)\n            # try to keep us at this dtype\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n\n            if do_fill:\n                arr = _ensure_float(arr)\n                arr[this_mask & other_mask] = np.nan\n\n            # try to downcast back to the original dtype\n            if needs_i8_conversion_i:\n                # ToDo: This conversion should be handled in\n                # _maybe_cast_to_datetime but the change affects lot...\n                if is_datetime64tz_dtype(new_dtype):\n                    arr = DatetimeIndex._simple_new(arr, tz=new_dtype.tz)\n                else:\n                    arr = maybe_cast_to_datetime(arr, new_dtype)\n            else:\n                arr = maybe_downcast_to_dtype(arr, this_dtype)\n\n            result[col] = arr\n\n        # convert_objects just in case\n        return self._constructor(result, index=new_index,\n                                 columns=new_columns)._convert(datetime=True,\n                                                               copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine two DataFrame objects and default to non-null values in frame\n        calling the method. Result index columns will be the union of the\n        respective indexes and columns\n\n        Parameters\n        ----------\n        other : DataFrame\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n        df1's values prioritized, use values from df2 to fill holes:\n\n        >>> df1 = pd.DataFrame([[1, np.nan]])\n        >>> df2 = pd.DataFrame([[3, 4]])\n        >>> df1.combine_first(df2)\n           0    1\n        0  1  4.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n\n            return expressions.where(mask, y_values, x_values)\n\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n               raise_conflict=False):\n        \"\"\"\n        Modify DataFrame in place using non-NA values from passed\n        DataFrame. Aligns on indices\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n        join : {'left'}, default 'left'\n        overwrite : boolean, default True\n            If True then overwrite values for common keys in the calling frame\n        filter_func : callable(1d-array) -> 1d-array<boolean>, default None\n            Can choose to replace values other than NA. Return True for values\n            that should be updated\n        raise_conflict : boolean\n            If True, will raise an error if the DataFrame and other both\n            contain data in the same place.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If ``other`` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        # TODO: Support other joins\n        if join != 'left':  # pragma: no cover\n            raise NotImplementedError(\"Only left join is supported\")\n\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n\n        other = other.reindex_like(self)\n\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError(\"Data overlaps.\")\n\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n\n            # don't overwrite columns unecessarily\n            if mask.all():\n                continue\n\n            self[col] = expressions.where(mask, this, that)\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    def _get_valid_indices(self):\n        is_valid = self.count(1) > 0\n        return self.index[is_valid]\n\n    @Appender(_shared_docs['valid_index'] % {\n        'position': 'first', 'klass': 'DataFrame'})\n    def first_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        valid_indices = self._get_valid_indices()\n        return valid_indices[0] if len(valid_indices) else None\n\n    @Appender(_shared_docs['valid_index'] % {\n        'position': 'last', 'klass': 'DataFrame'})\n    def last_valid_index(self):\n        if len(self) == 0:\n            return None\n\n        valid_indices = self._get_valid_indices()\n        return valid_indices[-1] if len(valid_indices) else None\n\n    # ----------------------------------------------------------------------\n    # Data reshaping\n\n    def pivot(self, index=None, columns=None, values=None):\n        \"\"\"\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from index / columns to form axes of the resulting\n        DataFrame.\n\n        Parameters\n        ----------\n        index : string or object, optional\n            Column name to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column name to use to make new frame's columns\n        values : string or object, optional\n            Column name to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns\n\n        Returns\n        -------\n        pivoted : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair\n        DataFrame.unstack : pivot based on the index values instead of a\n            column\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'foo': ['one','one','one','two','two','two'],\n                               'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                               'baz': [1, 2, 3, 4, 5, 6]})\n        >>> df\n            foo   bar  baz\n        0   one   A    1\n        1   one   B    2\n        2   one   C    3\n        3   two   A    4\n        4   two   B    5\n        5   two   C    6\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n             A   B   C\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n             A   B   C\n        one  1   2   3\n        two  4   5   6\n\n\n        \"\"\"\n        from pandas.core.reshape.reshape import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None,\n                    aggfunc='mean', fill_value=None, margins=False,\n                    dropna=True, margins_name='All'):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=columns,\n                           aggfunc=aggfunc, fill_value=fill_value,\n                           margins=margins, dropna=dropna,\n                           margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Pivot a level of the (possibly hierarchical) column labels, returning a\n        DataFrame (or Series in the case of an object with a single level of\n        column labels) having a hierarchical index with a new inner-most level\n        of row labels.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default last level\n            Level(s) to stack, can pass level name\n        dropna : boolean, default True\n            Whether to drop rows in the resulting Frame/Series with no valid\n            values\n\n        Examples\n        ----------\n        >>> s\n             a   b\n        one  1.  2.\n        two  3.  4.\n\n        >>> s.stack()\n        one a    1\n            b    2\n        two a    3\n            b    4\n\n        Returns\n        -------\n        stacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n\n    _shared_docs['melt'] = (\"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\")\n\n    @Appender(_shared_docs['melt'] %\n              dict(caller='df.melt(',\n                   versionadded='.. versionadded:: 0.20.0\\n',\n                   other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None,\n             value_name='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars,\n                    var_name=var_name, value_name=value_name,\n                    col_level=col_level)\n\n    # ----------------------------------------------------------------------\n    # Time series-related\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        1st discrete difference of object\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming difference\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1\n\n        Returns\n        -------\n        diffed : DataFrame\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    # ----------------------------------------------------------------------\n    # Function application\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n\n        # TODO: _shallow_copy(subset)?\n        return self[key]\n\n    _agg_doc = dedent(\"\"\"\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    >>> df.iloc[3:7] = np.nan\n\n    Aggregate these functions across all columns\n\n    >>> df.agg(['sum', 'min'])\n                A         B         C\n    sum -0.182253 -0.614014 -2.909534\n    min -1.916563 -1.460076 -1.568297\n\n    Different aggregations per column\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n                A         B\n    max       NaN  1.514318\n    min -1.916563 -1.460076\n    sum -0.182253       NaN\n\n    See also\n    --------\n    pandas.DataFrame.apply\n    pandas.DataFrame.transform\n    pandas.DataFrame.groupby.aggregate\n    pandas.DataFrame.resample.aggregate\n    pandas.DataFrame.rolling.aggregate\n\n    \"\"\")\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(\n        versionadded='.. versionadded:: 0.20.0',\n        **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n\n        # TODO: flipped axis\n        result = None\n        if axis == 0:\n            try:\n                result, how = self._aggregate(func, axis=0, *args, **kwargs)\n            except TypeError:\n                pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    agg = aggregate\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n              result_type=None, args=(), **kwds):\n        \"\"\"Applies function along an axis of the DataFrame.\n\n        Objects passed to functions are Series objects having index\n        either the DataFrame's index (axis=0) or the columns (axis=1).\n        Final return type depends on the return type of the applied function,\n        or on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column/row\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index': apply function to each column\n            * 1 or 'columns': apply function to each row\n        broadcast : boolean, optional\n            For aggregation functions, return object of same size with values\n            propagated\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : boolean, default False\n            If False, convert each row or column into a Series. If raw=True the\n            passed function will receive ndarray objects instead. If you are\n            just applying a NumPy reduction function this will achieve much\n            better performance\n        reduce : boolean or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            apply will use reduce to determine whether the result should be a\n            Series or a DataFrame. If reduce is None (the default), apply's\n            return value will be guessed by calling func an empty Series (note:\n            while guessing, exceptions raised by func will be ignored). If\n            reduce is True a Series will always be returned, and if False a\n            DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='reduce'.\n\n        result_type : {'expand', 'reduce', 'broadcast, None}\n            These only act when axis=1 {columns}:\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : return a Series if possible rather than expanding\n              list-like results. This is the opposite to 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the frame, the original index & columns will be retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to function in addition to the\n            array/series\n        Additional keyword arguments will be passed as keywords to the function\n\n        Notes\n        -----\n        In the current implementation apply calls func twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if func has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        Examples\n        --------\n\n        We use this DataFrame to illustrate\n\n        >>> df = pd.DataFrame(np.tile(np.arange(3), 6).reshape(6, -1) + 1,\n        ...                   columns=['A', 'B', 'C'])\n        >>> df\n           A  B  C\n        0  1  2  3\n        1  1  2  3\n        2  1  2  3\n        3  1  2  3\n        4  1  2  3\n        5  1  2  3\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A         B         C\n        0  1.0  1.414214  1.732051\n        1  1.0  1.414214  1.732051\n        2  1.0  1.414214  1.732051\n        3  1.0  1.414214  1.732051\n        4  1.0  1.414214  1.732051\n        5  1.0  1.414214  1.732051\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A     6\n        B    12\n        C    18\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    6\n        1    6\n        2    6\n        3    6\n        4    6\n        5    6\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        3    [1, 2]\n        4    [1, 2]\n        5    [1, 2]\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n        3  1  2\n        4  1  2\n        5  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n        3    1    2\n        4    1    2\n        5    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2, 3], axis=1, result_type='broadcast')\n           A  B  C\n        0  1  2  3\n        1  1  2  3\n        2  1  2  3\n        3  1  2  3\n        4  1  2  3\n        5  1  2  3\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transformating type operations\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self,\n                         func=func,\n                         axis=axis,\n                         broadcast=broadcast,\n                         raw=raw,\n                         reduce=reduce,\n                         result_type=result_type,\n                         args=args,\n                         kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a DataFrame that is intended to operate\n        elementwise, i.e. like doing map(func, series) for each series in the\n        DataFrame\n\n        Parameters\n        ----------\n        func : function\n            Python function, returns a single value from a single value\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.random.randn(3, 3))\n        >>> df\n            0         1          2\n        0  -0.029638  1.081563   1.280300\n        1   0.647747  0.831136  -1.549481\n        2   0.513416 -0.884417   0.195343\n        >>> df = df.applymap(lambda x: '%.2f' % x)\n        >>> df\n            0         1          2\n        0  -0.03      1.08       1.28\n        1   0.65      0.83      -1.55\n        2   0.51     -0.88       0.20\n\n        Returns\n        -------\n        applied : DataFrame\n\n        See also\n        --------\n        DataFrame.apply : For operations on rows/columns\n\n        \"\"\"\n\n        # if we have a dtype == 'M8[ns]', provide boxed values\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n\n        return self.apply(infer)\n\n    # ----------------------------------------------------------------------\n    # Merging / joining methods\n\n    def append(self, other, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Append rows of `other` to the end of this frame, returning a new\n        object. Columns not in this frame are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError('Can only append a Series if ignore_index=True'\n                                ' or if the Series has a name')\n\n            if other.name is None:\n                index = None\n            else:\n                # other must have the same index name as self, otherwise\n                # index name will be reset\n                index = Index([other.name], name=self.index.name)\n\n            combined_columns = self.columns.tolist() + self.columns.union(\n                other.index).difference(self.columns).tolist()\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))),\n                              index=index,\n                              columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n                      verify_integrity=verify_integrity)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='',\n             sort=False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        # For SparseDataFrame's benefit\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n                                 rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='',\n                     sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how,\n                         left_index=on is None, right_index=True,\n                         suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError('Joining multiple DataFrames only supported'\n                                 ' for joining on index')\n\n            # join indexes only using concat\n            if how == 'left':\n                how = 'outer'\n                join_axes = [self.index]\n            else:\n                join_axes = None\n\n            frames = [self] + list(other)\n\n            can_concat = all(df.index.is_unique for df in frames)\n\n            if can_concat:\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                              verify_integrity=True)\n\n            joined = frames[0]\n\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                               right_index=True)\n\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=None,\n              left_index=False, right_index=False, sort=False,\n              suffixes=('_x', '_y'), copy=True, indicator=False,\n              validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on,\n                     right_on=right_on, left_index=left_index,\n                     right_index=right_index, sort=sort, suffixes=suffixes,\n                     copy=copy, indicator=indicator, validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n\n        nv.validate_round(args, kwargs)\n\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError(\"Index of decimals must be unique\")\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            # Dispatch to Series.round\n            new_cols = [_series_round(v, decimals)\n                        for _, v in self.iteritems()]\n        else:\n            raise TypeError(\"decimals must be an integer, a dict-like or a \"\n                            \"Series\")\n\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1),\n                                     index=self.index,\n                                     columns=self.columns)\n        else:\n            return self\n\n    # ----------------------------------------------------------------------\n    # Statistical methods, etc.\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n\n        if method == 'pearson':\n            correl = libalgos.nancorr(_ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(_ensure_float64(mat),\n                                               minp=min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = _ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        y : DataFrame\n\n        Notes\n        -----\n        `y` contains the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1 (unbiased estimator).\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(_ensure_float64(mat), cov=True,\n                                       minp=min_periods)\n\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n\n        other = other._get_numeric_data()\n\n        left, right = this.align(other, join='inner', copy=False)\n\n        # mask missing values\n        left = left + right * 0\n        right = right + left * 0\n\n        if axis == 1:\n            left = left.T\n            right = right.T\n\n        # demeaned data\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n\n        correl = num / dom\n\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n\n        return correl\n\n    # ----------------------------------------------------------------------\n    # ndarray-like stats methods\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Return Series with number of non-NA/null observations over requested\n        axis. Works with non-floating point data as well (detects NaN and None)\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a DataFrame\n        numeric_only : boolean, default False\n            Include only float, int, boolean data\n\n        Returns\n        -------\n        count : Series (or DataFrame if level specified)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis,\n                                     numeric_only=numeric_only)\n\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        # GH #423\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        else:\n            if frame._is_mixed_type:\n                result = notna(frame).sum(axis=axis)\n            else:\n                counts = notna(frame.values).sum(axis=axis)\n                result = Series(counts, index=frame._get_agg_axis(axis))\n\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError(\"Can only count levels on hierarchical %s.\" %\n                            self._get_axis_name(axis))\n\n        if frame._is_mixed_type:\n            # Since we have mixed types, calling notna(frame.values) might\n            # upcast everything to object\n            mask = notna(frame).values\n        else:\n            # But use the speedup when we have homogeneous dtypes\n            mask = notna(frame.values)\n\n        if axis == 1:\n            # We're transposing the mask rather than frame to avoid potential\n            # upcasts to object, which induces a ~20x slowdown\n            mask = mask.T\n\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n\n        level_index = count_axis.levels[level]\n        labels = _ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n\n        if axis == 1:\n            # Undo our earlier transpose\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n                filter_type=None, **kwds):\n        axis = self._get_axis_number(axis)\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        labels = self._get_agg_axis(axis)\n\n        # exclude timedelta/datetime unless we are uniform types\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n            except Exception as e:\n\n                # try by-column first\n                if filter_type is None and axis == 0:\n                    try:\n\n                        # this can end up with a non-reduction\n                        # but not always. if the types are mixed\n                        # with datelike then need to make sure a series\n\n                        # we only end up here if we have not specified\n                        # numeric_only and yet we have tried a\n                        # column-by-column reduction, where we have mixed type.\n                        # So let's just do what we can\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self,\n                                          func=f,\n                                          result_type='expand',\n                                          ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:  # pragma: no cover\n                    e = NotImplementedError(\"Handling exception with filter_\"\n                                            \"type %s not implemented.\" %\n                                            filter_type)\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:  # pragma: no cover\n                    msg = (\"Generating numeric_only data with filter_type %s\"\n                           \"not supported.\" % filter_type)\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        return Series(result, index=labels)\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [index[i] if i >= 0 else np.nan for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode()\n\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True,\n                 interpolation='linear'):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                           columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n        \"\"\"\n        self._check_percentile(q)\n\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n\n        if is_transposed:\n            data = data.T\n\n        result = data._data.quantile(qs=q,\n                                     axis=1,\n                                     interpolation=interpolation,\n                                     transposed=is_transposed)\n\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n\n        if is_transposed:\n            result = result.T\n\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:  # pragma: no cover\n            raise AssertionError('Axis must be 0 or 1. Got %s' % str(axis))\n\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:  # pragma: no cover\n            raise AssertionError('Axis must be 0 or 1. Got %s' % str(axis))\n\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> other = DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(other)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `other` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col])\n                           for i, col in enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError(\"cannot compute isin with \"\n                                 \"a duplicate axis.\")\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError(\"cannot compute isin with \"\n                                 \"a duplicate axis.\")\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\"only list-like or dict-like objects are \"\n                                \"allowed to be passed to DataFrame.isin(), \"\n                                \"you passed a \"\n                                \"{0!r}\".format(type(values).__name__))\n            return DataFrame(\n                algorithms.isin(self.values.ravel(),\n                                values).reshape(self.shape), self.index,\n                self.columns)\n\n    # ----------------------------------------------------------------------\n    # Add plotting methods to DataFrame\n    plot = CachedAccessor(\"plot\", gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n\n\nDataFrame._setup_axes(['index', 'columns'], info_axis=1, stat_axis=0,\n                      axes_are_reversed=True, aliases={'rows': 0})\nDataFrame._add_numeric_operations()\nDataFrame._add_series_or_dataframe_operations()\n\nops.add_flex_arithmetic_methods(DataFrame, **ops.frame_flex_funcs)\nops.add_special_arithmetic_methods(DataFrame, **ops.frame_special_funcs)\n\n\ndef _arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = _ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [_ensure_index(columns), _ensure_index(index)]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)\n\n\ndef extract_index(data):\n    from pandas.core.index import _union_indexes\n\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for v in data:\n            if isinstance(v, Series):\n                have_series = True\n                indexes.append(v.index)\n            elif isinstance(v, dict):\n                have_dicts = True\n                indexes.append(list(v.keys()))\n            elif is_list_like(v) and getattr(v, 'ndim', 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(v))\n\n        if not indexes and not raw_lengths:\n            raise ValueError('If using all scalar values, you must pass'\n                             ' an index')\n\n        if have_series or have_dicts:\n            index = _union_indexes(indexes)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError('arrays must all be same length')\n\n            if have_dicts:\n                raise ValueError('Mixing dicts with non-Series may lead to '\n                                 'ambiguous ordering.')\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = ('array length %d does not match index length %d' %\n                           (lengths[0], len(index)))\n                    raise ValueError(msg)\n            else:\n                index = com._default_index(lengths[0])\n\n    return _ensure_index(index)\n\n\ndef _prep_ndarray(values, copy=True):\n    if not isinstance(values, (np.ndarray, Series, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], 'len'):\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except:\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError('Must pass 2-d input')\n\n    return values\n\n\ndef _to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"\n    Return list of arrays, columns\n    \"\"\"\n    if isinstance(data, DataFrame):\n        if columns is not None:\n            arrays = [data._ixs(i, axis=1).values\n                      for i, col in enumerate(data.columns) if col in columns]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float,\n                               dtype=dtype)\n    elif isinstance(data[0], collections.Mapping):\n        return _list_of_dict_to_arrays(data, columns,\n                                       coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], Series):\n        return _list_of_series_to_arrays(data, columns,\n                                         coerce_float=coerce_float,\n                                         dtype=dtype)\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = com._default_index(len(data))\n        return data, columns\n    elif (isinstance(data, (np.ndarray, Series, Index)) and\n          data.dtype.names is not None):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = lmap(tuple, data)\n        return _list_to_arrays(data, columns, coerce_float=coerce_float,\n                               dtype=dtype)\n\n\ndef _masked_rec_array_to_mgr(data, index, columns, dtype, copy):\n    \"\"\" extract from a masked rec array and create the manager \"\"\"\n\n    # essentially process a record array then fill it\n    fill_value = data.fill_value\n    fdata = ma.getdata(data)\n    if index is None:\n        index = _get_names_from_index(fdata)\n        if index is None:\n            index = com._default_index(len(data))\n    index = _ensure_index(index)\n\n    if columns is not None:\n        columns = _ensure_index(columns)\n    arrays, arr_columns = _to_arrays(fdata, columns)\n\n    # fill if needed\n    new_arrays = []\n    for fv, arr, col in zip(fill_value, arrays, arr_columns):\n        mask = ma.getmaskarray(data[col])\n        if mask.any():\n            arr, fv = maybe_upcast(arr, fill_value=fv, copy=True)\n            arr[mask] = fv\n        new_arrays.append(arr)\n\n    # create the manager\n    arrays, arr_columns = _reorder_arrays(new_arrays, arr_columns, columns)\n    if columns is None:\n        columns = arr_columns\n\n    mgr = _arrays_to_mgr(arrays, arr_columns, index, columns)\n\n    if copy:\n        mgr = mgr.copy()\n    return mgr\n\n\ndef _reorder_arrays(arrays, arr_columns, columns):\n    # reorder according to the columns\n    if (columns is not None and len(columns) and arr_columns is not None and\n            len(arr_columns)):\n        indexer = _ensure_index(arr_columns).get_indexer(columns)\n        arr_columns = _ensure_index([arr_columns[i] for i in indexer])\n        arrays = [arrays[i] for i in indexer]\n    return arrays, arr_columns\n\n\ndef _list_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    return _convert_object_array(content, columns, dtype=dtype,\n                                 coerce_float=coerce_float)\n\n\ndef _list_of_series_to_arrays(data, columns, coerce_float=False, dtype=None):\n    from pandas.core.index import _get_objs_combined_axis\n\n    if columns is None:\n        columns = _get_objs_combined_axis(data)\n\n    indexer_cache = {}\n\n    aligned_values = []\n    for s in data:\n        index = getattr(s, 'index', None)\n        if index is None:\n            index = com._default_index(len(s))\n\n        if id(index) in indexer_cache:\n            indexer = indexer_cache[id(index)]\n        else:\n            indexer = indexer_cache[id(index)] = index.get_indexer(columns)\n\n        values = com._values_from_object(s)\n        aligned_values.append(algorithms.take_1d(values, indexer))\n\n    values = np.vstack(aligned_values)\n\n    if values.dtype == np.object_:\n        content = list(values.T)\n        return _convert_object_array(content, columns, dtype=dtype,\n                                     coerce_float=coerce_float)\n    else:\n        return values.T, columns\n\n\ndef _list_of_dict_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        gen = (list(x.keys()) for x in data)\n        sort = not any(isinstance(d, OrderedDict) for d in data)\n        columns = lib.fast_unique_multiple_list_gen(gen, sort=sort)\n\n    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)\n    return _convert_object_array(content, columns, dtype=dtype,\n                                 coerce_float=coerce_float)\n\n\ndef _convert_object_array(content, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        columns = com._default_index(len(content))\n    else:\n        if len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError('%d columns passed, passed data had %s '\n                                 'columns' % (len(columns), len(content)))\n\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays, columns\n\n\ndef _get_names_from_index(data):\n    has_some_name = any(getattr(s, 'name', None) is not None for s in data)\n    if not has_some_name:\n        return com._default_index(len(data))\n\n    index = lrange(len(data))\n    count = 0\n    for i, s in enumerate(data):\n        n = getattr(s, 'name', None)\n        if n is not None:\n            index[i] = n\n        else:\n            index[i] = 'Unnamed %d' % count\n            count += 1\n\n    return index\n\n\ndef _homogenize(data, index, dtype=None):\n    from pandas.core.series import _sanitize_array\n\n    oindex = None\n    homogenized = []\n\n    for v in data:\n        if isinstance(v, Series):\n            if dtype is not None:\n                v = v.astype(dtype)\n            if v.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                v = v.reindex(index, copy=False)\n        else:\n            if isinstance(v, dict):\n                if oindex is None:\n                    oindex = index.astype('O')\n\n                if isinstance(index, (DatetimeIndex, TimedeltaIndex)):\n                    v = com._dict_compat(v)\n                else:\n                    v = dict(v)\n                v = lib.fast_multiget(v, oindex.values, default=np.nan)\n            v = _sanitize_array(v, index, dtype=dtype, copy=False,\n                                raise_cast_failure=False)\n\n        homogenized.append(v)\n\n    return homogenized\n\n\ndef _from_nested_dict(data):\n    # TODO: this should be seriously cythonized\n    new_data = OrderedDict()\n    for index, s in compat.iteritems(data):\n        for col, v in compat.iteritems(s):\n            new_data[col] = new_data.get(col, OrderedDict())\n            new_data[col][index] = v\n    return new_data\n\n\ndef _put_str(s, space):\n    return ('%s' % s)[:space].ljust(space)\n"
    },
    {
      "filename": "pandas/tests/frame/test_mutate_columns.py",
      "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\nimport pytest\nfrom pandas.compat import range, lrange\nimport numpy as np\nfrom pandas.compat import PY36\n\nfrom pandas import DataFrame, Series, Index, MultiIndex\n\nfrom pandas.util.testing import assert_frame_equal\n\nimport pandas.util.testing as tm\n\nfrom pandas.tests.frame.common import TestData\n\n\n# Column add, remove, delete.\n\n\nclass TestDataFrameMutateColumns(TestData):\n\n    def test_assign(self):\n        df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n        original = df.copy()\n        result = df.assign(C=df.B / df.A)\n        expected = df.copy()\n        expected['C'] = [4, 2.5, 2]\n        assert_frame_equal(result, expected)\n\n        # lambda syntax\n        result = df.assign(C=lambda x: x.B / x.A)\n        assert_frame_equal(result, expected)\n\n        # original is unmodified\n        assert_frame_equal(df, original)\n\n        # Non-Series array-like\n        result = df.assign(C=[4, 2.5, 2])\n        assert_frame_equal(result, expected)\n        # original is unmodified\n        assert_frame_equal(df, original)\n\n        result = df.assign(B=df.B / df.A)\n        expected = expected.drop('B', axis=1).rename(columns={'C': 'B'})\n        assert_frame_equal(result, expected)\n\n        # overwrite\n        result = df.assign(A=df.A + df.B)\n        expected = df.copy()\n        expected['A'] = [5, 7, 9]\n        assert_frame_equal(result, expected)\n\n        # lambda\n        result = df.assign(A=lambda x: x.A + x.B)\n        assert_frame_equal(result, expected)\n\n    def test_assign_multiple(self):\n        df = DataFrame([[1, 4], [2, 5], [3, 6]], columns=['A', 'B'])\n        result = df.assign(C=[7, 8, 9], D=df.A, E=lambda x: x.B)\n        expected = DataFrame([[1, 4, 7, 1, 4], [2, 5, 8, 2, 5],\n                              [3, 6, 9, 3, 6]], columns=list('ABCDE'))\n        assert_frame_equal(result, expected)\n\n    def test_assign_order(self):\n        # GH 9818\n        df = DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])\n        result = df.assign(D=df.A + df.B, C=df.A - df.B)\n\n        if PY36:\n            expected = DataFrame([[1, 2, 3, -1], [3, 4, 7, -1]],\n                                 columns=list('ABDC'))\n        else:\n            expected = DataFrame([[1, 2, -1, 3], [3, 4, -1, 7]],\n                                 columns=list('ABCD'))\n        assert_frame_equal(result, expected)\n        result = df.assign(C=df.A - df.B, D=df.A + df.B)\n\n        expected = DataFrame([[1, 2, -1, 3], [3, 4, -1, 7]],\n                             columns=list('ABCD'))\n\n        assert_frame_equal(result, expected)\n\n    def test_assign_bad(self):\n        df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n        # non-keyword argument\n        with pytest.raises(TypeError):\n            df.assign(lambda x: x.A)\n        with pytest.raises(AttributeError):\n            df.assign(C=df.A, D=df.A + df.C)\n\n    @pytest.mark.skipif(PY36, reason=\"\"\"Issue #14207: valid for python\n                        3.6 and above\"\"\")\n    def test_assign_dependent_old_python(self):\n        df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n        # Key C does not exist at defition time of df\n        with pytest.raises(KeyError):\n            df.assign(C=lambda df: df.A,\n                      D=lambda df: df['A'] + df['C'])\n        with pytest.raises(KeyError):\n            df.assign(C=df.A, D=lambda x: x['A'] + x['C'])\n\n    @pytest.mark.skipif(not PY36, reason=\"\"\"Issue #14207: not valid for\n                        python 3.5 and below\"\"\")\n    def test_assign_dependent(self):\n        df = DataFrame({'A': [1, 2], 'B': [3, 4]})\n\n        result = df.assign(C=df.A, D=lambda x: x['A'] + x['C'])\n        expected = DataFrame([[1, 3, 1, 2], [2, 4, 2, 4]],\n                             columns=list('ABCD'))\n        assert_frame_equal(result, expected)\n\n        result = df.assign(C=lambda df: df.A,\n                           D=lambda df: df['A'] + df['C'])\n        expected = DataFrame([[1, 3, 1, 2], [2, 4, 2, 4]],\n                             columns=list('ABCD'))\n        assert_frame_equal(result, expected)\n\n    def test_insert_error_msmgs(self):\n\n        # GH 7432\n        df = DataFrame({'foo': ['a', 'b', 'c'], 'bar': [\n                       1, 2, 3], 'baz': ['d', 'e', 'f']}).set_index('foo')\n        s = DataFrame({'foo': ['a', 'b', 'c', 'a'], 'fiz': [\n                      'g', 'h', 'i', 'j']}).set_index('foo')\n        msg = 'cannot reindex from a duplicate axis'\n        with tm.assert_raises_regex(ValueError, msg):\n            df['newcol'] = s\n\n        # GH 4107, more descriptive error message\n        df = DataFrame(np.random.randint(0, 2, (4, 4)),\n                       columns=['a', 'b', 'c', 'd'])\n\n        msg = 'incompatible index of inserted column with frame index'\n        with tm.assert_raises_regex(TypeError, msg):\n            df['gr'] = df.groupby(['b', 'c']).count()\n\n    def test_insert_benchmark(self):\n        # from the vb_suite/frame_methods/frame_insert_columns\n        N = 10\n        K = 5\n        df = DataFrame(index=lrange(N))\n        new_col = np.random.randn(N)\n        for i in range(K):\n            df[i] = new_col\n        expected = DataFrame(np.repeat(new_col, K).reshape(N, K),\n                             index=lrange(N))\n        assert_frame_equal(df, expected)\n\n    def test_insert(self):\n        df = DataFrame(np.random.randn(5, 3), index=np.arange(5),\n                       columns=['c', 'b', 'a'])\n\n        df.insert(0, 'foo', df['a'])\n        tm.assert_index_equal(df.columns, Index(['foo', 'c', 'b', 'a']))\n        tm.assert_series_equal(df['a'], df['foo'], check_names=False)\n\n        df.insert(2, 'bar', df['c'])\n        tm.assert_index_equal(df.columns,\n                              Index(['foo', 'c', 'bar', 'b', 'a']))\n        tm.assert_almost_equal(df['c'], df['bar'], check_names=False)\n\n        # diff dtype\n\n        # new item\n        df['x'] = df['a'].astype('float32')\n        result = Series(dict(float64=5, float32=1))\n        assert (df.get_dtype_counts() == result).all()\n\n        # replacing current (in different block)\n        df['a'] = df['a'].astype('float32')\n        result = Series(dict(float64=4, float32=2))\n        assert (df.get_dtype_counts() == result).all()\n\n        df['y'] = df['a'].astype('int32')\n        result = Series(dict(float64=4, float32=2, int32=1))\n        assert (df.get_dtype_counts() == result).all()\n\n        with tm.assert_raises_regex(ValueError, 'already exists'):\n            df.insert(1, 'a', df['b'])\n        pytest.raises(ValueError, df.insert, 1, 'c', df['b'])\n\n        df.columns.name = 'some_name'\n        # preserve columns name field\n        df.insert(0, 'baz', df['c'])\n        assert df.columns.name == 'some_name'\n\n        # GH 13522\n        df = DataFrame(index=['A', 'B', 'C'])\n        df['X'] = df.index\n        df['X'] = ['x', 'y', 'z']\n        exp = DataFrame(data={'X': ['x', 'y', 'z']}, index=['A', 'B', 'C'])\n        assert_frame_equal(df, exp)\n\n    def test_delitem(self):\n        del self.frame['A']\n        assert 'A' not in self.frame\n\n    def test_delitem_multiindex(self):\n        midx = MultiIndex.from_product([['A', 'B'], [1, 2]])\n        df = DataFrame(np.random.randn(4, 4), columns=midx)\n        assert len(df.columns) == 4\n        assert ('A', ) in df.columns\n        assert 'A' in df.columns\n\n        result = df['A']\n        assert isinstance(result, DataFrame)\n        del df['A']\n\n        assert len(df.columns) == 2\n\n        # A still in the levels, BUT get a KeyError if trying\n        # to delete\n        assert ('A', ) not in df.columns\n        with pytest.raises(KeyError):\n            del df[('A',)]\n\n        # behavior of dropped/deleted MultiIndex levels changed from\n        # GH 2770 to GH 19027: MultiIndex no longer '.__contains__'\n        # levels which are dropped/deleted\n        assert 'A' not in df.columns\n        with pytest.raises(KeyError):\n            del df['A']\n\n    def test_pop(self):\n        self.frame.columns.name = 'baz'\n\n        self.frame.pop('A')\n        assert 'A' not in self.frame\n\n        self.frame['foo'] = 'bar'\n        self.frame.pop('foo')\n        assert 'foo' not in self.frame\n        # TODO assert self.frame.columns.name == 'baz'\n\n        # gh-10912: inplace ops cause caching issue\n        a = DataFrame([[1, 2, 3], [4, 5, 6]], columns=[\n                      'A', 'B', 'C'], index=['X', 'Y'])\n        b = a.pop('B')\n        b += 1\n\n        # original frame\n        expected = DataFrame([[1, 3], [4, 6]], columns=[\n                             'A', 'C'], index=['X', 'Y'])\n        tm.assert_frame_equal(a, expected)\n\n        # result\n        expected = Series([2, 5], index=['X', 'Y'], name='B') + 1\n        tm.assert_series_equal(b, expected)\n\n    def test_pop_non_unique_cols(self):\n        df = DataFrame({0: [0, 1], 1: [0, 1], 2: [4, 5]})\n        df.columns = [\"a\", \"b\", \"a\"]\n\n        res = df.pop(\"a\")\n        assert type(res) == DataFrame\n        assert len(res) == 2\n        assert len(df.columns) == 1\n        assert \"b\" in df.columns\n        assert \"a\" not in df.columns\n        assert len(df.index) == 2\n\n    def test_insert_column_bug_4032(self):\n\n        # GH4032, inserting a column and renaming causing errors\n        df = DataFrame({'b': [1.1, 2.2]})\n        df = df.rename(columns={})\n        df.insert(0, 'a', [1, 2])\n\n        result = df.rename(columns={})\n        str(result)\n        expected = DataFrame([[1, 1.1], [2, 2.2]], columns=['a', 'b'])\n        assert_frame_equal(result, expected)\n        df.insert(0, 'c', [1.3, 2.3])\n\n        result = df.rename(columns={})\n        str(result)\n\n        expected = DataFrame([[1.3, 1, 1.1], [2.3, 2, 2.2]],\n                             columns=['c', 'a', 'b'])\n        assert_frame_equal(result, expected)\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the main purpose of the proposed change regarding dependent assignment in the 'pandas-dev_pandas' repository?",
    "Why is the version check for Python 3.6+ crucial for implementing dependent assignment in the 'pandas' library?",
    "What are the potential concerns raised about enabling dependent assignment in the 'pandas' library?",
    "How does the current implementation of the 'assign' method handle the order of new columns in a DataFrame?",
    "What steps are proposed to transition towards allowing dependent assignment in the 'pandas' library?"
  ],
  "golden_answers_generated": [
    "The proposed change aims to allow dependent assignment using the 'assign' method in pandas DataFrames for Python 3.6 and later, where keyword argument order is guaranteed. This would enable users to create new columns in a DataFrame that depend on columns being assigned in the same method call, enhancing functionality and usability.",
    "The version check for Python 3.6+ is crucial because, starting with this version, Python guarantees the preservation of keyword argument order. This ensures that the order of assignments in the 'assign' method will be predictable, allowing for dependent assignments. Implementing this feature in earlier Python versions, where dictionary order isn't guaranteed, could lead to unpredictable behavior.",
    "The main concerns are related to backward compatibility and the risk of introducing subtle differences between Python 3.5 and 3.6. There's a risk that code relying on the new behavior might not work as expected in environments running older Python versions. Additionally, there's apprehension about how best to communicate or enforce this change to avoid unexpected results for users not aware of the version-specific behavior.",
    "In the current implementation, due to the function signature of 'assign' being **kwargs, the order of new columns in the resulting DataFrame cannot be guaranteed to match the order passed in. To ensure predictability, items are inserted alphabetically by key at the end of the DataFrame. All expressions are computed first, preventing references to another column being assigned in the same call.",
    "The proposed steps are: (1) No change for Python 2.7 to 3.5, where the order will continue to be sorted by key; (2) for Python 3.6 and later, use the original order passed by the user; (3) initially, do not allow dependent assignment to avoid issues, with a possibility of revisiting this decision in the future when usage of older Python versions declines."
  ]
}