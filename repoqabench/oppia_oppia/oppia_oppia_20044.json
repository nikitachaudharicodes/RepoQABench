{
  "repo_name": "oppia_oppia",
  "issue_id": "20044",
  "issue_description": "# [BUG]: Don't allow duplicate units in number with units interaction\n\n### Describe the bug\r\n\r\nCurrently, we are allowed to enter duplicate units like \"km km,\" which combines to form \"km^2,\" which is technically correct. however for uniformity, we would like to avoid entering duplicate units altogether.\r\n\r\n### URL of the page where the issue is observed.\r\n\r\nExploration player page\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create an exploration with unit interaction and play.\r\n2. Enter duplicate units like 'm m' or 'meter m'; it will accept them.\r\n\r\n### Expected Behavior\r\n\r\nWe should not accept duplicate units and display a message to the learner, informing them not to enter duplicate units. and, we should also show the name of the duplicate unit.\r\n\r\n### Screenshots/Videos\r\n\r\n[screen-capture.webm](https://github.com/oppia/oppia/assets/79896602/91c48011-e1ce-41bf-9135-2e89f7e98cc8)\r\n\r\n\r\n\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nOther\r\n\r\n### Browser version\r\n\r\n1.62.156 (Brave)\r\n\r\n### Additional context\r\n\r\n_No response_\r\n\r\n### Tips for developers\r\n\r\nBefore addressing the bug, please identify which PR caused the issue (you can follow the steps [here](https://github.com/oppia/oppia/wiki/How-to-find-the-commit-which-introduced-a-bug)). If you identify the PR, comment on the issue with a link to it. If not, mention the commit hash of the oldest commit you saw the bug on (and the month and year it was made in).\r\n\r\nAlso, if this is your first issue, please make sure to follow https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue and https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up before claiming it. Thanks!\r\n",
  "issue_comments": [
    {
      "id": 2069795833,
      "user": "JoaBrito",
      "body": "Hi! I'm still a bit new to this kind of opensource projects, so excuse me if I'm a bit hasty, but is this issue still open or are you still waiting for the response from the previous pull request? I think I might have a solution for this."
    },
    {
      "id": 2069829861,
      "user": "seanlip",
      "body": "Hi @JoaBrito, per the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.). If it looks good, we can assign you to this issue. Don't worry about the previous PR that was made, we closed it because it didn't follow the instructions.\r\n\r\nYou might also want to follow the other instructions on that wiki page if you have not yet done so. Thanks!"
    },
    {
      "id": 2070680613,
      "user": "JoaBrito",
      "body": "Hi @seanlip. In order to fix this issue, I added a if clause that compares the size of the raw input array with one that already has converted the input string to units. By doing this we can then throw an error message if needed.\r\nThe files I changed were /core/templates/domain/objects/NumberWithUnitsObjectFactory.ts to catch the error and objects-domain.constants.ts to define the error message.\r\n![Screenshot from 2024-04-22 19-59-57](https://github.com/oppia/oppia/assets/120871978/0f91b3ec-b35c-4f6a-a948-1df64f7167a4)\r\n![Screenshot from 2024-04-22 19-59-17](https://github.com/oppia/oppia/assets/120871978/9433b6f8-7661-4e6e-bc52-3c0b6f598c24)\r\nHere's how the code is at the moment. Please tell me if there is anything that you'd like to be improved/changed. I just need some help to better define the error message.\r\n![Screenshot from 2024-04-22 20-03-08](https://github.com/oppia/oppia/assets/120871978/1479eeda-9ba3-46ef-b824-23692b8ccbd1)\r\nAnd here is how it would look like when creating/answering the question."
    },
    {
      "id": 2075470272,
      "user": "seanlip",
      "body": "Thanks @JoaBrito. For the error message, I think you can use: \"The unit 'XXX' is used more than once.\"\r\n\r\nI think the overall idea of your approach seems OK, thanks, but it needs lots of frontend tests for corner cases. E.g. multiple spaces, things like \"kg^2\" or \"2kg\" or \"kg^2m^-2, etc. -- the delimiter may not always be a space.\r\n\r\nThat said, happy to assign you, and you can fix these issues in a PR. When can you create a PR?\r\n\r\nThanks!"
    },
    {
      "id": 2077761222,
      "user": "JoaBrito",
      "body": "Thanks @seanlip. I will do a bit of futher testing to assure that the solution already covers those cases. Once I'm done with it, I'll let you know to then open a PR.\r\n\r\nHappy to help."
    },
    {
      "id": 2118710064,
      "user": "AFZL210",
      "body": "@JoaBrito Any update on this?"
    },
    {
      "id": 2120455085,
      "user": "JoaBrito",
      "body": "@AFZL210 yes, I'm sorry this is taking so long but I'm currently in a frantic last few weeks of university and I'm doing this in between assignments.\r\nFirstly, I changed the method to detect duplicate units, now I'm parsing through the input once and storing the units i see to then check if the next one is already in use. Kinda of the same though process but a bit more efficient since we only need to go through the input once.\r\nSecondly, I'm having trouble defining the error message. Do i really need to define it to all other available languages or can i just leave it to just the ones i know?\r\nOnce again I'm sorry for how long this is taking, this week is pretty free for me, I can probably finish it in between tomorrow and the end of this week."
    },
    {
      "id": 2120529249,
      "user": "AFZL210",
      "body": "> @AFZL210 yes, I'm sorry this is taking so long but I'm currently in a frantic last few weeks of university and I'm doing this in between assignments. Firstly, I changed the method to detect duplicate units, now I'm parsing through the input once and storing the units i see to then check if the next one is already in use. Kinda of the same though process but a bit more efficient since we only need to go through the input once. Secondly, I'm having trouble defining the error message. Do i really need to define it to all other available languages or can i just leave it to just the ones i know? Once again I'm sorry for how long this is taking, this week is pretty free for me, I can probably finish it in between tomorrow and the end of this week.\r\n\r\nIt's okay, not a problem.\r\n\r\nYou don't have to define the error message for all languages. just define it in `en.json` (English) and add it to `qqq.json` (for context, i.e. what the key represents)."
    },
    {
      "id": 2130607682,
      "user": "JoaBrito",
      "body": "Hey, I think I'm finally done. The warning message is currently looking like this and I think you can check my fork to check how the code is currently looking like. Please let me know if there is anything that you would like to see changed.\r\n![image](https://github.com/oppia/oppia/assets/120871978/137782f7-609a-4246-a38f-c62477b0f01f)\r\nlink to fork commit: https://github.com/JoaBrito/oppia/commit/076acbf7099ca91e6284d86698959c05aaf6dfcb\r\n "
    },
    {
      "id": 2131032517,
      "user": "seanlip",
      "body": "@JoaBrito Thanks! I left a few comments on your fork. Please consider addressing them so that the PR review goes more smoothly.\r\n\r\nIn terms of UI, I think it looks OK, but could you make the error message closer to the input field than to \"Possible unit formats\"? Also when you submit the PR please include a video to show the lifecycle for how this displays -- probably the best is to show it when the user clicks submit, and disable the submit button until the error is fixed."
    },
    {
      "id": 2131613940,
      "user": "JoaBrito",
      "body": "Hi @seanlip . I looked through your feedback and did some changes to the code. Overall the system should be behaving the same, however the function to detect the duplicated units should be slightly less efficient but overall everything should be easier to read. I also changed where the error message is as showed in the following image. Again if there's anything that you would like to see changed, please let me know. I will also leave the latest commit to the fork again so that you can look at it.\r\n\r\n![image](https://github.com/oppia/oppia/assets/120871978/61412443-dbdb-4955-a063-0371bf67d34f)\r\n\r\nlink to fork commit: https://github.com/JoaBrito/oppia/commit/ae893beb884eafa9ec511e03c0698150645a057c\r\n"
    },
    {
      "id": 2132083656,
      "user": "seanlip",
      "body": "Maybe add a bit more space between the red text and the button below it, and make the red text a bit smaller, but otherwise the position looks fine, thanks.\r\n\r\nFor code changes I suggest making a PR, let's discuss more there. Thanks."
    },
    {
      "id": 2241618613,
      "user": "github-actions[bot]",
      "body": "Hi @AFZL210, thanks for proposing this as a good first issue. I am removing the label for now and looping in @DubeySandeep to approve the label. It will be added back if approved. Thanks!"
    },
    {
      "id": 2241618805,
      "user": "AFZL210",
      "body": "Unassigning @JoaBrito due to inactivity.\r\n\r\nAs you have already did some work on this issue, feel free to take up this again if you feel like you can complete it.\r\n\r\nFor new contributors, you can use this [PR](https://github.com/oppia/oppia/pull/20361) as a reference."
    },
    {
      "id": 2392968307,
      "user": "Tomar606",
      "body": "Hi! I reproduced the issue and also went through the changes made by the last contributor to whom this was assigned. I've only made changes in the component and it's related files.\r\n![Screenshot 2024-10-04 123336](https://github.com/user-attachments/assets/35c0754a-aeff-45f6-8b8d-b9960483a6ac)\r\nI made the necessary changes and also tested it from my side.\r\ncan you assign this to me ?\r\n\r\nhttps://github.com/user-attachments/assets/f269734a-3c83-41c5-98fe-5183fea5d6cd\r\n\r\n"
    },
    {
      "id": 2393790173,
      "user": "seanlip",
      "body": "@Tomar606 You haven't read the PR thread properly. Please do so and show a video demo that incorporates the feedback that was previously given in #20361.\r\n\r\nAlso please elaborate on what the \"necessary changes\" you have made are. Thanks."
    },
    {
      "id": 2564371977,
      "user": "AvikRay1001",
      "body": "@seanlip is this issue still open???"
    },
    {
      "id": 2564604371,
      "user": "seanlip",
      "body": "@AvikRay1001 Any non-assigned issue is still open. But, per the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.), as well as a video showing that the changes work correctly on your local machine. Please also follow the other instructions on that wiki page if you have not yet done so. Thanks!\r\n\r\nYou can look at the above wiki page to see which issues we encourage contributions to, as well. Some issues (like backlog and low-priority ones) are not open for contributions yet."
    },
    {
      "id": 2566573254,
      "user": "himkar-cmd",
      "body": "I have reviewed the changes made by the previous contributor and the feedback provided in their PR. Based on this, I have made the following updates:\r\n1.\tcore/templates/domain/objects/NumberWithUnitsObjectFactory.ts\r\n\tModified to correctly display the appropriate version.\r\n2.\tAdditional File Updates\r\n\tUpdated relevant files to ensure the correct version is reflected throughout.\r\nI believe these changes address the issue. can you please assign this issue to me \r\n\r\nhttps://github.com/user-attachments/assets/640591a6-3c43-4988-b5df-a4e54acb974a\r\n\r\n"
    },
    {
      "id": 2567302767,
      "user": "himkar-cmd",
      "body": "Hi @seanlip, should I provide more details about the specific files I’ve changed?"
    },
    {
      "id": 2569046426,
      "user": "seanlip",
      "body": "@himkar-cmd Yes, please provide more details. \r\n\r\nAlso, have you looked at the comments in https://github.com/oppia/oppia/pull/20361 ? I think you've addressed some of them but not the one about parens: https://github.com/oppia/oppia/pull/20361#issuecomment-2193936322. It would be helpful to know your approach for that."
    },
    {
      "id": 2570006571,
      "user": "himkar-cmd",
      "body": "Hi @seanlip , I have used getCanonicalRepresentationOfUnits which is already decleared in file core\\templates\\domain\\objects\\NumberWithUnitsObjectFactory.ts \r\n![Screenshot 2025-01-04 071441](https://github.com/user-attachments/assets/5b9d0403-07fb-4d8b-88e7-4f36e2432b37)\r\nin file core\\templates\\domain\\objects\\UnitsObjectFactorySpec.ts\r\n![Screenshot 2025-01-04 071928](https://github.com/user-attachments/assets/3aa4d164-8d85-45d9-bc97-4bcf488ea22f)\r\nIn file - extensions\\interactions\\NumberWithUnits\\directives\\oppia-interactive-number-with-units.component.ts\r\n![Screenshot 2025-01-04 072036](https://github.com/user-attachments/assets/98d98789-54d7-4086-bcb1-ce57dc26182e)\r\nthese are the files mainly i have changed and other changes in file is same as last contributor\r\nAbout parens: i read the comments given in previous contributor PR i think it show \r\n\r\nhttps://github.com/user-attachments/assets/5302065d-8d26-4f4f-bbe3-9ff896121988\r\n\r\n\r\n So when i use km / (s s) it suggest km^1s^-2 and km / (m*s) it correct so insted for negative power we can combine all and suggest to write power with positive and power of negetive like in this video -\r\n\r\nhttps://github.com/user-attachments/assets/af608c2c-64f8-48a9-924f-a8f55d3d3963\r\n\r\nbecause both km / (m*s) and km^1m^-1s^-1 is correct so throwing error is wrong in this case i think it create confusion that while entering km/(s s) it suggest km^1s^-2 and km/(m*s) it show nothing please let me know if you agree with this and in above picture dont consider variable name i will change it ."
    },
    {
      "id": 2571505682,
      "user": "seanlip",
      "body": "@himkar-cmd Thanks for the update. I think you shouldn't be showing the \"^1\", it should just be \"m s\" and not m^1 s^1. But if you plan to keep a \"/\" sign then there does need to be parens around the denominator if there is more than one term. Your suggested rewriting doesn't handle that properly.\r\n\r\nAlso could you please demonstrate how you handle \"kg/(m/s)\"?\r\n\r\nThanks."
    },
    {
      "id": 2571635686,
      "user": "himkar-cmd",
      "body": "Hi @seanlip can you please look at this --\r\n\r\nhttps://github.com/user-attachments/assets/5ed01e8f-cef9-4c77-8d2a-9d027afaa4ff\r\n\r\n"
    },
    {
      "id": 2572224594,
      "user": "seanlip",
      "body": "Thanks, the last error message seems a bit wrong though. \"/\" is not a unit. Also there should be a space between \"kg\" and \"s\", so that the final rewrite is \"kg s/m\".\r\n\r\nAlso, what coding approach/algorithm are you using to handle this case? Just need to ask in order to verify that it's properly generalizable."
    },
    {
      "id": 2573237260,
      "user": "himkar-cmd",
      "body": "Hi @seanlip , this is code -- \r\nin file oppia\\core\\templates\\domain\\objects\\NumberWithUnitsObjectFactory.ts\r\n![Screenshot 2025-01-06 194903](https://github.com/user-attachments/assets/d6e5669f-d781-445b-a227-1e55b1efcac4)\r\nin file\r\noppia\\core\\templates\\domain\\objects\\UnitsObjectFactory.ts\r\n![Screenshot 2025-01-06 195006](https://github.com/user-attachments/assets/9671d899-3784-4e08-a4d7-50ab2c975018)\r\nin file \r\noppia\\extensions\\interactions\\NumberWithUnits\\directives\\number-with-units-interaction.component.html\r\n![Screenshot 2025-01-06 195102](https://github.com/user-attachments/assets/b9cbe30d-bdf4-4e38-a1f7-84fffeef4b6d)\r\nin file\r\noppia\\extensions\\interactions\\NumberWithUnits\\directives\\oppia-interactive-number-with-units.component.ts\r\n![Screenshot 2025-01-06 195206](https://github.com/user-attachments/assets/59d7e30b-a2aa-4759-8130-2b1fdf6f1a63)\r\nin file\r\noppia\\extensions\\objects\\templates\\number-with-units-editor.component.html\r\n![Screenshot 2025-01-06 195339](https://github.com/user-attachments/assets/f95d5d57-3839-4132-b9ee-f315d5edb0e8)\r\nin file \r\noppia\\extensions\\objects\\templates\\number-with-units-editor.component.ts\r\n![Screenshot 2025-01-06 195447](https://github.com/user-attachments/assets/beecca84-e7c8-4aa4-ba81-8c520a491fe5)\r\nI tried to follow the suggestion you gave --\r\n\r\nhttps://github.com/user-attachments/assets/39adfe00-87d4-4e77-8399-819fcd3839eb\r\n\r\n\r\nwhen slash is used more than one can you please suggest the format of message.\r\n\r\n let me know if it is good or not"
    },
    {
      "id": 2581726670,
      "user": "himkar-cmd",
      "body": "Hi @seanlip and @AFZL210,\r\nCould someone please help confirm if my solution is generalizable or not?"
    },
    {
      "id": 2585135312,
      "user": "seanlip",
      "body": "Thanks @himkar-cmd. There are some issues in your code with naming and clarity of variables but this is probably good enough to start with. We can discuss the code issues in the PR review stage.\r\n\r\nFor the message:\r\n- If you can figure out the correct representation, you can use: 'Your answer contains more than one slash ('/'). Try rewriting it as ...\"\r\n- If you can't, you can use: 'Your answer contains more than one slash ('/'). Please rewrite it to use at most one slash.\"\r\n\r\nThere's one more question I have for you before assigning you to this issue. I think it's important that we have proper test cases for this functionality. Could you please provide a comprehensive list of test inputs and the corresponding messages (if any)? This should be implemented along with your PR; for now I would like to verify that the list is comprehensive and properly exercises all the requirements. Please try to go beyond what has been discussed above, e.g. there should be cases with more than two slashes etc. Thanks."
    },
    {
      "id": 2585642650,
      "user": "himkar-cmd",
      "body": "Hi @seanlip , I don't know how many test case i have to write but i have written some of them--\r\n\r\nInput: 2 km / (s s)\r\nMessage: Your answer contains a repeated unit: \"s\". Try rewriting it as \"km/s^2\".\r\nExplanation: This case handles repeated units within the same term. \r\n\r\nInput: 2 meter m\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"m^2\".\r\nExplanation: This case identifies repeated units with different naming conventions \r\n\r\nInput: 2 ((m)/(s²))(m/kg)\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"m^2/(s^2 kg)\".\r\nExplanation: This case handles nested parentheses and repeated units\r\n\r\nInput: 2 ((km/meter)/s meter)/kg\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"km/(s kg)\".\r\nExplanation: This case demonstrates how to handle both repeated units and nested parentheses. And in case of nested parentheses and duplicated unit. It prioritize duplicated unit\r\n\r\nInput: 2 km/s/m/kg\r\nMessage: Your answer contains more than one slash ('/'). Try rewriting it as \"km/(s m kg)\".\r\nExplanation: This case addresses multiple slashes, which can cause ambiguity in unit\r\n\r\nis this okay or do i need to add more test cases?\r\n![Screenshot 2025-01-12 134153](https://github.com/user-attachments/assets/47932ce7-f850-4a9e-b56e-d7bace0400ca)\r\n"
    },
    {
      "id": 2586260457,
      "user": "seanlip",
      "body": "Thanks, some notes:\r\n\r\n- In the testing code, try to just have the expectation in toThrowError be the full literal string (i.e. hardcode the expected value).\r\n- For the third one, is there a reason that doesn't trigger the \"multiple slashes\" issue?\r\n- Maybe add 2 m/(s^2 m/kg)) as a test case -- how is it handled?\r\n- In the fourth case should we say \"meter\" since \"m\" doesn't appear anywhere?\r\n- You might want to think about more test cases. Off the top of my head, you're missing test cases for at least the following ... see if you can think of more:\r\n  - Multiple duplicate units, e.g. km km / s s\r\n  - Triplicate units, e.g. km / (s s s)\r\n  - Invalid/unrecognized duplicate units, e.g. km invalid invalid\r\n  - Duplicate units with exponents, e.g. s km s^-3\r\n"
    }
  ],
  "text_context": "# [BUG]: Don't allow duplicate units in number with units interaction\n\n### Describe the bug\r\n\r\nCurrently, we are allowed to enter duplicate units like \"km km,\" which combines to form \"km^2,\" which is technically correct. however for uniformity, we would like to avoid entering duplicate units altogether.\r\n\r\n### URL of the page where the issue is observed.\r\n\r\nExploration player page\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create an exploration with unit interaction and play.\r\n2. Enter duplicate units like 'm m' or 'meter m'; it will accept them.\r\n\r\n### Expected Behavior\r\n\r\nWe should not accept duplicate units and display a message to the learner, informing them not to enter duplicate units. and, we should also show the name of the duplicate unit.\r\n\r\n### Screenshots/Videos\r\n\r\n[screen-capture.webm](https://github.com/oppia/oppia/assets/79896602/91c48011-e1ce-41bf-9135-2e89f7e98cc8)\r\n\r\n\r\n\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nOther\r\n\r\n### Browser version\r\n\r\n1.62.156 (Brave)\r\n\r\n### Additional context\r\n\r\n_No response_\r\n\r\n### Tips for developers\r\n\r\nBefore addressing the bug, please identify which PR caused the issue (you can follow the steps [here](https://github.com/oppia/oppia/wiki/How-to-find-the-commit-which-introduced-a-bug)). If you identify the PR, comment on the issue with a link to it. If not, mention the commit hash of the oldest commit you saw the bug on (and the month and year it was made in).\r\n\r\nAlso, if this is your first issue, please make sure to follow https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue and https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up before claiming it. Thanks!\r\n\n\nHi! I'm still a bit new to this kind of opensource projects, so excuse me if I'm a bit hasty, but is this issue still open or are you still waiting for the response from the previous pull request? I think I might have a solution for this.\n\nHi @JoaBrito, per the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.). If it looks good, we can assign you to this issue. Don't worry about the previous PR that was made, we closed it because it didn't follow the instructions.\r\n\r\nYou might also want to follow the other instructions on that wiki page if you have not yet done so. Thanks!\n\nHi @seanlip. In order to fix this issue, I added a if clause that compares the size of the raw input array with one that already has converted the input string to units. By doing this we can then throw an error message if needed.\r\nThe files I changed were /core/templates/domain/objects/NumberWithUnitsObjectFactory.ts to catch the error and objects-domain.constants.ts to define the error message.\r\n![Screenshot from 2024-04-22 19-59-57](https://github.com/oppia/oppia/assets/120871978/0f91b3ec-b35c-4f6a-a948-1df64f7167a4)\r\n![Screenshot from 2024-04-22 19-59-17](https://github.com/oppia/oppia/assets/120871978/9433b6f8-7661-4e6e-bc52-3c0b6f598c24)\r\nHere's how the code is at the moment. Please tell me if there is anything that you'd like to be improved/changed. I just need some help to better define the error message.\r\n![Screenshot from 2024-04-22 20-03-08](https://github.com/oppia/oppia/assets/120871978/1479eeda-9ba3-46ef-b824-23692b8ccbd1)\r\nAnd here is how it would look like when creating/answering the question.\n\nThanks @JoaBrito. For the error message, I think you can use: \"The unit 'XXX' is used more than once.\"\r\n\r\nI think the overall idea of your approach seems OK, thanks, but it needs lots of frontend tests for corner cases. E.g. multiple spaces, things like \"kg^2\" or \"2kg\" or \"kg^2m^-2, etc. -- the delimiter may not always be a space.\r\n\r\nThat said, happy to assign you, and you can fix these issues in a PR. When can you create a PR?\r\n\r\nThanks!\n\nThanks @seanlip. I will do a bit of futher testing to assure that the solution already covers those cases. Once I'm done with it, I'll let you know to then open a PR.\r\n\r\nHappy to help.\n\n@JoaBrito Any update on this?\n\n@AFZL210 yes, I'm sorry this is taking so long but I'm currently in a frantic last few weeks of university and I'm doing this in between assignments.\r\nFirstly, I changed the method to detect duplicate units, now I'm parsing through the input once and storing the units i see to then check if the next one is already in use. Kinda of the same though process but a bit more efficient since we only need to go through the input once.\r\nSecondly, I'm having trouble defining the error message. Do i really need to define it to all other available languages or can i just leave it to just the ones i know?\r\nOnce again I'm sorry for how long this is taking, this week is pretty free for me, I can probably finish it in between tomorrow and the end of this week.\n\n> @AFZL210 yes, I'm sorry this is taking so long but I'm currently in a frantic last few weeks of university and I'm doing this in between assignments. Firstly, I changed the method to detect duplicate units, now I'm parsing through the input once and storing the units i see to then check if the next one is already in use. Kinda of the same though process but a bit more efficient since we only need to go through the input once. Secondly, I'm having trouble defining the error message. Do i really need to define it to all other available languages or can i just leave it to just the ones i know? Once again I'm sorry for how long this is taking, this week is pretty free for me, I can probably finish it in between tomorrow and the end of this week.\r\n\r\nIt's okay, not a problem.\r\n\r\nYou don't have to define the error message for all languages. just define it in `en.json` (English) and add it to `qqq.json` (for context, i.e. what the key represents).\n\nHey, I think I'm finally done. The warning message is currently looking like this and I think you can check my fork to check how the code is currently looking like. Please let me know if there is anything that you would like to see changed.\r\n![image](https://github.com/oppia/oppia/assets/120871978/137782f7-609a-4246-a38f-c62477b0f01f)\r\nlink to fork commit: https://github.com/JoaBrito/oppia/commit/076acbf7099ca91e6284d86698959c05aaf6dfcb\r\n \n\n@JoaBrito Thanks! I left a few comments on your fork. Please consider addressing them so that the PR review goes more smoothly.\r\n\r\nIn terms of UI, I think it looks OK, but could you make the error message closer to the input field than to \"Possible unit formats\"? Also when you submit the PR please include a video to show the lifecycle for how this displays -- probably the best is to show it when the user clicks submit, and disable the submit button until the error is fixed.\n\nHi @seanlip . I looked through your feedback and did some changes to the code. Overall the system should be behaving the same, however the function to detect the duplicated units should be slightly less efficient but overall everything should be easier to read. I also changed where the error message is as showed in the following image. Again if there's anything that you would like to see changed, please let me know. I will also leave the latest commit to the fork again so that you can look at it.\r\n\r\n![image](https://github.com/oppia/oppia/assets/120871978/61412443-dbdb-4955-a063-0371bf67d34f)\r\n\r\nlink to fork commit: https://github.com/JoaBrito/oppia/commit/ae893beb884eafa9ec511e03c0698150645a057c\r\n\n\nMaybe add a bit more space between the red text and the button below it, and make the red text a bit smaller, but otherwise the position looks fine, thanks.\r\n\r\nFor code changes I suggest making a PR, let's discuss more there. Thanks.\n\nHi @AFZL210, thanks for proposing this as a good first issue. I am removing the label for now and looping in @DubeySandeep to approve the label. It will be added back if approved. Thanks!\n\nUnassigning @JoaBrito due to inactivity.\r\n\r\nAs you have already did some work on this issue, feel free to take up this again if you feel like you can complete it.\r\n\r\nFor new contributors, you can use this [PR](https://github.com/oppia/oppia/pull/20361) as a reference.\n\nHi! I reproduced the issue and also went through the changes made by the last contributor to whom this was assigned. I've only made changes in the component and it's related files.\r\n![Screenshot 2024-10-04 123336](https://github.com/user-attachments/assets/35c0754a-aeff-45f6-8b8d-b9960483a6ac)\r\nI made the necessary changes and also tested it from my side.\r\ncan you assign this to me ?\r\n\r\nhttps://github.com/user-attachments/assets/f269734a-3c83-41c5-98fe-5183fea5d6cd\r\n\r\n\n\n@Tomar606 You haven't read the PR thread properly. Please do so and show a video demo that incorporates the feedback that was previously given in #20361.\r\n\r\nAlso please elaborate on what the \"necessary changes\" you have made are. Thanks.\n\n@seanlip is this issue still open???\n\n@AvikRay1001 Any non-assigned issue is still open. But, per the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.), as well as a video showing that the changes work correctly on your local machine. Please also follow the other instructions on that wiki page if you have not yet done so. Thanks!\r\n\r\nYou can look at the above wiki page to see which issues we encourage contributions to, as well. Some issues (like backlog and low-priority ones) are not open for contributions yet.\n\nI have reviewed the changes made by the previous contributor and the feedback provided in their PR. Based on this, I have made the following updates:\r\n1.\tcore/templates/domain/objects/NumberWithUnitsObjectFactory.ts\r\n\tModified to correctly display the appropriate version.\r\n2.\tAdditional File Updates\r\n\tUpdated relevant files to ensure the correct version is reflected throughout.\r\nI believe these changes address the issue. can you please assign this issue to me \r\n\r\nhttps://github.com/user-attachments/assets/640591a6-3c43-4988-b5df-a4e54acb974a\r\n\r\n\n\nHi @seanlip, should I provide more details about the specific files I’ve changed?\n\n@himkar-cmd Yes, please provide more details. \r\n\r\nAlso, have you looked at the comments in https://github.com/oppia/oppia/pull/20361 ? I think you've addressed some of them but not the one about parens: https://github.com/oppia/oppia/pull/20361#issuecomment-2193936322. It would be helpful to know your approach for that.\n\nHi @seanlip , I have used getCanonicalRepresentationOfUnits which is already decleared in file core\\templates\\domain\\objects\\NumberWithUnitsObjectFactory.ts \r\n![Screenshot 2025-01-04 071441](https://github.com/user-attachments/assets/5b9d0403-07fb-4d8b-88e7-4f36e2432b37)\r\nin file core\\templates\\domain\\objects\\UnitsObjectFactorySpec.ts\r\n![Screenshot 2025-01-04 071928](https://github.com/user-attachments/assets/3aa4d164-8d85-45d9-bc97-4bcf488ea22f)\r\nIn file - extensions\\interactions\\NumberWithUnits\\directives\\oppia-interactive-number-with-units.component.ts\r\n![Screenshot 2025-01-04 072036](https://github.com/user-attachments/assets/98d98789-54d7-4086-bcb1-ce57dc26182e)\r\nthese are the files mainly i have changed and other changes in file is same as last contributor\r\nAbout parens: i read the comments given in previous contributor PR i think it show \r\n\r\nhttps://github.com/user-attachments/assets/5302065d-8d26-4f4f-bbe3-9ff896121988\r\n\r\n\r\n So when i use km / (s s) it suggest km^1s^-2 and km / (m*s) it correct so insted for negative power we can combine all and suggest to write power with positive and power of negetive like in this video -\r\n\r\nhttps://github.com/user-attachments/assets/af608c2c-64f8-48a9-924f-a8f55d3d3963\r\n\r\nbecause both km / (m*s) and km^1m^-1s^-1 is correct so throwing error is wrong in this case i think it create confusion that while entering km/(s s) it suggest km^1s^-2 and km/(m*s) it show nothing please let me know if you agree with this and in above picture dont consider variable name i will change it .\n\n@himkar-cmd Thanks for the update. I think you shouldn't be showing the \"^1\", it should just be \"m s\" and not m^1 s^1. But if you plan to keep a \"/\" sign then there does need to be parens around the denominator if there is more than one term. Your suggested rewriting doesn't handle that properly.\r\n\r\nAlso could you please demonstrate how you handle \"kg/(m/s)\"?\r\n\r\nThanks.\n\nHi @seanlip can you please look at this --\r\n\r\nhttps://github.com/user-attachments/assets/5ed01e8f-cef9-4c77-8d2a-9d027afaa4ff\r\n\r\n\n\nThanks, the last error message seems a bit wrong though. \"/\" is not a unit. Also there should be a space between \"kg\" and \"s\", so that the final rewrite is \"kg s/m\".\r\n\r\nAlso, what coding approach/algorithm are you using to handle this case? Just need to ask in order to verify that it's properly generalizable.\n\nHi @seanlip , this is code -- \r\nin file oppia\\core\\templates\\domain\\objects\\NumberWithUnitsObjectFactory.ts\r\n![Screenshot 2025-01-06 194903](https://github.com/user-attachments/assets/d6e5669f-d781-445b-a227-1e55b1efcac4)\r\nin file\r\noppia\\core\\templates\\domain\\objects\\UnitsObjectFactory.ts\r\n![Screenshot 2025-01-06 195006](https://github.com/user-attachments/assets/9671d899-3784-4e08-a4d7-50ab2c975018)\r\nin file \r\noppia\\extensions\\interactions\\NumberWithUnits\\directives\\number-with-units-interaction.component.html\r\n![Screenshot 2025-01-06 195102](https://github.com/user-attachments/assets/b9cbe30d-bdf4-4e38-a1f7-84fffeef4b6d)\r\nin file\r\noppia\\extensions\\interactions\\NumberWithUnits\\directives\\oppia-interactive-number-with-units.component.ts\r\n![Screenshot 2025-01-06 195206](https://github.com/user-attachments/assets/59d7e30b-a2aa-4759-8130-2b1fdf6f1a63)\r\nin file\r\noppia\\extensions\\objects\\templates\\number-with-units-editor.component.html\r\n![Screenshot 2025-01-06 195339](https://github.com/user-attachments/assets/f95d5d57-3839-4132-b9ee-f315d5edb0e8)\r\nin file \r\noppia\\extensions\\objects\\templates\\number-with-units-editor.component.ts\r\n![Screenshot 2025-01-06 195447](https://github.com/user-attachments/assets/beecca84-e7c8-4aa4-ba81-8c520a491fe5)\r\nI tried to follow the suggestion you gave --\r\n\r\nhttps://github.com/user-attachments/assets/39adfe00-87d4-4e77-8399-819fcd3839eb\r\n\r\n\r\nwhen slash is used more than one can you please suggest the format of message.\r\n\r\n let me know if it is good or not\n\nHi @seanlip and @AFZL210,\r\nCould someone please help confirm if my solution is generalizable or not?\n\nThanks @himkar-cmd. There are some issues in your code with naming and clarity of variables but this is probably good enough to start with. We can discuss the code issues in the PR review stage.\r\n\r\nFor the message:\r\n- If you can figure out the correct representation, you can use: 'Your answer contains more than one slash ('/'). Try rewriting it as ...\"\r\n- If you can't, you can use: 'Your answer contains more than one slash ('/'). Please rewrite it to use at most one slash.\"\r\n\r\nThere's one more question I have for you before assigning you to this issue. I think it's important that we have proper test cases for this functionality. Could you please provide a comprehensive list of test inputs and the corresponding messages (if any)? This should be implemented along with your PR; for now I would like to verify that the list is comprehensive and properly exercises all the requirements. Please try to go beyond what has been discussed above, e.g. there should be cases with more than two slashes etc. Thanks.\n\nHi @seanlip , I don't know how many test case i have to write but i have written some of them--\r\n\r\nInput: 2 km / (s s)\r\nMessage: Your answer contains a repeated unit: \"s\". Try rewriting it as \"km/s^2\".\r\nExplanation: This case handles repeated units within the same term. \r\n\r\nInput: 2 meter m\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"m^2\".\r\nExplanation: This case identifies repeated units with different naming conventions \r\n\r\nInput: 2 ((m)/(s²))(m/kg)\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"m^2/(s^2 kg)\".\r\nExplanation: This case handles nested parentheses and repeated units\r\n\r\nInput: 2 ((km/meter)/s meter)/kg\r\nMessage: Your answer contains a repeated unit: \"m\". Try rewriting it as \"km/(s kg)\".\r\nExplanation: This case demonstrates how to handle both repeated units and nested parentheses. And in case of nested parentheses and duplicated unit. It prioritize duplicated unit\r\n\r\nInput: 2 km/s/m/kg\r\nMessage: Your answer contains more than one slash ('/'). Try rewriting it as \"km/(s m kg)\".\r\nExplanation: This case addresses multiple slashes, which can cause ambiguity in unit\r\n\r\nis this okay or do i need to add more test cases?\r\n![Screenshot 2025-01-12 134153](https://github.com/user-attachments/assets/47932ce7-f850-4a9e-b56e-d7bace0400ca)\r\n\n\nThanks, some notes:\r\n\r\n- In the testing code, try to just have the expectation in toThrowError be the full literal string (i.e. hardcode the expected value).\r\n- For the third one, is there a reason that doesn't trigger the \"multiple slashes\" issue?\r\n- Maybe add 2 m/(s^2 m/kg)) as a test case -- how is it handled?\r\n- In the fourth case should we say \"meter\" since \"m\" doesn't appear anywhere?\r\n- You might want to think about more test cases. Off the top of my head, you're missing test cases for at least the following ... see if you can think of more:\r\n  - Multiple duplicate units, e.g. km km / s s\r\n  - Triplicate units, e.g. km / (s s s)\r\n  - Invalid/unrecognized duplicate units, e.g. km invalid invalid\r\n  - Duplicate units with exponents, e.g. s km s^-3\r\n",
  "pr_link": "https://github.com/oppia/oppia/pull/20361",
  "code_context": [
    {
      "filename": "core/templates/domain/objects/NumberWithUnitsObjectFactory.ts",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating instances of NumberWithUnits\n * domain objects.\n */\n\nimport {Injectable} from '@angular/core';\nimport {downgradeInjectable} from '@angular/upgrade/static';\n\nimport {Fraction} from 'domain/objects/fraction.model';\nimport {ObjectsDomainConstants} from 'domain/objects/objects-domain.constants';\nimport {Units, UnitsObjectFactory} from 'domain/objects/UnitsObjectFactory';\nimport {Unit, NumberWithUnitsAnswer} from 'interactions/answer-defs';\nimport {unit as mathjsUnit} from 'mathjs';\n\ntype CurrencyUnitsKeys = (keyof typeof ObjectsDomainConstants.CURRENCY_UNITS)[];\n\nexport const getCurrencyUnits = (): string[] => {\n  let currencyUnits: string[] = [];\n  for (const currency in ObjectsDomainConstants.CURRENCY_UNITS) {\n    const currencyInfo = ObjectsDomainConstants.CURRENCY_UNITS[currency];\n    currencyUnits.push(currency, ...currencyInfo.aliases);\n  }\n\n  return currencyUnits;\n};\n\nlet currencyUnits = getCurrencyUnits();\n\n/* Guidelines for adding new custom currency units in Number with Units\n  interaction:\n  Simply add currency unit to the dict of CURRENCY_UNITS constant and it will\n  be automatically added to the allowed custom units. Following are the keys\n  to be defined within the unit dict:\n    name:  The name of the custom currency unit.\n    aliases: Other allowed canonical forms of the currency unit.\n    front_units: A list of all the currency symbols that are added to the front\n      (like- $, Rs, ₹). Keep it an empty list if no symbol is needed.\n    base_unit: Define the unit in terms of base unit only if the defined custom\n      unit is a sub unit else assign it 'null' value.*/\nexport class NumberWithUnits {\n  type: string;\n  real: number;\n  fraction: Fraction;\n  units: Unit[];\n\n  constructor(\n    type: string,\n    real: number,\n    fractionObj: Fraction,\n    unitsObj: Units\n  ) {\n    this.type = type;\n\n    if (this.type === 'real') {\n      if (fractionObj.numerator !== 0 || fractionObj.wholeNumber !== 0) {\n        throw new Error('Number with type real cannot have a fraction part.');\n      }\n    } else if (this.type === 'fraction') {\n      if (real !== 0) {\n        throw new Error('Number with type fraction cannot have a real part.');\n      }\n    }\n\n    this.real = real;\n    this.fraction = fractionObj;\n    this.units = unitsObj.units;\n  }\n\n  toString(): string {\n    let numberWithUnitsString = '';\n    // The NumberWithUnits class is allowed to have 4 properties namely\n    // type, real, fraction and units. Hence, we cannot inject\n    // UnitsObjectFactory, since that'll lead to creation of 5th property\n    // which isn't allowed. Refer objects.py L#956.\n    let unitsString = new UnitsObjectFactory().fromList(this.units).toString();\n    if (unitsString.includes('$')) {\n      unitsString = unitsString.replace('$', '');\n      numberWithUnitsString += '$' + ' ';\n    }\n    if (unitsString.includes('Rs')) {\n      unitsString = unitsString.replace('Rs', '');\n      numberWithUnitsString += 'Rs' + ' ';\n    }\n    if (unitsString.includes('₹')) {\n      unitsString = unitsString.replace('₹', '');\n      numberWithUnitsString += '₹' + ' ';\n    }\n\n    if (this.type === 'real') {\n      numberWithUnitsString += this.real + ' ';\n    } else if (this.type === 'fraction') {\n      numberWithUnitsString += this.fraction.toString() + ' ';\n    }\n    numberWithUnitsString += unitsString.trim();\n    numberWithUnitsString = numberWithUnitsString.trim();\n    return numberWithUnitsString;\n  }\n\n  toMathjsCompatibleString(): string {\n    let numberWithUnitsString = '';\n    let unitsString = new UnitsObjectFactory().fromList(this.units).toString();\n    unitsString = new UnitsObjectFactory().toMathjsCompatibleString(\n      unitsString\n    );\n\n    if (this.type === 'real') {\n      numberWithUnitsString += this.real + ' ';\n    } else if (this.type === 'fraction') {\n      numberWithUnitsString += this.fraction.toString() + ' ';\n    }\n    numberWithUnitsString += unitsString.trim();\n    numberWithUnitsString = numberWithUnitsString.trim();\n\n    return numberWithUnitsString;\n  }\n\n  toDict(): NumberWithUnitsAnswer {\n    return {\n      type: this.type,\n      real: this.real,\n      fraction: this.fraction?.toDict(),\n      units: this.units,\n    };\n  }\n\n  getCanonicalRepresentationOfUnits(): Unit[] {\n    const updatedUnits = this.units.map(({unit, exponent}: Unit) => {\n      const baseUnit = currencyUnits.includes(unit)\n        ? ObjectsDomainConstants.UNIT_TO_NORMALIZED_UNIT_MAPPING[unit]\n        : mathjsUnit(unit).units[0].unit.name;\n\n      const unitPrefix = currencyUnits.includes(unit)\n        ? ''\n        : mathjsUnit(unit).units[0].prefix.name;\n\n      let normalizedUnit =\n        (ObjectsDomainConstants.PREFIX_TO_NORMALIZED_PREFIX_MAPPING[\n          unitPrefix\n        ] ?? '') +\n        ObjectsDomainConstants.UNIT_TO_NORMALIZED_UNIT_MAPPING[baseUnit];\n\n      return {\n        unit: normalizedUnit,\n        exponent: exponent,\n      };\n    });\n\n    updatedUnits.sort((a: Unit, b: Unit) => {\n      return a.unit.localeCompare(b.unit);\n    });\n\n    return updatedUnits;\n  }\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NumberWithUnitsObjectFactory {\n  constructor(private unitsFactory: UnitsObjectFactory) {}\n  createCurrencyUnits(): void {\n    try {\n      this.unitsFactory.createCurrencyUnits();\n    } catch (parsingError) {}\n  }\n\n  fromRawInputString(rawInput: string): NumberWithUnits {\n    rawInput = rawInput.trim();\n    let type = '';\n    let real = 0.0;\n    // Default fraction value.\n    let fractionObj = Fraction.fromRawInputString('0/1');\n    let units = '';\n    let value = '';\n\n    // Allow validation only when rawInput is not null or an empty string.\n    if (rawInput !== '' && rawInput !== null) {\n      // Start with digit when there is no currency unit.\n      if (rawInput.match(/^\\d/)) {\n        let ind = rawInput.indexOf(String(rawInput.match(/[a-z(₹$]/i)));\n        if (ind === -1) {\n          // There is value with no units.\n          value = rawInput;\n          units = '';\n        } else {\n          value = rawInput.substr(0, ind).trim();\n          units = rawInput.substr(ind).trim();\n        }\n\n        const keys = Object.keys(\n          ObjectsDomainConstants.CURRENCY_UNITS\n        ) as CurrencyUnitsKeys;\n        for (let i = 0; i < keys.length; i++) {\n          let unitLength =\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length;\n          for (let j = 0; j < unitLength; j++) {\n            if (\n              units.indexOf(\n                ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j]\n              ) !== -1\n            ) {\n              throw new Error(\n                ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_CURRENCY_FORMAT\n              );\n            }\n          }\n        }\n      } else {\n        let startsWithCorrectCurrencyUnit = false;\n        const keys = Object.keys(\n          ObjectsDomainConstants.CURRENCY_UNITS\n        ) as CurrencyUnitsKeys;\n        for (let i = 0; i < keys.length; i++) {\n          let unitLength =\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length;\n          for (let j = 0; j < unitLength; j++) {\n            if (\n              rawInput.startsWith(\n                ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j]\n              )\n            ) {\n              startsWithCorrectCurrencyUnit = true;\n              break;\n            }\n          }\n        }\n        if (startsWithCorrectCurrencyUnit === false) {\n          throw new Error(\n            // eslint-disable-next-line max-len\n            ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_CURRENCY\n          );\n        }\n        const ind = rawInput.indexOf(String(rawInput.match(/[0-9]/)));\n        if (ind === -1) {\n          throw new Error(\n            // eslint-disable-next-line max-len\n            ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_CURRENCY\n          );\n        }\n        units = rawInput.substr(0, ind).trim();\n\n        startsWithCorrectCurrencyUnit = false;\n        for (let i = 0; i < keys.length; i++) {\n          let unitLength =\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length;\n          for (let j = 0; j < unitLength; j++) {\n            if (\n              units ===\n              ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[\n                j\n              ].trim()\n            ) {\n              startsWithCorrectCurrencyUnit = true;\n              break;\n            }\n          }\n        }\n        if (startsWithCorrectCurrencyUnit === false) {\n          throw new Error(\n            // eslint-disable-next-line max-len\n            ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_CURRENCY\n          );\n        }\n        units = units + ' ';\n\n        const ind2 = rawInput.indexOf(\n          String(rawInput.substr(ind).match(/[a-z(]/i))\n        );\n        if (ind2 !== -1) {\n          value = rawInput.substr(ind, ind2 - ind).trim();\n          units += rawInput.substr(ind2).trim();\n        } else {\n          value = rawInput.substr(ind).trim();\n          units = units.trim();\n        }\n      }\n      // Checking invalid characters in value.\n      if (value.match(/[a-z]/i) || value.match(/[*^$₹()#@]/)) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_VALUE\n        );\n      }\n\n      if (value.includes('/')) {\n        type = 'fraction';\n        fractionObj = Fraction.fromRawInputString(value);\n      } else {\n        type = 'real';\n        real = parseFloat(value);\n      }\n      if (units !== '') {\n        // Checking invalid characters in units.\n        if (units.match(/[^0-9a-z/* ^()₹$-]/i)) {\n          throw new Error(\n            // eslint-disable-next-line max-len\n            ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS.INVALID_UNIT_CHARS\n          );\n        }\n      }\n    }\n\n    const unitsObj = this.unitsFactory.fromRawInputString(units);\n    let duplicatedUnit = this.unitsFactory.duplicatedUnit(units);\n    if (duplicatedUnit !== '') {\n      throw new Error(\n        ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS\n          .INVALID_DOUBLE_UNIT +\n          ' ' +\n          duplicatedUnit\n      );\n    }\n    return new NumberWithUnits(type, real, fractionObj, unitsObj);\n  }\n\n  fromDict(numberWithUnitsDict: NumberWithUnitsAnswer): NumberWithUnits {\n    return new NumberWithUnits(\n      numberWithUnitsDict.type,\n      numberWithUnitsDict.real,\n      Fraction.fromDict(numberWithUnitsDict.fraction),\n      this.unitsFactory.fromList(numberWithUnitsDict.units)\n    );\n  }\n}\n\nangular\n  .module('oppia')\n  .factory(\n    'NumberWithUnitsObjectFactory',\n    downgradeInjectable(NumberWithUnitsObjectFactory)\n  );\n"
    },
    {
      "filename": "core/templates/domain/objects/NumberWithUnitsObjectFactorySpec.ts",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview unit tests for number with units object type factory service.\n */\n\nimport {Fraction} from 'domain/objects/fraction.model';\nimport {\n  NumberWithUnits,\n  NumberWithUnitsObjectFactory,\n} from 'domain/objects/NumberWithUnitsObjectFactory';\nimport {ObjectsDomainConstants} from 'domain/objects/objects-domain.constants';\nimport {Units, UnitsObjectFactory} from 'domain/objects/UnitsObjectFactory';\n\ndescribe('NumberWithUnitsObjectFactory', () => {\n  describe('number with units object factory', () => {\n    let nwuof: NumberWithUnitsObjectFactory;\n    let uof: UnitsObjectFactory;\n    let errors: typeof ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS;\n\n    beforeEach(() => {\n      nwuof = new NumberWithUnitsObjectFactory(new UnitsObjectFactory());\n      uof = new UnitsObjectFactory();\n      errors = ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS;\n    });\n\n    it('should convert units to list format', () => {\n      expect(uof.fromStringToList('kg / kg^2 K mol / (N m s^2) K s')).toEqual([\n        {exponent: -1, unit: 'kg'},\n        {exponent: 2, unit: 'K'},\n        {exponent: 1, unit: 'mol'},\n        {exponent: -1, unit: 'N'},\n        {exponent: -1, unit: 'm'},\n        {exponent: -1, unit: 's'},\n      ]);\n      expect(uof.fromStringToList('mol/(kg / (N m / s^2)')).toEqual([\n        {exponent: 1, unit: 'mol'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -2, unit: 's'},\n      ]);\n      expect(\n        uof.fromStringToList('kg per kg^2 K mol per (N m s^2) K s')\n      ).toEqual([\n        {exponent: -1, unit: 'kg'},\n        {exponent: 2, unit: 'K'},\n        {exponent: 1, unit: 'mol'},\n        {exponent: -1, unit: 'N'},\n        {exponent: -1, unit: 'm'},\n        {exponent: -1, unit: 's'},\n      ]);\n    });\n\n    it('should convert units from list to string format', () => {\n      expect(\n        new Units([\n          {exponent: -1, unit: 'kg'},\n          {exponent: 2, unit: 'K'},\n          {exponent: 1, unit: 'mol'},\n          {exponent: -1, unit: 'N'},\n          {exponent: -1, unit: 'm'},\n          {exponent: -1, unit: 's'},\n        ]).toString()\n      ).toBe('kg^-1 K^2 mol N^-1 m^-1 s^-1');\n      expect(\n        new Units([\n          {exponent: 1, unit: 'mol'},\n          {exponent: -1, unit: 'kg'},\n          {exponent: 1, unit: 'N'},\n          {exponent: 1, unit: 'm'},\n          {exponent: -2, unit: 's'},\n        ]).toString()\n      ).toBe('mol kg^-1 N m s^-2');\n    });\n\n    it('should convert units from string to lexical format', () => {\n      expect(uof.stringToLexical('kg per kg^2 K mol / (N m s^2) K s')).toEqual([\n        'kg',\n        '/',\n        'kg^2',\n        '*',\n        'K',\n        '*',\n        'mol',\n        '/',\n        '(',\n        'N',\n        '*',\n        'm',\n        '*',\n        's^2',\n        ')',\n        'K',\n        '*',\n        's',\n      ]);\n      expect(uof.stringToLexical('kg (K mol) m/s^2 r t / (l/ n) / o')).toEqual([\n        'kg',\n        '(',\n        'K',\n        '*',\n        'mol',\n        ')',\n        'm',\n        '/',\n        's^2',\n        '*',\n        'r',\n        '*',\n        't',\n        '/',\n        '(',\n        'l',\n        '/',\n        'n',\n        ')',\n        '/',\n        'o',\n      ]);\n      expect(uof.stringToLexical('mol per (kg per (N m per s^2)*K)')).toEqual([\n        'mol',\n        '/',\n        '(',\n        'kg',\n        '/',\n        '(',\n        'N',\n        '*',\n        'm',\n        '/',\n        's^2',\n        ')',\n        '*',\n        'K',\n        ')',\n      ]);\n    });\n\n    it('should convert number with units object to a string', () => {\n      expect(\n        new NumberWithUnits(\n          'real',\n          2.02,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('m / s^2')\n        ).toString()\n      ).toBe('2.02 m s^-2');\n      expect(\n        new NumberWithUnits(\n          'real',\n          2.02,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('Rs')\n        ).toString()\n      ).toBe('Rs 2.02');\n      expect(\n        new NumberWithUnits(\n          'real',\n          2.02,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('₹')\n        ).toString()\n      ).toBe('₹ 2.02');\n      expect(\n        new NumberWithUnits(\n          'real',\n          2,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('')\n        ).toString()\n      ).toBe('2');\n      expect(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(true, 0, 4, 3),\n          uof.fromRawInputString('m / s^2')\n        ).toString()\n      ).toBe('-4/3 m s^-2');\n      expect(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 0, 4, 3),\n          uof.fromRawInputString('$ per hour')\n        ).toString()\n      ).toBe('$ 4/3 hour^-1');\n      expect(\n        new NumberWithUnits(\n          'real',\n          40,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('Rs per hour')\n        ).toString()\n      ).toBe('Rs 40 hour^-1');\n      expect(\n        new NumberWithUnits(\n          'real',\n          40,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('₹ per hour')\n        ).toString()\n      ).toBe('₹ 40 hour^-1');\n    });\n\n    it('should parse valid units strings', () => {\n      expect(uof.fromRawInputString('kg per (K mol^-2)')).toEqual(\n        new Units(uof.fromStringToList('kg / (K mol^-2)'))\n      );\n      expect(uof.fromRawInputString('kg / (K mol^-2) N / m^2')).toEqual(\n        new Units(uof.fromStringToList('kg / (K mol^-2) N / m^2'))\n      );\n    });\n\n    it('should parse valid number with units strings', () => {\n      expect(nwuof.fromRawInputString('2.02 kg / m^3')).toEqual(\n        new NumberWithUnits(\n          'real',\n          2.02,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('kg / m^3')\n        )\n      );\n      expect(nwuof.fromRawInputString('2 / 3 kg / m^3')).toEqual(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 0, 2, 3),\n          uof.fromRawInputString('kg / m^3')\n        )\n      );\n      expect(nwuof.fromRawInputString('2')).toEqual(\n        new NumberWithUnits(\n          'real',\n          2,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('')\n        )\n      );\n      expect(nwuof.fromRawInputString('2 / 3')).toEqual(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 0, 2, 3),\n          uof.fromRawInputString('')\n        )\n      );\n      expect(nwuof.fromRawInputString('$ 2.02')).toEqual(\n        new NumberWithUnits(\n          'real',\n          2.02,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('$')\n        )\n      );\n      expect(nwuof.fromRawInputString('Rs 2 / 3 per hour')).toEqual(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 0, 2, 3),\n          uof.fromRawInputString('Rs / hour')\n        )\n      );\n      expect(nwuof.fromRawInputString('₹ 2 / 3 per hour')).toEqual(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 0, 2, 3),\n          uof.fromRawInputString('₹ / hour')\n        )\n      );\n    });\n\n    it('should throw errors for invalid number with units', () => {\n      expect(() => {\n        nwuof.fromRawInputString('3* kg');\n      }).toThrowError(errors.INVALID_VALUE);\n      expect(() => {\n        nwuof.fromRawInputString('$ 3*');\n      }).toThrowError(errors.INVALID_VALUE);\n      expect(() => {\n        nwuof.fromRawInputString('Rs 3^');\n      }).toThrowError(errors.INVALID_VALUE);\n      expect(() => {\n        nwuof.fromRawInputString('₹ 3^');\n      }).toThrowError(errors.INVALID_VALUE);\n      expect(() => {\n        nwuof.fromRawInputString('₹ - $25');\n      }).toThrowError(errors.INVALID_CURRENCY);\n      expect(() => {\n        nwuof.fromRawInputString('3# m/s');\n      }).toThrowError(errors.INVALID_VALUE);\n      expect(() => {\n        nwuof.fromRawInputString('3 $');\n      }).toThrowError(errors.INVALID_CURRENCY_FORMAT);\n      expect(() => {\n        nwuof.fromRawInputString('Rs5');\n      }).toThrowError(errors.INVALID_CURRENCY);\n      expect(() => {\n        nwuof.fromRawInputString('$');\n      }).toThrowError(errors.INVALID_CURRENCY);\n      expect(() => {\n        nwuof.fromRawInputString('kg 2 s^2');\n      }).toThrowError(errors.INVALID_CURRENCY);\n      expect(() => {\n        nwuof.fromRawInputString('2 m/s#');\n      }).toThrowError(errors.INVALID_UNIT_CHARS);\n      expect(() => {\n        nwuof.fromRawInputString('@ 2');\n      }).toThrowError(errors.INVALID_CURRENCY);\n      expect(() => {\n        nwuof.fromRawInputString('2 / 3 kg&^-2');\n      }).toThrowError(errors.INVALID_UNIT_CHARS);\n      expect(() => {\n        nwuof.fromRawInputString('2 m**2');\n      }).toThrowError('Unexpected \"*\" in \"m**2\" at index 2');\n      expect(() => {\n        nwuof.fromRawInputString('2 kg / m^(2)');\n      }).toThrowError(\n        'In \"kg / m^(2)\", \"^\" must be followed by a floating-point number'\n      );\n    });\n\n    it('should throw errors for duplicated units', () => {\n      expect(() => {\n        nwuof.fromRawInputString('2 km km');\n      }).toThrowError(errors.INVALID_DOUBLE_UNIT + ' ' + 'km');\n      expect(() => {\n        nwuof.fromRawInputString('2 kg/kg^4*K*mol');\n      }).toThrowError(errors.INVALID_DOUBLE_UNIT + ' ' + 'kg');\n    });\n\n    it('should create currency units', () => {\n      const createCurrencyUnitsSpy = spyOn(nwuof, 'createCurrencyUnits');\n      nwuof.createCurrencyUnits();\n      expect(createCurrencyUnitsSpy).toHaveBeenCalled();\n    });\n\n    it('should create NumberWithUnits object from dict', () => {\n      let numberWithUnitsObject = {\n        type: 'dummy-type',\n        real: 1,\n        fraction: {\n          isNegative: false,\n          wholeNumber: 2,\n          numerator: 1,\n          denominator: 3,\n        },\n        units: [\n          {\n            unit: 'kg',\n            exponent: 2,\n          },\n        ],\n      };\n\n      let createdNumberWithUnits = nwuof.fromDict(numberWithUnitsObject);\n      expect(createdNumberWithUnits.toDict()).toEqual(numberWithUnitsObject);\n    });\n\n    it(\n      'should throw error if real number contains fraction part or vice' +\n        ' versa when creating NumberWithUnits object from dict',\n      () => {\n        let realNumberWithFractionPart = {\n          type: 'real',\n          real: 1,\n          fraction: {\n            isNegative: false,\n            wholeNumber: 2,\n            numerator: 1,\n            denominator: 3,\n          },\n          units: [\n            {\n              unit: 'kg',\n              exponent: 2,\n            },\n          ],\n        };\n\n        let fractionNumberWithRealPart = {\n          type: 'fraction',\n          real: 1,\n          fraction: {\n            isNegative: false,\n            wholeNumber: 2,\n            numerator: 1,\n            denominator: 3,\n          },\n          units: [\n            {\n              unit: 'kg',\n              exponent: 2,\n            },\n          ],\n        };\n\n        expect(() => nwuof.fromDict(realNumberWithFractionPart)).toThrowError(\n          'Number with type real cannot have a fraction part.'\n        );\n        expect(() => nwuof.fromDict(fractionNumberWithRealPart)).toThrowError(\n          'Number with type fraction cannot have a real part.'\n        );\n      }\n    );\n\n    it('should convert list to math.js compatible string', () => {\n      expect(\n        new NumberWithUnits(\n          'real',\n          1,\n          new Fraction(false, 0, 0, 1),\n          new Units([{unit: 'kg', exponent: 2}])\n        ).toMathjsCompatibleString()\n      ).toBe('1 kg^2');\n\n      expect(\n        new NumberWithUnits(\n          'fraction',\n          0,\n          new Fraction(false, 2, 1, 3),\n          new Units([{unit: 'kg', exponent: 2}])\n        ).toMathjsCompatibleString()\n      ).toBe('2 1/3 kg^2');\n    });\n\n    it(\n      'should throw error when creating NumberWithUnitsObject having real' +\n        ' type with fraction part or vice versa',\n      () => {\n        expect(() =>\n          new NumberWithUnits(\n            'real',\n            1,\n            new Fraction(false, 2, 1, 3),\n            new Units([{unit: 'kg', exponent: 2}])\n          ).toMathjsCompatibleString()\n        ).toThrowError('Number with type real cannot have a fraction part.');\n\n        expect(() =>\n          new NumberWithUnits(\n            'fraction',\n            1,\n            new Fraction(false, 2, 1, 3),\n            new Units([{unit: 'kg', exponent: 2}])\n          ).toMathjsCompatibleString()\n        ).toThrowError('Number with type fraction cannot have a real part.');\n      }\n    );\n\n    it('should convert units to their canonical form', () => {\n      expect(\n        new NumberWithUnits(\n          'real',\n          1,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('celsius / meter')\n        ).getCanonicalRepresentationOfUnits()\n      ).toEqual(\n        new Units([\n          {unit: 'degC', exponent: 1},\n          {unit: 'm', exponent: -1},\n        ]).units\n      );\n\n      expect(\n        new NumberWithUnits(\n          'real',\n          24,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('dollar / megatonne')\n        ).getCanonicalRepresentationOfUnits()\n      ).toEqual(\n        new Units([\n          {unit: 'dollar', exponent: 1},\n          {unit: 'Mton', exponent: -1},\n        ]).units\n      );\n\n      expect(\n        new NumberWithUnits(\n          'real',\n          1,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('m / in')\n        ).getCanonicalRepresentationOfUnits()\n      ).toEqual(\n        new Units([\n          {unit: 'in', exponent: -1},\n          {unit: 'm', exponent: 1},\n        ]).units\n      );\n\n      expect(\n        new NumberWithUnits(\n          'real',\n          1,\n          new Fraction(false, 0, 0, 1),\n          uof.fromRawInputString('m / Rupee')\n        ).getCanonicalRepresentationOfUnits()\n      ).toEqual(\n        new Units([\n          {unit: 'm', exponent: 1},\n          {unit: 'Rs', exponent: -1},\n        ]).units\n      );\n    });\n\n    it('should convert units to their canonical form and sort them lexographically', () => {\n      expect(\n        new NumberWithUnits(\n          'real',\n          1,\n          new Fraction(false, 0, 0, 1),\n          new Units([\n            {unit: 'newton', exponent: 1},\n            {unit: 'meter', exponent: -1},\n            {unit: 'celsius', exponent: -2},\n            {unit: 'arcminutes', exponent: -3},\n            {unit: 'cycle', exponent: -1},\n          ])\n        ).getCanonicalRepresentationOfUnits()\n      ).toEqual(\n        new Units([\n          {unit: 'arcmin', exponent: -3},\n          {unit: 'cycle', exponent: -1},\n          {unit: 'degC', exponent: -2},\n          {unit: 'm', exponent: -1},\n          {unit: 'N', exponent: 1},\n        ]).units\n      );\n    });\n  });\n});\n"
    },
    {
      "filename": "core/templates/domain/objects/UnitsObjectFactory.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Factory for creating instances of Units domain objects.\n */\n\nimport {downgradeInjectable} from '@angular/upgrade/static';\nimport {Injectable} from '@angular/core';\n\nimport {createUnit, unit} from 'mathjs';\nimport {ObjectsDomainConstants} from 'domain/objects/objects-domain.constants';\nimport {Unit} from 'interactions/answer-defs';\n\ninterface UnitsBackendDict {\n  units: Unit[];\n}\n\ninterface UnitsDict {\n  [unit: string]: number;\n}\n\ntype CurrencyUnitsKeys = (keyof typeof ObjectsDomainConstants.CURRENCY_UNITS)[];\n\nexport class Units {\n  units: Unit[];\n  constructor(unitsList: Unit[]) {\n    this.units = unitsList;\n  }\n\n  toDict(): UnitsBackendDict {\n    return {\n      units: this.units,\n    };\n  }\n\n  toString(): string {\n    var unit = '';\n    for (var i = 0; i < this.units.length; i++) {\n      var d = this.units[i];\n      if (d.exponent === 1) {\n        unit += d.unit + ' ';\n      } else {\n        unit += d.unit + '^' + d.exponent.toString() + ' ';\n      }\n    }\n    return unit.trim();\n  }\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnitsObjectFactory {\n  isunit(unit: string): boolean {\n    return !'/*() '.includes(unit);\n  }\n\n  isLastElementUnit(unitList: string[]): boolean {\n    return (\n      unitList.length > 0 && this.isunit(unitList.slice(-1).pop() as string)\n    );\n  }\n\n  stringToLexical(units: string): string[] {\n    units += '#';\n    var unitList = [];\n    var unit = '';\n    for (var i = 0; i < units.length; i++) {\n      if ('*/()# '.includes(units[i]) && unit !== 'per') {\n        if (unit.length > 0) {\n          if (this.isLastElementUnit(unitList)) {\n            unitList.push('*');\n          }\n          unitList.push(unit);\n          unit = '';\n        }\n        if (!'# '.includes(units[i])) {\n          unitList.push(units[i]);\n        }\n      } else if (units[i] === ' ' && unit === 'per') {\n        unitList.push('/');\n        unit = '';\n      } else {\n        unit += units[i];\n      }\n    }\n    return unitList;\n  }\n\n  unitWithMultiplier(unitList: string[]): [string, number][] {\n    var multiplier = 1;\n    var unitsWithMultiplier: [string, number][] = [];\n    var parenthesisStack = [];\n\n    for (var ind = 0; ind < unitList.length; ind++) {\n      if (unitList[ind] === '/') {\n        multiplier = -multiplier;\n      } else if (unitList[ind] === '(') {\n        if (unitList[ind - 1] === '/') {\n          // If previous element was division then we need to inverse\n          // multiplier when we find its corresponsing closing parenthesis.\n          // Second element of pushed element is used for this purpose.\n          parenthesisStack.push(['(', -1]);\n        } else {\n          // If previous element was not division then we don't need to\n          // invert the multiplier.\n          parenthesisStack.push(['(', 1]);\n        }\n      } else if (unitList[ind] === ')') {\n        var elem = parenthesisStack.pop();\n        if (elem) {\n          multiplier = parseInt(elem[1] as string) * multiplier;\n        } else {\n          throw new Error('Close parenthesis with no open parenthesis');\n        }\n      } else if (this.isunit(unitList[ind])) {\n        unitsWithMultiplier.push([unitList[ind], multiplier]);\n        // If previous element was division then we need to invert\n        // multiplier.\n        if (unitList[ind - 1] === '/') {\n          multiplier = -multiplier;\n        }\n      }\n    }\n    return unitsWithMultiplier;\n  }\n\n  convertUnitDictToList(unitDict: UnitsDict): Unit[] {\n    var unitList: Unit[] = [];\n    for (var key in unitDict) {\n      unitList.push({unit: key, exponent: unitDict[key]});\n    }\n    return unitList;\n  }\n\n  unitToList(unitsWithMultiplier: [string, number][]): Unit[] {\n    var unitDict: UnitsDict = {};\n    for (var i = 0; i < unitsWithMultiplier.length; i++) {\n      var unit = unitsWithMultiplier[i][0];\n      var multiplier = unitsWithMultiplier[i][1];\n      var ind = unit.indexOf('^');\n      var s = null;\n      var power = null;\n      if (ind > -1) {\n        s = unit.substr(0, ind);\n        power = parseInt(unit.substr(ind + 1));\n      } else {\n        s = unit;\n        power = 1;\n      }\n      if (!(s in unitDict)) {\n        unitDict[s] = 0;\n      }\n      unitDict[s] += multiplier * power;\n    }\n    return this.convertUnitDictToList(unitDict);\n  }\n\n  fromList(unitsList: Unit[]): Units {\n    return new Units(unitsList);\n  }\n\n  fromStringToList(unitsString: string): Unit[] {\n    return this.unitToList(\n      this.unitWithMultiplier(this.stringToLexical(unitsString))\n    );\n  }\n\n  createCurrencyUnits(): void {\n    var keys = Object.keys(\n      ObjectsDomainConstants.CURRENCY_UNITS\n    ) as CurrencyUnitsKeys;\n    for (var i = 0; i < keys.length; i++) {\n      let baseUnitValue =\n        ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].base_unit;\n      if (baseUnitValue !== null) {\n        // Sub unit (like: paise, cents etc.).\n        createUnit(ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {\n          definition: baseUnitValue,\n          aliases: Object.values(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases\n          ),\n        });\n      } else {\n        // Base unit (like: rupees, dollar etc.).\n        createUnit(ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {\n          aliases: Object.values(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases\n          ),\n        });\n      }\n    }\n  }\n\n  toMathjsCompatibleString(units: string): string {\n    // Makes the units compatible with the math.js allowed format.\n    units = units.replace(/per/g, '/');\n\n    // Special symbols need to be replaced as math.js doesn't support custom\n    // units starting with special symbols. Also, it doesn't allow units\n    // followed by a number as in the case of currency units.\n    var keys = Object.keys(\n      ObjectsDomainConstants.CURRENCY_UNITS\n    ) as CurrencyUnitsKeys;\n    for (var i = 0; i < keys.length; i++) {\n      for (\n        var j = 0;\n        j < ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length;\n        j++\n      ) {\n        if (\n          units.includes(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j]\n          )\n        ) {\n          units = units.replace(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j],\n            ''\n          );\n          units = ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name + units;\n        }\n      }\n\n      for (\n        var j = 0;\n        j < ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases.length;\n        j++\n      ) {\n        if (\n          units.includes(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j]\n          )\n        ) {\n          units = units.replace(\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j],\n            ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name\n          );\n        }\n      }\n    }\n    return units.trim();\n  }\n\n  fromRawInputString(units: string): Units {\n    try {\n      this.createCurrencyUnits();\n    } catch (parsingError) {}\n\n    var compatibleUnits = this.toMathjsCompatibleString(units);\n    if (compatibleUnits !== '') {\n      unit(compatibleUnits);\n    }\n    return new Units(this.fromStringToList(units));\n  }\n\n  getAllInstancesOfUnits(units: string[]): string[] {\n    // Returns a list with all the instances of unit in a units list.\n    var instancesOfUnits: string[] = [];\n    units.forEach(entry => {\n      if (entry.includes('^')) {\n        this.getAllInstancesOfUnits(entry.split('^')).forEach(entryWoutExp => {\n          instancesOfUnits.push(entryWoutExp);\n        });\n      } else if (this.isunit(entry) && entry.length > 0) {\n        instancesOfUnits.push(entry.replace(/[0-9]/g, ''));\n      }\n    });\n    return instancesOfUnits;\n  }\n\n  duplicatedUnit(units: string): string {\n    var inputList = this.getAllInstancesOfUnits(this.stringToLexical(units));\n    var unitsRead = [];\n\n    for (var i in inputList) {\n      var unit = inputList[i];\n      if (unitsRead.indexOf(unit) >= 0) {\n        // If index >= 0 then unit has already been seen.\n        return unit;\n      } else {\n        unitsRead.push(unit);\n      }\n    }\n    return '';\n  }\n}\n\nangular\n  .module('oppia')\n  .factory('UnitsObjectFactory', downgradeInjectable(UnitsObjectFactory));\n"
    },
    {
      "filename": "core/templates/domain/objects/UnitsObjectFactorySpec.ts",
      "content": "// Copyright 2020 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview unit tests for the units object factory service.\n */\n\nimport {TestBed} from '@angular/core/testing';\nimport {Units, UnitsObjectFactory} from 'domain/objects/UnitsObjectFactory';\n\ndescribe('UnitsObjectFactory', () => {\n  let units: UnitsObjectFactory;\n\n  beforeEach(() => {\n    units = TestBed.get(UnitsObjectFactory);\n  });\n\n  it('should test the createCurrencyUnits function', () => {\n    const spy = spyOn(units, 'createCurrencyUnits');\n    units.createCurrencyUnits();\n    expect(spy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should convert unitsList to a string in units format', () => {\n    let UOF = new UnitsObjectFactory();\n    expect(UOF.fromList([{exponent: -1, unit: 'cents'}]).toString()).toBe(\n      'cents^-1'\n    );\n    expect(UOF.fromList([{exponent: 1, unit: 'mol'}]).toString()).toBe('mol');\n    expect(UOF.fromList([{exponent: 2, unit: 'N'}]).toString()).toBe('N^2');\n    expect(\n      UOF.fromList([\n        {exponent: 3, unit: 'cm'},\n        {exponent: -3, unit: 's'},\n      ]).toString()\n    ).toBe('cm^3 s^-3');\n    expect(\n      UOF.fromList([\n        {exponent: 1, unit: 'paise'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -2, unit: 's'},\n      ]).toString()\n    ).toBe('paise kg^-1 N m s^-2');\n  });\n\n  it('should convert units to list format', () => {\n    expect(units.fromStringToList('kg / kg^4 K mol / (N m s^2) K s')).toEqual([\n      {exponent: -3, unit: 'kg'},\n      {exponent: 2, unit: 'K'},\n      {exponent: 1, unit: 'mol'},\n      {exponent: -1, unit: 'N'},\n      {exponent: -1, unit: 'm'},\n      {exponent: -1, unit: 's'},\n    ]);\n    expect(units.fromStringToList('cm /(kg / (N m / s^3))')).toEqual([\n      {exponent: 1, unit: 'cm'},\n      {exponent: -1, unit: 'kg'},\n      {exponent: 1, unit: 'N'},\n      {exponent: 1, unit: 'm'},\n      {exponent: -3, unit: 's'},\n    ]);\n    expect(units.fromStringToList('mol per (kg per (N m per s^3) K)')).toEqual([\n      {exponent: 1, unit: 'mol'},\n      {exponent: -1, unit: 'kg'},\n      {exponent: 1, unit: 'N'},\n      {exponent: 1, unit: 'm'},\n      {exponent: -3, unit: 's'},\n      {exponent: -1, unit: 'K'},\n    ]);\n    expect(units.fromStringToList('cents kg (N^7 per paise)')).toEqual([\n      {exponent: 1, unit: 'cents'},\n      {exponent: 1, unit: 'kg'},\n      {exponent: 7, unit: 'N'},\n      {exponent: -1, unit: 'paise'},\n    ]);\n  });\n\n  it('should convert units from string to lexical format', () => {\n    expect(\n      units.stringToLexical('kg per kg^4 K mol per (N m s^2) K s')\n    ).toEqual([\n      'kg',\n      '/',\n      'kg^4',\n      '*',\n      'K',\n      '*',\n      'mol',\n      '/',\n      '(',\n      'N',\n      '*',\n      'm',\n      '*',\n      's^2',\n      ')',\n      'K',\n      '*',\n      's',\n    ]);\n    expect(units.stringToLexical('cm /(kg / (N m / s^3))')).toEqual([\n      'cm',\n      '/',\n      '(',\n      'kg',\n      '/',\n      '(',\n      'N',\n      '*',\n      'm',\n      '/',\n      's^3',\n      ')',\n      ')',\n    ]);\n    expect(\n      units.stringToLexical('mol per (kg per (N m per s^3) paise)')\n    ).toEqual([\n      'mol',\n      '/',\n      '(',\n      'kg',\n      '/',\n      '(',\n      'N',\n      '*',\n      'm',\n      '/',\n      's^3',\n      ')',\n      'paise',\n      ')',\n    ]);\n  });\n\n  it('should parse valid units strings', () => {\n    let UOF = new UnitsObjectFactory();\n    expect(units.fromRawInputString('').toDict()).toEqual(\n      UOF.fromList([]).toDict()\n    );\n    expect(\n      units.fromRawInputString('kg per kg^4 K mol per (N m s^2) K s').toDict()\n    ).toEqual(\n      UOF.fromList([\n        {exponent: -3, unit: 'kg'},\n        {exponent: 2, unit: 'K'},\n        {exponent: 1, unit: 'mol'},\n        {exponent: -1, unit: 'N'},\n        {exponent: -1, unit: 'm'},\n        {exponent: -1, unit: 's'},\n      ]).toDict()\n    );\n    expect(units.fromRawInputString('cm /(kg / (N m / s^3))').toDict()).toEqual(\n      UOF.fromList([\n        {exponent: 1, unit: 'cm'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -3, unit: 's'},\n      ]).toDict()\n    );\n    expect(\n      units.fromRawInputString('cent per (kg per (N m per s^3) paise)').toDict()\n    ).toEqual(\n      UOF.fromList([\n        {exponent: 1, unit: 'cent'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -3, unit: 's'},\n        {exponent: -1, unit: 'paise'},\n      ]).toDict()\n    );\n  });\n\n  it('should have units without char /, *, (, )', () => {\n    expect(units.isunit('kg cm^3')).toBe(true);\n    expect(units.isunit('/*')).toBe(false);\n    expect(units.isunit('()')).toBe(false);\n  });\n\n  it('should convert new units from the list', () => {\n    expect(units.fromList([{exponent: -1, unit: 'kg'}])).toEqual(\n      new Units([{exponent: -1, unit: 'kg'}])\n    );\n    expect(units.fromList([{exponent: 1, unit: 'mol'}])).toEqual(\n      new Units([{exponent: 1, unit: 'mol'}])\n    );\n    expect(\n      units.fromList([\n        {exponent: 3, unit: 'cm'},\n        {exponent: -3, unit: 's'},\n      ])\n    ).toEqual(\n      new Units([\n        {exponent: 3, unit: 'cm'},\n        {exponent: -3, unit: 's'},\n      ])\n    );\n    expect(\n      units.fromList([\n        {exponent: 1, unit: 'paise'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -2, unit: 's'},\n      ])\n    ).toEqual(\n      new Units([\n        {exponent: 1, unit: 'paise'},\n        {exponent: -1, unit: 'kg'},\n        {exponent: 1, unit: 'N'},\n        {exponent: 1, unit: 'm'},\n        {exponent: -2, unit: 's'},\n      ])\n    );\n  });\n\n  it('should have the correct division form with multiplier', () => {\n    expect(\n      units.unitWithMultiplier(['cm', '/', '(', 'kg', '/', 'N', ')'])\n    ).toEqual([\n      ['cm', 1],\n      ['kg', -1],\n      ['N', 1],\n    ]);\n    expect(\n      units.unitWithMultiplier(['kg', '/', 'kg^4', '*', 'K', '*', 'mol'])\n    ).toEqual([\n      ['kg', 1],\n      ['kg^4', -1],\n      ['K', 1],\n      ['mol', 1],\n    ]);\n    expect(\n      units.unitWithMultiplier(['cent', '*', '(', 'kg', '/', 'N', ')'])\n    ).toEqual([\n      ['cent', 1],\n      ['kg', 1],\n      ['N', -1],\n    ]);\n    expect(() =>\n      units.unitWithMultiplier(['cm', '/', 'kg', '/', 'N', ')'])\n    ).toThrowError('Close parenthesis with no open parenthesis');\n  });\n\n  it('should convert a unit dict to a list', () => {\n    expect(\n      units.unitToList(\n        units.unitWithMultiplier(['cm', '/', '(', 'kg', '/', 'N', ')'])\n      )\n    ).toEqual([\n      {unit: 'cm', exponent: 1},\n      {unit: 'kg', exponent: -1},\n      {unit: 'N', exponent: 1},\n    ]);\n    expect(\n      units.unitToList(\n        units.unitWithMultiplier(['kg', '/', 'kg^4', '*', 'K', '*', 'mol'])\n      )\n    ).toEqual([\n      {unit: 'kg', exponent: -3},\n      {unit: 'K', exponent: 1},\n      {unit: 'mol', exponent: 1},\n    ]);\n    expect(\n      units.unitToList(\n        units.unitWithMultiplier(['cent', '*', '(', 'kg', '/', 'N', ')'])\n      )\n    ).toEqual([\n      {unit: 'cent', exponent: 1},\n      {unit: 'kg', exponent: 1},\n      {unit: 'N', exponent: -1},\n    ]);\n  });\n\n  it('should replace the special symbol because of math.js', () => {\n    expect(units.toMathjsCompatibleString('cents')).toEqual('cent');\n    expect(units.toMathjsCompatibleString('dollars kg')).toEqual('dollar kg');\n    expect(units.toMathjsCompatibleString('rupee cents')).toEqual('rupee cent');\n    expect(units.toMathjsCompatibleString('cent USD / Paisa')).toEqual(\n      'cent dollar / paise'\n    );\n  });\n\n  it('should throw errors for invalid units', () => {\n    expect(() => {\n      units.fromRawInputString('NK*kg');\n    }).toThrowError('Unit \"NK\" not found.');\n    expect(() => {\n      units.fromRawInputString('per &kg$');\n    }).toThrowError('Unexpected \"&\" in \"dollar/ &kg\" at index 8');\n    expect(() => {\n      units.fromRawInputString('cent %mol$');\n    }).toThrowError('Unit \"dollarcent\" not found.');\n  });\n\n  it('should return the dupplicated unit in a input string or an empty string', () => {\n    expect(units.duplicatedUnit('2 km km')).toEqual('km');\n    expect(units.duplicatedUnit('2 kg/kg^4*K*mol')).toEqual('kg');\n    expect(units.duplicatedUnit('2 kg/km^4*K*mol')).toEqual('');\n  });\n});\n"
    },
    {
      "filename": "core/templates/domain/objects/objects-domain.constants.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Constants for objects domain.\n */\n\nexport const ObjectsDomainConstants = {\n  FRACTION_PARSING_ERROR_I18N_KEYS: {\n    INVALID_CHARS_LENGTH: 'I18N_INTERACTIONS_FRACTIONS_INVALID_CHARS_LENGTH',\n    INVALID_CHARS: 'I18N_INTERACTIONS_FRACTIONS_INVALID_CHARS',\n    INVALID_FORMAT: 'I18N_INTERACTIONS_FRACTIONS_INVALID_FORMAT',\n    DIVISION_BY_ZERO: 'I18N_INTERACTIONS_FRACTIONS_DIVISION_BY_ZERO',\n  },\n\n  NUMBER_WITH_UNITS_PARSING_ERROR_I18N_KEYS: {\n    INVALID_VALUE: 'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_VALUE',\n    INVALID_CURRENCY: 'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_CURRENCY',\n    INVALID_CURRENCY_FORMAT:\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_CURRENCY_FORMAT',\n    INVALID_UNIT_CHARS:\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_UNIT_CHARS',\n    INVALID_DOUBLE_UNIT:\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS',\n  },\n\n  CURRENCY_UNITS: {\n    dollar: {\n      name: 'dollar',\n      aliases: ['$', 'dollars', 'Dollars', 'Dollar', 'USD'],\n      front_units: ['$'],\n      base_unit: null,\n    },\n    rupee: {\n      name: 'rupee',\n      aliases: ['Rs', 'rupees', '₹', 'Rupees', 'Rupee'],\n      front_units: ['Rs ', '₹'],\n      base_unit: null,\n    },\n    cent: {\n      name: 'cent',\n      aliases: ['cents', 'Cents', 'Cent'],\n      front_units: [],\n      base_unit: '0.01 dollar',\n    },\n    paise: {\n      name: 'paise',\n      aliases: ['paisa', 'Paise', 'Paisa'],\n      front_units: [],\n      base_unit: '0.01 rupee',\n    },\n  } as {\n    [key: string]: {\n      name: string;\n      aliases: string[];\n      front_units: string[];\n      base_unit: string | null;\n    };\n  },\n\n  RATIO_PARSING_ERROR_I18N_KEYS: {\n    INVALID_COLONS: 'I18N_INTERACTIONS_RATIO_INVALID_COLONS',\n    INVALID_CHARS: 'I18N_INTERACTIONS_RATIO_INVALID_CHARS',\n    INVALID_FORMAT: 'I18N_INTERACTIONS_RATIO_INVALID_FORMAT',\n    NON_INTEGER_ELEMENTS: 'I18N_INTERACTIONS_RATIO_NON_INTEGER_ELEMENTS',\n    INCLUDES_ZERO: 'I18N_INTERACTIONS_RATIO_INCLUDES_ZERO',\n    EMPTY_STRING: 'I18N_INTERACTIONS_RATIO_EMPTY_STRING',\n  },\n\n  // Used for converting units to their canonical forms.\n  // Keys represent unit name, and values are their canonical forms.\n  // Example: 'm' and 'meter' both map to 'm' (meters)\n  UNIT_TO_NORMALIZED_UNIT_MAPPING: {\n    // Length.\n    m: 'm',\n    meter: 'm',\n    meters: 'm',\n    in: 'in',\n    inch: 'in',\n    inches: 'in',\n    ft: 'ft',\n    foot: 'ft',\n    feet: 'ft',\n    yd: 'yd',\n    yard: 'yd',\n    yards: 'yd',\n    mi: 'mi',\n    mile: 'mi',\n    miles: 'mi',\n    li: 'li',\n    link: 'li',\n    links: 'li',\n    rd: 'rd',\n    rod: 'rd',\n    rods: 'rd',\n    ch: 'ch',\n    chain: 'ch',\n    chains: 'ch',\n    angstrom: 'angstrom',\n    angstroms: 'angstrom',\n    mil: 'mil',\n\n    // Surface area.\n    m2: 'm2',\n    sqin: 'sqin',\n    sqft: 'sqft',\n    sqfeet: 'sqft',\n    sqyd: 'sqyd',\n    sqyard: 'sqyd',\n    sqmi: 'sqmi',\n    sqrd: 'sqrd',\n    sqch: 'sqch',\n    sqmil: 'sqmil',\n    sqmile: 'sqmil',\n    sqmiles: 'sqmil',\n    acre: 'acre',\n    acres: 'acre',\n    hectare: 'hectare',\n    hectares: 'hectare',\n\n    // Volume.\n    m3: 'm3',\n    litre: 'l',\n    liter: 'l',\n    litres: 'l',\n    liters: 'l',\n    L: 'l',\n    l: 'l',\n    lt: 'l',\n    cc: 'cc',\n    cuin: 'cuin',\n    cuft: 'cuft',\n    cuyd: 'cuyd',\n    teaspoon: 'teaspoon',\n    teaspoons: 'teaspoon',\n    tablespoon: 'tablespoon',\n    tablespoons: 'tablespoon',\n\n    // Liquid volume.\n    minim: 'minim',\n    minims: 'minim',\n    fluiddram: 'fldr',\n    fluiddrams: 'fldr',\n    fldr: 'fldr',\n    fluidounce: 'floz',\n    fluidounces: 'floz',\n    floz: 'floz',\n    gill: 'gi',\n    gills: 'gi',\n    gi: 'gi',\n    cup: 'cp',\n    cups: 'cp',\n    cp: 'cp',\n    pint: 'pt',\n    pints: 'pt',\n    pt: 'pt',\n    quart: 'qt',\n    quarts: 'qt',\n    qt: 'qt',\n    gallon: 'gal',\n    gallons: 'gal',\n    gal: 'gal',\n    beerbarrel: 'bbl',\n    beerbarrels: 'bbl',\n    bbl: 'bbl',\n    oilbarrel: 'obl',\n    oilbarrels: 'obl',\n    obl: 'obl',\n    hogshead: 'hogshead',\n    hogsheads: 'hogshead',\n    drop: 'gtt',\n    gtt: 'gtt',\n    gtts: 'gtt',\n\n    // Angles.\n    rad: 'rad',\n    radian: 'rad',\n    radians: 'rad',\n    deg: 'deg',\n    degree: 'deg',\n    degrees: 'deg',\n    grad: 'grad',\n    gradian: 'grad',\n    gradians: 'grad',\n    cycle: 'cycle',\n    cycles: 'cycle',\n    arcsec: 'arcsec',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcmin: 'arcmin',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n\n    // Time.\n    second: 's',\n    seconds: 's',\n    s: 's',\n    sec: 's',\n    secs: 's',\n    minute: 'min',\n    minutes: 'min',\n    min: 'min',\n    mins: 'min',\n    h: 'hr',\n    hr: 'hr',\n    hrs: 'hr',\n    hour: 'hr',\n    hours: 'hr',\n    day: 'day',\n    days: 'day',\n    week: 'week',\n    weeks: 'week',\n    month: 'month',\n    months: 'month',\n    year: 'year',\n    years: 'year',\n    decade: 'decade',\n    decades: 'decade',\n    century: 'century',\n    centuries: 'century',\n    millennium: 'millennium',\n    millennia: 'millennium',\n\n    // Frequency.\n    Hz: 'Hz',\n    hertz: 'Hz',\n\n    // Mass.\n    g: 'g',\n    gram: 'g',\n    grams: 'g',\n    t: 'ton',\n    tonne: 'ton',\n    tonnes: 'ton',\n    ton: 'ton',\n    tons: 'ton',\n    gr: 'gr',\n    grain: 'gr',\n    grains: 'gr',\n    dr: 'dr',\n    dram: 'dr',\n    drams: 'dr',\n    oz: 'oz',\n    ounce: 'oz',\n    ounces: 'oz',\n    lbm: 'lb',\n    lb: 'lb',\n    lbs: 'lb',\n    poundmass: 'lb',\n    poundmasses: 'lb',\n    cwt: 'cwt',\n    hundredweight: 'cwt',\n    hundredweights: 'cwt',\n    stick: 'stick',\n    sticks: 'stick',\n    stone: 'stone',\n\n    // Temperature.\n    K: 'K',\n    kelvin: 'K',\n    degC: 'degC',\n    celsius: 'degC',\n    degF: 'degF',\n    fahrenheit: 'degF',\n    degR: 'degR',\n    rankine: 'degR',\n\n    // Amount of substance.\n    mol: 'mol',\n    mole: 'mol',\n    moles: 'mol',\n\n    // Luminous intensity.\n    cd: 'cd',\n    candela: 'cd',\n\n    // Force.\n    N: 'N',\n    newton: 'N',\n    dyn: 'dyn',\n    dyne: 'dyn',\n    lbf: 'lbf',\n    poundforce: 'lbf',\n    kip: 'kip',\n    kips: 'kip',\n    kgf: 'kgf',\n    kilogramforce: 'kgf',\n\n    // Energy.\n    J: 'J',\n    joule: 'J',\n    joules: 'J',\n    erg: 'erg',\n    Wh: 'Wh',\n    BTU: 'BTU',\n    BTUs: 'BTU',\n    eV: 'eV',\n    electronvolt: 'eV',\n    electronvolts: 'eV',\n\n    // Power.\n    W: 'W',\n    watt: 'W',\n    watts: 'W',\n    hp: 'hp',\n\n    // Pressure.\n    Pa: 'Pa',\n    psi: 'psi',\n    atm: 'atm',\n    torr: 'torr',\n    bar: 'bar',\n    mmHg: 'mmHg',\n    mmhg: 'mmHg',\n    mmH2O: 'mmH2O',\n    mmh2o: 'mmH2O',\n    cmH2O: 'cmH2O',\n    cmh2o: 'cmH2O',\n\n    // Electricity and magnetism.\n    A: 'A',\n    ampere: 'A',\n    amperes: 'A',\n    V: 'V',\n    volt: 'V',\n    volts: 'V',\n    C: 'C',\n    coulomb: 'C',\n    coulombs: 'C',\n    ohm: 'ohm',\n    ohms: 'ohm',\n    F: 'F',\n    farad: 'farad',\n    farads: 'farad',\n    Wb: 'Wb',\n    weber: 'Wb',\n    webers: 'Wb',\n    T: 'T',\n    tesla: 'T',\n    teslas: 'T',\n    H: 'H',\n    henry: 'H',\n    S: 'S',\n    siemens: 'S',\n    VA: 'VA',\n    VAR: 'VAR',\n\n    // Binary.\n    b: 'b',\n    bit: 'bit',\n    bits: 'bit',\n    B: 'B',\n    byte: 'B',\n    bytes: 'B',\n\n    // Currency.\n    $: 'dollar',\n    USD: 'dollar',\n    dollar: 'dollar',\n    dollars: 'dollar',\n    Dollar: 'dollar',\n    Dollars: 'dollar',\n    '₹': 'Rs',\n    Rs: 'Rs',\n    Rupee: 'Rs',\n    Rupees: 'Rs',\n    rupee: 'Rs',\n    rupees: 'Rs',\n    Cent: 'Cent',\n    Cents: 'Cent',\n    cent: 'Cent',\n    cents: 'Cent',\n    paise: 'Paisa',\n    paisa: 'Paisa',\n    Paise: 'Paisa',\n    Paisa: 'Paisa',\n  } as {[key: string]: string},\n\n  // Used for converting unit prefixes to their canonical forms.\n  // Keys represent prefix name, and values are their canonical forms.\n  // Example: 'kilo' and 'k' both map to 'k' (kilo)\n  PREFIX_TO_NORMALIZED_PREFIX_MAPPING: {\n    deca: 'da',\n    da: 'da',\n    hecto: 'h',\n    h: 'h',\n    kilo: 'k',\n    k: 'k',\n    mega: 'M',\n    M: 'M',\n    giga: 'G',\n    G: 'G',\n    tera: 'T',\n    T: 'T',\n    peta: 'P',\n    P: 'P',\n    exa: 'E',\n    E: 'E',\n    zetta: 'Z',\n    Z: 'Z',\n    yotta: 'Y',\n    Y: 'Y',\n    deci: 'd',\n    d: 'd',\n    centi: 'c',\n    c: 'c',\n    milli: 'm',\n    m: 'm',\n    micro: 'u',\n    u: 'u',\n    nano: 'n',\n    n: 'n',\n    pico: 'p',\n    p: 'p',\n    femto: 'f',\n    f: 'f',\n    atto: 'a',\n    a: 'a',\n    zepto: 'z',\n    z: 'z',\n    yocto: 'y',\n    y: 'y',\n    kibi: 'Ki',\n    Ki: 'Ki',\n    mebi: 'Mi',\n    Mi: 'Mi',\n    gibi: 'Gi',\n    Gi: 'Gi',\n    tebi: 'Ti',\n    Ti: 'Ti',\n    pebi: 'Pi',\n    Pi: 'Pi',\n    exi: 'Ei',\n    Ei: 'Ei',\n    zebi: 'Zi',\n    Zi: 'Zi',\n    yobi: 'Yi',\n    Yi: 'Yi',\n    MM: 'MM',\n  } as {[key: string]: string},\n} as const;\n"
    },
    {
      "filename": "extensions/interactions/NumberWithUnits/directives/number-with-units-interaction.component.html",
      "content": "<form autocomplete=\"off\" [attr.disabled]=\"!isValid\" role=\"form\" class=\"form-horizontal\" (submit)=\"submitAnswer()\">\n  <!-- This ng-form is needed for submitting answer on hitting enter. -->\n  <input type=\"text\"\n         name=\"answer\"\n         [(ngModel)]=\"answer\"\n         (ngModelChange)=\"answerValueChanged()\"\n         class=\"form-control\"\n         [oppiaFocusOn]=\"labelForFocusTarget\">\n  <div *ngIf=\"hasDuplicatedUnit()\" class=\"oppia-form-error oppia-units-input-error\">\n    <span [innerHTML]=\"'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS' | translate: {\n      duppedunit: problematicUnit,\n      messageFormat: true\n    }\"></span>\n  </div>\n\n  <div *ngIf=\"!hasDuplicatedUnit()\" class=\"oppia-form-error oppia-units-input-error\">\n    {{ errorMessageI18nKey | translate }}\n  </div>\n</form>\n<button class=\"btn btn-secondary\"\n        (click)=\"showHelp()\"\n        [innerHTML]=\"'I18N_INTERACTIONS_NUMBER_WITH_UNITS_POSSIBLE_UNIT_FORMATS' | translate\">\n</button>\n\n<style>\n  .oppia-units-input-error {\n    font-size: 0.90em;\n    margin-bottom: 5px;\n    margin-top: 5px;\n  }\n\n  .ng-invalid {\n    border-color: red;\n    outline-color: red;\n  }\n</style>\n"
    },
    {
      "filename": "extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.component.spec.ts",
      "content": "// Copyright 2021 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the NumberWithUnits interaction.\n */\n\nimport {\n  async,\n  ComponentFixture,\n  fakeAsync,\n  TestBed,\n  tick,\n  waitForAsync,\n} from '@angular/core/testing';\nimport {InteractiveNumberWithUnitsComponent} from './oppia-interactive-number-with-units.component';\nimport {CurrentInteractionService} from 'pages/exploration-player-page/services/current-interaction.service';\nimport {NumberWithUnitsObjectFactory} from 'domain/objects/NumberWithUnitsObjectFactory';\nimport {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {NO_ERRORS_SCHEMA} from '@angular/core';\nimport {\n  InteractionAnswer,\n  NumberWithUnitsAnswer,\n} from 'interactions/answer-defs';\n\ndescribe('Number with units interaction component', () => {\n  let component: InteractiveNumberWithUnitsComponent;\n  let fixture: ComponentFixture<InteractiveNumberWithUnitsComponent>;\n  let currentInteractionService: CurrentInteractionService;\n  let numberWithUnitsObjectFactory: NumberWithUnitsObjectFactory;\n  let ngbModal: NgbModal;\n\n  let mockCurrentInteractionService = {\n    updateViewWithNewAnswer: () => {},\n    onSubmit: (\n      answer: NumberWithUnitsAnswer,\n      rulesService: CurrentInteractionService\n    ) => {},\n    showNoResponseError: (): boolean => false,\n    updateCurrentAnswer: (answer: InteractionAnswer) => {},\n    registerCurrentInteraction: (\n      submitAnswerFn: Function,\n      validateExpressionFn: Function\n    ) => {\n      submitAnswerFn();\n      validateExpressionFn();\n    },\n  };\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [InteractiveNumberWithUnitsComponent],\n      imports: [\n        TranslateModule.forRoot({\n          useDefaultLang: true,\n          isolate: false,\n          extend: false,\n          defaultLanguage: 'en',\n        }),\n      ],\n      providers: [\n        {\n          provide: CurrentInteractionService,\n          useValue: mockCurrentInteractionService,\n        },\n        NumberWithUnitsObjectFactory,\n        NgbModal,\n      ],\n      schemas: [NO_ERRORS_SCHEMA],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    currentInteractionService = TestBed.inject(CurrentInteractionService);\n    numberWithUnitsObjectFactory = TestBed.inject(NumberWithUnitsObjectFactory);\n    ngbModal = TestBed.inject(NgbModal);\n    fixture = TestBed.createComponent(InteractiveNumberWithUnitsComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should initialise component when user adds or plays interaction', () => {\n    spyOn(numberWithUnitsObjectFactory, 'createCurrencyUnits');\n    spyOn(currentInteractionService, 'registerCurrentInteraction');\n\n    component.ngOnInit();\n\n    expect(component.answer).toBe('');\n    expect(numberWithUnitsObjectFactory.createCurrencyUnits).toHaveBeenCalled();\n    expect(\n      currentInteractionService.registerCurrentInteraction\n    ).toHaveBeenCalled();\n  });\n\n  it('should not display warning when the answer format is correct', fakeAsync(() => {\n    spyOn(currentInteractionService, 'updateCurrentAnswer');\n    component.errorMessageI18nKey = 'Unit \"xyz\" not found';\n    component.isValid = false;\n\n    // PreChecks.\n    expect(component.errorMessageI18nKey).toBe('Unit \"xyz\" not found');\n    expect(component.isValid).toBeFalse();\n\n    // Test: Correct answer.\n    component.answer = '24 km';\n\n    component.answerValueChanged();\n    tick(150);\n\n    // PostChecks: The format of the answer '24 km' is correct,\n    // Therefore we verify that the value of errorMessage is ''.\n    expect(component.errorMessageI18nKey).toBe('');\n    expect(component.isValid).toBeTrue();\n    expect(\n      currentInteractionService.updateCurrentAnswer\n    ).toHaveBeenCalledOnceWith('24 km');\n  }));\n\n  it('should display warning when the answer format is incorrect', fakeAsync(() => {\n    spyOn(currentInteractionService, 'updateCurrentAnswer');\n\n    // PreChecks.\n    expect(component.errorMessageI18nKey).toBe('');\n    expect(component.isValid).toBeTrue();\n\n    // Test: Incorrect answer.\n    component.answer = '24 k';\n\n    component.answerValueChanged();\n    tick(150);\n\n    // PostChecks: Error message as the Unit is incorrect.\n    expect(component.errorMessageI18nKey).toBe('Unit \"k\" not found.');\n    expect(component.isValid).toBeFalse();\n    expect(\n      currentInteractionService.updateCurrentAnswer\n    ).toHaveBeenCalledOnceWith('24 k');\n  }));\n\n  it(\"should close help modal when user clicks the 'close' button\", () => {\n    spyOn(ngbModal, 'open').and.returnValue({\n      result: Promise.reject('close'),\n    } as NgbModalRef);\n\n    component.showHelp();\n\n    expect(ngbModal.open).toHaveBeenCalled();\n  });\n\n  it(\"should display help modal when user clicks the 'help' button\", () => {\n    spyOn(ngbModal, 'open').and.returnValue({\n      result: Promise.resolve('confirm'),\n    } as NgbModalRef);\n\n    component.showHelp();\n\n    expect(ngbModal.open).toHaveBeenCalled();\n  });\n\n  it('should return false if the answer is invalid', () => {\n    component.answer = '';\n    component.isValid = false;\n\n    expect(component.isAnswerValid()).toBeFalse();\n  });\n\n  it('should save solution when user saves solution', () => {\n    component.savedSolution = {\n      type: 'real',\n      real: 24,\n      fraction: {\n        isNegative: false,\n        wholeNumber: 0,\n        numerator: 0,\n        denominator: 1,\n      },\n      units: [\n        {\n          unit: 'km',\n          exponent: 1,\n        },\n      ],\n    };\n    component.answer = '';\n\n    component.ngOnInit();\n\n    expect(component.answer).toBe('24 km');\n  });\n\n  it('should show error when user submits answer in incorrect format', () => {\n    component.answer = '24 k';\n    spyOn(currentInteractionService, 'showNoResponseError');\n\n    expect(component.errorMessageI18nKey).toBe('');\n\n    component.submitAnswer();\n\n    expect(component.errorMessageI18nKey).toBe('Unit \"k\" not found.');\n    expect(\n      currentInteractionService.showNoResponseError\n    ).not.toHaveBeenCalled();\n  });\n\n  it('should show no response error when answer is empty', () => {\n    component.answer = '';\n    spyOn(currentInteractionService, 'showNoResponseError').and.returnValue(\n      true\n    );\n    expect(component.errorMessageI18nKey).toBe('');\n\n    component.submitAnswer();\n\n    expect(component.errorMessageI18nKey).toBe(\n      'I18N_INTERACTIONS_INPUT_NO_RESPONSE'\n    );\n    expect(currentInteractionService.showNoResponseError).toHaveBeenCalledTimes(\n      1\n    );\n  });\n\n  it('should submit answer if answer is correct', () => {\n    component.answer = '24 km';\n    spyOn(currentInteractionService, 'showNoResponseError');\n    spyOn(numberWithUnitsObjectFactory, 'fromRawInputString');\n    spyOn(currentInteractionService, 'onSubmit');\n\n    component.submitAnswer();\n\n    expect(component.errorMessageI18nKey).toBe('');\n    expect(\n      currentInteractionService.showNoResponseError\n    ).not.toHaveBeenCalled();\n    expect(numberWithUnitsObjectFactory.fromRawInputString).toHaveBeenCalled();\n    expect(currentInteractionService.onSubmit).toHaveBeenCalled();\n  });\n\n  it('should throw uncaught errors that are not Error type', waitForAsync(() => {\n    spyOn(numberWithUnitsObjectFactory, 'fromRawInputString').and.callFake(\n      () => {\n        throw TypeError;\n      }\n    );\n\n    expect(() => {\n      component.submitAnswer();\n      // The eslint error is suppressed since we need to test if\n      // just a string was thrown.\n      // eslint-disable-next-line oppia/no-to-throw\n    }).toThrow(TypeError);\n  }));\n\n  it('should unsubscribe when component is destroyed', function () {\n    spyOn(component.componentSubscriptions, 'unsubscribe').and.callThrough();\n\n    expect(component.componentSubscriptions.closed).toBeFalse();\n\n    component.ngOnDestroy();\n\n    expect(component.componentSubscriptions.unsubscribe).toHaveBeenCalled();\n    expect(component.componentSubscriptions.closed).toBeTrue();\n  });\n\n  it('should show error when user submits answer contains dupplicated units', fakeAsync(() => {\n    spyOn(currentInteractionService, 'updateCurrentAnswer');\n\n    // PreChecks.\n    expect(component.errorMessageI18nKey).toBe('');\n    expect(component.isValid).toBeTrue();\n\n    // Test: Incorrect answer.\n    component.answer = '24 km km';\n\n    component.answerValueChanged();\n    tick(150);\n\n    // PostChecks: Error message as the Unit is incorrect.\n    expect(component.problematicUnit).toBe('km');\n    expect(component.errorMessageI18nKey).toBe(\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n    );\n    expect(component.isValid).toBeFalse();\n    expect(\n      currentInteractionService.updateCurrentAnswer\n    ).toHaveBeenCalledOnceWith('24 km km');\n\n    // Test: Submit similar incorrect answer.\n    component.answer = '24 kg kg';\n\n    component.submitAnswer();\n\n    expect(component.problematicUnit).toBe('kg');\n    expect(component.errorMessageI18nKey).toBe(\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n    );\n    expect(component.hasDuplicatedUnit()).toBeTrue();\n  }));\n});\n"
    },
    {
      "filename": "extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.component.ts",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for the NumberWithUnits interaction.\n */\n\nimport {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\nimport {downgradeComponent} from '@angular/upgrade/static';\n\nimport {CurrentInteractionService} from 'pages/exploration-player-page/services/current-interaction.service';\nimport {FocusManagerService} from 'services/stateful/focus-manager.service';\n\nimport {\n  NumberWithUnitsAnswer,\n  InteractionAnswer,\n} from 'interactions/answer-defs';\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport {HelpModalNumberWithUnitsComponent} from './oppia-help-modal-number-with-units.component';\nimport {NumberWithUnitsObjectFactory} from 'domain/objects/NumberWithUnitsObjectFactory';\nimport {NumberWithUnitsRulesService} from './number-with-units-rules.service';\n\n@Component({\n  selector: 'oppia-interactive-number-with-units',\n  templateUrl: './number-with-units-interaction.component.html',\n  styleUrls: [],\n})\nexport class InteractiveNumberWithUnitsComponent implements OnInit, OnDestroy {\n  // These properties are initialized using Angular lifecycle hooks\n  // and we need to do non-null assertion. For more information, see\n  // https://github.com/oppia/oppia/wiki/Guide-on-defining-types#ts-7-1\n  @Input() labelForFocusTarget!: string;\n  @Input() savedSolution!: InteractionAnswer;\n  componentSubscriptions: Subscription = new Subscription();\n  FORM_ERROR_TYPE: string = 'NUMBER_WITH_UNITS_FORMAT_ERROR';\n  errorMessageI18nKey: string = '';\n  problematicUnit: string = '';\n  answer: string = '';\n  isValid: boolean = true;\n  answerChanged: Subject<string> = new Subject<string>();\n  NUMBER_WITH_UNITS_FORM_SCHEMA = {\n    type: 'unicode',\n    ui_config: {},\n  };\n\n  constructor(\n    private currentInteractionService: CurrentInteractionService,\n    private focusManagerService: FocusManagerService,\n    private numberWithUnitsObjectFactory: NumberWithUnitsObjectFactory,\n    private numberWithUnitsRulesService: NumberWithUnitsRulesService,\n    private ngbModal: NgbModal\n  ) {\n    this.componentSubscriptions.add(\n      this.answerChanged\n        .pipe(\n          // Wait 150ms after the last event before emitting last event.\n          debounceTime(150),\n          // Only emit if value is different from previous value.\n          distinctUntilChanged()\n        )\n        .subscribe(newValue => {\n          try {\n            this.numberWithUnitsObjectFactory.fromRawInputString(newValue);\n            this.errorMessageI18nKey = '';\n            this.isValid = true;\n            this.problematicUnit = '';\n          } catch (parsingError) {\n            if (parsingError instanceof Error) {\n              var errorMessageSplit = parsingError.message.split(' ');\n              var message = parsingError.message;\n              if (\n                errorMessageSplit[0] ===\n                'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n              ) {\n                message = errorMessageSplit[0];\n                this.problematicUnit = errorMessageSplit[1];\n              } else {\n                this.problematicUnit = '';\n              }\n              this.errorMessageI18nKey = message;\n            }\n            this.isValid = false;\n          }\n          this.currentInteractionService.updateViewWithNewAnswer();\n        })\n    );\n  }\n\n  ngOnInit(): void {\n    if (this.savedSolution !== undefined) {\n      let savedSolution = this.savedSolution;\n      savedSolution = this.numberWithUnitsObjectFactory\n        .fromDict(savedSolution as NumberWithUnitsAnswer)\n        .toString();\n      this.answer = savedSolution;\n    } else {\n      this.answer = '';\n    }\n\n    try {\n      this.numberWithUnitsObjectFactory.createCurrencyUnits();\n    } catch (parsingError) {}\n\n    const submitAnswerFn = () => this.submitAnswer();\n    const isAnswerValid = () => this.isAnswerValid();\n    this.currentInteractionService.registerCurrentInteraction(\n      submitAnswerFn,\n      isAnswerValid\n    );\n\n    setTimeout(() => {\n      let focusLabel: string = this.labelForFocusTarget;\n      this.focusManagerService.setFocusWithoutScroll(focusLabel);\n    }, 0);\n  }\n\n  submitAnswer(): void {\n    try {\n      if (\n        this.answer.trim() === '' &&\n        this.currentInteractionService.showNoResponseError()\n      ) {\n        this.errorMessageI18nKey = 'I18N_INTERACTIONS_INPUT_NO_RESPONSE';\n        return;\n      }\n      const numberWithUnits =\n        this.numberWithUnitsObjectFactory.fromRawInputString(this.answer);\n      this.currentInteractionService.onSubmit(\n        numberWithUnits,\n        this.numberWithUnitsRulesService as NumberWithUnitsRulesService\n      );\n    } catch (parsingError) {\n      if (parsingError instanceof Error) {\n        var errorMessageSplit = parsingError.message.split(' ');\n        var message = parsingError.message;\n        if (\n          errorMessageSplit[0] ===\n          'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n        ) {\n          message = errorMessageSplit[0];\n          this.problematicUnit = errorMessageSplit[1];\n        } else {\n          this.problematicUnit = '';\n        }\n        this.errorMessageI18nKey = message;\n      } else {\n        throw parsingError;\n      }\n      this.isValid = false;\n    }\n  }\n\n  showHelp(): void {\n    this.ngbModal\n      .open(HelpModalNumberWithUnitsComponent, {\n        backdrop: true,\n        windowClass: 'oppia-help-modal-number-with-units',\n      })\n      .result.then(\n        () => {},\n        () => {\n          // Note to developers:\n          // This callback is triggered when the Cancel button is clicked.\n          // No further action is needed.\n        }\n      );\n  }\n\n  hasDuplicatedUnit(): boolean {\n    return this.problematicUnit !== '';\n  }\n\n  isAnswerValid(): boolean {\n    return this.isValid && this.answer !== '';\n  }\n\n  answerValueChanged(): void {\n    this.answerChanged.next(this.answer);\n    this.currentInteractionService.updateCurrentAnswer(this.answer);\n  }\n\n  ngOnDestroy(): void {\n    this.componentSubscriptions.unsubscribe();\n  }\n}\n\nangular.module('oppia').directive(\n  'oppiaInteractiveNumberWithUnits',\n  downgradeComponent({\n    component: InteractiveNumberWithUnitsComponent,\n  }) as angular.IDirectiveFactory\n);\n"
    },
    {
      "filename": "extensions/objects/templates/number-with-units-editor.component.html",
      "content": "<input type=\"text\" [(ngModel)]=\"numberWithUnitsString\" (ngModelChange)=\"updateValue($event)\" class=\"form-control\">\n\n<div *ngIf=\"hasDuplicatedUnit()\" class=\"oppia-form-error oppia-units-input-error\">\n  <span [innerHTML]=\"'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS' | translate: {\n    duppedunit: problematicUnit,\n    messageFormat: true\n  }\"></span>\n</div>\n\n<div *ngIf=\"!hasDuplicatedUnit()\" class=\"oppia-form-error oppia-units-input-error\">\n  {{ errorMessageI18nKey | translate }}\n</div>\n"
    },
    {
      "filename": "extensions/objects/templates/number-with-units-editor.component.spec.ts",
      "content": "// Copyright 2021 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for number with units editor.\n */\n\nimport {NO_ERRORS_SCHEMA} from '@angular/core';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {NumberWithUnitsEditorComponent} from './number-with-units-editor.component';\nimport {MockTranslatePipe} from 'tests/unit-test-utils';\n\ndescribe('NumberWithUnitsEditorComponent', () => {\n  let component: NumberWithUnitsEditorComponent;\n  let fixture: ComponentFixture<NumberWithUnitsEditorComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [MockTranslatePipe, NumberWithUnitsEditorComponent],\n      schemas: [NO_ERRORS_SCHEMA],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NumberWithUnitsEditorComponent);\n    component = fixture.componentInstance;\n    component.value = {\n      type: 'real',\n      real: 23,\n      fraction: {\n        isNegative: false,\n        wholeNumber: 0,\n        numerator: 0,\n        denominator: 1,\n      },\n      units: [\n        {\n          unit: 'm',\n          exponent: 1,\n        },\n      ],\n    };\n  });\n\n  it(\n    \"should initialise component when 'Number with units' interaction is\" +\n      ' selected',\n    () => {\n      spyOn(component.valueChanged, 'emit');\n\n      component.ngOnInit();\n\n      expect(component.numberWithUnitsString).toBe('23 m');\n      expect(component.valueChanged.emit).toHaveBeenCalledWith(component.value);\n    }\n  );\n\n  it(\n    \"should not set 'numberWithUnitsString' value if use has not input any\" +\n      'value',\n    () => {\n      spyOn(component.valueChanged, 'emit');\n      component.value = null;\n\n      component.ngOnInit();\n\n      expect(component.numberWithUnitsString).toBeUndefined();\n      expect(component.valueChanged.emit).not.toHaveBeenCalledWith(\n        component.value\n      );\n    }\n  );\n\n  it('should update value when the user types in the text input field', () => {\n    spyOn(component.valueChanged, 'emit');\n\n    expect(component.value).toEqual({\n      type: 'real',\n      real: 23,\n      fraction: {\n        isNegative: false,\n        wholeNumber: 0,\n        numerator: 0,\n        denominator: 1,\n      },\n      units: [\n        {\n          unit: 'm',\n          exponent: 1,\n        },\n      ],\n    });\n\n    component.updateValue('24kg');\n\n    expect(component.value?.real).toBe(24);\n    expect(component.value?.units[0].unit).toBe('kg');\n    expect(component.errorMessageI18nKey).toBe('');\n    expect(component.valueChanged.emit).toHaveBeenCalledWith(component.value);\n  });\n\n  it('should display error message when user enters incorrect units', () => {\n    component.updateValue('23 kf');\n\n    expect(component.errorMessageI18nKey).toBe('Unit \"kf\" not found.');\n  });\n\n  it('should display error message when user enters duplicated units', () => {\n    component.updateValue('2 kg kg');\n\n    expect(component.problematicUnit).toBe('kg');\n    expect(component.errorMessageI18nKey).toBe(\n      'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n    );\n    expect(component.hasDuplicatedUnit()).toBeTrue();\n  });\n});\n"
    },
    {
      "filename": "extensions/objects/templates/number-with-units-editor.component.ts",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for number with units editor.\n */\n\nimport {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {downgradeComponent} from '@angular/upgrade/static';\nimport {ObjectFormValidityChangeEvent} from 'app-events/app-events';\nimport {EventBusGroup, EventBusService} from 'app-events/event-bus.service';\nimport {NumberWithUnitsObjectFactory} from 'domain/objects/NumberWithUnitsObjectFactory';\nimport {NumberWithUnitsAnswer} from 'interactions/answer-defs';\n\n@Component({\n  selector: 'number-with-units-editor',\n  templateUrl: './number-with-units-editor.component.html',\n  styleUrls: [],\n})\nexport class NumberWithUnitsEditorComponent implements OnInit {\n  // These properties are initialized using Angular lifecycle hooks\n  // and we need to do non-null assertion. For more information, see\n  // https://github.com/oppia/oppia/wiki/Guide-on-defining-types#ts-7-1\n  @Input() modalId!: symbol;\n  // 'value' will be null if user has not input any value.\n  @Input() value!: NumberWithUnitsAnswer | null;\n  @Output() valueChanged = new EventEmitter();\n  numberWithUnitsString!: string;\n  problematicUnit: string = '';\n  errorMessageI18nKey: string = '';\n  eventBusGroup: EventBusGroup;\n\n  constructor(\n    private eventBusService: EventBusService,\n    private numberWithUnitsObjectFactory: NumberWithUnitsObjectFactory\n  ) {\n    this.eventBusGroup = new EventBusGroup(this.eventBusService);\n  }\n\n  ngOnInit(): void {\n    if (this.value === null || this.value === undefined) {\n      return;\n    } else {\n      const defaultNumberWithUnits = this.numberWithUnitsObjectFactory.fromDict(\n        this.value\n      );\n      this.numberWithUnitsString = defaultNumberWithUnits.toString();\n      this.valueChanged.emit(this.value);\n    }\n  }\n\n  updateValue(newValue: string): void {\n    try {\n      let numberWithUnits =\n        this.numberWithUnitsObjectFactory.fromRawInputString(newValue);\n      this.value = numberWithUnits;\n      this.valueChanged.emit(this.value);\n      this.eventBusGroup.emit(\n        new ObjectFormValidityChangeEvent({\n          value: false,\n          modalId: this.modalId,\n        })\n      );\n      this.errorMessageI18nKey = '';\n      this.problematicUnit = '';\n      // We use unknown type because we are unsure of the type of error\n      // that was thrown. Since the catch block cannot identify the\n      // specific type of error, we are unable to further optimise the\n      // code by introducing more types of errors.\n    } catch (parsingError: unknown) {\n      this.eventBusGroup.emit(\n        new ObjectFormValidityChangeEvent({\n          value: true,\n          modalId: this.modalId,\n        })\n      );\n      if (parsingError instanceof Error) {\n        var errorMessageSplit = parsingError.message.split(' ');\n        var message = parsingError.message;\n        if (\n          errorMessageSplit[0] ===\n          'I18N_INTERACTIONS_NUMBER_WITH_UNITS_INVALID_DOUBLE_UNITS'\n        ) {\n          message = errorMessageSplit[0];\n          this.problematicUnit = errorMessageSplit[1];\n        } else {\n          this.problematicUnit = '';\n        }\n        this.errorMessageI18nKey = message;\n      }\n    }\n  }\n\n  hasDuplicatedUnit(): boolean {\n    return this.problematicUnit !== '';\n  }\n}\n\nangular.module('oppia').directive(\n  'numberWithUnitsEditor',\n  downgradeComponent({\n    component: NumberWithUnitsEditorComponent,\n  }) as angular.IDirectiveFactory\n);\n"
    }
  ]
}