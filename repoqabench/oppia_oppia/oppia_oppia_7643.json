{
  "repo_name": "oppia_oppia",
  "issue_id": "7643",
  "issue_description": "# Replace templateUrl with template in /extensions\n\nReplace `templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('somePath')` with `template: require(somePath)` and use webpack for inserting the HTML templates into the generated bundles. This will improve latency and bandwidth of the directives loading since Angular doesn't need to retrieve the HTML via AJAX request.\r\n\r\nWork to be done:\r\n - [x] extensions/objects @rohitkatlaa \r\n - [ ] extensions/rich_text_components @sseth99\r\n\r\nSteps:\r\n 1. Replace the `templateUrl: UrlInterpolationService.someFunction('someUrl')` with `template: require('someUrl')` in one of the `extensions` subfolder (example: https://github.com/oppia/oppia/pull/8503/files#diff-0969d47989e137044b352fbefd9e6476)\r\n2. If `UrlInterpolationService` is not needed in the directive anymore remove it. Also remove `require('domain/utilities/url-interpolation.service.ts');` from the file.\r\n\r\nLater when the directive is migrated to Angular 8 we can replace `template: require('somePath')` with `templateUrl: 'somePath'` and use [@ngtools/webpack](https://www.npmjs.com/package/@ngtools/webpack)\r\n\r\nResources:\r\nhttp://dckesler.github.io/posts/2015/05/12/angular-directives-webpack.html\r\nhttps://medium.com/@frosty/angularjs-template-vs-templateurl-cdde055b7907\r\nhttps://antjanus.com/blog/web-development-tutorials/switching-from-angular2-template-loader-to-ngtools-webpack/",
  "issue_comments": [
    {
      "id": 533154215,
      "user": "jameesjohn",
      "body": "@vojtechjelinek, should this be done for all components or just some specific components?"
    },
    {
      "id": 533868003,
      "user": "vojtechjelinek",
      "body": "I would go with all the components."
    },
    {
      "id": 563182308,
      "user": "jameesjohn",
      "body": "This issue is currently blocked by the work on Angular 8 migration.\r\nHowever, once all the services have been migrated to Angular 8, we can resume working on this."
    },
    {
      "id": 581716012,
      "user": "rohitkatlaa",
      "body": "@vojtechjelinek Can I take up on a part of this issue?"
    },
    {
      "id": 581827320,
      "user": "vojtechjelinek",
      "body": "@rohitkatlaa Sure, I have assigned you to `extensions/objects`"
    },
    {
      "id": 581960970,
      "user": "ahv15",
      "body": "@vojtechjelinek Can I work on ` extensions/rich_text_components`"
    },
    {
      "id": 581961398,
      "user": "vojtechjelinek",
      "body": "@ahv15 Assigned."
    },
    {
      "id": 583911875,
      "user": "vojtechjelinek",
      "body": "The problem with this replacement is that for some of the directives we get this error: `Trying to get the Angular injector before bootstrapping the corresponding Angular module.`. This happens both in the e2e tests and in the local testing.\r\n\r\nThis is most probably caused by the fact that some of the directives use some of the services that are already migrated to Angular 8 and because now they use `template` they load much faster and are loaded before the Angular 8 is bootstrapped. This seems to be explained here: https://stackoverflow.com/questions/47189917/using-downgrademodule-in-conjunction-with-downgradeinjectable-in-an-angular-an we use the first approach to fix this but the fix doesn't seem to work for the directives.\r\n\r\nThis is blocking the usage of exploration player on flaky connections.\r\n\r\ncc @bansalnitish @seanlip "
    },
    {
      "id": 584424869,
      "user": "seanlip",
      "body": "Hi @vojtechjelinek -- just wanted to clarify two things:\r\n\r\n(a) Given your comment, should we continue to proceed with this issue?\r\n\r\n(b) If the answer to (a) is yes, what specifically do you need from the Angular migration team in order to bridge the gap (so that, throughout the whole process, the exploration player continues to work on flaky connections)?\r\n\r\nJust wanted to be clear on what the next steps actually are, so that we don't accidentally introduce regressions / do the wrong thing.\r\n\r\nThanks!"
    },
    {
      "id": 584890272,
      "user": "vojtechjelinek",
      "body": "> (a) Given your comment, should we continue to proceed with this issue?\r\n\r\nNo, we should wait until the Angular 8 migration is finished, unless there is a need (as is with the offline exploration player).\r\n\r\n"
    },
    {
      "id": 584898913,
      "user": "seanlip",
      "body": "OK, thanks. In that case, should @rohitkatlaa and @ahv15 still be assigned to the issue (see first comment)?"
    },
    {
      "id": 584899086,
      "user": "seanlip",
      "body": "(Also if this is blocking on something else, let's put \"[Blocked on XXX]\" in the title so that people know not to take this up yet.)"
    },
    {
      "id": 585406110,
      "user": "vojtechjelinek",
      "body": "@seanlip Yes, we can do the changes for the files in `extensions` since these are loaded after Angular 8 is ready. "
    },
    {
      "id": 585509847,
      "user": "seanlip",
      "body": "OK, then I think the original description may be unclear. Could you please split it into the parts that (a) can be done now, and (b) need to be done only after #8472 is resolved? (At the moment, it looks like everything blocks on #8472 which I understand isn't the case based on your last comment.)"
    },
    {
      "id": 585765299,
      "user": "vojtechjelinek",
      "body": "@seanlip I have created #8630 for all of the directives and kept this issue for the extensions.\r\n\r\n@ahv15 How is the work going on `extensions/rich_text_components`"
    },
    {
      "id": 585778399,
      "user": "ahv15",
      "body": "@vojtechjelinek sorry for the delay I was facing some issues in the tests while pushing the commits, hopefully I will be able to fix it and send it today"
    },
    {
      "id": 585779350,
      "user": "vojtechjelinek",
      "body": "@ahv15 No problem, just wanted to check on you."
    },
    {
      "id": 599241659,
      "user": "sseth99",
      "body": "@vojtechjelinek I want to work on this issue. Can I be assigned a part of this issue? Thanks:)"
    },
    {
      "id": 599244367,
      "user": "jameesjohn",
      "body": "Hi @sseth99, work on this issue is currently paused.\r\nYou might want to check out other issues like https://github.com/oppia/oppia/issues/4057 "
    },
    {
      "id": 599244547,
      "user": "jameesjohn",
      "body": "Actually, I think you can work on it.\r\nGo ahead @sseth99."
    },
    {
      "id": 599244678,
      "user": "jameesjohn",
      "body": "Hi @rohitkatlaa are you still working on this?"
    },
    {
      "id": 599246474,
      "user": "sseth99",
      "body": "> Actually, I think you can work on it.\r\n> Go ahead @sseth99.\r\n\r\nThanks @jameesjohn , I wanted to ask which part of /extensions should I work on?"
    },
    {
      "id": 599247463,
      "user": "jameesjohn",
      "body": "@sseth99 You can work on extensions/objects"
    },
    {
      "id": 599247868,
      "user": "sseth99",
      "body": "> @sseth99 You can work on extensions/objects\r\n\r\nI guess that's already been fixed in PR #8590?"
    },
    {
      "id": 599248667,
      "user": "jameesjohn",
      "body": "Thanks\r\nI've updated the main comment.\r\nYou can work on the other"
    },
    {
      "id": 599249693,
      "user": "sseth99",
      "body": "> Thanks\r\n> I've updated the main comment.\r\n> You can work on the other\r\n\r\nThanks @jameesjohn :)  But PR #7643 makes changes to almost all the files in /extensions/rich_text_components except '/extensions/rich_text_components/Video/directives/oppia-noninteractive-video.directive.ts' ; so I'll be working on this one, right? "
    },
    {
      "id": 599613438,
      "user": "jameesjohn",
      "body": "#7643 is this issue. I think you linked to the wrong PR @sseth99 ?"
    },
    {
      "id": 599623107,
      "user": "sseth99",
      "body": "> #7643 is this issue. I think you linked to the wrong PR @sseth99 ?\r\n\r\nAh, yes; I am sorry, I the PR is #8632 . As I mentioned before it makes changes to almost all the files in /extensions/rich_text_components except '/extensions/rich_text_components/Video/directives/oppia-noninteractive-video.directive.ts' ; so I'll be working on this one, right?"
    }
  ],
  "text_context": "# Replace templateUrl with template in /extensions\n\nReplace `templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('somePath')` with `template: require(somePath)` and use webpack for inserting the HTML templates into the generated bundles. This will improve latency and bandwidth of the directives loading since Angular doesn't need to retrieve the HTML via AJAX request.\r\n\r\nWork to be done:\r\n - [x] extensions/objects @rohitkatlaa \r\n - [ ] extensions/rich_text_components @sseth99\r\n\r\nSteps:\r\n 1. Replace the `templateUrl: UrlInterpolationService.someFunction('someUrl')` with `template: require('someUrl')` in one of the `extensions` subfolder (example: https://github.com/oppia/oppia/pull/8503/files#diff-0969d47989e137044b352fbefd9e6476)\r\n2. If `UrlInterpolationService` is not needed in the directive anymore remove it. Also remove `require('domain/utilities/url-interpolation.service.ts');` from the file.\r\n\r\nLater when the directive is migrated to Angular 8 we can replace `template: require('somePath')` with `templateUrl: 'somePath'` and use [@ngtools/webpack](https://www.npmjs.com/package/@ngtools/webpack)\r\n\r\nResources:\r\nhttp://dckesler.github.io/posts/2015/05/12/angular-directives-webpack.html\r\nhttps://medium.com/@frosty/angularjs-template-vs-templateurl-cdde055b7907\r\nhttps://antjanus.com/blog/web-development-tutorials/switching-from-angular2-template-loader-to-ngtools-webpack/\n\n@vojtechjelinek, should this be done for all components or just some specific components?\n\nI would go with all the components.\n\nThis issue is currently blocked by the work on Angular 8 migration.\r\nHowever, once all the services have been migrated to Angular 8, we can resume working on this.\n\n@vojtechjelinek Can I take up on a part of this issue?\n\n@rohitkatlaa Sure, I have assigned you to `extensions/objects`\n\n@vojtechjelinek Can I work on ` extensions/rich_text_components`\n\n@ahv15 Assigned.\n\nThe problem with this replacement is that for some of the directives we get this error: `Trying to get the Angular injector before bootstrapping the corresponding Angular module.`. This happens both in the e2e tests and in the local testing.\r\n\r\nThis is most probably caused by the fact that some of the directives use some of the services that are already migrated to Angular 8 and because now they use `template` they load much faster and are loaded before the Angular 8 is bootstrapped. This seems to be explained here: https://stackoverflow.com/questions/47189917/using-downgrademodule-in-conjunction-with-downgradeinjectable-in-an-angular-an we use the first approach to fix this but the fix doesn't seem to work for the directives.\r\n\r\nThis is blocking the usage of exploration player on flaky connections.\r\n\r\ncc @bansalnitish @seanlip \n\nHi @vojtechjelinek -- just wanted to clarify two things:\r\n\r\n(a) Given your comment, should we continue to proceed with this issue?\r\n\r\n(b) If the answer to (a) is yes, what specifically do you need from the Angular migration team in order to bridge the gap (so that, throughout the whole process, the exploration player continues to work on flaky connections)?\r\n\r\nJust wanted to be clear on what the next steps actually are, so that we don't accidentally introduce regressions / do the wrong thing.\r\n\r\nThanks!\n\n> (a) Given your comment, should we continue to proceed with this issue?\r\n\r\nNo, we should wait until the Angular 8 migration is finished, unless there is a need (as is with the offline exploration player).\r\n\r\n\n\nOK, thanks. In that case, should @rohitkatlaa and @ahv15 still be assigned to the issue (see first comment)?\n\n(Also if this is blocking on something else, let's put \"[Blocked on XXX]\" in the title so that people know not to take this up yet.)\n\n@seanlip Yes, we can do the changes for the files in `extensions` since these are loaded after Angular 8 is ready. \n\nOK, then I think the original description may be unclear. Could you please split it into the parts that (a) can be done now, and (b) need to be done only after #8472 is resolved? (At the moment, it looks like everything blocks on #8472 which I understand isn't the case based on your last comment.)\n\n@seanlip I have created #8630 for all of the directives and kept this issue for the extensions.\r\n\r\n@ahv15 How is the work going on `extensions/rich_text_components`\n\n@vojtechjelinek sorry for the delay I was facing some issues in the tests while pushing the commits, hopefully I will be able to fix it and send it today\n\n@ahv15 No problem, just wanted to check on you.\n\n@vojtechjelinek I want to work on this issue. Can I be assigned a part of this issue? Thanks:)\n\nHi @sseth99, work on this issue is currently paused.\r\nYou might want to check out other issues like https://github.com/oppia/oppia/issues/4057 \n\nActually, I think you can work on it.\r\nGo ahead @sseth99.\n\nHi @rohitkatlaa are you still working on this?\n\n> Actually, I think you can work on it.\r\n> Go ahead @sseth99.\r\n\r\nThanks @jameesjohn , I wanted to ask which part of /extensions should I work on?\n\n@sseth99 You can work on extensions/objects\n\n> @sseth99 You can work on extensions/objects\r\n\r\nI guess that's already been fixed in PR #8590?\n\nThanks\r\nI've updated the main comment.\r\nYou can work on the other\n\n> Thanks\r\n> I've updated the main comment.\r\n> You can work on the other\r\n\r\nThanks @jameesjohn :)  But PR #7643 makes changes to almost all the files in /extensions/rich_text_components except '/extensions/rich_text_components/Video/directives/oppia-noninteractive-video.directive.ts' ; so I'll be working on this one, right? \n\n#7643 is this issue. I think you linked to the wrong PR @sseth99 ?\n\n> #7643 is this issue. I think you linked to the wrong PR @sseth99 ?\r\n\r\nAh, yes; I am sorry, I the PR is #8632 . As I mentioned before it makes changes to almost all the files in /extensions/rich_text_components except '/extensions/rich_text_components/Video/directives/oppia-noninteractive-video.directive.ts' ; so I'll be working on this one, right?",
  "pr_link": "https://github.com/oppia/oppia/pull/8503",
  "code_context": [
    {
      "filename": "core/templates/dev/head/I18nFooter.ts",
      "content": "// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Translation functions for Oppia.\n *\n * @author milagro.teruel@gmail.com (Milagro Teruel)\n */\n\nrequire('services/translation-file-hash-loader.service.ts');\n\nangular.module('oppia').directive('i18nFooter', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./i18n-footer.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$http', '$timeout', '$translate', 'UserService',\n        'SUPPORTED_SITE_LANGUAGES',\n        function(\n            $http, $timeout, $translate, UserService,\n            SUPPORTED_SITE_LANGUAGES) {\n          var ctrl = this;\n          // Changes the language of the translations.\n          var preferencesDataUrl = '/preferenceshandler/data';\n          var siteLanguageUrl = '/save_site_language';\n          ctrl.changeLanguage = function() {\n            $translate.use(ctrl.currentLanguageCode);\n            UserService.getUserInfoAsync().then(function(userInfo) {\n              if (userInfo.isLoggedIn()) {\n                $http.put(siteLanguageUrl, {\n                  site_language_code: ctrl.currentLanguageCode\n                });\n              }\n            });\n          };\n          ctrl.$onInit = function() {\n            ctrl.supportedSiteLanguages = SUPPORTED_SITE_LANGUAGES;\n\n            // The $timeout seems to be necessary for the dropdown\n            // to show anything at the outset, if the default language\n            // is not English.\n            $timeout(function() {\n              // $translate.use() returns undefined until the language\n              // file is fully loaded, which causes a blank field\n              // in the dropdown, hence we use $translate.proposedLanguage()\n              // as suggested in http://stackoverflow.com/a/28903658\n              ctrl.currentLanguageCode = $translate.use() ||\n                $translate.proposedLanguage();\n            }, 50);\n          };\n        }\n      ]\n    };\n  }]);\n\n\nangular.module('oppia').config([\n  '$translateProvider', 'DEFAULT_TRANSLATIONS', 'SUPPORTED_SITE_LANGUAGES',\n  function($translateProvider, DEFAULT_TRANSLATIONS, SUPPORTED_SITE_LANGUAGES) {\n    var availableLanguageKeys = [];\n    var availableLanguageKeysMap = {};\n    SUPPORTED_SITE_LANGUAGES.forEach(function(language) {\n      availableLanguageKeys.push(language.id);\n      availableLanguageKeysMap[language.id + '*'] = language.id;\n    });\n    availableLanguageKeysMap['*'] = 'en';\n\n    $translateProvider\n      .registerAvailableLanguageKeys(\n        availableLanguageKeys, availableLanguageKeysMap)\n      .useLoader('TranslationFileHashLoaderService', {\n        prefix: '/i18n/',\n        suffix: '.json'\n      })\n      // The use of default translation improves the loading time when English\n      // is selected\n      .translations('en', DEFAULT_TRANSLATIONS)\n      .fallbackLanguage('en')\n      .determinePreferredLanguage()\n      .useCookieStorage()\n      // The messageformat interpolation method is necessary for pluralization.\n      // Is optional and should be passed as argument to the translate call. See\n      // https://angular-translate.github.io/docs/#/guide/14_pluralization\n      .addInterpolation('$translateMessageFormatInterpolation')\n      // The strategy 'sanitize' does not support utf-8 encoding.\n      // https://github.com/angular-translate/angular-translate/issues/1131\n      // The strategy 'escape' will brake strings with raw html, like hyperlinks\n      .useSanitizeValueStrategy('sanitizeParameters')\n      .forceAsyncReload(true);\n  }\n]);\n"
    },
    {
      "filename": "core/templates/dev/head/base-components/base-content.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Base Transclusion Component.\n */\n\nrequire('base-components/warning-loader.directive.ts');\nrequire('pages/OppiaFooterDirective.ts');\n\nrequire('domain/sidebar/sidebar-status.service.ts');\nrequire('services/contextual/url.service.ts');\nrequire('services/stateful/background-mask.service.ts');\n\nangular.module('oppia').directive('baseContent', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      transclude: {\n        breadcrumb: '?navbarBreadcrumb',\n        content: 'content',\n        footer: '?pageFooter',\n        navOptions: '?navOptions',\n      },\n      template: require('./base-content.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$rootScope', '$window', 'BackgroundMaskService',\n        'SidebarStatusService', 'UrlService', 'SITE_FEEDBACK_FORM_URL',\n        function($rootScope, $window, BackgroundMaskService,\n            SidebarStatusService, UrlService, SITE_FEEDBACK_FORM_URL) {\n          // Mimic redirection behaviour in the backend (see issue #7867 for\n          // details).\n          if ($window.location.hostname === 'oppiaserver.appspot.com') {\n            $window.location.href = (\n              'https://oppiatestserver.appspot.com' +\n              $window.location.pathname +\n              $window.location.search +\n              $window.location.hash);\n          }\n\n          var ctrl = this;\n          ctrl.isSidebarShown = () => SidebarStatusService.isSidebarShown();\n          ctrl.closeSidebarOnSwipe = () => SidebarStatusService.closeSidebar();\n          ctrl.isBackgroundMaskActive = () => (\n            BackgroundMaskService.isMaskActive());\n          ctrl.skipToMainContent = function() {\n            var mainContentElement = document.getElementById(\n              'oppia-main-content');\n\n            if (!mainContentElement) {\n              throw Error('Variable mainContentElement is undefined.');\n            }\n            mainContentElement.tabIndex = -1;\n            mainContentElement.scrollIntoView();\n            mainContentElement.focus();\n          };\n          ctrl.$onInit = function() {\n            ctrl.iframed = UrlService.isIframed();\n            ctrl.siteFeedbackFormUrl = SITE_FEEDBACK_FORM_URL;\n            ctrl.DEV_MODE = $rootScope.DEV_MODE;\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "core/templates/dev/head/base-components/warning-loader.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for warning_loader.\n */\n\nrequire('services/alerts.service.ts');\n\nangular.module('oppia').directive('warningLoader', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./warning-loader.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['AlertsService',\n        function(AlertsService) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            ctrl.AlertsService = AlertsService;\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "core/templates/dev/head/components/button-directives/create-activity-button.directive.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Create Exploration/Collection button.\n */\n\nrequire('components/entity-creation-services/collection-creation.service.ts');\nrequire('components/entity-creation-services/exploration-creation.service.ts');\nrequire('domain/utilities/browser-checker.service.ts');\nrequire('services/contextual/url.service.ts');\nrequire('services/site-analytics.service.ts');\nrequire('services/user.service.ts');\n\nangular.module('oppia').directive('createActivityButton', [\n  'UrlInterpolationService', function(UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./create-activity-button.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$timeout', '$window', '$uibModal',\n        'ExplorationCreationService', 'CollectionCreationService',\n        'SiteAnalyticsService', 'UrlService', 'UserService',\n        'ALLOW_YAML_FILE_UPLOAD',\n        function(\n            $timeout, $window, $uibModal,\n            ExplorationCreationService, CollectionCreationService,\n            SiteAnalyticsService, UrlService, UserService,\n            ALLOW_YAML_FILE_UPLOAD) {\n          var ctrl = this;\n          ctrl.onRedirectToLogin = function(destinationUrl) {\n            SiteAnalyticsService.registerStartLoginEvent(\n              'createActivityButton');\n            $timeout(function() {\n              $window.location = destinationUrl;\n            }, 150);\n            return false;\n          };\n\n          ctrl.initCreationProcess = function() {\n            // Without this, the modal keeps reopening when the window is\n            // resized.\n            if (ctrl.creationInProgress) {\n              return;\n            }\n\n            ctrl.creationInProgress = true;\n\n            if (!ctrl.canCreateCollections) {\n              ExplorationCreationService.createNewExploration();\n            } else if (UrlService.getPathname() !== '/creator_dashboard') {\n              $window.location.replace('/creator_dashboard?mode=create');\n            } else {\n              $uibModal.open({\n                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(\n                  '/pages/creator-dashboard-page/modal-templates/' +\n                  'create-activity-modal.directive.html'),\n                backdrop: true,\n                controller: [\n                  '$scope', '$uibModalInstance',\n                  function($scope, $uibModalInstance) {\n                    UserService.getUserInfoAsync().then(function(userInfo) {\n                      $scope.canCreateCollections = (\n                        userInfo.canCreateCollections());\n                    });\n\n                    $scope.chooseExploration = function() {\n                      ExplorationCreationService.createNewExploration();\n                      $uibModalInstance.close();\n                    };\n\n                    $scope.chooseCollection = function() {\n                      CollectionCreationService.createNewCollection();\n                      $uibModalInstance.close();\n                    };\n\n                    $scope.cancel = function() {\n                      $uibModalInstance.dismiss('cancel');\n                    };\n\n                    $scope.explorationImgUrl = (\n                      UrlInterpolationService.getStaticImageUrl(\n                        '/activity/exploration.svg'));\n\n                    $scope.collectionImgUrl = (\n                      UrlInterpolationService.getStaticImageUrl(\n                        '/activity/collection.svg'));\n                  }],\n                windowClass: 'oppia-creation-modal'\n              }).result.then(function() {}, function() {\n                ctrl.creationInProgress = false;\n              });\n            }\n          };\n          ctrl.showUploadExplorationModal = function() {\n            ExplorationCreationService.showUploadExplorationModal();\n          };\n          ctrl.$onInit = function() {\n            ctrl.creationInProgress = false;\n            ctrl.allowYamlFileUpload = ALLOW_YAML_FILE_UPLOAD;\n\n            ctrl.canCreateCollections = null;\n            ctrl.userIsLoggedIn = null;\n            UserService.getUserInfoAsync().then(function(userInfo) {\n              ctrl.canCreateCollections = userInfo.canCreateCollections();\n              ctrl.userIsLoggedIn = userInfo.isLoggedIn();\n            });\n            // If the user clicked on a 'create' button to get to the dashboard,\n            // open the create modal immediately (or redirect to the exploration\n            // editor if the create modal does not need to be shown).\n            if (UrlService.getUrlParams().mode === 'create') {\n              if (!ctrl.canCreateCollections) {\n                ExplorationCreationService.createNewExploration();\n              } else {\n                ctrl.initCreationProcess();\n              }\n            }\n          };\n        }\n      ]\n    };\n  }]);\n"
    },
    {
      "filename": "core/templates/dev/head/components/button-directives/social-buttons.directive.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the social buttons displayed in footer.\n */\n\nrequire('domain/utilities/url-interpolation.service.ts');\n\nangular.module('oppia').directive('socialButtons', [\n  'UrlInterpolationService', function(UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./social-buttons.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [function() {\n        var ctrl = this;\n        ctrl.getStaticImageUrl = function(imagePath) {\n          return UrlInterpolationService.getStaticImageUrl(imagePath);\n        };\n      }]\n    };\n  }]);\n"
    },
    {
      "filename": "core/templates/dev/head/components/common-layout-directives/common-elements/promo-bar.directive.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for a promo bar that appears at the top of the\n * screen. The bar is configurable with a message and whether the promo is\n * dismissible.\n */\n\nrequire('services/promo-bar.service.ts');\n\nangular.module('oppia').directive('promoBar', [\n  '$window', 'PromoBarService',\n  function($window, PromoBarService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./promo-bar.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        function() {\n          var ctrl = this;\n          var isPromoDismissed = function() {\n            if (!isSessionStorageAvailable()) {\n              return false;\n            }\n            return !!angular.fromJson($window.sessionStorage.promoIsDismissed);\n          };\n          var setPromoDismissed = function(promoIsDismissed) {\n            if (!isSessionStorageAvailable()) {\n              return false;\n            }\n            $window.sessionStorage.promoIsDismissed = angular.toJson(\n              promoIsDismissed);\n          };\n\n          var isSessionStorageAvailable = function() {\n            // This is to ensure sessionStorage is accessible.\n            var testKey = 'Oppia';\n            try {\n              $window.sessionStorage.setItem(testKey, testKey);\n              $window.sessionStorage.removeItem(testKey);\n              return true;\n            } catch (e) {\n              return false;\n            }\n          };\n          ctrl.dismissPromo = function() {\n            ctrl.promoIsVisible = false;\n            setPromoDismissed(true);\n          };\n          ctrl.$onInit = function() {\n            PromoBarService.getPromoBarData().then(function(promoBarObject) {\n              ctrl.promoBarIsEnabled = promoBarObject.promoBarEnabled;\n              ctrl.promoBarMessage = promoBarObject.promoBarMessage;\n            });\n\n            ctrl.promoIsVisible = !isPromoDismissed();\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "core/templates/dev/head/components/common-layout-directives/navigation-bars/side-navigation-bar.directive.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the side navigation bar.\n */\n\nrequire('domain/utilities/url-interpolation.service.ts');\n\nangular.module('oppia').directive('sideNavigationBar', [\n  'UrlInterpolationService', function(UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./side-navigation-bar.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$window', function($window) {\n        var ctrl = this;\n        ctrl.getStaticImageUrl = function(imagePath) {\n          return UrlInterpolationService.getStaticImageUrl(imagePath);\n        };\n        ctrl.$onInit = function() {\n          ctrl.currentUrl = $window.location.pathname;\n        };\n      }]\n    };\n  }]);\n"
    },
    {
      "filename": "core/templates/dev/head/components/common-layout-directives/navigation-bars/top-navigation-bar.directive.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the top navigation bar. This excludes the part\n * of the navbar that is used for local navigation (such as the various tabs in\n * the editor pages).\n */\n\nrequire('domain/sidebar/sidebar-status.service.ts');\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('services/debouncer.service.ts');\nrequire('services/navigation.service.ts');\nrequire('services/site-analytics.service.ts');\nrequire('services/user.service.ts');\nrequire('services/contextual/device-info.service.ts');\nrequire('services/contextual/window-dimensions.service.ts');\n\nangular.module('oppia').directive('topNavigationBar', [\n  'UrlInterpolationService', function(UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./top-navigation-bar.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$http', '$window', '$timeout', '$translate',\n        'SidebarStatusService', 'LABEL_FOR_CLEARING_FOCUS', 'UserService',\n        'SiteAnalyticsService', 'NavigationService', 'WindowDimensionsService',\n        'DebouncerService', 'DeviceInfoService', 'LOGOUT_URL',\n        function(\n            $scope, $http, $window, $timeout, $translate,\n            SidebarStatusService, LABEL_FOR_CLEARING_FOCUS, UserService,\n            SiteAnalyticsService, NavigationService, WindowDimensionsService,\n            DebouncerService, DeviceInfoService, LOGOUT_URL) {\n          var ctrl = this;\n          var NAV_MODE_SIGNUP = 'signup';\n          var NAV_MODES_WITH_CUSTOM_LOCAL_NAV = [\n            'create', 'explore', 'collection', 'collection_editor',\n            'topics_and_skills_dashboard', 'topic_editor', 'skill_editor',\n            'story_editor'];\n          var currentWindowWidth = WindowDimensionsService.getWidth();\n          // The order of the elements in this array specifies the order in\n          // which they will be hidden. Earlier elements will be hidden first.\n          var NAV_ELEMENTS_ORDER = [\n            'I18N_TOPNAV_DONATE', 'I18N_TOPNAV_ABOUT',\n            'I18N_CREATE_EXPLORATION_CREATE', 'I18N_TOPNAV_LIBRARY'];\n          var truncateNavbarDebounced =\n            DebouncerService.debounce(truncateNavbar, 500);\n\n          ctrl.getStaticImageUrl = function(imagePath) {\n            return UrlInterpolationService.getStaticImageUrl(imagePath);\n          };\n          ctrl.onLoginButtonClicked = function() {\n            SiteAnalyticsService.registerStartLoginEvent('loginButton');\n            UserService.getLoginUrlAsync().then(\n              function(loginUrl) {\n                if (loginUrl) {\n                  $timeout(function() {\n                    $window.location = loginUrl;\n                  }, 150);\n                } else {\n                  throw Error('Login url not found.');\n                }\n              }\n            );\n          };\n          ctrl.onLogoutButtonClicked = function() {\n            $window.localStorage.removeItem('last_uploaded_audio_lang');\n          };\n          /**\n           * Opens the submenu.\n           * @param {object} evt\n           * @param {String} menuName - name of menu, on which\n           * open/close action to be performed (aboutMenu,profileMenu).\n           */\n          ctrl.openSubmenu = function(evt, menuName) {\n            // Focus on the current target before opening its submenu.\n            NavigationService.openSubmenu(evt, menuName);\n          };\n          ctrl.blurNavigationLinks = function(evt) {\n            // This is required because if about submenu is in open state\n            // and when you hover on library, both will be highlighted,\n            // To avoid that, blur all the a's in nav, so that only one\n            // will be highlighted.\n            $('nav a').blur();\n          };\n          ctrl.closeSubmenu = function(evt) {\n            NavigationService.closeSubmenu(evt);\n          };\n          ctrl.closeSubmenuIfNotMobile = function(evt) {\n            if (DeviceInfoService.isMobileDevice()) {\n              return;\n            }\n            ctrl.closeSubmenu(evt);\n          };\n          /**\n           * Handles keydown events on menus.\n           * @param {object} evt\n           * @param {String} menuName - name of menu to perform action\n           * on(aboutMenu/profileMenu)\n           * @param {object} eventsTobeHandled - Map keyboard events('Enter')\n           * to corresponding actions to be performed(open/close).\n           *\n           * @example\n           *  onMenuKeypress($event, 'aboutMenu', {enter: 'open'})\n           */\n          ctrl.onMenuKeypress = function(evt, menuName, eventsTobeHandled) {\n            NavigationService.onMenuKeypress(evt, menuName, eventsTobeHandled);\n            ctrl.activeMenuName = NavigationService.activeMenuName;\n          };\n\n          ctrl.isSidebarShown = function() {\n            if (SidebarStatusService.isSidebarShown()) {\n              angular.element(document.body).addClass('oppia-stop-scroll');\n            } else {\n              angular.element(document.body).removeClass('oppia-stop-scroll');\n            }\n            return SidebarStatusService.isSidebarShown();\n          };\n          ctrl.toggleSidebar = function() {\n            SidebarStatusService.toggleSidebar();\n          };\n\n          /**\n           * Checks if i18n has been run.\n           * If i18n has not yet run, the <a> and <span> tags will have\n           * no text content, so their innerText.length value will be 0.\n           * @returns {boolean}\n           */\n          var checkIfI18NCompleted = function() {\n            var i18nCompleted = true;\n            var tabs = document.querySelectorAll('.oppia-navbar-tab-content');\n            for (var i = 0; i < tabs.length; i++) {\n              if ((<HTMLElement>tabs[i]).innerText.length === 0) {\n                i18nCompleted = false;\n                break;\n              }\n            }\n            return i18nCompleted;\n          };\n\n          /**\n           * Checks if window is >768px and i18n is completed, then checks\n           * for overflow. If overflow is detected, hides the least important\n           * tab and then calls itself again after a 50ms delay.\n           */\n          var truncateNavbar = function() {\n            // If the window is narrow, the standard nav tabs are not shown.\n            if (WindowDimensionsService.isWindowNarrow()) {\n              return;\n            }\n\n            // If i18n hasn't completed, retry after 100ms.\n            if (!checkIfI18NCompleted()) {\n              $timeout(truncateNavbar, 100);\n              return;\n            }\n\n            // The value of 60px used here comes from measuring the normal\n            // height of the navbar (56px) in Chrome's inspector and rounding\n            // up. If the height of the navbar is changed in the future this\n            // will need to be updated.\n            if (document.querySelector('div.collapse.navbar-collapse')\n              .clientHeight > 60) {\n              for (var i = 0; i < NAV_ELEMENTS_ORDER.length; i++) {\n                if (\n                  ctrl.navElementsVisibilityStatus[NAV_ELEMENTS_ORDER[i]]) {\n                  // Hide one element, then check again after 50ms.\n                  // This gives the browser time to render the visibility\n                  // change.\n                  ctrl.navElementsVisibilityStatus[NAV_ELEMENTS_ORDER[i]] =\n                    false;\n                  // Force a digest cycle to hide element immediately.\n                  // Otherwise it would be hidden after the next call.\n                  // This is due to $timeout use in debounce.\n                  $scope.$applyAsync();\n                  $timeout(truncateNavbar, 50);\n                  return;\n                }\n              }\n            }\n          };\n\n          ctrl.$onInit = function() {\n            ctrl.isModerator = null;\n            ctrl.isAdmin = null;\n            ctrl.isTopicManager = null;\n            ctrl.isSuperAdmin = null;\n            ctrl.userIsLoggedIn = null;\n            ctrl.username = '';\n            ctrl.currentUrl = window.location.pathname.split('/')[1];\n            ctrl.LABEL_FOR_CLEARING_FOCUS = LABEL_FOR_CLEARING_FOCUS;\n            ctrl.logoutUrl = LOGOUT_URL;\n            ctrl.userMenuIsShown = (ctrl.currentUrl !== NAV_MODE_SIGNUP);\n            ctrl.standardNavIsShown = (\n              NAV_MODES_WITH_CUSTOM_LOCAL_NAV.indexOf(ctrl.currentUrl) === -1);\n            ctrl.googleSignInIconUrl = (\n              UrlInterpolationService.getStaticImageUrl(\n                '/google_signin_buttons/google_signin.svg'));\n            ctrl.ACTION_OPEN = NavigationService.ACTION_OPEN;\n            ctrl.ACTION_CLOSE = NavigationService.ACTION_CLOSE;\n            ctrl.KEYBOARD_EVENT_TO_KEY_CODES =\n            NavigationService.KEYBOARD_EVENT_TO_KEY_CODES;\n            ctrl.windowIsNarrow = WindowDimensionsService.isWindowNarrow();\n            ctrl.navElementsVisibilityStatus = {};\n\n            // Close the submenu if focus or click occurs anywhere outside of\n            // the menu or outside of its parent (which opens submenu on hover).\n            angular.element(document).on('click', function(evt) {\n              if (!angular.element(evt.target).closest('li').length) {\n                ctrl.activeMenuName = '';\n                $scope.$applyAsync();\n              }\n            });\n\n            $scope.$on('searchBarLoaded', function() {\n              $timeout(truncateNavbar, 100);\n            });\n\n            UserService.getUserInfoAsync().then(function(userInfo) {\n              if (userInfo.getPreferredSiteLanguageCode()) {\n                $translate.use(userInfo.getPreferredSiteLanguageCode());\n              }\n              ctrl.isModerator = userInfo.isModerator();\n              ctrl.isAdmin = userInfo.isAdmin();\n              ctrl.isTopicManager = userInfo.isTopicManager();\n              ctrl.isSuperAdmin = userInfo.isSuperAdmin();\n              ctrl.userIsLoggedIn = userInfo.isLoggedIn();\n              ctrl.username = userInfo.getUsername();\n              if (ctrl.username) {\n                ctrl.profilePageUrl = UrlInterpolationService.interpolateUrl(\n                  '/profile/<username>', {\n                    username: ctrl.username\n                  });\n              }\n\n              if (ctrl.userIsLoggedIn) {\n                // Show the number of unseen notifications in the navbar and\n                // page title, unless the user is already on the dashboard page.\n                $http.get('/notificationshandler').then(function(response) {\n                  var data = response.data;\n                  if ($window.location.pathname !== '/') {\n                    ctrl.numUnseenNotifications = data.num_unseen_notifications;\n                    if (ctrl.numUnseenNotifications > 0) {\n                      $window.document.title = (\n                        '(' + ctrl.numUnseenNotifications + ') ' +\n                        $window.document.title);\n                    }\n                  }\n                });\n              }\n            });\n            UserService.getProfileImageDataUrlAsync().then(function(dataUrl) {\n              ctrl.profilePictureDataUrl = dataUrl;\n            });\n\n            for (var i = 0; i < NAV_ELEMENTS_ORDER.length; i++) {\n              ctrl.navElementsVisibilityStatus[NAV_ELEMENTS_ORDER[i]] = true;\n            }\n\n            WindowDimensionsService.registerOnResizeHook(function() {\n              ctrl.windowIsNarrow = WindowDimensionsService.isWindowNarrow();\n              $scope.$applyAsync();\n              // If window is resized larger, try displaying the hidden\n              // elements.\n              if (\n                currentWindowWidth < WindowDimensionsService.getWidth()) {\n                for (var i = 0; i < NAV_ELEMENTS_ORDER.length; i++) {\n                  if (\n                    !ctrl.navElementsVisibilityStatus[NAV_ELEMENTS_ORDER[i]]) {\n                    ctrl.navElementsVisibilityStatus[NAV_ELEMENTS_ORDER[i]] =\n                      true;\n                  }\n                }\n              }\n\n              // Close the sidebar, if necessary.\n              SidebarStatusService.closeSidebar();\n              ctrl.sidebarIsShown = SidebarStatusService.isSidebarShown();\n              currentWindowWidth = WindowDimensionsService.getWidth();\n              truncateNavbarDebounced();\n            });\n            // The function needs to be run after i18n. A timeout of 0 appears\n            // to run after i18n in Chrome, but not other browsers. The function\n            // will check if i18n is complete and set a new timeout if it is\n            // not. Since a timeout of 0 works for at least one browser,\n            // it is used here.\n            $timeout(truncateNavbar, 0);\n          };\n        }\n      ]\n    };\n  }]);\n"
    },
    {
      "filename": "core/templates/dev/head/pages/OppiaFooterDirective.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the footer.\n */\n\n\nangular.module('oppia').directive('oppiaFooter', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./oppia_footer_directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        function() {}\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "core/templates/dev/head/pages/splash-page/splash-page.controller.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Data and controllers for the Oppia splash page.\n */\n\nrequire('base-components/base-content.directive.ts');\n\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('services/site-analytics.service.ts');\nrequire('services/user.service.ts');\n\nangular.module('oppia').directive('splashPage', [function() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {},\n    template: require('./splash-page.directive.html'),\n    controllerAs: '$ctrl',\n    controller: [\n      '$rootScope', '$timeout', '$window', 'SiteAnalyticsService',\n      'UrlInterpolationService', 'UserService',\n      function($rootScope, $timeout, $window, SiteAnalyticsService,\n          UrlInterpolationService, UserService) {\n        var ctrl = this;\n        ctrl.getStaticImageUrl = function(imagePath) {\n          return UrlInterpolationService.getStaticImageUrl(imagePath);\n        };\n        ctrl.getStaticSubjectImageUrl = function(subjectName) {\n          return UrlInterpolationService.getStaticImageUrl('/subjects/' +\n            subjectName + '.svg');\n        };\n\n        ctrl.onRedirectToLogin = function(destinationUrl) {\n          SiteAnalyticsService.registerStartLoginEvent(\n            'splashPageCreateExplorationButton');\n          $timeout(function() {\n            $window.location = destinationUrl;\n          }, 150);\n          return false;\n        };\n\n        ctrl.onClickBrowseLibraryButton = function() {\n          SiteAnalyticsService.registerClickBrowseLibraryButtonEvent();\n          $timeout(function() {\n            $window.location = '/library';\n          }, 150);\n          return false;\n        };\n\n        ctrl.onClickCreateExplorationButton = function() {\n          SiteAnalyticsService.registerClickCreateExplorationButtonEvent();\n          $timeout(function() {\n            $window.location = '/creator_dashboard?mode=create';\n          }, 150);\n          return false;\n        };\n        ctrl.$onInit = function() {\n          ctrl.userIsLoggedIn = null;\n          $rootScope.loadingMessage = 'Loading';\n          UserService.getUserInfoAsync().then(function(userInfo) {\n            ctrl.userIsLoggedIn = userInfo.isLoggedIn();\n            $rootScope.loadingMessage = '';\n          });\n        };\n      }\n    ]\n  };\n}]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl interaction.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('interactions/codemirrorRequires.ts');\n\nrequire('interactions/CodeRepl/directives/code-repl-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/window-dimensions.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveCodeRepl', [\n  '$timeout', 'CodeReplRulesService', 'HtmlEscaperService',\n  'EVENT_NEW_CARD_AVAILABLE',\n  function(\n      $timeout, CodeReplRulesService, HtmlEscaperService,\n      EVENT_NEW_CARD_AVAILABLE) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        getLastAnswer: '&lastAnswer',\n      },\n      template: require('./code-repl-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$attrs', 'WindowDimensionsService',\n        'CurrentInteractionService',\n        function(\n            $scope, $attrs, WindowDimensionsService,\n            CurrentInteractionService) {\n          var ctrl = this;\n          ctrl.initCodeEditor = function(editor) {\n            editor.setValue(ctrl.code);\n            // Options for the ui-codemirror display.\n            editor.setOption('lineNumbers', true);\n            editor.setOption('indentWithTabs', true);\n            editor.setOption('indentUnit', 4);\n            editor.setOption('mode', 'python');\n            editor.setOption('extraKeys', {\n              Tab: function(cm) {\n                var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');\n                cm.replaceSelection(spaces);\n                // Move the cursor to the end of the selection.\n                var endSelectionPos = cm.getDoc().getCursor('head');\n                cm.getDoc().setCursor(endSelectionPos);\n              }\n            });\n            editor.setOption('theme', 'preview default');\n\n            // NOTE: this is necessary to avoid the textarea being greyed-out.\n            $timeout(function() {\n              editor.refresh();\n              initMarkers(editor);\n            }, 200);\n\n            editor.on('change', function() {\n              ctrl.code = editor.getValue();\n            });\n\n            // Without this, the editor does not show up correctly on small\n            // screens when the user switches to the supplemental interaction.\n            $scope.$on('showInteraction', function() {\n              $timeout(function() {\n                editor.refresh();\n                initMarkers(editor);\n              }, 200);\n            });\n\n            ctrl.hasLoaded = true;\n          };\n          ctrl.runAndSubmitCode = function(codeInput) {\n            ctrl.runCode(codeInput, function(evaluation, err) {\n              ctrl.sendResponse(evaluation, err);\n            });\n          };\n\n          var submitAnswer = function() {\n            ctrl.runAndSubmitCode(ctrl.code);\n          };\n\n          ctrl.runCode = function(codeInput, onFinishRunCallback) {\n            ctrl.code = codeInput;\n            ctrl.output = '';\n\n            // Evaluate the program asynchronously using Skulpt.\n            Sk.misceval.asyncToPromise(function() {\n              Sk.importMainWithBody('<stdin>', false, codeInput, true);\n            }).then(function() {\n              // Finished evaluating.\n              ctrl.evaluation = '';\n              ctrl.fullError = '';\n\n              if (onFinishRunCallback) {\n                onFinishRunCallback('', '');\n              }\n            }, function(err) {\n              if (!(err instanceof Sk.builtin.TimeLimitError)) {\n                ctrl.evaluation = '';\n                ctrl.fullError = String(err);\n\n                if (onFinishRunCallback) {\n                  onFinishRunCallback('', String(err));\n                }\n              }\n            });\n          };\n\n          var initMarkers = function(editor) {\n            var doc = editor.getDoc();\n\n            // The -1 here is because prepended code ends with a newline.\n            var preCodeNumLines = ctrl.preCode.split('\\n').length - 1;\n            var postCodeNumLines = ctrl.postCode.split('\\n').length;\n            var fullCodeNumLines = ctrl.code.split('\\n').length;\n            var userCodeNumLines = (\n              fullCodeNumLines - preCodeNumLines - postCodeNumLines);\n\n            // Mark pre- and post- code as uneditable, and give it some styling.\n            var markOptions = {\n              atomic: false,\n              readOnly: true,\n              inclusiveLeft: true,\n              inclusiveRight: true\n            };\n\n            if (ctrl.preCode.length !== 0) {\n              doc.markText(\n                {\n                  line: 0,\n                  ch: 0\n                },\n                {\n                  line: preCodeNumLines,\n                  ch: 0\n                },\n                angular.extend({}, markOptions, {\n                  inclusiveRight: false\n                }));\n\n              for (var i = 0; i < preCodeNumLines; i++) {\n                editor.addLineClass(i, 'text', 'code-repl-noneditable-line');\n              }\n            }\n\n            if (ctrl.postCode.length !== 0) {\n              doc.markText(\n                {\n                  line: preCodeNumLines + userCodeNumLines,\n                  ch: 0\n                },\n                {\n                  line: fullCodeNumLines,\n                  ch: 0\n                },\n                markOptions);\n\n              for (var i = 0; i < postCodeNumLines; i++) {\n                editor.addLineClass(preCodeNumLines + userCodeNumLines + i,\n                  'text', 'code-repl-noneditable-line');\n              }\n            }\n          };\n\n          ctrl.sendResponse = function(evaluation, err) {\n            CurrentInteractionService.onSubmit({\n              // Replace tabs with 2 spaces.\n              // TODO(sll): Change the default Python indentation to 4 spaces.\n              code: ctrl.code.replace(/\\t/g, '  ') || '',\n              output: ctrl.output,\n              evaluation: ctrl.evaluation,\n              error: (err || '')\n            }, CodeReplRulesService);\n\n            // Without this, the error message displayed in the user-facing\n            // console will sometimes not update.\n            $scope.$apply();\n          };\n          ctrl.$onInit = function() {\n            $scope.$on(EVENT_NEW_CARD_AVAILABLE, function() {\n              ctrl.interactionIsActive = false;\n            });\n            ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);\n            ctrl.language = HtmlEscaperService.escapedJsonToObj(\n              $attrs.languageWithValue);\n            ctrl.placeholder = HtmlEscaperService.escapedJsonToObj(\n              $attrs.placeholderWithValue);\n            ctrl.preCode = HtmlEscaperService.escapedJsonToObj(\n              $attrs.preCodeWithValue);\n            ctrl.postCode = HtmlEscaperService.escapedJsonToObj(\n              $attrs.postCodeWithValue);\n\n            // Make sure ctrl.preCode ends with a newline:\n            if (ctrl.preCode.trim().length === 0) {\n              ctrl.preCode = '';\n            } else if (ctrl.preCode.slice(-1) !== '\\n') {\n              ctrl.preCode += '\\n';\n            }\n\n            // Make sure ctrl.placeholder ends with a newline.\n            if (ctrl.placeholder.slice(-1) !== '\\n') {\n              ctrl.placeholder += '\\n';\n            }\n\n            ctrl.hasLoaded = false;\n\n            // Keep the code string given by the user and the stdout from the\n            // evaluation until sending them back to the server.\n            if (ctrl.interactionIsActive) {\n              ctrl.code = (\n                ctrl.preCode + ctrl.placeholder + ctrl.postCode);\n              ctrl.output = '';\n            } else {\n              ctrl.code = ctrl.getLastAnswer().code;\n              ctrl.output = ctrl.getLastAnswer().output;\n            }\n\n            // Configure Skulpt.\n            Sk.configure({\n              output: function(out) {\n                // This output function is called continuously throughout the\n                // runtime of the script.\n                ctrl.output += out;\n              },\n              read: function(name) {\n                // This function is called when a builtin module is imported\n                if (Sk.builtinFiles.files[name] === undefined) {\n                  // If corresponding module is not present then,\n                  // removal of this block also results in failure of import.\n                  throw 'module ' + name + ' not found';\n                }\n                return Sk.builtinFiles.files[name];\n              },\n              timeoutMsg: function() {\n                ctrl.sendResponse('', 'timeout');\n              },\n              execLimit: 10000\n            });\n\n            CurrentInteractionService.registerCurrentInteraction(\n              submitAnswer, null);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('services/html-escaper.service.ts');\nrequire('services/stateful/focus-manager.service.ts');\n\nangular.module('oppia').directive('oppiaResponseCodeRepl', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./code-repl-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'FocusManagerService',\n        function($attrs, FocusManagerService) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n\n            if (ctrl.answer.error) {\n              ctrl.errorFocusLabel = FocusManagerService.generateFocusLabel();\n              FocusManagerService.setFocus(ctrl.errorFocusLabel);\n            }\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl short response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('filters/string-utility-filters/truncate-at-first-line.filter.ts');\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaShortResponseCodeRepl', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./code-repl-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.$onInit = function() {\n          ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/Continue/directives/oppia-interactive-continue.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Continue button interaction.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('interactions/Continue/directives/continue-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\nrequire('services/context.service.ts');\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/window-dimensions.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveContinue', [\n  'ContinueRulesService', 'HtmlEscaperService',\n  function(ContinueRulesService, HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./continue-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'WindowDimensionsService',\n        'CurrentInteractionService', 'ContextService',\n        function(\n            $attrs, WindowDimensionsService,\n            CurrentInteractionService, ContextService) {\n          var ctrl = this;\n          var DEFAULT_BUTTON_TEXT = 'Continue';\n          var DEFAULT_HUMAN_READABLE_ANSWER = 'Please continue.';\n          ctrl.submitAnswer = function() {\n            // We used to show \"(Continue)\" to indicate a 'continue' action when\n            // the learner browses through the history of the exploration, but\n            // this apparently can be mistaken for a button/control. The\n            // following makes the learner's \"answer\" a bit more conversational,\n            // as if they were chatting with Oppia.\n            var humanReadableAnswer = DEFAULT_HUMAN_READABLE_ANSWER;\n            if (ctrl.buttonText !== DEFAULT_BUTTON_TEXT) {\n              humanReadableAnswer = ctrl.buttonText;\n            }\n\n            CurrentInteractionService.onSubmit(\n              humanReadableAnswer, ContinueRulesService);\n          };\n          ctrl.$onInit = function() {\n            ctrl.buttonText = HtmlEscaperService.escapedJsonToObj(\n              $attrs.buttonTextWithValue);\n\n            ctrl.isInEditorMode = ContextService.isInExplorationEditorMode();\n\n            CurrentInteractionService.registerCurrentInteraction(\n              ctrl.submitAnswer, null);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/Continue/directives/oppia-response-continue.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Continue button response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaResponseContinue', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./continue-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'HtmlEscaperService',\n        function($attrs, HtmlEscaperService) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/Continue/directives/oppia-short-response-continue.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the Continue button short response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaShortResponseContinue', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./continue-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'HtmlEscaperService',\n        function($attrs, HtmlEscaperService) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.directive.ts",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the DragAndDropSortInput interaction.\n */\n\nrequire(\n  'interactions/DragAndDropSortInput/directives/' +\n  'drag-and-drop-sort-input-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\n\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/url.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveDragAndDropSortInput', [\n  'DragAndDropSortInputRulesService', 'HtmlEscaperService',\n  function(DragAndDropSortInputRulesService, HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require(\n        './drag-and-drop-sort-input-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'UrlService', 'CurrentInteractionService',\n        function(\n            $attrs, UrlService, CurrentInteractionService) {\n          var ctrl = this;\n          var answers = [];\n          ctrl.submitAnswer = function() {\n            // Converting list of dicts to list of lists to make it consistent\n            // with the ListOfSetsOfHtmlStrings object.\n            answers = [];\n            for (var i = 0; i < ctrl.list.length; i++) {\n              answers.push([ctrl.list[i].title]);\n              for (var j = 0; j < ctrl.list[i].items.length; j++) {\n                answers[i].push(ctrl.list[i].items[j].title);\n              }\n            }\n\n            CurrentInteractionService.onSubmit(\n              answers, DragAndDropSortInputRulesService);\n          };\n          ctrl.$onInit = function() {\n            ctrl.choices = HtmlEscaperService.escapedJsonToObj(\n              $attrs.choicesWithValue);\n\n            ctrl.list = [];\n            ctrl.dataMaxDepth = 1;\n\n            ctrl.allowMultipleItemsInSamePosition = (\n              $attrs.allowMultipleItemsInSamePositionWithValue === 'true');\n\n            if (ctrl.allowMultipleItemsInSamePosition) {\n              ctrl.dataMaxDepth = 2;\n            } else {\n              ctrl.dataMaxDepth = 1;\n            }\n\n            // Make list of dicts from the list of choices.\n            for (var i = 0; i < ctrl.choices.length; i++) {\n              ctrl.list.push({title: ctrl.choices[i], items: []});\n            }\n\n            ctrl.treeOptions = {\n              dragMove: function(e) {\n                // Change the color of the placeholder based on the position of\n                // the dragged item.\n                if (e.dest.nodesScope.$childNodesScope !== undefined) {\n                  e.elements.placeholder[0].style.borderColor = '#add8e6';\n                } else {\n                  e.elements.placeholder[0].style.borderColor = '#000000';\n                }\n              }\n            };\n\n            CurrentInteractionService.registerCurrentInteraction(\n              ctrl.submitAnswer, null);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the DragAndDropSortInput response.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaResponseDragAndDropSortInput', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./drag-and-drop-sort-input-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.chooseItemType = function(index) {\n          if (index === 0) {\n            ctrl.itemtype = 'drag-and-drop-response-item';\n          } else {\n            ctrl.itemtype = 'drag-and-drop-response-subitem';\n          }\n          return true;\n        };\n        ctrl.$onInit = function() {\n          ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          ctrl.isAnswerLengthGreaterThanZero = (ctrl.answer.length > 0);\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the DragAndDropSortInput short response.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaShortResponseDragAndDropSortInput', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require(\n        './drag-and-drop-sort-input-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.chooseItemType = function(index) {\n          if (index === 0) {\n            ctrl.itemtype = 'drag-and-drop-response-item';\n          } else {\n            ctrl.itemtype = 'drag-and-drop-response-subitem';\n          }\n          return true;\n        };\n        ctrl.$onInit = function() {\n          ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          ctrl.isAnswerLengthGreaterThanZero = (ctrl.answer.length > 0);\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the EndExploration 'interaction'.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('domain/collection/read-only-collection-backend-api.service.ts');\nrequire('services/context.service.ts');\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/url.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveEndExploration', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./end-exploration-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$http', '$attrs', '$q', 'UrlService',\n        'ContextService', 'ReadOnlyCollectionBackendApiService',\n        'PAGE_CONTEXT', 'EXPLORATION_EDITOR_TAB_CONTEXT',\n        'HtmlEscaperService', 'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE',\n        function(\n            $http, $attrs, $q, UrlService,\n            ContextService, ReadOnlyCollectionBackendApiService,\n            PAGE_CONTEXT, EXPLORATION_EDITOR_TAB_CONTEXT,\n            HtmlEscaperService, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            var authorRecommendedExplorationIds = (\n              HtmlEscaperService.escapedJsonToObj(\n                $attrs.recommendedExplorationIdsWithValue));\n\n            ctrl.isIframed = UrlService.isIframed();\n            ctrl.isInEditorPage = (\n              ContextService.getPageContext() === (\n                PAGE_CONTEXT.EXPLORATION_EDITOR));\n            ctrl.isInEditorPreviewMode = ctrl.isInEditorPage && (\n              ContextService.getEditorTabContext() ===\n                EXPLORATION_EDITOR_TAB_CONTEXT.PREVIEW);\n            ctrl.isInEditorMainTab = ctrl.isInEditorPage && (\n              ContextService.getEditorTabContext() ===\n                EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR);\n\n            ctrl.collectionId = UrlService.getCollectionIdFromExplorationUrl();\n            if (ctrl.collectionId) {\n              ReadOnlyCollectionBackendApiService\n                .loadCollection(ctrl.collectionId)\n                .then(function(collection) {\n                  ctrl.getCollectionTitle = function() {\n                    return collection.title;\n                  };\n                });\n            }\n\n            ctrl.errorMessage = '';\n\n            if (ctrl.isInEditorPage) {\n              // Display a message if any author-recommended explorations are\n              // invalid.\n              var explorationId = ContextService.getExplorationId();\n              $http.get(EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, {\n                params: {\n                  stringified_exp_ids: JSON.stringify(\n                    authorRecommendedExplorationIds)\n                }\n              }).then(function(response) {\n                var data = response.data;\n                var foundExpIds = [];\n                data.summaries.map(function(expSummary) {\n                  foundExpIds.push(expSummary.id);\n                });\n\n                var missingExpIds = [];\n                authorRecommendedExplorationIds.forEach(function(expId) {\n                  if (foundExpIds.indexOf(expId) === -1) {\n                    missingExpIds.push(expId);\n                  }\n                });\n\n                if (missingExpIds.length === 0) {\n                  ctrl.errorMessage = '';\n                } else {\n                  var listOfIds = missingExpIds.join('\", \"');\n                  ctrl.errorMessage = (\n                    'Warning: exploration(s) with the IDs \"' + listOfIds +\n                    '\" will ' + 'not be shown as recommendations because' +\n                    'they either do not exist, or are not publicly viewable.');\n                }\n              });\n            }\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.directive.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the FractionInput interaction.\n */\n\nrequire('domain/objects/FractionObjectFactory.ts');\nrequire(\n  'interactions/FractionInput/directives/' +\n  'fraction-input-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/window-dimensions.service.ts');\nrequire('services/stateful/focus-manager.service.ts');\n\nrequire('domain/objects/objects-domain.constants.ajs.ts');\n\nangular.module('oppia').directive('oppiaInteractiveFractionInput', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./fraction-input-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$attrs', 'FocusManagerService', 'FractionInputRulesService',\n        'FractionObjectFactory', 'FRACTION_PARSING_ERRORS',\n        'WindowDimensionsService', 'CurrentInteractionService',\n        function(\n            $scope, $attrs, FocusManagerService, FractionInputRulesService,\n            FractionObjectFactory, FRACTION_PARSING_ERRORS,\n            WindowDimensionsService, CurrentInteractionService) {\n          var ctrl = this;\n          // Label for errors caused whilst parsing a fraction.\n          var FORM_ERROR_TYPE = 'FRACTION_FORMAT_ERROR';\n          var errorMessage = '';\n          var requireSimplestForm = (\n            $attrs.requireSimplestFormWithValue === 'true');\n          var allowImproperFraction = (\n            $attrs.allowImproperFractionWithValue === 'true');\n\n          ctrl.getWarningText = function() {\n            return errorMessage;\n          };\n\n          ctrl.submitAnswer = function(answer) {\n            try {\n              var fraction = FractionObjectFactory.fromRawInputString(\n                answer);\n              if (requireSimplestForm &&\n                !angular.equals(fraction, fraction.convertToSimplestForm())\n              ) {\n                errorMessage = (\n                  'Please enter an answer in simplest form ' +\n                  '(e.g., 1/3 instead of 2/6).');\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, false);\n              } else if (\n                !allowImproperFraction && fraction.isImproperFraction()) {\n                errorMessage = (\n                  'Please enter an answer with a \"proper\" fractional part ' +\n                  '(e.g., 1 2/3 instead of 5/3).');\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, false);\n              } else if (\n                !ctrl.allowNonzeroIntegerPart &&\n                  fraction.hasNonzeroIntegerPart()) {\n                errorMessage = (\n                  'Please enter your answer as a fraction (e.g., 5/3 instead ' +\n                  'of 1 2/3).');\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, false);\n              } else {\n                CurrentInteractionService.onSubmit(\n                  fraction, FractionInputRulesService);\n              }\n            } catch (parsingError) {\n              errorMessage = parsingError.message;\n              ctrl.FractionInputForm.answer.$setValidity(\n                FORM_ERROR_TYPE, false);\n            }\n          };\n\n          ctrl.isAnswerValid = function() {\n            if (ctrl.FractionInputForm === undefined) {\n              return false;\n            }\n            return (!ctrl.FractionInputForm.$invalid && ctrl.answer !== '');\n          };\n\n          var submitAnswerFn = function() {\n            ctrl.submitAnswer(ctrl.answer);\n          };\n          ctrl.$onInit = function() {\n            /**\n             * Disables the input box if the data entered is not a valid prefix\n             * for a fraction.\n             * Examples of valid prefixes:\n             * -- 1\n             * -- 1 2\n             * -- 1 2/\n             * -- 2/\n             * -- 1 2/3\n             */\n            $scope.$watch('$ctrl.answer', function(newValue) {\n              var INVALID_CHARS_REGEX = /[^\\d\\s\\/-]/g;\n              // Accepts incomplete fraction inputs\n              // (see examples above except last).\n              var PARTIAL_FRACTION_REGEX =\n                /^\\s*(-?\\s*((\\d*\\s*\\d+\\s*\\/?\\s*)|\\d+)\\s*)?$/;\n              // Accepts complete fraction inputs.\n              var FRACTION_REGEX =\n                /^\\s*-?\\s*((\\d*\\s*\\d+\\s*\\/\\s*\\d+)|\\d+)\\s*$/;\n              if (INVALID_CHARS_REGEX.test(newValue)) {\n                errorMessage = FRACTION_PARSING_ERRORS.INVALID_CHARS;\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, false);\n              } else if (!(FRACTION_REGEX.test(newValue) ||\n                  PARTIAL_FRACTION_REGEX.test(newValue))) {\n                errorMessage = FRACTION_PARSING_ERRORS.INVALID_FORMAT;\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, false);\n              } else {\n                errorMessage = '';\n                ctrl.FractionInputForm.answer.$setValidity(\n                  FORM_ERROR_TYPE, true);\n              }\n            });\n            ctrl.answer = '';\n            ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;\n            ctrl.allowNonzeroIntegerPart = (\n              $attrs.allowNonzeroIntegerPartWithValue === 'true');\n            ctrl.customPlaceholder = HtmlEscaperService.escapedJsonToObj(\n              $attrs.customPlaceholderWithValue);\n\n            ctrl.FRACTION_INPUT_FORM_SCHEMA = {\n              type: 'unicode',\n              ui_config: {}\n            };\n\n            CurrentInteractionService.registerCurrentInteraction(\n              submitAnswerFn, ctrl.isAnswerValid);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/FractionInput/directives/oppia-response-fraction-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the FractionInput response.\n */\n\nrequire('domain/objects/FractionObjectFactory.ts');\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaResponseFractionInput', [\n  'FractionObjectFactory', 'HtmlEscaperService',\n  function(FractionObjectFactory, HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./fraction-input-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.$onInit = function() {\n          var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          ctrl.answer = FractionObjectFactory.fromDict(answer).toString();\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/FractionInput/directives/oppia-short-response-fraction-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the FractionInput short response.\n */\n\nrequire('domain/objects/FractionObjectFactory.ts');\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaShortResponseFractionInput', [\n  'FractionObjectFactory', 'HtmlEscaperService',\n  function(FractionObjectFactory, HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./fraction-input-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.$onInit = function() {\n          var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          ctrl.answer = FractionObjectFactory.fromDict(answer).toString();\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/GraphInput/directives/graph-viz.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the graph-viz.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('interactions/GraphInput/directives/graph-detail.service.ts');\nrequire('services/contextual/device-info.service.ts');\nrequire('services/stateful/focus-manager.service.ts');\n\nrequire('interactions/interactions-extension.constants.ajs.ts');\n\nangular.module('oppia').directive('graphViz', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        graph: '=',\n        canAddVertex: '=',\n        canDeleteVertex: '=',\n        canMoveVertex: '=',\n        canEditVertexLabel: '=',\n        canAddEdge: '=',\n        canDeleteEdge: '=',\n        canEditEdgeWeight: '=',\n        canEditOptions: '=',\n        isInteractionActive: '&interactionIsActive'\n      },\n      template: require('./graph-viz.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$element', '$attrs', '$document',\n        'FocusManagerService', 'GraphDetailService', 'GRAPH_INPUT_LEFT_MARGIN',\n        'EVENT_NEW_CARD_AVAILABLE', 'DeviceInfoService',\n        function(\n            $scope, $element, $attrs, $document,\n            FocusManagerService, GraphDetailService, GRAPH_INPUT_LEFT_MARGIN,\n            EVENT_NEW_CARD_AVAILABLE, DeviceInfoService) {\n          var ctrl = this;\n          var _MODES = {\n            MOVE: 0,\n            ADD_EDGE: 1,\n            ADD_VERTEX: 2,\n            DELETE: 3\n          };\n          var vizContainer = $($element).find('.oppia-graph-viz-svg');\n          // Styling functions\n          var DELETE_COLOR = 'red';\n          var HOVER_COLOR = 'aqua';\n          var SELECT_COLOR = 'orange';\n          var DEFAULT_COLOR = 'black';\n          ctrl.getEdgeColor = function(index) {\n            if (!ctrl.isInteractionActive()) {\n              return DEFAULT_COLOR;\n            }\n            if (ctrl.state.currentMode === _MODES.DELETE &&\n                index === ctrl.state.hoveredEdge &&\n                ctrl.canDeleteEdge) {\n              return DELETE_COLOR;\n            } else if (index === ctrl.state.hoveredEdge) {\n              return HOVER_COLOR;\n            } else if (ctrl.state.selectedEdge === index) {\n              return SELECT_COLOR;\n            } else {\n              return DEFAULT_COLOR;\n            }\n          };\n          ctrl.getVertexColor = function(index) {\n            if (!ctrl.isInteractionActive()) {\n              return DEFAULT_COLOR;\n            }\n            if (ctrl.state.currentMode === _MODES.DELETE &&\n                index === ctrl.state.hoveredVertex &&\n                ctrl.canDeleteVertex) {\n              return DELETE_COLOR;\n            } else if (index === ctrl.state.currentlyDraggedVertex) {\n              return HOVER_COLOR;\n            } else if (index === ctrl.state.hoveredVertex) {\n              return HOVER_COLOR;\n            } else if (ctrl.state.selectedVertex === index) {\n              return SELECT_COLOR;\n            } else {\n              return DEFAULT_COLOR;\n            }\n          };\n          ctrl.getDirectedEdgeArrowPoints = function(index) {\n            return GraphDetailService.getDirectedEdgeArrowPoints(\n              ctrl.graph, index);\n          };\n          ctrl.getEdgeCentre = function(index) {\n            return GraphDetailService.getEdgeCentre(ctrl.graph, index);\n          };\n          ctrl.mousemoveGraphSVG = function(event) {\n            if (!ctrl.isInteractionActive()) {\n              return;\n            }\n            // Note: Transform client (X, Y) to SVG (X, Y). This has to be\n            // done so that changes due to viewBox attribute are\n            // propagated nicely.\n            var pt = vizContainer[0].createSVGPoint();\n            pt.x = event.clientX;\n            pt.y = event.clientY;\n            var svgp = pt.matrixTransform(\n              vizContainer[0].getScreenCTM().inverse());\n            ctrl.state.mouseX = svgp.x;\n            ctrl.state.mouseY = svgp.y;\n            // We use vertexDragStartX/Y and mouseDragStartX/Y to make\n            // mouse-dragging by label more natural, by moving the vertex\n            // according to the difference from the original position.\n            // Otherwise, mouse-dragging by label will make the vertex\n            // awkwardly jump to the mouse.\n            if (ctrl.state.currentlyDraggedVertex !== null &&\n                (ctrl.state.mouseX > GRAPH_INPUT_LEFT_MARGIN)) {\n              ctrl.graph.vertices[ctrl.state.currentlyDraggedVertex].x = (\n                ctrl.state.vertexDragStartX + (\n                  ctrl.state.mouseX - ctrl.state.mouseDragStartX));\n              ctrl.graph.vertices[ctrl.state.currentlyDraggedVertex].y = (\n                ctrl.state.vertexDragStartY + (\n                  ctrl.state.mouseY - ctrl.state.mouseDragStartY));\n            }\n          };\n\n          ctrl.onClickGraphSVG = function() {\n            if (!ctrl.isInteractionActive()) {\n              return;\n            }\n            if (ctrl.state.currentMode === _MODES.ADD_VERTEX &&\n                ctrl.canAddVertex) {\n              ctrl.graph.vertices.push({\n                x: ctrl.state.mouseX,\n                y: ctrl.state.mouseY,\n                label: ''\n              });\n            }\n            if (ctrl.state.hoveredVertex === null) {\n              ctrl.state.selectedVertex = null;\n            }\n            if (ctrl.state.hoveredEdge === null) {\n              ctrl.state.selectedEdge = null;\n            }\n          };\n\n          ctrl.init = function() {\n            initButtons();\n            ctrl.state.currentMode = ctrl.buttons[0].mode;\n            if (ctrl.isMobile) {\n              if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n                ctrl.helpText =\n                  'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';\n              } else if (ctrl.state.currentMode === _MODES.MOVE) {\n                ctrl.helpText =\n                  'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';\n              } else {\n                ctrl.helpText = null;\n              }\n            } else {\n              ctrl.helpText = null;\n            }\n          };\n\n          var initButtons = function() {\n            ctrl.buttons = [];\n            if (ctrl.canMoveVertex) {\n              ctrl.buttons.push({\n                text: '\\uF0B2',\n                description: 'I18N_INTERACTIONS_GRAPH_MOVE',\n                mode: _MODES.MOVE\n              });\n            }\n            if (ctrl.canAddEdge) {\n              ctrl.buttons.push({\n                text: '\\uF0C1',\n                description: 'I18N_INTERACTIONS_GRAPH_ADD_EDGE',\n                mode: _MODES.ADD_EDGE\n              });\n            }\n            if (ctrl.canAddVertex) {\n              ctrl.buttons.push({\n                text: '\\uF067',\n                description: 'I18N_INTERACTIONS_GRAPH_ADD_NODE',\n                mode: _MODES.ADD_VERTEX\n              });\n            }\n            if (ctrl.canDeleteVertex || ctrl.canDeleteEdge) {\n              ctrl.buttons.push({\n                text: '\\uF068',\n                description: 'I18N_INTERACTIONS_GRAPH_DELETE',\n                mode: _MODES.DELETE\n              });\n            }\n          };\n\n          var initViewboxSize = function() {\n            var svgContainer = $($element).find('.oppia-graph-viz-svg')[0];\n            var boundingBox = svgContainer.getBBox();\n            var viewBoxHeight = Math.max(\n              boundingBox.height + boundingBox.y,\n              svgContainer.getAttribute('height'));\n            ctrl.svgViewBox = (\n              0 + ' ' + 0 + ' ' + (boundingBox.width + boundingBox.x) +\n                ' ' + (viewBoxHeight));\n          };\n          ctrl.toggleGraphOption = function(option) {\n            // Handle the case when we have two edges s -> d and d -> s\n            if (option === 'isDirected' && ctrl.graph[option]) {\n              _deleteRepeatedUndirectedEdges();\n            }\n            ctrl.graph[option] = !ctrl.graph[option];\n          };\n          var setMode = function(mode) {\n            ctrl.state.currentMode = mode;\n            if (ctrl.isMobile) {\n              if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n                ctrl.helpText =\n                  'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';\n              } else if (ctrl.state.currentMode === _MODES.MOVE) {\n                ctrl.helpText =\n                  'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';\n              } else {\n                ctrl.helpText = null;\n              }\n            } else {\n              ctrl.helpText = null;\n            }\n            ctrl.state.addEdgeVertex = null;\n            ctrl.state.selectedVertex = null;\n            ctrl.state.selectedEdge = null;\n            ctrl.state.currentlyDraggedVertex = null;\n            ctrl.state.hoveredVertex = null;\n          };\n          ctrl.onClickModeButton = function(mode, $event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n            if (ctrl.isInteractionActive()) {\n              setMode(mode);\n            }\n          };\n\n          // TODO(czx): Consider if there's a neat way to write a reset()\n          // function to clear bits of ctrl.state\n          // (e.g. currentlyDraggedVertex, addEdgeVertex)\n\n          // Vertex events\n          ctrl.onClickVertex = function(index) {\n            if (ctrl.state.currentMode === _MODES.DELETE) {\n              if (ctrl.canDeleteVertex) {\n                deleteVertex(index);\n              }\n            }\n            if (ctrl.state.currentMode !== _MODES.DELETE &&\n                ctrl.graph.isLabeled &&\n                ctrl.canEditVertexLabel) {\n              beginEditVertexLabel(index);\n            }\n            if (ctrl.isMobile) {\n              ctrl.state.hoveredVertex = index;\n              if (ctrl.state.addEdgeVertex === null &&\n                  ctrl.state.currentlyDraggedVertex === null) {\n                ctrl.onTouchInitialVertex(index);\n              } else {\n                if (ctrl.state.addEdgeVertex === index) {\n                  ctrl.state.hoveredVertex = null;\n                  ctrl.helpText =\n                    'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';\n                  ctrl.state.addEdgeVertex = null;\n                  return;\n                }\n                ctrl.onTouchFinalVertex(index);\n              }\n            }\n          };\n\n          ctrl.onTouchInitialVertex = function(index) {\n            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n              if (ctrl.canAddEdge) {\n                beginAddEdge(index);\n                ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_EDGE_FINAL_HELPTEXT';\n              }\n            } else if (ctrl.state.currentMode === _MODES.MOVE) {\n              if (ctrl.canMoveVertex) {\n                beginDragVertex(index);\n                ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_MOVE_FINAL_HELPTEXT';\n              }\n            }\n          };\n\n          ctrl.onTouchFinalVertex = function(index) {\n            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n              tryAddEdge(\n                ctrl.state.addEdgeVertex, index);\n              endAddEdge();\n              ctrl.state.hoveredVertex = null;\n              ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';\n            } else if (ctrl.state.currentMode === _MODES.MOVE) {\n              if (ctrl.state.currentlyDraggedVertex !== null) {\n                endDragVertex();\n                ctrl.state.hoveredVertex = null;\n                ctrl.helpText =\n                  'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';\n              }\n            }\n          };\n\n          ctrl.onMousedownVertex = function(index) {\n            if (ctrl.isMobile) {\n              return;\n            }\n            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n              if (ctrl.canAddEdge) {\n                beginAddEdge(index);\n              }\n            } else if (ctrl.state.currentMode === _MODES.MOVE) {\n              if (ctrl.canMoveVertex) {\n                beginDragVertex(index);\n              }\n            }\n          };\n\n          ctrl.onMouseleaveVertex = function(index) {\n            if (ctrl.isMobile) {\n              return;\n            }\n            ctrl.state.hoveredVertex = (\n              index === ctrl.state.hoveredVertex) ?\n              null : ctrl.state.hoveredVertex;\n          };\n\n          ctrl.onClickVertexLabel = function(index) {\n            if (ctrl.graph.isLabeled && ctrl.canEditVertexLabel) {\n              beginEditVertexLabel(index);\n            }\n          };\n\n          // Edge events\n          ctrl.onClickEdge = function(index) {\n            if (ctrl.state.currentMode === _MODES.DELETE) {\n              if (ctrl.canDeleteEdge) {\n                deleteEdge(index);\n              }\n            }\n            if (ctrl.state.currentMode !== _MODES.DELETE &&\n                ctrl.graph.isWeighted &&\n                ctrl.canEditEdgeWeight) {\n              beginEditEdgeWeight(index);\n            }\n          };\n          ctrl.onClickEdgeWeight = function(index) {\n            if (ctrl.graph.isWeighted && ctrl.canEditEdgeWeight) {\n              beginEditEdgeWeight(index);\n            }\n          };\n\n          // Document event\n          ctrl.onMouseupDocument = function() {\n            if (ctrl.isMobile) {\n              return;\n            }\n            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {\n              if (ctrl.state.hoveredVertex !== null) {\n                tryAddEdge(\n                  ctrl.state.addEdgeVertex, ctrl.state.hoveredVertex);\n              }\n              endAddEdge();\n            } else if (ctrl.state.currentMode === _MODES.MOVE) {\n              if (ctrl.state.currentlyDraggedVertex !== null) {\n                endDragVertex();\n              }\n            }\n          };\n          // Actions\n          var beginAddEdge = function(startIndex) {\n            ctrl.state.addEdgeVertex = startIndex;\n          };\n\n          var endAddEdge = function() {\n            ctrl.state.addEdgeVertex = null;\n          };\n\n          var tryAddEdge = function(startIndex, endIndex) {\n            if (\n              startIndex === null ||\n              endIndex === null ||\n              startIndex === endIndex ||\n              startIndex < 0 ||\n              endIndex < 0 ||\n              startIndex >= ctrl.graph.vertices.length ||\n              endIndex >= ctrl.graph.vertices.length) {\n              return;\n            }\n            for (var i = 0; i < ctrl.graph.edges.length; i++) {\n              if (startIndex === ctrl.graph.edges[i].src &&\n                  endIndex === ctrl.graph.edges[i].dst) {\n                return;\n              }\n              if (!ctrl.graph.isDirected) {\n                if (startIndex === ctrl.graph.edges[i].dst &&\n                    endIndex === ctrl.graph.edges[i].src) {\n                  return;\n                }\n              }\n            }\n            ctrl.graph.edges.push({\n              src: startIndex,\n              dst: endIndex,\n              weight: 1\n            });\n            return;\n          };\n\n          var beginDragVertex = function(index) {\n            ctrl.state.currentlyDraggedVertex = index;\n            ctrl.state.vertexDragStartX = ctrl.graph.vertices[index].x;\n            ctrl.state.vertexDragStartY = ctrl.graph.vertices[index].y;\n            ctrl.state.mouseDragStartX = ctrl.state.mouseX;\n            ctrl.state.mouseDragStartY = ctrl.state.mouseY;\n          };\n\n          var endDragVertex = function() {\n            ctrl.state.currentlyDraggedVertex = null;\n            ctrl.state.vertexDragStartX = 0;\n            ctrl.state.vertexDragStartY = 0;\n            ctrl.state.mouseDragStartX = 0;\n            ctrl.state.mouseDragStartY = 0;\n          };\n\n          var beginEditVertexLabel = function(index) {\n            ctrl.state.selectedVertex = index;\n            FocusManagerService.setFocus('vertexLabelEditBegun');\n          };\n\n          var beginEditEdgeWeight = function(index) {\n            ctrl.state.selectedEdge = index;\n            ctrl.selectedEdgeWeightValue = (\n              ctrl.graph.edges[ctrl.state.selectedEdge].weight);\n            ctrl.shouldShowWrongWeightWarning = false;\n            FocusManagerService.setFocus('edgeWeightEditBegun');\n          };\n\n          var deleteEdge = function(index) {\n            ctrl.graph.edges.splice(index, 1);\n            ctrl.state.hoveredEdge = null;\n          };\n\n          var _deleteRepeatedUndirectedEdges = function() {\n            for (var i = 0; i < ctrl.graph.edges.length; i++) {\n              var edge1 = ctrl.graph.edges[i];\n              for (var j = i + 1; j < ctrl.graph.edges.length; j++) {\n                var edge2 = ctrl.graph.edges[j];\n                if ((edge1.src === edge2.src && edge1.dst === edge2.dst) ||\n                    (edge1.src === edge2.dst && edge1.dst === edge2.src)) {\n                  deleteEdge(j);\n                  j--;\n                }\n              }\n            }\n          };\n\n          var deleteVertex = function(index) {\n            // Using jQuery's map instead of normal array.map because\n            // it removes elements for which the callback returns null\n            ctrl.graph.edges = $.map(ctrl.graph.edges, function(edge) {\n              if (edge.src === index || edge.dst === index) {\n                return null;\n              }\n              if (edge.src > index) {\n                edge.src--;\n              }\n              if (edge.dst > index) {\n                edge.dst--;\n              }\n              return edge;\n            });\n            ctrl.graph.vertices.splice(index, 1);\n            ctrl.state.hoveredVertex = null;\n          };\n\n          ctrl.selectedVertexLabelGetterSetter = function(label) {\n            if (ctrl.state.selectedVertex === null) {\n              return '';\n            }\n            if (angular.isDefined(label)) {\n              ctrl.graph.vertices[ctrl.state.selectedVertex].label = label;\n            }\n            return ctrl.graph.vertices[ctrl.state.selectedVertex].label;\n          };\n\n          ctrl.selectedEdgeWeight = function(weight) {\n            if (ctrl.state.selectedEdge === null) {\n              return '';\n            }\n            if (weight === null) {\n              ctrl.selectedEdgeWeightValue = '';\n            }\n            if (angular.isNumber(weight)) {\n              ctrl.selectedEdgeWeightValue = weight;\n            }\n            return ctrl.selectedEdgeWeightValue;\n          };\n\n          ctrl.isValidEdgeWeight = function() {\n            return angular.isNumber(ctrl.selectedEdgeWeightValue);\n          };\n\n          ctrl.onUpdateEdgeWeight = function() {\n            if (angular.isNumber(ctrl.selectedEdgeWeightValue)) {\n              ctrl.graph.edges[ctrl.state.selectedEdge].weight = (\n                ctrl.selectedEdgeWeightValue);\n            }\n            ctrl.state.selectedEdge = null;\n          };\n          ctrl.$onInit = function() {\n            $scope.$on(EVENT_NEW_CARD_AVAILABLE, function() {\n              ctrl.state.currentMode = null;\n            });\n            // The current state of the UI and stuff like that.\n            ctrl.state = {\n              currentMode: _MODES.MOVE,\n              // Vertex, edge, mode button, label currently being hovered over.\n              hoveredVertex: null,\n              hoveredEdge: null,\n              hoveredModeButton: null,\n              // If in ADD_EDGE mode, source vertex of the new edge, if it\n              // exists.\n              addEdgeVertex: null,\n              // Currently dragged vertex.\n              currentlyDraggedVertex: null,\n              // Selected vertex for editing label.\n              selectedVertex: null,\n              // Selected edge for editing weight.\n              selectedEdge: null,\n              // Mouse position in SVG coordinates.\n              mouseX: 0,\n              mouseY: 0,\n              // Original position of dragged vertex.\n              vertexDragStartX: 0,\n              vertexDragStartY: 0,\n              // Original position of mouse when dragging started.\n              mouseDragStartX: 0,\n              mouseDragStartY: 0\n            };\n\n            ctrl.VERTEX_RADIUS = GraphDetailService.VERTEX_RADIUS;\n            ctrl.EDGE_WIDTH = GraphDetailService.EDGE_WIDTH;\n            ctrl.selectedEdgeWeightValue = 0;\n            ctrl.shouldShowWrongWeightWarning = false;\n\n            ctrl.isMobile = false;\n            if (DeviceInfoService.isMobileDevice()) {\n              ctrl.isMobile = true;\n            }\n\n            ctrl.vizWidth = vizContainer.width();\n\n            ctrl.graphOptions = [{\n              text: 'Labeled',\n              option: 'isLabeled'\n            },\n            {\n              text: 'Directed',\n              option: 'isDirected'\n            },\n            {\n              text: 'Weighted',\n              option: 'isWeighted'\n            }];\n            ctrl.helpText = null;\n            $document.on('mouseup', ctrl.onMouseupDocument);\n\n            // Initial value of SVG view box.\n            ctrl.svgViewBox = initViewboxSize();\n\n            if (ctrl.isInteractionActive()) {\n              ctrl.init();\n            }\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the GraphInput interaction.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('interactions/GraphInput/directives/graph-viz.directive.ts');\n\nrequire('interactions/GraphInput/directives/graph-input-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\nrequire('services/html-escaper.service.ts');\nrequire('services/contextual/url.service.ts');\nrequire('services/contextual/window-dimensions.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveGraphInput', [\n  'GraphInputRulesService', 'HtmlEscaperService', 'EVENT_NEW_CARD_AVAILABLE',\n  function(\n      GraphInputRulesService, HtmlEscaperService, EVENT_NEW_CARD_AVAILABLE) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        getLastAnswer: '&lastAnswer',\n      },\n      template: require('./graph-input-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$element', '$attrs', 'WindowDimensionsService',\n        'CurrentInteractionService',\n        function(\n            $scope, $element, $attrs, WindowDimensionsService,\n            CurrentInteractionService) {\n          var ctrl = this;\n          ctrl.submitGraph = function() {\n            // Here, angular.copy is needed to strip $$hashkey from the graph.\n            CurrentInteractionService.onSubmit(\n              angular.copy(ctrl.graph), GraphInputRulesService);\n          };\n\n          ctrl.resetGraph = function() {\n            var newGraph = HtmlEscaperService.escapedJsonToObj(\n              $attrs.graphWithValue);\n            if (checkValidGraph(newGraph)) {\n              ctrl.graph = newGraph;\n            } else {\n              ctrl.errorMessage = 'I18N_INTERACTIONS_GRAPH_ERROR_INVALID';\n            }\n          };\n\n          var init = function() {\n            if (ctrl.interactionIsActive) {\n              ctrl.resetGraph();\n            } else {\n              ctrl.graph = ctrl.getLastAnswer();\n            }\n            var stringToBool = function(str) {\n              return (str === 'true');\n            };\n            ctrl.canAddVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canAddVertexWithValue) : false;\n            ctrl.canDeleteVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canDeleteVertexWithValue) : false;\n            ctrl.canEditVertexLabel = ctrl.interactionIsActive ?\n              stringToBool($attrs.canEditVertexLabelWithValue) : false;\n            ctrl.canMoveVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canMoveVertexWithValue) : false;\n            ctrl.canAddEdge = ctrl.interactionIsActive ?\n              stringToBool($attrs.canAddEdgeWithValue) : false;\n            ctrl.canDeleteEdge = ctrl.interactionIsActive ?\n              stringToBool($attrs.canDeleteEdgeWithValue) : false;\n            ctrl.canEditEdgeWeight = ctrl.interactionIsActive ?\n              stringToBool($attrs.canEditEdgeWeightWithValue) : false;\n          };\n\n          // TODO(czxcjx): Write this function\n          var checkValidGraph = function(graph) {\n            return Boolean(graph);\n          };\n\n          var validityCheckFn = function() {\n            return checkValidGraph(ctrl.graph);\n          };\n          ctrl.$onInit = function() {\n            $scope.$on(EVENT_NEW_CARD_AVAILABLE, function() {\n              ctrl.interactionIsActive = false;\n\n              ctrl.canAddVertex = false;\n              ctrl.canDeleteVertex = false;\n              ctrl.canEditVertexLabel = false;\n              ctrl.canMoveVertex = false;\n              ctrl.canAddEdge = false;\n              ctrl.canDeleteEdge = false;\n              ctrl.canEditEdgeWeight = false;\n            });\n            ctrl.errorMessage = '';\n            ctrl.graph = {\n              vertices: [],\n              edges: [],\n              isDirected: false,\n              isWeighted: false,\n              isLabeled: false\n            };\n\n            ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);\n\n            CurrentInteractionService.registerCurrentInteraction(\n              ctrl.submitGraph, validityCheckFn);\n\n            if (ctrl.interactionIsActive) {\n              ctrl.resetGraph();\n            } else {\n              ctrl.graph = ctrl.getLastAnswer();\n            }\n            var stringToBool = function(str) {\n              return (str === 'true');\n            };\n            ctrl.canAddVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canAddVertexWithValue) : false;\n            ctrl.canDeleteVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canDeleteVertexWithValue) : false;\n            ctrl.canEditVertexLabel = ctrl.interactionIsActive ?\n              stringToBool($attrs.canEditVertexLabelWithValue) : false;\n            ctrl.canMoveVertex = ctrl.interactionIsActive ?\n              stringToBool($attrs.canMoveVertexWithValue) : false;\n            ctrl.canAddEdge = ctrl.interactionIsActive ?\n              stringToBool($attrs.canAddEdgeWithValue) : false;\n            ctrl.canDeleteEdge = ctrl.interactionIsActive ?\n              stringToBool($attrs.canDeleteEdgeWithValue) : false;\n            ctrl.canEditEdgeWeight = ctrl.interactionIsActive ?\n              stringToBool($attrs.canEditEdgeWeightWithValue) : false;\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/GraphInput/directives/oppia-response-graph-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the GraphInput response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('interactions/GraphInput/directives/graph-detail.service.ts');\nrequire('services/html-escaper.service.ts');\n\nrequire('interactions/interactions-extension.constants.ajs.ts');\n\nangular.module('oppia').directive('oppiaResponseGraphInput', [\n  'GraphDetailService', 'HtmlEscaperService', 'GRAPH_INPUT_LEFT_MARGIN',\n  function(GraphDetailService, HtmlEscaperService, GRAPH_INPUT_LEFT_MARGIN) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./graph-input-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.getDirectedEdgeArrowPoints = function(index) {\n          return GraphDetailService.getDirectedEdgeArrowPoints(\n            ctrl.graph, index);\n        };\n\n        ctrl.getEdgeCentre = function(index) {\n          return GraphDetailService.getEdgeCentre(ctrl.graph, index);\n        };\n        ctrl.$onInit = function() {\n          ctrl.graph = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n          ctrl.VERTEX_RADIUS = GraphDetailService.VERTEX_RADIUS;\n          ctrl.EDGE_WIDTH = GraphDetailService.EDGE_WIDTH;\n          ctrl.GRAPH_INPUT_LEFT_MARGIN = GRAPH_INPUT_LEFT_MARGIN;\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/GraphInput/directives/oppia-short-response-graph-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the GraphInput short response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaShortResponseGraphInput', [\n  'HtmlEscaperService', function(HtmlEscaperService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./graph-input-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.$onInit = function() {\n          // TODO(bhenning): Improve this short response by using a small\n          // version of the graph image instead of an arbitrary label of\n          // vertices and edges.\n          ctrl.graph = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n        };\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/ImageClickInput/directives/oppia-interactive-image-click-input.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the ImageClickInput interaction.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire(\n  'interactions/ImageClickInput/directives/' +\n  'image-click-input-rules.service.ts');\nrequire('pages/exploration-player-page/services/image-preloader.service.ts');\nrequire('services/assets-backend-api.service.ts');\nrequire('services/context.service.ts');\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaInteractiveImageClickInput', [\n  'AssetsBackendApiService', 'ContextService',\n  'HtmlEscaperService', 'ImageClickInputRulesService', 'ImagePreloaderService',\n  'UrlInterpolationService', 'EVENT_NEW_CARD_AVAILABLE',\n  'EXPLORATION_EDITOR_TAB_CONTEXT', 'LOADING_INDICATOR_URL',\n  function(\n      AssetsBackendApiService, ContextService,\n      HtmlEscaperService, ImageClickInputRulesService, ImagePreloaderService,\n      UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE,\n      EXPLORATION_EDITOR_TAB_CONTEXT, LOADING_INDICATOR_URL) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        getLastAnswer: '&lastAnswer'\n      },\n      template: require('./image-click-input-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$element', '$attrs', '$scope', 'CurrentInteractionService',\n        function($element, $attrs, $scope, CurrentInteractionService) {\n          var ctrl = this;\n          var imageAndRegions = HtmlEscaperService.escapedJsonToObj(\n            $attrs.imageAndRegionsWithValue);\n          ctrl.updateCurrentlyHoveredRegions = function() {\n            for (var i = 0; i < imageAndRegions.labeledRegions.length; i++) {\n              var labeledRegion = imageAndRegions.labeledRegions[i];\n              var regionArea = labeledRegion.region.area;\n              if (regionArea[0][0] <= ctrl.mouseX &&\n                  ctrl.mouseX <= regionArea[1][0] &&\n                  regionArea[0][1] <= ctrl.mouseY &&\n                  ctrl.mouseY <= regionArea[1][1]) {\n                ctrl.currentlyHoveredRegions.push(labeledRegion.label);\n              }\n            }\n          };\n          ctrl.getRegionDimensions = function(index) {\n            var image = $($element).find('.oppia-image-click-img');\n            var labeledRegion = imageAndRegions.labeledRegions[index];\n            var regionArea = labeledRegion.region.area;\n            var leftDelta = image.offset().left - image.parent().offset().left;\n            var topDelta = image.offset().top - image.parent().offset().top;\n            return {\n              left: regionArea[0][0] * image.width() + leftDelta,\n              top: regionArea[0][1] * image.height() + topDelta,\n              width: (regionArea[1][0] - regionArea[0][0]) * image.width(),\n              height: (regionArea[1][1] - regionArea[0][1]) * image.height()\n            };\n          };\n          ctrl.getRegionDisplay = function(label) {\n            if (ctrl.currentlyHoveredRegions.indexOf(label) === -1) {\n              return 'none';\n            } else {\n              return 'inline';\n            }\n          };\n          ctrl.getDotDisplay = function() {\n            if (ContextService.getEditorTabContext() ===\n                EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR) {\n              return 'none';\n            }\n            return 'inline';\n          };\n          ctrl.getDotLocation = function() {\n            var image = $($element).find('.oppia-image-click-img');\n            var dotLocation = {\n              left: null,\n              top: null\n            };\n            if (ctrl.lastAnswer) {\n              dotLocation.left =\n                ctrl.lastAnswer.clickPosition[0] * image.width() +\n                image.offset().left -\n                image.parent().offset().left - 5;\n              dotLocation.top =\n                ctrl.lastAnswer.clickPosition[1] * image.height() +\n                image.offset().top -\n                image.parent().offset().top - 5;\n            }\n            return dotLocation;\n          };\n          ctrl.onMousemoveImage = function(event) {\n            if (!ctrl.interactionIsActive) {\n              return;\n            }\n            var image = $($element).find('.oppia-image-click-img');\n            ctrl.mouseX =\n              (event.pageX - image.offset().left) / image.width();\n            ctrl.mouseY =\n              (event.pageY - image.offset().top) / image.height();\n            ctrl.currentlyHoveredRegions = [];\n            ctrl.updateCurrentlyHoveredRegions();\n          };\n          ctrl.onClickImage = function() {\n            var answer = {\n              clickPosition: [ctrl.mouseX, ctrl.mouseY],\n              clickedRegions: ctrl.currentlyHoveredRegions\n            };\n            CurrentInteractionService.onSubmit(\n              answer, ImageClickInputRulesService);\n          };\n          ctrl.$onInit = function() {\n            $scope.$on(EVENT_NEW_CARD_AVAILABLE, function() {\n              ctrl.interactionIsActive = false;\n              ctrl.lastAnswer = {\n                clickPosition: [ctrl.mouseX, ctrl.mouseY]\n              };\n            });\n            ctrl.highlightRegionsOnHover =\n              ($attrs.highlightRegionsOnHoverWithValue === 'true');\n            ctrl.filepath = imageAndRegions.imagePath;\n            ctrl.imageUrl = '';\n            ctrl.loadingIndicatorUrl = UrlInterpolationService\n              .getStaticImageUrl(LOADING_INDICATOR_URL);\n            ctrl.isLoadingIndicatorShown = false;\n            ctrl.isTryAgainShown = false;\n\n            if (ImagePreloaderService.inExplorationPlayer()) {\n              ctrl.isLoadingIndicatorShown = true;\n              ctrl.dimensions = (\n                ImagePreloaderService.getDimensionsOfImage(ctrl.filepath));\n              // For aligning the gif to the center of it's container\n              var loadingIndicatorSize = (\n                (ctrl.dimensions.height < 124) ? 24 : 120);\n              ctrl.imageContainerStyle = {\n                height: ctrl.dimensions.height + 'px'\n              };\n              ctrl.loadingIndicatorStyle = {\n                height: loadingIndicatorSize + 'px',\n                width: loadingIndicatorSize + 'px'\n              };\n\n              ctrl.loadImage = function() {\n                ImagePreloaderService.getImageUrl(ctrl.filepath)\n                  .then(function(objectUrl) {\n                    ctrl.isTryAgainShown = false;\n                    ctrl.isLoadingIndicatorShown = false;\n                    ctrl.imageUrl = objectUrl;\n                  }, function() {\n                    ctrl.isTryAgainShown = true;\n                    ctrl.isLoadingIndicatorShown = false;\n                  });\n              };\n              ctrl.loadImage();\n            } else {\n              // This is the case when user is in exploration editor or in\n              // preview mode. We don't have loading indicator or try again for\n              // showing images in the exploration editor or in preview mode. So\n              // we directly assign the url to the imageUrl.\n              ctrl.imageUrl = AssetsBackendApiService.getImageUrlForPreview(\n                ContextService.getEntityType(), ContextService.getEntityId(),\n                ctrl.filepath);\n            }\n\n            ctrl.mouseX = 0;\n            ctrl.mouseY = 0;\n            ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);\n            if (!ctrl.interactionIsActive) {\n              ctrl.lastAnswer = ctrl.getLastAnswer();\n            }\n\n            ctrl.currentlyHoveredRegions = [];\n            ctrl.allRegions = imageAndRegions.labeledRegions;\n            if (!ctrl.interactionIsActive) {\n              /* The following lines highlight the learner's last answer for\n                this card. This need only be done at the beginning as if he\n                submits an answer, based on EVENT_NEW_CARD_AVAILABLE, the image\n                is made inactive, so his last selection would be higlighted.*/\n              ctrl.mouseX = ctrl.getLastAnswer().clickPosition[0];\n              ctrl.mouseY = ctrl.getLastAnswer().clickPosition[1];\n              ctrl.updateCurrentlyHoveredRegions();\n            }\n\n            CurrentInteractionService.registerCurrentInteraction(null, null);\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/ImageClickInput/directives/oppia-response-image-click-input.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the ImageClickInput response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('services/html-escaper.service.ts');\n\nangular.module('oppia').directive('oppiaResponseImageClickInput', [\n  function() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      template: require('./image-click-input-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'HtmlEscaperService',\n        function($attrs, HtmlEscaperService) {\n          var ctrl = this;\n          ctrl.$onInit = function() {\n            var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n            ctrl.clickRegionLabel = '(Clicks on ' + (\n              _answer.clickedRegions.length > 0 ?\n                '\\'' + _answer.clickedRegions[0] + '\\'' : 'image') + ')';\n          };\n        }\n      ]\n    };\n  }\n]);\n"
    }
  ]
}