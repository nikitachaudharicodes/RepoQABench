{
  "repo_name": "oppia_oppia",
  "issue_id": "6975",
  "issue_description": "# Apply the new naming convention to remaining directories.\n\n<!--\r\n  - Thanks for taking the time to report a bug in the Oppia project.\r\n  - Before filing a new issue, please do a quick search to check that it hasn't\r\n  - already been filed on the [issue tracker](https://github.com/oppia/oppia/issues)._\r\n  -->\r\n\r\nThe new naming convention needs to be applied to the remaining directories.\r\n\r\n- [x]  `services/` @xlogix #6975 \r\n- [x]  `extensions/` @RafayGhafoor #7360\r\n- [x]  `domain/` @Jethet\r\n- [x]  `expressions/` - @rt4914\r\n- [x]  `directives/` - @rt4914 (#7215)\r\n- [x]  `base_components/` - @rt4914\r\n\r\nThe naming follows a general pattern:\r\n\r\n- The filename is divided into three parts (four for spec files). The first part is the name of the functionality, the second part is the type of functionality and the third part is the file extension. The third part in case of spec files become the word “spec” and the extension becomes the fourth part.\r\n\r\n- The different parts of the filename are joined by periods.\r\n\r\n- If the first part of the name has multiple words then the words are joined by kebab-case, with all the letters being small.\r\n\r\n- For eg if there is a directive file which houses a directive named stateResponses. Then the name of the file would be state-responses.directive.ts \r\n\r\n\r\nTypes of functionality.\r\n\r\n- Directives: A directive’s name must end with “.directive.ts” For example, if the name of a directive is ‘stateResponses’ then the name of the file must be “state-responses.directive.ts”.\r\n\r\n- Controllers: A controller’s name must end with “.controller.ts” For example, if the name of a directive is ‘StoryEditor’ then the name of the file must be “story-editor.controller.ts”.\r\n\r\n- Filters: A filter’s name must end with “.filter.ts” For example, if the name of a filter is ‘formatTimer’ then the name of the file must be “format-timer.filter.ts”.\r\n\r\n- Services: A service’s name must end with “.service.ts” For example, if the name of a service is ‘ExplorationDataService’ then the name of the file must be “exploration-data.service.ts”.\r\n\r\n- Constants: The constants of a page are to be kept in a single file. The file should be named name-of-the-page.constants.ts. Any new constant that needs to be added should be added to this file only and this constants.ts file should be required in the file which uses the constant. \r\n\r\n- HTML files: There are three types of HTML files:-\r\n\r\n   1. Mainpage: These are the pages which act as a starting point of the page. These pages are directly called from the backend. The names of these HTML files must end with “.mainpage.html”. For example, the main page of the exploration editor page would be named exploration-editor-page.mainpage.html.\r\n\r\n    2. Directive: These are the HTML files which are served by the directive files. These are the HTML files that appear in the ‘templateUrl’ of the directive. These must have their names ending with “.directive.html”. For example, the progress nav directive would be named progress-nav.directive.html.\r\n\r\n    3. Template: These are the shared HTML files which are required by various other functions like modals, jinja templating, etc.  These names are to end with \".template.html\" \r\n\r\n- Script files: These are the TS files which are for the sole purpose of importing the required TS files for the HTML file. Such files are to end with “.scripts.ts”. For example if a file get-started.mainpage.html needs a script file then the file would be named “get-started.scripts.ts”\r\n\r\n\r\n**Note:** The root directory for the frontend file is located here: [oppia/core/templates/dev/head](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain)",
  "issue_comments": [
    {
      "id": 513530498,
      "user": "rt4914",
      "body": "Hello @ankita240796 \r\nAssign me to this **directives** directory, as my starter issue.\r\n"
    },
    {
      "id": 513542637,
      "user": "ankita240796",
      "body": "Done @rt4914! "
    },
    {
      "id": 513542681,
      "user": "rt4914",
      "body": "Thanks\n\nOn Sun, 21 Jul 2019 at 4:07 PM, Ankita Saxena <notifications@github.com>\nwrote:\n\n> Done @rt4914 <https://github.com/rt4914>!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/6975?email_source=notifications&email_token=ACHV65GPX7FJZ3WYDPZWAE3QAQ36VA5CNFSM4HZLQHBKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2OAT3I#issuecomment-513542637>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ACHV65HVWQSQOYSQTQTERNDQAQ36VANCNFSM4HZLQHBA>\n> .\n>\n"
    },
    {
      "id": 514975154,
      "user": "rt4914",
      "body": "Hello @ankita240796 \r\nPlease assign me **expressions** and **base_components** directive too.\r\nThanks"
    },
    {
      "id": 514977436,
      "user": "ankita240796",
      "body": "Hi @rt4914, Congrats on completing your first PR to Oppia! I have assigned you to expressions and base_components. Do let me know if you face any issues. Thanks!"
    },
    {
      "id": 514978748,
      "user": "rt4914",
      "body": "> Hi @rt4914, Congrats on completing your first PR to Oppia! I have assigned you to expressions and base_components. Do let me know if you face any issues. Thanks!\r\n\r\nGreat. Thank you"
    },
    {
      "id": 514984016,
      "user": "rt4914",
      "body": "Hello @ankita240796 ,\r\nThere is one file named header.html in base_components folder, should I name this file as header.mainpage.html ?"
    },
    {
      "id": 515459261,
      "user": "RafayGhafoor",
      "body": "Hi @ankita240796, Can you please assign me **extensions** directory? Thanks."
    },
    {
      "id": 515698610,
      "user": "DubeySandeep",
      "body": "Hi @RafayGhafoor, I've assigned you to **extensions** directory."
    },
    {
      "id": 515752902,
      "user": "RafayGhafoor",
      "body": "Is **tokenizer** (eg: 'TextInputTokenizerSpec.ts') part of functionality, @YashJipkate? "
    },
    {
      "id": 515947908,
      "user": "YashJipkate",
      "body": "@RafayGhafoor It is a service if you see the file, therefore 'service' is the functionality."
    },
    {
      "id": 517987279,
      "user": "RafayGhafoor",
      "body": "@YashJipkate, [Pull Request for Extensions](https://github.com/oppia/oppia/pull/7266), Please take a look, thanks."
    },
    {
      "id": 521726684,
      "user": "RafayGhafoor",
      "body": "@YashJipkate, Can you please assign services and domain directories of this issue?"
    },
    {
      "id": 538740145,
      "user": "sauram",
      "body": "Hello @DubeySandeep \r\nCan you assign me to the **domain** directory, as my starter issue.?\r\n"
    },
    {
      "id": 538740828,
      "user": "DubeySandeep",
      "body": "Hi @sauram, I think you haven't signed the CLA yet, would you mind following the instructions provided in the [wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up) first? "
    },
    {
      "id": 540443386,
      "user": "Jethet",
      "body": "Hello @DubeySandeep, I would like to work on one of the directories that have not been assigned yet, either Domains or Services,, as my first issue. Can you please assign me?"
    },
    {
      "id": 540444434,
      "user": "DubeySandeep",
      "body": "Hi @Jethet, I've assigned you to `/domain` part of this issue, you can go ahead and start working on it.  "
    },
    {
      "id": 540447083,
      "user": "DubeySandeep",
      "body": "Hi @rt4914, are you still working on the assigned part of this issue?"
    },
    {
      "id": 540447336,
      "user": "DubeySandeep",
      "body": "Hi @RafayGhafoor, any update on the assigned issue?"
    },
    {
      "id": 540450121,
      "user": "Jethet",
      "body": "Great, thanks a lot!"
    },
    {
      "id": 540450774,
      "user": "DubeySandeep",
      "body": "@RafayGhafoor, I found that your PR for the `/extension` part of this issue is already merged, so I've updated the issue description accordingly. Thanks! :)   "
    },
    {
      "id": 540499213,
      "user": "Jethet",
      "body": "@DubeySandeep  This is my first time contributing to a project so I am not familiar with the GitHub etiquette. I have a few questions that are very beginner level, I am afraid. For example, I was looking at /oppia/core/domain as the directory to work on the renaming. But now I see these are all Python files, not .ts files as described above. Am I in the wrong directory?  I can imagine this is not the right place to ask such questions so please let me know if I need to raise this somewhere else. "
    },
    {
      "id": 540505757,
      "user": "DubeySandeep",
      "body": "@Jethet, Your question is specific to this issue so I think you are in the right place. In general,[ Gitter](https://gitter.im/oppia/oppia-chat) is a better place for asking questions/help.\r\n\r\n >  Am I in the wrong directory?\r\n\r\nYou should look into [oppia/core/templates/dev/head/domain](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain). Thanks for raising this question I've updated the issue description so that other contributors don't face a similar issue. "
    },
    {
      "id": 540510556,
      "user": "Jethet",
      "body": "Thanks, @DubeySandeep , I never would have found that! To be certain I do not mess up, one example: under /domain/classifier I will change the name of the file \r\nAnswerClassificationResultObjectFactory.ts to\r\nanswer-classification-result-object-factory.FUNCTIONALITY.ts\r\nBut what is the functionality? I see 'ObjectFactory' as part of many file names but it is not a functionality as stated in the naming convention."
    },
    {
      "id": 540977086,
      "user": "Jethet",
      "body": "Hello @DubeySandeep, I have aligned the first 12 folders in the folder oppia/core/templates/dev/head/ with the file naming convention. It might be a good idea for me to make a pull request so that you can check if these changes are correct, to prevent structural mistakes when I continue working on this issue.\r\nIf you agree, then could you explain how to make a preliminary pull request for you to check?\r\n\r\nAlso, what is your preference in general for making pull requests? There are about 26 folders with files in /domain. Making one pull request for all of this may not be such a good idea. It is a huge amount of changes."
    },
    {
      "id": 541009029,
      "user": "DubeySandeep",
      "body": "> Making one pull request for all of this may not be such a good idea. It is a huge amount of changes.\r\n\r\n@Jethet You can create multiple PRs if you like, I'm fine with either as It's more of a mechanical change. (I would prefer to have multiple PRs for the `/domain` part.)\r\n\r\nWhatever you do make sure to add an explanation in the PR thread."
    },
    {
      "id": 541021522,
      "user": "Jethet",
      "body": "Thanks @DubeySandeep \r\nI am trying to make my (first ever) pull request and am now looking at the points that are requested. How do I add PROJECT and CHANGELOG labels, and what needs to be added to these? A number or something?"
    },
    {
      "id": 541022813,
      "user": "Jethet",
      "body": "@DubeySandeep I also do not understand the last bit of the checklist: should I ask for a reviewer through the Gitter chat? \r\nAnd how/where do I add a reviewer?"
    },
    {
      "id": 541028245,
      "user": "DubeySandeep",
      "body": "@Jethet, You can ask anyone on Gitter (or your onboarding mentor) to assign labels and reviewers to your PR! "
    },
    {
      "id": 541033749,
      "user": "Jethet",
      "body": "@DubeySandeep , sorry that I keep asking, but how do I do that:\r\na) adding the CHANGELOG and PROJECT labels (and what should I put after the labels?)\r\nb) asking someone to assign labels and reviewers"
    }
  ],
  "text_context": "# Apply the new naming convention to remaining directories.\n\n<!--\r\n  - Thanks for taking the time to report a bug in the Oppia project.\r\n  - Before filing a new issue, please do a quick search to check that it hasn't\r\n  - already been filed on the [issue tracker](https://github.com/oppia/oppia/issues)._\r\n  -->\r\n\r\nThe new naming convention needs to be applied to the remaining directories.\r\n\r\n- [x]  `services/` @xlogix #6975 \r\n- [x]  `extensions/` @RafayGhafoor #7360\r\n- [x]  `domain/` @Jethet\r\n- [x]  `expressions/` - @rt4914\r\n- [x]  `directives/` - @rt4914 (#7215)\r\n- [x]  `base_components/` - @rt4914\r\n\r\nThe naming follows a general pattern:\r\n\r\n- The filename is divided into three parts (four for spec files). The first part is the name of the functionality, the second part is the type of functionality and the third part is the file extension. The third part in case of spec files become the word “spec” and the extension becomes the fourth part.\r\n\r\n- The different parts of the filename are joined by periods.\r\n\r\n- If the first part of the name has multiple words then the words are joined by kebab-case, with all the letters being small.\r\n\r\n- For eg if there is a directive file which houses a directive named stateResponses. Then the name of the file would be state-responses.directive.ts \r\n\r\n\r\nTypes of functionality.\r\n\r\n- Directives: A directive’s name must end with “.directive.ts” For example, if the name of a directive is ‘stateResponses’ then the name of the file must be “state-responses.directive.ts”.\r\n\r\n- Controllers: A controller’s name must end with “.controller.ts” For example, if the name of a directive is ‘StoryEditor’ then the name of the file must be “story-editor.controller.ts”.\r\n\r\n- Filters: A filter’s name must end with “.filter.ts” For example, if the name of a filter is ‘formatTimer’ then the name of the file must be “format-timer.filter.ts”.\r\n\r\n- Services: A service’s name must end with “.service.ts” For example, if the name of a service is ‘ExplorationDataService’ then the name of the file must be “exploration-data.service.ts”.\r\n\r\n- Constants: The constants of a page are to be kept in a single file. The file should be named name-of-the-page.constants.ts. Any new constant that needs to be added should be added to this file only and this constants.ts file should be required in the file which uses the constant. \r\n\r\n- HTML files: There are three types of HTML files:-\r\n\r\n   1. Mainpage: These are the pages which act as a starting point of the page. These pages are directly called from the backend. The names of these HTML files must end with “.mainpage.html”. For example, the main page of the exploration editor page would be named exploration-editor-page.mainpage.html.\r\n\r\n    2. Directive: These are the HTML files which are served by the directive files. These are the HTML files that appear in the ‘templateUrl’ of the directive. These must have their names ending with “.directive.html”. For example, the progress nav directive would be named progress-nav.directive.html.\r\n\r\n    3. Template: These are the shared HTML files which are required by various other functions like modals, jinja templating, etc.  These names are to end with \".template.html\" \r\n\r\n- Script files: These are the TS files which are for the sole purpose of importing the required TS files for the HTML file. Such files are to end with “.scripts.ts”. For example if a file get-started.mainpage.html needs a script file then the file would be named “get-started.scripts.ts”\r\n\r\n\r\n**Note:** The root directory for the frontend file is located here: [oppia/core/templates/dev/head](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain)\n\nHello @ankita240796 \r\nAssign me to this **directives** directory, as my starter issue.\r\n\n\nDone @rt4914! \n\nThanks\n\nOn Sun, 21 Jul 2019 at 4:07 PM, Ankita Saxena <notifications@github.com>\nwrote:\n\n> Done @rt4914 <https://github.com/rt4914>!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/6975?email_source=notifications&email_token=ACHV65GPX7FJZ3WYDPZWAE3QAQ36VA5CNFSM4HZLQHBKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2OAT3I#issuecomment-513542637>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ACHV65HVWQSQOYSQTQTERNDQAQ36VANCNFSM4HZLQHBA>\n> .\n>\n\n\nHello @ankita240796 \r\nPlease assign me **expressions** and **base_components** directive too.\r\nThanks\n\nHi @rt4914, Congrats on completing your first PR to Oppia! I have assigned you to expressions and base_components. Do let me know if you face any issues. Thanks!\n\n> Hi @rt4914, Congrats on completing your first PR to Oppia! I have assigned you to expressions and base_components. Do let me know if you face any issues. Thanks!\r\n\r\nGreat. Thank you\n\nHello @ankita240796 ,\r\nThere is one file named header.html in base_components folder, should I name this file as header.mainpage.html ?\n\nHi @ankita240796, Can you please assign me **extensions** directory? Thanks.\n\nHi @RafayGhafoor, I've assigned you to **extensions** directory.\n\nIs **tokenizer** (eg: 'TextInputTokenizerSpec.ts') part of functionality, @YashJipkate? \n\n@RafayGhafoor It is a service if you see the file, therefore 'service' is the functionality.\n\n@YashJipkate, [Pull Request for Extensions](https://github.com/oppia/oppia/pull/7266), Please take a look, thanks.\n\n@YashJipkate, Can you please assign services and domain directories of this issue?\n\nHello @DubeySandeep \r\nCan you assign me to the **domain** directory, as my starter issue.?\r\n\n\nHi @sauram, I think you haven't signed the CLA yet, would you mind following the instructions provided in the [wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up) first? \n\nHello @DubeySandeep, I would like to work on one of the directories that have not been assigned yet, either Domains or Services,, as my first issue. Can you please assign me?\n\nHi @Jethet, I've assigned you to `/domain` part of this issue, you can go ahead and start working on it.  \n\nHi @rt4914, are you still working on the assigned part of this issue?\n\nHi @RafayGhafoor, any update on the assigned issue?\n\nGreat, thanks a lot!\n\n@RafayGhafoor, I found that your PR for the `/extension` part of this issue is already merged, so I've updated the issue description accordingly. Thanks! :)   \n\n@DubeySandeep  This is my first time contributing to a project so I am not familiar with the GitHub etiquette. I have a few questions that are very beginner level, I am afraid. For example, I was looking at /oppia/core/domain as the directory to work on the renaming. But now I see these are all Python files, not .ts files as described above. Am I in the wrong directory?  I can imagine this is not the right place to ask such questions so please let me know if I need to raise this somewhere else. \n\n@Jethet, Your question is specific to this issue so I think you are in the right place. In general,[ Gitter](https://gitter.im/oppia/oppia-chat) is a better place for asking questions/help.\r\n\r\n >  Am I in the wrong directory?\r\n\r\nYou should look into [oppia/core/templates/dev/head/domain](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain). Thanks for raising this question I've updated the issue description so that other contributors don't face a similar issue. \n\nThanks, @DubeySandeep , I never would have found that! To be certain I do not mess up, one example: under /domain/classifier I will change the name of the file \r\nAnswerClassificationResultObjectFactory.ts to\r\nanswer-classification-result-object-factory.FUNCTIONALITY.ts\r\nBut what is the functionality? I see 'ObjectFactory' as part of many file names but it is not a functionality as stated in the naming convention.\n\nHello @DubeySandeep, I have aligned the first 12 folders in the folder oppia/core/templates/dev/head/ with the file naming convention. It might be a good idea for me to make a pull request so that you can check if these changes are correct, to prevent structural mistakes when I continue working on this issue.\r\nIf you agree, then could you explain how to make a preliminary pull request for you to check?\r\n\r\nAlso, what is your preference in general for making pull requests? There are about 26 folders with files in /domain. Making one pull request for all of this may not be such a good idea. It is a huge amount of changes.\n\n> Making one pull request for all of this may not be such a good idea. It is a huge amount of changes.\r\n\r\n@Jethet You can create multiple PRs if you like, I'm fine with either as It's more of a mechanical change. (I would prefer to have multiple PRs for the `/domain` part.)\r\n\r\nWhatever you do make sure to add an explanation in the PR thread.\n\nThanks @DubeySandeep \r\nI am trying to make my (first ever) pull request and am now looking at the points that are requested. How do I add PROJECT and CHANGELOG labels, and what needs to be added to these? A number or something?\n\n@DubeySandeep I also do not understand the last bit of the checklist: should I ask for a reviewer through the Gitter chat? \r\nAnd how/where do I add a reviewer?\n\n@Jethet, You can ask anyone on Gitter (or your onboarding mentor) to assign labels and reviewers to your PR! \n\n@DubeySandeep , sorry that I keep asking, but how do I do that:\r\na) adding the CHANGELOG and PROJECT labels (and what should I put after the labels?)\r\nb) asking someone to assign labels and reviewers",
  "pr_link": "https://github.com/oppia/oppia/pull/7266",
  "code_context": [
    {
      "filename": "core/domain/rte_component_registry_test.py",
      "content": "# coding: utf-8\n#\n# Copyright 2014 The Oppia Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Unit tests for core.domain.rte_component_registry.\"\"\"\n\nimport inspect\nimport os\nimport pkgutil\nimport re\nimport string\nimport struct\n\nfrom core.domain import obj_services\nfrom core.domain import rte_component_registry\nfrom core.tests import test_utils\nimport feconf\nimport schema_utils\nimport schema_utils_test\nimport utils\n\n# File names ending in any of these suffixes will be ignored when checking for\n# RTE component validity.\nIGNORED_FILE_SUFFIXES = ['.pyc', '.DS_Store']\nRTE_THUMBNAIL_HEIGHT_PX = 16\nRTE_THUMBNAIL_WIDTH_PX = 16\n\n_COMPONENT_CONFIG_SCHEMA = [\n    ('backend_id', basestring), ('category', basestring),\n    ('description', basestring), ('frontend_id', basestring),\n    ('tooltip', basestring), ('icon_data_url', basestring),\n    ('requires_fs', bool), ('is_block_element', bool),\n    ('customization_arg_specs', list)]\n\n\nclass RteComponentUnitTests(test_utils.GenericTestBase):\n    \"\"\"Tests that all the default RTE components are valid.\"\"\"\n\n    def _is_camel_cased(self, name):\n        \"\"\"Check whether a name is in CamelCase.\"\"\"\n        return name and (name[0] in string.ascii_uppercase)\n\n    def _is_alphanumeric_string(self, input_string):\n        \"\"\"Check whether a string is alphanumeric.\"\"\"\n        return bool(re.compile('^[a-zA-Z0-9_]+$').match(input_string))\n\n    def _validate_customization_arg_specs(self, customization_arg_specs):\n        \"\"\"Validates the given customization arg specs.\"\"\"\n        for ca_spec in customization_arg_specs:\n            self.assertEqual(set(ca_spec.keys()), set([\n                'name', 'description', 'schema', 'default_value']))\n\n            self.assertTrue(isinstance(ca_spec['name'], basestring))\n            self.assertTrue(self._is_alphanumeric_string(ca_spec['name']))\n            self.assertTrue(isinstance(ca_spec['description'], basestring))\n            self.assertGreater(len(ca_spec['description']), 0)\n\n            # The default value might not pass validation checks (e.g. the\n            # Image component has a required field whose default value is\n            # empty). Thus, when checking the default value schema, we don't\n            # apply the custom validators.\n            schema_utils_test.validate_schema(ca_spec['schema'])\n            self.assertEqual(\n                ca_spec['default_value'],\n                schema_utils.normalize_against_schema(\n                    ca_spec['default_value'], ca_spec['schema'],\n                    apply_custom_validators=False))\n\n            if ca_spec['schema']['type'] == 'custom':\n                # Default value of SanitizedUrl obj_type may be empty. The empty\n                # string is not considered valid for this object, so we don't\n                # attempt to normalize it.\n                if ca_spec['schema']['obj_type'] == 'SanitizedUrl':\n                    self.assertEqual(ca_spec['default_value'], '')\n                else:\n                    obj_class = obj_services.Registry.get_object_class_by_type(\n                        ca_spec['schema']['obj_type'])\n                    self.assertEqual(\n                        ca_spec['default_value'],\n                        obj_class.normalize(ca_spec['default_value']))\n\n    def _listdir_omit_ignored(self, directory):\n        \"\"\"List all files and directories within 'directory', omitting the ones\n        whose name ends in one of the IGNORED_FILE_SUFFIXES.\n        \"\"\"\n        names = os.listdir(directory)\n        for suffix in IGNORED_FILE_SUFFIXES:\n            names = [name for name in names if not name.endswith(suffix)]\n        return names\n\n    def test_image_thumbnails_for_rte_components(self):\n        \"\"\"Test the thumbnails for the RTE component icons.\"\"\"\n        rte_components = (\n            rte_component_registry.Registry.get_all_rte_components())\n        for (component_name, component_specs) in rte_components.iteritems():\n            generated_image_filepath = os.path.join(\n                os.getcwd(), feconf.RTE_EXTENSIONS_DIR,\n                component_name, '%s.png' % component_name)\n            relative_icon_data_url = component_specs['icon_data_url'][1:]\n            defined_image_filepath = os.path.join(\n                os.getcwd(), feconf.EXTENSIONS_DIR_PREFIX,\n                'extensions', relative_icon_data_url)\n            self.assertEqual(generated_image_filepath, defined_image_filepath)\n\n            with open(generated_image_filepath, 'rb') as f:\n                img_data = f.read()\n                width, height = struct.unpack('>LL', img_data[16:24])\n                self.assertEqual(int(width), RTE_THUMBNAIL_WIDTH_PX)\n                self.assertEqual(int(height), RTE_THUMBNAIL_HEIGHT_PX)\n\n    def test_rte_components_are_valid(self):\n        \"\"\"Test that the default RTE components are valid.\"\"\"\n\n        rte_components = (\n            rte_component_registry.Registry.get_all_rte_components())\n\n        for (component_id, component_specs) in rte_components.iteritems():\n            # Check that the component id is valid.\n            hyphenated_component_id = utils.camelcase_to_hyphenated(\n                component_id)\n            self.assertTrue(self._is_camel_cased(component_id))\n\n            # Check that the component directory exists.\n            component_dir = os.path.join(\n                feconf.RTE_EXTENSIONS_DIR, component_id)\n            self.assertTrue(os.path.isdir(component_dir))\n\n            # In this directory there should be a /directives directory, an\n            # an icon .png file and a protractor.js file, and an optional\n            # preview .png file.\n            # In /directives directory should be HTML file, a JS file,\n            # there could be multiple JS and HTML files.\n            dir_contents = self._listdir_omit_ignored(component_dir)\n            self.assertLessEqual(len(dir_contents), 4)\n\n            directives_dir = os.path.join(component_dir, 'directives')\n            png_file = os.path.join(component_dir, '%s.png' % component_id)\n            protractor_file = os.path.join(component_dir, 'protractor.js')\n\n            self.assertTrue(os.path.isdir(directives_dir))\n            self.assertTrue(os.path.isfile(png_file))\n            self.assertTrue(os.path.isfile(protractor_file))\n\n            main_ts_file = os.path.join(\n                directives_dir, 'oppia-noninteractive-%s.directive.ts'\n                % hyphenated_component_id)\n            main_html_file = os.path.join(\n                directives_dir, '%s.directive.html' % hyphenated_component_id)\n            self.assertTrue(os.path.isfile(main_ts_file))\n            self.assertTrue(os.path.isfile(main_html_file))\n\n            ts_file_content = utils.get_file_contents(main_ts_file)\n            self.assertIn(\n                'oppiaNoninteractive%s' % component_id, ts_file_content)\n            self.assertNotIn('<script>', ts_file_content)\n            self.assertNotIn('</script>', ts_file_content)\n\n\n            # Check that the configuration file contains the correct\n            # top-level keys, and that these keys have the correct types.\n            for item, item_type in _COMPONENT_CONFIG_SCHEMA:\n                self.assertTrue(isinstance(\n                    component_specs[item], item_type))\n                # The string attributes should be non-empty.\n                if item_type == basestring:\n                    self.assertTrue(component_specs[item])\n\n            self._validate_customization_arg_specs(\n                component_specs['customization_arg_specs'])  # pylint: disable=protected-access\n\n    def test_require_file_contains_all_imports(self):\n        \"\"\"Test that the rich_text_components.html file contains script-imports\n        for all directives of all RTE components.\n        \"\"\"\n\n        rtc_ts_filenames = []\n        for component_id in feconf.ALLOWED_RTE_EXTENSIONS:\n            component_dir = os.path.join(\n                feconf.RTE_EXTENSIONS_DIR, component_id)\n            directives_dir = os.path.join(component_dir, 'directives')\n            directive_filenames = os.listdir(directives_dir)\n            rtc_ts_filenames.extend(\n                filename for filename\n                in directive_filenames if filename.endswith('.ts'))\n\n        rtc_ts_file = os.path.join(\n            feconf.RTE_EXTENSIONS_DIR, 'richTextComponentsRequires.ts')\n        with open(rtc_ts_file, 'r') as f:\n            rtc_require_file_contents = f.read()\n\n        for rtc_ts_filename in rtc_ts_filenames:\n            self.assertIn(rtc_ts_filename, rtc_require_file_contents)\n\n\nclass RteComponentRegistryUnitTests(test_utils.GenericTestBase):\n    \"\"\"Tests the methods in RteComponentRegistry.\"\"\"\n\n    def test_get_all_rte_components(self):\n        \"\"\"Test get_all_rte_components method.\"\"\"\n        obtained_components = (\n            rte_component_registry.Registry.get_all_rte_components().keys())\n        actual_components = [name for name in os.listdir(\n            './extensions/rich_text_components') if os.path.isdir(os.path.join(\n                './extensions/rich_text_components', name))]\n\n        self.assertEqual(set(obtained_components), set(actual_components))\n\n    def test_get_tag_list_with_attrs(self):\n        \"\"\"Test get_tag_list_with_attrs method.\"\"\"\n        obtained_tag_list_with_attrs = (\n            rte_component_registry.Registry.get_tag_list_with_attrs())\n        actual_tag_list_with_attrs = {}\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        for component_spec in component_specs.values():\n            tag_name = 'oppia-noninteractive-%s' % component_spec['frontend_id']\n            attr_names = [\n                '%s-with-value' % attr['name'] for attr in component_spec[\n                    'customization_arg_specs']]\n            actual_tag_list_with_attrs[tag_name] = attr_names\n        self.assertEqual(\n            set(obtained_tag_list_with_attrs.keys()),\n            set(actual_tag_list_with_attrs.keys()))\n        for key in obtained_tag_list_with_attrs:\n            self.assertEqual(\n                set(obtained_tag_list_with_attrs[key]),\n                set(actual_tag_list_with_attrs[key]))\n\n    def test_get_component_types_to_component_classes(self):\n        \"\"\"Test get_component_types_to_component_classes method.\"\"\"\n        component_types_to_component_classes = rte_component_registry.Registry.get_component_types_to_component_classes() # pylint: disable=line-too-long\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n\n        obtained_component_tags = component_types_to_component_classes.keys()\n        actual_component_tags = [\n            'oppia-noninteractive-%s' % component_spec['frontend_id']\n            for component_spec in component_specs.values()]\n        self.assertEqual(\n            set(obtained_component_tags), set(actual_component_tags))\n\n        obtained_component_class_names = [\n            component_class.__name__\n            for component_class in component_types_to_component_classes.values()\n        ]\n        actual_component_class_names = []\n\n        rte_path = [feconf.RTE_EXTENSIONS_DIR]\n\n        for loader, name, _ in pkgutil.iter_modules(path=rte_path):\n            if name == 'components':\n                module = loader.find_module(name).load_module(name)\n                break\n\n        for name, obj in inspect.getmembers(module):\n            if inspect.isclass(obj) and name != 'BaseRteComponent':\n                actual_component_class_names.append(name)\n\n        self.assertEqual(\n            set(obtained_component_class_names),\n            set(actual_component_class_names))\n\n    def test_get_component_tag_names(self):\n        \"\"\"Test get_component_tag_names method.\"\"\"\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        keys = ['is_block_element', 'is_complex']\n        expected_values = [True, False]\n        for key in keys:\n            for expected_value in expected_values:\n                actual_component_tag_names = [\n                    'oppia-noninteractive-%s' % component_spec['frontend_id']\n                    for component_spec in component_specs.values()\n                    if component_spec[key] == expected_value]\n                obtained_component_tag_names = (\n                    rte_component_registry.Registry.get_component_tag_names(\n                        key, expected_value))\n                self.assertEqual(\n                    set(actual_component_tag_names),\n                    set(obtained_component_tag_names))\n\n    def test_get_inline_component_tag_names(self):\n        \"\"\"Test get_inline_component_tag_names method.\"\"\"\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        obtained_inline_component_tag_names = (\n            rte_component_registry.Registry.get_inline_component_tag_names())\n\n        actual_inline_component_tag_names = [\n            'oppia-noninteractive-%s' % component_spec['frontend_id']\n            for component_spec in component_specs.values()\n            if not component_spec['is_block_element']]\n\n        self.assertEqual(\n            set(actual_inline_component_tag_names),\n            set(obtained_inline_component_tag_names))\n\n    def test_get_block_component_tag_names(self):\n        \"\"\"Test get_block_component_tag_names method.\"\"\"\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        obtained_block_component_tag_names = (\n            rte_component_registry.Registry.get_block_component_tag_names())\n\n        actual_block_component_tag_names = [\n            'oppia-noninteractive-%s' % component_spec['frontend_id']\n            for component_spec in component_specs.values()\n            if component_spec['is_block_element']]\n\n        self.assertEqual(\n            set(actual_block_component_tag_names),\n            set(obtained_block_component_tag_names))\n\n    def test_get_simple_component_tag_names(self):\n        \"\"\"Test get_simple_component_tag_names method.\"\"\"\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        obtained_simple_component_tag_names = (\n            rte_component_registry.Registry.get_simple_component_tag_names())\n\n        actual_simple_component_tag_names = [\n            'oppia-noninteractive-%s' % component_spec['frontend_id']\n            for component_spec in component_specs.values()\n            if not component_spec['is_complex']]\n\n        self.assertEqual(\n            set(actual_simple_component_tag_names),\n            set(obtained_simple_component_tag_names))\n\n    def test_get_complex_component_tag_names(self):\n        \"\"\"Test get_complex_component_tag_names method.\"\"\"\n        component_specs = (\n            rte_component_registry.Registry.get_all_rte_components())\n        obtained_complex_component_tag_names = (\n            rte_component_registry.Registry.get_complex_component_tag_names())\n\n        actual_complex_component_tag_names = [\n            'oppia-noninteractive-%s' % component_spec['frontend_id']\n            for component_spec in component_specs.values()\n            if component_spec['is_complex']]\n\n        self.assertEqual(\n            set(actual_complex_component_tag_names),\n            set(obtained_complex_component_tag_names))\n"
    },
    {
      "filename": "core/templates/dev/head/combined-tests.spec.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Karma spec files accumulator.\n */\n\n// The following file finds all the spec files and merges them all to a single\n// file which Karma uses to run its tests. The Karma is unable to run the tests\n// on multiple files and the DI fails in that case, the reason of which is\n// unclear (related issue -> https://github.com/oppia/oppia/issues/7053).\n\n// These polyfills are necessary to help the TestBed resolve parameters for\n// ApplicationModule\n// https://github.com/angular/angular/issues/29281\n\nimport 'reflect-metadata';\nimport 'zone.js/dist/zone';\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/proxy.js';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/fake-async-test';\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\n\ndeclare const require: any;\n\n// First, initialize the Angular testing environment.\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);\n// Then we find all the tests. Note that known failing files are exempted;\n// corresponding issue -> https://github.com/oppia/oppia/issues/6960).\n// TODO(YashJipkate): Fix the tests that broke down after introduction of\n// Webpack due to templateCache.\n/* eslint-disable max-len */\nconst context = require.context('../../../../', true, /(((\\.s|S)pec)\\.ts$)(?<!combined-tests\\.spec\\.ts)(?<!state-content-editor\\.directive\\.spec\\.ts)(?<!music-notes-input\\.spec\\.ts)(?<!state-interaction-editor\\.directive\\.spec\\.ts)(?<!state-name-editor\\.directive\\.spec\\.ts)(?<!solution-verification\\.service\\.spec\\.ts)/);\n/* eslint-enable max-len */\n// And load the modules.\ncontext.keys().map(context);\n"
    },
    {
      "filename": "core/tests/karma.conf.ts",
      "content": "var argv = require('yargs').argv;\nvar ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\nvar path = require('path');\nvar generatedJs = 'third_party/generated/js/third_party.js';\nif (argv.prodEnv) {\n  generatedJs = (\n    'third_party/generated/js/third_party.min.js');\n}\n\nmodule.exports = function(config) {\n  config.set({\n    basePath: '../../',\n    frameworks: ['jasmine'],\n    files: [\n      'local_compiled_js/core/tests/karma-globals.js',\n      // Constants must be loaded before everything else.\n      'local_compiled_js/assets/constants.js',\n      'local_compiled_js/assets/rich_text_components_definitions.js',\n      // Since jquery,jquery-ui,angular,angular-mocks and math-expressions\n      // are not bundled, they will be treated separately.\n      'third_party/static/jquery-3.4.1/jquery.min.js',\n      'third_party/static/jqueryui-1.12.1/jquery-ui.min.js',\n      'third_party/static/angularjs-1.5.8/angular.js',\n      'third_party/static/angularjs-1.5.8/angular-mocks.js',\n      'third_party/static/headroom-js-0.9.4/headroom.min.js',\n      'third_party/static/headroom-js-0.9.4/angular.headroom.min.js',\n      'third_party/static/math-expressions-1.7.0/math-expressions.js',\n      'third_party/static/ckeditor-4.9.2/ckeditor.js',\n      generatedJs,\n      // Note that unexpected errors occur (\"Cannot read property 'num' of\n      // undefined\" in MusicNotesInput.js) if the order of core/templates/...\n      // and extensions/... are switched. The test framework may be flaky.\n      'core/templates/dev/head/**/*_directive.html',\n      'core/templates/dev/head/**/*.template.html',\n      'local_compiled_js/extensions/**/*.js',\n      'core/templates/dev/head/AppInit.ts',\n      // This is a file that is generated on running the run_frontend_tests.sh\n      // script. This generated file is a combination of all the spec files\n      // since Karma is unable to run tests on multiple files due to some\n      // unknown reason.\n      'core/templates/dev/head/combined-tests.spec.ts',\n      {\n        pattern: 'extensions/**/*.png',\n        watched: false,\n        served: true,\n        included: false\n      },\n      // 'extensions/interactions/**/*_directive.html',\n      'extensions/interactions/**/*.directive.html',\n      'extensions/interactions/rule_templates.json',\n      'core/tests/data/*.json',\n      {\n        pattern: 'assets/i18n/**/*.json',\n        watched: true,\n        served: true,\n        included: false\n      }\n    ],\n    exclude: [\n      'local_compiled_js/core/templates/dev/head/**/*-e2e.js',\n      'local_compiled_js/extensions/**/protractor.js',\n      'backend_prod_files/extensions/**',\n    ],\n    proxies: {\n      // Karma serves files under the /base directory.\n      // We access files directly in our code, for example /folder/,\n      // so we need to proxy the requests from /folder/ to /base/folder/.\n      '/assets/': '/base/assets/',\n      '/extensions/': '/base/extensions/'\n    },\n    preprocessors: {\n      'core/templates/dev/head/*.ts': ['webpack'],\n      'core/templates/dev/head/**/*.ts': ['webpack'],\n      'extensions/**/*.ts': ['webpack'],\n      // Note that these files should contain only directive templates, and no\n      // Jinja expressions. They should also be specified within the 'files'\n      // list above.\n      'core/templates/dev/head/**/*_directive.html': ['ng-html2js'],\n      'core/templates/dev/head/**/*.directive.html': ['ng-html2js'],\n      'core/templates/dev/head/**/*.template.html': ['ng-html2js'],\n      'extensions/interactions/**/*.directive.html': ['ng-html2js'],\n      'extensions/interactions/rule_templates.json': ['json_fixtures'],\n      'core/tests/data/*.json': ['json_fixtures']\n    },\n    reporters: ['progress', 'coverage-istanbul'],\n    coverageIstanbulReporter: {\n      reports: ['html', 'lcovonly'],\n      dir: '../karma_coverage_reports/',\n      fixWebpackSourcePaths: true,\n      'report-config': {\n        html: { outdir: 'html' }\n      }\n    },\n    autoWatch: true,\n    browsers: ['Chrome_Travis'],\n    // Kill the browser if it does not capture in the given timeout [ms].\n    captureTimeout: 60000,\n    browserConsoleLogOptions: {\n      level: 'log',\n      format: '%b %T: %m',\n      terminal: true\n    },\n    browserNoActivityTimeout: 60000,\n    // Continue running in the background after running tests.\n    singleRun: true,\n    customLaunchers: {\n      Chrome_Travis: {\n        base: 'Chrome',\n        flags: ['--no-sandbox']\n      }\n    },\n\n    plugins: [\n      'karma-coverage-istanbul-reporter',\n      'karma-jasmine',\n      'karma-chrome-launcher',\n      'karma-ng-html2js-preprocessor',\n      'karma-json-fixtures-preprocessor',\n      'karma-coverage',\n      'karma-webpack'\n    ],\n    ngHtml2JsPreprocessor: {\n      moduleName: 'directiveTemplates',\n      // ngHtml2JsPreprocessor adds the html inside $templateCache,\n      // the key that we use for that cache needs to be exactly the same as\n      // the templateUrl in directive JS. The stripPrefix and prependPrefix are\n      // used for modifying the $templateCache keys.\n      // If the key starts with core/ we need to get rid of that.\n      stripPrefix: 'core/',\n      // Every key must start with /.\n      prependPrefix: '/',\n    },\n    jsonFixturesPreprocessor: {\n      variableName: '__fixtures__'\n    },\n\n    webpack: {\n      mode: 'development',\n      resolve: {\n        modules: [\n          'core/templates/dev/head',\n          'extensions',\n          'node_modules',\n        ],\n      },\n      devtool: 'inline-source-map',\n      module: {\n        rules: [\n          {\n            test: /\\.ts$/,\n            use: [\n              'cache-loader',\n              'thread-loader',\n              {\n                loader: 'ts-loader',\n                options: {\n                  // this is needed for thread-loader to work correctly\n                  happyPackMode: true\n                }\n              }\n            ]\n          },\n          {\n            test: /\\.html$/,\n            loader: 'underscore-template-loader'\n          },\n          {\n            test: /\\.ts$/,\n            enforce: 'post',\n            use: {\n              loader: 'istanbul-instrumenter-loader',\n              options: { esModules: true }\n            }\n          }\n        ]\n      },\n      plugins: [\n        new ForkTsCheckerWebpackPlugin({ checkSyntacticErrors: true })\n      ]\n    }\n  });\n};\n"
    },
    {
      "filename": "extensions/classifiers/count-vectorizer.service.spec.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the count vectorizer service.\n */\n\ndescribe('Count vectorizer service', function() {\n  beforeEach(angular.mock.module('oppia'));\n\n  describe('Test count vectorizer service', function() {\n    var service;\n    beforeEach(angular.mock.inject(function($injector) {\n      service = $injector.get('CountVectorizerService');\n    }));\n\n    it('should produce correct vector from tokens', function() {\n      var tokens = ['a', 'b', 'a', 'c', 'd', 'b', 'a'];\n      var vocabulary = {\n        a: 0, b: 1, c: 2\n      };\n      var vector = service.vectorize(tokens, vocabulary);\n      var expectedVector = [3, 2, 1];\n      expect(vector.length).toEqual(3);\n      expect(vector).toEqual(expectedVector);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/classifiers/count-vectorizer.service.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Vectorizer function which mirrors the CountVectorizer feature\n * extractor of sklearn.\n *\n * IMPORTANT NOTE: The Vectorizer function uses the vocabulary that was\n * extracted during the training. During training scikit's\n * CountVectorizer class is used for this purpose. If there are any changes\n * in scikit's CountVectorize class then corresponding changes must be\n * propagated here.\n */\n\nangular.module('oppia').factory('CountVectorizerService', [function() {\n  return {\n    vectorize: function(tokens, vocabulary) {\n      var vectorLength = Object.keys(vocabulary).length;\n      var vector = [];\n      for (var i = 0; i < vectorLength; i++) {\n        vector.push(0);\n      }\n      if (tokens === null) {\n        return vector;\n      }\n\n      tokens.forEach(function(token) {\n        if (vocabulary.hasOwnProperty(token)) {\n          vector[vocabulary[token]] += 1;\n        }\n      });\n\n      return vector;\n    }\n  };\n}]);\n"
    },
    {
      "filename": "extensions/classifiers/python-program.tokenizer.spec.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests python program tokenizer.\n */\n\ndescribe('Python program tokenizer', function() {\n  beforeEach(angular.mock.module('oppia'));\n\n  describe('Test python program tokenizer', function() {\n    var tokenizer;\n    beforeEach(angular.mock.inject(function($injector) {\n      tokenizer = $injector.get('PythonProgramTokenizer');\n    }));\n\n    it('should generate correct tokens for a program', function() {\n      var program = (\n        '# In Python, the code\\n#\\n#     for letter in [\\'a\\', \\'b\\']:\\n#    ' +\n        '     print letter\\n#\\n# prints:\\n#\\n#     a\\n#     b\\ns = 0;\\nfor ' +\n        'num in range(1000):\\n  if num%7 == 0 or num%5 == 0:\\n\\ts +=x\\n' +\n        'print s');\n\n      var expectedTokens = [\n        ['COMMENT', '# In Python, the code'], ['NL', ''], ['COMMENT', '#'],\n        ['NL', ''], ['COMMENT', '#     for letter in [\\'a\\', \\'b\\']:'],\n        ['NL', ''], ['COMMENT', '#         print letter'], ['NL', ''],\n        ['COMMENT', '#'], ['NL', ''], ['COMMENT', '# prints:'], ['NL', ''],\n        ['COMMENT', '#'], ['NL', ''], ['COMMENT', '#     a'], ['NL', ''],\n        ['COMMENT', '#     b'], ['NL', ''], ['NAME', 's'], ['OP', '='],\n        ['NUMBER', '0'], ['OP', ';'], ['NAME', 'for'], ['NAME', 'num'],\n        ['NAME', 'in'], ['NAME', 'range'], ['OP', '('], ['NUMBER', '1000'],\n        ['OP', ')'], ['OP', ':'], ['NAME', 'if'], ['NAME', 'num'], ['OP', '%'],\n        ['NUMBER', '7'], ['OP', '=='], ['NUMBER', '0'], ['NAME', 'or'],\n        ['NAME', 'num'], ['OP', '%'], ['NUMBER', '5'], ['OP', '=='],\n        ['NUMBER', '0'], ['OP', ':'], ['NAME', 's'], ['OP', '+='],\n        ['NAME', 'x'], ['NAME', 'print'], ['NAME', 's'], ['ENDMARKER', '']];\n\n      var tokens = tokenizer.generateTokens(program.split('\\n'));\n      expect(tokens.length).toEqual(expectedTokens.length);\n      expect(tokens).toEqual(expectedTokens);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/classifiers/python-program.tokenizer.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tokenizer for Python code.\n *\n * IMPORTANT NOTE: The tokenizer is built using Python's own tokenizer module.\n * These functions are simply translated from Python code to JS code and they\n * both do same task. The unnecessary code from Python's tokenizer module\n * has been removed before translating it into JS and code relevant to\n * generating tokens has been kept intact. If Python version changes on Oppia-ml\n * then changes in Python's tokenizer module must be propagated here.\n *\n * Python's tokenizer module for Python version 2.7:\n * https://github.com/python/cpython/blob/2.7/Lib/tokenize.py\n */\n\nrequire('classifiers/classifiers-extension.constants.ajs.ts');\n\nangular.module('oppia').factory('PythonProgramTokenizer', [\n  '$log', 'PythonProgramTokenType', function($log, PythonProgramTokenType) {\n    var groupOfRegEx = function(...params) {\n      return '(' + Array.prototype.join.call(params, '|') + ')';\n    };\n\n    var regExMayBePresent = function(params) {\n      return groupOfRegEx(params) + '?';\n    };\n\n    var repeatedRegEx = function(params) {\n      return groupOfRegEx(params) + '*';\n    };\n\n    var whitespace = '[ \\\\f\\\\t]*';\n    var comment = '#[^\\\\r\\\\n]*';\n    var ignore = whitespace + repeatedRegEx(\n      '\\\\\\\\\\\\r?\\\\n' + whitespace) + regExMayBePresent(comment);\n    var name = '[a-zA-Z_]\\\\w*';\n\n    var hexnumber = '0[xX][\\\\da-fA-F]+[lL]?';\n    var octnumber = '(0[oO][0-7]+)|(0[0-7]*)[lL]?';\n    var binnumber = '0[bB][01]+[lL]?';\n    var decnumber = '[1-9]\\\\d*[lL]?';\n    var intnumber = groupOfRegEx(hexnumber, binnumber, octnumber, decnumber);\n    var exponent = '[eE][-+]?\\\\d+';\n    var pointfloat = groupOfRegEx(\n      '\\\\d+\\\\.\\\\d*', '\\\\\\\\d+\\\\\\\\.\\\\\\\\d*') + regExMayBePresent(exponent);\n    var expfloat = '\\\\d+' + exponent;\n    var floatnumber = groupOfRegEx(pointfloat, expfloat);\n    var imagnumber = groupOfRegEx(\n      '\\\\d+[jJ]', floatnumber + '[jJ]');\n    var num = groupOfRegEx(imagnumber, floatnumber, intnumber);\n    // Tail end of ' string.\n    var single = '[^\\'\\\\\\\\]*(?:\\\\\\\\.[^\\'\\\\\\\\]*)*\\'';\n    // Tail end of \" string.\n    var doubleQuote = '[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\"';\n    // Tail end of ''' string.\n    var single3 = \"[^'\\\\\\\\]*(?:(?:\\\\\\\\.|'(?!''))[^'\\\\\\\\]*)*'''\";\n    // Tail end of \"\"\" string.\n    var double3 = '[^\"\\\\\\\\]*(?:(?:\\\\\\\\.|\"(?!\"\"))[^\"\\\\\\\\]*)*\"\"\"';\n    var triple = groupOfRegEx(\"[uUbB]?[rR]?'''\", '[uUbB]?[rR]?\"\"\"');\n    // single-line ' or \" string.\n    var str = groupOfRegEx(\n      \"[uUbB]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*'\",\n      '[uUbB]?[rR]?\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*\"');\n\n    // Because of leftmost-then-longest match semantics, be sure to put the\n    // longest operators first (e.g., if = came before ==, == would get\n    // recognized as two instances of =).\n    var operator = groupOfRegEx(\n      '\\\\*\\\\*=?', '>>=?', '<<=?', '<>', '!=', '//=?', '[+\\\\-*/%&|^=<>]=?', '~');\n\n    var bracket = '[(){}]';\n    var special = groupOfRegEx('\\\\r?\\\\n', '[:;.,\\\\`@]');\n    var funny = groupOfRegEx(operator, bracket, special);\n\n    var plaintoken = groupOfRegEx(num, funny, str, name);\n    var token = ignore + plaintoken;\n\n    // First (or only) line of ' or \" string.\n    var contStr = groupOfRegEx(\n      \"[uUbB]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*'\" +\n      groupOfRegEx(\"'\", '\\\\\\\\\\\\r?\\\\n'),\n      '[uUbB]?[rR]?\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*' +\n      groupOfRegEx('\"', '\\\\\\\\\\\\r?\\\\n'));\n    var pseudoextras = groupOfRegEx('\\\\\\\\\\\\r?\\\\n|\\\\Z', comment, triple);\n    var pseudotoken = whitespace + groupOfRegEx(\n      pseudoextras, num, funny, contStr, name);\n\n    // Regular Expression object.\n    var tokenprog = new RegExp(token);\n    var pseudoprog = new RegExp(pseudotoken);\n    var single3prog = new RegExp(single3);\n    var double3prog = new RegExp(double3);\n\n    var endprogs = {\n      \"'\": new RegExp(single), '\"': new RegExp(doubleQuote),\n      \"'''\": single3prog, '\"\"\"': double3prog,\n      \"r'''\": single3prog, 'r\"\"\"': double3prog,\n      \"u'''\": single3prog, 'u\"\"\"': double3prog,\n      \"ur'''\": single3prog, 'ur\"\"\"': double3prog,\n      \"R'''\": single3prog, 'R\"\"\"': double3prog,\n      \"U'''\": single3prog, 'U\"\"\"': double3prog,\n      \"uR'''\": single3prog, 'uR\"\"\"': double3prog,\n      \"Ur'''\": single3prog, 'Ur\"\"\"': double3prog,\n      \"UR'''\": single3prog, 'UR\"\"\"': double3prog,\n      \"b'''\": single3prog, 'b\"\"\"': double3prog,\n      \"br'''\": single3prog, 'br\"\"\"': double3prog,\n      \"B'''\": single3prog, 'B\"\"\"': double3prog,\n      \"bR'''\": single3prog, 'bR\"\"\"': double3prog,\n      \"Br'''\": single3prog, 'Br\"\"\"': double3prog,\n      \"BR'''\": single3prog, 'BR\"\"\"': double3prog,\n      r: null, R: null, u: null, U: null,\n      b: null, B: null\n    };\n\n    var tripleQuoted = [\n      \"'''\", '\"\"\"', \"r'''\", 'r\"\"\"', \"R'''\", 'R\"\"\"',\n      \"u'''\", 'u\"\"\"', \"U'''\", 'U\"\"\"', \"ur'''\", 'ur\"\"\"', \"Ur'''\", 'Ur\"\"\"',\n      \"uR'''\", 'uR\"\"\"', \"UR'''\", 'UR\"\"\"', \"b'''\", 'b\"\"\"', \"B'''\", 'B\"\"\"',\n      \"br'''\", 'br\"\"\"', \"Br'''\", 'Br\"\"\"', \"bR'''\", 'bR\"\"\"', \"BR'''\", 'BR\"\"\"'];\n\n    var singleQuoted = [\n      \"'\", '\"', \"r'\", 'r\"', \"R'\", 'R\"', \"u'\", 'u\"', \"U'\", 'U\"', \"ur'\",\n      'ur\"', \"Ur'\", 'Ur\"', \"uR'\", 'uR\"', \"UR'\", 'UR\"', \"b'\", 'b\"', \"B'\", 'B\"',\n      \"br'\", 'br\"', \"Br'\", 'Br\"', \"bR'\", 'bR\"', \"BR'\", 'BR\"'];\n\n    var tabsize = 8;\n\n    return {\n      generateTokens: function(program) {\n        var tokenizedProgram = [];\n        var lnum = 0;\n        var parenlev = 0;\n        var continued = 0;\n        var namechars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';\n        var numchars = '0123456789';\n        var contstr = '';\n        var needcont = 0;\n        var contline = null;\n        var indents = [0];\n        var lcount = 0;\n        var endprog = null;\n\n        while (1) {\n          var line = program[lcount];\n          lcount++;\n          if (line === undefined) {\n            break;\n          }\n          var pos = 0;\n          var max = line.length;\n\n          if (contstr) {\n            if (!line) {\n              // Exception.\n              $log.error('EOF in multi-line string');\n            }\n\n            var endmatch = endprog.exec(line);\n            if (endmatch && endmatch.index === 0) {\n              token = endmatch[0];\n              pos = pos + token.length;\n              tokenizedProgram.push([PythonProgramTokenType.STRING, token]);\n              contstr = '';\n              needcont = 0;\n              contline = null;\n            } else if (\n              needcont && line.slice(-2) !== '\\\\\\n' ||\n              line.slice(-3) !== '\\\\\\r\\n') {\n              tokenizedProgram.push(\n                [PythonProgramTokenType.ERRORTOKEN, contstr + line]);\n              contstr = '';\n              contline = null;\n              continue;\n            } else {\n              contstr = contstr + line;\n              contline = contline + line;\n              continue;\n            }\n          } else if (parenlev === 0 && !continued) {\n            // New statement.\n            if (!line) {\n              break;\n            }\n\n            var column = 0;\n            // Measure leading whitespace.\n            while (pos < max) {\n              if (line[pos] === ' ') {\n                column += 1;\n              } else if (line[pos] === '\\t') {\n                column = (column / tabsize + 1) * tabsize;\n              } else if (line[pos] === '\\f') {\n                column = 0;\n              } else {\n                break;\n              }\n              pos += 1;\n            }\n\n            if (pos === max) {\n              break;\n            }\n\n            // Skip comments or blank lines.\n            if (('#\\r\\n').indexOf(line[pos]) !== -1) {\n              if (line[pos] === '#') {\n                var commentToken = line.slice(pos).replace('\\\\r\\\\n', '');\n                var nlPos = pos + commentToken.length;\n                tokenizedProgram.push(\n                  [PythonProgramTokenType.COMMENT, commentToken]);\n                tokenizedProgram.push(\n                  [PythonProgramTokenType.NL, line.slice(nlPos)]);\n              } else {\n                var comment = PythonProgramTokenType.COMMENT;\n                var nl = PythonProgramTokenType.NL;\n                tokenizedProgram.push([\n                  PythonProgramTokenType.line[pos] === '#' ? comment : nl,\n                  line.slice(pos)]);\n              }\n              continue;\n            }\n\n            // Count indents or dedents.\n            if (column > indents[-1]) {\n              indents.push(column);\n              tokenizedProgram.push(\n                [PythonProgramTokenType.INDENT, line.slice(0, pos)]);\n            }\n\n            while (column < indents[-1]) {\n              if (indents.indexOf(column) === -1) {\n                $log.error(\n                  'unindent does not match any outer indentation level');\n              }\n              indents = indents.slice(0, -1);\n              tokenizedProgram.push([PythonProgramTokenType.DEDENT, '']);\n            }\n          } else {\n            // Continued statement.\n            if (!line) {\n              $log.error('EOF in multi-line statement');\n            }\n            continued = 0;\n          }\n\n          while (pos < max) {\n            var pseudomatch = pseudoprog.exec(line.slice(pos));\n            // Scan for tokens.\n            if (pseudomatch && pseudomatch.index === 0) {\n              var start = pos + pseudomatch[0].indexOf(pseudomatch[1]);\n              var end = start + pseudomatch[1].length;\n              pos = end;\n              if (start === end) {\n                continue;\n              }\n              var token = line.slice(start, end);\n              var initial = line[start];\n\n              // Ordinary number.\n              if (\n                numchars.indexOf(initial) !== -1 ||\n                (initial === '.' && token !== '.')) {\n                tokenizedProgram.push([PythonProgramTokenType.NUMBER, token]);\n              } else if ('\\r\\n'.indexOf(initial) !== -1) {\n                tokenizedProgram.push([PythonProgramTokenType.NL, token]);\n              } else if (initial === '#') {\n                if (!token.endswith('\\n')) {\n                  tokenizedProgram.push(\n                    [PythonProgramTokenType.COMMENT, token]);\n                }\n              } else if (tripleQuoted.indexOf(token) !== -1) {\n                endprog = endprogs[token];\n                endmatch = endprog.exec(line.slice(pos));\n                // All on one line.\n                if (endmatch) {\n                  pos = pos + endmatch[0].length;\n                  token = line.slice(start, pos);\n                  tokenizedProgram.push(\n                    [PythonProgramTokenType.STRING, token]);\n                } else {\n                  // Multiple lines.\n                  contstr = line.slice(start);\n                  contline = line;\n                  break;\n                }\n              } else if (\n                singleQuoted.indexOf(initial) !== -1 ||\n                  singleQuoted.indexOf(token.slice(0, 2)) !== -1 ||\n                  singleQuoted.indexOf(token.slice(0, 3)) !== -1) {\n                // Continued string.\n                if (token.slice(-1) === '\\n') {\n                  endprog = (\n                    endprogs[initial] || endprogs[token[1]] ||\n                    endprogs[token[2]]);\n                  contstr = line.slice(start);\n                  needcont = 1;\n                  contline = line;\n                  break;\n                } else {\n                  tokenizedProgram.push(\n                    [PythonProgramTokenType.STRING, token]);\n                }\n              } else if (namechars.indexOf(initial) !== -1) {\n                // Ordinary name\n                tokenizedProgram.push([PythonProgramTokenType.NAME, token]);\n              } else if (initial === '\\\\') {\n                // Continued statement.\n                continued = 1;\n              } else {\n                if ('([{'.indexOf(initial) !== -1) {\n                  parenlev += 1;\n                } else if (')]}'.indexOf(initial) !== -1) {\n                  parenlev -= 1;\n                }\n                tokenizedProgram.push([PythonProgramTokenType.OP, token]);\n              }\n            } else {\n              tokenizedProgram.push(\n                [PythonProgramTokenType.ERRORTOKEN, line[pos]]);\n              pos += 1;\n            }\n          }\n        }\n\n        // Pop remaining indent levels\n        for (var indent in indents.slice(1)) {\n          tokenizedProgram.push([PythonProgramTokenType.DEDENT, '']);\n        }\n\n        tokenizedProgram.push([PythonProgramTokenType.ENDMARKER, '']);\n        return tokenizedProgram;\n      }\n    };\n  }]);\n"
    },
    {
      "filename": "extensions/classifiers/svm-prediction.service.spec.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the SVM prediction functions.\n */\n\n// TODO(#7222): Remove the following block of unnnecessary imports once\n// svm-prediction.service.ts is upgraded to Angular 8.\nimport { PredictionResultObjectFactory } from\n  'domain/classifier/PredictionResultObjectFactory.ts';\n// ^^^ This block is to be removed.\n\ndescribe('SVM prediction functions', function() {\n  beforeEach(angular.mock.module('oppia'));\n  beforeEach(angular.mock.module('oppia', function($provide) {\n    $provide.value(\n      'PredictionResultObjectFactory', new PredictionResultObjectFactory());\n  }));\n\n  describe('Test SVM prediction functions', function() {\n    var service;\n    beforeEach(angular.mock.inject(function($injector) {\n      service = $injector.get('SVMPredictionService');\n    }));\n\n    it('should calculate correct kernel values', function() {\n      var kernelParams = {\n        kernel: 'rbf',\n        coef0: 0.0,\n        degree: 3,\n        gamma: 0.5\n      };\n\n      var supportVectors = [[0, 0], [1, 1]];\n      var input = [1, 0];\n      var kvalues = service.kernel(kernelParams, supportVectors, input);\n      var expectedKvalues = [0.6065306597126334, 0.6065306597126334];\n      expect(kvalues.length).toEqual(2);\n      expect(kvalues).toEqual(expectedKvalues);\n    });\n\n    it('should give correct labels and confidence estimations', function() {\n      // This is classifier data of a pretrained SVM classifier trained\n      // on a synthetic dataset created for the purpose of testing SVM\n      // prediction service. The classes in the classifier data are equivalent\n      // to two non-default answer groups of the training data of some\n      // exploration.\n      var svmData = {\n        classes: [0, 1],\n        kernel_params: {\n          kernel: 'rbf', coef0: 0.0, degree: 3, gamma: 0.5},\n        intercept: [0.04554340162799716],\n        n_support: [80, 66],\n        probA: [-4.76812258346006],\n        support_vectors: [\n          [5.0, 0.0], [4.0, -2.0], [3.0, -4.0], [-5.0, 0.0], [4.0, -2.0],\n          [0.0, 0.0], [2.0, -1.0], [3.0, 4.0], [-4.0, -2.0], [-3.0, 4.0],\n          [-5.0, 0.0], [-4.0, -2.0], [0.0, -5.0], [-1.0, 1.0], [-1.0, -1.0],\n          [-1.0, 0.0], [4.0, -2.0], [-2.0, -4.0], [-5.0, 0.0], [4.0, -3.0],\n          [5.0, 0.0], [3.0, -4.0], [-5.0, 0.0], [5.0, 0.0], [0.0, -5.0],\n          [-4.0, 3.0], [4.0, 1.0], [-1.0, 4.0], [4.0, 2.0], [1.0, 4.0],\n          [4.0, 3.0], [-1.0, 4.0], [5.0, 0.0], [0.0, -1.0], [2.0, 0.0],\n          [-4.0, -3.0], [-2.0, -4.0], [4.0, 3.0], [-4.0, -1.0], [0.0, 5.0],\n          [4.0, 3.0], [-2.0, -1.0], [3.0, -4.0], [5.0, 0.0], [4.0, 1.0],\n          [5.0, 0.0], [0.0, -2.0], [2.0, 1.0], [0.0, -5.0], [1.0, -4.0],\n          [0.0, 2.0], [-4.0, 3.0], [-2.0, 0.0], [4.0, 3.0], [-3.0, 4.0],\n          [-1.0, -2.0], [1.0, -2.0], [1.0, -4.0], [1.0, -1.0], [1.0, 2.0],\n          [-4.0, 1.0], [-3.0, 4.0], [-3.0, -4.0], [3.0, -4.0], [-1.0, 2.0],\n          [3.0, 4.0], [-4.0, 1.0], [-1.0, -4.0], [1.0, 1.0], [-4.0, 3.0],\n          [0.0, 5.0], [2.0, 4.0], [-2.0, 1.0], [0.0, -5.0], [-3.0, -4.0],\n          [-4.0, 3.0], [1.0, 4.0], [-4.0, -3.0], [0.0, -5.0], [-3.0, 4.0],\n          [1.0, 5.0], [5.0, 1.0], [1.0, -5.0], [1.0, 5.0], [1.0, 5.0],\n          [-5.0, 1.0], [-4.0, -4.0], [-1.0, -5.0], [-1.0, -5.0], [4.0, 4.0],\n          [-5.0, 1.0], [1.0, -5.0], [-5.0, 3.0], [1.0, -5.0], [-5.0, 3.0],\n          [5.0, 1.0], [4.0, -4.0], [-4.0, 4.0], [-3.0, 5.0], [5.0, 1.0],\n          [-5.0, 1.0], [-4.0, -4.0], [-4.0, 4.0], [1.0, -5.0], [-1.0, 5.0],\n          [4.0, -4.0], [4.0, -4.0], [5.0, -3.0], [-1.0, 5.0], [5.0, -1.0],\n          [5.0, -1.0], [4.0, 4.0], [-4.0, 4.0], [-4.0, -4.0], [-2.0, 5.0],\n          [1.0, -5.0], [5.0, 1.0], [4.0, 4.0], [4.0, 4.0], [-5.0, 1.0],\n          [-1.0, 5.0], [3.0, 5.0], [5.0, -1.0], [-5.0, -1.0], [5.0, 1.0],\n          [3.0, 5.0], [5.0, 1.0], [3.0, -5.0], [-5.0, -2.0], [5.0, 3.0],\n          [5.0, -1.0], [-5.0, -3.0], [-5.0, -1.0], [3.0, -5.0], [-5.0, 1.0],\n          [5.0, 3.0], [-3.0, -5.0], [-4.0, 4.0], [5.0, -1.0], [2.0, 5.0],\n          [-1.0, 5.0], [-5.0, -5.0], [-3.0, 5.0], [-5.0, -2.0], [-2.0, -5.0],\n          [-2.0, -5.0]],\n        probB: [-0.26830931608536374],\n        dual_coef: [[\n          1.0, 0.17963792804729697, 0.403550660516519, 1.0, 1.0,\n          0.2174320339900639, 0.32237125746964795, 1.0, 0.23406746659599886,\n          0.13107690381219206, 1.0, 1.0, 0.20357365261524915,\n          0.3806808376092491, 0.07231536087203701, 0.052444785344018065,\n          0.9373454934508193, 0.2887075426898694, 1.0, 1.0, 1.0, 1.0, 1.0,\n          1.0, 1.0, 0.09794130691741577, 0.9371448493098987,\n          0.8020377139435809, 0.10523314152848777, 0.7208368125926214,\n          0.2745796264317118, 1.0, 1.0, 0.1341948623940462,\n          0.184427006132661, 1.0, 1.0, 1.0, 0.23220617815321498, 1.0, 1.0,\n          0.34100990964941563, 1.0, 1.0, 1.0, 1.0, 0.19085781720747444,\n          0.10622693983611159, 1.0, 0.9733190570902237, 0.07976440321906088,\n          1.0, 0.18011727003205402, 1.0, 1.0, 0.32629540304776156,\n          0.10535962914306607, 1.0, 0.23429959940904435, 0.2026193359451537,\n          1.0, 1.0, 1.0, 1.0, 0.20070585346407077, 1.0, 0.999293299134111,\n          0.1464060764902667, 0.3890080385472037, 1.0, 1.0,\n          0.2940723495632226, 0.10157585440791363, 1.0, 1.0, 1.0, 1.0, 1.0,\n          1.0, 0.9896220351629882, -1.0, -0.3138343321080787,\n          -0.5646722753216991, -1.0, -1.0, -0.5049737412040376, -1.0, -1.0,\n          -1.0, -0.3604481739923152, -1.0, -1.0, -0.3764883860788214, -1.0,\n          -1.0, -1.0, -0.9796036195304532, -0.7935513623790754,\n          -0.4880899543555701, -1.0, -1.0, -1.0, -1.0, -1.0,\n          -0.06955956862215716, -1.0, -1.0, -0.9943549382257916, -1.0,\n          -0.9093105655834473, -1.0, -1.0, -1.0, -0.959538326485444,\n          -0.09018015160096478, -1.0, -1.0, -1.0, -0.9834004233163612, -1.0,\n          -1.0, -0.025769464156420306, -1.0, -1.0, -1.0,\n          -0.9975520403673716, -0.9930682257463449, -0.6822294518807557,\n          -0.19520832795700704, -0.9197741907209602, -1.0,\n          -0.8410687469551232, -1.0, -1.0, -0.9737667349019845,\n          -0.5740153082819723, -0.8386505512671123, -0.9559546083928095,\n          -0.9333906130210027, -0.1858803184178766, -1.0,\n          -0.046523686102560795, -1.0, -0.9984458385556095,\n          -0.3443622757534568, -0.8786920904831582]]\n      };\n\n      var testx = [\n        [-2., -1.], [5., -2.], [-1., -2.], [2., -5.], [-4., 5.],\n        [-1., 5.], [-2., 0.], [-1., 5.], [-1., 2.]];\n      var predictions = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n      var probs = [\n        0.9934976, 0.99677775, 0.99349075, 0.99999448, 0.99999958,\n        0.98901676, 0.99349654, 0.98901676, 0.99351481];\n\n      for (var i = 0; i < testx.length; i++) {\n        var predictionResult = service.predict(svmData, testx[i]);\n        expect(predictionResult.predictionLabel).toEqual(predictions[i]);\n        expect(\n          Math.abs(predictionResult.predictionConfidence - probs[i])\n        ).toBeLessThan(1e-3);\n      }\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/classifiers/svm-prediction.service.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview SVM predict function for SVC classifier of sklearn.\n *\n * IMPORTANT NOTE: The predict function uses svm data that was extracted\n * after training of classifier on Oppia-ml. If there are any changes in\n * format of extracted data then corresponding changes must be propagated here.\n * Oppia-ml uses scikit's SVC class during training classifier which uses\n * libsvm's implementation. If there are any changes in following part of\n * code in libsvm then corresponding changes must be propagated here.\n *\n * libsvm's code for prediction:\n * https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2481\n */\n\nrequire('domain/classifier/PredictionResultObjectFactory.ts');\n\nangular.module('oppia').factory('SVMPredictionService', [\n  '$log', 'PredictionResultObjectFactory',\n  function($log, PredictionResultObjectFactory) {\n    return {\n      kernel: function(kernelParams, supportVectors, input) {\n        var kernel = kernelParams.kernel;\n        var kvalues = [];\n\n        if (kernel === 'rbf') {\n          var gamma = kernelParams.gamma;\n          var vectorLength = input.length;\n          for (var i = 0; i < supportVectors.length; i++) {\n            var sum = 0;\n            for (var j = 0; j < input.length; j++) {\n              sum += Math.pow((supportVectors[i][j] - input[j]), 2);\n            }\n            kvalues.push(Math.exp(-gamma * sum));\n          }\n        } else if (kernel === 'linear') {\n          var vectorLength = input.length;\n          for (var i = 0; i < supportVectors.length; i++) {\n            var sum = 0;\n            for (var j = 0; j < input.length; j++) {\n              sum += supportVectors[i][j] * input[j];\n            }\n            kvalues.push(sum);\n          }\n        }\n        return kvalues;\n      },\n\n      // Find multiclass probabilities.\n      // NOTE: This function is implemented as it is given in LibSVM.\n      // For more information on exact approach used, read following paper:\n      // https://www.csie.ntu.edu.tw/~cjlin/papers/svmprob/svmprob.pdf\n      // Also take a look at implementation by LibSVM:\n      // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L1829\n      calculateMulticlassProbabilities: function(nClasses, pairwiseProb) {\n        var Q = [];\n        for (var i = 0; i < nClasses; i++) {\n          Q.push([]);\n          for (var j = 0; j < nClasses; j++) {\n            Q[i].push(0);\n          }\n        }\n\n        var Qp = [];\n        for (var i = 0; i < nClasses; i++) {\n          Qp.push(0);\n        }\n\n        var P = [];\n        for (var i = 0; i < nClasses; i++) {\n          P.push(0);\n        }\n\n        var maxIter = Math.max(100, nClasses);\n        var eps = 0.005 / nClasses;\n\n        for (var t = 0; t < nClasses; t++) {\n          P[t] = 1.0 / nClasses;\n          Q[t][t] = 0.0;\n          for (var j = 0; j < t; j++) {\n            Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];\n            Q[t][j] = Q[j][t];\n          }\n\n          for (var j = t + 1; j < nClasses; j++) {\n            Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];\n            Q[t][j] = -pairwiseProb[j][t] * pairwiseProb[t][j];\n          }\n        }\n\n        var iter = 0;\n        for (iter = 0; iter < maxIter; iter++) {\n          var pQp = 0.0;\n\n          for (var t = 0; t < nClasses; t++) {\n            Qp[t] = 0;\n            for (var j = 0; j < nClasses; j++) {\n              Qp[t] += Q[t][j] * P[j];\n            }\n            pQp += P[t] * Qp[t];\n          }\n\n          var maxError = 0;\n          for (var t = 0; t < nClasses; t++) {\n            var error = Math.abs(Qp[t] - pQp);\n            if (error > maxError) {\n              maxError = error;\n            }\n          }\n\n          if (maxError < eps) {\n            break;\n          }\n\n          for (var t = 0; t < nClasses; t++) {\n            var diff = (-Qp[t] + pQp) / Q[t][t];\n            P[t] += diff;\n            pQp = (\n              (pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) /\n              (1 + diff) / (1 + diff));\n            for (var j = 0; j < nClasses; j++) {\n              Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);\n              P[j] /= (1 + diff);\n            }\n          }\n        }\n\n        if (iter >= maxIter) {\n          $log.info('Exceeds maxIter in calculateMulticlassProbabilities');\n        }\n\n        return P;\n      },\n      predict: function(classifierData, input) {\n        var nSupport = classifierData.n_support;\n        var supportVectors = classifierData.support_vectors;\n        var dualCoef = classifierData.dual_coef;\n        var intercept = classifierData.intercept;\n        var classes = classifierData.classes;\n        var kernelParams = classifierData.kernel_params;\n        var probA = classifierData.probA;\n        var probB = classifierData.probB;\n\n        var startIndices = [];\n        startIndices[0] = 0;\n        for (var i = 1; i < nSupport.length; i++) {\n          startIndices[i] = startIndices[i - 1] + nSupport[i - 1];\n        }\n\n        if (supportVectors[0].length !== input.length) {\n          // Support vector and input dimensions do not match.\n          $log.error(\n            'Dimension of support vectors and given input is different.');\n        }\n\n        // Find kernel values for supportVectors and given input. Assumes that\n        // input has same dimension and data type as any of the supportVectors.\n        var kvalues = this.kernel(kernelParams, supportVectors, input);\n\n        var votes = [];\n        for (var i = 0; i < classes.length; i++) {\n          votes.push(0);\n        }\n\n        var pairwiseProb = [];\n        for (var i = 0; i < classes.length; i++) {\n          pairwiseProb.push([]);\n          for (var j = 0; j < classes.length; j++) {\n            pairwiseProb[i].push(0);\n          }\n        }\n\n        var p = 0;\n        for (var i = 0; i < classes.length; i++) {\n          for (var j = i + 1; j < classes.length; j++) {\n            var si = startIndices[i];\n            var sj = startIndices[j];\n            var ci = nSupport[i];\n            var cj = nSupport[j];\n            var minProb = 1e-7;\n\n            var coef1 = dualCoef[j - 1];\n            var coef2 = dualCoef[i];\n\n            var sum = 0;\n            for (var k = 0; k < ci; k++) {\n              sum += kvalues[si + k] * coef1[si + k];\n            }\n\n            for (var k = 0; k < cj; k++) {\n              sum += kvalues[sj + k] * coef2[sj + k];\n            }\n\n            // NOTE: libsvm substracts the intercept from sum in its prediction\n            // function. Here intercept is added because sci-kit negates the\n            // intercept before passing it on to libsvm for prediction.\n            // For more info see github following issue:\n            // https://github.com/oppia/oppia/issues/4166\n            sum += intercept[p];\n\n            // The following approach to calculate pairwise probabilities was\n            // proposed by platt. For more info on LibSVM's implementation\n            // of platt scaling, read following paper:\n            // https://www.csie.ntu.edu.tw/~cjlin/papers/plattprob.pdf\n            // Also take a look at following implementation by LibSVM:\n            // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2552\n            var f = probA[p] * sum + probB[p];\n            var prob = 0;\n            if (f >= 0) {\n              prob = Math.exp(-f) / (1 + Math.exp(-f));\n            } else {\n              prob = 1 / (1 + Math.exp(f));\n            }\n            prob = Math.min(Math.max(prob, minProb), 1 - minProb);\n            pairwiseProb[i][j] = prob;\n            pairwiseProb[j][i] = 1 - prob;\n            p++;\n          }\n        }\n\n        var probabilities = this.calculateMulticlassProbabilities(\n          classes.length, pairwiseProb);\n\n        var maxProbIdx = 0;\n        for (var i = 1; i < classes.length; i++) {\n          if (probabilities[i] > probabilities[maxProbIdx]) {\n            maxProbIdx = i;\n          }\n        }\n\n        var predictedLabel = classes[maxProbIdx];\n        var prediction = PredictionResultObjectFactory.createNew(\n          predictedLabel, probabilities[maxProbIdx]);\n        return prediction;\n      }\n    };\n  }]);\n"
    },
    {
      "filename": "extensions/classifiers/text-input.tokenizer.spec.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests text input tokenizer.\n */\n\ndescribe('Text Input tokenizer', function() {\n  beforeEach(angular.mock.module('oppia'));\n\n  describe('Test text input tokenizer', function() {\n    var tokenizer;\n    beforeEach(angular.mock.inject(function($injector) {\n      tokenizer = $injector.get('TextInputTokenizer');\n    }));\n    it('should generate correct tokens for a text', function() {\n      var textInput = 'I don\\'t know the answer to this question';\n      var expectedTokens = [\n        'don', 'know', 'the', 'answer', 'to', 'this', 'question'];\n\n      var tokens = tokenizer.generateTokens(textInput);\n      expect(tokens.length).toEqual(expectedTokens.length);\n      expect(tokens).toEqual(expectedTokens);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/classifiers/text-input.tokenizer.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tokenizer for TextInput.\n *\n * Note: This is a simple tokenizer for tokenizing text input. The parameter\n * n_grams is used for deciding if we need to add n_gram tokens other than\n * the unigram tokens. As of now, we are only interested in unigrams but if\n * needed in the future, this tokenizer should be able to generate n-grams\n * also.\n *\n * For reference: https://github.com/scikit-learn/scikit-learn/\n *     blob/master/sklearn/feature_extraction/text.py#L541\n */\n\n// TODO(anmol): Add functionality to add n_grams, remove stop words.\nangular.module('oppia').factory('TextInputTokenizer', [function() {\n  return {\n    generateTokens: function(textInput) {\n      var tokenizedTextInput;\n      // The default regexp select tokens of 2 or more alphanumeric\n      // characters (punctuation is completely ignored and always treated\n      // as a token separator).\n      var tokenPattern = '\\\\b\\\\w\\\\w+\\\\b';\n      var regexp = new RegExp(tokenPattern, 'g');\n      tokenizedTextInput = textInput.match(regexp);\n      return tokenizedTextInput;\n    }\n  };\n}]);\n"
    },
    {
      "filename": "extensions/classifiers/winnowing-preprocessing.service.spec.ts",
      "content": "// Copyright 2016 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the winnowing preprocessing functions.\n */\n\nimport { WinnowingPreprocessingService } from\n  'classifiers/winnowing-preprocessing.service.ts';\n\ndescribe('Winnowing preprocessing functions', function() {\n  describe('Test winnowing preprocessing functions', function() {\n    var service;\n    beforeEach(() => {\n      service = new WinnowingPreprocessingService();\n    });\n\n    it('should generate k-gram hashes correctly.', function() {\n      var tokenToId = {\n        a: 0, b: 1, c: 2\n      };\n      var tokens = ['a', 'b', 'a', 'c', 'b'];\n      var expectedHashes = [3, 11, 7];\n      var generatedHashes = service.getKGramHashes(tokens, tokenToId, 3);\n\n      expect(generatedHashes.length).toEqual(3);\n      expect(generatedHashes).toEqual(expectedHashes);\n    });\n\n    it('should obtain correct fingerprint from hashes', function() {\n      var kGramHashes = [3, 11, 7, 10, 8, 6];\n      var expectedFingerprint = [[3, 0], [7, 2], [6, 5]];\n      var fingerprint = service.getFingerprintFromHashes(kGramHashes, 5, 3);\n\n      expect(fingerprint.length).toEqual(3);\n      expect(fingerprint).toEqual(expectedFingerprint);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/classifiers/winnowing-preprocessing.service.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Winnowing preprocessing functions.\n *\n * IMPORTANT NOTE: The preprocessing functions are implemented according to\n * winnowing preprocessing functions used on Oppia-ml. These functions\n * are simple translation of Python code to JS code and they both do exact\n * same task.\n */\n\nimport { downgradeInjectable } from '@angular/upgrade/static';\nimport { Injectable } from '@angular/core';\n\nexport interface ITokenToId {\n  [x: string]: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WinnowingPreprocessingService {\n  static generateHashValue(tokens: string[], tokenToId: ITokenToId): number {\n    var hashVal = 0;\n    var n = tokens.length - 1;\n    var base = Math.pow(Object.keys(tokenToId).length, n);\n\n    tokens.forEach((token: string) => {\n      hashVal += tokenToId[token] * base;\n      base /= Object.keys(tokenToId).length;\n    });\n\n    return hashVal;\n  }\n\n  getKGramHashes(\n      tokens: string[], tokenToId: ITokenToId, K: number): number[] {\n    // Generate all possible k-gram hashes from tokens.\n    var kGramHashes = [];\n    var kTokens;\n    for (var i = 0; i < tokens.length - K + 1; i += 1) {\n      kTokens = tokens.slice(i, i + K);\n      kGramHashes.push(WinnowingPreprocessingService.generateHashValue(\n        kTokens, tokenToId));\n    }\n    return kGramHashes;\n  }\n\n  getFingerprintFromHashes(\n      kGramHashes: number[], T: number, K: number): Array<number[]> {\n    // Generate fingerprint of a document from its k-gram hashes.\n    var windowSize = T - K + 1;\n    var fingerprintHashesIndex = new Set();\n    for (var i = 0; i < kGramHashes.length - windowSize + 1; i += 1) {\n      var windowHashes = kGramHashes.slice(i, i + windowSize);\n      var minHashValue = Math.min.apply(Math, windowHashes);\n      var minHashIndex = i + windowHashes.indexOf(minHashValue);\n      fingerprintHashesIndex.add(minHashIndex);\n    }\n\n    var fingerprint = [];\n    fingerprintHashesIndex.forEach((hashIndex: number) => {\n      fingerprint.push([kGramHashes[hashIndex], hashIndex]);\n    });\n\n    return fingerprint;\n  }\n}\n\nangular.module('oppia').factory(\n  'WinnowingPreprocessingService',\n  downgradeInjectable(WinnowingPreprocessingService));\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/CodeRepl.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Requires for CodeRepl interaction.\n */\n\nrequire('interactions/CodeRepl/code-repl-prediction.service.ts');\n\nrequire('interactions/CodeRepl/directives/code-repl-rules.service.ts');\nrequire('interactions/CodeRepl/directives/code-repl-validation.service.ts');\nrequire('interactions/CodeRepl/directives/' +\n  'oppia-interactive-code-repl.directive.ts');\nrequire('interactions/CodeRepl/directives/' +\n  'oppia-response-code-repl.directive.ts');\nrequire('interactions/CodeRepl/directives/' +\n  'oppia-short-response-code-repl.directive.ts');\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/code-repl-prediction.service.spec.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests code repl prediction service.\n */\n\n// TODO(#7222): Remove the following block of unnnecessary imports once\n// code-repl-prediction.service.ts is upgraded to Angular 8.\nimport { PredictionResultObjectFactory } from\n  'domain/classifier/PredictionResultObjectFactory.ts';\nimport { WinnowingPreprocessingService } from\n  'classifiers/winnowing-preprocessing.service.ts';\n// ^^^ This block is to be removed.\n\ndescribe('CodeRepl prediction service', function() {\n  beforeEach(angular.mock.module('oppia'));\n  beforeEach(angular.mock.module('oppia', function($provide) {\n    $provide.value(\n      'PredictionResultObjectFactory', new PredictionResultObjectFactory());\n    $provide.value(\n      'WinnowingPreprocessingService', new WinnowingPreprocessingService());\n  }));\n  describe('CodeRepl prediction service test', function() {\n    var service, tokenizer;\n    beforeEach(angular.mock.inject(function($injector) {\n      service = $injector.get('CodeReplPredictionService');\n      tokenizer = $injector.get('PythonProgramTokenizer');\n    }));\n\n    it('should calculate correct jaccard index', function() {\n      var multisetA = [1, 2];\n      var multisetB = [3, 4];\n      var expectedValue = 0.0;\n      var value = service.calcJaccardIndex(multisetA, multisetB);\n      expect(value).toEqual(expectedValue);\n\n      var multisetA = [1, 2];\n      var multisetB = [2, 3];\n      var expectedValue = 1.0 / 3;\n      var value = service.calcJaccardIndex(multisetA, multisetB);\n      expect(value).toEqual(expectedValue);\n\n      var multisetA = [1, 2, 2, 4];\n      var multisetB = [2, 3, 4];\n      var expectedValue = 2.0 / 5;\n      var value = service.calcJaccardIndex(multisetA, multisetB);\n      expect(value).toEqual(expectedValue);\n\n      var multisetA = [1, 2, 3];\n      var multisetB = [3, 3, 5];\n      var expectedValue = 1.0 / 5;\n      var value = service.calcJaccardIndex(multisetA, multisetB);\n      expect(value).toEqual(expectedValue);\n    });\n\n    it('should normalize python program tokens correctly.', function() {\n      var program = (\n        '# This is a comment.\\nvariable = 15\\nif variable > 5:' +\n        '\\n    print \"Hello\"\\nprint \" World\"');\n\n      var programTokens = tokenizer.generateTokens(program.split('\\n'));\n      var tokenToId = {\n        '=': 0, 15: 1, 'if': 2, '>': 3, 5: 4, print: 5, ':': 6\n      };\n\n      var expectedTokens = [\n        'V', '=', '15', 'if', 'V', '>', '5', ':', 'print', 'UNK',\n        'print', 'UNK'];\n\n      var normalizedTokens = service.getTokenizedProgram(\n        programTokens, tokenToId);\n\n      expect(normalizedTokens).toEqual(expectedTokens);\n    });\n\n    it('should produce program tokens for count vector correctly.', function() {\n      var program = (\n        '# This is a comment.\\nvariable = 15\\nif variable > 5:' +\n        '\\n    print \"Hello\"\\nprint \" World\"');\n\n      var programTokens = tokenizer.generateTokens(program.split('\\n'));\n      var expectedTokens = [\n        'V', '=', '15', 'if', 'V', '>', '5', ':', 'print', '\"Hello\"',\n        'print', '\" World\"'];\n\n      var CVTokens = service.getTokenizedProgramForCV(programTokens);\n\n      expect(CVTokens).toEqual(expectedTokens);\n    });\n\n    it('should predict correct answer group for the answers', function() {\n      var classifierData = window.__fixtures__[\n        'core/tests/data/code_classifier_data'];\n\n      // Test algorithm agains first test set. This test set contains\n      // example which can be successfully classified by KNN classifier.\n      var testData = window.__fixtures__[\n        'core/tests/data/code_classifier_test_knn'];\n      var predictedAnswerGroup = null;\n      for (var i = 0; i < testData.length; i++) {\n        for (var j = 0; j < testData[i].answers.length; j++) {\n          predictedAnswerGroup = service.predict(\n            classifierData, testData[i].answers[j]);\n          expect(predictedAnswerGroup).toEqual(\n            testData[i].answer_group_index);\n        }\n      }\n\n      // Test algorithm against first test set. This test set contains\n      // examples for which KNN fails but SVM succeeds.\n      var testData = window.__fixtures__[\n        'core/tests/data/code_classifier_test_svm'];\n      var predictedAnswerGroup = null;\n      for (var i = 0; i < testData.length; i++) {\n        for (var j = 0; j < testData[i].answers.length; j++) {\n          predictedAnswerGroup = service.predict(\n            classifierData, testData[i].answers[j]);\n          // Ignore the prediction if predicted answer group is -1 since\n          // -1 is returned when the prediction probability is less than the\n          // threshold in which case default answer is shown to the learner.\n          if (predictedAnswerGroup !== -1) {\n            expect(predictedAnswerGroup).toEqual(\n              testData[i].answer_group_index);\n          }\n        }\n      }\n    });\n\n    it('should not have accuracy less than 85', function() {\n      var classifierData = window.__fixtures__[\n        'core/tests/data/code_classifier_data'];\n      var trainingData = window.__fixtures__[\n        'core/tests/data/code_classifier_accuracy_test'];\n      var correctPredictions = 0, totalAnswers = 0;\n\n      // To keep things simple, we will calculate accuracy score\n      // and not F1 score.\n      var predictedAnswerGroup = null;\n      for (var i = 0; i < trainingData.length; i++) {\n        for (var j = 0; j < trainingData[i].answers.length; j++) {\n          predictedAnswerGroup = service.predict(\n            classifierData, trainingData[i].answers[j]);\n          // Ignore the prediction if predicted answer group is -1 since\n          // -1 is returned when the prediction probability is less than the\n          // threshold.\n          if (predictedAnswerGroup !== -1) {\n            if (predictedAnswerGroup === trainingData[i].answer_group_index) {\n              correctPredictions++;\n            }\n            totalAnswers++;\n          }\n        }\n      }\n      expect((correctPredictions * 100) / totalAnswers).not.toBeLessThan(85.0);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/code-repl-prediction.service.ts",
      "content": "// Copyright 2017 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview CodeRepl interaction prediction functions.\n *\n * IMPORTANT NOTE: The prediction function uses the classifier data\n * of trained model (code classifier model) for inference. These functions\n * must be changed if there are any changes in corresponding classifier training\n * function on Oppia-ml.\n */\n\nrequire('classifiers/count-vectorizer.service.ts');\nrequire('classifiers/python-program.tokenizer.ts');\nrequire('classifiers/svm-prediction.service.ts');\nrequire('classifiers/winnowing-preprocessing.service.ts');\n\nrequire('interactions/interactions-extension.constants.ajs.ts');\n\nangular.module('oppia').factory('CodeReplPredictionService', [\n  'CountVectorizerService', 'PythonProgramTokenType',\n  'PythonProgramTokenizer', 'SVMPredictionService',\n  'WinnowingPreprocessingService',\n  'CODE_REPL_PREDICTION_SERVICE_THRESHOLD', function(\n      CountVectorizerService, PythonProgramTokenType,\n      PythonProgramTokenizer, SVMPredictionService,\n      WinnowingPreprocessingService, CODE_REPL_PREDICTION_SERVICE_THRESHOLD) {\n    // The string with which all the variable and method names need to be\n    // replaced.\n    var TOKEN_NAME_VAR = 'V';\n    // The string with which all unknown tokens (tokens which are ignored\n    // because they appear rarely in a program) will be replaced.\n    var TOKEN_NAME_UNK = 'UNK';\n\n    // List of python keywords.\n    var KW_LIST = [\n      'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',\n      'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global',\n      'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print',\n      'raise', 'return', 'try', 'while', 'with', 'yield'];\n\n    var predictionService = {\n      getTokenizedProgram: function(programTokens, tokenToId) {\n        // Tokenize Python programs in dataset for winnowing.\n        var tokenizedProgram = [];\n\n        for (var i = 0; i < programTokens.length; i++) {\n          var token = programTokens[i];\n          var tokenId = token[0];\n          var tokenName = token[1];\n\n          if (\n            tokenId === PythonProgramTokenType.NL ||\n            tokenId === PythonProgramTokenType.COMMENT ||\n            tokenName.trim() === '') {\n            continue;\n          } else if (\n            tokenId === PythonProgramTokenType.NAME &&\n            KW_LIST.indexOf(tokenName) === -1) {\n            tokenizedProgram.push(TOKEN_NAME_VAR);\n          } else {\n            if (tokenToId.hasOwnProperty(tokenName)) {\n              tokenizedProgram.push(tokenName);\n            } else {\n              tokenizedProgram.push(TOKEN_NAME_UNK);\n            }\n          }\n        }\n\n        return tokenizedProgram;\n      },\n\n      getTokenizedProgramForCV: function(programTokens) {\n        // Tokenize Python programs in dataset for winnowing.\n        var tokenizedProgram = [];\n\n        for (var i = 0; i < programTokens.length; i++) {\n          var token = programTokens[i];\n          var tokenId = token[0];\n          var tokenName = token[1];\n\n          if (\n            tokenId === PythonProgramTokenType.NL ||\n            tokenId === PythonProgramTokenType.COMMENT ||\n            tokenName.trim() === '') {\n            continue;\n          } else if (\n            tokenId === PythonProgramTokenType.NAME &&\n            KW_LIST.indexOf(tokenName) === -1) {\n            tokenizedProgram.push(TOKEN_NAME_VAR);\n          } else {\n            tokenizedProgram.push(tokenName);\n          }\n        }\n\n        return tokenizedProgram;\n      },\n\n      calcJaccardIndex: function(multisetA, multisetB) {\n        // Calculate jaccard index between two multisets.\n        multisetA.sort(function(x, y) {\n          return x > y ? 1 : -1;\n        });\n        multisetB.sort(function(x, y) {\n          return x > y ? 1 : -1;\n        });\n\n        var smallSet = (\n          (multisetA.length < multisetB.length) ?\n            multisetA.slice() : multisetB.slice());\n        var unionSet = (\n          (multisetA.length < multisetB.length) ?\n            multisetB.slice() : multisetA.slice());\n        var index = 0;\n        var extraElements = [];\n\n        smallSet.forEach(function(elem) {\n          while (index < unionSet.length && elem > unionSet[index]) {\n            index += 1;\n          }\n          if (index >= unionSet.length || elem < unionSet[index]) {\n            extraElements.push(elem);\n          } else if (elem === unionSet[index]) {\n            index += 1;\n          }\n        });\n\n        unionSet = unionSet.concat(extraElements);\n        if (unionSet.length === 0) {\n          return 0;\n        }\n\n        index = 0;\n        var intersectionSet = [];\n        multisetA.forEach(function(elem) {\n          while (index < multisetB.length && elem > multisetB[index]) {\n            index += 1;\n          }\n          if (index < multisetB.length && elem === multisetB[index]) {\n            intersectionSet.push(elem);\n            index += 1;\n          }\n        });\n\n        var coeff = intersectionSet.length / unionSet.length;\n        return coeff;\n      },\n\n      getProgramSimilarity: function(fingerprintA, fingerprintB) {\n        // Calculate similarity between two programs' fingerprints.\n        var multisetA = [];\n        var multisetB = [];\n\n        fingerprintA.forEach(function(hash) {\n          multisetA.push(hash[0]);\n        });\n\n        fingerprintB.forEach(function(hash) {\n          multisetB.push(hash[0]);\n        });\n\n        return predictionService.calcJaccardIndex(multisetA, multisetB);\n      },\n\n      findNearestNeighborsIndexes: function(knnData, program) {\n        // Find index of nearest neighbor programs to given program.\n        var K = knnData.K;\n        var T = knnData.T;\n        var fingerprintData = knnData.fingerprint_data;\n        var tokenToId = knnData.token_to_id;\n        var top = knnData.top;\n\n        // Find program tokens using python program tokenizer.\n        var programLines = program.split('\\n');\n\n        // Empty lines in between program causes parser to think that program\n        // has ended which leads to generation of wrong set of tokens.\n        programLines = programLines.filter(function(line) {\n          return line.trim().length !== 0;\n        });\n\n        var pythonProgramTokens = PythonProgramTokenizer.generateTokens(\n          programLines);\n        // Normalize program tokens for winnowing preprocessing. This removes\n        // unnecessary tokens and normalizes variable and method name tokens.\n\n        var tokenizedProgram = predictionService.getTokenizedProgram(\n          pythonProgramTokens, tokenToId);\n        // Find k-gram hashes from normalized program tokens.\n\n        var programHashes = WinnowingPreprocessingService.getKGramHashes(\n          tokenizedProgram, tokenToId, K);\n        // Find fingerprint from k-gram hashes of program.\n\n        var programFingerprint = (\n          WinnowingPreprocessingService.getFingerprintFromHashes(\n            programHashes, T, K));\n        // Calculte similarity of the input program with every program in\n        // classifier data for k nearest neighbor classification.\n        var similarityList = [];\n        Object.keys(fingerprintData).forEach(function(index) {\n          var fingerprintA = fingerprintData[index].fingerprint;\n          var similarity = predictionService.getProgramSimilarity(\n            fingerprintA, programFingerprint);\n          similarityList.push([parseInt(index), similarity]);\n        });\n\n        // Sort the programs according to their similairy with the\n        // input program.\n        similarityList.sort(function(x, y) {\n          return x[1] > y[1] ? -1 : 1;\n        });\n\n        var nearestNeighborsIndexes = similarityList.slice(0, top);\n        return nearestNeighborsIndexes;\n      },\n\n      predict: function(classifierData, answer) {\n        // Get python code from the input answer.\n        var program = answer.code;\n        var knnData = classifierData.KNN;\n        var svmData = classifierData.SVM;\n        var cvVocabulary = classifierData.cv_vocabulary;\n\n        var fingerprintData = knnData.fingerprint_data;\n        var top = knnData.top;\n        var occurrence = knnData.occurrence;\n\n        var nearestNeighborsIndexes = (\n          predictionService.findNearestNeighborsIndexes(knnData, program));\n        var nearesNeighborsClasses = [];\n\n        // Find classes of nearest neighbor programs.\n        nearestNeighborsIndexes.forEach(function(neighbor) {\n          var index = neighbor[0];\n          var outputClassPropertyName = 'class';\n          var similarity = neighbor[1];\n          nearesNeighborsClasses.push(\n            [fingerprintData[index][outputClassPropertyName], similarity]);\n        });\n\n        // Count how many times a class appears in nearest neighbors.\n        var classCount = {};\n        nearesNeighborsClasses.forEach(function(neighbor) {\n          var outputClass = neighbor[0];\n          if (classCount.hasOwnProperty(outputClass)) {\n            classCount[outputClass] += 1;\n          } else {\n            classCount[outputClass] = 1;\n          }\n        });\n\n        // Find the winning class.\n        var classCountArray = [];\n        Object.keys(classCount).forEach(function(k) {\n          classCountArray.push([parseInt(k), classCount[k]]);\n        });\n\n        classCountArray.sort(function(x, y) {\n          return x[1] > y[1] ? -1 : 1;\n        });\n\n        var predictedClass = classCountArray[0][0];\n        var predictedClassOccurrence = classCountArray[0][1];\n        var prediction = predictedClass;\n\n        if (predictedClassOccurrence >= occurrence) {\n          if (classCountArray.length > 1) {\n            if (predictedClassOccurrence !== classCountArray[1][1]) {\n              // Check whether second most likely prediction does not have same\n              // occurrence count. If it does, then we assume that KNN has\n              // failed.\n              return prediction;\n            }\n          } else {\n            return prediction;\n          }\n        }\n\n        // If KNN fails to predict then use SVM to predict the output class.\n\n        // Find program tokens using python program tokenizer.\n        var programLines = program.split('\\n');\n\n        // Empty lines in between program causes parser to think that program\n        // has ended which leads to generation of wrong set of tokens.\n        programLines = programLines.filter(function(line) {\n          return line.trim().length !== 0;\n        });\n\n        var pythonProgramTokens = PythonProgramTokenizer.generateTokens(\n          programLines);\n\n        var tokenizedProgram = predictionService.getTokenizedProgramForCV(\n          pythonProgramTokens);\n        var programVector = CountVectorizerService.vectorize(\n          tokenizedProgram, cvVocabulary);\n\n        var predictionResult = SVMPredictionService.predict(\n          svmData, programVector);\n        if (predictionResult.predictionConfidence >\n            CODE_REPL_PREDICTION_SERVICE_THRESHOLD) {\n          return predictionResult.predictionLabel;\n        }\n        return -1;\n      }\n    };\n\n    return predictionService;\n  }]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-interaction.directive.html",
      "content": "<div class=\"code-repl-container\">\n  <div>\n    <!-- This ng-form is needed for submitting answer on hitting enter. -->\n    <form ng-submit=\"$ctrl.runAndSubmitCode($ctrl.code)\">\n      <div class=\"code-repl-input-box\">\n        <div ui-codemirror=\"{onLoad: $ctrl.initCodeEditor, readOnly: !$ctrl.interactionIsActive}\">\n        </div>\n      </div>\n      <md-button type=\"button\" class=\"md-raised\" ng-disabled=\"!$ctrl.interactionIsActive || !$ctrl.hasLoaded\" ng-click=\"$ctrl.runCode($ctrl.code)\">Test Run</md-button>\n      <span class=\"code-repl-language\">\n        <em>Language: <[$ctrl.language]></em>\n      </span>\n    </form>\n  </div>\n\n  <hr>\n\n  <div ng-if=\"$ctrl.fullError\">\n    <pre class=\"code-repl-terminal-error\"><[$ctrl.fullError]></pre>\n  </div>\n  <div ng-if=\"!$ctrl.fullError\">\n    <pre ng-if=\"$ctrl.output\" class=\"code-repl-terminal\"><[$ctrl.output]></pre>\n    <pre ng-if=\"!$ctrl.output\" class=\"code-repl-terminal\">[No terminal output]</pre>\n  </div>\n</div>\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-response.directive.html",
      "content": "<div>\n  <h5>Code</h5>\n  <pre><[$ctrl.answer.code]></pre>\n\n  <span ng-if=\"$ctrl.answer.output\">\n    <h5>Output</h5>\n    <pre><[$ctrl.nswer.output]></pre>\n  </span>\n\n  <span ng-if=\"$ctrl.answer.error\" focus-on=\"<[$ctrl.errorFocusLabel]>\">\n    <font color=\"red\">Error: <[$ctrl.answer.error]></font><br>\n  </span>\n\n  <span ng-if=\"$ctrl.answer.evaluation\">\n    &gt;&gt; <[$ctrl.answer.evaluation]>\n  </span>\n</div>\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-rules.service.spec.ts",
      "content": "// Copyright 2015 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for Code REPL rules.\n */\n\nimport { CodeNormalizerService } from\n  'services/CodeNormalizerService.ts';\n\nrequire('interactions/CodeRepl/directives/code-repl-rules.service.ts');\n\ndescribe('Code REPL rules service', function() {\n  beforeEach(angular.mock.module('oppia'));\n  beforeEach(angular.mock.module('oppia', function($provide) {\n    $provide.value('CodeNormalizerService', new CodeNormalizerService());\n  }));\n\n  var crrs = null;\n  beforeEach(angular.mock.inject(function($injector) {\n    crrs = $injector.get('CodeReplRulesService');\n  }));\n\n  describe('\\'equals\\' rule', function() {\n    var RULE_INPUT = {\n      x: (\n        'def x():\\n' +\n        '    y = \\'ab    c\\'\\n' +\n        '    return x'\n      )\n    };\n\n    it('should accept the same code', function() {\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():\\n' +\n          '    y = \\'ab    c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(true);\n    });\n\n    it('should remove extra newlines and trailing whitespace', function() {\n      // Extra newline with spaces\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():\\n' +\n          '    y = \\'ab    c\\'\\n' +\n          '    \\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(true);\n\n      // Extra trailing whitespace on first line\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():        \\n' +\n          '    y = \\'ab    c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(true);\n\n      // Tab character\n      expect(crrs.CodeEquals({\n        code: (\n          'def x(): \\t\\n' +\n          '    y = \\'ab    c\\'\\n' +\n          '    return x\\n\\n\\n'\n        )\n      }, RULE_INPUT)).toBe(true);\n    });\n\n    it('should not change spaces at the start of a line', function() {\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():\\n' +\n          '  y = \\'ab    c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(false);\n    });\n\n    it('should detect missing newlines', function() {\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():' +\n          '    y = \\'ab    c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(false);\n    });\n\n    it('should compare spaces inside quotes', function() {\n      expect(crrs.CodeEquals({\n        code: (\n          'def x():' +\n          '    y = \\'ab c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(false);\n    });\n  });\n\n  describe('\\'code contains\\' rule', function() {\n    var RULE_INPUT = {\n      x: 'def x():'\n    };\n\n    it('should check if answer contains some code', function() {\n      expect(crrs.CodeContains({\n        code: (\n          'def x():\\n' +\n          '    y = \\'ab c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.CodeContains({\n        code: '    def x():\\n'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.CodeContains({\n        code: 'print 0'\n      }, RULE_INPUT)).toBe(false);\n    });\n  });\n\n  describe('\\'code does not contain\\' rule', function() {\n    var RULE_INPUT = {\n      x: 'def x():'\n    };\n\n    it('should check if answer contains some code', function() {\n      expect(crrs.CodeDoesNotContain({\n        code: (\n          'def x():\\n' +\n          '    y = \\'ab c\\'\\n' +\n          '    return x'\n        )\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.CodeDoesNotContain({\n        code: 'def x():\\n'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.CodeDoesNotContain({\n        code: '    def x():\\n'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.CodeDoesNotContain({\n        code: 'print 0'\n      }, RULE_INPUT)).toBe(true);\n    });\n  });\n\n  describe('\\'output contains\\' rule', function() {\n    var RULE_INPUT = {\n      x: '1'\n    };\n\n    var RULE_INPUT_1 = {\n      x: 'a b c'\n    };\n\n    var RULE_INPUT_2 = {\n      x: 'a\\nb\\nc'\n    };\n\n    it('should check if output contains some content', function() {\n      expect(crrs.OutputContains({\n        output: '1 2 3 4'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.OutputContains({\n        output: '\\n1\\n2\\n3\\n4\\n'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.OutputContains({\n        output: ''\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'bad output'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'a b c d e'\n      }, RULE_INPUT_1)).toBe(true);\n      expect(crrs.OutputContains({\n        output: 'a\\nb\\nc\\nd\\n'\n      }, RULE_INPUT_1)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'ab\\nc\\n'\n      }, RULE_INPUT_1)).toBe(false);\n      expect(crrs.OutputContains({\n        output: ''\n      }, RULE_INPUT_1)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'bad output'\n      }, RULE_INPUT_1)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'a\\nb\\nc\\nd\\ne'\n      }, RULE_INPUT_2)).toBe(true);\n      expect(crrs.OutputContains({\n        output: '\\nabc\\ndef\\nfgh\\n'\n      }, RULE_INPUT_2)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'a b c'\n      }, RULE_INPUT_2)).toBe(false);\n      expect(crrs.OutputContains({\n        output: ''\n      }, RULE_INPUT_2)).toBe(false);\n      expect(crrs.OutputContains({\n        output: 'bad output'\n      }, RULE_INPUT_2)).toBe(false);\n    });\n  });\n\n  describe('\\'output equals\\' rule', function() {\n    var RULE_INPUT = {\n      x: '1'\n    };\n\n    it('should compare normalized output', function() {\n      expect(crrs.OutputEquals({\n        output: '1'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.OutputEquals({\n        output: '\\n1\\n'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.OutputEquals({\n        output: ''\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.OutputEquals({\n        output: 'bad output'\n      }, RULE_INPUT)).toBe(false);\n    });\n  });\n\n  describe('\\'results in error\\' rule', function() {\n    var RULE_INPUT = null;\n\n    it('should check if error is not empty', function() {\n      expect(crrs.ResultsInError({\n        error: ''\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.ResultsInError({\n        error: ' \\t\\n'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.ResultsInError({\n        error: 'bad output'\n      }, RULE_INPUT)).toBe(true);\n    });\n  });\n\n  describe('\\'error contains\\' rule', function() {\n    var RULE_INPUT = {\n      x: 'bad'\n    };\n\n    it('should check if error message appears', function() {\n      expect(crrs.ErrorContains({\n        error: 'bad'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.ErrorContains({\n        error: '  bad  '\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.ErrorContains({\n        error: 'not bad'\n      }, RULE_INPUT)).toBe(true);\n      expect(crrs.ErrorContains({\n        error: 'error'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.ErrorContains({\n        error: 'b a d'\n      }, RULE_INPUT)).toBe(false);\n      expect(crrs.ErrorContains({\n        error: ''\n      }, RULE_INPUT)).toBe(false);\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-rules.service.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Rules service for the interaction.\n */\n\nrequire('filters/string-utility-filters/normalize-whitespace.filter.ts');\nrequire('services/CodeNormalizerService.ts');\n\nangular.module('oppia').factory('CodeReplRulesService', [\n  '$filter', 'CodeNormalizerService',\n  function($filter, CodeNormalizerService) {\n    return {\n      CodeEquals: function(answer, inputs) {\n        var normalizedCode =\n          CodeNormalizerService.getNormalizedCode(answer.code);\n        var normalizedExpectedCode =\n          CodeNormalizerService.getNormalizedCode(inputs.x);\n        return normalizedCode === normalizedExpectedCode;\n      },\n      CodeContains: function(answer, inputs) {\n        var normalizedCode =\n          CodeNormalizerService.getNormalizedCode(answer.code);\n        var normalizedSnippet =\n          CodeNormalizerService.getNormalizedCode(inputs.x);\n        return normalizedCode.indexOf(normalizedSnippet) !== -1;\n      },\n      CodeDoesNotContain: function(answer, inputs) {\n        var normalizedCode =\n          CodeNormalizerService.getNormalizedCode(answer.code);\n        var normalizedSnippet =\n          CodeNormalizerService.getNormalizedCode(inputs.x);\n        return normalizedCode.indexOf(normalizedSnippet) === -1;\n      },\n      OutputContains: function(answer, inputs) {\n        var normalizedOutput = $filter('normalizeWhitespace')(answer.output);\n        var normalizedSnippet = $filter('normalizeWhitespace')(inputs.x);\n        return normalizedOutput.indexOf(normalizedSnippet) !== -1;\n      },\n      OutputEquals: function(answer, inputs) {\n        var normalizedOutput = $filter('normalizeWhitespace')(answer.output);\n        var normalizedExpectedOutput =\n          $filter('normalizeWhitespace')(inputs.x);\n        return normalizedOutput === normalizedExpectedOutput;\n      },\n      ResultsInError: function(answer) {\n        return !!(answer.error.trim());\n      },\n      ErrorContains: function(answer, inputs) {\n        var normalizedError = $filter('normalizeWhitespace')(answer.error);\n        var normalizedSnippet = $filter('normalizeWhitespace')(inputs.x);\n        return normalizedError.indexOf(normalizedSnippet) !== -1;\n      }\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-short-response.directive.html",
      "content": "<span><pre><[$ctrl.answer.code]></pre></span>\n\n<span ng-if=\"$ctrl.answer.output\">\n  <h5>Output</h5>\n  <pre><[$ctrl.answer.output | truncateAtFirstLine]></pre>\n</span>\n\n<span ng-if=\"$ctrl.answer.error\" focus-on=\"<[$ctrl.errorFocusLabel]>\">\n  <font color=\"red\">Error: <[$ctrl.answer.error]></font><br>\n</span>\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-validation.service.spec.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for code repl input validation service.\n */\n\n// TODO(#7222): Remove the following block of unnnecessary imports once\n<<<<<<< HEAD:extensions/interactions/CodeRepl/directives/code-repl-validation.service.spec.ts\n// code-repl-validation.service.ts is upgraded to Angular 8.\n=======\n// CodeReplValidationService.ts is upgraded to Angular 8.\nimport { baseInteractionValidationService } from\n  'interactions/baseInteractionValidationService.ts';\nimport { OutcomeObjectFactory } from\n  'domain/exploration/OutcomeObjectFactory.ts';\n>>>>>>> upstream/develop:extensions/interactions/CodeRepl/directives/CodeReplValidationServiceSpec.ts\nimport { RuleObjectFactory } from 'domain/exploration/RuleObjectFactory.ts';\nimport { SubtitledHtmlObjectFactory } from\n  'domain/exploration/SubtitledHtmlObjectFactory.ts';\n// ^^^ This block is to be removed.\n\nrequire('interactions/CodeRepl/directives/code-repl-validation.service.ts');\ndescribe('CodeReplValidationService', function() {\n  var WARNING_TYPES, validatorService;\n  var currentState, customizationArguments;\n  var goodAnswerGroups, goodDefaultOutcome;\n  var oof, agof;\n\n  beforeEach(function() {\n    angular.mock.module('oppia');\n  });\n  beforeEach(angular.mock.module('oppia', function($provide) {\n    $provide.value(\n      'baseInteractionValidationService',\n      new baseInteractionValidationService());\n    $provide.value(\n      'OutcomeObjectFactory', new OutcomeObjectFactory(\n        new SubtitledHtmlObjectFactory()));\n    $provide.value('RuleObjectFactory', new RuleObjectFactory());\n    $provide.value(\n      'SubtitledHtmlObjectFactory', new SubtitledHtmlObjectFactory());\n  }));\n\n  beforeEach(angular.mock.inject(function($injector) {\n    validatorService = $injector.get('CodeReplValidationService');\n    WARNING_TYPES = $injector.get('WARNING_TYPES');\n    oof = $injector.get('OutcomeObjectFactory');\n    agof = $injector.get('AnswerGroupObjectFactory');\n\n    currentState = 'First State';\n    goodDefaultOutcome = oof.createFromBackendDict({\n      dest: 'Second State',\n      feedback: {\n        html: '',\n        audio_translations: {}\n      },\n      labelled_as_correct: false,\n      param_changes: [],\n      refresher_exploration_id: null,\n      missing_prerequisite_skill_id: null\n    });\n\n    customizationArguments = {\n      language: {\n        value: ''\n      },\n      placeholder: {\n        value: ''\n      },\n      preCode: {\n        value: ''\n      },\n      postCode: {\n        value: ''\n      }\n    };\n\n    goodAnswerGroups = [agof.createNew([], goodDefaultOutcome, false, null)];\n  }));\n\n  it('should be able to perform basic validation', function() {\n    var warnings = validatorService.getAllWarnings(\n      currentState, customizationArguments, goodAnswerGroups,\n      goodDefaultOutcome);\n    expect(warnings).toEqual([]);\n  });\n\n  it('should catch non-string value for programming language', function() {\n    customizationArguments.language.value = 1;\n    var warnings = validatorService.getAllWarnings(\n      currentState, customizationArguments, [], null);\n    expect(warnings).toEqual([{\n      type: WARNING_TYPES.ERROR,\n      message: 'Programming language name must be a string.'\n    }]);\n  });\n\n  it('should catch non-string value for placeholder text', function() {\n    customizationArguments.placeholder.value = 1;\n    var warnings = validatorService.getAllWarnings(\n      currentState, customizationArguments, [], null);\n    expect(warnings).toEqual([{\n      type: WARNING_TYPES.ERROR,\n      message: 'Placeholder text must be a string.'\n    }]);\n  });\n\n  it('should catch non-string value for preCode text', function() {\n    customizationArguments.preCode.value = 1;\n    var warnings = validatorService.getAllWarnings(\n      currentState, customizationArguments, [], null);\n    expect(warnings).toEqual([{\n      type: WARNING_TYPES.ERROR,\n      message: 'The pre-code text must be a string.'\n    }]);\n  });\n\n  it('should catch non-string value for postCode text', function() {\n    customizationArguments.postCode.value = 1;\n    var warnings = validatorService.getAllWarnings(\n      currentState, customizationArguments, [], null);\n    expect(warnings).toEqual([{\n      type: WARNING_TYPES.ERROR,\n      message: 'The post-code text must be a string.'\n    }]);\n  });\n});\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl-validation.service.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Validator service for the interaction.\n */\n\nrequire('interactions/base-interaction-validation.service.ts');\n\nangular.module('oppia').factory('CodeReplValidationService', [\n  'baseInteractionValidationService', 'WARNING_TYPES',\n  function(baseInteractionValidationService, WARNING_TYPES) {\n    return {\n      getCustomizationArgsWarnings: function(customizationArgs) {\n        var warningsList = [];\n        baseInteractionValidationService.requireCustomizationArguments(\n          customizationArgs, [\n            'language',\n            'placeholder',\n            'preCode',\n            'postCode']);\n\n        var language = customizationArgs.language.value;\n        if (!angular.isString(language)) {\n          warningsList.push({\n            type: WARNING_TYPES.ERROR,\n            message: 'Programming language name must be a string.'\n          });\n        }\n\n        var placeholder = customizationArgs.placeholder.value;\n        if (!angular.isString(placeholder)) {\n          warningsList.push({\n            type: WARNING_TYPES.ERROR,\n            message: 'Placeholder text must be a string.'\n          });\n        }\n\n        var preCode = customizationArgs.preCode.value;\n        if (!angular.isString(preCode)) {\n          warningsList.push({\n            type: WARNING_TYPES.ERROR,\n            message: 'The pre-code text must be a string.'\n          });\n        }\n\n        var postCode = customizationArgs.postCode.value;\n        if (!angular.isString(postCode)) {\n          warningsList.push({\n            type: WARNING_TYPES.ERROR,\n            message: 'The post-code text must be a string.'\n          });\n        }\n        return warningsList;\n      },\n      getAllWarnings: function(stateName, customizationArgs, answerGroups,\n          defaultOutcome) {\n        return this.getCustomizationArgsWarnings(customizationArgs).concat(\n          baseInteractionValidationService.getAllOutcomeWarnings(\n            answerGroups, defaultOutcome, stateName));\n      }\n    };\n  }]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/code-repl.spec.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the CodeRepl interaction.\n */\n\nimport { CodeNormalizerService } from 'services/CodeNormalizerService.ts';\n\ndescribe('CodeRepl interaction', function() {\n  describe('CodeRepl tests', function() {\n    var $httpBackend, $templateCache;\n    var elt, scope;\n\n    beforeEach(angular.mock.module('directiveTemplates'));\n    beforeEach(\n      angular.mock.module('oppia', GLOBALS.TRANSLATOR_PROVIDER_FOR_TESTS));\n    beforeEach(angular.mock.module('oppia', function($provide) {\n      $provide.value('CodeNormalizerService', new CodeNormalizerService());\n    }));\n\n    beforeEach(angular.mock.inject(function(\n        $compile, $rootScope, _$templateCache_) {\n      $templateCache = _$templateCache_;\n      var templatesHtml = $templateCache.get(\n        '/extensions/interactions/CodeRepl/directives/' +\n        'code-repl-interaction.directive.html');\n      $compile(templatesHtml)($rootScope);\n      $rootScope.$digest();\n    }));\n\n    beforeEach(angular.mock.inject(function(\n        $compile, _$httpBackend_, $rootScope) {\n      $httpBackend = _$httpBackend_;\n\n      var TAG_NAME = 'oppia-interactive-code-repl';\n      scope = $rootScope.$new();\n      elt = angular.element('<' + TAG_NAME + '></' + TAG_NAME + '>');\n      $compile(elt)(scope);\n      scope.$digest();\n    }));\n\n    afterEach(function() {\n      scope.$apply();\n      $httpBackend.verifyNoOutstandingExpectation();\n      $httpBackend.verifyNoOutstandingRequest();\n    });\n\n    it('loads the code template', function() {\n      expect(elt.html()).toContain('code-repl-input-box');\n      expect(elt.html()).toContain('$ctrl.runCode($ctrl.code)');\n    });\n  });\n});\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl interaction.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('domain/utilities/UrlInterpolationService.ts');\nrequire('interactions/CodeRepl/directives/code-repl-rules.service.ts');\nrequire(\n  'pages/exploration-player-page/services/current-interaction.service.ts');\nrequire('services/HtmlEscaperService.ts');\nrequire('services/contextual/WindowDimensionsService.ts');\n\nangular.module('oppia').directive('oppiaInteractiveCodeRepl', [\n  'CodeReplRulesService', 'HtmlEscaperService', 'UrlInterpolationService',\n  'EVENT_NEW_CARD_AVAILABLE',\n  function(\n      CodeReplRulesService, HtmlEscaperService, UrlInterpolationService,\n      EVENT_NEW_CARD_AVAILABLE) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        getLastAnswer: '&lastAnswer',\n      },\n      templateUrl: UrlInterpolationService.getExtensionResourceUrl(\n        '/interactions/CodeRepl/directives/' +\n        'code-repl-interaction.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$scope', '$attrs', 'WindowDimensionsService',\n        'CurrentInteractionService',\n        function(\n            $scope, $attrs, WindowDimensionsService,\n            CurrentInteractionService) {\n          var ctrl = this;\n          ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);\n\n          $scope.$on(EVENT_NEW_CARD_AVAILABLE, function() {\n            ctrl.interactionIsActive = false;\n          });\n          ctrl.language = HtmlEscaperService.escapedJsonToObj(\n            $attrs.languageWithValue);\n          ctrl.placeholder = HtmlEscaperService.escapedJsonToObj(\n            $attrs.placeholderWithValue);\n          ctrl.preCode = HtmlEscaperService.escapedJsonToObj(\n            $attrs.preCodeWithValue);\n          ctrl.postCode = HtmlEscaperService.escapedJsonToObj(\n            $attrs.postCodeWithValue);\n\n          // Make sure ctrl.preCode ends with a newline:\n          if (ctrl.preCode.trim().length === 0) {\n            ctrl.preCode = '';\n          } else if (ctrl.preCode.slice(-1) !== '\\n') {\n            ctrl.preCode += '\\n';\n          }\n\n          // Make sure ctrl.placeholder ends with a newline.\n          if (ctrl.placeholder.slice(-1) !== '\\n') {\n            ctrl.placeholder += '\\n';\n          }\n\n          ctrl.hasLoaded = false;\n\n          // Keep the code string given by the user and the stdout from the\n          // evaluation until sending them back to the server.\n          if (ctrl.interactionIsActive) {\n            ctrl.code = (\n              ctrl.preCode + ctrl.placeholder + ctrl.postCode);\n            ctrl.output = '';\n          } else {\n            ctrl.code = ctrl.getLastAnswer().code;\n            ctrl.output = ctrl.getLastAnswer().output;\n          }\n\n          ctrl.initCodeEditor = function(editor) {\n            editor.setValue(ctrl.code);\n            // Options for the ui-codemirror display.\n            editor.setOption('lineNumbers', true);\n            editor.setOption('indentWithTabs', true);\n            editor.setOption('indentUnit', 4);\n            editor.setOption('mode', 'python');\n            editor.setOption('extraKeys', {\n              Tab: function(cm) {\n                var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');\n                cm.replaceSelection(spaces);\n                // Move the cursor to the end of the selection.\n                var endSelectionPos = cm.getDoc().getCursor('head');\n                cm.getDoc().setCursor(endSelectionPos);\n              }\n            });\n            editor.setOption('theme', 'preview default');\n\n            // NOTE: this is necessary to avoid the textarea being greyed-out.\n            setTimeout(function() {\n              editor.refresh();\n              initMarkers(editor);\n            }, 200);\n\n            editor.on('change', function() {\n              ctrl.code = editor.getValue();\n            });\n\n            // Without this, the editor does not show up correctly on small\n            // screens when the user switches to the supplemental interaction.\n            $scope.$on('showInteraction', function() {\n              setTimeout(function() {\n                editor.refresh();\n                initMarkers(editor);\n              }, 200);\n            });\n\n            ctrl.hasLoaded = true;\n          };\n\n          // Configure Skulpt.\n          Sk.configure({\n            output: function(out) {\n              // This output function is called continuously throughout the\n              // runtime of the script.\n              ctrl.output += out;\n            },\n            read: function(name) {\n              // This function is called when a builtin module is imported\n              if (Sk.builtinFiles.files[name] === undefined) {\n                // If corresponding module is not present then,\n                // removal of this block also results in failure of import.\n                throw 'module ' + name + ' not found';\n              }\n              return Sk.builtinFiles.files[name];\n            },\n            timeoutMsg: function() {\n              ctrl.sendResponse('', 'timeout');\n            },\n            execLimit: 10000\n          });\n\n          ctrl.runAndSubmitCode = function(codeInput) {\n            ctrl.runCode(codeInput, function(evaluation, err) {\n              ctrl.sendResponse(evaluation, err);\n            });\n          };\n\n          var submitAnswer = function() {\n            ctrl.runAndSubmitCode(ctrl.code);\n          };\n\n          ctrl.runCode = function(codeInput, onFinishRunCallback) {\n            ctrl.code = codeInput;\n            ctrl.output = '';\n\n            // Evaluate the program asynchronously using Skulpt.\n            Sk.misceval.asyncToPromise(function() {\n              Sk.importMainWithBody('<stdin>', false, codeInput, true);\n            }).then(function() {\n              // Finished evaluating.\n              ctrl.evaluation = '';\n              ctrl.fullError = '';\n\n              if (onFinishRunCallback) {\n                onFinishRunCallback('', '');\n              }\n            }, function(err) {\n              if (!(err instanceof Sk.builtin.TimeLimitError)) {\n                ctrl.evaluation = '';\n                ctrl.fullError = String(err);\n\n                if (onFinishRunCallback) {\n                  onFinishRunCallback('', String(err));\n                }\n              }\n            });\n          };\n\n          var initMarkers = function(editor) {\n            var doc = editor.getDoc();\n\n            // The -1 here is because prepended code ends with a newline.\n            var preCodeNumLines = ctrl.preCode.split('\\n').length - 1;\n            var postCodeNumLines = ctrl.postCode.split('\\n').length;\n            var fullCodeNumLines = ctrl.code.split('\\n').length;\n            var userCodeNumLines = (\n              fullCodeNumLines - preCodeNumLines - postCodeNumLines);\n\n            // Mark pre- and post- code as uneditable, and give it some styling.\n            var markOptions = {\n              atomic: false,\n              readOnly: true,\n              inclusiveLeft: true,\n              inclusiveRight: true\n            };\n\n            if (ctrl.preCode.length !== 0) {\n              doc.markText(\n                {\n                  line: 0,\n                  ch: 0\n                },\n                {\n                  line: preCodeNumLines,\n                  ch: 0\n                },\n                angular.extend({}, markOptions, {\n                  inclusiveRight: false\n                }));\n\n              for (var i = 0; i < preCodeNumLines; i++) {\n                editor.addLineClass(i, 'text', 'code-repl-noneditable-line');\n              }\n            }\n\n            if (ctrl.postCode.length !== 0) {\n              doc.markText(\n                {\n                  line: preCodeNumLines + userCodeNumLines,\n                  ch: 0\n                },\n                {\n                  line: fullCodeNumLines,\n                  ch: 0\n                },\n                markOptions);\n\n              for (var i = 0; i < postCodeNumLines; i++) {\n                editor.addLineClass(preCodeNumLines + userCodeNumLines + i,\n                  'text', 'code-repl-noneditable-line');\n              }\n            }\n          };\n\n          ctrl.sendResponse = function(evaluation, err) {\n            CurrentInteractionService.onSubmit({\n              // Replace tabs with 2 spaces.\n              // TODO(sll): Change the default Python indentation to 4 spaces.\n              code: ctrl.code.replace(/\\t/g, '  ') || '',\n              output: ctrl.output,\n              evaluation: ctrl.evaluation,\n              error: (err || '')\n            }, CodeReplRulesService);\n\n            // Without this, the error message displayed in the user-facing\n            // console will sometimes not update.\n            $scope.$apply();\n          };\n\n          CurrentInteractionService.registerCurrentInteraction(\n            submitAnswer, null);\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('domain/utilities/UrlInterpolationService.ts');\nrequire('services/HtmlEscaperService.ts');\nrequire('services/stateful/FocusManagerService.ts');\n\nangular.module('oppia').directive('oppiaResponseCodeRepl', [\n  'HtmlEscaperService', 'UrlInterpolationService',\n  function(HtmlEscaperService, UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      templateUrl: UrlInterpolationService.getExtensionResourceUrl(\n        '/interactions/CodeRepl/directives/' +\n        'code-repl-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: [\n        '$attrs', 'FocusManagerService',\n        function($attrs, FocusManagerService) {\n          var ctrl = this;\n          ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n\n          if (ctrl.answer.error) {\n            ctrl.errorFocusLabel = FocusManagerService.generateFocusLabel();\n            FocusManagerService.setFocus(ctrl.errorFocusLabel);\n          }\n        }\n      ]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for the CodeRepl short response.\n *\n * IMPORTANT NOTE: The naming convention for customization args that are passed\n * into the directive is: the name of the parameter, followed by 'With',\n * followed by the name of the arg.\n */\n\nrequire('filters/string-utility-filters/truncate-at-first-line.filter.ts');\n\nrequire('domain/utilities/UrlInterpolationService.ts');\nrequire('services/HtmlEscaperService.ts');\n\nangular.module('oppia').directive('oppiaShortResponseCodeRepl', [\n  'HtmlEscaperService', 'UrlInterpolationService',\n  function(HtmlEscaperService, UrlInterpolationService) {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {},\n      templateUrl: UrlInterpolationService.getExtensionResourceUrl(\n        '/interactions/CodeRepl/directives/' +\n        'code-repl-short-response.directive.html'),\n      controllerAs: '$ctrl',\n      controller: ['$attrs', function($attrs) {\n        var ctrl = this;\n        ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);\n      }]\n    };\n  }\n]);\n"
    },
    {
      "filename": "extensions/interactions/Continue/Continue.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Requires for Continue interaction.\n */\n\nrequire('interactions/Continue/directives/continue-rules.service.ts');\nrequire('interactions/Continue/directives/continue-validation.service.ts');\nrequire('interactions/Continue/directives/' +\n  'oppia-interactive-continue.directive.ts');\nrequire('interactions/Continue/directives/' +\n  'oppia-response-continue.directive.ts');\nrequire('interactions/Continue/directives/' +\n  'oppia-short-response-continue.directive.ts');\n"
    },
    {
      "filename": "extensions/interactions/Continue/directives/continue-interaction.directive.html",
      "content": "<md-button ng-if=\"$ctrl.isInEditorMode\" class=\"oppia-learner-confirm-button\">\n  <[$ctrl.buttonText]>\n  <i class=\"fas fa-arrow-right\" style=\"font-size: 19px; padding-top: 1.5px;\"></i>\n</md-button>\n"
    }
  ],
  "questions": [
    "@YashJipkate, Can you please assign services and domain directories of this issue?",
    "Hello @DubeySandeep \r\nCan you assign me to the **domain** directory, as my starter issue.?",
    "Hello @DubeySandeep, I would like to work on one of the directories that have not been assigned yet, either Domains or Services,, as my first issue. Can you please assign me?",
    "@DubeySandeep  This is my first time contributing to a project so I am not familiar with the GitHub etiquette. I have a few questions that are very beginner level, I am afraid. For example, I was looking at /oppia/core/domain as the directory to work on the renaming. But now I see these are all Python files, not .ts files as described above. Am I in the wrong directory?  I can imagine this is not the right place to ask such questions so please let me know if I need to raise this somewhere else.",
    "@Jethet, Your question is specific to this issue so I think you are in the right place. In general,[ Gitter](https://gitter.im/oppia/oppia-chat) is a better place for asking questions/help.\r\n\r\n >  Am I in the wrong directory?\r\n\r\nYou should look into [oppia/core/templates/dev/head/domain](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain). Thanks for raising this question I've updated the issue description so that other contributors don't face a similar issue.",
    "Thanks, @DubeySandeep , I never would have found that! To be certain I do not mess up, one example: under /domain/classifier I will change the name of the file \r\nAnswerClassificationResultObjectFactory.ts to\r\nanswer-classification-result-object-factory.FUNCTIONALITY.ts\r\nBut what is the functionality? I see 'ObjectFactory' as part of many file names but it is not a functionality as stated in the naming convention.",
    "Hello @DubeySandeep, I have aligned the first 12 folders in the folder oppia/core/templates/dev/head/ with the file naming convention. It might be a good idea for me to make a pull request so that you can check if these changes are correct, to prevent structural mistakes when I continue working on this issue.\r\nIf you agree, then could you explain how to make a preliminary pull request for you to check?\r\n\r\nAlso, what is your preference in general for making pull requests? There are about 26 folders with files in /domain. Making one pull request for all of this may not be such a good idea. It is a huge amount of changes."
  ],
  "golden_answers": [
    "Hi @sauram, I think you haven't signed the CLA yet, would you mind following the instructions provided in the [wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up) first?",
    "Hi @sauram, I think you haven't signed the CLA yet, would you mind following the instructions provided in the [wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up) first?",
    "Hi @Jethet, I've assigned you to `/domain` part of this issue, you can go ahead and start working on it.",
    "@Jethet, Your question is specific to this issue so I think you are in the right place. In general,[ Gitter](https://gitter.im/oppia/oppia-chat) is a better place for asking questions/help.\r\n\r\n >  Am I in the wrong directory?\r\n\r\nYou should look into [oppia/core/templates/dev/head/domain](https://github.com/oppia/oppia/tree/develop/core/templates/dev/head/domain). Thanks for raising this question I've updated the issue description so that other contributors don't face a similar issue.",
    "Thanks, @DubeySandeep , I never would have found that! To be certain I do not mess up, one example: under /domain/classifier I will change the name of the file \r\nAnswerClassificationResultObjectFactory.ts to\r\nanswer-classification-result-object-factory.FUNCTIONALITY.ts\r\nBut what is the functionality? I see 'ObjectFactory' as part of many file names but it is not a functionality as stated in the naming convention.",
    "> Making one pull request for all of this may not be such a good idea. It is a huge amount of changes.\r\n\r\n@Jethet You can create multiple PRs if you like, I'm fine with either as It's more of a mechanical change. (I would prefer to have multiple PRs for the `/domain` part.)\r\n\r\nWhatever you do make sure to add an explanation in the PR thread.",
    "> Making one pull request for all of this may not be such a good idea. It is a huge amount of changes.\r\n\r\n@Jethet You can create multiple PRs if you like, I'm fine with either as It's more of a mechanical change. (I would prefer to have multiple PRs for the `/domain` part.)\r\n\r\nWhatever you do make sure to add an explanation in the PR thread."
  ],
  "questions_generated": [
    "What naming convention should be applied to directive files in the Oppia repository?",
    "How should HTML files that serve as templates for directives be named according to the new convention?",
    "What are the key components of the Oppia repository that require the new naming convention to be applied?",
    "How should service files be named under the new Oppia naming convention?",
    "What is the purpose of specifying a naming convention for constants in the Oppia repository?",
    "How should spec files be named according to the new convention in the Oppia repository?",
    "What changes are required for the 'base_components/' directory in relation to the new naming convention?",
    "Why is it important to ignore certain file suffixes when checking for RTE component validity?",
    "What rationale is given for using kebab-case in the new naming convention for multi-word functionality names?"
  ],
  "golden_answers_generated": [
    "Directive files in the Oppia repository should follow the naming convention where the file name ends with '.directive.ts'. The filename is divided into three parts: the functionality name, the type of functionality, and the file extension. For example, if a directive is named 'stateResponses', the file should be named 'state-responses.directive.ts'.",
    "HTML files that are served by directive files and appear in the 'templateUrl' of the directive must have their names ending with '.directive.html'. For example, if a directive's template is called 'progress nav', the file would be named 'progress-nav.directive.html'.",
    "The key components of the Oppia repository that require the new naming convention include the directories: 'services/', 'extensions/', 'domain/', 'expressions/', 'directives/', and 'base_components/'. These directories should have their files renamed according to the specified naming patterns.",
    "Service files in the Oppia repository should have their names ending with '.service.ts'. The filename is divided into three parts: the functionality name, the type of functionality, and the file extension. For example, if a service is named 'ExplorationDataService', the file should be named 'exploration-data.service.ts'.",
    "The purpose of specifying a naming convention for constants is to ensure that all constants of a page are contained within a single file, named 'name-of-the-page.constants.ts'. This organization helps in maintaining consistency and makes it easier to locate and update constants. Any new constant should be added to this file, which should then be required in the files that use the constant.",
    "Spec files should have a filename divided into four parts: the functionality name, the type of functionality, the word 'spec', and the file extension. The different parts of the filename are joined by periods, and the first part should use kebab-case if it contains multiple words.",
    "The 'base_components/' directory requires that all files within it adopt the new naming convention, which involves renaming files according to their type, such as '.directive.ts', '.controller.ts', '.service.ts', etc., and following the kebab-case format for multi-word functionality names.",
    "It is important to ignore certain file suffixes, such as '.pyc' and '.DS_Store', when checking for RTE component validity because these files are not relevant to the functionality and can contain automatically generated or system-specific content that should not affect component validity checks.",
    "The rationale for using kebab-case in the new naming convention for multi-word functionality names is to ensure consistency and readability. Kebab-case makes it easier to distinguish between different parts of a filename and adheres to common JavaScript and TypeScript file naming practices."
  ]
}