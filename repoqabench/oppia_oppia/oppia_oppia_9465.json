{
  "repo_name": "oppia_oppia",
  "issue_id": "9465",
  "issue_description": "# [Community Dashboard] Add spacing above the 'Things to Do' header in sidebar.\n\n<!--\r\n  - Thanks for taking the time to propose a new feature for the Oppia project.\r\n  - Before filing a new issue, please do a quick search to check that it hasn't\r\n  - already been filed on the [issue tracker](https://github.com/oppia/oppia/issues)._\r\n  -->\r\nThere's not enough spacing above the 'Things to Do' header. See below.\r\n<img width=\"929\" alt=\"Screen Shot 2020-06-08 at 3 37 15 PM\" src=\"https://user-images.githubusercontent.com/9004726/84087426-edeed280-a99e-11ea-8ae1-9c1cfe6472e1.png\">\r\n\r\nYou can find instructions for populating data in the dashboard here which is needed to enable review tabs. \r\n\r\nNote: For a guide on how to access Oppia's webpages, see [this](https://github.com/oppia/oppia/wiki/How-to-access-Oppia-webpages).",
  "issue_comments": [
    {
      "id": 640988842,
      "user": "anishbadri",
      "body": "@sagangwee Can I take this one?"
    },
    {
      "id": 641746805,
      "user": "100sarthak100",
      "body": "Can I take it?"
    },
    {
      "id": 641766923,
      "user": "DubeySandeep",
      "body": "@anishbadri, Thanks for showing your interest in this issue! :) It looks like a good issue to start with, I'm going to assign you to the issue. Thanks! :) [/cc @aks681]\r\n\r\nHi @100sarthak100, It looks like you haven't signed the CLA yet, would you mind following the [getting started instructions wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up)? Also, sorry I've assigned this issue to @anishbadri, you can pick any other good first issue from this list: https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#finding-something-to-do (Let me know if you need any help finding a good first issue, I'll be more than happy to help you out! :))"
    },
    {
      "id": 643982706,
      "user": "divyanshutewari17",
      "body": "Can I work in this issue?"
    },
    {
      "id": 647072637,
      "user": "anishbadri",
      "body": "@sagangwee how can I enable reviews tab? I am able to access the Community Dashboard page but have difficulty in enabling the review, so I can view this issue in the UI"
    },
    {
      "id": 655018945,
      "user": "sagangwee",
      "body": "@anishbadri Hey so sorry for the late response! I must've missed the notification. Are you still working on this issue? You can find instructions for populating data in the dashboard [here](https://docs.google.com/document/d/1JYX4nvTcblaVVYAlTi7rApE0lWSBx0v_ZCCr_8WW4Wc/edit?usp=sharing). Thanks!"
    },
    {
      "id": 703070128,
      "user": "Arya-Abhishek",
      "body": "Hello, Can I work on this I have signed the CLA and contributors form and I want to take this"
    },
    {
      "id": 703140745,
      "user": "Nik-09",
      "body": "Hello community, I want to start my open source journey by contributing to this issue. Since I am complete beginner,  working on this will enhance my confidence very much. I have signed CLA for contribution in oppia/oppia.     Thanking You\r\n"
    },
    {
      "id": 703847770,
      "user": "sagangwee",
      "body": "@Aryan-Abhishek Yes, go for it! I've assigned you this issue. Thanks.\r\n\r\n@Nik-09 I'm assigning Aryan-Abhishek first for now–thanks!"
    },
    {
      "id": 704026504,
      "user": "Nik-09",
      "body": "Alright!\r\nThank you."
    },
    {
      "id": 740679998,
      "user": "ChitvanRamani22",
      "body": "Hi! This is my first issue can and I am a complete beginner to open source. Can I take this issue it will help me to boost my confidence.\r\n\r\n I have signed CLA for contribution and also filled up the survey form.\r\n"
    },
    {
      "id": 741072797,
      "user": "Diacron",
      "body": "Hi. Can I request to work on this or is it taken?"
    },
    {
      "id": 744232345,
      "user": "RaviKumar7870",
      "body": "@sagangwee Can I work on this issue?\r\n"
    },
    {
      "id": 745533066,
      "user": "sagangwee",
      "body": "@RaviKumar7870 I have assigned you the issue!"
    },
    {
      "id": 745932911,
      "user": "HimandriSharma",
      "body": "Hello, @sagangwee I've filled CLA and the survey form. I'm a begineer and found this issue. Can I work on it?"
    },
    {
      "id": 754803502,
      "user": "ryuk156",
      "body": "@sagangwee can I work on it?"
    },
    {
      "id": 758889694,
      "user": "sagangwee",
      "body": "@RaviKumar7870 Any updates on this?"
    },
    {
      "id": 767890152,
      "user": "sagangwee",
      "body": "Issue was fixed in https://github.com/oppia/oppia/pull/11442: \r\n<img width=\"1669\" alt=\"Screen Shot 2021-01-26 at 6 07 55 PM\" src=\"https://user-images.githubusercontent.com/9004726/105918171-7dfe8c80-6001-11eb-9a58-d99d0590a04f.png\">\r\n"
    }
  ],
  "text_context": "# [Community Dashboard] Add spacing above the 'Things to Do' header in sidebar.\n\n<!--\r\n  - Thanks for taking the time to propose a new feature for the Oppia project.\r\n  - Before filing a new issue, please do a quick search to check that it hasn't\r\n  - already been filed on the [issue tracker](https://github.com/oppia/oppia/issues)._\r\n  -->\r\nThere's not enough spacing above the 'Things to Do' header. See below.\r\n<img width=\"929\" alt=\"Screen Shot 2020-06-08 at 3 37 15 PM\" src=\"https://user-images.githubusercontent.com/9004726/84087426-edeed280-a99e-11ea-8ae1-9c1cfe6472e1.png\">\r\n\r\nYou can find instructions for populating data in the dashboard here which is needed to enable review tabs. \r\n\r\nNote: For a guide on how to access Oppia's webpages, see [this](https://github.com/oppia/oppia/wiki/How-to-access-Oppia-webpages).\n\n@sagangwee Can I take this one?\n\nCan I take it?\n\n@anishbadri, Thanks for showing your interest in this issue! :) It looks like a good issue to start with, I'm going to assign you to the issue. Thanks! :) [/cc @aks681]\r\n\r\nHi @100sarthak100, It looks like you haven't signed the CLA yet, would you mind following the [getting started instructions wiki page](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up)? Also, sorry I've assigned this issue to @anishbadri, you can pick any other good first issue from this list: https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#finding-something-to-do (Let me know if you need any help finding a good first issue, I'll be more than happy to help you out! :))\n\nCan I work in this issue?\n\n@sagangwee how can I enable reviews tab? I am able to access the Community Dashboard page but have difficulty in enabling the review, so I can view this issue in the UI\n\n@anishbadri Hey so sorry for the late response! I must've missed the notification. Are you still working on this issue? You can find instructions for populating data in the dashboard [here](https://docs.google.com/document/d/1JYX4nvTcblaVVYAlTi7rApE0lWSBx0v_ZCCr_8WW4Wc/edit?usp=sharing). Thanks!\n\nHello, Can I work on this I have signed the CLA and contributors form and I want to take this\n\nHello community, I want to start my open source journey by contributing to this issue. Since I am complete beginner,  working on this will enhance my confidence very much. I have signed CLA for contribution in oppia/oppia.     Thanking You\r\n\n\n@Aryan-Abhishek Yes, go for it! I've assigned you this issue. Thanks.\r\n\r\n@Nik-09 I'm assigning Aryan-Abhishek first for now–thanks!\n\nAlright!\r\nThank you.\n\nHi! This is my first issue can and I am a complete beginner to open source. Can I take this issue it will help me to boost my confidence.\r\n\r\n I have signed CLA for contribution and also filled up the survey form.\r\n\n\nHi. Can I request to work on this or is it taken?\n\n@sagangwee Can I work on this issue?\r\n\n\n@RaviKumar7870 I have assigned you the issue!\n\nHello, @sagangwee I've filled CLA and the survey form. I'm a begineer and found this issue. Can I work on it?\n\n@sagangwee can I work on it?\n\n@RaviKumar7870 Any updates on this?\n\nIssue was fixed in https://github.com/oppia/oppia/pull/11442: \r\n<img width=\"1669\" alt=\"Screen Shot 2021-01-26 at 6 07 55 PM\" src=\"https://user-images.githubusercontent.com/9004726/105918171-7dfe8c80-6001-11eb-9a58-d99d0590a04f.png\">\r\n",
  "pr_link": "https://github.com/oppia/oppia/pull/11442",
  "code_context": [
    {
      "filename": "core/controllers/contributor_dashboard.py",
      "content": "# Copyright 2019 The Oppia Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Controllers for the contributor dashboard page.\"\"\"\n\nfrom __future__ import absolute_import  # pylint: disable=import-only-modules\nfrom __future__ import unicode_literals  # pylint: disable=import-only-modules\n\nfrom constants import constants\nfrom core.controllers import acl_decorators\nfrom core.controllers import base\nfrom core.domain import config_domain\nfrom core.domain import exp_fetchers\nfrom core.domain import opportunity_services\nfrom core.domain import suggestion_services\nfrom core.domain import topic_fetchers\nfrom core.domain import user_services\nimport feconf\nimport utils\n\n\nclass ContributorDashboardPage(base.BaseHandler):\n    \"\"\"Page showing the contributor dashboard.\"\"\"\n\n    @acl_decorators.open_access\n    def get(self):\n        # TODO(#7402): Serve this page statically through app.yaml once\n        # the CONTRIBUTOR_DASHBOARD_ENABLED flag is removed.\n        if not config_domain.CONTRIBUTOR_DASHBOARD_IS_ENABLED.value:\n            raise self.PageNotFoundException\n        self.render_template('contributor-dashboard-page.mainpage.html')\n\n\nclass ContributionOpportunitiesHandler(base.BaseHandler):\n    \"\"\"Provides data for opportunities available in different categories.\"\"\"\n\n    GET_HANDLER_ERROR_RETURN_TYPE = feconf.HANDLER_TYPE_JSON\n\n    @acl_decorators.open_access\n    def get(self, opportunity_type):\n        \"\"\"Handles GET requests.\"\"\"\n        if not config_domain.CONTRIBUTOR_DASHBOARD_IS_ENABLED.value:\n            raise self.PageNotFoundException\n        search_cursor = self.request.get('cursor', None)\n\n        if opportunity_type == constants.OPPORTUNITY_TYPE_SKILL:\n            opportunities, next_cursor, more = (\n                self._get_skill_opportunities_with_corresponding_topic_name(\n                    search_cursor))\n\n        elif opportunity_type == constants.OPPORTUNITY_TYPE_TRANSLATION:\n            language_code = self.request.get('language_code')\n            if language_code is None or not (\n                    utils.is_supported_audio_language_code(language_code)):\n                raise self.InvalidInputException\n            opportunities, next_cursor, more = (\n                self._get_translation_opportunity_dicts(\n                    language_code, search_cursor))\n\n        elif opportunity_type == constants.OPPORTUNITY_TYPE_VOICEOVER:\n            language_code = self.request.get('language_code')\n            if language_code is None or not (\n                    utils.is_supported_audio_language_code(language_code)):\n                raise self.InvalidInputException\n            opportunities, next_cursor, more = (\n                self._get_voiceover_opportunity_dicts(\n                    language_code, search_cursor))\n\n        else:\n            raise self.PageNotFoundException\n\n        self.values = {\n            'opportunities': opportunities,\n            'next_cursor': next_cursor,\n            'more': more\n        }\n\n        self.render_json(self.values)\n\n    def _get_skill_opportunities_with_corresponding_topic_name(self, cursor):\n        \"\"\"Returns a list of skill opportunities available for questions with\n        topic information.\n\n        Args:\n            cursor: str or None. If provided, the list of returned entities\n                starts from this datastore cursor. Otherwise, the returned\n                entities start from the beginning of the full list of entities.\n\n        Returns:\n            3-tuple(opportunities, cursor, more). where:\n                opportunities: list(dict). A list of dicts of skill opportunity\n                    details with additional corresponding topic_name.\n                cursor: str or None. A query cursor pointing to the next\n                    batch of results. If there are no more results, this might\n                    be None.\n                more: bool. If True, there are (probably) more results after\n                    this batch. If False, there are no further results after\n                    this batch.\n        \"\"\"\n        topics_with_skills = topic_fetchers.get_all_topics_with_skills()\n        skill_opportunities, cursor, more = (\n            opportunity_services.get_skill_opportunities(cursor))\n        id_to_skill_opportunity_dict = {\n            opp.id: opp.to_dict() for opp in skill_opportunities}\n        opportunities = []\n        for topic in topics_with_skills:\n            for skill_id in topic.get_all_skill_ids():\n                if len(opportunities) == constants.OPPORTUNITIES_PAGE_SIZE:\n                    break\n                if skill_id in id_to_skill_opportunity_dict:\n                    skill_opportunity_dict = (\n                        id_to_skill_opportunity_dict[skill_id])\n                    skill_opportunity_dict['topic_name'] = topic.name\n                    opportunities.append(skill_opportunity_dict)\n        return opportunities, cursor, more\n\n    def _get_translation_opportunity_dicts(self, language_code, search_cursor):\n        \"\"\"Returns a list of translation opportunity dicts.\n\n        Args:\n            language_code: str. The language for which translation opportunities\n                should be fetched.\n            search_cursor: str or None. If provided, the list of returned\n                entities starts from this datastore cursor. Otherwise, the\n                returned entities start from the beginning of the full list of\n                entities.\n\n        Returns:\n            3-tuple(opportunities, cursor, more). where:\n            opportunities: list(dict). A list of ExplorationOpportunitySummary\n                dicts.\n            cursor: str or None. A query cursor pointing to the next batch of\n                results. If there are no more results, this might be None.\n            more: bool. If True, there are (probably) more results after this\n                batch. If False, there are no further results after this batch.\n        \"\"\"\n        opportunities, next_cursor, more = (\n            opportunity_services.get_translation_opportunities(\n                language_code, search_cursor))\n        opportunity_dicts = [opp.to_dict() for opp in opportunities]\n        return opportunity_dicts, next_cursor, more\n\n    def _get_voiceover_opportunity_dicts(self, language_code, search_cursor):\n        \"\"\"Returns a list of voiceover opportunity dicts.\n\n        Args:\n            language_code: str. The language for which voiceover opportunities\n                should be fetched.\n            search_cursor: str or None. If provided, the list of returned\n                entities starts from this datastore cursor. Otherwise, the\n                returned entities start from the beginning of the full list of\n                entities.\n\n        Returns:\n            3-tuple(opportunities, cursor, more). where:\n            opportunities: list(dict). A list of ExplorationOpportunitySummary\n                dicts.\n            cursor: str or None. A query cursor pointing to the next batch of\n                results. If there are no more results, this might be None.\n            more: bool. If True, there are (probably) more results after this\n                batch. If False, there are no further results after this batch.\n        \"\"\"\n        opportunities, next_cursor, more = (\n            opportunity_services.get_voiceover_opportunities(\n                language_code, search_cursor))\n        opportunity_dicts = [opp.to_dict() for opp in opportunities]\n        return opportunity_dicts, next_cursor, more\n\n\nclass TranslatableTextHandler(base.BaseHandler):\n    \"\"\"Provides lessons content which can be translated in a given language.\"\"\"\n\n    GET_HANDLER_ERROR_RETURN_TYPE = feconf.HANDLER_TYPE_JSON\n\n    @acl_decorators.open_access\n    def get(self):\n        \"\"\"Handles GET requests.\"\"\"\n        language_code = self.request.get('language_code')\n        exp_id = self.request.get('exp_id')\n\n        if not utils.is_supported_audio_language_code(language_code):\n            raise self.InvalidInputException('Invalid language_code: %s' % (\n                language_code))\n\n        if not opportunity_services.is_exploration_available_for_contribution(\n                exp_id):\n            raise self.InvalidInputException('Invalid exp_id: %s' % exp_id)\n\n        exp = exp_fetchers.get_exploration_by_id(exp_id)\n        state_names_to_content_id_mapping = exp.get_translatable_text(\n            language_code)\n        state_names_to_not_in_review_content_id_mapping = (\n            self._get_state_names_to_not_in_review_content_id_mapping(\n                state_names_to_content_id_mapping,\n                suggestion_services\n                .get_translation_suggestions_in_review_by_exploration(exp_id)\n            )\n        )\n\n        self.values = {\n            'state_names_to_content_id_mapping': (\n                state_names_to_not_in_review_content_id_mapping),\n            'version': exp.version\n        }\n\n        self.render_json(self.values)\n\n    def _get_state_names_to_not_in_review_content_id_mapping(\n            self, state_names_to_content_id_mapping, suggestions):\n        \"\"\"Returns a copy of the supplied state_names_to_content_id_mapping\n        minus any contents found in suggestions.\n\n        Args:\n            state_names_to_content_id_mapping: dict(str, dict(str, str)). A dict\n                where state_name is the key and a dict with content_id as the\n                key and html content as value.\n            suggestions: list(Suggestion). A list of translation suggestions.\n\n        Returns:\n            dict(str, dict(str, str)). A dict where state_name is the key and a\n            dict with content_id as the key and html content as value.\n        \"\"\"\n        final_mapping = {}\n        for state_name in state_names_to_content_id_mapping:\n            content_id_to_text = dict(\n                state_names_to_content_id_mapping[state_name])\n            for content_id in content_id_to_text.keys():\n                if self._content_in_review(state_name, content_id, suggestions):\n                    del content_id_to_text[content_id]\n            if content_id_to_text:\n                final_mapping[state_name] = content_id_to_text\n        return final_mapping\n\n    def _content_in_review(self, state_name, content_id, suggestions):\n        \"\"\"Returns whether a suggestion exists in suggestions with a change dict\n        matching the supplied state_name and content_id.\n\n        Args:\n            state_name: str. Exploration state name.\n            content_id: str. Content ID.\n            suggestions: list(Suggestion). A list of translation suggestions.\n\n        Returns:\n            bool. True if suggestion exists in suggestions with a change dict\n            matching state_name and content_id, False otherwise.\n        \"\"\"\n        return any(\n            s.change.state_name == state_name and\n            s.change.content_id == content_id for s in suggestions)\n\n\nclass UserContributionRightsDataHandler(base.BaseHandler):\n    \"\"\"Provides review rights of the logged in user in translation, voiceover\n    and question category on the contributor dashboard.\n    \"\"\"\n\n    GET_HANDLER_ERROR_RETURN_TYPE = feconf.HANDLER_TYPE_JSON\n\n    @acl_decorators.open_access\n    def get(self):\n        \"\"\"Handles GET requests.\"\"\"\n        contribution_rights = None\n        if self.username:\n            contribution_rights = user_services.get_user_contribution_rights(\n                self.user_id)\n        self.render_json({\n            'can_review_translation_for_language_codes': (\n                contribution_rights.can_review_translation_for_language_codes\n                if contribution_rights else []),\n            'can_review_voiceover_for_language_codes': (\n                contribution_rights.can_review_voiceover_for_language_codes\n                if contribution_rights else []),\n            'can_review_questions': (\n                contribution_rights.can_review_questions\n                if contribution_rights else False),\n            'can_suggest_questions': (\n                config_domain.CONTRIBUTOR_CAN_SUGGEST_QUESTIONS.value)\n        })\n\n\nclass FeaturedTranslationLanguagesHandler(base.BaseHandler):\n    \"\"\"Provides featured translation languages set in admin config.\"\"\"\n\n    GET_HANDLER_ERROR_RETURN_TYPE = feconf.HANDLER_TYPE_JSON\n\n    @acl_decorators.open_access\n    def get(self):\n        \"\"\"Handles GET requests.\"\"\"\n        self.render_json({\n            'featured_translation_languages':\n                config_domain.FEATURED_TRANSLATION_LANGUAGES.value\n        })\n"
    },
    {
      "filename": "core/controllers/contributor_dashboard_test.py",
      "content": "# Copyright 2019 The Oppia Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for the contributor dashboard controllers.\"\"\"\n\nfrom __future__ import absolute_import  # pylint: disable=import-only-modules\nfrom __future__ import unicode_literals  # pylint: disable=import-only-modules\n\nfrom constants import constants\nfrom core.domain import config_services\nfrom core.domain import exp_domain\nfrom core.domain import exp_services\nfrom core.domain import story_domain\nfrom core.domain import story_services\nfrom core.domain import suggestion_services\nfrom core.domain import topic_domain\nfrom core.domain import topic_services\nfrom core.domain import user_services\nfrom core.platform import models\nfrom core.tests import test_utils\nimport feconf\nimport python_utils\n\n(suggestion_models,) = models.Registry.import_models([models.NAMES.suggestion])\n\n\nclass ContributorDashboardPageTest(test_utils.GenericTestBase):\n    \"\"\"Test for showing contributor dashboard pages.\"\"\"\n\n    def test_page_with_disabled_contributor_dashboard_leads_to_404(self):\n        config_services.set_property(\n            'admin', 'contributor_dashboard_is_enabled', False)\n        self.get_html_response(\n            feconf.CONTRIBUTOR_DASHBOARD_URL, expected_status_int=404)\n\n    def test_page_with_enabled_contributor_dashboard_loads_correctly(self):\n        config_services.set_property(\n            'admin', 'contributor_dashboard_is_enabled', True)\n        response = self.get_html_response(feconf.CONTRIBUTOR_DASHBOARD_URL)\n        response.mustcontain(\n            '<contributor-dashboard-page></contributor-dashboard-page>')\n\n\nclass ContributionOpportunitiesHandlerTest(test_utils.GenericTestBase):\n    \"\"\"Unit test for the ContributionOpportunitiesHandler.\"\"\"\n\n    def setUp(self):\n        super(ContributionOpportunitiesHandlerTest, self).setUp()\n        self.signup(self.ADMIN_EMAIL, self.ADMIN_USERNAME)\n        self.signup(self.OWNER_EMAIL, self.OWNER_USERNAME)\n\n        self.admin_id = self.get_user_id_from_email(self.ADMIN_EMAIL)\n        self.owner_id = self.get_user_id_from_email(self.OWNER_EMAIL)\n\n        self.set_admins([self.ADMIN_USERNAME])\n\n        explorations = [self.save_new_valid_exploration(\n            '%s' % i,\n            self.owner_id,\n            title='title %d' % i,\n            category='category%d' % i,\n            end_state_name='End State',\n            correctness_feedback_enabled=True\n        ) for i in python_utils.RANGE(2)]\n\n        for exp in explorations:\n            self.publish_exploration(self.owner_id, exp.id)\n\n        topic = topic_domain.Topic.create_default_topic(\n            '0', 'topic', 'abbrev', 'description')\n        topic.thumbnail_filename = 'thumbnail.svg'\n        topic.thumbnail_bg_color = '#C6DCDA'\n        topic.subtopics = [\n            topic_domain.Subtopic(\n                1, 'Title', ['skill_id_3'], 'image.svg',\n                constants.ALLOWED_THUMBNAIL_BG_COLORS['subtopic'][0],\n                'dummy-subtopic-three')]\n        topic.next_subtopic_id = 2\n        topic_services.save_new_topic(self.owner_id, topic)\n        topic_services.publish_topic('0', self.admin_id)\n\n        self.skill_id_0 = 'skill_id_0'\n        self.skill_id_1 = 'skill_id_1'\n        self.skill_ids = [self.skill_id_0, self.skill_id_1]\n        for skill_id in self.skill_ids:\n            self.save_new_skill(\n                skill_id, self.admin_id, description='skill_description')\n            topic_services.add_uncategorized_skill(\n                self.admin_id, '0', skill_id)\n\n        self.expected_skill_opportunity_dict_0 = {\n            'id': self.skill_id_0,\n            'skill_description': 'skill_description',\n            'question_count': 0,\n            'topic_name': 'topic'\n        }\n        self.expected_skill_opportunity_dict_1 = {\n            'id': self.skill_id_1,\n            'skill_description': 'skill_description',\n            'question_count': 0,\n            'topic_name': 'topic'\n        }\n\n        stories = [story_domain.Story.create_default_story(\n            '%s' % i,\n            'title %d' % i,\n            'description %d' % i,\n            '0',\n            'title-%s' % chr(97 + i)\n        ) for i in python_utils.RANGE(2)]\n\n        for index, story in enumerate(stories):\n            story.language_code = 'en'\n            story_services.save_new_story(self.owner_id, story)\n            topic_services.add_canonical_story(\n                self.owner_id, topic.id, story.id)\n            topic_services.publish_story(\n                topic.id, story.id, self.admin_id)\n            story_services.update_story(\n                self.owner_id, story.id, [story_domain.StoryChange({\n                    'cmd': 'add_story_node',\n                    'node_id': 'node_1',\n                    'title': 'Node1',\n                }), story_domain.StoryChange({\n                    'cmd': 'update_story_node_property',\n                    'property_name': 'exploration_id',\n                    'node_id': 'node_1',\n                    'old_value': None,\n                    'new_value': explorations[index].id\n                })], 'Changes.')\n\n        # The content_count is 4 for the expected dicts below since a valid\n        # exploration with EndExploration is created above, so the content in\n        # the last state is also included in the count. This content includes:\n        # 2 content, 1 TextInput interaction customization argument\n        # (placeholder), and 1 outcome.\n        self.expected_opportunity_dict_1 = {\n            'id': '0',\n            'topic_name': 'topic',\n            'story_title': 'title 0',\n            'chapter_title': 'Node1',\n            'content_count': 2,\n            'translation_counts': {}\n        }\n\n        self.expected_opportunity_dict_2 = {\n            'id': '1',\n            'topic_name': 'topic',\n            'story_title': 'title 1',\n            'chapter_title': 'Node1',\n            'content_count': 2,\n            'translation_counts': {}\n        }\n        config_services.set_property(\n            'admin', 'contributor_dashboard_is_enabled', True)\n\n    def test_handler_with_disabled_dashboard_flag_raise_404(self):\n        config_services.set_property(\n            'admin', 'contributor_dashboard_is_enabled', True)\n\n        self.get_json(\n            '%s/skill' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n            params={}, expected_status_int=200)\n\n        config_services.set_property(\n            'admin', 'contributor_dashboard_is_enabled', False)\n\n        self.get_json(\n            '%s/skill' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n            params={}, expected_status_int=404)\n\n    def test_get_skill_opportunity_data(self):\n        response = self.get_json(\n            '%s/skill' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n            params={})\n\n        self.assertEqual(\n            response['opportunities'], [\n                self.expected_skill_opportunity_dict_0,\n                self.expected_skill_opportunity_dict_1])\n\n        self.assertFalse(response['more'])\n        self.assertTrue(\n            isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_translation_opportunity_data(self):\n        response = self.get_json(\n            '%s/translation' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n            params={'language_code': 'hi'})\n\n        self.assertEqual(\n            response['opportunities'], [\n                self.expected_opportunity_dict_1,\n                self.expected_opportunity_dict_2])\n\n        self.assertFalse(response['more'])\n        self.assertTrue(\n            isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_voiceover_opportunity_data(self):\n        response = self.get_json(\n            '%s/voiceover' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n            params={'language_code': 'en'})\n\n        self.assertEqual(len(response['opportunities']), 2)\n        self.assertEqual(\n            response['opportunities'], [\n                self.expected_opportunity_dict_1,\n                self.expected_opportunity_dict_2])\n\n        self.assertFalse(response['more'])\n        self.assertTrue(\n            isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_skill_opportunity_data_pagination(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            response = self.get_json(\n                '%s/skill' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={})\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                response['opportunities'],\n                [self.expected_skill_opportunity_dict_0])\n            self.assertTrue(response['more'])\n            self.assertTrue(\n                isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n            next_cursor = response['next_cursor']\n            next_response = self.get_json(\n                '%s/skill' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'cursor': next_cursor})\n\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                next_response['opportunities'],\n                [self.expected_skill_opportunity_dict_1])\n            self.assertFalse(next_response['more'])\n            self.assertTrue(\n                isinstance(\n                    next_response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_translation_opportunity_data_pagination(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            response = self.get_json(\n                '%s/translation' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'hi'})\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                response['opportunities'], [self.expected_opportunity_dict_1])\n            self.assertTrue(response['more'])\n            self.assertTrue(\n                isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n            next_cursor = response['next_cursor']\n            next_response = self.get_json(\n                '%s/translation' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'hi', 'cursor': next_cursor})\n\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                next_response['opportunities'],\n                [self.expected_opportunity_dict_2])\n            self.assertFalse(next_response['more'])\n            self.assertTrue(\n                isinstance(\n                    next_response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_voiceover_opportunity_data_pagination(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            response = self.get_json(\n                '%s/voiceover' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'en'})\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                response['opportunities'], [self.expected_opportunity_dict_1])\n            self.assertTrue(response['more'])\n            self.assertTrue(\n                isinstance(response['next_cursor'], python_utils.BASESTRING))\n\n            next_cursor = response['next_cursor']\n            next_response = self.get_json(\n                '%s/voiceover' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'en', 'cursor': next_cursor})\n\n            self.assertEqual(len(response['opportunities']), 1)\n            self.assertEqual(\n                next_response['opportunities'],\n                [self.expected_opportunity_dict_2])\n            self.assertFalse(next_response['more'])\n            self.assertTrue(isinstance(\n                next_response['next_cursor'], python_utils.BASESTRING))\n\n    def test_get_translation_opportunity_with_invalid_language_code(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            self.get_json(\n                '%s/translation' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'invalid_lang_code'},\n                expected_status_int=400)\n\n    def test_get_translation_opportunity_without_language_code(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            self.get_json(\n                '%s/translation' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                expected_status_int=400)\n\n    def test_get_voiceover_opportunity_with_invalid_language_code(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            self.get_json(\n                '%s/voiceover' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                params={'language_code': 'invalid_lang_code'},\n                expected_status_int=400)\n\n    def test_get_voiceover_opportunity_without_language_code(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            self.get_json(\n                '%s/voiceover' % feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL,\n                expected_status_int=400)\n\n    def test_get_opportunity_for_invalid_opportunity_type(self):\n        with self.swap(constants, 'OPPORTUNITIES_PAGE_SIZE', 1):\n            self.get_json(\n                '%s/invalid_opportunity_type' % (\n                    feconf.CONTRIBUTOR_OPPORTUNITIES_DATA_URL),\n                expected_status_int=404)\n\n\nclass TranslatableTextHandlerTest(test_utils.GenericTestBase):\n    \"\"\"Unit test for the ContributionOpportunitiesHandler.\"\"\"\n\n    def setUp(self):\n        super(TranslatableTextHandlerTest, self).setUp()\n        self.signup(self.ADMIN_EMAIL, self.ADMIN_USERNAME)\n        self.signup(self.OWNER_EMAIL, self.OWNER_USERNAME)\n\n        self.admin_id = self.get_user_id_from_email(self.ADMIN_EMAIL)\n        self.owner_id = self.get_user_id_from_email(self.OWNER_EMAIL)\n\n        self.set_admins([self.ADMIN_USERNAME])\n\n        explorations = [self.save_new_valid_exploration(\n            '%s' % i,\n            self.owner_id,\n            title='title %d' % i,\n            category='category%d' % i,\n            end_state_name='End State',\n            correctness_feedback_enabled=True\n        ) for i in python_utils.RANGE(2)]\n\n        for exp in explorations:\n            self.publish_exploration(self.owner_id, exp.id)\n\n        topic = topic_domain.Topic.create_default_topic(\n            '0', 'topic', 'abbrev', 'description')\n        topic.thumbnail_filename = 'thumbnail.svg'\n        topic.thumbnail_bg_color = '#C6DCDA'\n        topic.subtopics = [\n            topic_domain.Subtopic(\n                1, 'Title', ['skill_id_1'], 'image.svg',\n                constants.ALLOWED_THUMBNAIL_BG_COLORS['subtopic'][0],\n                'dummy-subtopic-three')]\n        topic.next_subtopic_id = 2\n        topic_services.save_new_topic(self.owner_id, topic)\n        topic_services.publish_topic(topic.id, self.admin_id)\n\n        stories = [story_domain.Story.create_default_story(\n            '%s' % i,\n            'title %d' % i,\n            'description %d' % i,\n            '0',\n            'title-%s' % chr(97 + i)\n        ) for i in python_utils.RANGE(2)]\n\n        for index, story in enumerate(stories):\n            story.language_code = 'en'\n            story_services.save_new_story(self.owner_id, story)\n            topic_services.add_canonical_story(\n                self.owner_id, topic.id, story.id)\n            topic_services.publish_story(topic.id, story.id, self.admin_id)\n            story_services.update_story(\n                self.owner_id, story.id, [story_domain.StoryChange({\n                    'cmd': 'add_story_node',\n                    'node_id': 'node_1',\n                    'title': 'Node1',\n                }), story_domain.StoryChange({\n                    'cmd': 'update_story_node_property',\n                    'property_name': 'exploration_id',\n                    'node_id': 'node_1',\n                    'old_value': None,\n                    'new_value': explorations[index].id\n                })], 'Changes.')\n\n    def test_handler_with_invalid_language_code_raise_exception(self):\n        self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'hi',\n            'exp_id': '0'\n        }, expected_status_int=200)\n\n        self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'invalid_lang_code',\n            'exp_id': '0'\n        }, expected_status_int=400)\n\n    def test_handler_with_exp_id_not_for_contribution_raise_exception(self):\n        self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'hi',\n            'exp_id': '0'\n        }, expected_status_int=200)\n\n        new_exp = exp_domain.Exploration.create_default_exploration(\n            'not_for_contribution')\n        exp_services.save_new_exploration(self.owner_id, new_exp)\n\n        self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'hi',\n            'exp_id': 'not_for_contribution'\n        }, expected_status_int=400)\n\n    def test_handler_returns_correct_data(self):\n        exp_services.update_exploration(\n            self.owner_id, '0', [exp_domain.ExplorationChange({\n                'cmd': exp_domain.CMD_EDIT_STATE_PROPERTY,\n                'property_name': exp_domain.STATE_PROPERTY_CONTENT,\n                'state_name': 'Introduction',\n                'new_value': {\n                    'content_id': 'content',\n                    'html': '<p>A content to translate.</p>'\n                }\n            })], 'Changes content.')\n\n        output = self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'hi',\n            'exp_id': '0'\n        })\n\n        expected_output = {\n            'version': 2,\n            'state_names_to_content_id_mapping': {\n                'Introduction': {\n                    'content': '<p>A content to translate.</p>'\n                },\n                'End State': {\n                    'content': ''\n                }\n            }\n        }\n\n        self.assertEqual(output, expected_output)\n\n    def test_handler_does_not_return_in_review_content(self):\n        change_dict = {\n            'cmd': 'add_translation',\n            'state_name': 'Introduction',\n            'content_id': 'content',\n            'language_code': 'hi',\n            'content_html': '',\n            'translation_html': '<p>Translation for content.</p>'\n        }\n        suggestion_services.create_suggestion(\n            feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,\n            feconf.ENTITY_TYPE_EXPLORATION,\n            '0', 1, self.owner_id, change_dict, 'description')\n\n        output = self.get_json('/gettranslatabletexthandler', params={\n            'language_code': 'hi',\n            'exp_id': '0'\n        })\n\n        expected_output = {\n            'version': 1,\n            'state_names_to_content_id_mapping': {\n                'End State': {\n                    'content': ''\n                }\n            }\n        }\n        self.assertEqual(output, expected_output)\n\n\nclass UserContributionRightsDataHandlerTest(test_utils.GenericTestBase):\n    \"\"\"Test for the UserContributionRightsDataHandler.\"\"\"\n\n    def test_guest_user_check_contribution_rights(self):\n        response = self.get_json('/usercontributionrightsdatahandler')\n        config_services.set_property(\n            'admin', 'contributor_can_suggest_questions', False)\n\n        self.assertEqual(\n            response, {\n                'can_review_translation_for_language_codes': [],\n                'can_review_voiceover_for_language_codes': [],\n                'can_review_questions': False,\n                'can_suggest_questions': False\n            })\n\n    def test_user_check_contribution_rights(self):\n        user_email = 'user@example.com'\n        self.signup(user_email, 'user')\n        user_id = self.get_user_id_from_email(user_email)\n        self.login(user_email)\n\n        config_services.set_property(\n            'admin', 'contributor_can_suggest_questions', False)\n\n        response = self.get_json('/usercontributionrightsdatahandler')\n        self.assertEqual(\n            response, {\n                'can_review_translation_for_language_codes': [],\n                'can_review_voiceover_for_language_codes': [],\n                'can_review_questions': False,\n                'can_suggest_questions': False\n            })\n\n        user_services.allow_user_to_review_question(user_id)\n\n        response = self.get_json('/usercontributionrightsdatahandler')\n        self.assertEqual(\n            response, {\n                'can_review_translation_for_language_codes': [],\n                'can_review_voiceover_for_language_codes': [],\n                'can_review_questions': True,\n                'can_suggest_questions': False\n            })\n\n    def test_can_suggest_questions_flag_in_response(self):\n        user_email = 'user@example.com'\n        self.signup(user_email, 'user')\n        self.login(user_email)\n        config_services.set_property(\n            'admin', 'contributor_can_suggest_questions', False)\n\n        response = self.get_json('/usercontributionrightsdatahandler')\n        self.assertEqual(\n            response, {\n                'can_review_translation_for_language_codes': [],\n                'can_review_voiceover_for_language_codes': [],\n                'can_review_questions': False,\n                'can_suggest_questions': False\n            })\n\n        config_services.set_property(\n            'admin', 'contributor_can_suggest_questions', True)\n\n        response = self.get_json('/usercontributionrightsdatahandler')\n        self.assertEqual(\n            response, {\n                'can_review_translation_for_language_codes': [],\n                'can_review_voiceover_for_language_codes': [],\n                'can_review_questions': False,\n                'can_suggest_questions': True\n            })\n\n\nclass FeaturedTranslationLanguagesHandlerTest(test_utils.GenericTestBase):\n    \"\"\"Test for the FeaturedTranslationLanguagesHandler.\"\"\"\n\n    def test_get_featured_translation_languages(self):\n        response = self.get_json('/retrivefeaturedtranslationlanguages')\n        self.assertEqual(\n            response,\n            {'featured_translation_languages': []}\n        )\n\n        new_value = [\n            {'language_code': 'en', 'explanation': 'Partnership with ABC'}\n        ]\n        config_services.set_property(\n            'admin',\n            'featured_translation_languages',\n            new_value\n        )\n\n        response = self.get_json('/retrivefeaturedtranslationlanguages')\n        self.assertEqual(\n            response,\n            {'featured_translation_languages': new_value}\n        )\n"
    },
    {
      "filename": "core/domain/config_domain.py",
      "content": "# coding: utf-8\n#\n# Copyright 2014 The Oppia Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Domain objects for configuration properties.\"\"\"\n\nfrom __future__ import absolute_import  # pylint: disable=import-only-modules\nfrom __future__ import unicode_literals  # pylint: disable=import-only-modules\n\nfrom constants import constants\nfrom core.domain import caching_services\nfrom core.domain import change_domain\nfrom core.platform import models\nimport feconf\nimport python_utils\nimport schema_utils\n\n(config_models, suggestion_models,) = models.Registry.import_models(\n    [models.NAMES.config, models.NAMES.suggestion])\n\nCMD_CHANGE_PROPERTY_VALUE = 'change_property_value'\n\nLIST_OF_FEATURED_TRANSLATION_LANGUAGES_DICTS_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_LIST,\n    'items': {\n        'type': schema_utils.SCHEMA_TYPE_DICT,\n        'properties': [{\n            'name': 'language_code',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE,\n                'validators': [{\n                    'id': 'is_supported_audio_language_code',\n                }]\n            },\n        }, {\n            'name': 'explanation',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE\n            }\n        }]\n    }\n}\n\nSET_OF_STRINGS_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_LIST,\n    'items': {\n        'type': schema_utils.SCHEMA_TYPE_UNICODE,\n    },\n    'validators': [{\n        'id': 'is_uniquified',\n    }],\n}\n\nSET_OF_CLASSROOM_DICTS_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_LIST,\n    'items': {\n        'type': schema_utils.SCHEMA_TYPE_DICT,\n        'properties': [{\n            'name': 'name',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE\n            }\n        }, {\n            'name': 'url_fragment',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE,\n                'validators': [{\n                    'id': 'is_url_fragment',\n                }, {\n                    'id': 'has_length_at_most',\n                    'max_value': constants.MAX_CHARS_IN_CLASSROOM_URL_FRAGMENT\n                }]\n            },\n        }, {\n            'name': 'course_details',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE,\n                'ui_config': {\n                    'rows': 8,\n                }\n            }\n        }, {\n            'name': 'topic_list_intro',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE,\n                'ui_config': {\n                    'rows': 5,\n                }\n            }\n        }, {\n            'name': 'topic_ids',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_LIST,\n                'items': {\n                    'type': schema_utils.SCHEMA_TYPE_UNICODE,\n                },\n                'validators': [{\n                    'id': 'is_uniquified',\n                }]\n            }\n        }]\n    }\n}\n\nVMID_SHARED_SECRET_KEY_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_LIST,\n    'items': {\n        'type': schema_utils.SCHEMA_TYPE_DICT,\n        'properties': [{\n            'name': 'vm_id',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE\n            }\n        }, {\n            'name': 'shared_secret_key',\n            'schema': {\n                'type': schema_utils.SCHEMA_TYPE_UNICODE\n            }\n        }]\n    }\n}\n\nBOOL_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_BOOL\n}\n\nUNICODE_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_UNICODE\n}\n\nFLOAT_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_FLOAT\n}\n\nINT_SCHEMA = {\n    'type': schema_utils.SCHEMA_TYPE_INT\n}\n\n\nclass ConfigPropertyChange(change_domain.BaseChange):\n    \"\"\"Domain object for changes made to a config property object.\n\n    The allowed commands, together with the attributes:\n        - 'change_property_value' (with new_value)\n    \"\"\"\n\n    ALLOWED_COMMANDS = [{\n        'name': CMD_CHANGE_PROPERTY_VALUE,\n        'required_attribute_names': ['new_value'],\n        'optional_attribute_names': [],\n        'user_id_attribute_names': []\n    }]\n\n\nclass ConfigProperty(python_utils.OBJECT):\n    \"\"\"A property with a name and a default value.\n\n    NOTE TO DEVELOPERS: These config properties are deprecated. Do not reuse\n    these names:\n    - about_page_youtube_video_id.\n    - admin_email_address.\n    - admin_ids.\n    - admin_usernames.\n    - allow_yaml_file_upload.\n    - banned_usernames.\n    - banner_alt_text.\n    - before_end_body_tag_hook.\n    - before_end_head_tag_hook.\n    - carousel_slides_config.\n    - collection_editor_whitelist.\n    - contact_email_address.\n    - contribute_gallery_page_announcement.\n    - default_twitter_share_message_editor.\n    - disabled_explorations.\n    - editor_page_announcement.\n    - editor_prerequisites_agreement.\n    - embedded_google_group_url.\n    - full_site_url.\n    - moderator_ids.\n    - moderator_request_forum_url.\n    - moderator_usernames.\n    - publicize_exploration_email_html_body.\n    - sharing_options.\n    - sharing_options_twitter_text.\n    - sidebar_menu_additional_links.\n    - site_forum_url.\n    - social_media_buttons.\n    - splash_page_exploration_id.\n    - splash_page_exploration_version.\n    - splash_page_youtube_video_id.\n    - ssl_challenge_responses.\n    - whitelisted_email_senders.\n    \"\"\"\n\n    def __init__(self, name, schema, description, default_value):\n        if Registry.get_config_property(name):\n            raise Exception('Property with name %s already exists' % name)\n\n        self._name = name\n        self._schema = schema\n        self._description = description\n        self._default_value = self.normalize(default_value)\n\n        Registry.init_config_property(self.name, self)\n\n    @property\n    def name(self):\n        \"\"\"Returns the name of the configuration property.\"\"\"\n\n        return self._name\n\n    @property\n    def schema(self):\n        \"\"\"Returns the schema of the configuration property.\"\"\"\n\n        return self._schema\n\n    @property\n    def description(self):\n        \"\"\"Returns the description of the configuration property.\"\"\"\n\n        return self._description\n\n    @property\n    def default_value(self):\n        \"\"\"Returns the default value of the configuration property.\"\"\"\n\n        return self._default_value\n\n    @property\n    def value(self):\n        \"\"\"Get the latest value from memcache, datastore, or use default.\"\"\"\n\n        memcached_items = caching_services.get_multi(\n            caching_services.CACHE_NAMESPACE_CONFIG, None, [self.name])\n        if self.name in memcached_items:\n            return memcached_items[self.name]\n\n        datastore_item = config_models.ConfigPropertyModel.get(\n            self.name, strict=False)\n        if datastore_item is not None:\n            caching_services.set_multi(\n                caching_services.CACHE_NAMESPACE_CONFIG, None,\n                {\n                    datastore_item.id: datastore_item.value\n                })\n            return datastore_item.value\n\n        return self.default_value\n\n    def set_value(self, committer_id, raw_value):\n        \"\"\"Sets the value of the property. In general, this should not be\n        called directly -- use config_services.set_property() instead.\n        \"\"\"\n        value = self.normalize(raw_value)\n\n        # Set value in datastore.\n        model_instance = config_models.ConfigPropertyModel.get(\n            self.name, strict=False)\n        if model_instance is None:\n            model_instance = config_models.ConfigPropertyModel(\n                id=self.name)\n        model_instance.value = value\n        model_instance.commit(\n            committer_id, [{\n                'cmd': CMD_CHANGE_PROPERTY_VALUE,\n                'new_value': value\n            }])\n\n        # Set value in memcache.\n        caching_services.set_multi(\n            caching_services.CACHE_NAMESPACE_CONFIG, None,\n            {\n                model_instance.id: model_instance.value\n            })\n\n    def normalize(self, value):\n        \"\"\"Validates the given object using the schema and normalizes if\n        necessary.\n\n        Args:\n            value: str. The value of the configuration property.\n\n        Returns:\n            instance. The normalized object.\n        \"\"\"\n        email_validators = [{'id': 'does_not_contain_email'}]\n        return schema_utils.normalize_against_schema(\n            value, self._schema, global_validators=email_validators)\n\n\nclass Registry(python_utils.OBJECT):\n    \"\"\"Registry of all configuration properties.\"\"\"\n\n    # The keys of _config_registry are the property names, and the values are\n    # ConfigProperty instances.\n    _config_registry = {}\n\n    @classmethod\n    def init_config_property(cls, name, instance):\n        \"\"\"Initializes _config_registry with keys as the property names and\n        values as instances of the specified property.\n\n        Args:\n            name: str. The name of the configuration property.\n            instance: *. The instance of the configuration property.\n        \"\"\"\n        cls._config_registry[name] = instance\n\n    @classmethod\n    def get_config_property(cls, name):\n        \"\"\"Returns the instance of the specified name of the configuration\n        property.\n\n        Args:\n            name: str. The name of the configuration property.\n\n        Returns:\n            instance. The instance of the specified configuration property.\n        \"\"\"\n        return cls._config_registry.get(name)\n\n    @classmethod\n    def get_config_property_schemas(cls):\n        \"\"\"Return a dict of editable config property schemas.\n\n        The keys of the dict are config property names. The values are dicts\n        with the following keys: schema, description, value.\n        \"\"\"\n        schemas_dict = {}\n\n        for (property_name, instance) in cls._config_registry.items():\n            schemas_dict[property_name] = {\n                'schema': instance.schema,\n                'description': instance.description,\n                'value': instance.value\n            }\n\n        return schemas_dict\n\n    @classmethod\n    def get_all_config_property_names(cls):\n        \"\"\"Return a list of all the config property names.\n\n        Returns:\n            list. The list of all config property names.\n        \"\"\"\n        return list(cls._config_registry)\n\n\nPROMO_BAR_ENABLED = ConfigProperty(\n    'promo_bar_enabled', BOOL_SCHEMA,\n    'Whether the promo bar should be enabled for all users', False)\nPROMO_BAR_MESSAGE = ConfigProperty(\n    'promo_bar_message', UNICODE_SCHEMA,\n    'The message to show to all users if the promo bar is enabled', '')\n\nVMID_SHARED_SECRET_KEY_MAPPING = ConfigProperty(\n    'vmid_shared_secret_key_mapping', VMID_SHARED_SECRET_KEY_SCHEMA,\n    'VMID and shared secret key corresponding to that VM',\n    [{\n        'vm_id': feconf.DEFAULT_VM_ID,\n        'shared_secret_key': feconf.DEFAULT_VM_SHARED_SECRET\n    }])\n\nWHITELISTED_EXPLORATION_IDS_FOR_PLAYTHROUGHS = ConfigProperty(\n    'whitelisted_exploration_ids_for_playthroughs',\n    SET_OF_STRINGS_SCHEMA,\n    'The set of exploration IDs for recording playthrough issues', [\n        'umPkwp0L1M0-', 'MjZzEVOG47_1', '9trAQhj6uUC2', 'rfX8jNkPnA-1',\n        '0FBWxCE5egOw', '670bU6d9JGBh', 'aHikhPlxYgOH', '-tMgcP1i_4au',\n        'zW39GLG_BdN2', 'Xa3B_io-2WI5', '6Q6IyIDkjpYC', 'osw1m5Q3jK41'])\n\nCLASSROOM_PAGES_DATA = ConfigProperty(\n    'classroom_pages_data', SET_OF_CLASSROOM_DICTS_SCHEMA,\n    'The details for each classroom page.', [{\n        'name': 'math',\n        'url_fragment': 'math',\n        'topic_ids': [],\n        'course_details': '',\n        'topic_list_intro': ''\n    }]\n)\n\nRECORD_PLAYTHROUGH_PROBABILITY = ConfigProperty(\n    'record_playthrough_probability', FLOAT_SCHEMA,\n    'The probability of recording playthroughs', 0.2)\n\nIS_IMPROVEMENTS_TAB_ENABLED = ConfigProperty(\n    'is_improvements_tab_enabled', BOOL_SCHEMA,\n    'Exposes the Improvements Tab for creators in the exploration editor.',\n    False)\n\nALWAYS_ASK_LEARNERS_FOR_ANSWER_DETAILS = ConfigProperty(\n    'always_ask_learners_for_answer_details', BOOL_SCHEMA,\n    'Always ask learners for answer details. For testing -- do not use',\n    False)\n\nCLASSROOM_PAGE_IS_ACCESSIBLE = ConfigProperty(\n    'classroom_page_is_accessible', BOOL_SCHEMA,\n    'Make classroom page accessible.', False)\n\nCLASSROOM_PROMOS_ARE_ENABLED = ConfigProperty(\n    'classroom_promos_are_enabled', BOOL_SCHEMA,\n    'Show classroom promos.', False)\n\nFEATURED_TRANSLATION_LANGUAGES = ConfigProperty(\n    'featured_translation_languages',\n    LIST_OF_FEATURED_TRANSLATION_LANGUAGES_DICTS_SCHEMA,\n    'Featured Translation Languages', []\n)\n\nHIGH_BOUNCE_RATE_TASK_STATE_BOUNCE_RATE_CREATION_THRESHOLD = ConfigProperty(\n    'high_bounce_rate_task_state_bounce_rate_creation_threshold',\n    FLOAT_SCHEMA,\n    'The bounce-rate a state must exceed to create a new improvements task.',\n    0.20)\n\nHIGH_BOUNCE_RATE_TASK_STATE_BOUNCE_RATE_OBSOLETION_THRESHOLD = ConfigProperty(\n    'high_bounce_rate_task_state_bounce_rate_obsoletion_threshold',\n    FLOAT_SCHEMA,\n    'The bounce-rate a state must fall under to discard its improvement task.',\n    0.20)\n\nHIGH_BOUNCE_RATE_TASK_MINIMUM_EXPLORATION_STARTS = ConfigProperty(\n    'high_bounce_rate_task_minimum_exploration_starts',\n    INT_SCHEMA,\n    'The minimum number of times an exploration is started before it can '\n    'generate high bounce-rate improvements tasks.',\n    100)\n\nMAX_NUMBER_OF_SVGS_IN_MATH_SVGS_BATCH = ConfigProperty(\n    'max_number_of_svgs_in_math_svgs_batch',\n    INT_SCHEMA,\n    'The maximum number of Math SVGs that can be send in a batch of math rich '\n    'text svgs.',\n    25)\n\nMAX_NUMBER_OF_EXPLORATIONS_IN_MATH_SVGS_BATCH = ConfigProperty(\n    'max_number_of_explorations_in_math_svgs_batch',\n    INT_SCHEMA,\n    'The maximum number of explorations that can be send in a batch of math '\n    'rich text svgs.',\n    2)\n\nCONTRIBUTOR_DASHBOARD_IS_ENABLED = ConfigProperty(\n    'contributor_dashboard_is_enabled', BOOL_SCHEMA,\n    'Enable contributor dashboard page. The default value is true.', True)\n\nCONTRIBUTOR_CAN_SUGGEST_QUESTIONS = ConfigProperty(\n    'contributor_can_suggest_questions', BOOL_SCHEMA,\n    'Whether the contributor can suggest questions for skill opportunities.',\n    False)\n\nCONTRIBUTOR_DASHBOARD_REVIEWER_EMAILS_IS_ENABLED = ConfigProperty(\n    'contributor_dashboard_reviewer_emails_is_enabled', BOOL_SCHEMA,\n    (\n        'Enable sending Contributor Dashboard reviewers email notifications '\n        'about suggestions that need review. The default value is false.'\n    ), False)\n\nENABLE_ADMIN_NOTIFICATIONS_FOR_SUGGESTIONS_NEEDING_REVIEW = ConfigProperty(\n    'notify_admins_suggestions_waiting_too_long_is_enabled', BOOL_SCHEMA,\n    (\n        'Enable sending admins email notifications if there are Contributor '\n        'Dashboard suggestions that have been waiting for a review for more '\n        'than %s days. The default value is false.' % (\n            suggestion_models.SUGGESTION_REVIEW_WAIT_TIME_THRESHOLD_IN_DAYS)\n    ), False)\n\nENABLE_ADMIN_NOTIFICATIONS_FOR_REVIEWER_SHORTAGE = ConfigProperty(\n    'enable_admin_notifications_for_reviewer_shortage', BOOL_SCHEMA,\n    (\n        'Enable sending admins email notifications if Contributor Dashboard '\n        'reviewers are needed in specific suggestion types. The default value '\n        'is false.'\n    ), False)\n\nMAX_NUMBER_OF_SUGGESTIONS_PER_REVIEWER = ConfigProperty(\n    'max_number_of_suggestions_per_reviewer',\n    INT_SCHEMA,\n    'The maximum number of Contributor Dashboard suggestions per reviewer. If '\n    'the number of suggestions per reviewer surpasses this maximum, for any '\n    'given suggestion type on the dashboard, the admins are notified by email.',\n    5)\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributions-and-review/contributions-and-review.component.html",
      "content": "<div class=\"oppia-contributions-show-review\">\n  <div class=\"oppia-contributions-show-review-side-navbar-container\" >\n    <div class=\"oppia-contributions-side-navbar-part\" ng-if=\"$ctrl.reviewTabs.length > 0\">\n      <div class=\"oppia-contributions-navbar-items-list\" navbar-label=\"Things to do\">\n        <div class=\"oppia-contributions-navbar-item\" ng-repeat=\"tab in $ctrl.reviewTabs\">\n          <button class=\"oppia-contributions-navbar-button\"\n                  ng-click=\"$ctrl.switchToTab($ctrl.TAB_TYPE_REVIEWS, tab.suggestionType)\"\n                  ng-class=\"$ctrl.isActiveTab($ctrl.TAB_TYPE_REVIEWS, tab.suggestionType) ? 'oppia-contributions-active-navbar' : ''\"><[tab.text]>\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"oppia-contributions-side-navbar-part\" ng-if=\"$ctrl.userIsLoggedIn\">\n      <div class=\"oppia-contributions-navbar-items-list\" navbar-label=\"Contributions\">\n        <div class=\"oppia-contributions-navbar-item\" ng-repeat=\"tab in $ctrl.contributionTabs\" ng-if=\"tab.enabled\">\n          <button class=\"oppia-contributions-navbar-button\"\n                  ng-click=\"$ctrl.switchToTab($ctrl.TAB_TYPE_CONTRIBUTIONS, tab.suggestionType)\"\n                  ng-class=\"$ctrl.isActiveTab($ctrl.TAB_TYPE_CONTRIBUTIONS, tab.suggestionType) ? 'oppia-contributions-active-navbar' : ''\"><[tab.text]>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"oppia-contributions-show-review-container\">\n    <div class=\"oppia-login-required\" ng-if=\"!$ctrl.userDetailsLoading && !$ctrl.userIsLoggedIn\">\n      <login-required-message></login-required-message>\n    </div>\n    <div class=\"oppia-login-required\" ng-if=\"$ctrl.userDetailsLoading || $ctrl.userIsLoggedIn\">\n      <opportunities-list load-opportunities=\"$ctrl.loadContributions\"\n                          on-click-action-button=\"$ctrl.onClickViewSuggestion\"\n                          label-required=\"!$ctrl.activeReviewTab\">\n      </opportunities-list>\n    </div>\n  </div>\n</div>\n\n<style>\n  contributions-and-review .oppia-contributions-show-review {\n    display: flex;\n    justify-content: center;\n    margin: auto;\n    max-width: 1200px;\n    min-height: 70vh;\n    width: 80%;\n  }\n\n  contributions-and-review .oppia-contributions-show-review-side-navbar-container {\n    background-color: #009688;\n    display: flex;\n    flex-wrap: wrap;\n    width: 25%;\n  }\n\n  contributions-and-review .oppia-contributions-show-review-container {\n    background-color: white;\n    width: 75%;\n  }\n  contributions-and-review .oppia-contributions-show-review-container::-webkit-scrollbar {\n    width: 7px;\n  }\n  contributions-and-review .oppia-contributions-show-review-container::-webkit-scrollbar-track {\n    border-radius: 5px;\n    box-shadow: inset 0 0 3px grey;\n  }\n  contributions-and-review .oppia-contributions-show-review-container::-webkit-scrollbar-thumb {\n    background: grey;\n    border-radius: 5px;\n    transition: background 0.5s ease;\n  }\n  contributions-and-review .oppia-contributions-show-review-container::-webkit-scrollbar-thumb:hover {\n    background: black;\n  }\n\n  contributions-and-review .oppia-contributions-side-navbar-part {\n    height: 50%;\n    padding-top: 20%;\n    width: 100%;\n  }\n\n  contributions-and-review .oppia-contributions-navbar-items-list {\n    position: relative;\n  }\n\n  contributions-and-review .oppia-contributions-navbar-item {\n    display: flex;\n    flex-direction: column;\n  }\n\n  contributions-and-review .oppia-contributions-navbar-button {\n    background-color: unset;\n    border: unset;\n    border-bottom-right-radius: 10px;\n    border-top-right-radius: 10px;\n    color: white;\n    font-size: 16px;\n    font-weight: bold;\n    height: 28px;\n    margin-right: 20%;\n    padding-left: 20%;\n    text-align: left;\n    width: 80%;\n  }\n\n  contributions-and-review .oppia-contributions-active-navbar,\n  contributions-and-review .oppia-contributions-navbar-button:hover {\n    background-color: #0b6c63;\n  }\n\n  contributions-and-review .oppia-contributions-navbar-items-list::before {\n    border-bottom: 1px solid #fff;\n    bottom: 110%;\n    color: #fff;\n    content: attr(navbar-label);\n    font-size: 20px;\n    font-weight: bold;\n    margin-left: 10%;\n    position: absolute;\n    width: 90%;\n  }\n\n  contributions-and-review .oppia-login-required {\n    height: 100%;\n    width: 100%;\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributions-and-review/contributions-and-review.component.spec.ts",
      "content": "// Copyright 2020 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for contributionsAndReview.\n */\n\n// TODO(#7222): Remove the following block of unnnecessary imports once\n// the code corresponding to the spec is upgraded to Angular 8.\nimport { importAllAngularServices } from 'tests/unit-test-utils';\n// ^^^ This block is to be removed.\n\ndescribe('Contributions and review component', function() {\n  var ctrl = null;\n  var $httpBackend = null;\n  var $q = null;\n  var $scope = null;\n  var $uibModal = null;\n  var contextService = null;\n  var contributionAndReviewService = null;\n  var contributionOpportunitiesService = null;\n  var csrfTokenService = null;\n  var misconceptionObjectFactory = null;\n  var skillBackendApiService = null;\n  var skillObjectFactory = null;\n  var userService = null;\n\n  beforeEach(angular.mock.module('oppia'));\n\n  importAllAngularServices();\n\n  describe('when user is allowed to review questions', function() {\n    beforeEach(angular.mock.inject(function($injector, $componentController) {\n      $q = $injector.get('$q');\n      var $rootScope = $injector.get('$rootScope');\n      $uibModal = $injector.get('$uibModal');\n      contributionAndReviewService = $injector.get(\n        'ContributionAndReviewService');\n      userService = $injector.get('UserService');\n      contextService = $injector.get('ContextService');\n      skillBackendApiService = $injector.get('SkillBackendApiService');\n      contributionOpportunitiesService = $injector.get(\n        'ContributionOpportunitiesService');\n      spyOn(contextService, 'getExplorationId').and.returnValue('exp1');\n      misconceptionObjectFactory = $injector.get('MisconceptionObjectFactory');\n\n      spyOn(userService, 'getUserInfoAsync')\n        .and.returnValue($q.resolve({\n          isLoggedIn: () => true\n        }));\n      spyOn(userService, 'getUserContributionRightsDataAsync')\n        .and.returnValue($q.resolve({\n          can_review_translation_for_language_codes: [{}],\n          can_review_questions: true\n        }));\n      spyOn(\n        contributionAndReviewService,\n        'getUserCreatedTranslationSuggestionsAsync').and.returnValue(\n        Promise.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'translate_content',\n              change: {\n                content_html: 'Translation',\n                translation_html: 'Tradução'\n              },\n              status: 'review'\n            },\n            details: 'skill_1'\n          }\n        }));\n      spyOn(\n        contributionAndReviewService, 'getReviewableQuestionSuggestionsAsync')\n        .and.returnValue(Promise.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'translate_content',\n              change: {\n                skill_id: 'skill1',\n                question_dict: {\n                  id: '1',\n                  question_state_data: {\n                    content: {\n                      html: 'Question 1',\n                      content_id: 'content_1'\n                    },\n                    interaction: {\n                      answer_groups: [{\n                        outcome: {\n                          dest: 'outcome 1',\n                          feedback: {\n                            content_id: 'content_5',\n                            html: ''\n                          },\n                          labelled_as_correct: true,\n                          param_changes: [],\n                          refresher_exploration_id: null\n                        },\n                        rule_specs: [],\n                      }],\n                      confirmed_unclassified_answers: [],\n                      customization_args: {\n                        placeholder: {\n                          value: {\n                            content_id: 'ca_placeholder_0',\n                            unicode_str: ''\n                          }\n                        },\n                        rows: { value: 1 }\n                      },\n                      default_outcome: {\n                        dest: null,\n                        feedback: {\n                          html: 'Correct Answer',\n                          content_id: 'content_2'\n                        },\n                        param_changes: [],\n                        labelled_as_correct: true\n                      },\n                      hints: [{\n                        hint_content: {\n                          html: 'Hint 1',\n                          content_id: 'content_3'\n                        }\n                      }],\n                      solution: {\n                        correct_answer: 'This is the correct answer',\n                        answer_is_exclusive: false,\n                        explanation: {\n                          html: 'Solution explanation',\n                          content_id: 'content_4'\n                        }\n                      },\n                      id: 'TextInput'\n                    },\n                    param_changes: [],\n                    recorded_voiceovers: {\n                      voiceovers_mapping: {}\n                    },\n                    written_translations: {\n                      translations_mapping: {}\n                    },\n                  },\n                }\n              },\n              status: 'review'\n            },\n            details: {\n              skill_description: 'Skill description'\n            }\n          }\n        }));\n\n      $scope = $rootScope.$new();\n      ctrl = $componentController('contributionsAndReview', {\n        $scope: $scope,\n        ContextService: contextService,\n        MisconceptionObjectFactory: misconceptionObjectFactory\n      });\n      ctrl.$onInit();\n      $scope.$apply();\n      $scope.$apply();\n    }));\n\n    it('should initialize $scope properties after controller is' +\n      ' initialized', function() {\n      expect(ctrl.activeTabType).toBe('reviews');\n      expect(ctrl.activeSuggestionType).toBe('add_question');\n      expect(ctrl.userIsLoggedIn).toBe(true);\n      expect(ctrl.userDetailsLoading).toBe(false);\n      expect(ctrl.reviewTabs.length).toEqual(2);\n    });\n\n    describe('ctrl.loadContributions', () => {\n      it('should load contributions correctly', () => {\n        ctrl.loadContributions().then(({opportunitiesDicts, more}) => {\n          expect(Object.keys(ctrl.contributions)).toContain('suggestion_1');\n          expect(opportunitiesDicts).toEqual([{\n            id: 'suggestion_1',\n            heading: 'Question 1',\n            subheading: 'Skill description',\n            labelText: 'Awaiting review',\n            labelColor: '#eeeeee',\n            actionButtonTitle: 'Review'\n          }]);\n          expect(more).toEqual(false);\n        });\n      });\n\n      it('should return empty list if tab is not initialized', () => {\n        ctrl.activeTabType = null;\n        ctrl.loadContributions().then(({opportunitiesDicts, more}) => {\n          expect(ctrl.contributions).toEqual({});\n          expect(opportunitiesDicts).toEqual([]);\n          expect(more).toEqual(false);\n        });\n      });\n\n      it('should return empty list if suggestion type is not initialized',\n        () => {\n          ctrl.activeTabType = null;\n          ctrl.loadContributions().then(({opportunitiesDicts, more}) => {\n            expect(ctrl.contributions).toEqual({});\n            expect(opportunitiesDicts).toEqual([]);\n            expect(more).toEqual(false);\n          });\n        });\n    });\n\n    it('should open show translation suggestion modal when clicking on' +\n      ' suggestion', function() {\n      contributionOpportunitiesService\n        .reloadOpportunitiesEventEmitter.subscribe(() => {\n          ctrl.loadContributions().then(() => {\n            spyOn($uibModal, 'open').and.callThrough();\n            ctrl.onClickViewSuggestion('suggestion_1');\n\n            expect($uibModal.open).toHaveBeenCalled();\n          });\n        });\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'translate_content');\n      $scope.$apply();\n    });\n\n    it('should resolve suggestion when closing show suggestion modal',\n      function() {\n        contributionOpportunitiesService\n          .reloadOpportunitiesEventEmitter.subscribe(() => {\n            ctrl.loadContributions().then(() => {\n              spyOn($uibModal, 'open').and.returnValue({\n                result: $q.resolve({\n                  action: 'add',\n                  reviewMessage: 'Review message',\n                  skillDifficulty: 'Easy'\n                })\n              });\n              ctrl.onClickViewSuggestion('suggestion_1');\n              $scope.$apply();\n\n              expect($uibModal.open).toHaveBeenCalled();\n            });\n          });\n        ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'translate_content');\n        $scope.$apply();\n      });\n\n    it('should not resolve suggestion when dismissing show suggestion modal',\n      function() {\n        contributionOpportunitiesService\n          .reloadOpportunitiesEventEmitter.subscribe(() => {\n            ctrl.loadContributions().then(() => {\n              spyOn($uibModal, 'open').and.returnValue({\n                result: $q.reject()\n              });\n              ctrl.onClickViewSuggestion('suggestion_1');\n              $scope.$apply();\n\n              expect($uibModal.open).toHaveBeenCalled();\n            });\n          });\n        ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'translate_content');\n        $scope.$apply();\n      });\n  });\n\n  describe('for the suggestion related to deleted opportunity', function() {\n    beforeEach(angular.mock.inject(function($injector, $componentController) {\n      $httpBackend = $injector.get('$httpBackend');\n      $q = $injector.get('$q');\n      var $rootScope = $injector.get('$rootScope');\n      $uibModal = $injector.get('$uibModal');\n      contributionAndReviewService = $injector.get(\n        'ContributionAndReviewService');\n      contributionOpportunitiesService = $injector.get(\n        'ContributionOpportunitiesService');\n      csrfTokenService = $injector.get('CsrfTokenService');\n      userService = $injector.get('UserService');\n      contextService = $injector.get('ContextService');\n      skillBackendApiService = $injector.get('SkillBackendApiService');\n      skillObjectFactory = $injector.get('SkillObjectFactory');\n      spyOn(contextService, 'getExplorationId').and.returnValue('exp1');\n      misconceptionObjectFactory = $injector.get('MisconceptionObjectFactory');\n\n      spyOn(csrfTokenService, 'getTokenAsync').and.returnValue(\n        $q.resolve('sample-csrf-token'));\n\n      spyOn(userService, 'getUserInfoAsync')\n        .and.returnValue($q.resolve({\n          isLoggedIn: () => true\n        }));\n      spyOn(userService, 'getUserContributionRightsDataAsync')\n        .and.returnValue(\n          $q.resolve({\n            can_review_translation_for_language_codes: [],\n            can_review_questions: false\n          }));\n      spyOn(\n        contributionAndReviewService, 'getUserCreatedQuestionSuggestionsAsync')\n        .and.returnValue($q.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'add_question',\n              change: {\n                skill_id: 'skill1',\n                question_dict: {\n                  id: '1',\n                  question_state_data: {\n                    content: {\n                      html: 'Question 1',\n                      content_id: 'content_1'\n                    },\n                    interaction: {\n                      answer_groups: [{\n                        outcome: {\n                          dest: 'outcome 1',\n                          feedback: {\n                            content_id: 'content_5',\n                            html: ''\n                          },\n                          labelled_as_correct: true,\n                          param_changes: [],\n                          refresher_exploration_id: null\n                        },\n                        rule_specs: [],\n                      }],\n                      confirmed_unclassified_answers: [],\n                      customization_args: {\n                        placeholder: {\n                          value: {\n                            content_id: 'ca_placeholder_0',\n                            unicode_str: ''\n                          }\n                        },\n                        rows: { value: 1 }\n                      },\n                      default_outcome: {\n                        dest: null,\n                        feedback: {\n                          html: 'Correct Answer',\n                          content_id: 'content_2'\n                        },\n                        param_changes: [],\n                        labelled_as_correct: true\n                      },\n                      hints: [{\n                        hint_content: {\n                          html: 'Hint 1',\n                          content_id: 'content_3'\n                        }\n                      }],\n                      solution: {\n                        correct_answer: 'This is the correct answer',\n                        answer_is_exclusive: false,\n                        explanation: {\n                          html: 'Solution explanation',\n                          content_id: 'content_4'\n                        }\n                      },\n                      id: 'TextInput'\n                    },\n                    param_changes: [],\n                    recorded_voiceovers: {\n                      voiceovers_mapping: {}\n                    },\n                    written_translations: {\n                      translations_mapping: {}\n                    },\n                  },\n                }\n              },\n              status: 'accepted'\n            },\n            details: null\n          }\n        }));\n      spyOn(skillBackendApiService, 'fetchSkill').and.returnValue(\n        $q.resolve({\n          skill: skillObjectFactory.createFromBackendDict({\n            id: 'skill1',\n            description: 'test description 1',\n            misconceptions: [{\n              id: '2',\n              name: 'test name',\n              notes: 'test notes',\n              feedback: 'test feedback',\n              must_be_addressed: true\n            }],\n            rubrics: [{\n              difficulty: 'Easy',\n              explanations: ['explanation']\n            }],\n            skill_contents: {\n              explanation: {\n                html: 'test explanation',\n                content_id: 'explanation',\n              },\n              worked_examples: [],\n              recorded_voiceovers: {\n                voiceovers_mapping: {}\n              }\n            },\n            language_code: 'en',\n            version: 3,\n            prerequisite_skill_ids: ['skill_1']\n          })\n        }));\n      spyOn(\n        contributionAndReviewService,\n        'getUserCreatedTranslationSuggestionsAsync')\n        .and.returnValue($q.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'translate_content',\n              change: {\n                content_html: 'Translation',\n                translation_html: 'Tradução'\n              },\n              status: 'review'\n            },\n            details: null\n          }\n        }));\n      spyOn(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter,\n        'emit').and.callThrough();\n      spyOn(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter,\n        'subscribe').and.callThrough();\n      $scope = $rootScope.$new();\n      ctrl = $componentController('contributionsAndReview', {\n        $scope: $scope,\n        ContextService: contextService,\n        MisconceptionObjectFactory: misconceptionObjectFactory\n      });\n      ctrl.$onInit();\n      $scope.$apply();\n    }));\n\n    it('should show correct heading for translation suggestions', function() {\n      contributionOpportunitiesService\n        .reloadOpportunitiesEventEmitter.subscribe(() => {\n          ctrl.loadContributions().then(({opportunitiesDicts, more}) => {\n            expect(opportunitiesDicts).toEqual([{\n              id: 'suggestion_1',\n              heading: 'Tradução',\n              subheading: '[The corresponding opportunity has been deleted.]',\n              labelText: 'Awaiting review',\n              labelColor: '#eeeeee',\n              actionButtonTitle: 'View'\n            }]);\n          });\n        });\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'translate_content');\n      expect(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter\n          .subscribe).toHaveBeenCalled();\n      expect(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter\n          .emit).toHaveBeenCalled();\n    });\n\n    it('should show correct heading for question suggestions', function() {\n      contributionOpportunitiesService\n        .reloadOpportunitiesEventEmitter.subscribe(() => {\n          ctrl.loadContributions();\n        });\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'add_question');\n      $scope.$apply();\n\n      ctrl.loadContributions().then(({opportunitiesDicts, more}) => {\n        expect(opportunitiesDicts).toEqual([{\n          id: 'suggestion_1',\n          heading: 'Question 1',\n          subheading: '[The corresponding opportunity has been deleted.]',\n          labelText: 'Accepted',\n          labelColor: '#8ed274',\n          actionButtonTitle: 'View'\n        }]);\n      });\n    });\n  });\n\n  describe('when user is not allowed to review questions', function() {\n    beforeEach(angular.mock.inject(function($injector, $componentController) {\n      $httpBackend = $injector.get('$httpBackend');\n      $q = $injector.get('$q');\n      var $rootScope = $injector.get('$rootScope');\n      $uibModal = $injector.get('$uibModal');\n      contributionOpportunitiesService = $injector.get(\n        'ContributionOpportunitiesService');\n      contributionAndReviewService = $injector.get(\n        'ContributionAndReviewService');\n      csrfTokenService = $injector.get('CsrfTokenService');\n      userService = $injector.get('UserService');\n      contextService = $injector.get('ContextService');\n      skillBackendApiService = $injector.get('SkillBackendApiService');\n      skillObjectFactory = $injector.get('SkillObjectFactory');\n      spyOn(contextService, 'getExplorationId').and.returnValue('exp1');\n      misconceptionObjectFactory = $injector.get('MisconceptionObjectFactory');\n\n      spyOn(csrfTokenService, 'getTokenAsync').and.returnValue(\n        $q.resolve('sample-csrf-token'));\n\n      spyOn(userService, 'getUserInfoAsync')\n        .and.returnValue($q.resolve({\n          isLoggedIn: () => true\n        }));\n      spyOn(userService, 'getUserContributionRightsDataAsync')\n        .and.returnValue(\n          $q.resolve({\n            can_review_translation_for_language_codes: [],\n            can_review_questions: false,\n            can_suggest_questions: true\n          }));\n      spyOn(\n        contributionAndReviewService, 'getUserCreatedQuestionSuggestionsAsync')\n        .and.returnValue($q.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'add_question',\n              change: {\n                skill_id: 'skill1',\n                question_dict: {\n                  id: '1',\n                  question_state_data: {\n                    content: {\n                      html: 'Question 1',\n                      content_id: 'content_1'\n                    },\n                    interaction: {\n                      answer_groups: [{\n                        outcome: {\n                          dest: 'outcome 1',\n                          feedback: {\n                            content_id: 'content_5',\n                            html: ''\n                          },\n                          labelled_as_correct: true,\n                          param_changes: [],\n                          refresher_exploration_id: null\n                        },\n                        rule_specs: [],\n                      }],\n                      confirmed_unclassified_answers: [],\n                      customization_args: {\n                        placeholder: {\n                          value: {\n                            content_id: 'ca_placeholder_0',\n                            unicode_str: ''\n                          }\n                        },\n                        rows: { value: 1 }\n                      },\n                      default_outcome: {\n                        dest: null,\n                        feedback: {\n                          html: 'Correct Answer',\n                          content_id: 'content_2'\n                        },\n                        param_changes: [],\n                        labelled_as_correct: true\n                      },\n                      hints: [{\n                        hint_content: {\n                          html: 'Hint 1',\n                          content_id: 'content_3'\n                        }\n                      }],\n                      solution: {\n                        correct_answer: 'This is the correct answer',\n                        answer_is_exclusive: false,\n                        explanation: {\n                          html: 'Solution explanation',\n                          content_id: 'content_4'\n                        }\n                      },\n                      id: 'TextInput'\n                    },\n                    param_changes: [],\n                    recorded_voiceovers: {\n                      voiceovers_mapping: {}\n                    },\n                    written_translations: {\n                      translations_mapping: {}\n                    },\n                  },\n                }\n              },\n              status: 'accepted'\n            },\n            details: 'skill_1'\n          }\n        }));\n      spyOn(skillBackendApiService, 'fetchSkill').and.returnValue(\n        $q.resolve({\n          skill: skillObjectFactory.createFromBackendDict({\n            id: 'skill1',\n            description: 'test description 1',\n            misconceptions: [{\n              id: '2',\n              name: 'test name',\n              notes: 'test notes',\n              feedback: 'test feedback',\n              must_be_addressed: true\n            }],\n            rubrics: [{\n              difficulty: 'Easy',\n              explanations: ['explanation']\n            }],\n            skill_contents: {\n              explanation: {\n                html: 'test explanation',\n                content_id: 'explanation',\n              },\n              worked_examples: [],\n              recorded_voiceovers: {\n                voiceovers_mapping: {}\n              }\n            },\n            language_code: 'en',\n            version: 3,\n            prerequisite_skill_ids: ['skill_1']\n          })\n        }));\n\n      spyOn(\n        contributionAndReviewService,\n        'getReviewableTranslationSuggestionsAsync')\n        .and.returnValue($q.resolve({\n          suggestion_1: {\n            suggestion: {\n              suggestion_id: 'suggestion_1',\n              target_id: '1',\n              suggestion_type: 'translate_content',\n              change: {\n                content_html: 'Translation',\n                translation_html: 'Tradução'\n              },\n              status: 'review'\n            },\n            details: {\n              topic_name: 'Topic 1',\n              story_title: 'Story title',\n              chapter_title: 'Chapter title'\n            }\n          }\n        }));\n\n      $scope = $rootScope.$new();\n      ctrl = $componentController('contributionsAndReview', {\n        $scope: $scope,\n        ContextService: contextService,\n        MisconceptionObjectFactory: misconceptionObjectFactory\n      });\n\n      contributionOpportunitiesService\n        .reloadOpportunitiesEventEmitter.subscribe(() => {\n          ctrl.loadContributions();\n        });\n      ctrl.$onInit();\n      $scope.$apply();\n    }));\n\n    it('should initialize $scope properties after controller is' +\n      ' initialized', function() {\n      expect(ctrl.activeTabType).toBe('contributions');\n      expect(ctrl.activeSuggestionType).toBe('add_question');\n      expect(ctrl.userIsLoggedIn).toBe(true);\n      expect(ctrl.userDetailsLoading).toBe(false);\n      expect(ctrl.reviewTabs.length).toEqual(0);\n    });\n\n    it('should emit reload even when when switching to translation' +\n      ' in review tab', function() {\n      spyOn(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter,\n        'emit').and.callThrough();\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_REVIEWS, 'translate_content');\n      $scope.$apply();\n\n      expect(\n        contributionOpportunitiesService.reloadOpportunitiesEventEmitter.emit)\n        .toHaveBeenCalled();\n    });\n\n    it('should open show view question modal when clicking on' +\n      ' question suggestion', function() {\n      spyOn($uibModal, 'open').and.callThrough();\n      ctrl.switchToTab(ctrl.TAB_TYPE_REVIEWS, 'add_question');\n      ctrl.loadContributions().then(function() {\n        ctrl.onClickViewSuggestion('suggestion_1');\n        $scope.$apply();\n\n        expect($uibModal.open).toHaveBeenCalled();\n      });\n    });\n\n    it('should resolve suggestion to skill when closing show question' +\n      ' suggestion modal', function() {\n      $httpBackend.expectPUT(\n        '/suggestionactionhandler/skill/1/suggestion_1').respond(200);\n      spyOn($uibModal, 'open').and.returnValue({\n        result: $q.resolve({})\n      });\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_REVIEWS, 'add_question');\n      ctrl.loadContributions().then(function() {\n        expect(Object.keys(ctrl.contributions).length).toBe(1);\n        ctrl.onClickViewSuggestion('suggestion_1');\n        $scope.$apply();\n        $httpBackend.flush();\n\n        expect($uibModal.open).toHaveBeenCalled();\n      });\n    });\n\n    it('should not resolve suggestion to skill when dismissing show question' +\n      ' suggestion modal', function() {\n      ctrl.switchToTab(ctrl.TAB_TYPE_REVIEWS, 'add_question');\n      spyOn(contributionAndReviewService, 'resolveSuggestiontoSkill');\n      spyOn($uibModal, 'open').and.returnValue({\n        result: $q.reject({})\n      });\n      ctrl.loadContributions().then(function() {\n        ctrl.onClickViewSuggestion('suggestion_1');\n        $scope.$apply();\n\n        expect($uibModal.open).toHaveBeenCalled();\n      });\n    });\n\n    it('should return correctly check the active tab', function() {\n      ctrl.switchToTab(ctrl.TAB_TYPE_REVIEWS, 'translate_content');\n      ctrl.isActiveTab(ctrl.TAB_TYPE_REVIEWS, 'translate_content');\n\n      ctrl.switchToTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'add_question');\n      ctrl.isActiveTab(ctrl.TAB_TYPE_CONTRIBUTIONS, 'add_question');\n    });\n  });\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributions-and-review/contributions-and-review.component.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Directive for showing and reviewing contributions.\n */\n\nrequire('base-components/base-content.directive.ts');\nrequire(\n  'components/forms/schema-based-editors/schema-based-editor.directive.ts');\nrequire(\n  'components/question-directives/question-editor/' +\n  'question-editor.directive.ts');\nrequire('directives/angular-html-bind.directive.ts');\nrequire('domain/question/QuestionObjectFactory.ts');\nrequire('domain/skill/MisconceptionObjectFactory.ts');\nrequire('domain/skill/skill-backend-api.service.ts');\nrequire('filters/format-rte-preview.filter.ts');\nrequire('interactions/interactionsQuestionsRequires.ts');\nrequire('objects/objectComponentsRequires.ts');\nrequire(\n  'pages/contributor-dashboard-page/login-required-message/' +\n  'login-required-message.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/modal-templates/' +\n  'question-suggestion-review-modal.controller.ts');\nrequire(\n  'pages/contributor-dashboard-page/modal-templates/' +\n  'translation-suggestion-review-modal.controller.ts');\n\nrequire(\n  'pages/contributor-dashboard-page/services/' +\n  'contribution-and-review.service.ts');\nrequire('services/alerts.service.ts');\nrequire('services/context.service.ts');\nrequire('services/suggestion-modal.service.ts');\n\nangular.module('oppia').component('contributionsAndReview', {\n  template: require('./contributions-and-review.component.html'),\n  controller: [\n    '$filter', '$rootScope', '$uibModal', 'AlertsService', 'ContextService',\n    'ContributionAndReviewService', 'ContributionOpportunitiesService',\n    'QuestionObjectFactory', 'SkillBackendApiService',\n    'UrlInterpolationService', 'UserService', 'IMAGE_CONTEXT',\n    function(\n        $filter, $rootScope, $uibModal, AlertsService, ContextService,\n        ContributionAndReviewService, ContributionOpportunitiesService,\n        QuestionObjectFactory, SkillBackendApiService,\n        UrlInterpolationService, UserService, IMAGE_CONTEXT) {\n      var ctrl = this;\n      ctrl.contributions = {};\n\n      var SUGGESTION_LABELS = {\n        review: {\n          text: 'Awaiting review',\n          color: '#eeeeee'\n        },\n        accepted: {\n          text: 'Accepted',\n          color: '#8ed274'\n        },\n        rejected: {\n          text: 'Rejected',\n          color: '#e76c8c'\n        }\n      };\n      var SUGGESTION_TYPE_QUESTION = 'add_question';\n      var SUGGESTION_TYPE_TRANSLATE = 'translate_content';\n      ctrl.TAB_TYPE_CONTRIBUTIONS = 'contributions';\n      ctrl.TAB_TYPE_REVIEWS = 'reviews';\n\n      var tabNameToOpportunityFetchFunction = {\n        [SUGGESTION_TYPE_QUESTION]: {\n          [ctrl.TAB_TYPE_CONTRIBUTIONS]: (\n            ContributionAndReviewService.getUserCreatedQuestionSuggestionsAsync\n          ),\n          [ctrl.TAB_TYPE_REVIEWS]: (\n            ContributionAndReviewService.getReviewableQuestionSuggestionsAsync)\n        },\n        [SUGGESTION_TYPE_TRANSLATE]: {\n          [ctrl.TAB_TYPE_CONTRIBUTIONS]: (\n            ContributionAndReviewService\n              .getUserCreatedTranslationSuggestionsAsync),\n          [ctrl.TAB_TYPE_REVIEWS]: (\n            ContributionAndReviewService\n              .getReviewableTranslationSuggestionsAsync)\n        }\n      };\n\n      var getQuestionContributionsSummary = function(\n          suggestionIdToSuggestions) {\n        var questionContributionsSummaryList = [];\n        Object.keys(suggestionIdToSuggestions).forEach(function(key) {\n          var suggestion = suggestionIdToSuggestions[key].suggestion;\n          var details = suggestionIdToSuggestions[key].details;\n          var subheading = '';\n          if (details === null) {\n            subheading = '[The corresponding opportunity has been deleted.]';\n          } else {\n            subheading = details.skill_description;\n          }\n\n          var change = suggestion.change;\n          var requiredData = {\n            id: suggestion.suggestion_id,\n            heading: $filter('formatRtePreview')(\n              change.question_dict.question_state_data.content.html),\n            subheading: subheading,\n            labelText: SUGGESTION_LABELS[suggestion.status].text,\n            labelColor: SUGGESTION_LABELS[suggestion.status].color,\n            actionButtonTitle: (\n              ctrl.activeTabType === ctrl.TAB_TYPE_REVIEWS ? 'Review' : 'View')\n          };\n          questionContributionsSummaryList.push(requiredData);\n        });\n        return questionContributionsSummaryList;\n      };\n\n      var getTranslationContributionsSummary = function(\n          suggestionIdToSuggestions) {\n        var translationContributionsSummaryList = [];\n        Object.keys(suggestionIdToSuggestions).forEach(function(key) {\n          var suggestion = suggestionIdToSuggestions[key].suggestion;\n          var details = suggestionIdToSuggestions[key].details;\n          var subheading = '';\n          if (details === null) {\n            subheading = '[The corresponding opportunity has been deleted.]';\n          } else {\n            subheading = (\n              details.topic_name + ' / ' + details.story_title +\n              ' / ' + details.chapter_title);\n          }\n\n          var change = suggestion.change;\n          var requiredData = {\n            id: suggestion.suggestion_id,\n            heading: $filter('formatRtePreview')(change.translation_html),\n            subheading: subheading,\n            labelText: SUGGESTION_LABELS[suggestion.status].text,\n            labelColor: SUGGESTION_LABELS[suggestion.status].color,\n            actionButtonTitle: (\n              ctrl.activeTabType === ctrl.TAB_TYPE_REVIEWS ? 'Review' : 'View')\n          };\n          translationContributionsSummaryList.push(requiredData);\n        });\n        return translationContributionsSummaryList;\n      };\n\n      var resolveSuggestionSuccess = function(suggestionId) {\n        AlertsService.addSuccessMessage('Submitted suggestion review.');\n        ContributionOpportunitiesService.removeOpportunitiesEventEmitter.emit(\n          [suggestionId]);\n      };\n\n      var _showQuestionSuggestionModal = function(\n          suggestion, contributionDetails, reviewable,\n          misconceptionsBySkill) {\n        var _templateUrl = UrlInterpolationService.getDirectiveTemplateUrl(\n          '/pages/contributor-dashboard-page/modal-templates/' +\n          'question-suggestion-review.directive.html');\n        var targetId = suggestion.target_id;\n        var suggestionId = suggestion.suggestion_id;\n        var authorName = suggestion.author_name;\n        var questionHeader = contributionDetails.skill_description;\n        var question = QuestionObjectFactory.createFromBackendDict(\n          suggestion.change.question_dict);\n        var contentHtml = question.getStateData().content.getHtml();\n        var skillRubrics = contributionDetails.skill_rubrics;\n        var skillDifficulty = suggestion.change.skill_difficulty;\n\n        $uibModal.open({\n          templateUrl: _templateUrl,\n          backdrop: 'static',\n          size: 'lg',\n          resolve: {\n            authorName: function() {\n              return authorName;\n            },\n            contentHtml: function() {\n              return contentHtml;\n            },\n            misconceptionsBySkill: function() {\n              return misconceptionsBySkill;\n            },\n            question: function() {\n              return question;\n            },\n            questionHeader: function() {\n              return questionHeader;\n            },\n            reviewable: function() {\n              return reviewable;\n            },\n            skillRubrics: function() {\n              return skillRubrics;\n            },\n            skillDifficulty: function() {\n              return skillDifficulty;\n            }\n          },\n          controller: 'QuestionSuggestionReviewModalController'\n        }).result.then(function(result) {\n          ContributionAndReviewService.resolveSuggestiontoSkill(\n            targetId, suggestionId, result.action, result.reviewMessage,\n            result.skillDifficulty, resolveSuggestionSuccess);\n        }, function() {\n          // Note to developers:\n          // This callback is triggered when the Cancel button is clicked.\n          // No further action is needed.\n        });\n      };\n\n      var _showTranslationSuggestionModal = function(\n          suggestionIdToSuggestion, initialSuggestionId, reviewable) {\n        var _templateUrl = UrlInterpolationService.getDirectiveTemplateUrl(\n          '/pages/contributor-dashboard-page/modal-templates/' +\n          'translation-suggestion-review.directive.html');\n\n        $uibModal.open({\n          templateUrl: _templateUrl,\n          backdrop: 'static',\n          size: 'lg',\n          resolve: {\n            suggestionIdToSuggestion: function() {\n              return angular.copy(suggestionIdToSuggestion);\n            },\n            initialSuggestionId: function() {\n              return initialSuggestionId;\n            },\n            reviewable: function() {\n              return reviewable;\n            }\n          },\n          controller: 'TranslationSuggestionReviewModalController'\n        }).result.then(function(resolvedSuggestionIds) {\n          ContributionOpportunitiesService.removeOpportunitiesEventEmitter.emit(\n            resolvedSuggestionIds);\n          resolvedSuggestionIds.forEach(function(suggestionId) {\n            delete ctrl.contributions[suggestionId];\n          });\n        }, function() {\n          // Note to developers:\n          // This callback is triggered when the Cancel button is clicked.\n          // No further action is needed.\n        });\n      };\n\n      ctrl.isActiveTab = function(tabType, suggestionType) {\n        return (\n          ctrl.activeTabType === tabType &&\n          ctrl.activeSuggestionType === suggestionType);\n      };\n\n      ctrl.onClickViewSuggestion = function(suggestionId) {\n        var suggestion = ctrl.contributions[suggestionId].suggestion;\n        var reviewable = ctrl.activeTabType === ctrl.TAB_TYPE_REVIEWS;\n        if (suggestion.suggestion_type === SUGGESTION_TYPE_QUESTION) {\n          var contributionDetails = ctrl.contributions[suggestionId].details;\n          var skillId = suggestion.change.skill_id;\n          ContextService.setCustomEntityContext(\n            IMAGE_CONTEXT.QUESTION_SUGGESTIONS, skillId);\n          SkillBackendApiService.fetchSkill(skillId).then((skillDict) => {\n            var misconceptionsBySkill = {};\n            var skill = skillDict.skill;\n            misconceptionsBySkill[skill.getId()] = skill.getMisconceptions();\n            _showQuestionSuggestionModal(\n              suggestion, contributionDetails, reviewable,\n              misconceptionsBySkill);\n            $rootScope.$apply();\n          });\n        }\n        if (suggestion.suggestion_type === SUGGESTION_TYPE_TRANSLATE) {\n          const suggestionIdToSuggestion = {};\n          for (let suggestionId in ctrl.contributions) {\n            var contribution = ctrl.contributions[suggestionId];\n            suggestionIdToSuggestion[suggestionId] = contribution.suggestion;\n          }\n          ContextService.setCustomEntityContext(\n            IMAGE_CONTEXT.EXPLORATION_SUGGESTIONS, suggestion.target_id);\n          _showTranslationSuggestionModal(\n            suggestionIdToSuggestion, suggestionId, reviewable);\n        }\n      };\n\n      var getContributionSummaries = function(suggestionIdToSuggestions) {\n        if (ctrl.activeSuggestionType === SUGGESTION_TYPE_TRANSLATE) {\n          return getTranslationContributionsSummary(suggestionIdToSuggestions);\n        } else if (ctrl.activeSuggestionType === SUGGESTION_TYPE_QUESTION) {\n          return getQuestionContributionsSummary(suggestionIdToSuggestions);\n        }\n      };\n\n      ctrl.switchToTab = function(tabType, suggestionType) {\n        ctrl.activeSuggestionType = suggestionType;\n        ctrl.activeTabType = tabType;\n        ctrl.contributions = {};\n        ContributionOpportunitiesService.reloadOpportunitiesEventEmitter.emit();\n      };\n\n      ctrl.loadContributions = function() {\n        if (!ctrl.activeTabType || !ctrl.activeSuggestionType) {\n          return new Promise((resolve, reject) => {\n            resolve({opportunitiesDicts: [], more: false});\n          });\n        }\n        var fetchFunction = tabNameToOpportunityFetchFunction[\n          ctrl.activeSuggestionType][ctrl.activeTabType];\n\n        return fetchFunction().then(function(suggestionIdToSuggestions) {\n          ctrl.contributions = suggestionIdToSuggestions;\n          return {\n            opportunitiesDicts: getContributionSummaries(ctrl.contributions),\n            more: false\n          };\n        });\n      };\n\n      ctrl.$onInit = function() {\n        ctrl.contributions = [];\n        ctrl.userDetailsLoading = true;\n        ctrl.userIsLoggedIn = false;\n        ctrl.activeTabType = '';\n        ctrl.activeSuggestionType = '';\n        ctrl.reviewTabs = [];\n        ctrl.contributionTabs = [\n          {\n            suggestionType: SUGGESTION_TYPE_QUESTION,\n            text: 'Questions',\n            enabled: false\n          },\n          {\n            suggestionType: SUGGESTION_TYPE_TRANSLATE,\n            text: 'Translations',\n            enabled: true\n          }\n        ];\n\n        UserService.getUserInfoAsync().then(function(userInfo) {\n          ctrl.userIsLoggedIn = userInfo.isLoggedIn();\n          ctrl.userDetailsLoading = false;\n          if (ctrl.userIsLoggedIn) {\n            UserService.getUserContributionRightsDataAsync().then(\n              function(userContributionRights) {\n                var userCanReviewTranslationSuggestionsInLanguages = (\n                  userContributionRights\n                    .can_review_translation_for_language_codes);\n                var userCanReviewQuestionSuggestions = (\n                  userContributionRights.can_review_questions);\n                var userReviewableSuggestionTypes = [];\n                var userCanSuggestQuestions = (\n                  userContributionRights.can_suggest_questions);\n                for (var index in ctrl.contributionTabs) {\n                  if (ctrl.contributionTabs[index].suggestionType === (\n                    SUGGESTION_TYPE_QUESTION)) {\n                    ctrl.contributionTabs[index].enabled = (\n                      userCanSuggestQuestions);\n                  }\n                }\n                if (userCanReviewQuestionSuggestions) {\n                  ctrl.reviewTabs.push({\n                    suggestionType: SUGGESTION_TYPE_QUESTION,\n                    text: 'Review Questions'\n                  });\n                  userReviewableSuggestionTypes.push(SUGGESTION_TYPE_QUESTION);\n                }\n                if (\n                  userCanReviewTranslationSuggestionsInLanguages\n                    .length > 0) {\n                  ctrl.reviewTabs.push({\n                    suggestionType: SUGGESTION_TYPE_TRANSLATE,\n                    text: 'Review Translations'\n                  });\n                  userReviewableSuggestionTypes.push(SUGGESTION_TYPE_TRANSLATE);\n                }\n                if (userReviewableSuggestionTypes.length > 0) {\n                  ctrl.switchToTab(\n                    ctrl.TAB_TYPE_REVIEWS, userReviewableSuggestionTypes[0]);\n                } else if (userCanSuggestQuestions) {\n                  ctrl.switchToTab(\n                    ctrl.TAB_TYPE_CONTRIBUTIONS, SUGGESTION_TYPE_QUESTION);\n                } else {\n                  ctrl.switchToTab(\n                    ctrl.TAB_TYPE_CONTRIBUTIONS, SUGGESTION_TYPE_TRANSLATE);\n                }\n                // TODO(#8521): Remove the use of $rootScope.$apply()\n                // once the controller is migrated to angular.\n                $rootScope.$applyAsync();\n              });\n          }\n          // TODO(#8521): Remove the use of $rootScope.$apply()\n          // once the controller is migrated to angular.\n          $rootScope.$applyAsync();\n        });\n      };\n    }\n  ]\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributor-dashboard-page.component.html",
      "content": "<div>\n  <div class=\"oppia-opportunities-tabs\">\n    <ul class=\"oppia-opportunities-tabs-list\">\n      <li ng-class=\"{'oppia-active-opportunities-tab': tabName === $ctrl.activeTabName}\"\n          class=\"oppia-opportunities-tab-item\"\n          ng-repeat=\"(tabName, tabDetails) in $ctrl.tabsDetails\"\n          ng-if=\"tabDetails.enabled\"\n          aria-label=\"<[tabDetails.ariaLabel]>\"\n          role=\"button\">\n        <a ng-click=\"$ctrl.onTabClick(tabName)\" href=\"\" class=\"oppia-opportunities-tabs-text protractor-test-<[tabName]>\"><[tabDetails.tabName]></a>\n        <div class=\"oppia-active-tab-hilighter\"></div>\n      </li>\n    </ul>\n  </div>\n  <div class=\"oppia-opportunities-tab-custmization-container\">\n    <div class=\"oppia-opportunities-tab-header\" ng-if=\"$ctrl.activeTabName === 'myContributionTab'\">\n      <div class=\"oppia-profile-details-container\">\n        <span ng-if=\"$ctrl.profilePictureDataUrl\">\n          <img ng-src=\"<[$ctrl.profilePictureDataUrl]>\" class=\"rounded-circle\" alt=\"User Avatar\">\n        </span>\n        <span ng-if=\"!$ctrl.profilePictureDataUrl\">\n          <i class=\"material-icons oppia-profile-picture-icon\">&#xE853;</i>\n        </span>\n      </div>\n      <div class=\"oppia-contributor-username-container\" data-tab-name=\"username\">\n        <lazy-loading ng-show=\"$ctrl.userInfoIsLoading\"></lazy-loading>\n        <span class=\"protractor-test-username\" ng-show=\"!$ctrl.userInfoIsLoading\">\n          <[$ctrl.userIsLoggedIn ? $ctrl.username : 'Guest']>\n        </span>\n      </div>\n      <div class=\"oppia-review-right-details-container protractor-test-review-rights\" ng-if=\"$ctrl.userIsReviewer\">\n        <strong>Review rights:</strong>\n        <div ng-if=\"$ctrl.userCanReviewTranslationSuggestionsInLanguages.length > 0\">\n          Translations in languages:\n          <span ng-repeat=\"languageDescription in $ctrl.userCanReviewTranslationSuggestionsInLanguages\">\n            <span class=\"oppia-review-item-detail-container protractor-test-translation-<[languageDescription]>-reviewer\"><[languageDescription]></span>\n          </span>\n        </div>\n        <div ng-if=\"$ctrl.userCanReviewVoiceoverSuggestionsInLanguages.length > 0\">\n          Voiceovers in languages:\n          <span ng-repeat=\"languageDescription in $ctrl.userCanReviewVoiceoverSuggestionsInLanguages\">\n            <span class=\"oppia-review-item-detail-container protractor-test-voiceover-<[languageDescription]>-reviewer\"><[languageDescription]></span>\n          </span>\n        </div>\n        <div ng-if=\"$ctrl.userCanReviewQuestions\" class=\"protractor-test-question-reviewer\">\n          Questions\n        </div>\n      </div>\n    </div>\n    <div class=\"oppia-opportunities-tab-header\" ng-if=\"$ctrl.activeTabName !== 'myContributionTab'\">\n      <div class=\"oppia-mascot-avatar-container\">\n        <a ng-class=\"{'oppia-disabled-image-link': ($ctrl.OPPIA_AVATAR_LINK_URL === null)}\"\n           ng-href=\"<[$ctrl.OPPIA_AVATAR_LINK_URL]>\"\n           rel=\"noopener\"\n           target=\"_blank\">\n          <img class=\"oppia-mascot-avatar\"\n               ng-src=\"<[$ctrl.OPPIA_AVATAR_IMAGE_URL]>\" alt=\"\">\n        </a>\n      </div>\n      <div class=\"oppia-opportunities-tabs-explanation\" data-tab-name=\"<[$ctrl.tabsDetails[$ctrl.activeTabName].tabName]>\">\n        <[$ctrl.tabsDetails[$ctrl.activeTabName].description]>\n      </div>\n      <div class=\"oppia-dashboard-language-container\" ng-if=\"$ctrl.showLanguageSelector()\">\n        <span class=\"oppia-dashboard-language-container-label\">Translate to</span>\n        <translation-language-selector [active-language-code]=\"$ctrl.languageCode\"\n                                       (set-active-language-code)=\"$ctrl.onChangeLanguage($event)\">\n        </translation-language-selector>\n      </div>\n    </div>\n  </div>\n  <div ng-if=\"$ctrl.activeTabName === 'myContributionTab' || !$ctrl.activeTabName\">\n    <contributions-and-review></contributions-and-review>\n  </div>\n  <div ng-if=\"$ctrl.activeTabName === 'submitQuestionTab'\">\n    <question-opportunities></question-opportunities>\n  </div>\n  <div ng-if=\"$ctrl.activeTabName === 'translateTextTab'\">\n    <translation-opportunities></translation-opportunities>\n  </div>\n  <div ng-if=\"$ctrl.activeTabName === 'voiceoverTab'\">\n    <voiceover-opportunities></voiceover-opportunities>\n  </div>\n</div>\n<style>\n  .oppia-dashboard-language-container-label {\n    color: #4a4a4a;\n    font-size: 18px;\n    margin-top: 10px;\n  }\n  .oppia-dashboard-language-container {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10%;\n    width: 250px;\n  }\n  .oppia-opportunity-language-selector {\n    background: white;\n    border: 1px solid #e8e7e3;\n    height: 35px;\n  }\n  .oppia-opportunities-tabs-explanation {\n    padding-top: 50px;\n    position: relative;\n  }\n  .oppia-opportunities-tabs-explanation::before {\n    bottom: 65%;\n    color: #009688;\n    content: attr(data-tab-name);\n    font-family: \"Capriola\", \"Roboto\", Arial, sans-serif;\n    font-size: 24px;\n    position: absolute;\n  }\n  .oppia-contributor-username-container {\n    color: #009688;\n    font-family: \"Capriola\", \"Roboto\", Arial, sans-serif;\n    font-size: 24px;\n    height: 30%;\n    padding-top: 25px;\n    position: relative;\n    width: 10%;\n  }\n  .oppia-review-right-details-container {\n    left: 40%;\n    position: relative;\n  }\n  .oppia-contributor-username-container::before {\n    bottom: 65%;\n    color: #4a4a4a;\n    content: attr(data-tab-name);\n    font-size: 16px;\n    position: absolute;\n  }\n  .oppia-mascot-avatar-container,\n  .oppia-profile-details-container {\n    margin-right: 20px;\n    max-width: 130px;\n    padding: 2% 1%;\n    width: 18%;\n  }\n  .oppia-profile-picture-icon {\n    color: #009688;\n    font-size: 120px;\n  }\n  .oppia-opportunities-tabs {\n    background-color: #ffffff;\n    padding-top: 5px;\n  }\n  .oppia-opportunities-tabs-list {\n    display: flex;\n    justify-content: center;\n    margin: auto;\n    max-width: 1500px;\n    padding-left: 0;\n    text-align: center;\n    width: 80%;\n  }\n.oppia-opportunities-tab-item {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    max-width: 300px;\n  }\n  .oppia-opportunities-tab-header {\n    align-items: center;\n    display: flex;\n    height: 100%;\n    justify-content: flex-start;\n    margin: auto;\n    max-width: 1200px;\n    width: 80%;\n  }\n  .oppia-opportunities-tab-custmization-container {\n    align-items: center;\n    background-color: white;\n    display: flex;\n    height: 180px;\n    margin-bottom: 10px;\n    width: 100%;\n  }\n  .oppia-opportunities-tabs-list li {\n    display: flex;\n    max-width: 250px;\n    width: -webkit-calc(100% / 3);\n    width: -moz-calc(100% / 3);\n    width: -o-calc(100% / 3);\n    width: calc(100% / 3);\n  }\n  .oppia-opportunities-tabs-text {\n    color: #4a4a4a;\n    font-size: 18px;\n    font-weight: bold;\n    padding: 10px;\n    text-decoration: none;\n    -webkit-transition: color 200ms ease-out;\n    -ms-transition: color 200ms ease-out;\n    transition: color 200ms ease-out;\n    width: 100%;\n  }\n  .oppia-active-opportunities-tab a {\n    color: #009688;\n    text-decoration: none;\n  }\n  .oppia-active-tab-hilighter {\n    height: 0;\n    transform: scale(0);\n    -webkit-transition: transform 200ms ease-out;\n    -ms-transition: transform 200ms ease-out;\n    transition: transform 200ms ease-out;\n    width: 60%;\n  }\n  .oppia-active-opportunities-tab .oppia-active-tab-hilighter {\n    background-color: #009688;\n    border: 2px solid #009688;\n    text-decoration: none;\n    transform: scale(1);\n  }\n  .oppia-opportunities-tabs-text:hover {\n    color: #009688;\n    text-decoration: none;\n  }\n  .oppia-active-opportunities-tab a:hover {\n    color: #009688;\n  }\n  .oppia-review-item-detail-container {\n    background-color: #009688;\n    border-radius: 10%;\n    color: #fff;\n    padding: 1px 5px;\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributor-dashboard-page.component.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for the contributor dashboard page.\n */\n\nrequire('base-components/base-content.directive.ts');\nrequire(\n  'components/common-layout-directives/common-elements/' +\n  'background-banner.component.ts');\nrequire(\n  'components/common-layout-directives/common-elements/' +\n  'lazy-loading.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/contributions-and-review/' +\n  'contributions-and-review.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/translation-language-selector/' +\n  'translation-language-selector.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/question-opportunities/' +\n  'question-opportunities.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/translation-opportunities/' +\n  'translation-opportunities.component.ts');\nrequire(\n  'pages/contributor-dashboard-page/voiceover-opportunities/' +\n  'voiceover-opportunities.component.ts');\n\nrequire('domain/utilities/language-util.service.ts');\nrequire('domain/utilities/url-interpolation.service.ts');\nrequire('services/local-storage.service.ts');\nrequire('services/user.service.ts');\n\nrequire(\n  // eslint-disable-next-line max-len\n  'pages/contributor-dashboard-page/contributor-dashboard-page.constants.ajs.ts');\n\nangular.module('oppia').component('contributorDashboardPage', {\n  template: require('./contributor-dashboard-page.component.html'),\n  controller: [\n    '$rootScope', 'LanguageUtilService', 'LocalStorageService',\n    'TranslationLanguageService', 'UrlInterpolationService',\n    'UserService', 'CONTRIBUTOR_DASHBOARD_TABS_DETAILS',\n    'DEFAULT_OPPORTUNITY_LANGUAGE_CODE', 'OPPIA_AVATAR_LINK_URL',\n    function(\n        $rootScope, LanguageUtilService, LocalStorageService,\n        TranslationLanguageService, UrlInterpolationService,\n        UserService, CONTRIBUTOR_DASHBOARD_TABS_DETAILS,\n        DEFAULT_OPPORTUNITY_LANGUAGE_CODE, OPPIA_AVATAR_LINK_URL) {\n      var ctrl = this;\n\n      var prevSelectedLanguageCode = (\n        LocalStorageService.getLastSelectedTranslationLanguageCode());\n      var allAudioLanguageCodes = (\n        LanguageUtilService.getAllVoiceoverLanguageCodes());\n\n      var getLanguageDescriptions = function(languageCodes) {\n        var languageDescriptions = [];\n        languageCodes.forEach(function(languageCode) {\n          languageDescriptions.push(\n            LanguageUtilService.getAudioLanguageDescription(\n              languageCode));\n        });\n        return languageDescriptions;\n      };\n\n      ctrl.onChangeLanguage = function(languageCode: string) {\n        ctrl.languageCode = languageCode;\n        TranslationLanguageService.setActiveLanguageCode(ctrl.languageCode);\n        LocalStorageService.updateLastSelectedTranslationLanguageCode(\n          ctrl.languageCode);\n      };\n\n      ctrl.showLanguageSelector = function() {\n        var activeTabDetail = ctrl.tabsDetails[ctrl.activeTabName];\n        return (\n          activeTabDetail.customizationOptions.indexOf('language') !== -1);\n      };\n      ctrl.onTabClick = function(activeTabName) {\n        ctrl.activeTabName = activeTabName;\n      };\n      ctrl.$onInit = function() {\n        ctrl.profilePictureDataUrl = null;\n        ctrl.username = null;\n        ctrl.userInfoIsLoading = true;\n        ctrl.userIsLoggedIn = false;\n        ctrl.userIsReviewer = false;\n        ctrl.userCanReviewTranslationSuggestionsInLanguages = [];\n        ctrl.userCanReviewVoiceoverSuggestionsInLanguages = [];\n        ctrl.userCanReviewQuestions = false;\n\n        UserService.getProfileImageDataUrlAsync().then(\n          function(dataUrl) {\n            ctrl.profilePictureDataUrl = dataUrl;\n            // TODO(#8521): Remove the use of $rootScope.$apply()\n            // once the controller is migrated to angular.\n            $rootScope.$applyAsync();\n          });\n\n        UserService.getUserContributionRightsDataAsync().then(\n          function(userContributionRights) {\n            ctrl.userCanReviewTranslationSuggestionsInLanguages = (\n              getLanguageDescriptions(\n                userContributionRights\n                  .can_review_translation_for_language_codes));\n\n            ctrl.userCanReviewVoiceoverSuggestionsInLanguages = (\n              getLanguageDescriptions(\n                userContributionRights\n                  .can_review_voiceover_for_language_codes));\n\n            ctrl.userCanReviewQuestions = (\n              userContributionRights.can_review_questions);\n\n            ctrl.userIsReviewer = (\n              ctrl.userCanReviewTranslationSuggestionsInLanguages\n                .length > 0 ||\n              ctrl.userCanReviewVoiceoverSuggestionsInLanguages\n                .length > 0 ||\n              ctrl.userCanReviewQuestions);\n\n            ctrl.tabsDetails.submitQuestionTab.enabled = (\n              userContributionRights.can_suggest_questions);\n            // TODO(#8521): Remove the use of $rootScope.$apply()\n            // once the controller is migrated to angular.\n            $rootScope.$applyAsync();\n          });\n\n        UserService.getUserInfoAsync().then(function(userInfo) {\n          ctrl.userInfoIsLoading = false;\n          if (userInfo.isLoggedIn()) {\n            ctrl.userIsLoggedIn = true;\n            ctrl.username = userInfo.getUsername();\n          } else {\n            ctrl.userIsLoggedIn = false;\n            ctrl.username = '';\n          }\n          // TODO(#8521): Remove the use of $rootScope.$apply()\n          // once the controller is migrated to angular.\n          $rootScope.$applyAsync();\n        });\n\n        ctrl.languageCode = (\n          allAudioLanguageCodes.indexOf(prevSelectedLanguageCode) !== -1 ?\n          prevSelectedLanguageCode : DEFAULT_OPPORTUNITY_LANGUAGE_CODE);\n\n        TranslationLanguageService.setActiveLanguageCode(\n          ctrl.languageCode);\n\n        ctrl.activeTabName = 'myContributionTab';\n        ctrl.tabsDetails = CONTRIBUTOR_DASHBOARD_TABS_DETAILS;\n        ctrl.OPPIA_AVATAR_LINK_URL = OPPIA_AVATAR_LINK_URL;\n        ctrl.OPPIA_AVATAR_IMAGE_URL = (\n          UrlInterpolationService.getStaticImageUrl(\n            '/avatar/oppia_avatar_100px.svg'));\n      };\n    }\n  ]\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/contributor-dashboard-page.constants.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Constants for the creator dashboard page.\n */\n\nexport const ContributorDashboardConstants = {\n  CONTRIBUTOR_DASHBOARD_TABS_DETAILS: {\n    myContributionTab: {\n      ariaLabel: 'Check your contributions.',\n      tabName: 'My Contributions',\n      description: '',\n      customizationOptions: [],\n      enabled: true\n    },\n    submitQuestionTab: {\n      ariaLabel: 'See opportunities for adding new questions.',\n      tabName: 'Submit Question',\n      description: 'Submit a question for students to answer while ' +\n        'practicing that skill.',\n      customizationOptions: ['sort'],\n      enabled: false\n    },\n    translateTextTab: {\n      ariaLabel: 'See opportunities for translation.',\n      tabName: 'Translate Text',\n      description: 'Translate the lesson text to help non-English speakers ' +\n        'follow the lessons.',\n      customizationOptions: ['language', 'sort'],\n      enabled: true\n    }\n  },\n\n  DEFAULT_OPPORTUNITY_LANGUAGE_CODE: 'hi'\n} as const;\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/modal-templates/translation-modal.directive.html",
      "content": "<div class=\"oppia-translate-text-header-container\">\n  <div class=\"oppia-translate-text-header\">\n    <div class=\"oppia-opportunities-details\">\n      <div class=\"oppia-opportunities-subheading\"><[subheading]></div>\n      <div class=\"oppia-opportunities-heading\"><[heading]></div>\n    </div>\n    <button type=\"button\" class=\"close oppia-close-button-position\" ng-click=\"confirm()\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n</div>\n<div class=\"modal-body\">\n  <div class=\"oppia-loading-text\" ng-if=\"loadingData || uploadingTranslation\">\n    <div class=\"oppia-loading-text1 oppia-animate-fadein\">\n      <lazy-loading></lazy-loading>\n    </div>\n    <div class=\"oppia-loading-text2 oppia-animate-fadein\">\n      <lazy-loading></lazy-loading>\n    </div>\n  </div>\n  <div ng-if=\"!textToTranslate && !loadingData\">\n    <strong>Sorry! All available translations are in review currently.</strong>\n  </div>\n  <div ng-if=\"textToTranslate\">\n    <div class=\"oppia-translatable-text-section\">\n      <strong>Please translate the given content in <[languageDescription]>:</strong>\n      <a class=\"oppia-skip-button\" href=\"\" ng-if=\"moreAvailable\" ng-click=\"skipActiveTranslation()\">skip</a>\n    </div>\n    <div ng-if=\"!loadingData && !uploadingTranslation\" class=\"oppia-text-to-translate-container\">\n      <angular-html-bind ng-class=\"{'oppia-rte-editor-focused': isCopyModeActive()}\"\n                         ng-click=\"onContentClick($event)\"\n                         html-data=\"textToTranslate\"\n                         class=\"oppia-rte-editor\">\n      </angular-html-bind>\n    </div>\n    <div class=\"oppia-translation-editor-section\">\n      <div class=\"protractor-test-state-translation-editor\">\n        <ck-editor-copy-toolbar></ck-editor-copy-toolbar>\n        <schema-based-editor schema=\"HTML_SCHEMA\" local-value=\"activeWrittenTranslation.html\">\n        </schema-based-editor>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button class=\"btn btn-default\" ng-click=\"cancel()\">Cancel</button>\n  <button class=\"btn btn-success oppia-upload-translated-text-button\"\n          ng-disabled=\"loadingData || uploadingTranslation || activeWrittenTranslation.html === ''\"\n          ng-click=\"suggestTranslatedText()\">\n    <i ng-show=\"uploadingTranslation\" class=\"fa fa-spinner\"></i>\n    <span ng-show=\"!uploadingTranslation && !moreAvailable\">Save and close</span>\n    <span ng-show=\"!uploadingTranslation && moreAvailable\">Save and translate another</span>\n  </button>\n</div>\n<style>\n  .oppia-translate-text-header-container .oppia-opportunities-subheading {\n    color: #009688;\n    font-size: 14px;\n    height: 40%;\n    width: 100%;\n  }\n  .oppia-translate-text-header-container .oppia-opportunities-details {\n    display: flex;\n    flex-direction: column;\n    margin: 1.8% 0;\n    width: 95%;\n  }\n  .oppia-translate-text-header-container {\n    border-bottom: 1px solid #e5e5e5;\n    padding-left: 15px;\n  }\n  .oppia-translate-text-header,\n  .oppia-translatable-text-section {\n    display: flex;\n    justify-content: space-between;\n  }\n  .oppia-loading-text {\n    height: 40px;\n    width: 100%;\n  }\n  .oppia-loading-text1 {\n    height: 50%;\n    width: 60%;\n  }\n  .oppia-loading-text2 {\n    height: 50%;\n    width: 40%;\n  }\n  .oppia-translation-editor-section {\n    padding: 20px 0px;\n    word-wrap: break-word;\n  }\n  .oppia-text-to-translate-container {\n    border: 1px solid #ccc;\n    margin: 15px 0px;\n    padding: 20px;\n  }\n  .oppia-skip-button {\n    color: #ababab;\n    margin-left: 5%;\n  }\n  .oppia-close-button-position {\n    position: absolute;\n    right: 20px;\n    top: 12px;\n  }\n  .oppia-upload-translated-text-button {\n    min-width: 200px;\n  }\n  .oppia-rte-editor-focused:focus > p {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > ol {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > ul {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > pre {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > blockquote {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > oppia-noninteractive-tabs > div {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > oppia-noninteractive-collapsible > uib-accordion > div {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > oppia-noninteractive-image > figure {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused:focus > oppia-noninteractive-video > center {\n    outline: solid 2px #009688;\n  }\n  .oppia-rte-editor-focused *:hover {\n    background-color: rgba(233, 241, 242);\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/opportunities-list-item/opportunities-list-item.component.html",
      "content": "<div class=\"oppia-opportunities-list-item protractor-test-opportunity-list-item\">\n  <div class=\"oppia-opportunities-details\">\n    <div class=\"oppia-opportunities-subheading oppia-animate-fadein\">\n      <span title=\"<[$ctrl.opportunity.subheading]>\"\n            class=\"protractor-test-opportunity-list-item-subheading\"\n            ng-show=\"!$ctrl.opportunityDataIsLoading\">  <[$ctrl.opportunity.subheading | wrapTextWithEllipsis : 60]>\n      </span>\n      <lazy-loading ng-show=\"$ctrl.opportunityDataIsLoading\"></lazy-loading>\n    </div>\n    <div class=\"oppia-opportunities-heading oppia-animate-fadein\">\n      <span class=\"protractor-test-opportunity-list-item-heading\" title=\"<[$ctrl.opportunity.heading]>\" ng-show=\"!$ctrl.opportunityDataIsLoading\">\n        <[$ctrl.opportunity.heading | wrapTextWithEllipsis : $ctrl.opportunityHeadingTruncationLength]>\n      </span>\n      <lazy-loading ng-show=\"$ctrl.opportunityDataIsLoading\"></lazy-loading>\n    </div>\n  </div>\n  <div class=\"oppia-opportunities-progress oppia-animate-fadein\" ng-if=\"$ctrl.progressBarRequired\">\n    <div class=\"oppia-opportunities-progress-bar\">\n      <div ng-show=\"!$ctrl.opportunityDataIsLoading\" class=\"progress\">\n        <div class=\"progress-bar bg-success\" role=\"progressbar\" ng-style=\"$ctrl.progressBarStyle\"></div>\n      </div>\n      <lazy-loading ng-show=\"$ctrl.opportunityDataIsLoading\"></lazy-loading>\n    </div>\n    <div class=\"oppia-opportunities-progress-label\">\n      <span class=\"protractor-test-opportunity-list-item-progress-percentage\"\n            ng-show=\"!$ctrl.opportunityDataIsLoading\">\n        (<[$ctrl.progressPercentage]>)\n      </span>\n      <lazy-loading ng-show=\"$ctrl.opportunityDataIsLoading\"></lazy-loading>\n    </div>\n  </div>\n  <div class=\"oppia-opportunities-label-container oppia-animate-fadein\"ng-if=\"$ctrl.labelRequired\">\n    <div class=\"oppia-opportunities-label\" ng-style=\"$ctrl.labelStyle\" >\n      <span class=\"protractor-test-opportunity-list-item-label\" ng-show=\"!$ctrl.opportunityDataIsLoading\"><[$ctrl.labelText]></span>\n      <lazy-loading ng-show=\"$ctrl.opportunityDataIsLoading\"></lazy-loading>\n    </div>\n  </div>\n  <div class=\"oppia-opportunities-button-container oppia-animate-fadein\">\n    <button class=\"oppia-opportunities-button protractor-test-opportunity-list-item-button\"\n            ng-show=\"!$ctrl.opportunityDataIsLoading\"\n            ng-click=\"$ctrl.onClickActionButton($ctrl.opportunity.id)\">\n      <[$ctrl.opportunity.actionButtonTitle]>\n    </button>\n  </div>\n</div>\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/opportunities-list-item/opportunities-list-item.component.spec.ts",
      "content": "// Copyright 2020 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for opportunitiesListItem.\n */\n\ndescribe('Opportunities List Item Component', function() {\n  var ctrl = null;\n  var $scope = null;\n\n  beforeEach(angular.mock.module('oppia'));\n\n  describe('when opportunity is provided', function() {\n    beforeEach(angular.mock.inject(function($injector, $componentController) {\n      var $rootScope = $injector.get('$rootScope');\n\n      $scope = $rootScope.$new();\n      ctrl = $componentController('opportunitiesListItem', {\n        $scope: $scope,\n      }, {\n        opportunity: {\n          labelText: 'Label text',\n          labelColor: '#fff',\n          progressPercentage: 50\n        },\n        onClickActionButton: () => jasmine.createSpy('click', () => {}),\n        labelRequired: true,\n        progressBarRequired: true,\n        opportunityHeadingTruncationLength: 35\n      });\n      ctrl.$onInit();\n    }));\n\n    it('should initialize $scope properties after controller is initialized',\n      function() {\n        expect(ctrl.opportunityDataIsLoading).toBe(false);\n        expect(ctrl.labelText).toBe('Label text');\n        expect(ctrl.labelStyle).toEqual({\n          'background-color': '#fff'\n        });\n        expect(ctrl.opportunityHeadingTruncationLength).toBe(35);\n        expect(ctrl.progressPercentage).toBe('50%');\n        expect(ctrl.progressBarStyle).toEqual({\n          width: '50%'\n        });\n      });\n  });\n\n  describe('when opportunity is not provided', function() {\n    beforeEach(angular.mock.inject(function($injector, $componentController) {\n      var $rootScope = $injector.get('$rootScope');\n\n      $scope = $rootScope.$new();\n      ctrl = $componentController('opportunitiesListItem', {\n        $scope: $scope,\n      }, {\n        opportunity: null,\n        onClickActionButton: () => jasmine.createSpy('click', () => {}),\n        labelRequired: true,\n        progressBarRequired: true,\n        opportunityHeadingTruncationLength: null\n      });\n      ctrl.$onInit();\n    }));\n\n    it('should initialize $scope properties after controller is initialized',\n      function() {\n        expect(ctrl.opportunityDataIsLoading).toBe(true);\n        expect(ctrl.labelText).toBe(undefined);\n        expect(ctrl.labelStyle).toBe(undefined);\n        expect(ctrl.opportunityHeadingTruncationLength).toBe(40);\n      });\n  });\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/opportunities-list-item/opportunities-list-item.component.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for the item view of an opportunity.\n */\nrequire(\n  'components/common-layout-directives/common-elements/' +\n  'lazy-loading.component.ts');\n\nrequire(\n  'filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts');\n\nangular.module('oppia').component('opportunitiesListItem', {\n  bindings: {\n    opportunity: '<',\n    onClickActionButton: '<',\n    labelRequired: '<',\n    progressBarRequired: '<',\n    opportunityHeadingTruncationLength: '<'\n  },\n  template: require('./opportunities-list-item.component.html'),\n  controller: [\n    function() {\n      var ctrl = this;\n      ctrl.$onInit = function() {\n        ctrl.opportunityDataIsLoading = false;\n        if (ctrl.opportunity && ctrl.labelRequired) {\n          ctrl.labelText = ctrl.opportunity.labelText;\n          ctrl.labelStyle = {\n            'background-color': ctrl.opportunity.labelColor\n          };\n        }\n\n        if (!ctrl.opportunityHeadingTruncationLength) {\n          ctrl.opportunityHeadingTruncationLength = 40;\n        }\n        if (ctrl.opportunity) {\n          if (ctrl.opportunity.progressPercentage) {\n            ctrl.progressPercentage = (\n              ctrl.opportunity.progressPercentage + '%');\n            ctrl.progressBarStyle = {width: ctrl.progressPercentage};\n          }\n        } else {\n          ctrl.opportunityDataIsLoading = true;\n        }\n      };\n    }\n  ]\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/opportunities-list/opportunities-list.component.ts",
      "content": "// Copyright 2019 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for the list view of opportunities.\n */\n\nrequire(\n  'pages/contributor-dashboard-page/opportunities-list-item/' +\n  'opportunities-list-item.component.ts');\n\nimport { Subscription } from 'rxjs';\n\nangular.module('oppia').component('opportunitiesList', {\n  bindings: {\n    loadOpportunities: '<',\n    labelRequired: '<',\n    progressBarRequired: '<',\n    loadMoreOpportunities: '<',\n    onClickActionButton: '<',\n    opportunityHeadingTruncationLength: '<'\n  },\n  template: require('./opportunities-list.component.html'),\n  controller: [\n    '$rootScope', 'ContributionOpportunitiesService',\n    'TranslationLanguageService', 'OPPORTUNITIES_PAGE_SIZE', function(\n        $rootScope, ContributionOpportunitiesService,\n        TranslationLanguageService, OPPORTUNITIES_PAGE_SIZE) {\n      var ctrl = this;\n      var opportunities = [];\n      ctrl.visibleOpportunities = [];\n      ctrl.directiveSubscriptions = new Subscription();\n\n      ctrl.directiveSubscriptions.add(\n        TranslationLanguageService.onActiveLanguageChanged.subscribe(\n          () => ctrl.$onInit()));\n\n      ctrl.directiveSubscriptions.add(\n        ContributionOpportunitiesService\n          .reloadOpportunitiesEventEmitter.subscribe(() => ctrl.$onInit()));\n\n      ctrl.directiveSubscriptions.add(\n        ContributionOpportunitiesService\n          .removeOpportunitiesEventEmitter.subscribe((opportunityIds) => {\n            opportunities = opportunities.filter(function(opportunity) {\n              return opportunityIds.indexOf(opportunity.id) < 0;\n            });\n            ctrl.visibleOpportunities = opportunities.slice(\n              0, OPPORTUNITIES_PAGE_SIZE);\n            ctrl.lastPageNumber = Math.ceil(\n              opportunities.length / OPPORTUNITIES_PAGE_SIZE);\n          }));\n\n      ctrl.$onDestroy = function() {\n        ctrl.directiveSubscriptions.unsubscribe();\n      };\n\n      ctrl.$onInit = function() {\n        opportunities = [];\n        ctrl.visibleOpportunities = [];\n        ctrl.activePageNumber = 1;\n        ctrl.lastPageNumber = 1000;\n        ctrl.loadingOpportunityData = true;\n\n        ctrl.loadOpportunities().then(function({opportunitiesDicts, more}) {\n          opportunities = opportunitiesDicts;\n          ctrl.visibleOpportunities = opportunities.slice(\n            0, OPPORTUNITIES_PAGE_SIZE);\n          ctrl.lastPageNumber = more ? ctrl.lastPageNumber : Math.ceil(\n            opportunities.length / OPPORTUNITIES_PAGE_SIZE);\n          ctrl.loadingOpportunityData = false;\n          // TODO(#8521): Remove the use of $rootScope.$apply()\n          // once the controller is migrated to angular.\n          $rootScope.$applyAsync();\n        });\n      };\n\n      ctrl.gotoPage = function(pageNumber) {\n        var startIndex = (pageNumber - 1) * OPPORTUNITIES_PAGE_SIZE;\n        var endIndex = pageNumber * OPPORTUNITIES_PAGE_SIZE;\n        if (startIndex >= opportunities.length) {\n          ctrl.visibleOpportunities = [];\n          ctrl.loadingOpportunityData = true;\n          ctrl.loadMoreOpportunities().then(\n            function({opportunitiesDicts, more}) {\n              opportunities = opportunities.concat(opportunitiesDicts);\n              ctrl.visibleOpportunities = opportunities.slice(\n                startIndex, endIndex);\n              ctrl.lastPageNumber = more ? ctrl.lastPageNumber : Math.ceil(\n                opportunities.length / OPPORTUNITIES_PAGE_SIZE);\n              ctrl.loadingOpportunityData = false;\n              // TODO(#8521): Remove the use of $rootScope.$apply()\n              // once the controller is migrated to angular.\n              $rootScope.$applyAsync();\n            });\n        } else {\n          ctrl.visibleOpportunities = opportunities.slice(startIndex, endIndex);\n        }\n        ctrl.activePageNumber = pageNumber;\n      };\n    }]\n});\n"
    },
    {
      "filename": "core/templates/pages/contributor-dashboard-page/question-opportunities/question-opportunities.component.html",
      "content": "<div>\n  <opportunities-list load-opportunities=\"$ctrl.loadOpportunities\"\n                      on-click-action-button=\"$ctrl.onClickSuggestQuestionButton\"\n                      load-more-opportunities=\"$ctrl.loadMoreOpportunities\"\n                      progress-bar-required=\"true\"\n                      opportunity-heading-truncation-length=\"50\">\n  </opportunities-list>\n</div>\n"
    },
    {
      "filename": "core/tests/protractor_desktop/contributorDashboard.js",
      "content": "// Copyright 2020 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview End-to-end tests for the contributor dashboard page.\n */\n\nvar forms = require('../protractor_utils/forms.js');\nvar general = require('../protractor_utils/general.js');\nvar users = require('../protractor_utils/users.js');\nvar workflow = require('../protractor_utils/workflow.js');\n\nvar AdminPage = require('../protractor_utils/AdminPage.js');\nvar ContributorDashboardPage = require(\n  '../protractor_utils/ContributorDashboardPage.js');\nvar ExplorationEditorPage = require(\n  '../protractor_utils/ExplorationEditorPage.js');\nvar SkillEditorPage = require(\n  '../protractor_utils/SkillEditorPage.js');\nvar TopicsAndSkillsDashboardPage = require(\n  '../protractor_utils/TopicsAndSkillsDashboardPage.js');\n\ndescribe('Contributor dashboard page', function() {\n  const TOPIC_NAMES = [\n    'Topic 0 for contribution', 'Topic 1 for contribution'];\n  const SKILL_DESCRIPTIONS = [\n    'Skill 0 for suggestion', 'Skill 1 for suggestion'];\n  const REVIEW_MATERIALS = [\n    'Review Material 0',\n    'Review Material 1'];\n  const ADMIN_EMAIL = 'management@contributor.com';\n  const USER_EMAILS = ['user0@contributor.com', 'user1@contributor.com'];\n  const HINDI_LANGUAGE = 'Hindi';\n  let contributorDashboardPage = null;\n  let contributorDashboardTranslateTextTab = null;\n  let topicsAndSkillsDashboardPage = null;\n  let skillEditorPage = null;\n  let explorationEditorPage = null;\n  let explorationEditorMainTab = null;\n  let adminPage = null;\n\n  beforeAll(async function() {\n    contributorDashboardPage = (\n      new ContributorDashboardPage.ContributorDashboardPage());\n    contributorDashboardTranslateTextTab = (\n      contributorDashboardPage.getTranslateTextTab());\n    topicsAndSkillsDashboardPage =\n      new TopicsAndSkillsDashboardPage.TopicsAndSkillsDashboardPage();\n    skillEditorPage =\n      new SkillEditorPage.SkillEditorPage();\n    explorationEditorPage = new ExplorationEditorPage.ExplorationEditorPage();\n    explorationEditorMainTab = explorationEditorPage.getMainTab();\n    adminPage = new AdminPage.AdminPage();\n    await users.createUser(USER_EMAILS[0], 'user0');\n    await users.createUser(USER_EMAILS[1], 'user1');\n    await users.createAndLoginAdminUser(ADMIN_EMAIL, 'management');\n    await adminPage.editConfigProperty(\n      'Whether the contributor can suggest questions for skill opportunities.',\n      'Boolean', async function(elem) {\n        await elem.setValue(true);\n      });\n\n    await topicsAndSkillsDashboardPage.get();\n    await topicsAndSkillsDashboardPage.createTopic(\n      TOPIC_NAMES[0], 'community-topic-one', 'Topic description 1', false);\n    await workflow.createSkillAndAssignTopic(\n      SKILL_DESCRIPTIONS[0], REVIEW_MATERIALS[0], TOPIC_NAMES[0]);\n    await topicsAndSkillsDashboardPage.get();\n    await topicsAndSkillsDashboardPage.createSkillWithDescriptionAndExplanation(\n      SKILL_DESCRIPTIONS[1], REVIEW_MATERIALS[1]);\n\n    // Allow user1 to review question suggestions.\n    await adminPage.get();\n    await adminPage.assignQuestionReviewer('user1');\n    await users.logout();\n  });\n\n  it('should allow user to switch to translate text tab', async function() {\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.navigateToTranslateTextTab();\n    await contributorDashboardTranslateTextTab.changeLanguage(HINDI_LANGUAGE);\n    await contributorDashboardTranslateTextTab.expectSelectedLanguageToBe(\n      HINDI_LANGUAGE);\n  });\n\n  it('should allow reviewer to accept question suggestions', async function() {\n    // Baseline verification.\n    await users.login(USER_EMAILS[0]);\n    await contributorDashboardPage.get();\n\n    await contributorDashboardPage.navigateToSubmitQuestionTab();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0], null, '(0.00%)');\n\n    // Submit suggestion as user0.\n    await contributorDashboardPage.clickOpportunityActionButton(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0]);\n    await skillEditorPage.confirmSkillDifficulty();\n    await explorationEditorMainTab.setContent(\n      await forms.toRichText('Question 1'));\n    await explorationEditorMainTab.setInteraction('TextInput');\n    await explorationEditorMainTab.addResponse(\n      'TextInput', await forms.toRichText('Correct Answer'), null, false,\n      'FuzzyEquals', ['correct']);\n    await (await explorationEditorMainTab.getResponseEditor(0)).markAsCorrect();\n    await explorationEditorMainTab.addHint('Hint 1');\n    await explorationEditorMainTab.addSolution('TextInput', {\n      correctAnswer: 'correct',\n      explanation: 'It is correct'\n    });\n    await skillEditorPage.saveQuestion();\n    await users.logout();\n\n    // Review and accept the suggestion as user1.\n    await users.login(USER_EMAILS[1]);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.clickOpportunityActionButton(\n      'Question 1', SKILL_DESCRIPTIONS[0]);\n    await (\n      contributorDashboardPage.waitForQuestionSuggestionReviewModalToAppear());\n    await contributorDashboardPage.clickAcceptQuestionSuggestionButton();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectEmptyOpportunityAvailabilityMessage();\n\n    // Validate progress percentage was updated in the opportunity.\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.navigateToSubmitQuestionTab();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    // After acceptance, progress percentage should be 1/50 = 2%.\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0], null, '(2.00%)');\n    await users.logout();\n\n    // Validate the contribution status changed.\n    await users.login(USER_EMAILS[0]);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectNumberOfOpportunitiesToBe(1);\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      'Question 1', SKILL_DESCRIPTIONS[0], 'Accepted', null);\n  });\n\n  it('should allow reviewer to reject question suggestions', async function() {\n    // Baseline verification.\n    await users.login(USER_EMAILS[0]);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.navigateToSubmitQuestionTab();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0], null, '(2.00%)');\n\n    // Submit suggestion as user0.\n    await contributorDashboardPage.clickOpportunityActionButton(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0]);\n    await skillEditorPage.confirmSkillDifficulty();\n    await explorationEditorMainTab.setContent(\n      await forms.toRichText('Question 1'));\n    await explorationEditorMainTab.setInteraction('TextInput');\n    await explorationEditorMainTab.addResponse(\n      'TextInput', await forms.toRichText('Correct Answer'), null, false,\n      'FuzzyEquals', ['correct']);\n    await (await explorationEditorMainTab.getResponseEditor(0)).markAsCorrect();\n    await explorationEditorMainTab.addHint('Hint 1');\n    await explorationEditorMainTab.addSolution('TextInput', {\n      correctAnswer: 'correct',\n      explanation: 'It is correct'\n    });\n    await skillEditorPage.saveQuestion();\n    await users.logout();\n\n    // Review and reject the suggestion as user1.\n    await users.login(USER_EMAILS[1]);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.clickOpportunityActionButton(\n      'Question 1', SKILL_DESCRIPTIONS[0]);\n    await (\n      contributorDashboardPage.waitForQuestionSuggestionReviewModalToAppear());\n    await contributorDashboardPage.setQuestionSuggestionReviewMessage(\n      'review message');\n    await contributorDashboardPage.clickRejectQuestionSuggestionButton();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectEmptyOpportunityAvailabilityMessage();\n\n    // Validate progress percentage remains the same in the opportunity.\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.navigateToSubmitQuestionTab();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      SKILL_DESCRIPTIONS[0], TOPIC_NAMES[0], null, '(2.00%)');\n    await users.logout();\n\n    // Validate the contribution status changed.\n    await users.login(USER_EMAILS[0]);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.waitForOpportunitiesToLoad();\n    await contributorDashboardPage.expectNumberOfOpportunitiesToBe(2);\n    await contributorDashboardPage.expectOpportunityWithPropertiesToExist(\n      'Question 1', SKILL_DESCRIPTIONS[0], 'Rejected', null);\n  });\n\n  afterEach(async function() {\n    await general.checkForConsoleErrors([]);\n  });\n});\n\ndescribe('Admin page contributor reviewer form', function() {\n  var HINDI_LANGUAGE = 'Hindi';\n  var adminPage = null;\n  var contributorDashboardPage = null;\n  var translationReviewerUsername = 'translator';\n  var translationReviewerEmail = 'translator@contributor.com';\n  var voiceoverReviewerUsername = 'voiceartist';\n  var voiceoverReviewerEmail = 'voiceartist@contributor.com';\n  var questionReviewerUsername = 'questionreviewer';\n  var questionReviewerEmail = 'questionreviewer@contributor.com';\n  var ADMIN_EMAIL = 'adminToAssignReviewer@adminTab.com';\n\n  beforeAll(async function() {\n    adminPage = new AdminPage.AdminPage();\n    contributorDashboardPage = (\n      new ContributorDashboardPage.ContributorDashboardPage());\n    await users.createUser(\n      translationReviewerEmail, translationReviewerUsername);\n    await users.createUser(voiceoverReviewerEmail, voiceoverReviewerUsername);\n    await users.createUser(questionReviewerEmail, questionReviewerUsername);\n    await users.createAndLoginAdminUser(ADMIN_EMAIL, 'assignReviewer');\n    await adminPage.editConfigProperty(\n      'Whether the contributor can suggest questions for skill opportunities.',\n      'Boolean', async function(elem) {\n        await elem.setValue(true);\n      });\n    await users.logout();\n  });\n\n  beforeEach(async function() {\n    await users.login(ADMIN_EMAIL, true);\n  });\n\n  it('should allow admin to add translation reviewer', async function() {\n    await adminPage.get();\n    await adminPage.assignTranslationReviewer(\n      translationReviewerUsername, HINDI_LANGUAGE);\n    await adminPage.expectUserToBeTranslationReviewer(\n      translationReviewerUsername, HINDI_LANGUAGE);\n    await users.logout();\n\n    await users.login(translationReviewerEmail);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.expectUserToBeTranslationReviewer(\n      HINDI_LANGUAGE);\n    await users.logout();\n  });\n\n  it('should allow admin to add voiceover reviewer', async function() {\n    await adminPage.get();\n    await adminPage.assignVoiceoverReviewer(\n      voiceoverReviewerUsername, HINDI_LANGUAGE);\n    await adminPage.expectUserToBeVoiceoverReviewer(\n      voiceoverReviewerUsername, HINDI_LANGUAGE);\n    await users.logout();\n\n    await users.login(voiceoverReviewerEmail);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.expectUserToBeVoiceoverReviewer(\n      HINDI_LANGUAGE);\n    await users.logout();\n  });\n\n  it('should allow admin to add question reviewer', async function() {\n    await adminPage.get();\n    await adminPage.assignQuestionReviewer(questionReviewerUsername);\n    await adminPage.expectUserToBeQuestionReviewer(questionReviewerUsername);\n    await users.logout();\n\n    await users.login(questionReviewerEmail);\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.expectUserToBeQuestionReviewer();\n    await users.logout();\n  });\n\n  afterEach(async function() {\n    await general.checkForConsoleErrors([]);\n  });\n});\n\ndescribe('Translation contribution featured languages', () => {\n  var contributorDashboardPage = null;\n  var contributorDashboardTranslateTextTab = null;\n\n  beforeAll(async function() {\n    contributorDashboardPage = (\n      new ContributorDashboardPage.ContributorDashboardPage());\n    contributorDashboardTranslateTextTab = (\n      contributorDashboardPage.getTranslateTextTab());\n    await users.createAndLoginAdminUser(\n      'config@contributorDashboard.com', 'contributorDashboard');\n    const adminPage = new AdminPage.AdminPage();\n    await adminPage.editConfigProperty(\n      'Featured Translation Languages',\n      'List',\n      async function(elem) {\n        const featured = await elem.addItem('Dictionary');\n        await (await featured.editEntry(0, 'Unicode')).setValue('fr');\n        await (await featured.editEntry(1, 'Unicode'))\n          .setValue('Partnership with ABC');\n      });\n    await users.logout();\n  });\n\n  beforeEach(async function() {\n    await contributorDashboardPage.get();\n    await contributorDashboardPage.navigateToTranslateTextTab();\n  });\n\n  it('should show correct featured languages', async function() {\n    await contributorDashboardTranslateTextTab\n      .expectFeaturedLanguagesToBe(['French']);\n  });\n\n  it('should show correct explanation', async function() {\n    await contributorDashboardTranslateTextTab\n      .mouseoverFeaturedLanguageTooltip(0);\n    await contributorDashboardTranslateTextTab\n      .expectFeaturedLanguageExplanationToBe('Partnership with ABC');\n  });\n\n  afterEach(async function() {\n    await general.checkForConsoleErrors([]);\n  });\n});\n"
    }
  ]
}