{
  "repo_name": "oppia_oppia",
  "issue_id": "17065",
  "issue_description": "# [BUG]: Keyboard focus is not going to the Practice question section to enter text into the textbox in Contributor dashboard\n\n### Describe the bug\r\n\r\nKeyboard focus is not going to the Practice question section to enter text into the textbox in Contributor dashboard\r\n\r\n### Steps To Reproduce\r\n\r\n1. Login to www.oppiatestserver.org\r\n2. Go to Contributor dashboard\r\n3. Click on Submit question- Suggest question\r\n4. Select difficulty level as Medium and click on Continue button\r\n5. Try to access the dialogbox to go to the 'Your Practice question' to enter text \r\n6. Focus is going only to the buttons close, cancel, Go back buttons\r\n\r\n### Expected Behavior\r\n\r\nFocus should go to Your Practice question- Type your question here\r\nUsers should be able to add interactions, hints and solutions using keyboard\r\n\r\n### Screenshots/Videos\r\n\r\n[Screen recording 2023-01-20 10.38.33 AM.webm](https://user-images.githubusercontent.com/101634267/213622699-8097df93-ae98-4410-8f0e-96053283506e.webm)\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nOther\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nChrome\r\n\r\n### Browser version\r\n\r\n108.0.5359.111\r\n\r\n### Additional context\r\n\r\n_No response_",
  "issue_comments": [
    {
      "id": 1399413244,
      "user": "Simer13",
      "body": "For focusing on the practice question we can add an hover element to it and also change the color opacity and add text-shadow for better effects. We can try it on once and see if this contrast fits in with all otherwise we can remove the text-shadow and directly add a italic or bold to keep it simple. I will fix it if you assign me. @seanlip @KolliAnitha "
    },
    {
      "id": 1399541557,
      "user": "seanlip",
      "body": "@Simer13 This doesn't address the issue, which is talking about *keyboard* focus for accessibility. Additionally, when explaining what you plan to do, please also give details on the names of files you'll be changing, what you plan to change in each file, etc., per the guidance on https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue. \r\n\r\nIf you're not familiar with accessibility engineering, please instead consider issues that have been labelled \"good first issue\".\r\n\r\nThanks!"
    },
    {
      "id": 1433497750,
      "user": "sagangwee",
      "body": "### For new contributors\n\n- See the [Contributor dashboard wiki page](https://github.com/oppia/oppia/wiki/Contributor-dashboard) for how to get started developing for the contributor dashboard.\n- See the [Testing for Accessibility wiki page](https://github.com/oppia/oppia/wiki/Testing-for-Accessibility) for accessibility testing guidelines. To fix this issue, you will likely need to manipulate the HTML or CSS."
    },
    {
      "id": 1433497998,
      "user": "github-actions[bot]",
      "body": "Hi @sagangwee, thanks for proposing this as a good first issue. I am removing the label for now and looping in @DubeySandeep to approve the label. It will be added back if approved. Thanks!"
    },
    {
      "id": 1435930033,
      "user": "AbhiXShakya",
      "body": "I am not able to see Submit question tab."
    },
    {
      "id": 1435971426,
      "user": "seanlip",
      "body": "You'll need to give yourself permissions as a question submitter locally. See the first bullet point in https://github.com/oppia/oppia/issues/17065#issuecomment-1433497750."
    },
    {
      "id": 1446011046,
      "user": "Kibahor",
      "body": "Hi,\r\nI'm able to reproduce the error and found the original file in the project : core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-editor-modal.component.html.\r\n\r\nI suppose it's link to a missing CSS value in the file, like tabindex or :focus. I suppose also that there are common CSS files that already do that or directly through angular. It's my first issue in this project, i'm a bit lost in the project.\r\nI want to work on this issue, i have already read wiki page about Contributor Dashboard and Testing Accessibility an i have also done instruction on Contributing-code-to-Oppia#setting-things-up.\r\n\r\nScreenshot of the html tag : \r\n![image](https://user-images.githubusercontent.com/56401976/221528438-a649e932-bf3b-42ee-b326-77223b067beb.png)\r\n"
    },
    {
      "id": 1446158759,
      "user": "seanlip",
      "body": "@Kibahor Thanks for the note! I think you are close, but might need to dig just a little more to figure out the right thing to do. You might want to dig into the oppia-question-editor directive and try to go deeper into the sub-components until you figure out how to make the edit box focusable.\r\n\r\nIf you want to claim this issue, please show a video that shows the tab focus working on your local server, and then we can assign you. Thanks!"
    },
    {
      "id": 1446667628,
      "user": "lalitmohit",
      "body": "@seanlip ,I have added tabindex=\"0\" in the file {question-editor.component.html}  at the location   {oppia/core/templates/components/question-directives/question-editor/question-editor.component.html}\r\nAnd it's working fine\r\nUpdated code\r\n![Screenshot from 2023-02-27 22-06-43](https://user-images.githubusercontent.com/107416385/221624009-a20bfdd1-a92d-4c44-a3d4-5577817e479e.png)\r\n\r\n\r\nResponse \r\nplease look\r\n[Screencast from 27-02-23 09:22:52 PM IST.webm](https://user-images.githubusercontent.com/107416385/221624402-addc99d6-6d65-4ddc-83f3-63f39fbcf7a4.webm)\r\nCan you please assign it to me?"
    },
    {
      "id": 1450329750,
      "user": "Kibahor",
      "body": "@lalitmohit \r\nEffectively, that working but you can't access to the rich text editor by pressing \\<enter\\>. So i tested on the dummy div\r\n containing \"Type your question...\" and the edit icon in **{core/templates/components/state-editor/state-content-editor/state-content-editor.component.html}.**  \r\n ![image](https://user-images.githubusercontent.com/56401976/222180508-7b042ba0-c974-467d-a4da-4e2bfcbc1e0a.png)\r\n When selected there no outline (logic because there is no css style when this element is focus) and it's also impossible to enter to the rich text editor.\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183065-81bf381c-b792-4e31-b727-66a57b7d5242.mp4\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183068-bd2a157c-3cfc-4666-8ed0-8d4c0bd468b0.mp4"
    },
    {
      "id": 1450342655,
      "user": "seanlip",
      "body": "Yup -- confirming that one requirement for this issue is that you need to be able to get into the question editor \"edit mode\" using the keyboard. Thanks for mentioning this, @Kibahor! "
    },
    {
      "id": 1450362176,
      "user": "Kibahor",
      "body": "> Yup -- confirming that one requirement for this issue is that you need to be able to get into the question editor \"edit mode\" using the keyboard. Thanks for mentioning this, @Kibahor!\r\n\r\nSo can i be assign to the issue ?"
    },
    {
      "id": 1450364431,
      "user": "seanlip",
      "body": "@Kibahor Er, I don't see a proposal/demo of an actual solution yet..."
    },
    {
      "id": 1450370274,
      "user": "Kibahor",
      "body": "> @Kibahor Er, I don't see a proposal/demo of an actual solution yet...\r\n\r\nYou want to mean that i haven't pushed on my fork, if it is that wait 2 min that i push my modification"
    },
    {
      "id": 1450373986,
      "user": "seanlip",
      "body": "@Kibahor No, I need to see an explanation in this issue thread of what files you're planning to change, what changes you're planning to make, and a video showing the user experience resulting from your changes. See https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue."
    },
    {
      "id": 1455138115,
      "user": "hemantmm",
      "body": "Hi, @seanlip like I have tried to fix this issue \r\n\r\n\r\nhttps://user-images.githubusercontent.com/92446645/222972784-9bc5e9a1-bdce-4ead-a8e2-d02a19979e21.mp4\r\n\r\n"
    },
    {
      "id": 1455142801,
      "user": "seanlip",
      "body": "@hemantmm I don't think your video solves this part: https://github.com/oppia/oppia/issues/17065#issuecomment-1450342655"
    },
    {
      "id": 1460251327,
      "user": "Kibahor",
      "body": "Hi,\r\nI find a way to open the editor when a key is pressed.\r\nFiles i modified : \r\n![image](https://user-images.githubusercontent.com/56401976/223740944-e6438363-c331-4c11-94ba-3ae32a91176e.png)\r\n\r\nVideo showing the result :\r\n\r\nhttps://user-images.githubusercontent.com/56401976/223740379-d2a9b029-5ce6-4509-81b1-9273ba5b34a3.mp4\r\n\r\n\r\n\r\nNow the problem is in the interaction window. I'm not able to choose an interactions. I'm currently working on it.\r\n"
    },
    {
      "id": 1470187234,
      "user": "Kibahor",
      "body": "Hi,\r\nI guess i have a working solution, but yet it's not perfect : \r\n- 1 or 2 elements are not visible when focus\r\n- in some menus focus goes to background (like the [issue #17064](https://github.com/oppia/oppia/issues/17064).)\r\n- button to remove an interaction is not working with keyboard\r\n\r\nDemo :\r\n\r\nhttps://user-images.githubusercontent.com/56401976/225350721-e69fda75-028c-458f-ab42-3a65ea698806.mp4\r\n\r\nModified files : https://github.com/oppia/oppia/compare/develop...Kibahor:oppia:add-keyboard-focus-on-practice-question \r\n\r\n"
    },
    {
      "id": 1470405305,
      "user": "seanlip",
      "body": "@Kibahor This is good enough to start with, thanks. I'm happy to assign you! You can leave fixing #17064 to a separate PR. Try to fix some of the other issues if possible, but if not it's fine in this case to submit a PR fixing as much as you can and filing new issues for the remaining things you've found (since the original issue filed here was just about getting into the Practice Questions editor box).\r\n\r\nThanks a lot for digging into this!"
    },
    {
      "id": 1505029593,
      "user": "Ash-2k3",
      "body": "@Kibahor has resolved the issue in https://github.com/oppia/oppia/pull/17746. However, unit tests still need to be written. The original author of the pull request is not available to write the unit tests, so the pull request has been closed. To resolve this issue, you can either create a new PR with the same changes along with unit tests or continue working from the author's branch."
    },
    {
      "id": 1598131290,
      "user": "Patel-Muhammad",
      "body": "Hi @KolliAnitha I think this issue is solve now, please take a look. Thanks!\r\n\r\nhttps://github.com/oppia/oppia/assets/96219910/3f5522c5-c9ea-4cc3-a6b2-bbb5bb338fd5\r\n\r\n"
    },
    {
      "id": 1598162039,
      "user": "KolliAnitha",
      "body": "@Patel-Muhammad as mentioned in the above comments, the issue has been fixed and it is working fine now."
    },
    {
      "id": 1598169662,
      "user": "Patel-Muhammad",
      "body": "Closing this issue as it is fixed "
    }
  ],
  "text_context": "# [BUG]: Keyboard focus is not going to the Practice question section to enter text into the textbox in Contributor dashboard\n\n### Describe the bug\r\n\r\nKeyboard focus is not going to the Practice question section to enter text into the textbox in Contributor dashboard\r\n\r\n### Steps To Reproduce\r\n\r\n1. Login to www.oppiatestserver.org\r\n2. Go to Contributor dashboard\r\n3. Click on Submit question- Suggest question\r\n4. Select difficulty level as Medium and click on Continue button\r\n5. Try to access the dialogbox to go to the 'Your Practice question' to enter text \r\n6. Focus is going only to the buttons close, cancel, Go back buttons\r\n\r\n### Expected Behavior\r\n\r\nFocus should go to Your Practice question- Type your question here\r\nUsers should be able to add interactions, hints and solutions using keyboard\r\n\r\n### Screenshots/Videos\r\n\r\n[Screen recording 2023-01-20 10.38.33 AM.webm](https://user-images.githubusercontent.com/101634267/213622699-8097df93-ae98-4410-8f0e-96053283506e.webm)\r\n\r\n### What device are you using?\r\n\r\nDesktop\r\n\r\n### Operating System\r\n\r\nOther\r\n\r\n### What browsers are you seeing the problem on?\r\n\r\nChrome\r\n\r\n### Browser version\r\n\r\n108.0.5359.111\r\n\r\n### Additional context\r\n\r\n_No response_\n\nFor focusing on the practice question we can add an hover element to it and also change the color opacity and add text-shadow for better effects. We can try it on once and see if this contrast fits in with all otherwise we can remove the text-shadow and directly add a italic or bold to keep it simple. I will fix it if you assign me. @seanlip @KolliAnitha \n\n@Simer13 This doesn't address the issue, which is talking about *keyboard* focus for accessibility. Additionally, when explaining what you plan to do, please also give details on the names of files you'll be changing, what you plan to change in each file, etc., per the guidance on https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue. \r\n\r\nIf you're not familiar with accessibility engineering, please instead consider issues that have been labelled \"good first issue\".\r\n\r\nThanks!\n\n### For new contributors\n\n- See the [Contributor dashboard wiki page](https://github.com/oppia/oppia/wiki/Contributor-dashboard) for how to get started developing for the contributor dashboard.\n- See the [Testing for Accessibility wiki page](https://github.com/oppia/oppia/wiki/Testing-for-Accessibility) for accessibility testing guidelines. To fix this issue, you will likely need to manipulate the HTML or CSS.\n\nHi @sagangwee, thanks for proposing this as a good first issue. I am removing the label for now and looping in @DubeySandeep to approve the label. It will be added back if approved. Thanks!\n\nI am not able to see Submit question tab.\n\nYou'll need to give yourself permissions as a question submitter locally. See the first bullet point in https://github.com/oppia/oppia/issues/17065#issuecomment-1433497750.\n\nHi,\r\nI'm able to reproduce the error and found the original file in the project : core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-editor-modal.component.html.\r\n\r\nI suppose it's link to a missing CSS value in the file, like tabindex or :focus. I suppose also that there are common CSS files that already do that or directly through angular. It's my first issue in this project, i'm a bit lost in the project.\r\nI want to work on this issue, i have already read wiki page about Contributor Dashboard and Testing Accessibility an i have also done instruction on Contributing-code-to-Oppia#setting-things-up.\r\n\r\nScreenshot of the html tag : \r\n![image](https://user-images.githubusercontent.com/56401976/221528438-a649e932-bf3b-42ee-b326-77223b067beb.png)\r\n\n\n@Kibahor Thanks for the note! I think you are close, but might need to dig just a little more to figure out the right thing to do. You might want to dig into the oppia-question-editor directive and try to go deeper into the sub-components until you figure out how to make the edit box focusable.\r\n\r\nIf you want to claim this issue, please show a video that shows the tab focus working on your local server, and then we can assign you. Thanks!\n\n@seanlip ,I have added tabindex=\"0\" in the file {question-editor.component.html}  at the location   {oppia/core/templates/components/question-directives/question-editor/question-editor.component.html}\r\nAnd it's working fine\r\nUpdated code\r\n![Screenshot from 2023-02-27 22-06-43](https://user-images.githubusercontent.com/107416385/221624009-a20bfdd1-a92d-4c44-a3d4-5577817e479e.png)\r\n\r\n\r\nResponse \r\nplease look\r\n[Screencast from 27-02-23 09:22:52 PM IST.webm](https://user-images.githubusercontent.com/107416385/221624402-addc99d6-6d65-4ddc-83f3-63f39fbcf7a4.webm)\r\nCan you please assign it to me?\n\n@lalitmohit \r\nEffectively, that working but you can't access to the rich text editor by pressing \\<enter\\>. So i tested on the dummy div\r\n containing \"Type your question...\" and the edit icon in **{core/templates/components/state-editor/state-content-editor/state-content-editor.component.html}.**  \r\n ![image](https://user-images.githubusercontent.com/56401976/222180508-7b042ba0-c974-467d-a4da-4e2bfcbc1e0a.png)\r\n When selected there no outline (logic because there is no css style when this element is focus) and it's also impossible to enter to the rich text editor.\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183065-81bf381c-b792-4e31-b727-66a57b7d5242.mp4\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183068-bd2a157c-3cfc-4666-8ed0-8d4c0bd468b0.mp4\n\nYup -- confirming that one requirement for this issue is that you need to be able to get into the question editor \"edit mode\" using the keyboard. Thanks for mentioning this, @Kibahor! \n\n> Yup -- confirming that one requirement for this issue is that you need to be able to get into the question editor \"edit mode\" using the keyboard. Thanks for mentioning this, @Kibahor!\r\n\r\nSo can i be assign to the issue ?\n\n@Kibahor Er, I don't see a proposal/demo of an actual solution yet...\n\n> @Kibahor Er, I don't see a proposal/demo of an actual solution yet...\r\n\r\nYou want to mean that i haven't pushed on my fork, if it is that wait 2 min that i push my modification\n\n@Kibahor No, I need to see an explanation in this issue thread of what files you're planning to change, what changes you're planning to make, and a video showing the user experience resulting from your changes. See https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue.\n\nHi, @seanlip like I have tried to fix this issue \r\n\r\n\r\nhttps://user-images.githubusercontent.com/92446645/222972784-9bc5e9a1-bdce-4ead-a8e2-d02a19979e21.mp4\r\n\r\n\n\n@hemantmm I don't think your video solves this part: https://github.com/oppia/oppia/issues/17065#issuecomment-1450342655\n\nHi,\r\nI find a way to open the editor when a key is pressed.\r\nFiles i modified : \r\n![image](https://user-images.githubusercontent.com/56401976/223740944-e6438363-c331-4c11-94ba-3ae32a91176e.png)\r\n\r\nVideo showing the result :\r\n\r\nhttps://user-images.githubusercontent.com/56401976/223740379-d2a9b029-5ce6-4509-81b1-9273ba5b34a3.mp4\r\n\r\n\r\n\r\nNow the problem is in the interaction window. I'm not able to choose an interactions. I'm currently working on it.\r\n\n\nHi,\r\nI guess i have a working solution, but yet it's not perfect : \r\n- 1 or 2 elements are not visible when focus\r\n- in some menus focus goes to background (like the [issue #17064](https://github.com/oppia/oppia/issues/17064).)\r\n- button to remove an interaction is not working with keyboard\r\n\r\nDemo :\r\n\r\nhttps://user-images.githubusercontent.com/56401976/225350721-e69fda75-028c-458f-ab42-3a65ea698806.mp4\r\n\r\nModified files : https://github.com/oppia/oppia/compare/develop...Kibahor:oppia:add-keyboard-focus-on-practice-question \r\n\r\n\n\n@Kibahor This is good enough to start with, thanks. I'm happy to assign you! You can leave fixing #17064 to a separate PR. Try to fix some of the other issues if possible, but if not it's fine in this case to submit a PR fixing as much as you can and filing new issues for the remaining things you've found (since the original issue filed here was just about getting into the Practice Questions editor box).\r\n\r\nThanks a lot for digging into this!\n\n@Kibahor has resolved the issue in https://github.com/oppia/oppia/pull/17746. However, unit tests still need to be written. The original author of the pull request is not available to write the unit tests, so the pull request has been closed. To resolve this issue, you can either create a new PR with the same changes along with unit tests or continue working from the author's branch.\n\nHi @KolliAnitha I think this issue is solve now, please take a look. Thanks!\r\n\r\nhttps://github.com/oppia/oppia/assets/96219910/3f5522c5-c9ea-4cc3-a6b2-bbb5bb338fd5\r\n\r\n\n\n@Patel-Muhammad as mentioned in the above comments, the issue has been fixed and it is working fine now.\n\nClosing this issue as it is fixed ",
  "pr_link": "https://github.com/oppia/oppia/pull/17746",
  "code_context": [
    {
      "filename": "core/templates/components/state-directives/outcome-editor/outcome-editor.component.html",
      "content": "<style>\n  .oppia-outcome-container {\n    display: flex;\n  }\n\n  .oppia-confusing-outcome-warning-text {\n    color: rgb(200, 0, 0);\n    font-style: italic;\n  }\n\n  .oppia-nothing-text {\n    color: #888;\n  }\n\n  .oppia-non-empty-feedback-text {\n    word-wrap: break-word;\n  }\n\n  .oppia-prerequisite-skill-text {\n    margin-top: 1em;\n  }\n\n  .oppia-correct-text {\n    color: rgb(20, 180, 15);\n  }\n\n  .oppia-incorrect-text {\n    color: rgb(243, 13, 13);\n  }\n\n  /* The value used for this breakpoint should be equal to */\n  /* 'mobileBreakpoint' defined in outcome-editor.component.ts */\n  @media screen and (max-width: 500px) {\n    .oppia-outcome-heading {\n      font-size: 18px;\n    }\n  }\n</style>\n\n<div *ngIf=\"!feedbackEditorIsOpen && displayFeedback\"\n     title=\"{{ isEditable ? 'Edit feedback' : '' }}\"\n     class=\"h-100\">\n  <div class=\"oppia-readonly-rule-tile e2e-test-edit-outcome-feedback-button\"\n       [ngClass]=\"{'oppia-editable-section': isEditable}\">\n    <div class=\"oppia-rule-preview oppia-transition-200\">\n\n    <!-- Mobile -->\n      <div class=\"oppia-click-to-start-editing e2e-test-open-outcome-feedback-editor\"\n           *ngIf=\"onMobile && isEditable\" (click)=\"openFeedbackEditorModal()\">\n        <i *ngIf=\"isEditable\" class=\"material-icons oppia-editor-edit-icon float-right\"\n           title=\"Edit Feedback\">&#xE254;\n        </i>\n      </div>\n\n      <!-- Desktop -->\n      <div class=\"oppia-click-to-start-editing e2e-test-open-outcome-feedback-editor\"\n           *ngIf=\"!onMobile && isEditable\" (click)=\"openFeedbackEditor()\" tabindex=\"0\" (keydown.enter)=\"openFeedbackEditor()\" >\n        <i *ngIf=\"isEditable\" class=\"fas fa-pen oppia-editor-edit-icon float-right\"\n           title=\"Edit Feedback\">\n        </i>\n      </div>\n\n      <strong class=\"oppia-outcome-heading\">Oppia tells the learner...</strong>\n      <div class=\"position-relative\">\n        <span *ngIf=\"isSelfLoopWithNoFeedback(outcome) && !areWarningsSuppressed\">\n          <span class=\"oppia-confusing-outcome-warning-text\">\n            <i class=\"material-icons\">&#xE002;</i>\n            Please give Oppia something useful to say here.\n          </span>\n        </span>\n        <span *ngIf=\"(outcome && !isSelfLoopWithNoFeedback(outcome) && !outcome.hasNonemptyFeedback()) || (isSelfLoopWithNoFeedback(outcome) && areWarningsSuppressed)\"\n              class=\"oppia-nothing-text\">\n          <em>Nothing</em>\n        </span>\n        <span *ngIf=\"outcome && outcome.hasNonemptyFeedback()\" class=\"oppia-non-empty-feedback-text\">\n          <oppia-rte-output-display class=\"oppia-rte-editor\" [rteString]=\"outcome.feedback.html\">\n          </oppia-rte-output-display>\n        </span>\n      </div>\n    </div>\n    <!-- This is a dummy div created to mask the contents when hovored above outcome editor contents -->\n    <div class=\"oppia-rule-preview-section-mask\"></div>\n  </div>\n</div>\n\n<div *ngIf=\"!onMobile && isEditable && feedbackEditorIsOpen\">\n  <form role=\"form\"\n        class=\"form-inline e2e-test-edit-outcome-feedback\"\n        name=\"editOutcomeForm.editFeedbackForm\">\n    <oppia-outcome-feedback-editor [outcome]=\"outcome\">\n    </oppia-outcome-feedback-editor>\n  </form>\n\n  <div *ngIf=\"isFeedbackLengthExceeded()\" class=\"oppia-length-validation-error\">\n    The feedback length is too long. Please use at most 500 characters.\n  </div>\n\n  <div class=\"oppia-rule-save-cancel-buttons\">\n    <div class=\"float-right\">\n      <button type=\"button\"\n              class=\"btn btn-secondary mr-2\"\n              (click)=\"cancelThisFeedbackEdit()\">\n        Cancel\n      </button>\n      <button type=\"button\"\n              class=\"btn btn-success e2e-test-save-outcome-feedback\"\n              [disabled]=\"invalidStateAfterFeedbackSave() || isFeedbackLengthExceeded()\"\n              (click)=\"saveThisFeedback(true)\">\n        Save Feedback\n      </button>\n    </div>\n\n    <div class=\"oppia-clear\"></div>\n  </div>\n</div>\n\n<br *ngIf=\"displayFeedback\">\n\n<div *ngIf=\"!destinationEditorIsOpen && !isInQuestionMode()\"\n     class=\"h-100\"\n     title=\"{{ isEditable ? 'Change the destination card' : '' }}\">\n  <div class=\"oppia-readonly-rule-tile e2e-test-edit-outcome-dest-button\"\n       [ngClass]=\"{'oppia-editable-section': isEditable}\">\n    <div class=\"oppia-rule-preview oppia-transition-200\">\n      <div class=\"oppia-click-to-start-editing e2e-test-open-outcome-dest-editor\"\n           *ngIf=\"isEditable\" (click)=\"openDestinationEditor()\">\n        <i *ngIf=\"isEditable\" class=\"fas fa-pen oppia-editor-edit-icon float-right\"\n           title=\"Edit Destination\">\n        </i>\n      </div>\n\n      <div>\n        <strong class=\"oppia-outcome-heading\" *ngIf=\"displayFeedback\">And afterwards, directs the learner\n        to...</strong>\n        <strong class=\"oppia-outcome-heading\" *ngIf=\"!displayFeedback\">Oppia directs the learner to...</strong>\n        <span *ngIf=\"outcome && !isSelfLoop(outcome)\" class=\"position-relative\">\n          {{ outcome.dest }}\n        </span>\n        <span *ngIf=\"isSelfLoop(outcome)\" class=\"position-relative\">\n          <span *ngIf=\"!outcome.refresherExplorationId\">(try again)</span>\n          <span *ngIf=\"outcome.refresherExplorationId\">\n            (try again, with refresher exploration \"{{ outcome.refresherExplorationId }}\")\n          </span>\n        </span>\n        <div class=\"oppia-prerequisite-skill-text\" *ngIf=\"outcome && outcome.missingPrerequisiteSkillId && canAddPrerequisiteSkill\">\n          <strong class=\"oppia-outcome-heading\"> Attached prerequisite skill for the current state: </strong>\n          {{ outcome.missingPrerequisiteSkillId }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"isEditable && destinationEditorIsOpen && !isInQuestionMode()\">\n  <form role=\"form\"\n        class=\"form-inline e2e-test-edit-outcome-dest\"\n        name=\"editOutcomeForm.editDestForm\"\n        (submit)=\"saveThisDestination()\">\n    <oppia-outcome-destination-editor [outcome]=\"outcome\"\n                                      [outcomeHasFeedback]=\"displayFeedback\"\n                                      (addState)=\"addState($event)\">\n    </oppia-outcome-destination-editor>\n  </form>\n\n  <div class=\"oppia-rule-save-cancel-buttons\">\n    <div class=\"float-right\">\n      <button type=\"button\"\n              class=\"btn btn-secondary mr-2 e2e-test-cancel-outcome-dest\"\n              (click)=\"cancelThisDestinationEdit()\">\n        Cancel\n      </button>\n      <button type=\"button\"\n              class=\"btn btn-success e2e-test-save-outcome-dest\"\n              [disabled]=\"invalidStateAfterDestinationSave()\"\n              (click)=\"saveThisDestination()\">\n        Save Destination\n      </button>\n    </div>\n\n    <div class=\"oppia-clear\"></div>\n  </div>\n</div>\n\n<div *ngIf=\"!destinationIfStuckEditorIsOpen && !isInQuestionMode() && outcome && !outcome.labelledAsCorrect\"\n     class=\"h-100\"\n     title=\"{{ isEditable ? 'Change the if stuck destination card' : '' }}\">\n  <div class=\"oppia-readonly-rule-tile protractor-test-edit-outcome-dest-if-stuck-button\"\n       [ngClass]=\"{'oppia-editable-section': isEditable}\">\n    <div class=\"oppia-rule-preview oppia-transition-200\">\n      <div class=\"oppia-click-to-start-editing protractor-test-open-outcome-dest-if-stuck-editor\"\n           *ngIf=\"isEditable\" (click)=\"openDestinationIfStuckEditor()\">\n        <i *ngIf=\"isEditable\" class=\"fas fa-pen oppia-editor-edit-icon float-right\"\n           title=\"Edit If Stuck Destination\">\n        </i>\n      </div>\n\n      <div>\n        <strong *ngIf=\"displayFeedback\">(Optional) If the learner is really stuck, direct them to</strong>\n        <strong *ngIf=\"!displayFeedback\">(Optional) Oppia directs the stuck learner to...</strong>\n        <span *ngIf=\"outcome && !isSelfLoopDestStuck(outcome)\" class=\"position-relative\">\n          {{ outcome.destIfReallyStuck }}\n        </span>\n        <span *ngIf=\"isSelfLoopDestStuck(outcome)\" class=\"position-relative\"></span>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"isEditable && destinationIfStuckEditorIsOpen && !isInQuestionMode() && outcome\">\n  <form role=\"form\"\n        class=\"form-inline protractor-test-edit-outcome-dest-if-stuck\"\n        name=\"editOutcomeForm.editDestIfStuckForm\"\n        (submit)=\"saveThisIfStuckDestination()\">\n    <oppia-outcome-if-stuck-destination-editor [outcome]=\"outcome\"\n                                               (addState)=\"addState($event)\">\n    </oppia-outcome-if-stuck-destination-editor>\n  </form>\n\n  <div class=\"oppia-rule-save-cancel-buttons\">\n    <div class=\"float-right\">\n      <button type=\"button\"\n              class=\"btn btn-secondary mr-2 protractor-test-cancel-outcome-dest-if-stuck\"\n              (click)=\"cancelThisIfStuckDestinationEdit()\">\n        Cancel\n      </button>\n      <button type=\"button\"\n              class=\"btn btn-success protractor-test-save-outcome-dest-if-stuck\"\n              (click)=\"saveThisIfStuckDestination()\">\n        Save Destination\n      </button>\n    </div>\n\n    <div class=\"oppia-clear\"></div>\n  </div>\n</div>\n\n<div class=\"oppia-correctness-label-editor\" *ngIf=\"isCorrectnessFeedbackEnabled() && !isCurrentInteractionLinear()\">\n  <div *ngIf=\"!isEditable\"\n       title=\"{{ isEditable ? 'Edit correctness setting' : '' }}\"\n       class=\"h-100\">\n    <div class=\"oppia-readonly-rule-tile\"\n         [ngClass]=\"{'oppia-editable-section': isEditable}\">\n      <div class=\"oppia-rule-details-header\">\n        <div class=\"oppia-click-to-start-editing\"\n             *ngIf=\"isEditable\" (click)=\"openCorrectnessLabelEditor()\">\n          <i *ngIf=\"isEditable\" class=\"material-icons oppia-editor-edit-icon float-right\"\n             title=\"Edit Correctness setting\">&#xE254;\n          </i>\n        </div>\n\n        <strong class=\"oppia-outcome-heading\">The answers falling under this group are\n          <span *ngIf=\"outcome && outcome.labelledAsCorrect\" class=\"oppia-correct-text\">\n            correct\n          </span>\n          <span *ngIf=\"outcome && !outcome.labelledAsCorrect\" class=\"oppia-incorrect-text\">\n            incorrect\n          </span>\n        </strong>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"oppia-outcome-container\" *ngIf=\"isEditable\">\n    <div *ngIf=\"outcome\">\n      <input class=\"mr-2 e2e-test-editor-correctness-toggle\"\n             type=\"checkbox\"\n             [disabled]=\"isSelfLoop(savedOutcome)\"\n             [(ngModel)]=\"outcome.labelledAsCorrect\"\n             (change)=\"onChangeCorrectnessLabel()\">\n    </div>\n    <strong class=\"oppia-outcome-heading\">The answers in this group are correct</strong>\n  </div>\n</div>\n"
    },
    {
      "filename": "core/templates/components/state-editor/state-content-editor/state-content-editor.component.html",
      "content": "<!--\n  Off-screen preview of the learner view card in order to check if the height of the card has exceeded a specified limit.\n-->\n<div class=\"oppia-shadow-preview-card\" aria-hidden=\"true\">\n  <div class=\"oppia-learner-view-card-content e2e-test-learner-view-card-content\">\n    <div class=\"oppia-learner-view-card-top-section\">\n      <oppia-rte-output-display class=\"oppia-rte-viewer oppia-learner-view-card-top-content\"\n                                [rteString]=\"stateContentService.displayed._html\">\n      </oppia-rte-output-display>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!contentEditorIsOpen\">\n  <div *ngIf=\"cardHeightLimitReached && cardHeightLimitWarningIsShown\" class=\"oppia-card-height-limit-warning e2e-test-card-height-limit-warning\">\n    <i class=\"fas fa-exclamation-triangle oppia-hide-card-height-warning-icon e2e-test-hide-card-height-warning-icon\" ngbTooltip=\"Hide warning\" (click)=\"hideCardHeightLimitWarning()\"></i>\n    <span [innerHTML]=\"'I18N_CARD_HEIGHT_LIMIT_WARNING_MESSAGE' | translate\"></span>\n  </div>\n  <div *ngIf=\"isContentEditable()\"\n       class=\"e2e-test-edit-content oppia-editable-section e2e-test-edit-content-pencil-button\"\n       (click)=\"openStateContentEditor()\"\n       tabindex=\"0\"\n       (keydown.enter)=\"openStateContentEditor()\">\n    <i class=\"fas fa-pen oppia-editor-edit-icon oppia-editor-edit-icon-position e2e-test-edit-content-pencil-button\"\n       title=\"Edit Card Content\">\n    </i>\n    <div class=\"oppia-prevent-selection oppia-state-content-display oppia-transition-200\"\n         title=\"Card Content\">\n      <span [hidden]=\"!stateContentService.savedMemento.isEmpty()\" class=\"oppia-placeholder\">\n        {{ stateContentPlaceholder }}\n      </span>\n      <span>\n        <oppia-rte-output-display [rteString]=\"stateContentService.savedMemento.html\"\n                                  class=\"oppia-rte-editor e2e-test-state-content-display\">\n        </oppia-rte-output-display>\n      </span>\n    </div>\n    <!-- This is a dummy div created to mask the contents when the user hovers over the content. -->\n    <div class=\"oppia-editable-section-mask e2e-test-state-edit-content\">\n    </div>\n  </div>\n  <div *ngIf=\"!isContentEditable()\"\n       class=\"e2e-test-edit-content\">\n    <div class=\"oppia-prevent-selection oppia-state-content-display oppia-transition-200\"\n         title=\"Card Content\">\n      <span [hidden]=\"!stateContentService.savedMemento.isEmpty()\" class=\"oppia-placeholder\">\n        {{ stateContentPlaceholder }}\n      </span>\n      <span>\n        <oppia-rte-output-display [rteString]=\"stateContentService.savedMemento.html\"\n                                  class=\"oppia-rte-editor e2e-test-state-content-display\">\n        </oppia-rte-output-display>\n      </span>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"contentEditorIsOpen\" class=\"e2e-test-state-content-editor\">\n  <!-- TODO(sll): Find a way to do this without resorting to private properties like _html -->\n  <schema-based-editor [schema]=\"HTML_SCHEMA\"\n                       [(localValue)]=\"stateContentService.displayed._html\">\n  </schema-based-editor>\n  <div *ngIf=\"cardHeightLimitReached && cardHeightLimitWarningIsShown\" class=\"oppia-card-height-limit-warning e2e-test-card-height-limit-warning mt-2\">\n    <i class=\"fas fa-exclamation-triangle oppia-hide-card-height-warning-icon e2e-test-hide-card-height-warning-icon\" ngbTooltip=\"Hide warning\" (click)=\"hideCardHeightLimitWarning()\"></i>\n    <span [innerHTML]=\"'I18N_CARD_HEIGHT_LIMIT_WARNING_MESSAGE' | translate\"></span>\n  </div>\n  <div class=\"mt-2\">\n    <div *ngIf=\"isCardContentLengthLimitReached()\" class=\"oppia-card-content-limit-error e2e-test-card-height-limit-warning mt-2\">\n      <i class=\"fas fa-exclamation-triangle oppia-hide-card-content-error-icon e2e-test-hide-card-height-warning-icon\" ngbTooltip=\"Hide warning\" (click)=\"hideCardHeightLimitWarning()\"></i>\n      <span [innerHTML]=\"'I18N_CARD_CONTENT_LIMIT_ERROR_MESSAGE' | translate\"></span>\n    </div>\n    <button type=\"button\"\n            [disabled]=\"isCardContentLengthLimitReached()\"\n            class=\"btn btn-success oppia-save-state-item-button e2e-test-save-state-content float-right\"\n            (click)=\"onSaveContentButtonClicked()\">\n      {{ stateContentSaveButtonPlaceholder }}\n    </button>\n    <button type=\"button\" class=\"btn btn-secondary float-right\" (click)=\"cancelEdit()\">Cancel</button>\n    <div class=\"oppia-clear\"></div>\n  </div>\n</div>\n\n<style>\n  .oppia-hide-card-height-warning-icon {\n    color: #827127;\n    font-size: 18px;\n    line-height: 1;\n    vertical-align: middle;\n  }\n  .oppia-hide-card-content-error-icon {\n    color: #d1180a;\n    font-size: 18px;\n    line-height: 1;\n    vertical-align: middle;\n  }\n  .oppia-card-height-limit-warning {\n    background: #fff5c8;\n    border: 0.0625rem solid #827127;\n    border-radius: 0.25rem;\n    color: #333;\n    padding-left: 0.25rem;\n  }\n  .oppia-card-content-limit-error {\n    background: #ea4a1757;\n    border: 0.0625rem solid #827127;\n    border-radius: 0.25rem;\n    color: #333;\n    padding-left: 0.25rem;\n  }\n  .oppia-shadow-preview-card {\n    left: -30000px;\n    max-width: 560px;\n    position: fixed;\n    top: -30000px;\n  }\n  .oppia-editor-edit-icon-position {\n    top: 9px;\n  }\n  .oppia-editor-edit-icon {\n     display: block;\n    }\n  @media screen and (max-width: 700px) {\n    .oppia-editor-edit-icon {\n     display: none;\n    }\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/components/state-editor/state-responses-editor/state-responses.component.html",
      "content": "<div>\n  <div class=\"oppia-editor-card-with-avatar oppia-mobile-collapsible-card\">\n    <div class=\"oppia-editor-card-body\">\n      <div class=\"state-responses-header-container oppia-mobile-collapsible-card-header\">\n        <div class=\"state-responses-header\" (click)=\"toggleResponseCard()\">\n          <h3 class=\"oppia-exp-answer-card-header\">Learner's Answers and Oppia's Responses</h3>\n          <i class=\"fa fa-caret-down\"\n             *ngIf=\"!responseCardIsShown\"\n             aria-hidden=\"true\">\n          </i>\n          <i class=\"fa fa-caret-up\"\n             *ngIf=\"responseCardIsShown\"\n             aria-hidden=\"true\">\n          </i>\n        </div>\n      </div>\n      <div class=\"state-response-container oppia-mobile-collapsible-card-content\" *ngIf=\"responseCardIsShown\">\n        <div *ngIf=\"answerGroups && answerGroups.length > 0\">\n          <div cdkDropList\n               (cdkDropListDropped)=\"drop($event)\"\n               class=\"oppia-option-list nav-stacked nav-pills\"\n               role=\"tablist\">\n            <div [cdkDragDisabled]=\"activeAnswerGroupIndex === index ? true : false\"\n                 cdkDrag\n                 *ngFor=\"let answerGroup of answerGroups; let index = index\"\n                 role=\"tab\"\n                 [ngClass]=\"{'active': activeAnswerGroupIndex === index}\"\n                 class=\"oppia-sortable-rule-block oppia-prevent-selection\">\n\n              <span class=\"oppia-rule-sort-handle\" *ngIf=\"answerGroups?.length > 1\" (mousedown)=\"changeActiveAnswerGroupIndex(-1)\">\n                <span *ngIf=\"editabilityService.isEditable()\" class=\"fas fa-grip-vertical draggable-icon-indicator\"></span>\n              </span>\n\n              <div class=\"oppia-rule-header-warning-placement\" *ngIf=\"isSelfLoopThatIsMarkedCorrect(answerGroup.outcome) || isSelfLoopWithNoFeedback(answerGroup.outcome)\" (click)=\"changeActiveAnswerGroupIndex(index)\"\n                   ngbTooltip=\"{{getOutcomeTooltip(answerGroup.outcome)}}\"\n                   placement=\"auto\">\n                <div class=\"oppia-rule-header-warning-style\" >\n                  ⚠\n                </div>\n              </div>\n              <a tabindex=\"0\" (keydown.enter)=\"changeActiveAnswerGroupIndex(answerGroups.length)\" (click)=\"changeActiveAnswerGroupIndex(index)\" class=\"oppia-rule-tab e2e-test-response-tab\" [ngClass]=\"{'oppia-rule-tab-active': activeAnswerGroupIndex === index}\">\n                <oppia-response-header [index]=\"index\"\n                                       [summary]=\"summarizeAnswerGroup(answerGroup, getCurrentInteractionId(), getAnswerChoices(), false)\"\n                                       [shortSummary]=\"summarizeAnswerGroup(answerGroup, getCurrentInteractionId(), getAnswerChoices(), true)\"\n                                       [isActive]=\"index === activeAnswerGroupIndex\"\n                                       [outcome]=\"answerGroup.outcome\"\n                                       [defaultOutcome]=\"false\"\n                                       [numRules]=\"answerGroup.rules.length\"\n                                       [isResponse]=\"true\"\n                                       (navigateToState)=\"navigateToState.emit($event)\">\n                </oppia-response-header>\n              </a>\n\n              <div *ngIf=\"activeAnswerGroupIndex === index\">\n                <div class=\"oppia-editor-card-section\">\n                  <div class=\"oppia-rule-body-container e2e-test-response-body-{{index}}\">\n                    <oppia-answer-group-editor class=\"e2e-test-response-body\"\n                                               [rules]=\"answerGroup.rules\"\n                                               [outcome]=\"answerGroup.outcome\"\n                                               [taggedSkillMisconceptionId]=\"answerGroup.taggedSkillMisconceptionId\"\n                                               (onSaveAnswerGroupFeedback)=\"saveActiveAnswerGroupFeedback($event)\"\n                                               (onSaveAnswerGroupDest)=\"saveActiveAnswerGroupDest($event)\"\n                                               (onSaveAnswerGroupDestIfStuck)=\"saveActiveAnswerGroupDestIfStuck($event)\"\n                                               (onSaveAnswerGroupCorrectnessLabel)=\"saveActiveAnswerGroupCorrectnessLabel($event)\"\n                                               (onSaveAnswerGroupRules)=\"saveActiveAnswerGroupRules($event)\"\n                                               (onSaveNextContentIdIndex)=\"sendOnSaveNextContentIdIndex($event)\"\n                                               (onSaveTaggedMisconception)=\"saveTaggedMisconception($event)\"\n                                               [isEditable]=\"editabilityService.isEditable()\"\n                                               [displayFeedback]=\"!isLinearWithNoFeedback(answerGroup.outcome)\"\n                                               [addState]=\"addState\">\n                    </oppia-answer-group-editor>\n                  </div>\n                  <div class=\"btn btn-danger oppia-delete-response e2e-test-delete-response\"\n                       *ngIf=\"editabilityService.isEditable()\"\n                       (click)=\"deleteAnswerGroup($event, index)\">\n                    Delete Response\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- CkDrop End -->\n        </div>\n        <div *ngIf=\"!suppressDefaultAnswerGroup()\">\n          <div class=\"oppia-option-list nav-stacked nav-pills\" role=\"tablist\">\n            <div class=\"option-list-default\"\n                 [ngClass]=\"{'active': activeAnswerGroupIndex === answerGroups.length}\"\n                 role=\"tab\">\n              <div class=\"oppia-rule-header-warning-placement\"\n                   *ngIf=\"isSelfLoopThatIsMarkedCorrect(defaultOutcome) || (isSelfLoopWithNoFeedback(defaultOutcome))\"\n                   (click)=\"changeActiveAnswerGroupIndex(answerGroups.length)\"\n                   ngbTooltip=\"{{getOutcomeTooltip(defaultOutcome)}}\"\n                   placement=\"auto\">\n                <div class=\"oppia-rule-header-warning-style\" >\n                  ⚠\n                </div>\n              </div>\n              <a (click)=\"changeActiveAnswerGroupIndex(answerGroups.length)\"\n                 class=\"oppia-sortable-rule-block oppia-rule-tab oppia-default-rule-tab e2e-test-default-response-tab\"\n                 [ngClass]=\"{'oppia-rule-tab-active': activeAnswerGroupIndex == answerGroups.length}\">\n                <oppia-response-header [index]=\"index\"\n                                       [isActive]=\"index === activeAnswerGroupIndex\"\n                                       [summary]=\"summarizeDefaultOutcome(defaultOutcome, getCurrentInteractionId(), answerGroups.length, false)\"\n                                       [shortSummary]=\"summarizeDefaultOutcome(defaultOutcome, getCurrentInteractionId(), answerGroups.length, true)\"\n                                       [outcome]=\"defaultOutcome\"\n                                       [defaultOutcome]=\"true\"\n                                       (navigateToState)=\"navigateToState.emit($event)\"\n                                       [isResponse]=\"true\">\n                </oppia-response-header>\n              </a>\n\n              <div *ngIf=\"activeAnswerGroupIndex === (answerGroups && answerGroups.length)\">\n                <div class=\"oppia-editor-card-section\">\n                  <div class=\"oppia-rule-body-container e2e-test-response-body-default\">\n                    <oppia-answer-group-editor class=\"e2e-test-response-body\"\n                                               [rules]=\"null\"\n                                               [outcome]=\"defaultOutcome\"\n                                               [taggedSkillMisconceptionId]=\"null\"\n                                               [isEditable]=\"editabilityService.isEditable()\"\n                                               [suppressWarnings]=\"suppressDefaultAnswerGroup()\"\n                                               [displayFeedback]=\"!isLinearWithNoFeedback(defaultOutcome)\"\n                                               [addState]=\"addState\"\n                                               (onSaveAnswerGroupFeedback)=\"saveDefaultOutcomeFeedback($event)\"\n                                               (onSaveAnswerGroupDest)=\"saveDefaultOutcomeDest($event)\"\n                                               (onSaveAnswerGroupDestIfStuck)=\"saveDefaultOutcomeDestIfStuck($event)\"\n                                               (onSaveAnswerGroupCorrectnessLabel)=\"saveDefaultOutcomeCorrectnessLabel($event)\"\n                                               (onSaveNextContentIdIndex)=\"sendOnSaveNextContentIdIndex($event)\">\n                    </oppia-answer-group-editor>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"oppia-add-response-button-container\">\n          <div *ngIf=\"editabilityService.isEditableOutsideTutorialMode() && !isCurrentInteractionLinear() && editabilityService.isEditable()\">\n            <button type=\"button\" class=\"btn btn-secondary oppia-add-response-button e2e-test-open-add-response-modal\" (click)=\"openAddAnswerGroupModal()\">\n              + ADD RESPONSE\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"!isInQuestionMode()\" class=\"solicit-answer-checkbox\">\n          <span *ngIf=\"!isCurrentInteractionTrivial()\" [hidden]=\"!enableSolicitAnswerDetailsFeature\" class=\"solicit-answer-details-span\">\n            <input id=\"label-target-solicit-answer-details-checkbox\" type=\"checkbox\" class=\"e2e-test-solicit-answer-details-checkbox\" (change)=\"onChangeSolicitAnswerDetails()\" [(ngModel)]=\"stateSolicitAnswerDetailsService.displayed\" [disabled]=\"!editabilityService.isEditable()\">\n            <label for=\"label-target-solicit-answer-details-checkbox\">Solicit Answer Details</label>\n          </span>\n        </div>\n        <div *ngIf=\"isInQuestionMode() && answerGroups && answerGroups.length > 0 && (containsOptionalMisconceptions || getUnaddressedMisconceptionNames(misconceptionsBySkill).length)\" class=\"misconception-parent-card\">\n          <h3>Misconceptions</h3>\n          <small class=\"text-muted\">The following must be addressed by tagging to an incorrect answer. If a misconception is not relevant to this question, mark it as \"Not Applicable\".</small>\n          <div class=\"pt-4\" *ngIf=\"getUnaddressedMisconceptionNames(misconceptionsBySkill).length\">\n            <h4 class=\"pl-3\">Compulsory</h4>\n            <p *ngFor=\"let misconceptionName of getUnaddressedMisconceptionNames(misconceptionsBySkill); let index = index\" class=\"misconception-list-item\">\n              {{misconceptionName}}\n            </p>\n          </div>\n          <div class=\"pt-4\">\n            <h4 class=\"pl-3\" *ngIf=\"containsOptionalMisconceptions\">Optional</h4>\n            <div *ngFor=\"let skillWithMisconceptions of misconceptionsBySkill | keyvalue; let index = index\">\n              <div *ngFor=\"let misconception of skillWithMisconceptions.value\">\n                <div *ngIf=\"!misconception.isMandatory()\"\n                     class=\"misconception-list-item optional-misconception-list-item\"\n                     [ngClass]=\"{'optional-misconception-list-no-action': isNoActionExpected(skillWithMisconceptions.key + '-' + misconception.getId())}\">\n                  <div>\n                    <div>\n                      {{misconception.getName()}}\n                      <span class=\"pl-3\" *ngIf=\"!isNoActionExpected(skillWithMisconceptions.key + '-' + misconception.getId())\">⚠️</span>\n                    </div>\n                    <div class=\"small text-muted\" ng-bind=\"getOptionalSkillMisconceptionStatus(skillId + '-' + misconception.getId())\"></div>\n                  </div>\n                  <div *ngIf=\"skillWithMisconceptions.key + '-' + misconception.getId() === activeEditOption\" class=\"optional-misconception-edit-options\">\n                    <div *ngIf=\"inapplicableSkillMisconceptionIds.includes(skillWithMisconceptions.key + '-' + misconception.getId())\"\n                         (click)=\"updateOptionalMisconceptionIdStatus(skillWithMisconceptions.key + '-' + misconception.getId(), true)\"\n                         (mouseleave)=\"setActiveEditOption(null)\">\n                        Mark as \"Applicable\"\n                    </div>\n                    <div *ngIf=\"!inapplicableSkillMisconceptionIds.includes(skillWithMisconceptions.key + '-' + misconception.getId())\"\n                         (click)=\"updateOptionalMisconceptionIdStatus(skillWithMisconceptions.key + '-' + misconception.getId(), false)\"\n                         (mouseleave)=\"setActiveEditOption(null)\">\n                        Mark as \"Not Applicable\"\n                    </div>\n                  </div>\n                  <div *ngIf=\"editabilityService.isEditable()\"\n                       (click)=\"setActiveEditOption(skillWithMisconceptions.key + '-' + misconception.getId())\"\n                       class=\"fas fa-ellipsis-v optional-misconception-options-button\"\n                       [ngClass]=\"{'d-none': getOptionalSkillMisconceptionStatus(skillWithMisconceptions.key + '-' + misconception.getId()) === 'Assigned'}\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  .oppia-delete-response {\n    margin: 20px 10px 0;\n  }\n\n  .option-list-default {\n    border: solid 1px #ccc;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 0;\n  }\n\n  .cdk-drag-placeholder {\n    opacity: 0;\n  }\n\n  .cdk-drag-animating {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }\n\n  .oppia-sortable-rule-block {\n    border: solid 1px #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    color: rgba(0, 0, 0, 0.87);\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    position: relative;\n    width: 100%;\n  }\n\n  .oppia-rule-sort-handle {\n    padding-right: 2px;\n    position: absolute;\n    top: 9px;\n  }\n\n  .oppia-option-list {\n    display: block;\n    max-width: 100%;\n    min-height: 60px;\n    overflow: hidden;\n    width: 500px;\n  }\n\n  .oppia-option-list.cdk-drop-list-dragging .oppia-sortable-rule-block:not(.cdk-drag-placeholder) {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }\n\n  state-responses .state-responses-header-container {\n    padding: 15px 20px 15px 30px\n  }\n\n  .state-responses-header {\n    align-content: center;\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    padding: 15px 20px 15px;\n  }\n\n  .oppia-exp-answer-card-header {\n    font-size: 18px;\n  }\n\n  .solicit-answer-checkbox label {\n    margin-bottom: 0;\n  }\n\n  .nav-pills > div {\n    box-shadow: 1px 2px 5px #939393;\n    margin: 8px 0;\n  }\n\n  .nav-pills > div > a.oppia-rule-tab {\n    background: #e0f2f1 !important;\n  }\n\n  .state-response-container {\n    padding: 15px 30px;\n  }\n\n  .oppia-add-response-button-container {\n    margin: 22px 0;\n  }\n\n  .solicit-answer-checkbox {\n    padding-bottom: 20px;\n  }\n\n  .misconception-parent-card {\n    border-top: 1px solid #707070;\n    padding: 20px;\n  }\n\n  .misconception-parent-card h3 {\n    font-size: 1.75rem;\n  }\n\n  .misconception-list-item {\n    background-color: #fff5c8;\n    border: 2px solid #827127;\n    border-radius: 4px;\n    margin: 10px;\n    padding: 15px;\n  }\n\n  .optional-misconception-list-item {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    position: relative;\n    word-break: break-word;\n  }\n\n  .optional-misconception-options-button {\n    cursor: pointer;\n    display: grid;\n    place-content: center;\n  }\n\n  .optional-misconception-edit-options {\n    background-color: #fff;\n    border: 2px solid #000;\n    border-radius: 4px;\n    cursor: pointer;\n    padding: 0.3rem;\n    position: absolute;\n    right: -15%;\n    text-align: center;\n    top: calc(100% - 0.75em);\n    width: 15em;\n    z-index: 1;\n  }\n\n  .optional-misconception-list-no-action {\n    background-color: #fff;\n    border: 2px solid #999;\n  }\n\n  @media screen and (max-width: 768px) {\n    state-responses .state-response-container {\n      padding: 15px 10px;\n    }\n\n    .oppia-editor-card-section {\n      padding: 10px;\n    }\n\n    state-responses .solicit-answer-checkbox {\n      width: 100%;\n    }\n\n    .state-responses-header-container {\n      padding: 0;\n    }\n\n    .state-responses-header i {\n      display: block;\n    }\n\n    .state-responses-header {\n      padding: 16px;\n    }\n\n    .oppia-editor-card-with-avatar {\n      margin-top: 20px;\n    }\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/components/state-editor/state-responses-editor/state-responses.component.ts",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for managing the state responses in the state\n * editor.\n */\n\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { downgradeComponent } from '@angular/upgrade/static';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UrlInterpolationService } from 'domain/utilities/url-interpolation.service';\nimport { AddAnswerGroupModalComponent } from 'pages/exploration-editor-page/editor-tab/templates/modal-templates/add-answer-group-modal.component';\nimport { DeleteAnswerGroupModalComponent } from 'pages/exploration-editor-page/editor-tab/templates/modal-templates/delete-answer-group-modal.component';\nimport { Misconception, MisconceptionSkillMap, TaggedMisconception } from 'domain/skill/MisconceptionObjectFactory';\nimport { Subscription } from 'rxjs';\nimport { AnswerChoice, StateEditorService } from '../state-editor-properties-services/state-editor.service';\nimport { ResponsesService } from 'pages/exploration-editor-page/editor-tab/services/responses.service';\nimport { StateSolicitAnswerDetailsService } from '../state-editor-properties-services/state-solicit-answer-details.service';\nimport { ExternalSaveService } from 'services/external-save.service';\nimport { StateInteractionIdService } from '../state-editor-properties-services/state-interaction-id.service';\nimport { AppConstants } from 'app.constants';\nimport INTERACTION_SPECS from 'interactions/interaction_specs.json';\nimport { Outcome } from 'domain/exploration/OutcomeObjectFactory';\nimport { StateCustomizationArgsService } from '../state-editor-properties-services/state-customization-args.service';\nimport { AlertsService } from 'services/alerts.service';\nimport { AnswerGroup, AnswerGroupObjectFactory } from 'domain/exploration/AnswerGroupObjectFactory';\nimport { Interaction } from 'domain/exploration/InteractionObjectFactory';\nimport { Rule } from 'domain/exploration/rule.model';\nimport { ParameterizeRuleDescriptionPipe } from 'filters/parameterize-rule-description.pipe';\nimport { ConvertToPlainTextPipe } from 'filters/string-utility-filters/convert-to-plain-text.pipe';\nimport { TruncatePipe } from 'filters/string-utility-filters/truncate.pipe';\nimport { WrapTextWithEllipsisPipe } from 'filters/string-utility-filters/wrap-text-with-ellipsis.pipe';\nimport { ItemSelectionInputCustomizationArgs } from 'interactions/customization-args-defs';\nimport { CdkDragSortEvent, moveItemInArray} from '@angular/cdk/drag-drop';\nimport { EditabilityService } from 'services/editability.service';\nimport { GenerateContentIdService } from 'services/generate-content-id.service';\nimport { InteractionSpecsKey } from 'pages/interaction-specs.constants';\nimport { InteractionRuleInputs } from 'interactions/rule-input-defs';\n\n\n@Component({\n  selector: 'oppia-state-responses',\n  templateUrl: './state-responses.component.html'\n})\nexport class StateResponsesComponent implements OnInit, OnDestroy {\n  // These properties are initialized using Angular lifecycle hooks\n  // and we need to do non-null assertion. For more information, see\n  // https://github.com/oppia/oppia/wiki/Guide-on-defining-types#ts-7-1\n  @Input() addState!: (value: string) => void;\n  inapplicableSkillMisconceptionIds!: string[];\n  // If the interaction is terminal, then the default outcome is null.\n  defaultOutcome!: Outcome | null;\n  misconceptionsBySkill!: MisconceptionSkillMap;\n  activeAnswerGroupIndex!: number;\n  // State name is null if their is no state selected or have no active state.\n  // This is the case when the user is creating a new state.\n  stateName!: string | null;\n  @Output() onResponsesInitialized = new EventEmitter<void>();\n  @Output() onSaveInteractionAnswerGroups = (\n    new EventEmitter<AnswerGroup[] | AnswerGroup>());\n\n  @Output() onSaveInteractionDefaultOutcome = (\n    new EventEmitter<Outcome | null>());\n\n  @Output() onSaveNextContentIdIndex = new EventEmitter<number>();\n  @Output() onSaveSolicitAnswerDetails = new EventEmitter<boolean>();\n  @Output() navigateToState = new EventEmitter<string>();\n  @Output() refreshWarnings = new EventEmitter<void>();\n\n  @Output() onSaveInapplicableSkillMisconceptionIds = (\n    new EventEmitter<string[]>());\n\n  directiveSubscriptions = new Subscription();\n  activeEditOption: boolean = false;\n  answerGroups: AnswerGroup[] = [];\n  SHOW_TRAINABLE_UNRESOLVED_ANSWERS: boolean = false;\n  responseCardIsShown: boolean = false;\n  enableSolicitAnswerDetailsFeature: boolean = false;\n  containsOptionalMisconceptions: boolean = false;\n\n  constructor(\n    private stateEditorService: StateEditorService,\n    private responsesService: ResponsesService,\n    private stateCustomizationArgsService: StateCustomizationArgsService,\n    private stateSolicitAnswerDetailsService: StateSolicitAnswerDetailsService,\n    private externalSaveService: ExternalSaveService,\n    private stateInteractionIdService: StateInteractionIdService,\n    private alertsService: AlertsService,\n    private ngbModal: NgbModal,\n    private generateContentIdService: GenerateContentIdService,\n    private answerGroupObjectFactory: AnswerGroupObjectFactory,\n    private urlInterpolationService: UrlInterpolationService,\n    private convertToPlainText: ConvertToPlainTextPipe,\n    private parameterizeRuleDescription: ParameterizeRuleDescriptionPipe,\n    private truncate: TruncatePipe,\n    private wrapTextWithEllipsis: WrapTextWithEllipsisPipe,\n    private editabilityService: EditabilityService,\n  ) {}\n\n  sendOnSaveNextContentIdIndex(event: number): void {\n    this.onSaveNextContentIdIndex.emit(event);\n  }\n\n  drop(event: CdkDragSortEvent<AnswerGroup[]>): void {\n    moveItemInArray(\n      this.answerGroups, event.previousIndex,\n      event.currentIndex);\n\n    this.responsesService.save(\n      this.answerGroups, this.defaultOutcome,\n      (newAnswerGroups, newDefaultOutcome) => {\n        this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n        this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n        this.refreshWarnings.emit();\n      });\n  }\n\n  _initializeTrainingData(): void {\n    if (this.stateEditorService.isInQuestionMode()) {\n      return;\n    }\n  }\n\n  isInQuestionMode(): boolean {\n    return this.stateEditorService.isInQuestionMode();\n  }\n\n  suppressDefaultAnswerGroup(): boolean {\n    let interactionId = this.getCurrentInteractionId();\n    let answerGroups = this.responsesService.getAnswerGroups();\n    // This array contains the text of each of the possible answers\n    // for the interaction.\n    let answerChoices = [];\n    let customizationArgs = (\n      this.stateCustomizationArgsService.savedMemento);\n    let handledAnswersArray: InteractionRuleInputs[] = [];\n\n    if (interactionId === 'MultipleChoiceInput') {\n      let numChoices = this.getAnswerChoices().length;\n      let choiceIndices = [];\n      // Collect all answers which have been handled by at least one\n      // answer group.\n      for (let i = 0; i < answerGroups.length; i++) {\n        for (let j = 0; j < answerGroups[i].rules.length; j++) {\n          handledAnswersArray.push(answerGroups[i].rules[j].inputs.x);\n        }\n      }\n      for (let i = 0; i < numChoices; i++) {\n        choiceIndices.push(i);\n      }\n      // We only suppress the default warning if each choice index has\n      // been handled by at least one answer group.\n      return choiceIndices.every((choiceIndex) => {\n        return handledAnswersArray.indexOf(choiceIndex) !== -1;\n      });\n    } else if (interactionId === 'ItemSelectionInput') {\n      let maxSelectionCount = (\n        (customizationArgs as ItemSelectionInputCustomizationArgs)\n          .maxAllowableSelectionCount.value);\n      if (maxSelectionCount === 1) {\n        let numChoices = this.getAnswerChoices().length;\n        // This array contains a list of booleans, one for each answer\n        // choice. Each boolean is true if the corresponding answer has\n        // been covered by at least one rule, and false otherwise.\n        handledAnswersArray = [];\n        for (let i = 0; i < numChoices; i++) {\n          handledAnswersArray.push(false);\n          answerChoices.push(this.getAnswerChoices()[i].val);\n        }\n\n        let answerChoiceToIndex:\n         Record<string, number> = {};\n        answerChoices.forEach((answerChoice, choiceIndex) => {\n          answerChoiceToIndex[answerChoice as string] = choiceIndex;\n        });\n\n        answerGroups.forEach((answerGroup) => {\n          let rules = answerGroup.rules;\n          rules.forEach((rule) => {\n            let ruleInputs = rule.inputs.x;\n            Object.keys(ruleInputs).forEach((ruleInput) => {\n              let choiceIndex = answerChoiceToIndex[ruleInput];\n              if (rule.type === 'Equals' ||\n                  rule.type === 'ContainsAtLeastOneOf') {\n                handledAnswersArray[choiceIndex] = true;\n              } else if (rule.type === 'DoesNotContainAtLeastOneOf') {\n                for (let i = 0; i < handledAnswersArray.length; i++) {\n                  if (i !== choiceIndex) {\n                    handledAnswersArray[i] = true;\n                  }\n                }\n              }\n            });\n          });\n        });\n\n        let areAllChoicesCovered = handledAnswersArray.every(\n          (handledAnswer) => {\n            return handledAnswer;\n          });\n        // We only suppress the default warning if each choice text has\n        // been handled by at least one answer group, based on rule\n        // type.\n        return areAllChoicesCovered;\n      }\n    }\n    return false;\n  }\n\n  onChangeSolicitAnswerDetails(): void {\n    this.onSaveSolicitAnswerDetails.emit(\n      this.stateSolicitAnswerDetailsService.displayed);\n    this.stateSolicitAnswerDetailsService.saveDisplayedValue();\n  }\n\n  isSelfLoopWithNoFeedback(outcome: Outcome): boolean | void {\n    if (outcome && typeof outcome === 'object' && this.stateName &&\n      outcome.constructor.name === 'Outcome') {\n      return outcome.isConfusing(this.stateName);\n    }\n  }\n\n  isSelfLoopThatIsMarkedCorrect(outcome: Outcome): boolean {\n    if (!outcome ||\n        !this.stateEditorService.getCorrectnessFeedbackEnabled()) {\n      return false;\n    }\n\n    let currentStateName = this.stateName;\n\n    return (\n      (outcome.dest === currentStateName) &&\n      outcome.labelledAsCorrect);\n  }\n\n  changeActiveAnswerGroupIndex(newIndex: number): void {\n    this.externalSaveService.onExternalSave.emit();\n    this.responsesService.changeActiveAnswerGroupIndex(newIndex);\n    this.activeAnswerGroupIndex = (\n      this.responsesService.getActiveAnswerGroupIndex());\n  }\n\n  getCurrentInteractionId(): string {\n    return this.stateInteractionIdService.savedMemento;\n  }\n\n  isCreatingNewState(outcome: Outcome): boolean {\n    return (outcome && outcome.dest === AppConstants.PLACEHOLDER_OUTCOME_DEST);\n  }\n\n  // This returns false if the current interaction ID is null.\n  isCurrentInteractionLinear(): boolean {\n    let interactionId = this.getCurrentInteractionId();\n    return Boolean(interactionId) && INTERACTION_SPECS[\n      interactionId as InteractionSpecsKey].is_linear;\n  }\n\n  isCurrentInteractionTrivial(): boolean {\n    let interactionId = this.getCurrentInteractionId();\n    let array: string[] = [\n      ...AppConstants.INTERACTION_IDS_WITHOUT_ANSWER_DETAILS];\n    return array.indexOf(\n      interactionId) !== -1;\n  }\n\n  isLinearWithNoFeedback(outcome: Outcome): boolean | void {\n    // Returns false if current interaction is linear and has no\n    // feedback.\n    if (outcome && typeof outcome === 'object' &&\n      outcome.constructor.name === 'Outcome') {\n      return this.isCurrentInteractionLinear() &&\n        !outcome.hasNonemptyFeedback();\n    }\n  }\n\n  getOutcomeTooltip(outcome: Outcome): string {\n    if (this.isSelfLoopThatIsMarkedCorrect(outcome)) {\n      return 'Self-loops should not be labelled as correct.';\n    }\n\n    // Outcome tooltip depends on whether feedback is displayed.\n    if (this.isLinearWithNoFeedback(outcome)) {\n      return 'Please direct the learner to a different card.';\n    } else {\n      return 'Please give Oppia something useful to say,' +\n             ' or direct the learner to a different card.';\n    }\n  }\n\n  openAddAnswerGroupModal(): void {\n    this.alertsService.clearWarnings();\n    this.externalSaveService.onExternalSave.emit();\n    let stateName = this.stateEditorService.getActiveStateName();\n    let addState = this.addState;\n    let currentInteractionId = this.getCurrentInteractionId();\n\n    let modalRef = this.ngbModal.open(AddAnswerGroupModalComponent, {\n      backdrop: 'static',\n    });\n\n    modalRef.componentInstance.addState.subscribe(\n      (value: string) => {\n        addState(value);\n      });\n\n    modalRef.componentInstance.currentInteractionId = currentInteractionId;\n    modalRef.componentInstance.stateName = stateName;\n\n    modalRef.result.then((result) => {\n      this.onSaveNextContentIdIndex.emit();\n\n      // Create a new answer group.\n      this.answerGroups.push(this.answerGroupObjectFactory.createNew(\n        [result.tmpRule], result.tmpOutcome, [],\n        result.tmpTaggedSkillMisconceptionId));\n      this.responsesService.save(\n        this.answerGroups, this.defaultOutcome,\n        (newAnswerGroups, newDefaultOutcome) => {\n          this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n          this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n          this.refreshWarnings.emit();\n        });\n      this.changeActiveAnswerGroupIndex(\n        this.answerGroups.length - 1);\n\n      // After saving it, check if the modal should be reopened right\n      // away.\n      if (result.reopen) {\n        this.openAddAnswerGroupModal();\n      }\n    }, () => {\n      this.alertsService.clearWarnings();\n      this.generateContentIdService.revertUnusedContentIdIndex();\n    });\n  }\n\n  deleteAnswerGroup(evt: Event, index: number): void {\n    // Prevent clicking on the delete button from also toggling the\n    // display state of the answer group.\n    if (evt.type === 'click') {\n      evt.stopPropagation();\n    }\n\n    this.alertsService.clearWarnings();\n    this.ngbModal.open(DeleteAnswerGroupModalComponent, {\n      backdrop: true,\n    }).result.then(() => {\n      this.responsesService.deleteAnswerGroup(\n        index, (newAnswerGroups) => {\n          this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n          this.refreshWarnings.emit();\n        });\n    }, () => {\n      this.alertsService.clearWarnings();\n    });\n  }\n\n  verifyAndUpdateInapplicableSkillMisconceptionIds(): void {\n    let answerGroups = this.responsesService.getAnswerGroups();\n    let taggedSkillMisconceptionIds: string[] = [];\n    for (let i = 0; i < answerGroups.length; i++) {\n      let taggedSkillMisconceptionId = (\n        answerGroups[i].taggedSkillMisconceptionId);\n      if (!answerGroups[i].outcome.labelledAsCorrect &&\n          taggedSkillMisconceptionId !== null) {\n        taggedSkillMisconceptionIds.push(\n          taggedSkillMisconceptionId);\n      }\n    }\n    let commonSkillMisconceptionIds = (\n      taggedSkillMisconceptionIds.filter(\n        skillMisconceptionId => (\n          this.inapplicableSkillMisconceptionIds.includes(\n            skillMisconceptionId))));\n    if (commonSkillMisconceptionIds.length) {\n      commonSkillMisconceptionIds.forEach((skillMisconceptionId => {\n        this.inapplicableSkillMisconceptionIds = (\n          this.inapplicableSkillMisconceptionIds.filter(\n            item => item !== skillMisconceptionId));\n      }));\n      this.onSaveInapplicableSkillMisconceptionIds.emit(\n        this.inapplicableSkillMisconceptionIds);\n    }\n  }\n\n  saveTaggedMisconception(taggedMisconception: TaggedMisconception): void {\n    const { skillId, misconceptionId } = taggedMisconception;\n    this.responsesService.updateActiveAnswerGroup({\n      taggedSkillMisconceptionId: skillId + '-' + misconceptionId\n    } as AnswerGroup, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveActiveAnswerGroupFeedback(updatedOutcome: Outcome): void {\n    this.responsesService.updateActiveAnswerGroup({\n      feedback: updatedOutcome.feedback\n    }, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveActiveAnswerGroupDest(updatedOutcome: Outcome): void {\n    this.responsesService.updateActiveAnswerGroup({\n      dest: updatedOutcome.dest,\n      refresherExplorationId: updatedOutcome.refresherExplorationId,\n      missingPrerequisiteSkillId:\n        updatedOutcome.missingPrerequisiteSkillId\n    }, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveActiveAnswerGroupDestIfStuck(updatedOutcome: Outcome): void {\n    this.responsesService.updateActiveAnswerGroup({\n      destIfReallyStuck: updatedOutcome.destIfReallyStuck,\n    } as typeof updatedOutcome, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveActiveAnswerGroupCorrectnessLabel(\n      updatedOutcome: Outcome): void {\n    this.responsesService.updateActiveAnswerGroup({\n      labelledAsCorrect: updatedOutcome.labelledAsCorrect\n    }, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveActiveAnswerGroupRules(updatedRules: Rule[]): void {\n    this.responsesService.updateActiveAnswerGroup({\n      rules: updatedRules\n    } as AnswerGroup, (newAnswerGroups) => {\n      this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n      this.refreshWarnings.emit();\n    });\n  }\n\n  saveDefaultOutcomeFeedback(updatedOutcome: Outcome): void {\n    this.responsesService.updateDefaultOutcome({\n      feedback: updatedOutcome.feedback,\n      dest: updatedOutcome.dest\n    } as Outcome, (newDefaultOutcome) => {\n      this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n    });\n  }\n\n  saveDefaultOutcomeDest(updatedOutcome: Outcome): void {\n    this.responsesService.updateDefaultOutcome({\n      dest: updatedOutcome.dest,\n      refresherExplorationId: updatedOutcome.refresherExplorationId,\n      missingPrerequisiteSkillId:\n        updatedOutcome.missingPrerequisiteSkillId\n    } as Outcome, (newDefaultOutcome) => {\n      this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n    });\n  }\n\n  saveDefaultOutcomeDestIfStuck(updatedOutcome: Outcome): void {\n    this.responsesService.updateDefaultOutcome({\n      destIfReallyStuck: updatedOutcome.destIfReallyStuck\n    } as Outcome, (newDefaultOutcome) => {\n      this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n    });\n  }\n\n  saveDefaultOutcomeCorrectnessLabel(\n      updatedOutcome: Outcome): void {\n    this.responsesService.updateDefaultOutcome({\n      labelledAsCorrect: updatedOutcome.labelledAsCorrect\n    } as Outcome, (newDefaultOutcome) => {\n      this.onSaveInteractionDefaultOutcome.emit(newDefaultOutcome);\n    });\n  }\n\n  getAnswerChoices(): AnswerChoice[] {\n    return this.responsesService.getAnswerChoices();\n  }\n\n  summarizeAnswerGroup(\n      answerGroup: AnswerGroup, interactionId: string,\n      answerChoices: AnswerChoice[], shortenRule: boolean\n  ): string {\n    let summary = '';\n    let outcome = answerGroup.outcome;\n    let hasFeedback = outcome.hasNonemptyFeedback();\n\n    if (answerGroup.rules) {\n      let firstRule = this.convertToPlainText.transform(\n        this.parameterizeRuleDescription.transform(\n          answerGroup.rules[0], interactionId, answerChoices));\n      summary = 'Answer ' + firstRule;\n\n      if (hasFeedback && shortenRule) {\n        summary = this.wrapTextWithEllipsis.transform(\n          summary, AppConstants.RULE_SUMMARY_WRAP_CHARACTER_COUNT);\n      }\n      summary = '[' + summary + '] ';\n    }\n\n    if (hasFeedback) {\n      summary += (\n        shortenRule ?\n          this.truncate.transform(outcome.feedback.html, 30) :\n          this.convertToPlainText.transform(outcome.feedback.html));\n    }\n    return summary;\n  }\n\n  summarizeDefaultOutcome(\n      defaultOutcome: Outcome, interactionId: string,\n      answerGroupCount: number, shortenRule: boolean\n  ): string {\n    if (!defaultOutcome) {\n      return '';\n    }\n\n    let summary = '';\n    let hasFeedback = defaultOutcome.hasNonemptyFeedback();\n\n    if (interactionId && INTERACTION_SPECS[\n      interactionId as InteractionSpecsKey].is_linear) {\n      let defaultOutcomeHeading = INTERACTION_SPECS[\n        interactionId as InteractionSpecsKey].default_outcome_heading;\n      if (defaultOutcomeHeading) {\n        summary = defaultOutcomeHeading;\n      }\n    } else if (answerGroupCount > 0) {\n      summary = 'All other answers';\n    } else {\n      summary = 'All answers';\n    }\n\n    if (hasFeedback && shortenRule) {\n      summary = this.wrapTextWithEllipsis.transform(\n        summary, AppConstants.RULE_SUMMARY_WRAP_CHARACTER_COUNT);\n    }\n    summary = '[' + summary + '] ';\n\n    if (hasFeedback) {\n      summary +=\n        this.convertToPlainText.transform(defaultOutcome.feedback.html);\n    }\n    return summary;\n  }\n\n  isOutcomeLooping(outcome: Outcome): boolean {\n    let activeStateName = this.stateName;\n    return outcome && (outcome.dest === activeStateName);\n  }\n\n  toggleResponseCard(): void {\n    this.responseCardIsShown = !this.responseCardIsShown;\n  }\n\n  getUnaddressedMisconceptionNames(): string[] {\n    let answerGroups = this.responsesService.getAnswerGroups();\n    let taggedSkillMisconceptionIds: Record<string, boolean> = {};\n    for (let i = 0; i < answerGroups.length; i++) {\n      let taggedSkillMisconceptionId = (\n        answerGroups[i].taggedSkillMisconceptionId);\n      if (!answerGroups[i].outcome.labelledAsCorrect &&\n          taggedSkillMisconceptionId !== null) {\n        taggedSkillMisconceptionIds[taggedSkillMisconceptionId] = true;\n      }\n    }\n    let unaddressedMisconceptionNames: string[] = [];\n    Object.keys(this.misconceptionsBySkill).forEach(\n      (skillId) => {\n        let misconceptions = this.misconceptionsBySkill[skillId];\n        for (let i = 0; i < misconceptions.length; i++) {\n          if (!misconceptions[i].isMandatory()) {\n            continue;\n          }\n          let skillMisconceptionId = (\n            skillId + '-' + misconceptions[i].getId());\n          if (!taggedSkillMisconceptionIds.hasOwnProperty(\n            skillMisconceptionId)) {\n            unaddressedMisconceptionNames.push(\n              misconceptions[i].getName());\n          }\n        }\n      });\n    return unaddressedMisconceptionNames;\n  }\n\n  getOptionalSkillMisconceptionStatus(\n      optionalSkillMisconceptionId: string): string {\n    let answerGroups = this.responsesService.getAnswerGroups();\n    let taggedSkillMisconceptionIds = [];\n    for (let i = 0; i < answerGroups.length; i++) {\n      let taggedSkillMisconceptionId = (\n        answerGroups[i].taggedSkillMisconceptionId);\n      if (!answerGroups[i].outcome.labelledAsCorrect &&\n          taggedSkillMisconceptionId !== null) {\n        taggedSkillMisconceptionIds.push(taggedSkillMisconceptionId);\n      }\n    }\n    let skillMisconceptionIdIsAssigned = (\n      taggedSkillMisconceptionIds.includes(\n        optionalSkillMisconceptionId));\n    if (skillMisconceptionIdIsAssigned) {\n      return 'Assigned';\n    }\n    return this.inapplicableSkillMisconceptionIds.includes(\n      optionalSkillMisconceptionId) ? 'Not Applicable' : '';\n  }\n\n  updateOptionalMisconceptionIdStatus(\n      skillMisconceptionId: string, isApplicable: boolean): void {\n    if (isApplicable) {\n      this.inapplicableSkillMisconceptionIds = (\n        this.inapplicableSkillMisconceptionIds.filter(\n          item => item !== skillMisconceptionId));\n    } else {\n      this.inapplicableSkillMisconceptionIds.push(\n        skillMisconceptionId);\n    }\n    this.onSaveInapplicableSkillMisconceptionIds.emit(\n      this.inapplicableSkillMisconceptionIds);\n    this.setActiveEditOption(false);\n  }\n\n  setActiveEditOption(activeEditOption: boolean): void {\n    this.activeEditOption = activeEditOption;\n  }\n\n  isNoActionExpected(skillMisconceptionId: string): boolean {\n    return ['Assigned', 'Not Applicable'].includes(\n      this.getOptionalSkillMisconceptionStatus(\n        skillMisconceptionId));\n  }\n\n  getStaticImageUrl(imagePath: string): string {\n    return this.urlInterpolationService.getStaticImageUrl(imagePath);\n  }\n\n  ngOnInit(): void {\n    this.SHOW_TRAINABLE_UNRESOLVED_ANSWERS = (\n      AppConstants.SHOW_TRAINABLE_UNRESOLVED_ANSWERS);\n    this.responseCardIsShown = true;\n    this.stateName = this.stateEditorService.getActiveStateName();\n    this.enableSolicitAnswerDetailsFeature = (\n      AppConstants.ENABLE_SOLICIT_ANSWER_DETAILS_FEATURE);\n    this.misconceptionsBySkill = {};\n    this.directiveSubscriptions.add(\n      this.responsesService.onInitializeAnswerGroups.subscribe((data) => {\n        this.responsesService.init(data as Interaction);\n        this.answerGroups = this.responsesService.getAnswerGroups();\n        this.defaultOutcome = this.responsesService.getDefaultOutcome();\n\n        // If the creator selects an interaction which has only one\n        // possible answer, automatically expand the default response.\n        // Otherwise, default to having no responses initially\n        // selected.\n        if (this.isCurrentInteractionLinear()) {\n          this.responsesService.changeActiveAnswerGroupIndex(0);\n        }\n\n        // Initialize training data for these answer groups.\n        this._initializeTrainingData();\n\n        this.activeAnswerGroupIndex = (\n          this.responsesService.getActiveAnswerGroupIndex());\n        this.externalSaveService.onExternalSave.emit();\n      })\n    );\n\n    this.directiveSubscriptions.add(\n      this.stateInteractionIdService.onInteractionIdChanged.subscribe(\n        (newInteractionId) => {\n          this.externalSaveService.onExternalSave.emit();\n          this.responsesService.onInteractionIdChanged(\n            newInteractionId,\n            (newAnswerGroups, newDefaultOutcome) => {\n              this.onSaveInteractionDefaultOutcome.emit(\n                newDefaultOutcome);\n              this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n              this.refreshWarnings.emit();\n              this.answerGroups = this.responsesService.getAnswerGroups();\n              this.defaultOutcome =\n                this.responsesService.getDefaultOutcome();\n\n              // Reinitialize training data if the interaction ID is\n              // changed.\n              this._initializeTrainingData();\n\n              this.activeAnswerGroupIndex = (\n                this.responsesService.getActiveAnswerGroupIndex());\n            });\n\n          // Prompt the user to create a new response if it is not a\n          // linear or non-terminal interaction and if an actual\n          // interaction is specified (versus one being deleted).\n          if (newInteractionId &&\n              !INTERACTION_SPECS[\n                newInteractionId as InteractionSpecsKey].is_linear &&\n              !INTERACTION_SPECS[\n                newInteractionId as InteractionSpecsKey].is_terminal) {\n            this.openAddAnswerGroupModal();\n          }\n        }\n      )\n    );\n\n    this.directiveSubscriptions.add(\n      this.responsesService.onAnswerGroupsChanged.subscribe(\n        () => {\n          this.answerGroups = this.responsesService.getAnswerGroups();\n          this.defaultOutcome = this.responsesService.getDefaultOutcome();\n          this.activeAnswerGroupIndex =\n          this.responsesService.getActiveAnswerGroupIndex();\n          this.verifyAndUpdateInapplicableSkillMisconceptionIds();\n        }\n      ));\n    this.directiveSubscriptions.add(\n      this.stateEditorService.onUpdateAnswerChoices.subscribe(\n        (newAnswerChoices) => {\n          this.responsesService.updateAnswerChoices(newAnswerChoices);\n        })\n    );\n\n    this.directiveSubscriptions.add(\n      this.stateEditorService.onHandleCustomArgsUpdate.subscribe(\n        (newAnswerChoices) => {\n          this.responsesService.handleCustomArgsUpdate(\n            newAnswerChoices, (newAnswerGroups) => {\n              this.onSaveInteractionAnswerGroups.emit(newAnswerGroups);\n              this.refreshWarnings.emit();\n            });\n        }\n      )\n    );\n\n    this.directiveSubscriptions.add(\n      this.stateEditorService.onStateEditorInitialized.subscribe(\n        () => {\n          this.misconceptionsBySkill = (\n            this.stateEditorService.getMisconceptionsBySkill());\n\n          this.containsOptionalMisconceptions = (\n            Object.values(this.misconceptionsBySkill).some(\n              (misconceptions: Misconception[]) => misconceptions.some(\n                misconception => !misconception.isMandatory())));\n        })\n    );\n\n    if (this.stateEditorService.isInQuestionMode()) {\n      this.onResponsesInitialized.emit();\n    }\n    this.stateEditorService.updateStateResponsesInitialised();\n    this.inapplicableSkillMisconceptionIds = (\n      this.stateEditorService.getInapplicableSkillMisconceptionIds());\n    this.activeEditOption = false;\n  }\n\n  ngOnDestroy(): void {\n    this.directiveSubscriptions.unsubscribe();\n  }\n}\n\nangular.module('oppia').directive('oppiaStateResponses',\n  downgradeComponent({\n    component: StateResponsesComponent\n  }) as angular.IDirectiveFactory);\n"
    },
    {
      "filename": "core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/add-answer-group-modal.component.html",
      "content": "<div class=\"modal-header e2e-test-add-response-modal-header\" ngbAutofocus>\n  <h3>Add Response</h3>\n  <i class=\"fa fa-times\" (click)=\"cancel()\"></i>\n</div>\n\n<div class=\"modal-body\">\n  <form name=\"addAnswerGroupForm.outcomeDetailsForm\" class=\"e2e-test-add-response-details\">\n    <div class=\"oppia-rule-details-header\">\n      <strong>If the learner's answer...</strong>\n    </div>\n\n    <oppia-rule-editor class=\"rule-editor-add-answer\"\n                       [modalId]=\"modalId\"\n                       [(rule)]=\"tmpRule\"\n                       [isEditable]=\"isEditable\"\n                       [isEditingRuleInline]=\"false\">\n    </oppia-rule-editor>\n\n    <br>\n\n    <div *ngIf=\"!feedbackEditorIsOpen\"\n         title=\"Edit feedback\" class=\"oppia-edit-feedback\">\n      <div class=\"oppia-rule-details-header oppia-editable-section\">\n        <div class=\"oppia-rule-preview oppia-transition-200\">\n          <div class=\"oppia-click-to-start-editing\" tabindex=\"0\" (click)=\"openFeedbackEditor()\" (keydown.enter)=\"openFeedbackEditor()\">\n            <i class=\"fa fa-pen oppia-editor-edit-icon e2e-test-open-feedback-editor\" title=\"Edit Feedback\">&#xE254;</i>\n          </div>\n          <strong>Oppia tells the learner...</strong>\n          <div class=\"position-relative\">\n            <span class=\"oppia-nothing-text\">\n              <em>Nothing</em>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"feedbackEditorIsOpen\">\n      <oppia-outcome-feedback-editor class=\"oppia-outcome-feedback-editor-add-answer\" [outcome]=\"tmpOutcome\">\n      </oppia-outcome-feedback-editor>\n    </div>\n    <div *ngIf=\"isFeedbackLengthExceeded(tmpOutcome)\" class=\"oppia-length-validation-error\">\n      The feedback length is too long. Please use at most 500 characters.\n    </div>\n    <br>\n\n    <oppia-outcome-destination-editor [outcome]=\"tmpOutcome\"\n                                      *ngIf=\"!questionModeEnabled\"\n                                      [outcomeHasFeedback]=\"true\"\n                                      (getChanges)=\"validateChanges($event)\"\n                                      (addState)=\"updateState($event)\">\n    </oppia-outcome-destination-editor>\n\n    <oppia-outcome-if-stuck-destination-editor [outcome]=\"tmpOutcome\"\n                                               *ngIf=\"!questionModeEnabled\"\n                                               (getChanges)=\"validateChanges($event)\"\n                                               (addState)=\"updateState($event)\">\n    </oppia-outcome-if-stuck-destination-editor>\n  </form>\n\n  <div class=\"oppia-correctness-label-editor\" *ngIf=\"isCorrectnessFeedbackEnabled() && !isCurrentInteractionLinear()\">\n    <input class=\"e2e-test-editor-correctness-toggle mr-2\"\n           type=\"checkbox\"\n           [(ngModel)]=\"tmpOutcome.labelledAsCorrect\">\n    <strong>The answers in this group are correct</strong>\n  </div>\n\n  <oppia-question-misconception-editor *ngIf=\"questionModeEnabled\"\n                                       (saveTaggedMisconception)=\"updateTaggedMisconception($event)\"\n                                       (saveAnswerGroupFeedback)=\"updateAnswerGroupFeedback($event)\"\n                                       [isEditable]=\"true\"\n                                       [outcome]=\"tmpOutcome\"\n                                       [rules]=\"tmpRule\"\n                                       [taggedSkillMisconceptionId]=\"tmpTaggedSkillMisconceptionId\">\n  </oppia-question-misconception-editor>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-secondary e2e-test-close-add-response-modal\" (click)=\"cancel()\">Cancel</button>\n  <button class=\"btn btn-success e2e-test-add-new-response\" (click)=\"saveResponse(false)\" [disabled]=\"(isInvalid || validation) || isSelfLoopWithNoFeedback(tmpOutcome) || isFeedbackLengthExceeded(tmpOutcome)\">Save Response</button>\n  <button class=\"btn btn-success\" (click)=\"saveResponse(true)\" [disabled]=\"(isInvalid || validation) || isSelfLoopWithNoFeedback(tmpOutcome) || isFeedbackLengthExceeded(tmpOutcome)\">Save and Add Another</button>\n</div>\n\n<style>\n  .modal-footer {\n    display: flex;\n    justify-content: end;\n  }\n  .oppia-click-to-start-editing {\n    width: 95%;\n  }\n  .oppia-outcome-feedback-editor-add-answer {\n    margin-top: 50px;\n  }\n  .rule-editor-add-answer {\n    width: 100%;\n  }\n  .add-answer-group-modal .modal-header i {\n    display: none;\n  }\n  .add-answer-group-modal .oppia-edit-feedback {\n    height: 100%;\n    margin-right: 22px;\n    width: 100%;\n  }\n  .add-answer-group-modal .oppia-nothing-text {\n    color: #888;\n  }\n  @media screen and (max-width: 768px) {\n    .oppia-click-to-start-editing {\n      margin-top: 20px;\n      position: relative;\n      top: 20px;\n    }\n    .add-answer-group-modal .modal-dialog ,\n    .add-answer-group-modal .modal-content {\n      border: 0;\n      border-radius: 0;\n      margin: auto;\n    }\n    .add-answer-group-modal .modal-content {\n      min-height: 100vh;\n    }\n    .add-answer-group-modal .modal-header {\n      background-color: #00609c;\n    }\n    .add-answer-group-modal .modal-header i {\n      color: #fff;\n      display: block;\n      font-size: 20px;\n    }\n    .add-answer-group-modal .modal-header h3 {\n      color: #fff;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    strong {\n      font-size: 18px;\n    }\n    .oppia-correctness-label-editor {\n      margin-top: 0;\n    }\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/customize-interaction-modal.component.html",
      "content": "<div class=\"oppia-interaction-header-container\">\n  <div class=\"modal-header oppia-modal-header\"\n       [ngClass]=\"{'modal-header-blue': stateInteractionIdService.displayed && (customizationModalReopened || hasCustomizationArgs)}\">\n    <h3 *ngIf=\"!stateInteractionIdService.displayed\">\n      Choose Interaction\n    </h3>\n\n    <h3 class=\"oppia-customization-header\"\n        *ngIf=\"stateInteractionIdService.displayed && (customizationModalReopened || hasCustomizationArgs)\">\n      Customize Interaction ({{ getTitle(stateInteractionIdService.displayed) }})\n    </h3>\n    <i class=\"fa fa-times\" (click)=\"cancel()\"></i>\n  </div>\n</div>\n\n<div class=\"customize-interaction-body-container modal-body\">\n  <div [hidden]=\"!isinteractionOpen\">\n    <nav ngbNav\n         #nav=\"ngbNav\"\n         class=\"nav-tabs\">\n      <ng-container ngbNavItem\n                    *ngFor=\"let category of allowedInteractionCategories\">\n        <a ngbNavLink\n           class=\"e2e-test-interaction-tab-{{ getHyphenatedLowercaseCategoryName(category.name) }}\">\n          {{ category.name }}\n        </a>\n        <ng-template ngbNavContent>\n          <div>\n            <div *ngFor=\"let interactionId of category.interaction_ids\"\n                 tabindex=\"0\"\n                 (keydown.enter)=\"onChangeInteractionId(interactionId)\"\n                 (click)=\"onChangeInteractionId(interactionId)\"\n                 class=\"oppia-interaction-tile e2e-test-interaction-tile-{{ interactionId }}\"\n                 [ngbPopover]=\"getDescription(interactionId)\"\n                 placement=\"bottom\"\n                 triggers=\"mouseenter:mouseleave\">\n              <img [src]=\"getInteractionThumbnailImageUrl(interactionId)\">\n              <div class=\"oppia-interaction-tile-name fx-row fx-main-center fx-cross-center\">\n                {{ getTitle(interactionId) }}\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </ng-container>\n    </nav>\n    <div [ngbNavOutlet]=\"nav\" class=\"mt-4\"></div>\n  </div>\n\n  <div *ngIf=\"!isinteractionOpen && stateInteractionIdService.displayed && hasCustomizationArgs\"\n       class=\"interaction-editor-form e2e-test-interaction-editor\">\n    <div class=\"e2e-test-multiple-options\"\n         *ngFor=\"let customizationArgSpec of customizationArgSpecs\">\n      <div *ngIf=\"customizationArgSpec.schema.type !== 'bool'\"\n           class=\"oppia-interaction-customization-label\">\n        {{ customizationArgSpec.description }}\n      </div>\n      <schema-based-editor [ngClass]=\"{'boolean-checkbox': customizationArgSpec.schema.type === 'bool'}\"\n                           [schema]=\"customizationArgSpec.schema\"\n                           [(ngModel)]=\"stateCustomizationArgsService.displayed[customizationArgSpec.name].value\">\n      </schema-based-editor>\n      <div *ngIf=\"customizationArgSpec.schema.type === 'bool'\"\n           class=\"oppia-interaction-customization-label\">\n        {{ customizationArgSpec.description }}\n      </div>\n      <div class=\"oppia-interaction-customization-label-container\"></div>\n    </div>\n    <div *ngIf=\"getCustomizationArgsWarningMessage()\"\n         class=\"alert alert-danger oppia-units-input-error\">\n      {{ getCustomizationArgsWarningMessage() }}\n    </div>\n  </div>\n\n  <div *ngIf=\"!isinteractionOpen && !hasCustomizationArgs && customizationModalReopened\">\n    This interaction cannot be modified. To delete it, close this popup and click the 'x' button in the top-right corner.\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-secondary\"\n          (click)=\"cancel()\"\n          *ngIf=\"!hasCustomizationArgs\">\n    Cancel\n  </button>\n  <!-- Do not show this button if an interaction is already selected. -->\n  <button class=\"btn btn-secondary float-left\"\n          (click)=\"returnToInteractionSelector()\"\n          *ngIf=\"!isinteractionOpen && !stateInteractionIdService.savedMemento && hasCustomizationArgs\">\n    Change Interaction\n  </button>\n\n  <button class=\"btn btn-secondary\"\n          (click)=\"cancelWithConfirm()\"\n          *ngIf=\"hasCustomizationArgs\">\n    Cancel\n  </button>\n\n  <div class=\"btn-group\"\n       *ngIf=\"hasCustomizationArgs\"\n       [ngbPopover]=\"isSaveInteractionButtonEnabled() ? '' : getSaveInteractionButtonTooltip()\"\n       placement=\"bottom\"\n       triggers=\"mouseenter:mouseleave\">\n    <button class=\"btn btn-success e2e-test-save-interaction\"\n            (click)=\"save()\"\n            [disabled]=\"!isSaveInteractionButtonEnabled()\">\n      Save Interaction\n    </button>\n  </div>\n\n  <button class=\"btn btn-success e2e-test-close-no-customization-modal\"\n          (click)=\"confirm('okay')\"\n          *ngIf=\"!hasCustomizationArgs && customizationModalReopened\">\n    Okay\n  </button>\n</div>\n\n<style>\n  .modal-footer {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .interaction-editor-form .boolean-checkbox {\n    float: left;\n    margin-right: 4px;\n  }\n\n  .customize-interaction-body-container .oppia-interaction-tile img {\n    border: 1px solid #aaa;\n    border-bottom: none;\n    border-radius: 5px 5px 0 0;\n  }\n\n  .customize-interaction-body-container ul .active {\n    background-color: #e0f2f1;\n    border-bottom: 2px solid #00609c;\n    color: #00609c;\n  }\n\n  .customize-interaction-body-container ul :hover:not(.active) {\n    background-color: #e0f2f166;\n    border-bottom: 2px solid #e0f2f166;\n    border-color: #e0f2f166;\n  }\n   .customize-interaction-modal .modal-dialog {\n     margin: 30px auto;\n     max-width: none;\n     width: 45vw;\n  }\n\n  .customize-interaction-modal .modal-header i {\n    display: none;\n  }\n\n  .oppia-interaction-header-container .oppia-modal-header {\n    border-bottom: 0;\n    padding-bottom: 0;\n  }\n\n  .oppia-interaction-header-container .oppia-interaction-customization-label-container {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (max-width: 768px) {\n    .modal-footer {\n      align-items: center;\n      display: flex;\n      justify-content: center;\n    }\n    .customize-interaction-modal .modal-content {\n      border: 0;\n      border-radius: 0;\n      margin: 0;\n      min-height: 100vh;\n    }\n\n    .customize-interaction-modal .modal-dialog {\n      margin: 0;\n      max-width: none;\n      min-height: 100vh;\n      width: 100vw;\n    }\n\n    .customize-interaction-modal .modal-header-blue {\n      background-color: #00609c;\n    }\n\n    .customize-interaction-modal .modal-header-blue i {\n      color: #fff;\n      display: block;\n      font-size: 20px;\n    }\n\n    .customize-interaction-modal .modal-header-blue h3 {\n      color: #fff;\n    }\n  }\n\n  @media screen and (max-width: 500px) {\n    .modal-footer .btn {\n      height: 50px;\n    }\n    .oppia-customization-header {\n      font-size: 18px;\n    }\n    .oppia-interaction-customization-label {\n      font-size: 16px;\n    }\n  }\n</style>\n"
    }
  ],
  "questions": [
    "@seanlip ,I have added tabindex=\"0\" in the file {question-editor.component.html}  at the location   {oppia/core/templates/components/question-directives/question-editor/question-editor.component.html}\r\nAnd it's working fine\r\nUpdated code\r\n![Screenshot from 2023-02-27 22-06-43](https://user-images.githubusercontent.com/107416385/221624009-a20bfdd1-a92d-4c44-a3d4-5577817e479e.png)\r\n\r\n\r\nResponse \r\nplease look\r\n[Screencast from 27-02-23 09:22:52 PM IST.webm](https://user-images.githubusercontent.com/107416385/221624402-addc99d6-6d65-4ddc-83f3-63f39fbcf7a4.webm)\r\nCan you please assign it to me?"
  ],
  "golden_answers": [
    "@lalitmohit \r\nEffectively, that working but you can't access to the rich text editor by pressing \\<enter\\>. So i tested on the dummy div\r\n containing \"Type your question...\" and the edit icon in **{core/templates/components/state-editor/state-content-editor/state-content-editor.component.html}.**  \r\n ![image](https://user-images.githubusercontent.com/56401976/222180508-7b042ba0-c974-467d-a4da-4e2bfcbc1e0a.png)\r\n When selected there no outline (logic because there is no css style when this element is focus) and it's also impossible to enter to the rich text editor.\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183065-81bf381c-b792-4e31-b727-66a57b7d5242.mp4\r\n\r\nhttps://user-images.githubusercontent.com/56401976/222183068-bd2a157c-3cfc-4666-8ed0-8d4c0bd468b0.mp4"
  ],
  "questions_generated": [
    "What is the main issue reported in the oppia_oppia repository, and how does it affect the user experience?",
    "How can the bug related to keyboard focus be reproduced in the oppia_oppia repository?",
    "What solution was proposed in the discussion to address the focus issue in the Contributor dashboard, and why was it deemed insufficient?",
    "What considerations should be taken into account when fixing the keyboard focus issue for accessibility in the oppia_oppia repository?",
    "What are some potential HTML or CSS manipulations that could be implemented to resolve the keyboard focus issue described in the oppia_oppia issue?",
    "How does the Contributor dashboard in the oppia_oppia repository fit into the overall code structure, and what might be the entry point for addressing the keyboard focus issue?",
    "What is the significance of accessibility engineering in the context of the oppia_oppia repository, and how does it relate to the reported issue?"
  ],
  "golden_answers_generated": [
    "The main issue reported is that keyboard focus is not moving to the 'Practice question' section in the Contributor dashboard, preventing users from entering text into the textbox. This issue affects the user experience by hindering accessibility, as users are unable to navigate and input data using the keyboard, which is essential for users relying on keyboard navigation.",
    "The bug can be reproduced by following these steps: 1) Log in to www.oppiatestserver.org, 2) Go to the Contributor dashboard, 3) Click on 'Submit question' and then 'Suggest question', 4) Select 'Medium' difficulty level and click on the 'Continue' button, 5) Attempt to access the dialog box to go to 'Your Practice question' to enter text. The focus will only move to the buttons like close, cancel, and go back, but not to the text input area.",
    "A solution was proposed to add a hover element, change color opacity, and add text-shadow effects to improve focus visibility. However, this was deemed insufficient as it did not address the core issue of keyboard focus, which is crucial for accessibility. The proposal was more about styling rather than ensuring keyboard navigability, which is essential for users relying on keyboard inputs.",
    "When fixing the keyboard focus issue, considerations should include ensuring that all interactive elements are reachable via keyboard tabbing, providing clear visual indicators of focus, and maintaining logical tab order. Additionally, changes to HTML or CSS might be necessary to ensure that the 'Practice question' section is focusable and accessible.",
    "To resolve the keyboard focus issue, potential HTML or CSS manipulations include setting proper tabindex attributes on the 'Practice question' input field, ensuring that it is included in the tab order. Additionally, using CSS to provide a clear visual focus indicator, such as a border or background change, can help users identify focused elements.",
    "The Contributor dashboard is a feature within the oppia_oppia repository that allows users to contribute content. The entry point for addressing the keyboard focus issue might be within the HTML or TypeScript files that define the UI and behavior of the 'Submit question' feature, specifically focusing on the components that handle input fields and dialog boxes.",
    "Accessibility engineering is crucial in ensuring that the oppia_oppia platform is usable by all individuals, including those with disabilities. The reported issue directly impacts accessibility, as it prevents users who rely on keyboard navigation from effectively interacting with the 'Practice question' input field. Addressing this issue is important to maintain compliance with accessibility standards and provide an inclusive user experience."
  ]
}