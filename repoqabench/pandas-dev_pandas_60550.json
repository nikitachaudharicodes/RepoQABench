{
  "repo_name": "pandas-dev_pandas",
  "issue_id": "60550",
  "issue_description": "# ENH: Passing a single value to `.describe(percentiles = [0.25])` returns 25th- and 50th-percentile\n\n### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# creating a single series dataframe\r\nframe = pd.DataFrame(np.array([1, 2, 3, 4, 5, 100]))\r\n\r\n# getting the describe with single percentile value\r\nframe.describe(percentiles = [0.25])\n```\n\n\n### Issue Description\n\nUsing a single percentile value below 50 for `percentiles` for data frame describe function returns 50th percentile data by default, while the same is not reflected when the value is more than 50.\r\n\r\n```python\r\n# considering the above dataframe in example\r\n>>> frame.describe(percentiles = [0.25])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n25%      2.250000\r\n50%      3.500000\r\nmax    100.000000\r\n>>> frame.describe(percentiles = [0.35])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n35%      2.750000\r\n50%      3.500000\r\nmax    100.000000\r\n>>> frame.describe(percentiles = [0.51])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n50%      3.500000\r\n51%      3.550000\r\nmax    100.000000\r\n```\n\n### Expected Behavior\n\nShould return only given percentile value instead.\n\n### Installed Versions\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\r\npython                : 3.12.4\r\npython-bits           : 64\r\nOS                    : Windows\r\nOS-release            : 10\r\nVersion               : 10.0.19045\r\nmachine               : AMD64\r\nprocessor             : Intel64 Family 6 Model 140 Stepping 2, GenuineIntel\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : None\r\nLOCALE                : English_India.1252\r\n\r\npandas                : 2.2.3\r\nnumpy                 : 2.2.0\r\npytz                  : 2024.2\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.1\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\ndataframe-api-compat  : None\r\nfastparquet           : None\r\nfsspec                : None\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npandas_gbq            : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : None\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n\r\n</details>\r\n",
  "issue_comments": [
    {
      "id": 2540080469,
      "user": "rhshadrach",
      "body": "Thanks for the report. This goes back to https://github.com/ivanovmg/pandas/commit/843aa600c8ed359f828c5a25d5e7130d6df1e08a and is indeed intentional.\r\n\r\nBut it is certainly not well documented, and I'm supportive of removing the behavior where we always include 0.5."
    },
    {
      "id": 2540128840,
      "user": "kevkle",
      "body": "take "
    },
    {
      "id": 2561603687,
      "user": "yanweiSu",
      "body": "take"
    },
    {
      "id": 2577391619,
      "user": "Pushkar3232",
      "body": "Hi,\r\nI'm a first-time contributor and working on this issue. Could you please help me by pointing to the specific file or path where the .describe() function is implemented? I'm having trouble navigating the large repository and would appreciate some guidance on where to start.\r\nThanks in advance for your help!"
    },
    {
      "id": 2578747880,
      "user": "rhshadrach",
      "body": "@Pushkar3232 - thanks for your interest, but this issue already has a PR up resolving it."
    },
    {
      "id": 2690764586,
      "user": "Abhibhav2003",
      "body": "take"
    },
    {
      "id": 2692160407,
      "user": "Abhibhav2003",
      "body": "refer to pull request : #61024"
    },
    {
      "id": 2716096028,
      "user": "preet545",
      "body": "take \n"
    },
    {
      "id": 2720853823,
      "user": "xaris96",
      "body": "take"
    },
    {
      "id": 2739354374,
      "user": "MartinBraquet",
      "body": "@rhshadrach and other maintainers, I read different opinions regarding the usefulness of the change desired here. In #60557 , some comments advise to preserve the median, even when `percentiles` is not `None`.\n\nIf we remove the median when `percentiles` is not `None`, perhaps it then raises the question as to why we don't also remove the other default percentiles, namely the min and max. Indeed, the default percentiles rendered by `.describe` are the 0th, 25th, 50th, 75th and 100th ones. Keeping the 0th and 100th ones while discarding the 50th one -- when `percentiles` is passed -- might seem arbitrary in the eyes of some users. In some sense, this would make the judgment that the min and max are more important / valuable than the median. To me, this decision potentially makes sense; I am simply wondering if such a judgment is also widely agreed upon by the users.\n\nI allowed myself to handle this issue in #61158  as all related activity got stale for weeks. If my comment above about the utility of the issue is reconsidered, I'll update my PR; it was asked to cover with more tests in any case."
    },
    {
      "id": 2742115133,
      "user": "MartinBraquet",
      "body": "take"
    }
  ],
  "text_context": "# ENH: Passing a single value to `.describe(percentiles = [0.25])` returns 25th- and 50th-percentile\n\n### Pandas version checks\n\n- [X] I have checked that this issue has not already been reported.\n\n- [X] I have confirmed this bug exists on the [latest version](https://pandas.pydata.org/docs/whatsnew/index.html) of pandas.\n\n- [X] I have confirmed this bug exists on the [main branch](https://pandas.pydata.org/docs/dev/getting_started/install.html#installing-the-development-version-of-pandas) of pandas.\n\n\n### Reproducible Example\n\n```python\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# creating a single series dataframe\r\nframe = pd.DataFrame(np.array([1, 2, 3, 4, 5, 100]))\r\n\r\n# getting the describe with single percentile value\r\nframe.describe(percentiles = [0.25])\n```\n\n\n### Issue Description\n\nUsing a single percentile value below 50 for `percentiles` for data frame describe function returns 50th percentile data by default, while the same is not reflected when the value is more than 50.\r\n\r\n```python\r\n# considering the above dataframe in example\r\n>>> frame.describe(percentiles = [0.25])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n25%      2.250000\r\n50%      3.500000\r\nmax    100.000000\r\n>>> frame.describe(percentiles = [0.35])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n35%      2.750000\r\n50%      3.500000\r\nmax    100.000000\r\n>>> frame.describe(percentiles = [0.51])\r\n                0\r\ncount    6.000000\r\nmean    19.166667\r\nstd     39.625329\r\nmin      1.000000\r\n50%      3.500000\r\n51%      3.550000\r\nmax    100.000000\r\n```\n\n### Expected Behavior\n\nShould return only given percentile value instead.\n\n### Installed Versions\n\n<details>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\r\npython                : 3.12.4\r\npython-bits           : 64\r\nOS                    : Windows\r\nOS-release            : 10\r\nVersion               : 10.0.19045\r\nmachine               : AMD64\r\nprocessor             : Intel64 Family 6 Model 140 Stepping 2, GenuineIntel\r\nbyteorder             : little\r\nLC_ALL                : None\r\nLANG                  : None\r\nLOCALE                : English_India.1252\r\n\r\npandas                : 2.2.3\r\nnumpy                 : 2.2.0\r\npytz                  : 2024.2\r\ndateutil              : 2.9.0.post0\r\npip                   : 24.1\r\nCython                : None\r\nsphinx                : None\r\nIPython               : None\r\nadbc-driver-postgresql: None\r\nadbc-driver-sqlite    : None\r\nbs4                   : None\r\nblosc                 : None\r\nbottleneck            : None\r\ndataframe-api-compat  : None\r\nfastparquet           : None\r\nfsspec                : None\r\nhtml5lib              : None\r\nhypothesis            : None\r\ngcsfs                 : None\r\njinja2                : None\r\nlxml.etree            : None\r\nmatplotlib            : None\r\nnumba                 : None\r\nnumexpr               : None\r\nodfpy                 : None\r\nopenpyxl              : None\r\npandas_gbq            : None\r\npsycopg2              : None\r\npymysql               : None\r\npyarrow               : None\r\npyreadstat            : None\r\npytest                : None\r\npython-calamine       : None\r\npyxlsb                : None\r\ns3fs                  : None\r\nscipy                 : None\r\nsqlalchemy            : None\r\ntables                : None\r\ntabulate              : None\r\nxarray                : None\r\nxlrd                  : None\r\nxlsxwriter            : None\r\nzstandard             : None\r\ntzdata                : 2024.2\r\nqtpy                  : None\r\npyqt5                 : None\r\n\r\n</details>\r\n\n\nThanks for the report. This goes back to https://github.com/ivanovmg/pandas/commit/843aa600c8ed359f828c5a25d5e7130d6df1e08a and is indeed intentional.\r\n\r\nBut it is certainly not well documented, and I'm supportive of removing the behavior where we always include 0.5.\n\ntake \n\ntake\n\nHi,\r\nI'm a first-time contributor and working on this issue. Could you please help me by pointing to the specific file or path where the .describe() function is implemented? I'm having trouble navigating the large repository and would appreciate some guidance on where to start.\r\nThanks in advance for your help!\n\n@Pushkar3232 - thanks for your interest, but this issue already has a PR up resolving it.\n\ntake\n\nrefer to pull request : #61024\n\ntake \n\n\ntake\n\n@rhshadrach and other maintainers, I read different opinions regarding the usefulness of the change desired here. In #60557 , some comments advise to preserve the median, even when `percentiles` is not `None`.\n\nIf we remove the median when `percentiles` is not `None`, perhaps it then raises the question as to why we don't also remove the other default percentiles, namely the min and max. Indeed, the default percentiles rendered by `.describe` are the 0th, 25th, 50th, 75th and 100th ones. Keeping the 0th and 100th ones while discarding the 50th one -- when `percentiles` is passed -- might seem arbitrary in the eyes of some users. In some sense, this would make the judgment that the min and max are more important / valuable than the median. To me, this decision potentially makes sense; I am simply wondering if such a judgment is also widely agreed upon by the users.\n\nI allowed myself to handle this issue in #61158  as all related activity got stale for weeks. If my comment above about the utility of the issue is reconsidered, I'll update my PR; it was asked to cover with more tests in any case.\n\ntake",
  "pr_link": "https://github.com/pandas-dev/pandas/pull/61158",
  "code_context": [
    {
      "filename": "pandas/core/generic.py",
      "content": "# pyright: reportPropertyTypeMismatch=false\nfrom __future__ import annotations\n\nimport collections\nfrom copy import deepcopy\nimport datetime as dt\nfrom functools import partial\nfrom json import loads\nimport operator\nimport pickle\nimport re\nimport sys\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    ClassVar,\n    Literal,\n    NoReturn,\n    cast,\n    final,\n    overload,\n)\nimport warnings\n\nimport numpy as np\n\nfrom pandas._config import config\n\nfrom pandas._libs import lib\nfrom pandas._libs.lib import is_range_indexer\nfrom pandas._libs.tslibs import (\n    Period,\n    Timestamp,\n    to_offset,\n)\nfrom pandas._typing import (\n    AlignJoin,\n    AnyArrayLike,\n    ArrayLike,\n    Axes,\n    Axis,\n    AxisInt,\n    CompressionOptions,\n    Concatenate,\n    DtypeArg,\n    DtypeBackend,\n    DtypeObj,\n    FilePath,\n    FillnaOptions,\n    FloatFormatType,\n    FormattersType,\n    Frequency,\n    IgnoreRaise,\n    IndexKeyFunc,\n    IndexLabel,\n    InterpolateOptions,\n    IntervalClosedType,\n    JSONSerializable,\n    Level,\n    ListLike,\n    Manager,\n    NaPosition,\n    NDFrameT,\n    OpenFileErrors,\n    RandomState,\n    ReindexMethod,\n    Renamer,\n    Scalar,\n    Self,\n    SequenceNotStr,\n    SortKind,\n    StorageOptions,\n    Suffixes,\n    T,\n    TimeAmbiguous,\n    TimedeltaConvertibleTypes,\n    TimeNonexistent,\n    TimestampConvertibleTypes,\n    TimeUnit,\n    ValueKeyFunc,\n    WriteBuffer,\n    WriteExcelBuffer,\n    npt,\n)\nfrom pandas.compat import PYPY\nfrom pandas.compat._constants import REF_COUNT\nfrom pandas.compat._optional import import_optional_dependency\nfrom pandas.compat.numpy import function as nv\nfrom pandas.errors import (\n    AbstractMethodError,\n    ChainedAssignmentError,\n    InvalidIndexError,\n)\nfrom pandas.errors.cow import _chained_assignment_method_msg\nfrom pandas.util._decorators import (\n    deprecate_kwarg,\n    doc,\n)\nfrom pandas.util._exceptions import find_stack_level\nfrom pandas.util._validators import (\n    check_dtype_backend,\n    validate_ascending,\n    validate_bool_kwarg,\n    validate_inclusive,\n)\n\nfrom pandas.core.dtypes.astype import astype_is_view\nfrom pandas.core.dtypes.common import (\n    ensure_object,\n    ensure_platform_int,\n    ensure_str,\n    is_bool,\n    is_bool_dtype,\n    is_dict_like,\n    is_extension_array_dtype,\n    is_list_like,\n    is_number,\n    is_numeric_dtype,\n    is_re_compilable,\n    is_scalar,\n    pandas_dtype,\n)\nfrom pandas.core.dtypes.dtypes import (\n    DatetimeTZDtype,\n    ExtensionDtype,\n    PeriodDtype,\n)\nfrom pandas.core.dtypes.generic import (\n    ABCDataFrame,\n    ABCSeries,\n)\nfrom pandas.core.dtypes.inference import (\n    is_hashable,\n    is_nested_list_like,\n)\nfrom pandas.core.dtypes.missing import (\n    isna,\n    notna,\n)\n\nfrom pandas.core import (\n    algorithms as algos,\n    arraylike,\n    common,\n    indexing,\n    missing,\n    nanops,\n    sample,\n)\nfrom pandas.core.array_algos.replace import should_use_regex\nfrom pandas.core.arrays import ExtensionArray\nfrom pandas.core.base import PandasObject\nfrom pandas.core.construction import extract_array\nfrom pandas.core.flags import Flags\nfrom pandas.core.indexes.api import (\n    DatetimeIndex,\n    Index,\n    MultiIndex,\n    PeriodIndex,\n    default_index,\n    ensure_index,\n)\nfrom pandas.core.internals import BlockManager\nfrom pandas.core.methods.describe import describe_ndframe\nfrom pandas.core.missing import (\n    clean_fill_method,\n    clean_reindex_fill_method,\n    find_valid_index,\n)\nfrom pandas.core.reshape.concat import concat\nfrom pandas.core.shared_docs import _shared_docs\nfrom pandas.core.sorting import get_indexer_indexer\nfrom pandas.core.window import (\n    Expanding,\n    ExponentialMovingWindow,\n    Rolling,\n    Window,\n)\n\nfrom pandas.io.formats.format import (\n    DataFrameFormatter,\n    DataFrameRenderer,\n)\nfrom pandas.io.formats.printing import pprint_thing\n\nif TYPE_CHECKING:\n    from collections.abc import Callable\n    from collections.abc import (\n        Hashable,\n        Iterator,\n        Mapping,\n        Sequence,\n    )\n\n    from pandas._libs.tslibs import BaseOffset\n    from pandas._typing import P\n\n    from pandas import (\n        DataFrame,\n        ExcelWriter,\n        HDFStore,\n        Series,\n    )\n    from pandas.core.indexers.objects import BaseIndexer\n    from pandas.core.resample import Resampler\n\nimport textwrap\n\n# goal is to be able to define the docs close to function, while still being\n# able to share\n_shared_docs = {**_shared_docs}\n_shared_doc_kwargs = {\n    \"axes\": \"keywords for axes\",\n    \"klass\": \"Series/DataFrame\",\n    \"axes_single_arg\": \"{0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame\",  # noqa: E501\n    \"inplace\": \"\"\"\n    inplace : bool, default False\n        If True, performs operation inplace and returns None.\"\"\",\n    \"optional_by\": \"\"\"\n        by : str or list of str\n            Name or list of names to sort by\"\"\",\n}\n\n\nclass NDFrame(PandasObject, indexing.IndexingMixin):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : bool, default False\n    \"\"\"\n\n    _internal_names: list[str] = [\n        \"_mgr\",\n        \"_item_cache\",\n        \"_cache\",\n        \"_name\",\n        \"_metadata\",\n        \"_flags\",\n    ]\n    _internal_names_set: set[str] = set(_internal_names)\n    _accessors: set[str] = set()\n    _hidden_attrs: frozenset[str] = frozenset([])\n    _metadata: list[str] = []\n    _mgr: Manager\n    _attrs: dict[Hashable, Any]\n    _typ: str\n\n    # ----------------------------------------------------------------------\n    # Constructors\n\n    def __init__(self, data: Manager) -> None:\n        object.__setattr__(self, \"_mgr\", data)\n        object.__setattr__(self, \"_attrs\", {})\n        object.__setattr__(self, \"_flags\", Flags(self, allows_duplicate_labels=True))\n\n    @final\n    @classmethod\n    def _init_mgr(\n        cls,\n        mgr: Manager,\n        axes: dict[Literal[\"index\", \"columns\"], Axes | None],\n        dtype: DtypeObj | None = None,\n        copy: bool = False,\n    ) -> Manager:\n        \"\"\"passed a manager and a axes dict\"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                axe = ensure_index(axe)\n                bm_axis = cls._get_block_manager_axis(a)\n                mgr = mgr.reindex_axis(axe, axis=bm_axis)\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if (\n                isinstance(mgr, BlockManager)\n                and len(mgr.blocks) == 1\n                and mgr.blocks[0].values.dtype == dtype\n            ):\n                pass\n            else:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    @final\n    @classmethod\n    def _from_mgr(cls, mgr: Manager, axes: list[Index]) -> Self:\n        \"\"\"\n        Construct a new object of this type from a Manager object and axes.\n\n        Parameters\n        ----------\n        mgr : Manager\n            Must have the same ndim as cls.\n        axes : list[Index]\n\n        Notes\n        -----\n        The axes must match mgr.axes, but are required for future-proofing\n        in the event that axes are refactored out of the Manager objects.\n        \"\"\"\n        obj = cls.__new__(cls)\n        NDFrame.__init__(obj, mgr)\n        return obj\n\n    # ----------------------------------------------------------------------\n    # attrs and flags\n\n    @property\n    def attrs(self) -> dict[Hashable, Any]:\n        \"\"\"\n        Dictionary of global attributes of this dataset.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n\n        See Also\n        --------\n        DataFrame.flags : Global flags applying to this object.\n\n        Notes\n        -----\n        Many operations that create new datasets will copy ``attrs``. Copies\n        are always deep so that changing ``attrs`` will only affect the\n        present dataset. ``pandas.concat`` copies ``attrs`` only if all input\n        datasets have the same ``attrs``.\n\n        Examples\n        --------\n        For Series:\n\n        >>> ser = pd.Series([1, 2, 3])\n        >>> ser.attrs = {\"A\": [10, 20, 30]}\n        >>> ser.attrs\n        {'A': [10, 20, 30]}\n\n        For DataFrame:\n\n        >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n        >>> df.attrs = {\"A\": [10, 20, 30]}\n        >>> df.attrs\n        {'A': [10, 20, 30]}\n        \"\"\"\n        return self._attrs\n\n    @attrs.setter\n    def attrs(self, value: Mapping[Hashable, Any]) -> None:\n        self._attrs = dict(value)\n\n    @final\n    @property\n    def flags(self) -> Flags:\n        \"\"\"\n        Get the properties associated with this pandas object.\n\n        The available flags are\n\n        * :attr:`Flags.allows_duplicate_labels`\n\n        See Also\n        --------\n        Flags : Flags that apply to pandas objects.\n        DataFrame.attrs : Global metadata applying to this dataset.\n\n        Notes\n        -----\n        \"Flags\" differ from \"metadata\". Flags reflect properties of the\n        pandas object (the Series or DataFrame). Metadata refer to properties\n        of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2]})\n        >>> df.flags\n        <Flags(allows_duplicate_labels=True)>\n\n        Flags can be get or set using ``.``\n\n        >>> df.flags.allows_duplicate_labels\n        True\n        >>> df.flags.allows_duplicate_labels = False\n\n        Or by slicing with a key\n\n        >>> df.flags[\"allows_duplicate_labels\"]\n        False\n        >>> df.flags[\"allows_duplicate_labels\"] = True\n        \"\"\"\n        return self._flags\n\n    @final\n    def set_flags(\n        self,\n        *,\n        copy: bool | lib.NoDefault = lib.no_default,\n        allows_duplicate_labels: bool | None = None,\n    ) -> Self:\n        \"\"\"\n        Return a new object with updated flags.\n\n        This method creates a shallow copy of the original object, preserving its\n        underlying data while modifying its global flags. In particular, it allows\n        you to update properties such as whether duplicate labels are permitted. This\n        behavior is especially useful in method chains, where one wishes to\n        adjust DataFrame or Series characteristics without altering the original object.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            Specify if a copy of the object should be made.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        allows_duplicate_labels : bool, optional\n            Whether the returned object allows duplicate labels.\n\n        Returns\n        -------\n        Series or DataFrame\n            The same type as the caller.\n\n        See Also\n        --------\n        DataFrame.attrs : Global metadata applying to this dataset.\n        DataFrame.flags : Global flags applying to this object.\n\n        Notes\n        -----\n        This method returns a new object that's a view on the same data\n        as the input. Mutating the input or the output values will be reflected\n        in the other.\n\n        This method is intended to be used in method chains.\n\n        \"Flags\" differ from \"metadata\". Flags reflect properties of the\n        pandas object (the Series or DataFrame). Metadata refer to properties\n        of the dataset, and should be stored in :attr:`DataFrame.attrs`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2]})\n        >>> df.flags.allows_duplicate_labels\n        True\n        >>> df2 = df.set_flags(allows_duplicate_labels=False)\n        >>> df2.flags.allows_duplicate_labels\n        False\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        df = self.copy(deep=False)\n        if allows_duplicate_labels is not None:\n            df.flags[\"allows_duplicate_labels\"] = allows_duplicate_labels\n        return df\n\n    @final\n    @classmethod\n    def _validate_dtype(cls, dtype) -> DtypeObj | None:\n        \"\"\"validate the passed dtype\"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype\n\n    # ----------------------------------------------------------------------\n    # Construction\n\n    # error: Signature of \"_constructor\" incompatible with supertype \"PandasObject\"\n    @property\n    def _constructor(self) -> Callable[..., Self]:  # type: ignore[override]\n        \"\"\"\n        Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    # ----------------------------------------------------------------------\n    # Axis\n    _AXIS_ORDERS: list[Literal[\"index\", \"columns\"]]\n    _AXIS_TO_AXIS_NUMBER: dict[Axis, AxisInt] = {0: 0, \"index\": 0, \"rows\": 0}\n    _info_axis_number: int\n    _info_axis_name: Literal[\"index\", \"columns\"]\n    _AXIS_LEN: int\n\n    @final\n    def _construct_axes_dict(\n        self, axes: Sequence[Axis] | None = None, **kwargs: AxisInt\n    ) -> dict:\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        # error: Argument 1 to \"update\" of \"MutableMapping\" has incompatible type\n        # \"Dict[str, Any]\"; expected \"SupportsKeysAndGetItem[Union[int, str], Any]\"\n        d.update(kwargs)  # type: ignore[arg-type]\n        return d\n\n    @final\n    @classmethod\n    def _get_axis_number(cls, axis: Axis) -> AxisInt:\n        try:\n            return cls._AXIS_TO_AXIS_NUMBER[axis]\n        except KeyError as err:\n            raise ValueError(\n                f\"No axis named {axis} for object type {cls.__name__}\"\n            ) from err\n\n    @final\n    @classmethod\n    def _get_axis_name(cls, axis: Axis) -> Literal[\"index\", \"columns\"]:\n        axis_number = cls._get_axis_number(axis)\n        return cls._AXIS_ORDERS[axis_number]\n\n    @final\n    def _get_axis(self, axis: Axis) -> Index:\n        axis_number = self._get_axis_number(axis)\n        assert axis_number in {0, 1}\n        return self.index if axis_number == 0 else self.columns\n\n    @final\n    @classmethod\n    def _get_block_manager_axis(cls, axis: Axis) -> AxisInt:\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        ndim = cls._AXIS_LEN\n        if ndim == 2:\n            # i.e. DataFrame\n            return 1 - axis\n        return axis\n\n    @final\n    def _get_axis_resolvers(self, axis: str) -> dict[str, Series | MultiIndex]:\n        # index or columns\n        axis_index = getattr(self, axis)\n        d = {}\n        prefix = axis[0]\n\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                # prefix with 'i' or 'c' depending on the input axis\n                # e.g., you must do ilevel_0 for the 0th level of an unnamed\n                # multiiindex\n                key = f\"{prefix}level_{i}\"\n                level = i\n\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n\n        # put the index/columns itself in the dict\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n\n        d[axis] = dindex\n        return d\n\n    @final\n    def _get_index_resolvers(self) -> dict[Hashable, Series | MultiIndex]:\n        from pandas.core.computation.parsing import clean_column_name\n\n        d: dict[str, Series | MultiIndex] = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n\n        return {clean_column_name(k): v for k, v in d.items() if not isinstance(k, int)}\n\n    @final\n    def _get_cleaned_column_resolvers(self) -> dict[Hashable, Series]:\n        \"\"\"\n        Return the special character free column resolvers of a DataFrame.\n\n        Column names with special characters are 'cleaned up' so that they can\n        be referred to by backtick quoting.\n        Used in :meth:`DataFrame.eval`.\n        \"\"\"\n        from pandas.core.computation.parsing import clean_column_name\n        from pandas.core.series import Series\n\n        if isinstance(self, ABCSeries):\n            return {clean_column_name(self.name): self}\n\n        dtypes = self.dtypes\n        return {\n            clean_column_name(k): Series(\n                v, copy=False, index=self.index, name=k, dtype=dtype\n            ).__finalize__(self)\n            for k, v, dtype in zip(self.columns, self._iter_column_arrays(), dtypes)\n            if not isinstance(k, int)\n        }\n\n    @final\n    @property\n    def _info_axis(self) -> Index:\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def shape(self) -> tuple[int, ...]:\n        \"\"\"\n        Return a tuple of axis dimensions\n        \"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self) -> list[Index]:\n        \"\"\"\n        Return index label(s) of the internal NDFrame\n        \"\"\"\n        # we do it this way because if we have reversed axes, then\n        # the block manager shows then reversed\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @final\n    @property\n    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        numpy.ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({\"a\": 1, \"b\": 2, \"c\": 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({\"col1\": [1, 2], \"col2\": [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._mgr.ndim\n\n    @final\n    @property\n    def size(self) -> int:\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        numpy.ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({\"a\": 1, \"b\": 2, \"c\": 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({\"col1\": [1, 2], \"col2\": [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n\n        return int(np.prod(self.shape))\n\n    def set_axis(\n        self,\n        labels,\n        *,\n        axis: Axis = 0,\n        copy: bool | lib.NoDefault = lib.no_default,\n    ) -> Self:\n        \"\"\"\n        Assign desired index to given axis.\n\n        Indexes for%(extended_summary_sub)s row labels can be changed by assigning\n        a list-like or Index.\n\n        Parameters\n        ----------\n        labels : list-like, Index\n            The values for the new index.\n\n        axis : %(axes_single_arg)s, default 0\n            The axis to update. The value 0 identifies the rows. For `Series`\n            this parameter is unused and defaults to 0.\n\n        copy : bool, default False\n            Whether to make a copy of the underlying data.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n\n        Returns\n        -------\n        %(klass)s\n            An object of type %(klass)s.\n\n        See Also\n        --------\n        %(klass)s.rename_axis : Alter the name of the index%(see_also_sub)s.\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        return self._set_axis_nocheck(labels, axis, inplace=False)\n\n    @overload\n    def _set_axis_nocheck(\n        self, labels, axis: Axis, inplace: Literal[False]\n    ) -> Self: ...\n\n    @overload\n    def _set_axis_nocheck(self, labels, axis: Axis, inplace: Literal[True]) -> None: ...\n\n    @overload\n    def _set_axis_nocheck(self, labels, axis: Axis, inplace: bool) -> Self | None: ...\n\n    @final\n    def _set_axis_nocheck(self, labels, axis: Axis, inplace: bool) -> Self | None:\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n            return None\n        obj = self.copy(deep=False)\n        setattr(obj, obj._get_axis_name(axis), labels)\n        return obj\n\n    @final\n    def _set_axis(self, axis: AxisInt, labels: AnyArrayLike | list) -> None:\n        \"\"\"\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        labels = ensure_index(labels)\n        self._mgr.set_axis(axis, labels)\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def droplevel(self, level: IndexLabel, axis: Axis = 0) -> Self:\n        \"\"\"\n        Return {klass} with requested index / column level(s) removed.\n\n        Parameters\n        ----------\n        level : int, str, or list-like\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or positional indexes\n            of levels.\n\n        axis : {{0 or 'index', 1 or 'columns'}}, default 0\n            Axis along which the level(s) is removed:\n\n            * 0 or 'index': remove level(s) in column.\n            * 1 or 'columns': remove level(s) in row.\n\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        {klass}\n            {klass} with requested index / column level(s) removed.\n\n        See Also\n        --------\n        DataFrame.replace : Replace values given in `to_replace` with `value`.\n        DataFrame.pivot : Return reshaped DataFrame organized by given\n            index / column values.\n\n        Examples\n        --------\n        >>> df = (\n        ...     pd.DataFrame([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n        ...     .set_index([0, 1])\n        ...     .rename_axis([\"a\", \"b\"])\n        ... )\n\n        >>> df.columns = pd.MultiIndex.from_tuples(\n        ...     [(\"c\", \"e\"), (\"d\", \"f\")], names=[\"level_1\", \"level_2\"]\n        ... )\n\n        >>> df\n        level_1   c   d\n        level_2   e   f\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n\n        >>> df.droplevel(\"a\")\n        level_1   c   d\n        level_2   e   f\n        b\n        2        3   4\n        6        7   8\n        10      11  12\n\n        >>> df.droplevel(\"level_2\", axis=1)\n        level_1   c   d\n        a b\n        1 2      3   4\n        5 6      7   8\n        9 10    11  12\n        \"\"\"\n        labels = self._get_axis(axis)\n        new_labels = labels.droplevel(level)\n        return self.set_axis(new_labels, axis=axis)\n\n    def pop(self, item: Hashable) -> Series | Any:\n        result = self[item]\n        del self[item]\n\n        return result\n\n    @final\n    def squeeze(self, axis: Axis | None = None) -> Scalar | Series | DataFrame:\n        \"\"\"\n        Squeeze 1 dimensional axis objects into scalars.\n\n        Series or DataFrames with a single element are squeezed to a scalar.\n        DataFrames with a single column or a single row are squeezed to a\n        Series. Otherwise the object is unchanged.\n\n        This method is most useful when you don't know if your\n        object is a Series or DataFrame, but you do know it has just a single\n        column. In that case you can safely call `squeeze` to ensure you have a\n        Series.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            A specific axis to squeeze. By default, all length-1 axes are\n            squeezed. For `Series` this parameter is unused and defaults to `None`.\n\n        Returns\n        -------\n        DataFrame, Series, or scalar\n            The projection after squeezing `axis` or all the axes.\n\n        See Also\n        --------\n        Series.iloc : Integer-location based indexing for selecting scalars.\n        DataFrame.iloc : Integer-location based indexing for selecting Series.\n        Series.to_frame : Inverse of DataFrame.squeeze for a\n            single-column DataFrame.\n\n        Examples\n        --------\n        >>> primes = pd.Series([2, 3, 5, 7])\n\n        Slicing might produce a Series with a single value:\n\n        >>> even_primes = primes[primes % 2 == 0]\n        >>> even_primes\n        0    2\n        dtype: int64\n\n        >>> even_primes.squeeze()\n        2\n\n        Squeezing objects with more than one value in every axis does nothing:\n\n        >>> odd_primes = primes[primes % 2 == 1]\n        >>> odd_primes\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        >>> odd_primes.squeeze()\n        1    3\n        2    5\n        3    7\n        dtype: int64\n\n        Squeezing is even more effective when used with DataFrames.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        >>> df\n           a  b\n        0  1  2\n        1  3  4\n\n        Slicing a single column will produce a DataFrame with the columns\n        having only one value:\n\n        >>> df_a = df[[\"a\"]]\n        >>> df_a\n           a\n        0  1\n        1  3\n\n        So the columns can be squeezed down, resulting in a Series:\n\n        >>> df_a.squeeze(\"columns\")\n        0    1\n        1    3\n        Name: a, dtype: int64\n\n        Slicing a single row from a single column will produce a single\n        scalar DataFrame:\n\n        >>> df_0a = df.loc[df.index < 1, [\"a\"]]\n        >>> df_0a\n           a\n        0  1\n\n        Squeezing the rows produces a single scalar Series:\n\n        >>> df_0a.squeeze(\"rows\")\n        a    1\n        Name: 0, dtype: int64\n\n        Squeezing all axes will project directly into a scalar:\n\n        >>> df_0a.squeeze()\n        1\n        \"\"\"\n        axes = range(self._AXIS_LEN) if axis is None else (self._get_axis_number(axis),)\n        result = self.iloc[\n            tuple(\n                0 if i in axes and len(a) == 1 else slice(None)\n                for i, a in enumerate(self.axes)\n            )\n        ]\n        if isinstance(result, NDFrame):\n            result = result.__finalize__(self, method=\"squeeze\")\n        return result\n\n    # ----------------------------------------------------------------------\n    # Rename\n\n    @overload\n    def _rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[False] = ...,\n        level: Level | None = ...,\n        errors: str = ...,\n    ) -> Self: ...\n\n    @overload\n    def _rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        inplace: Literal[True],\n        level: Level | None = ...,\n        errors: str = ...,\n    ) -> None: ...\n\n    @overload\n    def _rename(\n        self,\n        mapper: Renamer | None = ...,\n        *,\n        index: Renamer | None = ...,\n        columns: Renamer | None = ...,\n        axis: Axis | None = ...,\n        inplace: bool,\n        level: Level | None = ...,\n        errors: str = ...,\n    ) -> Self | None: ...\n\n    @final\n    def _rename(\n        self,\n        mapper: Renamer | None = None,\n        *,\n        index: Renamer | None = None,\n        columns: Renamer | None = None,\n        axis: Axis | None = None,\n        inplace: bool = False,\n        level: Level | None = None,\n        errors: str = \"ignore\",\n    ) -> Self | None:\n        # called by Series.rename and DataFrame.rename\n\n        if mapper is None and index is None and columns is None:\n            raise TypeError(\"must pass an index to rename\")\n\n        if index is not None or columns is not None:\n            if axis is not None:\n                raise TypeError(\n                    \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n                )\n            if mapper is not None:\n                raise TypeError(\n                    \"Cannot specify both 'mapper' and any of 'index' or 'columns'\"\n                )\n        else:\n            # use the mapper argument\n            if axis and self._get_axis_number(axis) == 1:\n                columns = mapper\n            else:\n                index = mapper\n\n        self._check_inplace_and_allows_duplicate_labels(inplace)\n        result = self if inplace else self.copy(deep=False)\n\n        for axis_no, replacements in enumerate((index, columns)):\n            if replacements is None:\n                continue\n\n            ax = self._get_axis(axis_no)\n            f = common.get_rename_function(replacements)\n\n            if level is not None:\n                level = ax._get_level_number(level)\n\n            # GH 13473\n            if not callable(replacements):\n                if ax._is_multi and level is not None:\n                    indexer = ax.get_level_values(level).get_indexer_for(replacements)\n                else:\n                    indexer = ax.get_indexer_for(replacements)\n\n                if errors == \"raise\" and len(indexer[indexer == -1]):\n                    missing_labels = [\n                        label\n                        for index, label in enumerate(replacements)\n                        if indexer[index] == -1\n                    ]\n                    raise KeyError(f\"{missing_labels} not found in axis\")\n\n            new_index = ax._transform_index(f, level=level)\n            result._set_axis_nocheck(new_index, axis=axis_no, inplace=True)\n\n        if inplace:\n            self._update_inplace(result)\n            return None\n        else:\n            return result.__finalize__(self, method=\"rename\")\n\n    @overload\n    def rename_axis(\n        self,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        index=...,\n        columns=...,\n        axis: Axis = ...,\n        copy: bool | lib.NoDefault = lib.no_default,\n        inplace: Literal[False] = ...,\n    ) -> Self: ...\n\n    @overload\n    def rename_axis(\n        self,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        index=...,\n        columns=...,\n        axis: Axis = ...,\n        copy: bool | lib.NoDefault = lib.no_default,\n        inplace: Literal[True],\n    ) -> None: ...\n\n    @overload\n    def rename_axis(\n        self,\n        mapper: IndexLabel | lib.NoDefault = ...,\n        *,\n        index=...,\n        columns=...,\n        axis: Axis = ...,\n        copy: bool | lib.NoDefault = lib.no_default,\n        inplace: bool = ...,\n    ) -> Self | None: ...\n\n    def rename_axis(\n        self,\n        mapper: IndexLabel | lib.NoDefault = lib.no_default,\n        *,\n        index=lib.no_default,\n        columns=lib.no_default,\n        axis: Axis = 0,\n        copy: bool | lib.NoDefault = lib.no_default,\n        inplace: bool = False,\n    ) -> Self | None:\n        \"\"\"\n        Set the name of the axis for the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n\n            Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index``\n            and/or ``columns``.\n        index : scalar, list-like, dict-like or function, optional\n            A scalar, list-like, dict-like or functions transformations to\n            apply to that axis' values.\n        columns : scalar, list-like, dict-like or function, optional\n            A scalar, list-like, dict-like or functions transformations to\n            apply to that axis' values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to rename.\n        copy : bool, default False\n            Also copy underlying data.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        DataFrame, or None\n            The same type as the caller or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.rename : Alter Series index labels or name.\n        DataFrame.rename : Alter DataFrame index labels or name.\n        Index.rename : Set new names on index.\n\n        Notes\n        -----\n        ``DataFrame.rename_axis`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        The first calling convention will only modify the names of\n        the index and/or the names of the Index object that is the columns.\n        In this case, the parameter ``copy`` is ignored.\n\n        The second calling convention will modify the names of the\n        corresponding index if mapper is a list or a scalar.\n        However, if mapper is dict-like or a function, it will use the\n        deprecated behavior of modifying the axis *labels*.\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Examples\n        --------\n        **DataFrame**\n\n        >>> df = pd.DataFrame(\n        ...     {\"num_legs\": [4, 4, 2], \"num_arms\": [0, 0, 2]}, [\"dog\", \"cat\", \"monkey\"]\n        ... )\n        >>> df\n                num_legs  num_arms\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"animal\")\n        >>> df\n                num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n        >>> df\n        limbs   num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n\n        **MultiIndex**\n\n        >>> df.index = pd.MultiIndex.from_product(\n        ...     [[\"mammal\"], [\"dog\", \"cat\", \"monkey\"]], names=[\"type\", \"name\"]\n        ... )\n        >>> df\n        limbs          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(index={\"type\": \"class\"})\n        limbs          num_legs  num_arms\n        class  name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(columns=str.upper)\n        LIMBS          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        axes = {\"index\": index, \"columns\": columns}\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if mapper is not lib.no_default:\n            # Use v0.23 behavior if a scalar or list\n            non_mapper = is_scalar(mapper) or (\n                is_list_like(mapper) and not is_dict_like(mapper)\n            )\n            if non_mapper:\n                return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n            else:\n                raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n        else:\n            # Use new behavior.  Means that index and/or columns\n            # is specified\n            result = self if inplace else self.copy(deep=False)\n\n            for axis in range(self._AXIS_LEN):\n                v = axes.get(self._get_axis_name(axis))\n                if v is lib.no_default:\n                    continue\n                non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n                if non_mapper:\n                    newnames = v\n                else:\n                    f = common.get_rename_function(v)\n                    curnames = self._get_axis(axis).names\n                    newnames = [f(name) for name in curnames]\n                result._set_axis_name(newnames, axis=axis, inplace=True)\n            if not inplace:\n                return result\n            return None\n\n    @overload\n    def _set_axis_name(\n        self, name, axis: Axis = ..., *, inplace: Literal[False] = ...\n    ) -> Self: ...\n\n    @overload\n    def _set_axis_name(\n        self, name, axis: Axis = ..., *, inplace: Literal[True]\n    ) -> None: ...\n\n    @overload\n    def _set_axis_name(\n        self, name, axis: Axis = ..., *, inplace: bool\n    ) -> Self | None: ...\n\n    @final\n    def _set_axis_name(\n        self, name, axis: Axis = 0, *, inplace: bool = False\n    ) -> Self | None:\n        \"\"\"\n        Set the name(s) of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name(s) to set.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to set the label. The value 0 or 'index' specifies index,\n            and the value 1 or 'columns' specifies columns.\n        inplace : bool, default False\n            If `True`, do operation inplace and return None.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or `None` if `inplace` is `True`.\n\n        See Also\n        --------\n        DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n        Series.rename : Alter the index labels or set the index name\n            of :class:`Series`.\n        Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]}, [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs\n        dog            4\n        cat            4\n        monkey         2\n        >>> df._set_axis_name(\"animal\")\n                num_legs\n        animal\n        dog            4\n        cat            4\n        monkey         2\n        >>> df.index = pd.MultiIndex.from_product(\n        ...     [[\"mammal\"], [\"dog\", \"cat\", \"monkey\"]]\n        ... )\n        >>> df._set_axis_name([\"type\", \"name\"])\n                       num_legs\n        type   name\n        mammal dog        4\n               cat        4\n               monkey     2\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        renamed = self if inplace else self.copy(deep=False)\n        if axis == 0:\n            renamed.index = idx\n        else:\n            renamed.columns = idx\n\n        if not inplace:\n            return renamed\n        return None\n\n    # ----------------------------------------------------------------------\n    # Comparison Methods\n\n    @final\n    def _indexed_same(self, other) -> bool:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n        )\n\n    @final\n    def equals(self, other: object) -> bool:\n        \"\"\"\n        Test whether two objects contain the same elements.\n\n        This function allows two Series or DataFrames to be compared against\n        each other to see if they have the same shape and elements. NaNs in\n        the same location are considered equal.\n\n        The row/column index do not need to have the same type, as long\n        as the values are considered equal. Corresponding columns and\n        index must be of the same dtype.\n\n        Parameters\n        ----------\n        other : Series or DataFrame\n            The other Series or DataFrame to be compared with the first.\n\n        Returns\n        -------\n        bool\n            True if all elements are the same in both objects, False\n            otherwise.\n\n        See Also\n        --------\n        Series.eq : Compare two Series objects of the same length\n            and return a Series where each element is True if the element\n            in each Series is equal, False otherwise.\n        DataFrame.eq : Compare two DataFrame objects of the same shape and\n            return a DataFrame where each element is True if the respective\n            element in each DataFrame is equal, False otherwise.\n        testing.assert_series_equal : Raises an AssertionError if left and\n            right are not equal. Provides an easy interface to ignore\n            inequality in dtypes, indexes and precision among others.\n        testing.assert_frame_equal : Like assert_series_equal, but targets\n            DataFrames.\n        numpy.array_equal : Return True if two arrays have the same shape\n            and elements, False otherwise.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({1: [10], 2: [20]})\n        >>> df\n            1   2\n        0  10  20\n\n        DataFrames df and exactly_equal have the same types and values for\n        their elements and column labels, which will return True.\n\n        >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n        >>> exactly_equal\n            1   2\n        0  10  20\n        >>> df.equals(exactly_equal)\n        True\n\n        DataFrames df and different_column_type have the same element\n        types and values, but have different types for the column labels,\n        which will still return True.\n\n        >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n        >>> different_column_type\n           1.0  2.0\n        0   10   20\n        >>> df.equals(different_column_type)\n        True\n\n        DataFrames df and different_data_type have different types for the\n        same values for their elements, and will return False even though\n        their column labels are the same values and types.\n\n        >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n        >>> different_data_type\n              1     2\n        0  10.0  20.0\n        >>> df.equals(different_data_type)\n        False\n        \"\"\"\n        if not (isinstance(other, type(self)) or isinstance(self, type(other))):\n            return False\n        other = cast(NDFrame, other)\n        return self._mgr.equals(other._mgr)\n\n    # -------------------------------------------------------------------------\n    # Unary Methods\n\n    @final\n    def __neg__(self) -> Self:\n        def blk_func(values: ArrayLike):\n            if is_bool_dtype(values.dtype):\n                # error: Argument 1 to \"inv\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsInversion[ndarray[Any, dtype[bool_]]]\"\n                return operator.inv(values)  # type: ignore[arg-type]\n            else:\n                # error: Argument 1 to \"neg\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsNeg[ndarray[Any, dtype[Any]]]\"\n                return operator.neg(values)  # type: ignore[arg-type]\n\n        new_data = self._mgr.apply(blk_func)\n        res = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        return res.__finalize__(self, method=\"__neg__\")\n\n    @final\n    def __pos__(self) -> Self:\n        def blk_func(values: ArrayLike):\n            if is_bool_dtype(values.dtype):\n                return values.copy()\n            else:\n                # error: Argument 1 to \"pos\" has incompatible type \"Union\n                # [ExtensionArray, ndarray[Any, Any]]\"; expected\n                # \"_SupportsPos[ndarray[Any, dtype[Any]]]\"\n                return operator.pos(values)  # type: ignore[arg-type]\n\n        new_data = self._mgr.apply(blk_func)\n        res = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        return res.__finalize__(self, method=\"__pos__\")\n\n    @final\n    def __invert__(self) -> Self:\n        if not self.size:\n            # inv fails with 0 len\n            return self.copy(deep=False)\n\n        new_data = self._mgr.apply(operator.invert)\n        res = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        return res.__finalize__(self, method=\"__invert__\")\n\n    @final\n    def __bool__(self) -> NoReturn:\n        raise ValueError(\n            f\"The truth value of a {type(self).__name__} is ambiguous. \"\n            \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n        )\n\n    @final\n    def abs(self) -> Self:\n        \"\"\"\n        Return a Series/DataFrame with absolute numeric value of each element.\n\n        This function only applies to elements that are all numeric.\n\n        Returns\n        -------\n        abs\n            Series/DataFrame containing the absolute value of each element.\n\n        See Also\n        --------\n        numpy.absolute : Calculate the absolute value element-wise.\n\n        Notes\n        -----\n        For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n        :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n        Examples\n        --------\n        Absolute numeric values in a Series.\n\n        >>> s = pd.Series([-1.10, 2, -3.33, 4])\n        >>> s.abs()\n        0    1.10\n        1    2.00\n        2    3.33\n        3    4.00\n        dtype: float64\n\n        Absolute numeric values in a Series with complex numbers.\n\n        >>> s = pd.Series([1.2 + 1j])\n        >>> s.abs()\n        0    1.56205\n        dtype: float64\n\n        Absolute numeric values in a Series with a Timedelta element.\n\n        >>> s = pd.Series([pd.Timedelta(\"1 days\")])\n        >>> s.abs()\n        0   1 days\n        dtype: timedelta64[ns]\n\n        Select rows with data closest to certain value using argsort (from\n        `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n        >>> df = pd.DataFrame(\n        ...     {\"a\": [4, 5, 6, 7], \"b\": [10, 20, 30, 40], \"c\": [100, 50, -30, -50]}\n        ... )\n        >>> df\n             a    b    c\n        0    4   10  100\n        1    5   20   50\n        2    6   30  -30\n        3    7   40  -50\n        >>> df.loc[(df.c - 43).abs().argsort()]\n             a    b    c\n        1    5   20   50\n        0    4   10  100\n        2    6   30  -30\n        3    7   40  -50\n        \"\"\"\n        res_mgr = self._mgr.apply(np.abs)\n        return self._constructor_from_mgr(res_mgr, axes=res_mgr.axes).__finalize__(\n            self, name=\"abs\"\n        )\n\n    @final\n    def __abs__(self) -> Self:\n        return self.abs()\n\n    @final\n    def __round__(self, decimals: int = 0) -> Self:\n        return self.round(decimals).__finalize__(self, method=\"__round__\")\n\n    # -------------------------------------------------------------------------\n    # Label or Level Combination Helpers\n    #\n    # A collection of helper methods for DataFrame/Series operations that\n    # accept a combination of column/index labels and levels.  All such\n    # operations should utilize/extend these methods when possible so that we\n    # have consistent precedence and validation logic throughout the library.\n\n    @final\n    def _is_level_reference(self, key: Level, axis: Axis = 0) -> bool:\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential level name for the given axis\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level : bool\n        \"\"\"\n        axis_int = self._get_axis_number(axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis_int].names\n            and not self._is_label_reference(key, axis=axis_int)\n        )\n\n    @final\n    def _is_label_reference(self, key: Level, axis: Axis = 0) -> bool:\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential label name, i.e. Index entry.\n        axis : int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis_int = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis_int)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and any(key in self.axes[ax] for ax in other_axes)\n        )\n\n    @final\n    def _is_label_or_level_reference(self, key: Level, axis: AxisInt = 0) -> bool:\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key : Hashable\n            Potential label or level name\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._is_level_reference(key, axis=axis) or self._is_label_reference(\n            key, axis=axis\n        )\n\n    @final\n    def _check_label_or_level_ambiguity(self, key: Level, axis: Axis = 0) -> None:\n        \"\"\"\n        Check whether `key` is ambiguous.\n\n        By ambiguous, we mean that it matches both a level of the input\n        `axis` and a label of the other axis.\n\n        Parameters\n        ----------\n        key : Hashable\n            Label or level name.\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns).\n\n        Raises\n        ------\n        ValueError: `key` is ambiguous\n        \"\"\"\n\n        axis_int = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis_int)\n\n        if (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis_int].names\n            and any(key in self.axes[ax] for ax in other_axes)\n        ):\n            # Build an informative and grammatical warning\n            level_article, level_type = (\n                (\"an\", \"index\") if axis_int == 0 else (\"a\", \"column\")\n            )\n\n            label_article, label_type = (\n                (\"a\", \"column\") if axis_int == 0 else (\"an\", \"index\")\n            )\n\n            msg = (\n                f\"'{key}' is both {level_article} {level_type} level and \"\n                f\"{label_article} {label_type} label, which is ambiguous.\"\n            )\n            raise ValueError(msg)\n\n    @final\n    def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key : Hashable\n            Label or level name.\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        np.ndarray or ExtensionArray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        first_other_axes = next(\n            (ax for ax in range(self._AXIS_LEN) if ax != axis), None\n        )\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis)\n            if first_other_axes is None:\n                raise ValueError(\"axis matched all axes\")\n            values = self.xs(key, axis=first_other_axes)._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n            if first_other_axes is not None and isinstance(\n                self._get_axis(first_other_axes), MultiIndex\n            ):\n                multi_message = (\n                    \"\\n\"\n                    \"For a multi-index, the label must be a \"\n                    \"tuple with elements corresponding to each level.\"\n                )\n            else:\n                multi_message = \"\"\n\n            label_axis_name = \"column\" if axis == 0 else \"index\"\n            raise ValueError(\n                f\"The {label_axis_name} label '{key}' is not unique.{multi_message}\"\n            )\n\n        return values\n\n    @final\n    def _drop_labels_or_levels(self, keys, axis: AxisInt = 0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys : str or list of str\n            labels or levels to drop\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        # Validate keys\n        keys = common.maybe_make_list(keys)\n        invalid_keys = [\n            k for k in keys if not self._is_label_or_level_reference(k, axis=axis)\n        ]\n\n        if invalid_keys:\n            raise ValueError(\n                \"The following keys are not valid labels or \"\n                f\"levels for axis {axis}: {invalid_keys}\"\n            )\n\n        # Compute levels and labels to drop\n        levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n\n        labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n\n        # Perform copy upfront and then use inplace operations below.\n        # This ensures that we always perform exactly one copy.\n        # ``copy`` and/or ``inplace`` options could be added in the future.\n        dropped = self.copy(deep=False)\n\n        if axis == 0:\n            # Handle dropping index levels\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n            # Handle dropping columns labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            # Handle dropping column levels\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    # Drop the specified levels from the MultiIndex\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    # Drop the last level of Index by replacing with\n                    # a RangeIndex\n                    dropped.columns = default_index(dropped.columns.size)\n\n            # Handle dropping index labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n        return dropped\n\n    # ----------------------------------------------------------------------\n    # Iteration\n\n    # https://github.com/python/typeshed/issues/2148#issuecomment-520783318\n    # Incompatible types in assignment (expression has type \"None\", base class\n    # \"object\" defined the type as \"Callable[[object], int]\")\n    __hash__: ClassVar[None]  # type: ignore[assignment]\n\n    def __iter__(self) -> Iterator:\n        \"\"\"\n        Iterate over info axis.\n\n        Returns\n        -------\n        iterator\n            Info axis as iterator.\n\n        See Also\n        --------\n        DataFrame.items : Iterate over (column name, Series) pairs.\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> for x in df:\n        ...     print(x)\n        A\n        B\n        \"\"\"\n        return iter(self._info_axis)\n\n    # can we get a better explanation of this?\n    def keys(self) -> Index:\n        \"\"\"\n        Get the 'info axis' (see Indexing for more).\n\n        This is index for Series, columns for DataFrame.\n\n        Returns\n        -------\n        Index\n            Info axis.\n\n        See Also\n        --------\n        DataFrame.index : The index (row labels) of the DataFrame.\n        DataFrame.columns: The column labels of the DataFrame.\n\n        Examples\n        --------\n        >>> d = pd.DataFrame(\n        ...     data={\"A\": [1, 2, 3], \"B\": [0, 4, 8]}, index=[\"a\", \"b\", \"c\"]\n        ... )\n        >>> d\n           A  B\n        a  1  0\n        b  2  4\n        c  3  8\n        >>> d.keys()\n        Index(['A', 'B'], dtype='object')\n        \"\"\"\n        return self._info_axis\n\n    def items(self):\n        \"\"\"\n        Iterate over (label, values) on info axis\n\n        This is index for Series and columns for DataFrame.\n\n        Returns\n        -------\n        Generator\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    def __len__(self) -> int:\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    @final\n    def __contains__(self, key) -> bool:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self) -> bool:\n        \"\"\"\n        Indicator whether Series/DataFrame is empty.\n\n        True if Series/DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If Series/DataFrame is empty, return True, if not return False.\n\n        See Also\n        --------\n        Series.dropna : Return series without null values.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n\n        Notes\n        -----\n        If Series/DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({\"A\": []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({\"A\": [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        >>> ser_empty = pd.Series({\"A\": []})\n        >>> ser_empty\n        A    []\n        dtype: object\n        >>> ser_empty.empty\n        False\n        >>> ser_empty = pd.Series()\n        >>> ser_empty.empty\n        True\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    # ----------------------------------------------------------------------\n    # Array Interface\n\n    # This is also set in IndexOpsMixin\n    # GH#23114 Ensure ndarray.__op__(DataFrame) returns NotImplemented\n    __array_priority__: int = 1000\n\n    def __array__(\n        self, dtype: npt.DTypeLike | None = None, copy: bool | None = None\n    ) -> np.ndarray:\n        if copy is False and not self._mgr.is_single_block and not self.empty:\n            # check this manually, otherwise ._values will already return a copy\n            # and np.array(values, copy=False) will not raise an error\n            raise ValueError(\n                \"Unable to avoid copy while creating an array as requested.\"\n            )\n        values = self._values\n        if copy is None:\n            # Note: branch avoids `copy=None` for NumPy 1.x support\n            arr = np.asarray(values, dtype=dtype)\n        else:\n            arr = np.array(values, dtype=dtype, copy=copy)\n\n        if (\n            copy is not True\n            and astype_is_view(values.dtype, arr.dtype)\n            and self._mgr.is_single_block\n        ):\n            # Check if both conversions can be done without a copy\n            if astype_is_view(self.dtypes.iloc[0], values.dtype) and astype_is_view(\n                values.dtype, arr.dtype\n            ):\n                arr = arr.view()\n                arr.flags.writeable = False\n        return arr\n\n    @final\n    def __array_ufunc__(\n        self, ufunc: np.ufunc, method: str, *inputs: Any, **kwargs: Any\n    ):\n        return arraylike.array_ufunc(self, ufunc, method, *inputs, **kwargs)\n\n    # ----------------------------------------------------------------------\n    # Picklability\n\n    @final\n    def __getstate__(self) -> dict[str, Any]:\n        meta = {k: getattr(self, k, None) for k in self._metadata}\n        return {\n            \"_mgr\": self._mgr,\n            \"_typ\": self._typ,\n            \"_metadata\": self._metadata,\n            \"attrs\": self.attrs,\n            \"_flags\": {k: self.flags[k] for k in self.flags._keys},\n            **meta,\n        }\n\n    @final\n    def __setstate__(self, state) -> None:\n        if isinstance(state, BlockManager):\n            self._mgr = state\n        elif isinstance(state, dict):\n            if \"_data\" in state and \"_mgr\" not in state:\n                # compat for older pickles\n                state[\"_mgr\"] = state.pop(\"_data\")\n            typ = state.get(\"_typ\")\n            if typ is not None:\n                attrs = state.get(\"_attrs\", {})\n                if attrs is None:  # should not happen, but better be on the safe side\n                    attrs = {}\n                object.__setattr__(self, \"_attrs\", attrs)\n                flags = state.get(\"_flags\", {\"allows_duplicate_labels\": True})\n                object.__setattr__(self, \"_flags\", Flags(self, **flags))\n\n                # set in the order of internal names\n                # to avoid definitional recursion\n                # e.g. say fill_value needing _mgr to be\n                # defined\n                meta = set(self._internal_names + self._metadata)\n                for k in meta:\n                    if k in state and k != \"_flags\":\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n\n            else:\n                raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")\n        elif len(state) == 2:\n            raise NotImplementedError(\"Pre-0.12 pickles are no longer supported\")\n\n    # ----------------------------------------------------------------------\n    # Rendering Methods\n\n    def __repr__(self) -> str:\n        # string representation based upon iterating over self\n        # (since, by definition, `PandasContainers` are iterable)\n        prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n        return f\"{type(self).__name__}({prepr})\"\n\n    @final\n    def _repr_latex_(self):\n        \"\"\"\n        Returns a LaTeX representation for a particular object.\n        Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n        \"\"\"\n        if config.get_option(\"styler.render.repr\") == \"latex\":\n            return self.to_latex()\n        else:\n            return None\n\n    @final\n    def _repr_data_resource_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option(\"display.html.table_schema\"):\n            data = self.head(config.get_option(\"display.max_rows\"))\n\n            as_json = data.to_json(orient=\"table\")\n            as_json = cast(str, as_json)\n            return loads(as_json, object_pairs_hook=collections.OrderedDict)\n\n    # ----------------------------------------------------------------------\n    # I/O Methods\n\n    @final\n    @doc(\n        klass=\"object\",\n        storage_options=_shared_docs[\"storage_options\"],\n        storage_options_versionadded=\"1.2.0\",\n        encoding_parameter=\"\",\n        verbose_parameter=\"\",\n        extra_parameters=textwrap.dedent(\n            \"\"\"\\\n        engine_kwargs : dict, optional\n            Arbitrary keyword arguments passed to excel engine.\n        \"\"\"\n        ),\n    )\n    def to_excel(\n        self,\n        excel_writer: FilePath | WriteExcelBuffer | ExcelWriter,\n        *,\n        sheet_name: str = \"Sheet1\",\n        na_rep: str = \"\",\n        float_format: str | None = None,\n        columns: Sequence[Hashable] | None = None,\n        header: Sequence[Hashable] | bool = True,\n        index: bool = True,\n        index_label: IndexLabel | None = None,\n        startrow: int = 0,\n        startcol: int = 0,\n        engine: Literal[\"openpyxl\", \"xlsxwriter\"] | None = None,\n        merge_cells: bool = True,\n        inf_rep: str = \"inf\",\n        freeze_panes: tuple[int, int] | None = None,\n        storage_options: StorageOptions | None = None,\n        engine_kwargs: dict[str, Any] | None = None,\n    ) -> None:\n        \"\"\"\n        Write {klass} to an Excel sheet.\n\n        To write a single {klass} to an Excel .xlsx file it is only necessary to\n        specify a target file name. To write to multiple sheets it is necessary to\n        create an `ExcelWriter` object with a target file name, and specify a sheet\n        in the file to write to.\n\n        Multiple sheets may be written to by specifying unique `sheet_name`.\n        With all data written to the file it is necessary to save the changes.\n        Note that creating an `ExcelWriter` object with a file name that already\n        exists will result in the contents of the existing file being erased.\n\n        Parameters\n        ----------\n        excel_writer : path-like, file-like, or ExcelWriter object\n            File path or existing ExcelWriter.\n        sheet_name : str, default 'Sheet1'\n            Name of sheet which will contain DataFrame.\n        na_rep : str, default ''\n            Missing data representation.\n        float_format : str, optional\n            Format string for floating point numbers. For example\n            ``float_format=\"%.2f\"`` will format 0.1234 to 0.12.\n        columns : sequence or list of str, optional\n            Columns to write.\n        header : bool or list of str, default True\n            Write out the column names. If a list of string is given it is\n            assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        index_label : str or sequence, optional\n            Column label for index column(s) if desired. If not specified, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.\n        startrow : int, default 0\n            Upper left cell row to dump data frame.\n        startcol : int, default 0\n            Upper left cell column to dump data frame.\n        engine : str, optional\n            Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this\n            via the options ``io.excel.xlsx.writer`` or\n            ``io.excel.xlsm.writer``.\n\n        merge_cells : bool or 'columns', default False\n            If True, write MultiIndex index and columns as merged cells.\n            If 'columns', merge MultiIndex column cells only.\n        {encoding_parameter}\n        inf_rep : str, default 'inf'\n            Representation for infinity (there is no native representation for\n            infinity in Excel).\n        {verbose_parameter}\n        freeze_panes : tuple of int (length 2), optional\n            Specifies the one-based bottommost row and rightmost column that\n            is to be frozen.\n        {storage_options}\n\n            .. versionadded:: {storage_options_versionadded}\n        {extra_parameters}\n        See Also\n        --------\n        to_csv : Write DataFrame to a comma-separated values (csv) file.\n        ExcelWriter : Class for writing DataFrame objects into excel sheets.\n        read_excel : Read an Excel file into a pandas DataFrame.\n        read_csv : Read a comma-separated values (csv) file into DataFrame.\n        io.formats.style.Styler.to_excel : Add styles to Excel sheet.\n\n        Notes\n        -----\n        For compatibility with :meth:`~DataFrame.to_csv`,\n        to_excel serializes lists and dicts to strings before writing.\n\n        Once a workbook has been saved it is not possible to write further\n        data without rewriting the whole workbook.\n\n        pandas will check the number of rows, columns,\n        and cell character count does not exceed Excel's limitations.\n        All other limitations must be checked by the user.\n\n        Examples\n        --------\n\n        Create, write to and save a workbook:\n\n        >>> df1 = pd.DataFrame(\n        ...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n        ...     index=[\"row 1\", \"row 2\"],\n        ...     columns=[\"col 1\", \"col 2\"],\n        ... )\n        >>> df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\n        To specify the sheet name:\n\n        >>> df1.to_excel(\"output.xlsx\", sheet_name=\"Sheet_name_1\")  # doctest: +SKIP\n\n        If you wish to write to more than one sheet in the workbook, it is\n        necessary to specify an ExcelWriter object:\n\n        >>> df2 = df1.copy()\n        >>> with pd.ExcelWriter(\"output.xlsx\") as writer:  # doctest: +SKIP\n        ...     df1.to_excel(writer, sheet_name=\"Sheet_name_1\")\n        ...     df2.to_excel(writer, sheet_name=\"Sheet_name_2\")\n\n        ExcelWriter can also be used to append to an existing Excel file:\n\n        >>> with pd.ExcelWriter(\"output.xlsx\", mode=\"a\") as writer:  # doctest: +SKIP\n        ...     df1.to_excel(writer, sheet_name=\"Sheet_name_3\")\n\n        To set the library that is used to write the Excel file,\n        you can pass the `engine` keyword (the default engine is\n        automatically chosen depending on the file extension):\n\n        >>> df1.to_excel(\"output1.xlsx\", engine=\"xlsxwriter\")  # doctest: +SKIP\n        \"\"\"\n        if engine_kwargs is None:\n            engine_kwargs = {}\n\n        df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n        from pandas.io.formats.excel import ExcelFormatter\n\n        formatter = ExcelFormatter(\n            df,\n            na_rep=na_rep,\n            cols=columns,\n            header=header,\n            float_format=float_format,\n            index=index,\n            index_label=index_label,\n            merge_cells=merge_cells,\n            inf_rep=inf_rep,\n        )\n        formatter.write(\n            excel_writer,\n            sheet_name=sheet_name,\n            startrow=startrow,\n            startcol=startcol,\n            freeze_panes=freeze_panes,\n            engine=engine,\n            storage_options=storage_options,\n            engine_kwargs=engine_kwargs,\n        )\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path_or_buf\",\n    )\n    def to_json(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        *,\n        orient: Literal[\"split\", \"records\", \"index\", \"table\", \"columns\", \"values\"]\n        | None = None,\n        date_format: str | None = None,\n        double_precision: int = 10,\n        force_ascii: bool = True,\n        date_unit: TimeUnit = \"ms\",\n        default_handler: Callable[[Any], JSONSerializable] | None = None,\n        lines: bool = False,\n        compression: CompressionOptions = \"infer\",\n        index: bool | None = None,\n        indent: int | None = None,\n        storage_options: StorageOptions | None = None,\n        mode: Literal[\"a\", \"w\"] = \"w\",\n    ) -> str | None:\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : str, path object, file-like object, or None, default None\n            String, path object (implementing os.PathLike[str]), or file-like\n            object implementing a write() function. If None, the result is\n            returned as a string.\n        orient : str\n            Indication of expected JSON string format.\n\n            * Series:\n\n                - default is 'index'\n                - allowed values are: {{'split', 'records', 'index', 'table'}}.\n\n            * DataFrame:\n\n                - default is 'columns'\n                - allowed values are: {{'split', 'records', 'index', 'columns',\n                  'values', 'table'}}.\n\n            * The format of the JSON string:\n\n                - 'split' : dict like {{'index' -> [index], 'columns' -> [columns],\n                  'data' -> [values]}}\n                - 'records' : list like [{{column -> value}}, ... , {{column -> value}}]\n                - 'index' : dict like {{index -> {{column -> value}}}}\n                - 'columns' : dict like {{column -> {{index -> value}}}}\n                - 'values' : just the values array\n                - 'table' : dict like {{'schema': {{schema}}, 'data': {{data}}}}\n\n                Describing the data, where data component is like ``orient='records'``.\n\n        date_format : {{None, 'epoch', 'iso'}}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n\n            .. deprecated:: 3.0.0\n                'epoch' date format is deprecated and will be removed in a future\n                version, please use 'iso' instead.\n\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values. The possible maximal value is 15.\n            Passing double_precision greater than 15 will raise a ValueError.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : str, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line-delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not\n            list-like.\n        {compression_options}\n\n            .. versionchanged:: 1.4.0 Zstandard support.\n\n        index : bool or None, default None\n            The index is only used when 'orient' is 'split', 'index', 'column',\n            or 'table'. Of these, 'index' and 'column' do not support\n            `index=False`. The string 'index' as a column name with empty :class:`Index`\n            or if it is 'index' will raise a ``ValueError``.\n\n        indent : int, optional\n           Length of whitespace used to indent each record.\n\n        {storage_options}\n\n        mode : str, default 'w' (writing)\n            Specify the IO mode for output when supplying a path_or_buf.\n            Accepted args are 'w' (writing) and 'a' (append) only.\n            mode='a' is only supported when lines is True and orient is 'records'.\n\n        Returns\n        -------\n        None or str\n            If path_or_buf is None, returns the resulting json format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        read_json : Convert a JSON string to pandas object.\n\n        Notes\n        -----\n        The behavior of ``indent=0`` varies from the stdlib, which does not\n        indent the output but does insert newlines. Currently, ``indent=0``\n        and the default ``indent=None`` are equivalent in pandas, though this\n        may change in a future release.\n\n        ``orient='table'`` contains a 'pandas_version' field under 'schema'.\n        This stores the version of `pandas` used in the latest revision of the\n        schema.\n\n        Examples\n        --------\n        >>> from json import loads, dumps\n        >>> df = pd.DataFrame(\n        ...     [[\"a\", \"b\"], [\"c\", \"d\"]],\n        ...     index=[\"row 1\", \"row 2\"],\n        ...     columns=[\"col 1\", \"col 2\"],\n        ... )\n\n        >>> result = df.to_json(orient=\"split\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"columns\": [\n                \"col 1\",\n                \"col 2\"\n            ],\n            \"index\": [\n                \"row 1\",\n                \"row 2\"\n            ],\n            \"data\": [\n                [\n                    \"a\",\n                    \"b\"\n                ],\n                [\n                    \"c\",\n                    \"d\"\n                ]\n            ]\n        }}\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> result = df.to_json(orient=\"records\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        [\n            {{\n                \"col 1\": \"a\",\n                \"col 2\": \"b\"\n            }},\n            {{\n                \"col 1\": \"c\",\n                \"col 2\": \"d\"\n            }}\n        ]\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"index\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"row 1\": {{\n                \"col 1\": \"a\",\n                \"col 2\": \"b\"\n            }},\n            \"row 2\": {{\n                \"col 1\": \"c\",\n                \"col 2\": \"d\"\n            }}\n        }}\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"columns\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"col 1\": {{\n                \"row 1\": \"a\",\n                \"row 2\": \"c\"\n            }},\n            \"col 2\": {{\n                \"row 1\": \"b\",\n                \"row 2\": \"d\"\n            }}\n        }}\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> result = df.to_json(orient=\"values\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        [\n            [\n                \"a\",\n                \"b\"\n            ],\n            [\n                \"c\",\n                \"d\"\n            ]\n        ]\n\n        Encoding with Table Schema:\n\n        >>> result = df.to_json(orient=\"table\")\n        >>> parsed = loads(result)\n        >>> dumps(parsed, indent=4)  # doctest: +SKIP\n        {{\n            \"schema\": {{\n                \"fields\": [\n                    {{\n                        \"name\": \"index\",\n                        \"type\": \"string\"\n                    }},\n                    {{\n                        \"name\": \"col 1\",\n                        \"type\": \"string\"\n                    }},\n                    {{\n                        \"name\": \"col 2\",\n                        \"type\": \"string\"\n                    }}\n                ],\n                \"primaryKey\": [\n                    \"index\"\n                ],\n                \"pandas_version\": \"1.4.0\"\n            }},\n            \"data\": [\n                {{\n                    \"index\": \"row 1\",\n                    \"col 1\": \"a\",\n                    \"col 2\": \"b\"\n                }},\n                {{\n                    \"index\": \"row 2\",\n                    \"col 1\": \"c\",\n                    \"col 2\": \"d\"\n                }}\n            ]\n        }}\n        \"\"\"\n        from pandas.io import json\n\n        if date_format is None and orient == \"table\":\n            date_format = \"iso\"\n        elif date_format is None:\n            date_format = \"epoch\"\n            dtypes = self.dtypes if self.ndim == 2 else [self.dtype]\n            if any(lib.is_np_dtype(dtype, \"mM\") for dtype in dtypes):\n                warnings.warn(\n                    \"The default 'epoch' date format is deprecated and will be removed \"\n                    \"in a future version, please use 'iso' date format instead.\",\n                    FutureWarning,\n                    stacklevel=find_stack_level(),\n                )\n        elif date_format == \"epoch\":\n            # GH#57063\n            warnings.warn(\n                \"'epoch' date format is deprecated and will be removed in a future \"\n                \"version, please use 'iso' date format instead.\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n\n        config.is_nonnegative_int(indent)\n        indent = indent or 0\n\n        return json.to_json(\n            path_or_buf=path_or_buf,\n            obj=self,\n            orient=orient,\n            date_format=date_format,\n            double_precision=double_precision,\n            force_ascii=force_ascii,\n            date_unit=date_unit,\n            default_handler=default_handler,\n            lines=lines,\n            compression=compression,\n            index=index,\n            indent=indent,\n            storage_options=storage_options,\n            mode=mode,\n        )\n\n    @final\n    def to_hdf(\n        self,\n        path_or_buf: FilePath | HDFStore,\n        *,\n        key: str,\n        mode: Literal[\"a\", \"w\", \"r+\"] = \"a\",\n        complevel: int | None = None,\n        complib: Literal[\"zlib\", \"lzo\", \"bzip2\", \"blosc\"] | None = None,\n        append: bool = False,\n        format: Literal[\"fixed\", \"table\"] | None = None,\n        index: bool = True,\n        min_itemsize: int | dict[str, int] | None = None,\n        nan_rep=None,\n        dropna: bool | None = None,\n        data_columns: Literal[True] | list[str] | None = None,\n        errors: OpenFileErrors = \"strict\",\n        encoding: str = \"UTF-8\",\n    ) -> None:\n        \"\"\"\n        Write the contained data to an HDF5 file using HDFStore.\n\n        Hierarchical Data Format (HDF) is self-describing, allowing an\n        application to interpret the structure and contents of a file with\n        no outside information. One HDF file can hold a mix of related objects\n        which can be accessed as a group or as individual objects.\n\n        In order to add another DataFrame or Series to an existing HDF file\n        please use append mode and a different a key.\n\n        .. warning::\n\n           One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,\n           but the type of the subclass is lost upon storing.\n\n        For more information see the :ref:`user guide <io.hdf5>`.\n\n        Parameters\n        ----------\n        path_or_buf : str or pandas.HDFStore\n            File path or HDFStore object.\n        key : str\n            Identifier for the group in the store.\n        mode : {'a', 'w', 'r+'}, default 'a'\n            Mode to open file:\n\n            - 'w': write, a new file is created (an existing file with\n              the same name would be deleted).\n            - 'a': append, an existing file is opened for reading and\n              writing, and if the file does not exist it is created.\n            - 'r+': similar to 'a', but the file must already exist.\n        complevel : {0-9}, default None\n            Specifies a compression level for data.\n            A value of 0 or None disables compression.\n        complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n            Specifies the compression library to be used.\n            These additional compressors for Blosc are supported\n            (default if no compressor specified: 'blosc:blosclz'):\n            {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n            'blosc:zlib', 'blosc:zstd'}.\n            Specifying a compression library which is not available issues\n            a ValueError.\n        append : bool, default False\n            For Table formats, append the input data to the existing.\n        format : {'fixed', 'table', None}, default 'fixed'\n            Possible values:\n\n            - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n              nor searchable.\n            - 'table': Table format. Write as a PyTables Table structure\n              which may perform worse but allow more flexible operations\n              like searching / selecting subsets of the data.\n            - If None, pd.get_option('io.hdf.default_format') is checked,\n              followed by fallback to \"fixed\".\n        index : bool, default True\n            Write DataFrame index as a column.\n        min_itemsize : dict or int, optional\n            Map column names to minimum string sizes for columns.\n        nan_rep : Any, optional\n            How to represent null values as str.\n            Not allowed with append=True.\n        dropna : bool, default False, optional\n            Remove missing values.\n        data_columns : list of columns or True, optional\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See\n            :ref:`Query via data columns<io.hdf5-query-data-columns>`. for\n            more information.\n            Applicable only to format='table'.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list\n            of options.\n        encoding : str, default \"UTF-8\"\n            Set character encoding.\n\n        See Also\n        --------\n        read_hdf : Read from HDF file.\n        DataFrame.to_orc : Write a DataFrame to the binary orc format.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n        DataFrame.to_sql : Write to a SQL table.\n        DataFrame.to_feather : Write out feather-format for DataFrames.\n        DataFrame.to_csv : Write out to a csv file.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=[\"a\", \"b\", \"c\"]\n        ... )  # doctest: +SKIP\n        >>> df.to_hdf(\"data.h5\", key=\"df\", mode=\"w\")  # doctest: +SKIP\n\n        We can add another object to the same file:\n\n        >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP\n        >>> s.to_hdf(\"data.h5\", key=\"s\")  # doctest: +SKIP\n\n        Reading from HDF file:\n\n        >>> pd.read_hdf(\"data.h5\", \"df\")  # doctest: +SKIP\n        A  B\n        a  1  4\n        b  2  5\n        c  3  6\n        >>> pd.read_hdf(\"data.h5\", \"s\")  # doctest: +SKIP\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n        \"\"\"\n        from pandas.io import pytables\n\n        # Argument 3 to \"to_hdf\" has incompatible type \"NDFrame\"; expected\n        # \"Union[DataFrame, Series]\" [arg-type]\n        pytables.to_hdf(\n            path_or_buf,\n            key,\n            self,  # type: ignore[arg-type]\n            mode=mode,\n            complevel=complevel,\n            complib=complib,\n            append=append,\n            format=format,\n            index=index,\n            min_itemsize=min_itemsize,\n            nan_rep=nan_rep,\n            dropna=dropna,\n            data_columns=data_columns,\n            errors=errors,\n            encoding=encoding,\n        )\n\n    @final\n    def to_sql(\n        self,\n        name: str,\n        con,\n        *,\n        schema: str | None = None,\n        if_exists: Literal[\"fail\", \"replace\", \"append\", \"delete_rows\"] = \"fail\",\n        index: bool = True,\n        index_label: IndexLabel | None = None,\n        chunksize: int | None = None,\n        dtype: DtypeArg | None = None,\n        method: Literal[\"multi\"] | Callable | None = None,\n    ) -> int | None:\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n        newly created, appended to, or overwritten.\n\n        .. warning::\n            The pandas library does not attempt to sanitize inputs provided via a to_sql call.\n            Please refer to the documentation for the underlying database driver to see if it\n            will properly prevent injection, or alternatively be advised of a security risk when\n            executing arbitrary commands in a to_sql call.\n\n        Parameters\n        ----------\n        name : str\n            Name of SQL table.\n        con : ADBC connection, sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection\n            ADBC provides high performance I/O with native type support, where available.\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. Legacy support is provided for sqlite3.Connection objects. The user\n            is responsible for engine disposal and connection closure for the SQLAlchemy\n            connectable. See `here \\\n                <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.\n            If passing a sqlalchemy.engine.Connection which is already in a transaction,\n            the transaction will not be committed.  If passing a sqlite3.Connection,\n            it will not be possible to roll back the record insertion.\n\n        schema : str, optional\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append', 'delete_rows'}, default 'fail'\n            How to behave if the table already exists.\n\n            * fail: Raise a ValueError.\n            * replace: Drop the table before inserting new values.\n            * append: Insert new values to the existing table.\n            * delete_rows: If a table exists, delete all records and insert data.\n\n        index : bool, default True\n            Write DataFrame index as a column. Uses `index_label` as the column\n            name in the table. Creates a table index for this column.\n        index_label : str or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, optional\n            Specify the number of rows in each batch to be written to the database connection at a time.\n            By default, all rows will be written at once. Also see the method keyword.\n        dtype : dict or scalar, optional\n            Specifying the datatype for columns. If a dictionary is used, the\n            keys should be the column names and the values should be the\n            SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n            scalar is provided, it will be applied to all columns.\n        method : {None, 'multi', callable}, optional\n            Controls the SQL insertion clause used:\n\n            * None : Uses standard SQL ``INSERT`` clause (one per row).\n            * 'multi': Pass multiple values in a single ``INSERT`` clause.\n            * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n            Details and a sample callable implementation can be found in the\n            section :ref:`insert method <io.sql.method>`.\n\n        Returns\n        -------\n        None or int\n            Number of rows affected by to_sql. None is returned if the callable\n            passed into ``method`` does not return an integer number of rows.\n\n            The number of returned rows affected is the sum of the ``rowcount``\n            attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not\n            reflect the exact number of written rows as stipulated in the\n            `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or\n            `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.\n\n            .. versionadded:: 1.4.0\n\n        Raises\n        ------\n        ValueError\n            When the table already exists and `if_exists` is 'fail' (the\n            default).\n\n        See Also\n        --------\n        read_sql : Read a DataFrame from a table.\n\n        Notes\n        -----\n        Timezone aware datetime columns will be written as\n        ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n        database. Otherwise, the datetimes will be stored as timezone unaware\n        timestamps local to the original timezone.\n\n        Not all datastores support ``method=\"multi\"``. Oracle, for example,\n        does not support multi-value insert.\n\n        References\n        ----------\n        .. [1] https://docs.sqlalchemy.org\n        .. [2] https://www.python.org/dev/peps/pep-0249/\n\n        Examples\n        --------\n        Create an in-memory SQLite database.\n\n        >>> from sqlalchemy import create_engine\n        >>> engine = create_engine('sqlite://', echo=False)\n\n        Create a table from scratch with 3 rows.\n\n        >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n        >>> df\n             name\n        0  User 1\n        1  User 2\n        2  User 3\n\n        >>> df.to_sql(name='users', con=engine)\n        3\n        >>> from sqlalchemy import text\n        >>> with engine.connect() as conn:\n        ...     conn.execute(text(\"SELECT * FROM users\")).fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n        An `sqlalchemy.engine.Connection` can also be passed to `con`:\n\n        >>> with engine.begin() as connection:\n        ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n        ...     df1.to_sql(name='users', con=connection, if_exists='append')\n        2\n\n        This is allowed to support operations that require that the same\n        DBAPI connection is used for the entire operation.\n\n        >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})\n        >>> df2.to_sql(name='users', con=engine, if_exists='append')\n        2\n        >>> with engine.connect() as conn:\n        ...     conn.execute(text(\"SELECT * FROM users\")).fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n         (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),\n         (1, 'User 7')]\n\n        Overwrite the table with just ``df2``.\n\n        >>> df2.to_sql(name='users', con=engine, if_exists='replace',\n        ...            index_label='id')\n        2\n        >>> with engine.connect() as conn:\n        ...     conn.execute(text(\"SELECT * FROM users\")).fetchall()\n        [(0, 'User 6'), (1, 'User 7')]\n\n        Delete all rows before inserting new records with ``df3``\n\n        >>> df3 = pd.DataFrame({\"name\": ['User 8', 'User 9']})\n        >>> df3.to_sql(name='users', con=engine, if_exists='delete_rows',\n        ...            index_label='id')\n        2\n        >>> with engine.connect() as conn:\n        ...     conn.execute(text(\"SELECT * FROM users\")).fetchall()\n        [(0, 'User 8'), (1, 'User 9')]\n\n        Use ``method`` to define a callable insertion method to do nothing\n        if there's a primary key conflict on a table in a PostgreSQL database.\n\n        >>> from sqlalchemy.dialects.postgresql import insert\n        >>> def insert_on_conflict_nothing(table, conn, keys, data_iter):\n        ...     # \"a\" is the primary key in \"conflict_table\"\n        ...     data = [dict(zip(keys, row)) for row in data_iter]\n        ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=[\"a\"])\n        ...     result = conn.execute(stmt)\n        ...     return result.rowcount\n        >>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\",  # noqa: F821\n        ...                    method=insert_on_conflict_nothing)  # doctest: +SKIP\n        0\n\n        For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict\n        on a primary key.\n\n        >>> from sqlalchemy.dialects.mysql import insert   # noqa: F811\n        >>> def insert_on_conflict_update(table, conn, keys, data_iter):\n        ...     # update columns \"b\" and \"c\" on primary key conflict\n        ...     data = [dict(zip(keys, row)) for row in data_iter]\n        ...     stmt = (\n        ...         insert(table.table)\n        ...         .values(data)\n        ...     )\n        ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)\n        ...     result = conn.execute(stmt)\n        ...     return result.rowcount\n        >>> df_conflict.to_sql(name=\"conflict_table\", con=conn, if_exists=\"append\",  # noqa: F821\n        ...                    method=insert_on_conflict_update)  # doctest: +SKIP\n        2\n\n        Specify the dtype (especially useful for integers with missing values).\n        Notice that while pandas is forced to store the data as floating point,\n        the database supports nullable integers. When fetching the data with\n        Python, we get back integer scalars.\n\n        >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n        >>> df\n             A\n        0  1.0\n        1  NaN\n        2  2.0\n\n        >>> from sqlalchemy.types import Integer\n        >>> df.to_sql(name='integers', con=engine, index=False,\n        ...           dtype={\"A\": Integer()})\n        3\n\n        >>> with engine.connect() as conn:\n        ...     conn.execute(text(\"SELECT * FROM integers\")).fetchall()\n        [(1,), (None,), (2,)]\n\n        .. versionadded:: 2.2.0\n\n           pandas now supports writing via ADBC drivers\n\n        >>> df = pd.DataFrame({'name' : ['User 10', 'User 11', 'User 12']})\n        >>> df\n              name\n        0  User 10\n        1  User 11\n        2  User 12\n\n        >>> from adbc_driver_sqlite import dbapi  # doctest:+SKIP\n        >>> with dbapi.connect(\"sqlite://\") as conn:  # doctest:+SKIP\n        ...     df.to_sql(name=\"users\", con=conn)\n        3\n        \"\"\"  # noqa: E501\n        from pandas.io import sql\n\n        return sql.to_sql(\n            self,\n            name,\n            con,\n            schema=schema,\n            if_exists=if_exists,\n            index=index,\n            index_label=index_label,\n            chunksize=chunksize,\n            dtype=dtype,\n            method=method,\n        )\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path\",\n    )\n    def to_pickle(\n        self,\n        path: FilePath | WriteBuffer[bytes],\n        *,\n        compression: CompressionOptions = \"infer\",\n        protocol: int = pickle.HIGHEST_PROTOCOL,\n        storage_options: StorageOptions | None = None,\n    ) -> None:\n        \"\"\"\n        Pickle (serialize) object to file.\n\n        Parameters\n        ----------\n        path : str, path object, or file-like object\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a binary ``write()`` function. File path where\n            the pickled object will be stored.\n        {compression_options}\n        protocol : int\n            Int which indicates which protocol should be used by the pickler,\n            default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n            values are 0, 1, 2, 3, 4, 5. A negative value for the protocol\n            parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html.\n\n        {storage_options}\n\n        See Also\n        --------\n        read_pickle : Load pickled pandas object (or any object) from file.\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_sql : Write DataFrame to a SQL database.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Examples\n        --------\n        >>> original_df = pd.DataFrame(\n        ...     {{\"foo\": range(5), \"bar\": range(5, 10)}}\n        ... )  # doctest: +SKIP\n        >>> original_df  # doctest: +SKIP\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n        >>> original_df.to_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n\n        >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")  # doctest: +SKIP\n        >>> unpickled_df  # doctest: +SKIP\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n        \"\"\"\n        from pandas.io.pickle import to_pickle\n\n        to_pickle(\n            self,\n            path,\n            compression=compression,\n            protocol=protocol,\n            storage_options=storage_options,\n        )\n\n    @final\n    def to_clipboard(\n        self, *, excel: bool = True, sep: str | None = None, **kwargs\n    ) -> None:\n        r\"\"\"\n        Copy object to the system clipboard.\n\n        Write a text representation of object to the system clipboard.\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : bool, default True\n            Produce output in a csv format for easy pasting into excel.\n\n            - True, use the provided separator for csv pasting.\n            - False, write a string representation of the object to the clipboard.\n\n        sep : str, default ``'\\t'``\n            Field delimiter.\n        **kwargs\n            These parameters will be passed to DataFrame.to_csv.\n\n        See Also\n        --------\n        DataFrame.to_csv : Write a DataFrame to a comma-separated values\n            (csv) file.\n        read_clipboard : Read text from clipboard and pass to read_csv.\n\n        Notes\n        -----\n        Requirements for your platform.\n\n          - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n          - Windows : none\n          - macOS : none\n\n        This method uses the processes developed for the package `pyperclip`. A\n        solution to render any output string format is given in the examples.\n\n        Examples\n        --------\n        Copy the contents of a DataFrame to the clipboard.\n\n        >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=[\"A\", \"B\", \"C\"])\n\n        >>> df.to_clipboard(sep=\",\")  # doctest: +SKIP\n        ... # Wrote the following to the system clipboard:\n        ... # ,A,B,C\n        ... # 0,1,2,3\n        ... # 1,4,5,6\n\n        We can omit the index by passing the keyword `index` and setting\n        it to false.\n\n        >>> df.to_clipboard(sep=\",\", index=False)  # doctest: +SKIP\n        ... # Wrote the following to the system clipboard:\n        ... # A,B,C\n        ... # 1,2,3\n        ... # 4,5,6\n\n        Using the original `pyperclip` package for any string output format.\n\n        .. code-block:: python\n\n           import pyperclip\n\n           html = df.style.to_html()\n           pyperclip.copy(html)\n        \"\"\"\n        from pandas.io import clipboards\n\n        clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    @final\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        xarray.DataArray or xarray.Dataset\n            Data in the pandas structure converted to Dataset if the object is\n            a DataFrame, or a DataArray if the object is a Series.\n\n        See Also\n        --------\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Notes\n        -----\n        See the `xarray docs <https://xarray.pydata.org/en/stable/>`__\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         (\"falcon\", \"bird\", 389.0, 2),\n        ...         (\"parrot\", \"bird\", 24.0, 2),\n        ...         (\"lion\", \"mammal\", 80.5, 4),\n        ...         (\"monkey\", \"mammal\", np.nan, 4),\n        ...     ],\n        ...     columns=[\"name\", \"class\", \"max_speed\", \"num_legs\"],\n        ... )\n        >>> df\n             name   class  max_speed  num_legs\n        0  falcon    bird      389.0         2\n        1  parrot    bird       24.0         2\n        2    lion  mammal       80.5         4\n        3  monkey  mammal        NaN         4\n\n        >>> df.to_xarray()  # doctest: +SKIP\n        <xarray.Dataset>\n        Dimensions:    (index: 4)\n        Coordinates:\n          * index      (index) int64 32B 0 1 2 3\n        Data variables:\n            name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'\n            class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'\n            max_speed  (index) float64 32B 389.0 24.0 80.5 nan\n            num_legs   (index) int64 32B 2 2 4 4\n\n        >>> df[\"max_speed\"].to_xarray()  # doctest: +SKIP\n        <xarray.DataArray 'max_speed' (index: 4)>\n        array([389. ,  24. ,  80.5,   nan])\n        Coordinates:\n          * index    (index) int64 0 1 2 3\n\n        >>> dates = pd.to_datetime(\n        ...     [\"2018-01-01\", \"2018-01-01\", \"2018-01-02\", \"2018-01-02\"]\n        ... )\n        >>> df_multiindex = pd.DataFrame(\n        ...     {\n        ...         \"date\": dates,\n        ...         \"animal\": [\"falcon\", \"parrot\", \"falcon\", \"parrot\"],\n        ...         \"speed\": [350, 18, 361, 15],\n        ...     }\n        ... )\n        >>> df_multiindex = df_multiindex.set_index([\"date\", \"animal\"])\n\n        >>> df_multiindex\n                           speed\n        date       animal\n        2018-01-01 falcon    350\n                   parrot     18\n        2018-01-02 falcon    361\n                   parrot     15\n\n        >>> df_multiindex.to_xarray()  # doctest: +SKIP\n        <xarray.Dataset>\n        Dimensions:  (date: 2, animal: 2)\n        Coordinates:\n          * date     (date) datetime64[s] 2018-01-01 2018-01-02\n          * animal   (animal) object 'falcon' 'parrot'\n        Data variables:\n            speed    (date, animal) int64 350 18 361 15\n        \"\"\"\n        xarray = import_optional_dependency(\"xarray\")\n\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        else:\n            return xarray.Dataset.from_dataframe(self)\n\n    @overload\n    def to_latex(\n        self,\n        buf: None = ...,\n        *,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool | SequenceNotStr[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        bold_rows: bool = ...,\n        column_format: str | None = ...,\n        longtable: bool | None = ...,\n        escape: bool | None = ...,\n        encoding: str | None = ...,\n        decimal: str = ...,\n        multicolumn: bool | None = ...,\n        multicolumn_format: str | None = ...,\n        multirow: bool | None = ...,\n        caption: str | tuple[str, str] | None = ...,\n        label: str | None = ...,\n        position: str | None = ...,\n    ) -> str: ...\n\n    @overload\n    def to_latex(\n        self,\n        buf: FilePath | WriteBuffer[str],\n        *,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool | SequenceNotStr[str] = ...,\n        index: bool = ...,\n        na_rep: str = ...,\n        formatters: FormattersType | None = ...,\n        float_format: FloatFormatType | None = ...,\n        sparsify: bool | None = ...,\n        index_names: bool = ...,\n        bold_rows: bool = ...,\n        column_format: str | None = ...,\n        longtable: bool | None = ...,\n        escape: bool | None = ...,\n        encoding: str | None = ...,\n        decimal: str = ...,\n        multicolumn: bool | None = ...,\n        multicolumn_format: str | None = ...,\n        multirow: bool | None = ...,\n        caption: str | tuple[str, str] | None = ...,\n        label: str | None = ...,\n        position: str | None = ...,\n    ) -> None: ...\n\n    @final\n    def to_latex(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        *,\n        columns: Sequence[Hashable] | None = None,\n        header: bool | SequenceNotStr[str] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: FormattersType | None = None,\n        float_format: FloatFormatType | None = None,\n        sparsify: bool | None = None,\n        index_names: bool = True,\n        bold_rows: bool = False,\n        column_format: str | None = None,\n        longtable: bool | None = None,\n        escape: bool | None = None,\n        encoding: str | None = None,\n        decimal: str = \".\",\n        multicolumn: bool | None = None,\n        multicolumn_format: str | None = None,\n        multirow: bool | None = None,\n        caption: str | tuple[str, str] | None = None,\n        label: str | None = None,\n        position: str | None = None,\n    ) -> str | None:\n        r\"\"\"\n        Render object to a LaTeX tabular, longtable, or nested table.\n\n        Requires ``\\usepackage{booktabs}``.  The output can be copy/pasted\n        into a main LaTeX document or read from an external file\n        with ``\\input{table.tex}``.\n\n        .. versionchanged:: 2.0.0\n           Refactored to use the Styler implementation via jinja2 templating.\n\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : list of label, optional\n            The subset of columns to write. Writes all columns by default.\n        header : bool or list of str, default True\n            Write out the column names. If a list of strings is given,\n            it is assumed to be aliases for the column names. Braces must be escaped.\n        index : bool, default True\n            Write row names (index).\n        na_rep : str, default 'NaN'\n            Missing data representation.\n        formatters : list of functions or dict of {str: function}, optional\n            Formatter functions to apply to columns' elements by position or\n            name. The result of each function must be a unicode string.\n            List must be of length equal to the number of columns.\n        float_format : one-parameter function or str, optional, default None\n            Formatter for floating point numbers. For example\n            ``float_format=\"%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n            both result in 0.1234 being formatted as 0.12.\n        sparsify : bool, optional\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row. By default, the value will be\n            read from the config module.\n        index_names : bool, default True\n            Prints the names of the indexes.\n        bold_rows : bool, default False\n            Make the row labels bold in the output.\n        column_format : str, optional\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n            columns. By default, 'l' will be used for all columns except\n            columns of numbers, which default to 'r'.\n        longtable : bool, optional\n            Use a longtable environment instead of tabular. Requires\n            adding a \\usepackage{longtable} to your LaTeX preamble.\n            By default, the value will be read from the pandas config\n            module, and set to `True` if the option ``styler.latex.environment`` is\n            `\"longtable\"`.\n\n            .. versionchanged:: 2.0.0\n               The pandas option affecting this argument has changed.\n        escape : bool, optional\n            By default, the value will be read from the pandas config\n            module and set to `True` if the option ``styler.format.escape`` is\n            `\"latex\"`. When set to False prevents from escaping latex special\n            characters in column names.\n\n            .. versionchanged:: 2.0.0\n               The pandas option affecting this argument has changed, as has the\n               default value to `False`.\n        encoding : str, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'utf-8'.\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n        multicolumn : bool, default True\n            Use \\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module, and is set\n            as the option ``styler.sparse.columns``.\n\n            .. versionchanged:: 2.0.0\n               The pandas option affecting this argument has changed.\n        multicolumn_format : str, default 'r'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module, and is set as the option\n            ``styler.latex.multicol_align``.\n\n            .. versionchanged:: 2.0.0\n               The pandas option affecting this argument has changed, as has the\n               default value to \"r\".\n        multirow : bool, default True\n            Use \\multirow to enhance MultiIndex rows. Requires adding a\n            \\usepackage{multirow} to your LaTeX preamble. Will print\n            centered labels (instead of top-aligned) across the contained\n            rows, separating groups via clines. The default will be read\n            from the pandas config module, and is set as the option\n            ``styler.sparse.index``.\n\n            .. versionchanged:: 2.0.0\n               The pandas option affecting this argument has changed, as has the\n               default value to `True`.\n        caption : str or tuple, optional\n            Tuple (full_caption, short_caption),\n            which results in ``\\caption[short_caption]{full_caption}``;\n            if a single string is passed, no short caption will be set.\n        label : str, optional\n            The LaTeX label to be placed inside ``\\label{}`` in the output.\n            This is used with ``\\ref{}`` in the main ``.tex`` file.\n\n        position : str, optional\n            The LaTeX positional argument for tables, to be placed after\n            ``\\begin{}`` in the output.\n\n        Returns\n        -------\n        str or None\n            If buf is None, returns the result as a string. Otherwise returns None.\n\n        See Also\n        --------\n        io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX\n            with conditional formatting.\n        DataFrame.to_string : Render a DataFrame to a console-friendly\n            tabular output.\n        DataFrame.to_html : Render a DataFrame as an HTML table.\n\n        Notes\n        -----\n        As of v2.0.0 this method has changed to use the Styler implementation as\n        part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means\n        that ``jinja2`` is a requirement, and needs to be installed, for this method\n        to function. It is advised that users switch to using Styler, since that\n        implementation is more frequently updated and contains much more\n        flexibility with the output.\n\n        Examples\n        --------\n        Convert a general DataFrame to LaTeX with formatting:\n\n        >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],\n        ...                        age=[26, 45],\n        ...                        height=[181.23, 177.65]))\n        >>> print(df.to_latex(index=False,\n        ...                   formatters={\"name\": str.upper},\n        ...                   float_format=\"{:.1f}\".format,\n        ...                   ))  # doctest: +SKIP\n        \\begin{tabular}{lrr}\n        \\toprule\n        name & age & height \\\\\n        \\midrule\n        RAPHAEL & 26 & 181.2 \\\\\n        DONATELLO & 45 & 177.7 \\\\\n        \\bottomrule\n        \\end{tabular}\n        \"\"\"\n        # Get defaults from the pandas config\n        if self.ndim == 1:\n            self = self.to_frame()\n        if longtable is None:\n            longtable = config.get_option(\"styler.latex.environment\") == \"longtable\"\n        if escape is None:\n            escape = config.get_option(\"styler.format.escape\") == \"latex\"\n        if multicolumn is None:\n            multicolumn = config.get_option(\"styler.sparse.columns\")\n        if multicolumn_format is None:\n            multicolumn_format = config.get_option(\"styler.latex.multicol_align\")\n        if multirow is None:\n            multirow = config.get_option(\"styler.sparse.index\")\n\n        if column_format is not None and not isinstance(column_format, str):\n            raise ValueError(\"`column_format` must be str or unicode\")\n        length = len(self.columns) if columns is None else len(columns)\n        if isinstance(header, (list, tuple)) and len(header) != length:\n            raise ValueError(f\"Writing {length} cols but got {len(header)} aliases\")\n\n        # Refactor formatters/float_format/decimal/na_rep/escape to Styler structure\n        base_format_ = {\n            \"na_rep\": na_rep,\n            \"escape\": \"latex\" if escape else None,\n            \"decimal\": decimal,\n        }\n        index_format_: dict[str, Any] = {\"axis\": 0, **base_format_}\n        column_format_: dict[str, Any] = {\"axis\": 1, **base_format_}\n\n        if isinstance(float_format, str):\n            float_format_: Callable | None = lambda x: float_format % x\n        else:\n            float_format_ = float_format\n\n        def _wrap(x, alt_format_):\n            if isinstance(x, (float, complex)) and float_format_ is not None:\n                return float_format_(x)\n            else:\n                return alt_format_(x)\n\n        formatters_: list | tuple | dict | Callable | None = None\n        if isinstance(formatters, list):\n            formatters_ = {\n                c: partial(_wrap, alt_format_=formatters[i])\n                for i, c in enumerate(self.columns)\n            }\n        elif isinstance(formatters, dict):\n            index_formatter = formatters.pop(\"__index__\", None)\n            column_formatter = formatters.pop(\"__columns__\", None)\n            if index_formatter is not None:\n                index_format_.update({\"formatter\": index_formatter})\n            if column_formatter is not None:\n                column_format_.update({\"formatter\": column_formatter})\n\n            formatters_ = formatters\n            float_columns = self.select_dtypes(include=\"float\").columns\n            for col in float_columns:\n                if col not in formatters.keys():\n                    formatters_.update({col: float_format_})\n        elif formatters is None and float_format is not None:\n            formatters_ = partial(_wrap, alt_format_=lambda v: v)\n        format_index_ = [index_format_, column_format_]\n\n        # Deal with hiding indexes and relabelling column names\n        hide_: list[dict] = []\n        relabel_index_: list[dict] = []\n        if columns:\n            hide_.append(\n                {\n                    \"subset\": [c for c in self.columns if c not in columns],\n                    \"axis\": \"columns\",\n                }\n            )\n        if header is False:\n            hide_.append({\"axis\": \"columns\"})\n        elif isinstance(header, (list, tuple)):\n            relabel_index_.append({\"labels\": header, \"axis\": \"columns\"})\n            format_index_ = [index_format_]  # column_format is overwritten\n\n        if index is False:\n            hide_.append({\"axis\": \"index\"})\n        if index_names is False:\n            hide_.append({\"names\": True, \"axis\": \"index\"})\n\n        render_kwargs_ = {\n            \"hrules\": True,\n            \"sparse_index\": sparsify,\n            \"sparse_columns\": sparsify,\n            \"environment\": \"longtable\" if longtable else None,\n            \"multicol_align\": multicolumn_format\n            if multicolumn\n            else f\"naive-{multicolumn_format}\",\n            \"multirow_align\": \"t\" if multirow else \"naive\",\n            \"encoding\": encoding,\n            \"caption\": caption,\n            \"label\": label,\n            \"position\": position,\n            \"column_format\": column_format,\n            \"clines\": \"skip-last;data\"\n            if (multirow and isinstance(self.index, MultiIndex))\n            else None,\n            \"bold_rows\": bold_rows,\n        }\n\n        return self._to_latex_via_styler(\n            buf,\n            hide=hide_,\n            relabel_index=relabel_index_,\n            format={\"formatter\": formatters_, **base_format_},\n            format_index=format_index_,\n            render_kwargs=render_kwargs_,\n        )\n\n    @final\n    def _to_latex_via_styler(\n        self,\n        buf=None,\n        *,\n        hide: dict | list[dict] | None = None,\n        relabel_index: dict | list[dict] | None = None,\n        format: dict | list[dict] | None = None,\n        format_index: dict | list[dict] | None = None,\n        render_kwargs: dict | None = None,\n    ):\n        \"\"\"\n        Render object to a LaTeX tabular, longtable, or nested table.\n\n        Uses the ``Styler`` implementation with the following, ordered, method chaining:\n\n        .. code-block:: python\n           styler = Styler(DataFrame)\n           styler.hide(**hide)\n           styler.relabel_index(**relabel_index)\n           styler.format(**format)\n           styler.format_index(**format_index)\n           styler.to_latex(buf=buf, **render_kwargs)\n\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        hide : dict, list of dict\n            Keyword args to pass to the method call of ``Styler.hide``. If a list will\n            call the method numerous times.\n        relabel_index : dict, list of dict\n            Keyword args to pass to the method of ``Styler.relabel_index``. If a list\n            will call the method numerous times.\n        format : dict, list of dict\n            Keyword args to pass to the method call of ``Styler.format``. If a list will\n            call the method numerous times.\n        format_index : dict, list of dict\n            Keyword args to pass to the method call of ``Styler.format_index``. If a\n            list will call the method numerous times.\n        render_kwargs : dict\n            Keyword args to pass to the method call of ``Styler.to_latex``.\n\n        Returns\n        -------\n        str or None\n            If buf is None, returns the result as a string. Otherwise returns None.\n        \"\"\"\n        from pandas.io.formats.style import Styler\n\n        self = cast(\"DataFrame\", self)\n        styler = Styler(self, uuid=\"\")\n\n        for kw_name in [\"hide\", \"relabel_index\", \"format\", \"format_index\"]:\n            kw = vars()[kw_name]\n            if isinstance(kw, dict):\n                getattr(styler, kw_name)(**kw)\n            elif isinstance(kw, list):\n                for sub_kw in kw:\n                    getattr(styler, kw_name)(**sub_kw)\n\n        # bold_rows is not a direct kwarg of Styler.to_latex\n        render_kwargs = {} if render_kwargs is None else render_kwargs\n        if render_kwargs.pop(\"bold_rows\"):\n            styler.map_index(lambda v: \"textbf:--rwrap;\")\n\n        return styler.to_latex(buf=buf, **render_kwargs)\n\n    @overload\n    def to_csv(\n        self,\n        path_or_buf: None = ...,\n        *,\n        sep: str = ...,\n        na_rep: str = ...,\n        float_format: str | Callable | None = ...,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool | list[str] = ...,\n        index: bool = ...,\n        index_label: IndexLabel | None = ...,\n        mode: str = ...,\n        encoding: str | None = ...,\n        compression: CompressionOptions = ...,\n        quoting: int | None = ...,\n        quotechar: str = ...,\n        lineterminator: str | None = ...,\n        chunksize: int | None = ...,\n        date_format: str | None = ...,\n        doublequote: bool = ...,\n        escapechar: str | None = ...,\n        decimal: str = ...,\n        errors: OpenFileErrors = ...,\n        storage_options: StorageOptions = ...,\n    ) -> str: ...\n\n    @overload\n    def to_csv(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str],\n        *,\n        sep: str = ...,\n        na_rep: str = ...,\n        float_format: str | Callable | None = ...,\n        columns: Sequence[Hashable] | None = ...,\n        header: bool | list[str] = ...,\n        index: bool = ...,\n        index_label: IndexLabel | None = ...,\n        mode: str = ...,\n        encoding: str | None = ...,\n        compression: CompressionOptions = ...,\n        quoting: int | None = ...,\n        quotechar: str = ...,\n        lineterminator: str | None = ...,\n        chunksize: int | None = ...,\n        date_format: str | None = ...,\n        doublequote: bool = ...,\n        escapechar: str | None = ...,\n        decimal: str = ...,\n        errors: OpenFileErrors = ...,\n        storage_options: StorageOptions = ...,\n    ) -> None: ...\n\n    @final\n    @doc(\n        storage_options=_shared_docs[\"storage_options\"],\n        compression_options=_shared_docs[\"compression_options\"] % \"path_or_buf\",\n    )\n    def to_csv(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        *,\n        sep: str = \",\",\n        na_rep: str = \"\",\n        float_format: str | Callable | None = None,\n        columns: Sequence[Hashable] | None = None,\n        header: bool | list[str] = True,\n        index: bool = True,\n        index_label: IndexLabel | None = None,\n        mode: str = \"w\",\n        encoding: str | None = None,\n        compression: CompressionOptions = \"infer\",\n        quoting: int | None = None,\n        quotechar: str = '\"',\n        lineterminator: str | None = None,\n        chunksize: int | None = None,\n        date_format: str | None = None,\n        doublequote: bool = True,\n        escapechar: str | None = None,\n        decimal: str = \".\",\n        errors: OpenFileErrors = \"strict\",\n        storage_options: StorageOptions | None = None,\n    ) -> str | None:\n        r\"\"\"\n        Write object to a comma-separated values (csv) file.\n\n        Parameters\n        ----------\n        path_or_buf : str, path object, file-like object, or None, default None\n            String, path object (implementing os.PathLike[str]), or file-like\n            object implementing a write() function. If None, the result is\n            returned as a string. If a non-binary file object is passed, it should\n            be opened with `newline=''`, disabling universal newlines. If a binary\n            file object is passed, `mode` might need to contain a `'b'`.\n        sep : str, default ','\n            String of length 1. Field delimiter for the output file.\n        na_rep : str, default ''\n            Missing data representation.\n        float_format : str, Callable, default None\n            Format string for floating point numbers. If a Callable is given, it takes\n            precedence over other numeric formatting parameters, like decimal.\n        columns : sequence, optional\n            Columns to write.\n        header : bool or list of str, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        index_label : str or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the object uses MultiIndex. If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R.\n        mode : {{'w', 'x', 'a'}}, default 'w'\n            Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control\n            the file opening. Typical values include:\n\n            - 'w', truncate the file first.\n            - 'x', exclusive creation, failing if the file already exists.\n            - 'a', append to the end of file if it exists.\n\n        encoding : str, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`\n            is a non-binary file object.\n        {compression_options}\n\n               May be a dict with key 'method' as compression mode\n               and other entries as additional compression options if\n               compression mode is 'zip'.\n\n               Passing compression options as keys in dict is\n               supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.\n        quoting : optional constant from csv module\n            Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric.\n        quotechar : str, default '\\\"'\n            String of length 1. Character used to quote fields.\n        lineterminator : str, optional\n            The newline character or character sequence to use in the output\n            file. Defaults to `os.linesep`, which depends on the OS in which\n            this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n            .. versionchanged:: 1.5.0\n\n                Previously was line_terminator, changed for consistency with\n                read_csv and the standard library 'csv' module.\n\n        chunksize : int or None\n            Rows to write at a time.\n        date_format : str, default None\n            Format string for datetime objects.\n        doublequote : bool, default True\n            Control quoting of `quotechar` inside a field.\n        escapechar : str, default None\n            String of length 1. Character used to escape `sep` and `quotechar`\n            when appropriate.\n        decimal : str, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list\n            of options.\n\n        {storage_options}\n\n        Returns\n        -------\n        None or str\n            If path_or_buf is None, returns the resulting csv format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        read_csv : Load a CSV file into a DataFrame.\n        to_excel : Write DataFrame to an Excel file.\n\n        Examples\n        --------\n        Create 'out.csv' containing 'df' without indices\n\n        >>> df = pd.DataFrame(\n        ...     [[\"Raphael\", \"red\", \"sai\"], [\"Donatello\", \"purple\", \"bo staff\"]],\n        ...     columns=[\"name\", \"mask\", \"weapon\"],\n        ... )\n        >>> df.to_csv(\"out.csv\", index=False)  # doctest: +SKIP\n\n        Create 'out.zip' containing 'out.csv'\n\n        >>> df.to_csv(index=False)\n        'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n        >>> compression_opts = dict(\n        ...     method=\"zip\", archive_name=\"out.csv\"\n        ... )  # doctest: +SKIP\n        >>> df.to_csv(\n        ...     \"out.zip\", index=False, compression=compression_opts\n        ... )  # doctest: +SKIP\n\n        To write a csv file to a new folder or nested folder you will first\n        need to create it using either Pathlib or os:\n\n        >>> from pathlib import Path  # doctest: +SKIP\n        >>> filepath = Path(\"folder/subfolder/out.csv\")  # doctest: +SKIP\n        >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP\n        >>> df.to_csv(filepath)  # doctest: +SKIP\n\n        >>> import os  # doctest: +SKIP\n        >>> os.makedirs(\"folder/subfolder\", exist_ok=True)  # doctest: +SKIP\n        >>> df.to_csv(\"folder/subfolder/out.csv\")  # doctest: +SKIP\n\n        Format floats to two decimal places:\n\n        >>> df.to_csv(\"out1.csv\", float_format=\"%.2f\")  # doctest: +SKIP\n\n        Format floats using scientific notation:\n\n        >>> df.to_csv(\"out2.csv\", float_format=\"{{:.2e}}\".format)  # doctest: +SKIP\n        \"\"\"\n        df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n        formatter = DataFrameFormatter(\n            frame=df,\n            header=header,\n            index=index,\n            na_rep=na_rep,\n            float_format=float_format,\n            decimal=decimal,\n        )\n\n        return DataFrameRenderer(formatter).to_csv(\n            path_or_buf,\n            lineterminator=lineterminator,\n            sep=sep,\n            encoding=encoding,\n            errors=errors,\n            compression=compression,\n            quoting=quoting,\n            columns=columns,\n            index_label=index_label,\n            mode=mode,\n            chunksize=chunksize,\n            quotechar=quotechar,\n            date_format=date_format,\n            doublequote=doublequote,\n            escapechar=escapechar,\n            storage_options=storage_options,\n        )\n\n    # ----------------------------------------------------------------------\n    # Indexing Methods\n\n    @final\n    def take(self, indices, axis: Axis = 0, **kwargs) -> Self:\n        \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            The axis on which to select elements. ``0`` means that we are\n            selecting rows, ``1`` means that we are selecting columns.\n            For `Series` this parameter is unused and defaults to 0.\n        **kwargs\n            For compatibility with :meth:`numpy.take`. Has no effect on the\n            output.\n\n        Returns\n        -------\n        same type as caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by labels.\n        DataFrame.iloc : Select a subset of a DataFrame by positions.\n        numpy.take : Take elements from an array along an axis.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         (\"falcon\", \"bird\", 389.0),\n        ...         (\"parrot\", \"bird\", 24.0),\n        ...         (\"lion\", \"mammal\", 80.5),\n        ...         (\"monkey\", \"mammal\", np.nan),\n        ...     ],\n        ...     columns=[\"name\", \"class\", \"max_speed\"],\n        ...     index=[0, 2, 3, 1],\n        ... )\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n        \"\"\"\n\n        nv.validate_take((), kwargs)\n\n        if isinstance(indices, slice):\n            raise TypeError(\n                f\"{type(self).__name__}.take requires a sequence of integers, \"\n                \"not slice.\"\n            )\n        indices = np.asarray(indices, dtype=np.intp)\n        if axis == 0 and indices.ndim == 1 and is_range_indexer(indices, len(self)):\n            return self.copy(deep=False)\n\n        new_data = self._mgr.take(\n            indices,\n            axis=self._get_block_manager_axis(axis),\n            verify=True,\n        )\n        return self._constructor_from_mgr(new_data, axes=new_data.axes).__finalize__(\n            self, method=\"take\"\n        )\n\n    @final\n    def xs(\n        self,\n        key: IndexLabel,\n        axis: Axis = 0,\n        level: IndexLabel | None = None,\n        drop_level: bool = True,\n    ) -> Self:\n        \"\"\"\n        Return cross-section from the Series/DataFrame.\n\n        This method takes a `key` argument to select data at a particular\n        level of a MultiIndex.\n\n        Parameters\n        ----------\n        key : label or tuple of label\n            Label contained in the index, or partially in a MultiIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to retrieve cross-section on.\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : bool, default True\n            If False, returns object with same levels as self.\n\n        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n        DataFrame.iloc : Purely integer-location based indexing\n            for selection by position.\n\n        Notes\n        -----\n        `xs` can not be used to set values.\n\n        MultiIndex Slicers is a generic way to get/set values on\n        any level or levels.\n        It is a superset of `xs` functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {\n        ...     \"num_legs\": [4, 4, 2, 2],\n        ...     \"num_wings\": [0, 0, 2, 2],\n        ...     \"class\": [\"mammal\", \"mammal\", \"mammal\", \"bird\"],\n        ...     \"animal\": [\"cat\", \"dog\", \"bat\", \"penguin\"],\n        ...     \"locomotion\": [\"walks\", \"walks\", \"flies\", \"walks\"],\n        ... }\n        >>> df = pd.DataFrame(data=d)\n        >>> df = df.set_index([\"class\", \"animal\", \"locomotion\"])\n        >>> df\n                                   num_legs  num_wings\n        class  animal  locomotion\n        mammal cat     walks              4          0\n               dog     walks              4          0\n               bat     flies              2          2\n        bird   penguin walks              2          2\n\n        Get values at specified index\n\n        >>> df.xs(\"mammal\")\n                           num_legs  num_wings\n        animal locomotion\n        cat    walks              4          0\n        dog    walks              4          0\n        bat    flies              2          2\n\n        Get values at several indexes\n\n        >>> df.xs((\"mammal\", \"dog\", \"walks\"))\n        num_legs     4\n        num_wings    0\n        Name: (mammal, dog, walks), dtype: int64\n\n        Get values at specified index and level\n\n        >>> df.xs(\"cat\", level=1)\n                           num_legs  num_wings\n        class  locomotion\n        mammal walks              4          0\n\n        Get values at several indexes and levels\n\n        >>> df.xs((\"bird\", \"walks\"), level=[0, \"locomotion\"])\n                 num_legs  num_wings\n        animal\n        penguin         2          2\n\n        Get values at specified column and axis\n\n        >>> df.xs(\"num_wings\", axis=1)\n        class   animal   locomotion\n        mammal  cat      walks         0\n                dog      walks         0\n                bat      flies         2\n        bird    penguin  walks         2\n        Name: num_wings, dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n\n        if isinstance(key, list):\n            raise TypeError(\"list keys are not supported in xs, pass a tuple instead\")\n\n        if level is not None:\n            if not isinstance(labels, MultiIndex):\n                raise TypeError(\"Index must be a MultiIndex\")\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n            # create the tuple of the indexer\n            _indexer = [slice(None)] * self.ndim\n            _indexer[axis] = loc\n            indexer = tuple(_indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            if drop_level:\n                return self[key]\n            index = self.columns\n        else:\n            index = self.index\n\n        if isinstance(index, MultiIndex):\n            loc, new_index = index._get_loc_level(key, level=0)\n            if not drop_level:\n                if lib.is_integer(loc):\n                    # Slice index must be an integer or None\n                    new_index = index[loc : loc + 1]\n                else:\n                    new_index = index[loc]\n        else:\n            loc = index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    (inds,) = loc.nonzero()\n                    return self.take(inds, axis=axis)\n                else:\n                    return self.take(loc, axis=axis)\n\n            if not is_scalar(loc):\n                new_index = index[loc]\n\n        if is_scalar(loc) and axis == 0:\n            # In this case loc should be an integer\n            if self.ndim == 1:\n                # if we encounter an array-like and we only have 1 dim\n                # that means that their are list/ndarrays inside the Series!\n                # so just return them (GH 6394)\n                return self._values[loc]\n\n            new_mgr = self._mgr.fast_xs(loc)\n\n            result = self._constructor_sliced_from_mgr(new_mgr, axes=new_mgr.axes)\n            result._name = self.index[loc]\n            result = result.__finalize__(self)\n        elif is_scalar(loc):\n            result = self.iloc[:, slice(loc, loc + 1)]\n        elif axis == 1:\n            result = self.iloc[:, loc]\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        return result\n\n    def __getitem__(self, item):\n        raise AbstractMethodError(self)\n\n    @final\n    def _getitem_slice(self, key: slice) -> Self:\n        \"\"\"\n        __getitem__ for the case where the key is a slice object.\n        \"\"\"\n        # _convert_slice_indexer to determine if this slice is positional\n        #  or label based, and if the latter, convert to positional\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        if isinstance(slobj, np.ndarray):\n            # reachable with DatetimeIndex\n            indexer = lib.maybe_indices_to_slice(slobj.astype(np.intp), len(self))\n            if isinstance(indexer, np.ndarray):\n                # GH#43223 If we can not convert, use take\n                return self.take(indexer, axis=0)\n            slobj = indexer\n        return self._slice(slobj)\n\n    def _slice(self, slobj: slice, axis: AxisInt = 0) -> Self:\n        \"\"\"\n        Construct a slice of this container.\n\n        Slicing with this method is *always* positional.\n        \"\"\"\n        assert isinstance(slobj, slice), type(slobj)\n        axis = self._get_block_manager_axis(axis)\n        new_mgr = self._mgr.get_slice(slobj, axis=axis)\n        result = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n        result = result.__finalize__(self)\n        return result\n\n    @final\n    def __delitem__(self, key) -> None:\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n            try:\n                # By using engine's __contains__ we effectively\n                # restrict to same-length tuples\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key,)\n            for col in self.columns:\n                if isinstance(col, tuple) and col[: len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            loc = self.axes[-1].get_loc(key)\n            self._mgr = self._mgr.idelete(loc)\n\n    # ----------------------------------------------------------------------\n    # Unsorted\n\n    @final\n    def _check_inplace_and_allows_duplicate_labels(self, inplace: bool) -> None:\n        if inplace and not self.flags.allows_duplicate_labels:\n            raise ValueError(\n                \"Cannot specify 'inplace=True' when \"\n                \"'self.flags.allows_duplicate_labels' is False.\"\n            )\n\n    @final\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (ex: DataFrame column).\n\n        Returns ``default`` value if not found.\n\n        Parameters\n        ----------\n        key : object\n            Key for which item should be returned.\n        default : object, default None\n            Default value to return if key is not found.\n\n        Returns\n        -------\n        same type as items contained in object\n            Item for given key or ``default`` value, if key is not found.\n\n        See Also\n        --------\n        DataFrame.get : Get item from object for given key (ex: DataFrame column).\n        Series.get : Get item from object for given key (ex: DataFrame column).\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         [24.3, 75.7, \"high\"],\n        ...         [31, 87.8, \"high\"],\n        ...         [22, 71.6, \"medium\"],\n        ...         [35, 95, \"medium\"],\n        ...     ],\n        ...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n        ...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n        ... )\n\n        >>> df\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df.get([\"temp_celsius\", \"windspeed\"])\n                    temp_celsius windspeed\n        2014-02-12          24.3      high\n        2014-02-13          31.0      high\n        2014-02-14          22.0    medium\n        2014-02-15          35.0    medium\n\n        >>> ser = df[\"windspeed\"]\n        >>> ser.get(\"2014-02-13\")\n        'high'\n\n        If the key isn't found, the default value will be used.\n\n        >>> df.get([\"temp_celsius\", \"temp_kelvin\"], default=\"default_value\")\n        'default_value'\n\n        >>> ser.get(\"2014-02-10\", \"[unknown]\")\n        '[unknown]'\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    @staticmethod\n    def _check_copy_deprecation(copy):\n        if copy is not lib.no_default:\n            warnings.warn(\n                \"The copy keyword is deprecated and will be removed in a future \"\n                \"version. Copy-on-Write is active in pandas since 3.0 which utilizes \"\n                \"a lazy copy mechanism that defers copies until necessary. Use \"\n                \".copy() to make an eager copy if necessary.\",\n                DeprecationWarning,\n                stacklevel=find_stack_level(),\n            )\n\n    # issue 58667\n    @deprecate_kwarg(\"method\", None)\n    @final\n    def reindex_like(\n        self,\n        other,\n        method: Literal[\"backfill\", \"bfill\", \"pad\", \"ffill\", \"nearest\"] | None = None,\n        copy: bool | lib.NoDefault = lib.no_default,\n        limit: int | None = None,\n        tolerance=None,\n    ) -> Self:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            .. deprecated:: 3.0.0\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default False\n            Return a new object, even if the passed indexes are the same.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations must\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame(\n        ...     [\n        ...         [24.3, 75.7, \"high\"],\n        ...         [31, 87.8, \"high\"],\n        ...         [22, 71.6, \"medium\"],\n        ...         [35, 95, \"medium\"],\n        ...     ],\n        ...     columns=[\"temp_celsius\", \"temp_fahrenheit\", \"windspeed\"],\n        ...     index=pd.date_range(start=\"2014-02-12\", end=\"2014-02-15\", freq=\"D\"),\n        ... )\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame(\n        ...     [[28, \"low\"], [30, \"low\"], [35.1, \"medium\"]],\n        ...     columns=[\"temp_celsius\", \"windspeed\"],\n        ...     index=pd.DatetimeIndex([\"2014-02-12\", \"2014-02-13\", \"2014-02-15\"]),\n        ... )\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel | ListLike = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel | ListLike = ...,\n        columns: IndexLabel | ListLike = ...,\n        level: Level | None = ...,\n        inplace: Literal[True],\n        errors: IgnoreRaise = ...,\n    ) -> None: ...\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel | ListLike = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel | ListLike = ...,\n        columns: IndexLabel | ListLike = ...,\n        level: Level | None = ...,\n        inplace: Literal[False] = ...,\n        errors: IgnoreRaise = ...,\n    ) -> Self: ...\n\n    @overload\n    def drop(\n        self,\n        labels: IndexLabel | ListLike = ...,\n        *,\n        axis: Axis = ...,\n        index: IndexLabel | ListLike = ...,\n        columns: IndexLabel | ListLike = ...,\n        level: Level | None = ...,\n        inplace: bool = ...,\n        errors: IgnoreRaise = ...,\n    ) -> Self | None: ...\n\n    def drop(\n        self,\n        labels: IndexLabel | ListLike = None,\n        *,\n        axis: Axis = 0,\n        index: IndexLabel | ListLike = None,\n        columns: IndexLabel | ListLike = None,\n        level: Level | None = None,\n        inplace: bool = False,\n        errors: IgnoreRaise = \"raise\",\n    ) -> Self | None:\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes = {\"index\": index}\n            if self.ndim == 2:\n                axes[\"columns\"] = columns\n        else:\n            raise ValueError(\n                \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n            )\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n            return None\n        else:\n            return obj\n\n    @final\n    def _drop_axis(\n        self,\n        labels,\n        axis,\n        level=None,\n        errors: IgnoreRaise = \"raise\",\n        only_slice: bool = False,\n    ) -> Self:\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n        only_slice : bool, default False\n            Whether indexing along columns should be view-only.\n\n        \"\"\"\n        axis_num = self._get_axis_number(axis)\n        axis = self._get_axis(axis)\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            indexer = axis.get_indexer(new_axis)\n\n        # Case for non-unique axis\n        else:\n            is_tuple_labels = is_nested_list_like(labels) or isinstance(labels, tuple)\n            labels = ensure_object(common.index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                mask = ~axis.get_level_values(level).isin(labels)\n\n                # GH 18561 MultiIndex.drop should raise if label is absent\n                if errors == \"raise\" and mask.all():\n                    raise KeyError(f\"{labels} not found in axis\")\n            elif (\n                isinstance(axis, MultiIndex)\n                and labels.dtype == \"object\"\n                and not is_tuple_labels\n            ):\n                # Set level to zero in case of MultiIndex and label is string,\n                #  because isin can't handle strings for MultiIndexes GH#36293\n                # In case of tuples we get dtype object but have to use isin GH#42771\n                mask = ~axis.get_level_values(0).isin(labels)\n            else:\n                mask = ~axis.isin(labels)\n                # Check if label doesn't exist along axis\n                labels_missing = (axis.get_indexer_for(labels) == -1).any()\n                if errors == \"raise\" and labels_missing:\n                    raise KeyError(f\"{labels} not found in axis\")\n\n            if isinstance(mask.dtype, ExtensionDtype):\n                # GH#45860\n                mask = mask.to_numpy(dtype=bool)\n\n            indexer = mask.nonzero()[0]\n            new_axis = axis.take(indexer)\n\n        bm_axis = self.ndim - axis_num - 1\n        new_mgr = self._mgr.reindex_indexer(\n            new_axis,\n            indexer,\n            axis=bm_axis,\n            allow_dups=True,\n            only_slice=only_slice,\n        )\n        result = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n        if self.ndim == 1:\n            result._name = self.name\n\n        return result.__finalize__(self)\n\n    @final\n    def _update_inplace(self, result) -> None:\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        result : same type as self\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n        self._mgr = result._mgr\n\n    @final\n    def add_prefix(self, prefix: str, axis: Axis | None = None) -> Self:\n        \"\"\"\n        Prefix labels with string `prefix`.\n\n        For Series, the row labels are prefixed.\n        For DataFrame, the column labels are prefixed.\n\n        Parameters\n        ----------\n        prefix : str\n            The string to add before each label.\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            Axis to add prefix on\n\n            .. versionadded:: 2.0.0\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_suffix: Suffix row labels with string `suffix`.\n        DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_prefix(\"item_\")\n        item_0    1\n        item_1    2\n        item_2    3\n        item_3    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_prefix(\"col_\")\n             col_A  col_B\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        f = lambda x: f\"{prefix}{x}\"\n\n        axis_name = self._info_axis_name\n        if axis is not None:\n            axis_name = self._get_axis_name(axis)\n\n        mapper = {axis_name: f}\n\n        # error: Keywords must be strings\n        # error: No overload variant of \"_rename\" of \"NDFrame\" matches\n        # argument type \"dict[Literal['index', 'columns'], Callable[[Any], str]]\"\n        return self._rename(**mapper)  # type: ignore[call-overload, misc]\n\n    @final\n    def add_suffix(self, suffix: str, axis: Axis | None = None) -> Self:\n        \"\"\"\n        Suffix labels with string `suffix`.\n\n        For Series, the row labels are suffixed.\n        For DataFrame, the column labels are suffixed.\n\n        Parameters\n        ----------\n        suffix : str\n            The string to add after each label.\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            Axis to add suffix on\n\n            .. versionadded:: 2.0.0\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_prefix: Prefix row labels with string `prefix`.\n        DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_suffix(\"_item\")\n        0_item    1\n        1_item    2\n        2_item    3\n        3_item    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3, 4], \"B\": [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_suffix(\"_col\")\n             A_col  B_col\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        f = lambda x: f\"{x}{suffix}\"\n\n        axis_name = self._info_axis_name\n        if axis is not None:\n            axis_name = self._get_axis_name(axis)\n\n        mapper = {axis_name: f}\n        # error: Keywords must be strings\n        # error: No overload variant of \"_rename\" of \"NDFrame\" matches argument\n        # type \"dict[Literal['index', 'columns'], Callable[[Any], str]]\"\n        return self._rename(**mapper)  # type: ignore[call-overload, misc]\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[False] = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> Self: ...\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[True],\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> None: ...\n\n    @overload\n    def sort_values(\n        self,\n        *,\n        axis: Axis = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: bool = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        ignore_index: bool = ...,\n        key: ValueKeyFunc = ...,\n    ) -> Self | None: ...\n\n    def sort_values(\n        self,\n        *,\n        axis: Axis = 0,\n        ascending: bool | Sequence[bool] = True,\n        inplace: bool = False,\n        kind: SortKind = \"quicksort\",\n        na_position: NaPosition = \"last\",\n        ignore_index: bool = False,\n        key: ValueKeyFunc | None = None,\n    ) -> Self | None:\n        \"\"\"\n        Sort by the values along either axis.\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n             Axis to be sorted.\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'\n             Choice of sorting algorithm. See also :func:`numpy.sort` for more\n             information. `mergesort` and `stable` are the only stable algorithms. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n             end.\n        ignore_index : bool, default False\n             If True, the resulting axis will be labeled 0, 1, …, n - 1.\n        key : callable, optional\n            Apply the key function to the values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect a\n            ``Series`` and return a Series with the same shape as the input.\n            It will be applied to each column in `by` independently. The values in the\n            returned Series will be used as the keys for sorting.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with sorted values or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.sort_index : Sort a DataFrame by the index.\n        Series.sort_values : Similar method for a Series.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"col1\": [\"A\", \"A\", \"B\", np.nan, \"D\", \"C\"],\n        ...         \"col2\": [2, 1, 9, 8, 7, 4],\n        ...         \"col3\": [0, 1, 9, 4, 2, 3],\n        ...         \"col4\": [\"a\", \"B\", \"c\", \"D\", \"e\", \"F\"],\n        ...     }\n        ... )\n        >>> df\n          col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n\n        Sort by col1\n\n        >>> df.sort_values(by=[\"col1\"])\n          col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        5    C     4     3    F\n        4    D     7     2    e\n        3  NaN     8     4    D\n\n        Sort by multiple columns\n\n        >>> df.sort_values(by=[\"col1\", \"col2\"])\n          col1  col2  col3 col4\n        1    A     1     1    B\n        0    A     2     0    a\n        2    B     9     9    c\n        5    C     4     3    F\n        4    D     7     2    e\n        3  NaN     8     4    D\n\n        Sort Descending\n\n        >>> df.sort_values(by=\"col1\", ascending=False)\n          col1  col2  col3 col4\n        4    D     7     2    e\n        5    C     4     3    F\n        2    B     9     9    c\n        0    A     2     0    a\n        1    A     1     1    B\n        3  NaN     8     4    D\n\n        Putting NAs first\n\n        >>> df.sort_values(by=\"col1\", ascending=False, na_position=\"first\")\n          col1  col2  col3 col4\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n        2    B     9     9    c\n        0    A     2     0    a\n        1    A     1     1    B\n\n        Sorting with a key function\n\n        >>> df.sort_values(by=\"col4\", key=lambda col: col.str.lower())\n           col1  col2  col3 col4\n        0    A     2     0    a\n        1    A     1     1    B\n        2    B     9     9    c\n        3  NaN     8     4    D\n        4    D     7     2    e\n        5    C     4     3    F\n\n        Natural sort with the key argument,\n        using the `natsort <https://github.com/SethMMorton/natsort>` package.\n\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"time\": [\"0hr\", \"128hr\", \"72hr\", \"48hr\", \"96hr\"],\n        ...         \"value\": [10, 20, 30, 40, 50],\n        ...     }\n        ... )\n        >>> df\n            time  value\n        0    0hr     10\n        1  128hr     20\n        2   72hr     30\n        3   48hr     40\n        4   96hr     50\n        >>> from natsort import index_natsorted\n        >>> df.sort_values(\n        ...     by=\"time\", key=lambda x: np.argsort(index_natsorted(df[\"time\"]))\n        ... )\n            time  value\n        0    0hr     10\n        3   48hr     40\n        2   72hr     30\n        4   96hr     50\n        1  128hr     20\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[True],\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> None: ...\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: Literal[False] = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> Self: ...\n\n    @overload\n    def sort_index(\n        self,\n        *,\n        axis: Axis = ...,\n        level: IndexLabel = ...,\n        ascending: bool | Sequence[bool] = ...,\n        inplace: bool = ...,\n        kind: SortKind = ...,\n        na_position: NaPosition = ...,\n        sort_remaining: bool = ...,\n        ignore_index: bool = ...,\n        key: IndexKeyFunc = ...,\n    ) -> Self | None: ...\n\n    def sort_index(\n        self,\n        *,\n        axis: Axis = 0,\n        level: IndexLabel | None = None,\n        ascending: bool | Sequence[bool] = True,\n        inplace: bool = False,\n        kind: SortKind = \"quicksort\",\n        na_position: NaPosition = \"last\",\n        sort_remaining: bool = True,\n        ignore_index: bool = False,\n        key: IndexKeyFunc | None = None,\n    ) -> Self | None:\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        axis = self._get_axis_number(axis)\n        ascending = validate_ascending(ascending)\n\n        target = self._get_axis(axis)\n\n        indexer = get_indexer_indexer(\n            target, level, ascending, kind, na_position, sort_remaining, key\n        )\n\n        if indexer is None:\n            if inplace:\n                result = self\n            else:\n                result = self.copy(deep=False)\n\n            if ignore_index:\n                if axis == 1:\n                    result.columns = default_index(len(self.columns))\n                else:\n                    result.index = default_index(len(self))\n            if inplace:\n                return None\n            else:\n                return result\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._mgr.take(indexer, axis=baxis, verify=False)\n\n        # reconstruct axis if needed\n        if not ignore_index:\n            new_axis = new_data.axes[baxis]._sort_levels_monotonic()\n        else:\n            new_axis = default_index(len(indexer))\n        new_data.set_axis(baxis, new_axis)\n\n        result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"sort_index\")\n\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        optional_reindex=\"\",\n    )\n    def reindex(\n        self,\n        labels=None,\n        *,\n        index=None,\n        columns=None,\n        axis: Axis | None = None,\n        method: ReindexMethod | None = None,\n        copy: bool | lib.NoDefault = lib.no_default,\n        level: Level | None = None,\n        fill_value: Scalar | None = np.nan,\n        limit: int | None = None,\n        tolerance=None,\n    ) -> Self:\n        \"\"\"\n        Conform {klass} to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        {optional_reindex}\n        method : {{None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default False\n            Return a new object, even if the passed indexes are the same.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.nan\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n        Returns\n        -------\n        {klass}\n            {klass} with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={{'index', 'columns'}}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a DataFrame with some fictional data.\n\n        >>> index = [\"Firefox\", \"Chrome\", \"Safari\", \"IE10\", \"Konqueror\"]\n        >>> columns = [\"http_status\", \"response_time\"]\n        >>> df = pd.DataFrame(\n        ...     [[200, 0.04], [200, 0.02], [404, 0.07], [404, 0.08], [301, 1.0]],\n        ...     columns=columns,\n        ...     index=index,\n        ... )\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the DataFrame. By default\n        values in the new index that do not have corresponding\n        records in the DataFrame are assigned ``NaN``.\n\n        >>> new_index = [\"Safari\", \"Iceweasel\", \"Comodo Dragon\", \"IE10\", \"Chrome\"]\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value=\"missing\")\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=[\"http_status\", \"user_agent\"])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex([\"http_status\", \"user_agent\"], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a DataFrame with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range(\"1/1/2010\", periods=6, freq=\"D\")\n        >>> df2 = pd.DataFrame(\n        ...     {{\"prices\": [100, 101, np.nan, 100, 89, 88]}}, index=date_index\n        ... )\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the DataFrame to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range(\"12/29/2009\", periods=10, freq=\"D\")\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method=\"bfill\")\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original DataFrame\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at DataFrame values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original DataFrame, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n        self._check_copy_deprecation(copy)\n\n        if index is not None and columns is not None and labels is not None:\n            raise TypeError(\"Cannot specify all of 'labels', 'index', 'columns'.\")\n        elif index is not None or columns is not None:\n            if axis is not None:\n                raise TypeError(\n                    \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n                )\n            if labels is not None:\n                if index is not None:\n                    columns = labels\n                else:\n                    index = labels\n        else:\n            if axis and self._get_axis_number(axis) == 1:\n                columns = labels\n            else:\n                index = labels\n        axes: dict[Literal[\"index\", \"columns\"], Any] = {\n            \"index\": index,\n            \"columns\": columns,\n        }\n        method = clean_reindex_fill_method(method)\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis_name).identical(ax)\n            for axis_name, ax in axes.items()\n            if ax is not None\n        ):\n            return self.copy(deep=False)\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value\n        ).__finalize__(self, method=\"reindex\")\n\n    @final\n    def _reindex_axes(\n        self,\n        axes,\n        level: Level | None,\n        limit: int | None,\n        tolerance,\n        method,\n        fill_value: Scalar | None,\n    ) -> Self:\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                allow_dups=False,\n            )\n\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level: Level | None) -> bool:\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (common.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            # reindex_multi calls self.values, so we only want to go\n            #  down that path when doing so is cheap.\n            and self._can_fast_transpose\n        )\n\n    def _reindex_multi(self, axes, fill_value):\n        raise AbstractMethodError(self)\n\n    @final\n    def _reindex_with_indexers(\n        self,\n        reindexers,\n        fill_value=None,\n        allow_dups: bool = False,\n    ) -> Self:\n        \"\"\"allow_dups indicates an internal call here\"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._mgr\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_platform_int(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects (see _reindex_multi)\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n            )\n\n        if new_data is self._mgr:\n            new_data = new_data.copy(deep=False)\n\n        return self._constructor_from_mgr(new_data, axes=new_data.axes).__finalize__(\n            self\n        )\n\n    def filter(\n        self,\n        items=None,\n        like: str | None = None,\n        regex: str | None = None,\n        axis: Axis | None = None,\n    ) -> Self:\n        \"\"\"\n        Subset the DataFrame or Series according to the specified index labels.\n\n        For DataFrame, filter rows or columns depending on ``axis`` argument.\n        Note that this routine does not filter based on content.\n        The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            Keep labels from axis which are in items.\n        like : str\n            Keep labels from axis for which \"like in label == True\".\n        regex : str (regular expression)\n            Keep labels from axis for which re.search(regex, label) == True.\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            The axis to filter on, expressed either as an index (int)\n            or axis name (str). By default this is the info axis, 'columns' for\n            ``DataFrame``. For ``Series`` this parameter is unused and defaults to\n            ``None``.\n\n        Returns\n        -------\n        Same type as caller\n            The filtered subset of the DataFrame or Series.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     np.array(([1, 2, 3], [4, 5, 6])),\n        ...     index=[\"mouse\", \"rabbit\"],\n        ...     columns=[\"one\", \"two\", \"three\"],\n        ... )\n        >>> df\n                one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=[\"one\", \"three\"])\n                 one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex=\"e$\", axis=1)\n                 one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like=\"bbi\", axis=0)\n                 one  two  three\n        rabbit    4    5      6\n        \"\"\"\n        nkw = common.count_not_none(items, like, regex)\n        if nkw > 1:\n            raise TypeError(\n                \"Keyword arguments `items`, `like`, or `regex` are mutually exclusive\"\n            )\n\n        if axis is None:\n            axis = self._info_axis_name\n        labels = self._get_axis(axis)\n\n        if items is not None:\n            name = self._get_axis_name(axis)\n            items = Index(items).intersection(labels)\n            if len(items) == 0:\n                # Keep the dtype of labels when we are empty\n                items = items.astype(labels.dtype)\n            # error: Keywords must be strings\n            return self.reindex(**{name: items})  # type: ignore[misc]\n        elif like:\n\n            def f(x) -> bool:\n                assert like is not None  # needed for mypy\n                return like in ensure_str(x)\n\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        elif regex:\n\n            def f(x) -> bool:\n                return matcher.search(ensure_str(x)) is not None\n\n            matcher = re.compile(regex)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        else:\n            raise TypeError(\"Must pass either `items`, `like`, or `regex`\")\n\n    @final\n    def head(self, n: int = 5) -> Self:\n        \"\"\"\n        Return the first `n` rows.\n\n        This function exhibits the same behavior as ``df[:n]``, returning the\n        first ``n`` rows based on position. It is useful for quickly checking\n        if your object has the right type of data in it.\n\n        When ``n`` is positive, it returns the first ``n`` rows. For ``n`` equal to 0,\n        it returns an empty object. When ``n`` is negative, it returns\n        all rows except the last ``|n|`` rows, mirroring the behavior of ``df[:n]``.\n\n        If ``n`` is larger than the number of rows, this function returns all rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        same type as caller\n            The first `n` rows of the caller object.\n\n        See Also\n        --------\n        DataFrame.tail: Returns the last `n` rows.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"animal\": [\n        ...             \"alligator\",\n        ...             \"bee\",\n        ...             \"falcon\",\n        ...             \"lion\",\n        ...             \"monkey\",\n        ...             \"parrot\",\n        ...             \"shark\",\n        ...             \"whale\",\n        ...             \"zebra\",\n        ...         ]\n        ...     }\n        ... )\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first `n` lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n\n        For negative values of `n`\n\n        >>> df.head(-3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        \"\"\"\n        return self.iloc[:n].copy()\n\n    @final\n    def tail(self, n: int = 5) -> Self:\n        \"\"\"\n        Return the last `n` rows.\n\n        This function returns last `n` rows from the object based on\n        position. It is useful for quickly verifying data, for example,\n        after sorting or appending rows.\n\n        For negative values of `n`, this function returns all rows except\n        the first `|n|` rows, equivalent to ``df[|n|:]``.\n\n        If ``n`` is larger than the number of rows, this function returns all rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        type of caller\n            The last `n` rows of the caller object.\n\n        See Also\n        --------\n        DataFrame.head : The first `n` rows of the caller object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"animal\": [\n        ...             \"alligator\",\n        ...             \"bee\",\n        ...             \"falcon\",\n        ...             \"lion\",\n        ...             \"monkey\",\n        ...             \"parrot\",\n        ...             \"shark\",\n        ...             \"whale\",\n        ...             \"zebra\",\n        ...         ]\n        ...     }\n        ... )\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the last 5 lines\n\n        >>> df.tail()\n           animal\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n\n        Viewing the last `n` lines (three in this case)\n\n        >>> df.tail(3)\n          animal\n        6  shark\n        7  whale\n        8  zebra\n\n        For negative values of `n`\n\n        >>> df.tail(-3)\n           animal\n        3    lion\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n        \"\"\"\n        if n == 0:\n            return self.iloc[0:0].copy()\n        return self.iloc[-n:].copy()\n\n    @final\n    def sample(\n        self,\n        n: int | None = None,\n        frac: float | None = None,\n        replace: bool = False,\n        weights=None,\n        random_state: RandomState | None = None,\n        axis: Axis | None = None,\n        ignore_index: bool = False,\n    ) -> Self:\n        \"\"\"\n        Return a random sample of items from an axis of object.\n\n        You can use `random_state` for reproducibility.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : bool, default False\n            Allow or disallow sampling of the same row more than once.\n        weights : str or ndarray-like, optional\n            Default ``None`` results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            Infinite values not allowed.\n        random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional\n            If int, array-like, or BitGenerator, seed for random number generator.\n            If np.random.RandomState or np.random.Generator, use as given.\n            Default ``None`` results in sampling with the current state of np.random.\n\n            .. versionchanged:: 1.4.0\n\n                np.random.Generator objects now accepted\n\n        axis : {0 or 'index', 1 or 'columns', None}, default None\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type. For `Series` this parameter is unused and defaults to `None`.\n        ignore_index : bool, default False\n            If True, the resulting index will be labeled 0, 1, …, n - 1.\n\n            .. versionadded:: 1.3.0\n\n        Returns\n        -------\n        Series or DataFrame\n            A new object of same type as caller containing `n` items randomly\n            sampled from the caller object.\n\n        See Also\n        --------\n        DataFrameGroupBy.sample: Generates random samples from each group of a\n            DataFrame object.\n        SeriesGroupBy.sample: Generates random samples from each group of a\n            Series object.\n        numpy.random.choice: Generates a random sample from a given 1-D numpy\n            array.\n\n        Notes\n        -----\n        If `frac` > 1, `replacement` should be set to `True`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"num_legs\": [2, 4, 8, 0],\n        ...         \"num_wings\": [2, 0, 0, 0],\n        ...         \"num_specimen_seen\": [10, 2, 1, 8],\n        ...     },\n        ...     index=[\"falcon\", \"dog\", \"spider\", \"fish\"],\n        ... )\n        >>> df\n                num_legs  num_wings  num_specimen_seen\n        falcon         2          2                 10\n        dog            4          0                  2\n        spider         8          0                  1\n        fish           0          0                  8\n\n        Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n        Note that we use `random_state` to ensure the reproducibility of\n        the examples.\n\n        >>> df[\"num_legs\"].sample(n=3, random_state=1)\n        fish      0\n        spider    8\n        falcon    2\n        Name: num_legs, dtype: int64\n\n        A random 50% sample of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.5, replace=True, random_state=1)\n              num_legs  num_wings  num_specimen_seen\n        dog          4          0                  2\n        fish         0          0                  8\n\n        An upsample sample of the ``DataFrame`` with replacement:\n        Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n        >>> df.sample(frac=2, replace=True, random_state=1)\n                num_legs  num_wings  num_specimen_seen\n        dog            4          0                  2\n        fish           0          0                  8\n        falcon         2          2                 10\n        falcon         2          2                 10\n        fish           0          0                  8\n        dog            4          0                  2\n        fish           0          0                  8\n        dog            4          0                  2\n\n        Using a DataFrame column as weights. Rows with larger value in the\n        `num_specimen_seen` column are more likely to be sampled.\n\n        >>> df.sample(n=2, weights=\"num_specimen_seen\", random_state=1)\n                num_legs  num_wings  num_specimen_seen\n        falcon         2          2                 10\n        fish           0          0                  8\n        \"\"\"  # noqa: E501\n        if axis is None:\n            axis = 0\n\n        axis = self._get_axis_number(axis)\n        obj_len = self.shape[axis]\n\n        # Process random_state argument\n        rs = common.random_state(random_state)\n\n        size = sample.process_sampling_size(n, frac, replace)\n        if size is None:\n            assert frac is not None\n            size = round(frac * obj_len)\n\n        if weights is not None:\n            weights = sample.preprocess_weights(self, weights, axis)\n\n        sampled_indices = sample.sample(obj_len, size, replace, weights, rs)\n        result = self.take(sampled_indices, axis=axis)\n\n        if ignore_index:\n            result.index = default_index(len(result))\n\n        return result\n\n    @overload\n    def pipe(\n        self,\n        func: Callable[Concatenate[Self, P], T],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> T: ...\n\n    @overload\n    def pipe(\n        self,\n        func: tuple[Callable[..., T], str],\n        *args: Any,\n        **kwargs: Any,\n    ) -> T: ...\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def pipe(\n        self,\n        func: Callable[Concatenate[Self, P], T] | tuple[Callable[..., T], str],\n        *args: Any,\n        **kwargs: Any,\n    ) -> T:\n        r\"\"\"\n        Apply chainable functions that expect Series or DataFrames.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to the {klass}.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the {klass}.\n        *args : iterable, optional\n            Positional arguments passed into ``func``.\n        **kwargs : mapping, optional\n            A dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        The return type of ``func``.\n            The result of applying ``func`` to the Series or DataFrame.\n\n        See Also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame.\n        DataFrame.map : Apply a function elementwise on a whole DataFrame.\n        Series.map : Apply a mapping correspondence on a\n            :class:`~pandas.Series`.\n\n        Notes\n        -----\n        Use ``.pipe`` when chaining together functions that expect\n        Series, DataFrames or GroupBy objects.\n\n        Examples\n        --------\n        Constructing an income DataFrame from a dictionary.\n\n        >>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]\n        >>> df = pd.DataFrame(data, columns=[\"Salary\", \"Others\"])\n        >>> df\n           Salary  Others\n        0    8000  1000.0\n        1    9500     NaN\n        2    5000  2000.0\n\n        Functions that perform tax reductions on an income DataFrame.\n\n        >>> def subtract_federal_tax(df):\n        ...     return df * 0.9\n        >>> def subtract_state_tax(df, rate):\n        ...     return df * (1 - rate)\n        >>> def subtract_national_insurance(df, rate, rate_increase):\n        ...     new_rate = rate + rate_increase\n        ...     return df * (1 - new_rate)\n\n        Instead of writing\n\n        >>> subtract_national_insurance(\n        ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),\n        ...     rate=0.05,\n        ...     rate_increase=0.02,\n        ... )  # doctest: +SKIP\n\n        You can write\n\n        >>> (\n        ...     df.pipe(subtract_federal_tax)\n        ...     .pipe(subtract_state_tax, rate=0.12)\n        ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n        ... )\n            Salary   Others\n        0  5892.48   736.56\n        1  6997.32      NaN\n        2  3682.80  1473.12\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``national_insurance`` takes its data as ``df``\n        in the second argument:\n\n        >>> def subtract_national_insurance(rate, df, rate_increase):\n        ...     new_rate = rate + rate_increase\n        ...     return df * (1 - new_rate)\n        >>> (\n        ...     df.pipe(subtract_federal_tax)\n        ...     .pipe(subtract_state_tax, rate=0.12)\n        ...     .pipe(\n        ...         (subtract_national_insurance, \"df\"), rate=0.05, rate_increase=0.02\n        ...     )\n        ... )\n            Salary   Others\n        0  5892.48   736.56\n        1  6997.32      NaN\n        2  3682.80  1473.12\n        \"\"\"\n        return common.pipe(self.copy(deep=False), func, *args, **kwargs)\n\n    # ----------------------------------------------------------------------\n    # Attribute access\n\n    @final\n    def __finalize__(self, other, method: str | None = None, **kwargs) -> Self:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : str, optional\n            A passed method name providing context on where ``__finalize__``\n            was called.\n\n            .. warning::\n\n               The value passed as `method` are not currently considered\n               stable across pandas releases.\n        \"\"\"\n        if isinstance(other, NDFrame):\n            if other.attrs:\n                # We want attrs propagation to have minimal performance\n                # impact if attrs are not used; i.e. attrs is an empty dict.\n                # One could make the deepcopy unconditionally, but a deepcopy\n                # of an empty dict is 50x more expensive than the empty check.\n                self.attrs = deepcopy(other.attrs)\n\n            self.flags.allows_duplicate_labels = other.flags.allows_duplicate_labels\n            # For subclasses using _metadata.\n            for name in set(self._metadata) & set(other._metadata):\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n\n        if method == \"concat\":\n            objs = other.objs\n            # propagate attrs only if all concat arguments have the same attrs\n            if all(bool(obj.attrs) for obj in objs):\n                # all concatenate arguments have non-empty attrs\n                attrs = objs[0].attrs\n                have_same_attrs = all(obj.attrs == attrs for obj in objs[1:])\n                if have_same_attrs:\n                    self.attrs = deepcopy(attrs)\n\n            allows_duplicate_labels = all(x.flags.allows_duplicate_labels for x in objs)\n            self.flags.allows_duplicate_labels = allows_duplicate_labels\n\n        return self\n\n    @final\n    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n        if (\n            name not in self._internal_names_set\n            and name not in self._metadata\n            and name not in self._accessors\n            and self._info_axis._can_hold_identifiers_and_holds_name(name)\n        ):\n            return self[name]\n        return object.__getattribute__(self, name)\n\n    @final\n    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=find_stack_level(),\n                    )\n                object.__setattr__(self, name, value)\n\n    @final\n    def _dir_additions(self) -> set[str]:\n        \"\"\"\n        add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, its first level values are used.\n        \"\"\"\n        additions = super()._dir_additions()\n        if self._info_axis._can_hold_strings:\n            additions.update(self._info_axis._dir_additions_for_owner)\n        return additions\n\n    # ----------------------------------------------------------------------\n    # Consolidation of internals\n\n    @final\n    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        self._mgr = self._mgr.consolidate()\n\n    @final\n    def _consolidate(self):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        cons_data = self._mgr.consolidate()\n        return self._constructor_from_mgr(cons_data, axes=cons_data.axes).__finalize__(\n            self\n        )\n\n    @final\n    @property\n    def _is_mixed_type(self) -> bool:\n        if self._mgr.is_single_block:\n            # Includes all Series cases\n            return False\n\n        if self._mgr.any_extension_types:\n            # Even if they have the same dtype, we can't consolidate them,\n            #  so we pretend this is \"mixed'\"\n            return True\n\n        return self.dtypes.nunique() > 1\n\n    @final\n    def _get_numeric_data(self) -> Self:\n        new_mgr = self._mgr.get_numeric_data()\n        return self._constructor_from_mgr(new_mgr, axes=new_mgr.axes).__finalize__(self)\n\n    @final\n    def _get_bool_data(self):\n        new_mgr = self._mgr.get_bool_data()\n        return self._constructor_from_mgr(new_mgr, axes=new_mgr.axes).__finalize__(self)\n\n    # ----------------------------------------------------------------------\n    # Internal Interface Methods\n\n    @property\n    def values(self):\n        raise AbstractMethodError(self)\n\n    @property\n    def _values(self) -> ArrayLike:\n        \"\"\"internal implementation\"\"\"\n        raise AbstractMethodError(self)\n\n    @property\n    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        See Also\n        --------\n        Series.dtypes : Return the dtype object of the underlying data.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"float\": [1.0],\n        ...         \"int\": [1],\n        ...         \"datetime\": [pd.Timestamp(\"20180310\")],\n        ...         \"string\": [\"foo\"],\n        ...     }\n        ... )\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[s]\n        string              object\n        dtype: object\n        \"\"\"\n        data = self._mgr.get_dtypes()\n        return self._constructor_sliced(data, index=self._info_axis, dtype=np.object_)\n\n    @final\n    def astype(\n        self,\n        dtype,\n        copy: bool | lib.NoDefault = lib.no_default,\n        errors: IgnoreRaise = \"raise\",\n    ) -> Self:\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        This method allows the conversion of the data types of pandas objects,\n        including DataFrames and Series, to the specified dtype. It supports casting\n        entire objects to a single data type or applying different data types to\n        individual columns using a mapping.\n\n        Parameters\n        ----------\n        dtype : str, data type, Series or Mapping of column name -> data type\n            Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to\n            cast entire pandas object to the same type. Alternatively, use a\n            mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is\n            a numpy.dtype or Python type to cast one or more of the DataFrame's\n            columns to column-specific types.\n        copy : bool, default False\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        same type as caller\n            The pandas object casted to the specified ``dtype``.\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Notes\n        -----\n        .. versionchanged:: 2.0.0\n\n            Using ``astype`` to convert from timezone-naive dtype to\n            timezone-aware dtype will raise an exception.\n            Use :meth:`Series.dt.tz_localize` instead.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {\"col1\": [1, 2], \"col2\": [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype(\"int32\").dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({\"col1\": \"int32\"}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype=\"int32\")\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype(\"int64\")\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype(\"category\")\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int32): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> from pandas.api.types import CategoricalDtype\n        >>> cat_dtype = CategoricalDtype(categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Create a series of dates:\n\n        >>> ser_date = pd.Series(pd.date_range(\"20200101\", periods=3))\n        >>> ser_date\n        0   2020-01-01\n        1   2020-01-02\n        2   2020-01-03\n        dtype: datetime64[ns]\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, errors=errors)\n\n            # GH#44417 cast to Series so we can use .iat below, which will be\n            #  robust in case we\n            from pandas import Series\n\n            dtype_ser = Series(dtype, dtype=object)\n\n            for col_name in dtype_ser.index:\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument. \"\n                        f\"'{col_name}' not found in columns.\"\n                    )\n\n            dtype_ser = dtype_ser.reindex(self.columns, fill_value=None)\n\n            results = []\n            for i, (col_name, col) in enumerate(self.items()):\n                cdt = dtype_ser.iat[i]\n                if isna(cdt):\n                    res_col = col.copy(deep=False)\n                else:\n                    try:\n                        res_col = col.astype(dtype=cdt, errors=errors)\n                    except ValueError as ex:\n                        ex.args = (\n                            f\"{ex}: Error while type casting for column '{col_name}'\",\n                        )\n                        raise\n                results.append(res_col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # TODO(EA2D): special case not needed with 2D EAs\n            dtype = pandas_dtype(dtype)\n            if isinstance(dtype, ExtensionDtype) and all(\n                block.values.dtype == dtype for block in self._mgr.blocks\n            ):\n                return self.copy(deep=False)\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: self.items handles duplicate column names\n            results = [ser.astype(dtype, errors=errors) for _, ser in self.items()]\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._mgr.astype(dtype=dtype, errors=errors)\n            res = self._constructor_from_mgr(new_data, axes=new_data.axes)\n            return res.__finalize__(self, method=\"astype\")\n\n        # GH 33113: handle empty frame or series\n        if not results:\n            return self.copy(deep=False)\n\n        # GH 19920: retain column metadata after concat\n        result = concat(results, axis=1)\n        # GH#40810 retain subclass\n        # error: Incompatible types in assignment\n        # (expression has type \"Self\", variable has type \"DataFrame\")\n        result = self._constructor(result)  # type: ignore[assignment]\n        result.columns = self.columns\n        result = result.__finalize__(self, method=\"astype\")\n        # https://github.com/python/mypy/issues/8354\n        return cast(Self, result)\n\n    @final\n    def copy(self, deep: bool = True) -> Self:\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        .. note::\n            The ``deep=False`` behaviour as described above will change\n            in pandas 3.0. `Copy-on-Write\n            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n            will be enabled by default, which means that the \"shallow\" copy\n            is that is returned with ``deep=False`` will still avoid making\n            an eager copy, but changes to the data of the original will *no*\n            longer be reflected in the shallow copy (or vice versa). Instead,\n            it makes use of a lazy (deferred) copy mechanism that will copy\n            the data only when any changes to the original or shallow copy is\n            made.\n\n            You can already get the future behavior and improvements through\n            enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object type matches caller.\n\n        See Also\n        --------\n        copy.copy : Return a shallow copy of an object.\n        copy.deepcopy : Return a deep copy of an object.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Since pandas is not thread safe, see the\n        :ref:`gotchas <gotchas.thread-safety>` when copying in a threading\n        environment.\n\n        Copy-on-Write protects shallow copies against accidental modifications.\n        This means that any changes to the copied data would make a new copy\n        of the data upon write (and vice versa). Changes made to either the\n        original or copied variable would not be reflected in the counterpart.\n        See :ref:`Copy_on_Write <copy_on_write>` for more information.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares index with original, the data is a\n        view of the original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values\n        False\n        >>> s.index is shallow.index\n        False\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        The shallow copy is protected against updating the original object\n        as well. Thus, updates will only reflect in one of both objects.\n\n        >>> s.iloc[0] = 3\n        >>> shallow.iloc[1] = 4\n        >>> s\n        a    3\n        b    2\n        dtype: int64\n        >>> shallow\n        a    1\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._mgr.copy(deep=deep)\n        return self._constructor_from_mgr(data, axes=data.axes).__finalize__(\n            self, method=\"copy\"\n        )\n\n    @final\n    def __copy__(self, deep: bool = True) -> Self:\n        return self.copy(deep=deep)\n\n    @final\n    def __deepcopy__(self, memo=None) -> Self:\n        \"\"\"\n        Parameters\n        ----------\n        memo, default None\n            Standard signature. Unused\n        \"\"\"\n        return self.copy(deep=True)\n\n    @final\n    def infer_objects(self, copy: bool | lib.NoDefault = lib.no_default) -> Self:\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            Whether to make a copy for non-object or non-inferable columns\n            or Series.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n\n        Returns\n        -------\n        same type as input object\n            Returns an object of the same type as the input object.\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to numeric type.\n        convert_dtypes : Convert argument to best possible dtype.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        new_mgr = self._mgr.convert()\n        res = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n        return res.__finalize__(self, method=\"infer_objects\")\n\n    @final\n    def convert_dtypes(\n        self,\n        infer_objects: bool = True,\n        convert_string: bool = True,\n        convert_integer: bool = True,\n        convert_boolean: bool = True,\n        convert_floating: bool = True,\n        dtype_backend: DtypeBackend = \"numpy_nullable\",\n    ) -> Self:\n        \"\"\"\n        Convert columns from numpy dtypes to the best dtypes that support ``pd.NA``.\n\n        Parameters\n        ----------\n        infer_objects : bool, default True\n            Whether object dtypes should be converted to the best possible types.\n        convert_string : bool, default True\n            Whether object dtypes should be converted to ``StringDtype()``.\n        convert_integer : bool, default True\n            Whether, if possible, conversion can be done to integer extension types.\n        convert_boolean : bool, defaults True\n            Whether object dtypes should be converted to ``BooleanDtypes()``.\n        convert_floating : bool, defaults True\n            Whether, if possible, conversion can be done to floating extension types.\n            If `convert_integer` is also True, preference will be give to integer\n            dtypes if the floats can be faithfully casted to integers.\n        dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'\n            Back-end data type applied to the resultant :class:`DataFrame` or\n            :class:`Series` (still experimental). Behaviour is as follows:\n\n            * ``\"numpy_nullable\"``: returns nullable-dtype-backed\n              :class:`DataFrame` or :class:`Serires`.\n            * ``\"pyarrow\"``: returns pyarrow-backed nullable :class:`ArrowDtype`\n              :class:`DataFrame` or :class:`Series`.\n\n            .. versionadded:: 2.0\n\n        Returns\n        -------\n        Series or DataFrame\n            Copy of input object with new dtype.\n\n        See Also\n        --------\n        infer_objects : Infer dtypes of objects.\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n\n        Notes\n        -----\n        By default, ``convert_dtypes`` will attempt to convert a Series (or each\n        Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options\n        ``convert_string``, ``convert_integer``, ``convert_boolean`` and\n        ``convert_floating``, it is possible to turn off individual conversions\n        to ``StringDtype``, the integer extension types, ``BooleanDtype``\n        or floating extension types, respectively.\n\n        For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference\n        rules as during normal Series/DataFrame construction.  Then, if possible,\n        convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer\n        or floating extension type, otherwise leave as ``object``.\n\n        If the dtype is integer, convert to an appropriate integer extension type.\n\n        If the dtype is numeric, and consists of all integers, convert to an\n        appropriate integer extension type. Otherwise, convert to an\n        appropriate floating extension type.\n\n        In the future, as new dtypes are added that support ``pd.NA``, the results\n        of this method will change to support those new dtypes.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n        ...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n        ...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n        ...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n        ...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n        ...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n        ...     }\n        ... )\n\n        Start with a DataFrame with default dtypes.\n\n        >>> df\n           a  b      c    d     e      f\n        0  1  x   True    h  10.0    NaN\n        1  2  y  False    i   NaN  100.5\n        2  3  z    NaN  NaN  20.0  200.0\n\n        >>> df.dtypes\n        a      int32\n        b     object\n        c     object\n        d     object\n        e    float64\n        f    float64\n        dtype: object\n\n        Convert the DataFrame to use best possible dtypes.\n\n        >>> dfn = df.convert_dtypes()\n        >>> dfn\n           a  b      c     d     e      f\n        0  1  x   True     h    10   <NA>\n        1  2  y  False     i  <NA>  100.5\n        2  3  z   <NA>  <NA>    20  200.0\n\n        >>> dfn.dtypes\n        a             Int32\n        b    string[python]\n        c           boolean\n        d    string[python]\n        e             Int64\n        f           Float64\n        dtype: object\n\n        Start with a Series of strings and missing data represented by ``np.nan``.\n\n        >>> s = pd.Series([\"a\", \"b\", np.nan])\n        >>> s\n        0      a\n        1      b\n        2    NaN\n        dtype: object\n\n        Obtain a Series with dtype ``StringDtype``.\n\n        >>> s.convert_dtypes()\n        0       a\n        1       b\n        2    <NA>\n        dtype: string\n        \"\"\"\n        check_dtype_backend(dtype_backend)\n        new_mgr = self._mgr.convert_dtypes(\n            infer_objects=infer_objects,\n            convert_string=convert_string,\n            convert_integer=convert_integer,\n            convert_boolean=convert_boolean,\n            convert_floating=convert_floating,\n            dtype_backend=dtype_backend,\n        )\n        res = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n        return res.__finalize__(self, method=\"convert_dtypes\")\n\n    # ----------------------------------------------------------------------\n    # Filling NA's\n\n    @final\n    def _pad_or_backfill(\n        self,\n        method: Literal[\"ffill\", \"bfill\", \"pad\", \"backfill\"],\n        *,\n        axis: None | Axis = None,\n        inplace: bool = False,\n        limit: None | int = None,\n        limit_area: Literal[\"inside\", \"outside\"] | None = None,\n    ):\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n        method = clean_fill_method(method)\n\n        if axis == 1:\n            if not self._mgr.is_single_block and inplace:\n                raise NotImplementedError\n            # e.g. test_align_fill_method\n            result = self.T._pad_or_backfill(\n                method=method, limit=limit, limit_area=limit_area\n            ).T\n\n            return result\n\n        new_mgr = self._mgr.pad_or_backfill(\n            method=method,\n            limit=limit,\n            limit_area=limit_area,\n            inplace=inplace,\n        )\n        result = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"fillna\")\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame,\n        *,\n        axis: Axis | None = ...,\n        inplace: Literal[False] = ...,\n        limit: int | None = ...,\n    ) -> Self: ...\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame,\n        *,\n        axis: Axis | None = ...,\n        inplace: Literal[True],\n        limit: int | None = ...,\n    ) -> None: ...\n\n    @overload\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame,\n        *,\n        axis: Axis | None = ...,\n        inplace: bool = ...,\n        limit: int | None = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        axes_single_arg=_shared_doc_kwargs[\"axes_single_arg\"],\n    )\n    def fillna(\n        self,\n        value: Hashable | Mapping | Series | DataFrame,\n        *,\n        axis: Axis | None = None,\n        inplace: bool = False,\n        limit: int | None = None,\n    ) -> Self | None:\n        \"\"\"\n        Fill NA/NaN values with `value`.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame).  Values not\n            in the dict/Series/DataFrame will not be filled. This value cannot\n            be a list.\n        axis : {axes_single_arg}\n            Axis along which to fill missing values. For `Series`\n            this parameter is unused and defaults to 0.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            This is the maximum number of entries along the entire axis\n            where NaNs will be filled. Must be greater than 0 if not None.\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        ffill : Fill values by propagating the last valid observation to next valid.\n        bfill : Fill values by using the next valid observation to fill the gap.\n        interpolate : Fill NaN values using interpolation.\n        reindex : Conform object to new index.\n        asfreq : Convert TimeSeries to specified frequency.\n\n        Notes\n        -----\n        For non-object dtype, ``value=None`` will use the NA value of the dtype.\n        See more details in the :ref:`Filling missing data<missing_data.fillna>`\n        section.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         [np.nan, 2, np.nan, 0],\n        ...         [3, 4, np.nan, 1],\n        ...         [np.nan, np.nan, np.nan, np.nan],\n        ...         [np.nan, 3, np.nan, 4],\n        ...     ],\n        ...     columns=list(\"ABCD\"),\n        ... )\n        >>> df\n             A    B   C    D\n        0  NaN  2.0 NaN  0.0\n        1  3.0  4.0 NaN  1.0\n        2  NaN  NaN NaN  NaN\n        3  NaN  3.0 NaN  4.0\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n             A    B    C    D\n        0  0.0  2.0  0.0  0.0\n        1  3.0  4.0  0.0  1.0\n        2  0.0  0.0  0.0  0.0\n        3  0.0  3.0  0.0  4.0\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {{\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}}\n        >>> df.fillna(value=values)\n             A    B    C    D\n        0  0.0  2.0  2.0  0.0\n        1  3.0  4.0  2.0  1.0\n        2  0.0  1.0  2.0  3.0\n        3  0.0  3.0  2.0  4.0\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n             A    B    C    D\n        0  0.0  2.0  2.0  0.0\n        1  3.0  4.0  NaN  1.0\n        2  NaN  1.0  NaN  3.0\n        3  NaN  3.0  NaN  4.0\n\n        When filling using a DataFrame, replacement happens along\n        the same column names and same indices\n\n        >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n        >>> df.fillna(df2)\n             A    B    C    D\n        0  0.0  2.0  0.0  0.0\n        1  3.0  4.0  0.0  1.0\n        2  0.0  0.0  0.0  NaN\n        3  0.0  3.0  0.0  4.0\n\n        Note that column D is not affected since it is not present in df2.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        if isinstance(value, (list, tuple)):\n            raise TypeError(\n                '\"value\" parameter must be a scalar or dict, but '\n                f'you passed a \"{type(value).__name__}\"'\n            )\n\n        # set the default here, so functions examining the signature\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        if self.ndim == 1:\n            if isinstance(value, (dict, ABCSeries)):\n                if not len(value):\n                    # test_fillna_nonscalar\n                    if inplace:\n                        return None\n                    return self.copy(deep=False)\n                from pandas import Series\n\n                value = Series(value)\n                value = value.reindex(self.index)\n                value = value._values\n            elif not is_list_like(value):\n                pass\n            else:\n                raise TypeError(\n                    '\"value\" parameter must be a scalar, dict '\n                    \"or Series, but you passed a \"\n                    f'\"{type(value).__name__}\"'\n                )\n\n            new_data = self._mgr.fillna(value=value, limit=limit, inplace=inplace)\n\n        elif isinstance(value, (dict, ABCSeries)):\n            if axis == 1:\n                raise NotImplementedError(\n                    \"Currently only can fill with dict/Series column by column\"\n                )\n            result = self if inplace else self.copy(deep=False)\n            for k, v in value.items():\n                if k not in result:\n                    continue\n\n                res_k = result[k].fillna(v, limit=limit)\n\n                if not inplace:\n                    result[k] = res_k\n                else:\n                    # We can write into our existing column(s) iff dtype\n                    #  was preserved.\n                    if isinstance(res_k, ABCSeries):\n                        # i.e. 'k' only shows up once in self.columns\n                        if res_k.dtype == result[k].dtype:\n                            result.loc[:, k] = res_k\n                        else:\n                            # Different dtype -> no way to do inplace.\n                            result[k] = res_k\n                    else:\n                        # see test_fillna_dict_inplace_nonunique_columns\n                        locs = result.columns.get_loc(k)\n                        if isinstance(locs, slice):\n                            locs = range(self.shape[1])[locs]\n                        elif isinstance(locs, np.ndarray) and locs.dtype.kind == \"b\":\n                            locs = locs.nonzero()[0]\n                        elif not (\n                            isinstance(locs, np.ndarray) and locs.dtype.kind == \"i\"\n                        ):\n                            # Should never be reached, but let's cover our bases\n                            raise NotImplementedError(\n                                \"Unexpected get_loc result, please report a bug at \"\n                                \"https://github.com/pandas-dev/pandas\"\n                            )\n\n                        for i, loc in enumerate(locs):\n                            res_loc = res_k.iloc[:, i]\n                            target = self.iloc[:, loc]\n\n                            if res_loc.dtype == target.dtype:\n                                result.iloc[:, loc] = res_loc\n                            else:\n                                result.isetitem(loc, res_loc)\n            if inplace:\n                return self._update_inplace(result)\n            else:\n                return result\n\n        elif not is_list_like(value):\n            if axis == 1:\n                result = self.T.fillna(value=value, limit=limit).T\n                new_data = result._mgr\n            else:\n                new_data = self._mgr.fillna(value=value, limit=limit, inplace=inplace)\n        elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n            new_data = self.where(self.notna(), value)._mgr\n        else:\n            raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n        result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"fillna\")\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n    ) -> Self: ...\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n    ) -> None: ...\n\n    @overload\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool = ...,\n        limit: None | int = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        axes_single_arg=_shared_doc_kwargs[\"axes_single_arg\"],\n    )\n    def ffill(\n        self,\n        *,\n        axis: None | Axis = None,\n        inplace: bool = False,\n        limit: None | int = None,\n        limit_area: Literal[\"inside\", \"outside\"] | None = None,\n    ) -> Self | None:\n        \"\"\"\n        Fill NA/NaN values by propagating the last valid observation to next valid.\n\n        Parameters\n        ----------\n        axis : {axes_single_arg}\n            Axis along which to fill missing values. For `Series`\n            this parameter is unused and defaults to 0.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        limit_area : {{`None`, 'inside', 'outside'}}, default None\n            If limit is specified, consecutive NaNs will be filled with this\n            restriction.\n\n            * ``None``: No fill restriction.\n            * 'inside': Only fill NaNs surrounded by valid values\n              (interpolate).\n            * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n            .. versionadded:: 2.2.0\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.bfill : Fill NA/NaN values by using the next valid observation\n            to fill the gap.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         [np.nan, 2, np.nan, 0],\n        ...         [3, 4, np.nan, 1],\n        ...         [np.nan, np.nan, np.nan, np.nan],\n        ...         [np.nan, 3, np.nan, 4],\n        ...     ],\n        ...     columns=list(\"ABCD\"),\n        ... )\n        >>> df\n             A    B   C    D\n        0  NaN  2.0 NaN  0.0\n        1  3.0  4.0 NaN  1.0\n        2  NaN  NaN NaN  NaN\n        3  NaN  3.0 NaN  4.0\n\n        >>> df.ffill()\n             A    B   C    D\n        0  NaN  2.0 NaN  0.0\n        1  3.0  4.0 NaN  1.0\n        2  3.0  4.0 NaN  1.0\n        3  3.0  3.0 NaN  4.0\n\n        >>> ser = pd.Series([1, np.nan, 2, 3])\n        >>> ser.ffill()\n        0   1.0\n        1   1.0\n        2   2.0\n        3   3.0\n        dtype: float64\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        return self._pad_or_backfill(\n            \"ffill\",\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            limit_area=limit_area,\n        )\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[False] = ...,\n        limit: None | int = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n    ) -> Self: ...\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: Literal[True],\n        limit: None | int = ...,\n    ) -> None: ...\n\n    @overload\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = ...,\n        inplace: bool = ...,\n        limit: None | int = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        axes_single_arg=_shared_doc_kwargs[\"axes_single_arg\"],\n    )\n    def bfill(\n        self,\n        *,\n        axis: None | Axis = None,\n        inplace: bool = False,\n        limit: None | int = None,\n        limit_area: Literal[\"inside\", \"outside\"] | None = None,\n    ) -> Self | None:\n        \"\"\"\n        Fill NA/NaN values by using the next valid observation to fill the gap.\n\n        Parameters\n        ----------\n        axis : {axes_single_arg}\n            Axis along which to fill missing values. For `Series`\n            this parameter is unused and defaults to 0.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        limit_area : {{`None`, 'inside', 'outside'}}, default None\n            If limit is specified, consecutive NaNs will be filled with this\n            restriction.\n\n            * ``None``: No fill restriction.\n            * 'inside': Only fill NaNs surrounded by valid values\n              (interpolate).\n            * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n            .. versionadded:: 2.2.0\n\n        Returns\n        -------\n        {klass} or None\n            Object with missing values filled or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.ffill : Fill NA/NaN values by propagating the last valid\n            observation to next valid.\n\n        Examples\n        --------\n        For Series:\n\n        >>> s = pd.Series([1, None, None, 2])\n        >>> s.bfill()\n        0    1.0\n        1    2.0\n        2    2.0\n        3    2.0\n        dtype: float64\n        >>> s.bfill(limit=1)\n        0    1.0\n        1    NaN\n        2    2.0\n        3    2.0\n        dtype: float64\n\n        With DataFrame:\n\n        >>> df = pd.DataFrame({{\"A\": [1, None, None, 4], \"B\": [None, 5, None, 7]}})\n        >>> df\n              A     B\n        0   1.0\t  NaN\n        1   NaN\t  5.0\n        2   NaN   NaN\n        3   4.0   7.0\n        >>> df.bfill()\n              A     B\n        0   1.0   5.0\n        1   4.0   5.0\n        2   4.0   7.0\n        3   4.0   7.0\n        >>> df.bfill(limit=1)\n              A     B\n        0   1.0   5.0\n        1   NaN   5.0\n        2   4.0   7.0\n        3   4.0   7.0\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        return self._pad_or_backfill(\n            \"bfill\",\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            limit_area=limit_area,\n        )\n\n    @overload\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[False] = ...,\n        regex: bool = ...,\n    ) -> Self: ...\n\n    @overload\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: Literal[True],\n        regex: bool = ...,\n    ) -> None: ...\n\n    @overload\n    def replace(\n        self,\n        to_replace=...,\n        value=...,\n        *,\n        inplace: bool = ...,\n        regex: bool = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        _shared_docs[\"replace\"],\n        klass=_shared_doc_kwargs[\"klass\"],\n        inplace=_shared_doc_kwargs[\"inplace\"],\n    )\n    def replace(\n        self,\n        to_replace=None,\n        value=lib.no_default,\n        *,\n        inplace: bool = False,\n        regex: bool = False,\n    ) -> Self | None:\n        if not is_bool(regex) and to_replace is not None:\n            raise ValueError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n        if not (\n            is_scalar(to_replace)\n            or is_re_compilable(to_replace)\n            or is_list_like(to_replace)\n        ):\n            raise TypeError(\n                \"Expecting 'to_replace' to be either a scalar, array-like, \"\n                \"dict or None, got invalid type \"\n                f\"{type(to_replace).__name__!r}\"\n            )\n\n        if value is lib.no_default and not (\n            is_dict_like(to_replace) or is_dict_like(regex)\n        ):\n            raise ValueError(\n                # GH#33302\n                f\"{type(self).__name__}.replace must specify either 'value', \"\n                \"a dict-like 'to_replace', or dict-like 'regex'.\"\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        if value is lib.no_default:\n            if not is_dict_like(to_replace):\n                # In this case we have checked above that\n                #  1) regex is dict-like and 2) to_replace is None\n                to_replace = regex\n                regex = True\n\n            items = list(to_replace.items())\n            if items:\n                keys, values = zip(*items)\n            else:\n                keys, values = ([], [])  # type: ignore[assignment]\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\n                        \"If a nested mapping is passed, all values \"\n                        \"of the top level mapping must be mappings\"\n                    )\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    # error: Incompatible types in assignment (expression has type\n                    # \"list[Never]\", variable has type \"tuple[Any, ...]\")\n                    keys, values = list(zip(*v.items())) or (  # type: ignore[assignment]\n                        [],\n                        [],\n                    )\n\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(to_replace, value, inplace=inplace, regex=regex)\n        else:\n            # need a non-zero len on all axes\n            if not self.size:\n                if inplace:\n                    return None\n                return self.copy(deep=False)\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    if isinstance(self, ABCSeries):\n                        raise ValueError(\n                            \"to_replace and value cannot be dict-like for \"\n                            \"Series.replace\"\n                        )\n                    # Note: Checking below for `in foo.keys()` instead of\n                    #  `in foo` is needed for when we have a Series and not dict\n                    mapping = {\n                        col: (to_replace[col], value[col])\n                        for col in to_replace.keys()\n                        if col in value.keys() and col in self\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-like to_replace \"\n                            \"and non-None value\"\n                        )\n                    mapping = {\n                        col: (to_rep, value) for col, to_rep in to_replace.items()\n                    }\n                    return self._replace_columnwise(mapping, inplace, regex)\n                else:\n                    raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n            elif is_list_like(to_replace):\n                if not is_list_like(value):\n                    # e.g. to_replace = [NA, ''] and value is 0,\n                    #  so we replace NA with 0 and then replace '' with 0\n                    value = [value] * len(to_replace)\n\n                # e.g. we have to_replace = [NA, ''] and value = [0, 'missing']\n                if len(to_replace) != len(value):\n                    raise ValueError(\n                        f\"Replacement lists must match in length. \"\n                        f\"Expecting {len(to_replace)} got {len(value)} \"\n                    )\n                new_data = self._mgr.replace_list(\n                    src_list=to_replace,\n                    dest_list=value,\n                    inplace=inplace,\n                    regex=regex,\n                )\n\n            elif to_replace is None:\n                if not (\n                    is_re_compilable(regex)\n                    or is_list_like(regex)\n                    or is_dict_like(regex)\n                ):\n                    raise TypeError(\n                        f\"'regex' must be a string or a compiled regular expression \"\n                        f\"or a list or dict of strings or regular expressions, \"\n                        f\"you passed a {type(regex).__name__!r}\"\n                    )\n                return self.replace(regex, value, inplace=inplace, regex=True)\n            else:\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    # Operate column-wise\n                    if self.ndim == 1:\n                        raise ValueError(\n                            \"Series.replace cannot use dict-value and \"\n                            \"non-None to_replace\"\n                        )\n                    mapping = {col: (to_replace, val) for col, val in value.items()}\n                    return self._replace_columnwise(mapping, inplace, regex)\n\n                elif not is_list_like(value):  # NA -> 0\n                    regex = should_use_regex(regex, to_replace)\n                    if regex:\n                        new_data = self._mgr.replace_regex(\n                            to_replace=to_replace,\n                            value=value,\n                            inplace=inplace,\n                        )\n                    else:\n                        new_data = self._mgr.replace(\n                            to_replace=to_replace, value=value, inplace=inplace\n                        )\n                else:\n                    raise TypeError(\n                        f'Invalid \"to_replace\" type: {type(to_replace).__name__!r}'\n                    )\n\n        result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"replace\")\n\n    @overload\n    def interpolate(\n        self,\n        method: InterpolateOptions = ...,\n        *,\n        axis: Axis = ...,\n        limit: int | None = ...,\n        inplace: Literal[False] = ...,\n        limit_direction: Literal[\"forward\", \"backward\", \"both\"] | None = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n        **kwargs,\n    ) -> Self: ...\n\n    @overload\n    def interpolate(\n        self,\n        method: InterpolateOptions = ...,\n        *,\n        axis: Axis = ...,\n        limit: int | None = ...,\n        inplace: Literal[True],\n        limit_direction: Literal[\"forward\", \"backward\", \"both\"] | None = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n        **kwargs,\n    ) -> None: ...\n\n    @overload\n    def interpolate(\n        self,\n        method: InterpolateOptions = ...,\n        *,\n        axis: Axis = ...,\n        limit: int | None = ...,\n        inplace: bool = ...,\n        limit_direction: Literal[\"forward\", \"backward\", \"both\"] | None = ...,\n        limit_area: Literal[\"inside\", \"outside\"] | None = ...,\n        **kwargs,\n    ) -> Self | None: ...\n\n    @final\n    def interpolate(\n        self,\n        method: InterpolateOptions = \"linear\",\n        *,\n        axis: Axis = 0,\n        limit: int | None = None,\n        inplace: bool = False,\n        limit_direction: Literal[\"forward\", \"backward\", \"both\"] | None = None,\n        limit_area: Literal[\"inside\", \"outside\"] | None = None,\n        **kwargs,\n    ) -> Self | None:\n        \"\"\"\n        Fill NaN values using an interpolation method.\n\n        Please note that only ``method='linear'`` is supported for\n        DataFrame/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : str, default 'linear'\n            Interpolation technique to use. One of:\n\n            * 'linear': Ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n            * 'time': Works on daily and higher resolution data to interpolate\n              given length of interval. This interpolates values based on\n              time interval between observations.\n            * 'index': The interpolation uses the numerical values\n              of the DataFrame's index to linearly calculate missing values.\n            * 'values': Interpolation based on the numerical values\n              in the DataFrame, treating them as equally spaced along the index.\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n              'barycentric', 'polynomial': Passed to\n              `scipy.interpolate.interp1d`, whereas 'spline' is passed to\n              `scipy.interpolate.UnivariateSpline`. These methods use the numerical\n              values of the index.  Both 'polynomial' and 'spline' require that\n              you also specify an `order` (int), e.g.\n              ``df.interpolate(method='polynomial', order=5)``. Note that,\n              `slinear` method in Pandas refers to the Scipy first order `spline`\n              instead of Pandas first order `spline`.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n              'cubicspline': Wrappers around the SciPy interpolation methods of\n              similar names. See `Notes`.\n            * 'from_derivatives': Refers to\n              `scipy.interpolate.BPoly.from_derivatives`.\n\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Axis to interpolate along. For `Series` this parameter is unused\n            and defaults to 0.\n        limit : int, optional\n            Maximum number of consecutive NaNs to fill. Must be greater than\n            0.\n        inplace : bool, default False\n            Update the data in place if possible.\n        limit_direction : {{'forward', 'backward', 'both'}}, optional, default 'forward'\n            Consecutive NaNs will be filled in this direction.\n\n        limit_area : {{`None`, 'inside', 'outside'}}, default None\n            If limit is specified, consecutive NaNs will be filled with this\n            restriction.\n\n            * ``None``: No fill restriction.\n            * 'inside': Only fill NaNs surrounded by valid values\n              (interpolate).\n            * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n        **kwargs : optional\n            Keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            Returns the same object type as the caller, interpolated at\n            some or all ``NaN`` values or None if ``inplace=True``.\n\n        See Also\n        --------\n        fillna : Fill missing values using different methods.\n        scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n            (Akima interpolator).\n        scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n            Bernstein basis.\n        scipy.interpolate.interp1d : Interpolate a 1-D function.\n        scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n            interpolator).\n        scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n            interpolation.\n        scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\n        Notes\n        -----\n        The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n        methods are wrappers around the respective SciPy implementations of\n        similar names. These use the actual numerical values of the index.\n        For more information on their behavior, see the\n        `SciPy documentation\n        <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.\n\n        Examples\n        --------\n        Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n        interpolation.\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s\n        0    0.0\n        1    1.0\n        2    NaN\n        3    3.0\n        dtype: float64\n        >>> s.interpolate()\n        0    0.0\n        1    1.0\n        2    2.0\n        3    3.0\n        dtype: float64\n\n        Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n        Both 'polynomial' and 'spline' methods require that you also specify\n        an ``order`` (int).\n\n        >>> s = pd.Series([0, 2, np.nan, 8])\n        >>> s.interpolate(method=\"polynomial\", order=2)\n        0    0.000000\n        1    2.000000\n        2    4.666667\n        3    8.000000\n        dtype: float64\n\n        Fill the DataFrame forward (that is, going down) along each column\n        using linear interpolation.\n\n        Note how the last entry in column 'a' is interpolated differently,\n        because there is no entry after it to use for interpolation.\n        Note how the first entry in column 'b' remains ``NaN``, because there\n        is no entry before it to use for interpolation.\n\n        >>> df = pd.DataFrame(\n        ...     [\n        ...         (0.0, np.nan, -1.0, 1.0),\n        ...         (np.nan, 2.0, np.nan, np.nan),\n        ...         (2.0, 3.0, np.nan, 9.0),\n        ...         (np.nan, 4.0, -4.0, 16.0),\n        ...     ],\n        ...     columns=list(\"abcd\"),\n        ... )\n        >>> df\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  NaN  2.0  NaN   NaN\n        2  2.0  3.0  NaN   9.0\n        3  NaN  4.0 -4.0  16.0\n        >>> df.interpolate(method=\"linear\", limit_direction=\"forward\", axis=0)\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  1.0  2.0 -2.0   5.0\n        2  2.0  3.0 -3.0   9.0\n        3  2.0  4.0 -4.0  16.0\n\n        Using polynomial interpolation.\n\n        >>> df[\"d\"].interpolate(method=\"polynomial\", order=2)\n        0     1.0\n        1     4.0\n        2     9.0\n        3    16.0\n        Name: d, dtype: float64\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        axis = self._get_axis_number(axis)\n\n        if self.empty:\n            if inplace:\n                return None\n            return self.copy()\n\n        if not isinstance(method, str):\n            raise ValueError(\"'method' should be a string, not None.\")\n\n        obj, should_transpose = (self.T, True) if axis == 1 else (self, False)\n\n        if isinstance(obj.index, MultiIndex) and method != \"linear\":\n            raise ValueError(\n                \"Only `method=linear` interpolation is supported on MultiIndexes.\"\n            )\n\n        limit_direction = missing.infer_limit_direction(limit_direction, method)\n\n        index = missing.get_interp_index(method, obj.index)\n        new_data = obj._mgr.interpolate(\n            method=method,\n            index=index,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            inplace=inplace,\n            **kwargs,\n        )\n\n        result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n        if should_transpose:\n            result = result.T\n        if inplace:\n            return self._update_inplace(result)\n        else:\n            return result.__finalize__(self, method=\"interpolate\")\n\n    # ----------------------------------------------------------------------\n    # Timeseries methods Methods\n\n    @final\n    def asof(self, where, subset=None):\n        \"\"\"\n        Return the last row(s) without any NaNs before `where`.\n\n        The last row (for each element in `where`, if list) without any\n        NaN is taken.\n        In case of a :class:`~pandas.DataFrame`, the last row without NaN\n        considering only the subset of columns (if not `None`)\n\n        If there is no good value, NaN is returned for a Series or\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array-like of dates\n            Date(s) before which the last row(s) are returned.\n        subset : str or array-like of str, default `None`\n            For DataFrame, if not `None`, only use these columns to\n            check for NaNs.\n\n        Returns\n        -------\n        scalar, Series, or DataFrame\n\n            The return can be:\n\n            * scalar : when `self` is a Series and `where` is a scalar\n            * Series: when `self` is a Series and `where` is an array-like,\n              or when `self` is a DataFrame and `where` is a scalar\n            * DataFrame : when `self` is a DataFrame and `where` is an\n              array-like\n\n        See Also\n        --------\n        merge_asof : Perform an asof merge. Similar to left join.\n\n        Notes\n        -----\n        Dates are assumed to be sorted. Raises if this is not the case.\n\n        Examples\n        --------\n        A Series and a scalar `where`.\n\n        >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n        >>> s\n        10    1.0\n        20    2.0\n        30    NaN\n        40    4.0\n        dtype: float64\n\n        >>> s.asof(20)\n        2.0\n\n        For a sequence `where`, a Series is returned. The first value is\n        NaN, because the first element of `where` is before the first\n        index value.\n\n        >>> s.asof([5, 20])\n        5     NaN\n        20    2.0\n        dtype: float64\n\n        Missing values are not considered. The following is ``2.0``, not\n        NaN, even though NaN is at the index location for ``30``.\n\n        >>> s.asof(30)\n        2.0\n\n        Take all columns into consideration\n\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"a\": [10.0, 20.0, 30.0, 40.0, 50.0],\n        ...         \"b\": [None, None, None, None, 500],\n        ...     },\n        ...     index=pd.DatetimeIndex(\n        ...         [\n        ...             \"2018-02-27 09:01:00\",\n        ...             \"2018-02-27 09:02:00\",\n        ...             \"2018-02-27 09:03:00\",\n        ...             \"2018-02-27 09:04:00\",\n        ...             \"2018-02-27 09:05:00\",\n        ...         ]\n        ...     ),\n        ... )\n        >>> df.asof(pd.DatetimeIndex([\"2018-02-27 09:03:30\", \"2018-02-27 09:04:30\"]))\n                              a   b\n        2018-02-27 09:03:30 NaN NaN\n        2018-02-27 09:04:30 NaN NaN\n\n        Take a single column into consideration\n\n        >>> df.asof(\n        ...     pd.DatetimeIndex([\"2018-02-27 09:03:30\", \"2018-02-27 09:04:30\"]),\n        ...     subset=[\"a\"],\n        ... )\n                                a   b\n        2018-02-27 09:03:30  30.0 NaN\n        2018-02-27 09:04:30  40.0 NaN\n        \"\"\"\n        if isinstance(where, str):\n            where = Timestamp(where)\n\n        if not self.index.is_monotonic_increasing:\n            raise ValueError(\"asof requires a sorted index\")\n\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError(\"subset is not valid for Series\")\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq)\n\n            if where < start:\n                if not is_series:\n                    return self._constructor_sliced(\n                        index=self.columns, name=where, dtype=np.float64\n                    )\n                return np.nan\n\n            # It's always much faster to use a *while* loop here for\n            # Series than pre-computing all the NAs. However a\n            # *while* loop is extremely expensive for DataFrame\n            # so we later pre-compute all the NAs and use the same\n            # code path whether *where* is a scalar or list.\n            # See PR: https://github.com/pandas-dev/pandas/pull/14476\n            if is_series:\n                loc = self.index.searchsorted(where, side=\"right\")\n                if loc > 0:\n                    loc -= 1\n\n                values = self._values\n                while loc > 0 and isna(values[loc]):\n                    loc -= 1\n                return values[loc]\n\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n\n        nulls = self.isna() if is_series else self[subset].isna().any(axis=1)\n        if nulls.all():\n            if is_series:\n                self = cast(\"Series\", self)\n                return self._constructor(np.nan, index=where, name=self.name)\n            elif is_list:\n                self = cast(\"DataFrame\", self)\n                return self._constructor(np.nan, index=where, columns=self.columns)\n            else:\n                self = cast(\"DataFrame\", self)\n                return self._constructor_sliced(\n                    np.nan, index=self.columns, name=where[0]\n                )\n\n        # error: Unsupported operand type for\n        # ~ (\"ExtensionArray | ndarray[Any, Any] | Any\")\n        locs = self.index.asof_locs(where, ~nulls._values)  # type: ignore[operator]\n\n        # mask the missing\n        mask = locs == -1\n        data = self.take(locs)\n        data.index = where\n        if mask.any():\n            # GH#16063 only do this setting when necessary, otherwise\n            #  we'd cast e.g. bools to floats\n            data.loc[mask] = np.nan\n        return data if is_list else data.iloc[-1]\n\n    # ----------------------------------------------------------------------\n    # Action Methods\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def isna(self) -> Self:\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n        values.\n        Everything else gets mapped to False values. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values.\n\n        Returns\n        -------\n        {klass}\n            Mask of bool values for each element in {klass} that\n            indicates whether an element is an NA value.\n\n        See Also\n        --------\n        {klass}.isnull : Alias of isna.\n        {klass}.notna : Boolean inverse of isna.\n        {klass}.dropna : Omit axes labels with missing values.\n        isna : Top-level isna.\n\n        Examples\n        --------\n        Show which entries in a DataFrame are NA.\n\n        >>> df = pd.DataFrame(\n        ...     dict(\n        ...         age=[5, 6, np.nan],\n        ...         born=[\n        ...             pd.NaT,\n        ...             pd.Timestamp(\"1939-05-27\"),\n        ...             pd.Timestamp(\"1940-04-25\"),\n        ...         ],\n        ...         name=[\"Alfred\", \"Batman\", \"\"],\n        ...         toy=[None, \"Batmobile\", \"Joker\"],\n        ...     )\n        ... )\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.isna()\n             age   born   name    toy\n        0  False   True  False   True\n        1  False  False  False  False\n        2   True  False  False  False\n\n        Show which entries in a Series are NA.\n\n        >>> ser = pd.Series([5, 6, np.nan])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.isna()\n        0    False\n        1    False\n        2     True\n        dtype: bool\n        \"\"\"\n        return isna(self).__finalize__(self, method=\"isna\")\n\n    @doc(isna, klass=_shared_doc_kwargs[\"klass\"])\n    def isnull(self) -> Self:\n        return isna(self).__finalize__(self, method=\"isnull\")\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def notna(self) -> Self:\n        \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to True. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values.\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n        values.\n\n        Returns\n        -------\n        {klass}\n            Mask of bool values for each element in {klass} that\n            indicates whether an element is not an NA value.\n\n        See Also\n        --------\n        {klass}.notnull : Alias of notna.\n        {klass}.isna : Boolean inverse of notna.\n        {klass}.dropna : Omit axes labels with missing values.\n        notna : Top-level notna.\n\n        Examples\n        --------\n        Show which entries in a DataFrame are not NA.\n\n        >>> df = pd.DataFrame(\n        ...     dict(\n        ...         age=[5, 6, np.nan],\n        ...         born=[\n        ...             pd.NaT,\n        ...             pd.Timestamp(\"1939-05-27\"),\n        ...             pd.Timestamp(\"1940-04-25\"),\n        ...         ],\n        ...         name=[\"Alfred\", \"Batman\", \"\"],\n        ...         toy=[None, \"Batmobile\", \"Joker\"],\n        ...     )\n        ... )\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.notna()\n             age   born  name    toy\n        0   True  False  True  False\n        1   True   True  True   True\n        2  False   True  True   True\n\n        Show which entries in a Series are not NA.\n\n        >>> ser = pd.Series([5, 6, np.nan])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.notna()\n        0     True\n        1     True\n        2    False\n        dtype: bool\n        \"\"\"\n        return notna(self).__finalize__(self, method=\"notna\")\n\n    @doc(notna, klass=_shared_doc_kwargs[\"klass\"])\n    def notnull(self) -> Self:\n        return notna(self).__finalize__(self, method=\"notnull\")\n\n    @final\n    def _clip_with_scalar(self, lower, upper, inplace: bool = False):\n        if (lower is not None and np.any(isna(lower))) or (\n            upper is not None and np.any(isna(upper))\n        ):\n            raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n        result = self\n        mask = self.isna()\n\n        if lower is not None:\n            cond = mask | (self >= lower)\n            result = result.where(cond, lower, inplace=inplace)  # type: ignore[assignment]\n        if upper is not None:\n            cond = mask | (self <= upper)\n            result = self if inplace else result\n            result = result.where(cond, upper, inplace=inplace)  # type: ignore[assignment]\n\n        return result\n\n    @final\n    def _clip_with_one_bound(self, threshold, method, axis, inplace):\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # method is self.le for upper bound and self.ge for lower bound\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == \"le\":\n                return self._clip_with_scalar(None, threshold, inplace=inplace)\n            return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n        # GH #15390\n        # In order for where method to work, the threshold must\n        # be transformed to NDFrame from other array like structure.\n        if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n            if isinstance(self, ABCSeries):\n                threshold = self._constructor(threshold, index=self.index)\n            else:\n                threshold = self._align_for_op(threshold, axis, flex=None)[1]\n\n        # GH 40420\n        # Treat missing thresholds as no bounds, not clipping the values\n        if is_list_like(threshold):\n            fill_value = np.inf if method.__name__ == \"le\" else -np.inf\n            threshold_inf = threshold.fillna(fill_value)\n        else:\n            threshold_inf = threshold\n\n        subset = method(threshold_inf, axis=axis) | isna(self)\n\n        # GH 40420\n        return self.where(subset, threshold, axis=axis, inplace=inplace)\n\n    @overload\n    def clip(\n        self,\n        lower=...,\n        upper=...,\n        *,\n        axis: Axis | None = ...,\n        inplace: Literal[False] = ...,\n        **kwargs,\n    ) -> Self: ...\n\n    @overload\n    def clip(\n        self,\n        lower=...,\n        upper=...,\n        *,\n        axis: Axis | None = ...,\n        inplace: Literal[True],\n        **kwargs,\n    ) -> None: ...\n\n    @overload\n    def clip(\n        self,\n        lower=...,\n        upper=...,\n        *,\n        axis: Axis | None = ...,\n        inplace: bool = ...,\n        **kwargs,\n    ) -> Self | None: ...\n\n    @final\n    def clip(\n        self,\n        lower=None,\n        upper=None,\n        *,\n        axis: Axis | None = None,\n        inplace: bool = False,\n        **kwargs,\n    ) -> Self | None:\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Assigns values outside boundary to boundary values. Thresholds\n        can be singular values or array like, and in the latter case\n        the clipping is performed element-wise in the specified axis.\n\n        Parameters\n        ----------\n        lower : float or array-like, default None\n            Minimum threshold value. All values below this\n            threshold will be set to it. A missing\n            threshold (e.g `NA`) will not clip the value.\n        upper : float or array-like, default None\n            Maximum threshold value. All values above this\n            threshold will be set to it. A missing\n            threshold (e.g `NA`) will not clip the value.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Align object with lower and upper along the given axis.\n            For `Series` this parameter is unused and defaults to `None`.\n        inplace : bool, default False\n            Whether to perform the operation in place on the data.\n        **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with numpy.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            Same type as calling object with the values outside the\n            clip boundaries replaced or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.clip : Trim values at input threshold in series.\n        DataFrame.clip : Trim values at input threshold in DataFrame.\n        numpy.clip : Clip (limit) the values in an array.\n\n        Examples\n        --------\n        >>> data = {\"col_0\": [9, -3, 0, -1, 5], \"col_1\": [-2, -7, 6, 8, -5]}\n        >>> df = pd.DataFrame(data)\n        >>> df\n           col_0  col_1\n        0      9     -2\n        1     -3     -7\n        2      0      6\n        3     -1      8\n        4      5     -5\n\n        Clips per column using lower and upper thresholds:\n\n        >>> df.clip(-4, 6)\n           col_0  col_1\n        0      6     -2\n        1     -3     -4\n        2      0      6\n        3     -1      6\n        4      5     -4\n\n        Clips using specific lower and upper thresholds per column:\n\n        >>> df.clip([-2, -1], [4, 5])\n            col_0  col_1\n        0      4     -1\n        1     -2     -1\n        2      0      5\n        3     -1      5\n        4      4     -1\n\n        Clips using specific lower and upper thresholds per column element:\n\n        >>> t = pd.Series([2, -4, -1, 6, 3])\n        >>> t\n        0    2\n        1   -4\n        2   -1\n        3    6\n        4    3\n        dtype: int64\n\n        >>> df.clip(t, t + 4, axis=0)\n           col_0  col_1\n        0      6      2\n        1     -3     -4\n        2      0      3\n        3      6      8\n        4      5      3\n\n        Clips using specific lower threshold per column element, with missing values:\n\n        >>> t = pd.Series([2, -4, np.nan, 6, 3])\n        >>> t\n        0    2.0\n        1   -4.0\n        2    NaN\n        3    6.0\n        4    3.0\n        dtype: float64\n\n        >>> df.clip(t, axis=0)\n        col_0  col_1\n        0      9.0    2.0\n        1     -3.0   -4.0\n        2      0.0    6.0\n        3      6.0    8.0\n        4      5.0    3.0\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        axis = nv.validate_clip_with_axis(axis, (), kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # GH 17276\n        # numpy doesn't like NaN as a clip value\n        # so ignore\n        # GH 19992\n        # numpy doesn't drop a list-like bound containing NaN\n        isna_lower = isna(lower)\n        if not is_list_like(lower):\n            if np.any(isna_lower):\n                lower = None\n        elif np.all(isna_lower):\n            lower = None\n        isna_upper = isna(upper)\n        if not is_list_like(upper):\n            if np.any(isna_upper):\n                upper = None\n        elif np.all(isna_upper):\n            upper = None\n\n        # GH 2747 (arguments were reversed)\n        if (\n            lower is not None\n            and upper is not None\n            and is_scalar(lower)\n            and is_scalar(upper)\n        ):\n            lower, upper = min(lower, upper), max(lower, upper)\n\n        # fast-path for scalars\n        if (lower is None or is_number(lower)) and (upper is None or is_number(upper)):\n            return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n        result = self\n        if lower is not None:\n            result = result._clip_with_one_bound(\n                lower, method=self.ge, axis=axis, inplace=inplace\n            )\n        if upper is not None:\n            if inplace:\n                result = self\n            result = result._clip_with_one_bound(\n                upper, method=self.le, axis=axis, inplace=inplace\n            )\n\n        return result\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def asfreq(\n        self,\n        freq: Frequency,\n        method: FillnaOptions | None = None,\n        how: Literal[\"start\", \"end\"] | None = None,\n        normalize: bool = False,\n        fill_value: Hashable | None = None,\n    ) -> Self:\n        \"\"\"\n        Convert time series to specified frequency.\n\n        Returns the original data conformed to a new index with the specified\n        frequency.\n\n        If the index of this {klass} is a :class:`~pandas.PeriodIndex`, the new index\n        is the result of transforming the original index with\n        :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index\n        will map one-to-one to the new index).\n\n        Otherwise, the new index will be equivalent to ``pd.date_range(start, end,\n        freq=freq)`` where ``start`` and ``end`` are, respectively, the min and\n        max entries in the original index (see :func:`pandas.date_range`). The\n        values corresponding to any timesteps in the new index which were not present\n        in the original index will be null (``NaN``), unless a method for filling\n        such unknowns is provided (see the ``method`` parameter below).\n\n        The :meth:`resample` method is more appropriate if an operation on each group of\n        timesteps (such as an aggregate) is necessary to represent the data at the new\n        frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset or str\n            Frequency DateOffset or string.\n        method : {{'backfill'/'bfill', 'pad'/'ffill'}}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid based on the order of the index\n            * 'backfill' / 'bfill': use NEXT valid observation to fill.\n        how : {{'start', 'end'}}, default end\n            For PeriodIndex only (see PeriodIndex.asfreq).\n        normalize : bool, default False\n            Whether to reset output index to midnight.\n        fill_value : scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n        Returns\n        -------\n        {klass}\n            {klass} object reindexed to the specified frequency.\n\n        See Also\n        --------\n        reindex : Conform DataFrame to new index with optional filling logic.\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see\n        :ref:`this link<timeseries.offset_aliases>`.\n\n        Examples\n        --------\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range(\"1/1/2000\", periods=4, freq=\"min\")\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({{\"s\": series}})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq=\"30s\")\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq=\"30s\", fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq=\"30s\", method=\"bfill\")\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n        \"\"\"\n        from pandas.core.resample import asfreq\n\n        return asfreq(\n            self,\n            freq,\n            method=method,\n            how=how,\n            normalize=normalize,\n            fill_value=fill_value,\n        )\n\n    @final\n    def at_time(self, time, asof: bool = False, axis: Axis | None = None) -> Self:\n        \"\"\"\n        Select values at particular time of day (e.g., 9:30AM).\n\n        Parameters\n        ----------\n        time : datetime.time or str\n            The values to select.\n        asof : bool, default False\n            This parameter is currently not supported.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        Series or DataFrame\n            The values with the specified time.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        between_time : Select values between particular times of the day.\n        first : Select initial periods of time series based on a date offset.\n        last : Select final periods of time series based on a date offset.\n        DatetimeIndex.indexer_at_time : Get just the index locations for\n            values at particular time of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range(\"2018-04-09\", periods=4, freq=\"12h\")\n        >>> ts = pd.DataFrame({\"A\": [1, 2, 3, 4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-09 12:00:00  2\n        2018-04-10 00:00:00  3\n        2018-04-10 12:00:00  4\n\n        >>> ts.at_time(\"12:00\")\n                             A\n        2018-04-09 12:00:00  2\n        2018-04-10 12:00:00  4\n        \"\"\"\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        index = self._get_axis(axis)\n\n        if not isinstance(index, DatetimeIndex):\n            raise TypeError(\"Index must be DatetimeIndex\")\n\n        indexer = index.indexer_at_time(time, asof=asof)\n        return self.take(indexer, axis=axis)\n\n    @final\n    def between_time(\n        self,\n        start_time,\n        end_time,\n        inclusive: IntervalClosedType = \"both\",\n        axis: Axis | None = None,\n    ) -> Self:\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        By setting ``start_time`` to be later than ``end_time``,\n        you can get the times that are *not* between the two times.\n\n        Parameters\n        ----------\n        start_time : datetime.time or str\n            Initial time as a time filter limit.\n        end_time : datetime.time or str\n            End time as a time filter limit.\n        inclusive : {\"both\", \"neither\", \"left\", \"right\"}, default \"both\"\n            Include boundaries; whether to set each bound as closed or open.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine range time on index or columns value.\n            For `Series` this parameter is unused and defaults to 0.\n\n        Returns\n        -------\n        Series or DataFrame\n            Data from the original object filtered to the specified dates range.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        See Also\n        --------\n        at_time : Select values at a particular time of the day.\n        first : Select initial periods of time series based on a date offset.\n        last : Select final periods of time series based on a date offset.\n        DatetimeIndex.indexer_between_time : Get just the index locations for\n            values between particular times of the day.\n\n        Examples\n        --------\n        >>> i = pd.date_range(\"2018-04-09\", periods=4, freq=\"1D20min\")\n        >>> ts = pd.DataFrame({\"A\": [1, 2, 3, 4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n        2018-04-12 01:00:00  4\n\n        >>> ts.between_time(\"0:15\", \"0:45\")\n                             A\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n\n        You get the times that are *not* between two times by setting\n        ``start_time`` later than ``end_time``:\n\n        >>> ts.between_time(\"0:45\", \"0:15\")\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-12 01:00:00  4\n        \"\"\"\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        index = self._get_axis(axis)\n        if not isinstance(index, DatetimeIndex):\n            raise TypeError(\"Index must be DatetimeIndex\")\n\n        left_inclusive, right_inclusive = validate_inclusive(inclusive)\n        indexer = index.indexer_between_time(\n            start_time,\n            end_time,\n            include_start=left_inclusive,\n            include_end=right_inclusive,\n        )\n        return self.take(indexer, axis=axis)\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def resample(\n        self,\n        rule,\n        closed: Literal[\"right\", \"left\"] | None = None,\n        label: Literal[\"right\", \"left\"] | None = None,\n        convention: Literal[\"start\", \"end\", \"s\", \"e\"] | lib.NoDefault = lib.no_default,\n        on: Level | None = None,\n        level: Level | None = None,\n        origin: str | TimestampConvertibleTypes = \"start_day\",\n        offset: TimedeltaConvertibleTypes | None = None,\n        group_keys: bool = False,\n    ) -> Resampler:\n        \"\"\"\n        Resample time-series data.\n\n        Convenience method for frequency conversion and resampling of time series.\n        The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,\n        or `TimedeltaIndex`), or the caller must pass the label of a datetime-like\n        series/index to the ``on``/``level`` keyword parameter.\n\n        Parameters\n        ----------\n        rule : DateOffset, Timedelta or str\n            The offset string or object representing target conversion.\n        closed : {{'right', 'left'}}, default None\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n            'BA', 'BQE', and 'W' which all have a default of 'right'.\n        label : {{'right', 'left'}}, default None\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',\n            'BA', 'BQE', and 'W' which all have a default of 'right'.\n        convention : {{'start', 'end', 's', 'e'}}, default 'start'\n            For `PeriodIndex` only, controls whether to use the start or\n            end of `rule`.\n\n            .. deprecated:: 2.2.0\n                Convert PeriodIndex to DatetimeIndex before resampling instead.\n        on : str, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n        level : str or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling. `level` must be datetime-like.\n        origin : Timestamp or str, default 'start_day'\n            The timestamp on which to adjust the grouping. The timezone of origin\n            must match the timezone of the index.\n            If string, must be Timestamp convertible or one of the following:\n\n            - 'epoch': `origin` is 1970-01-01\n            - 'start': `origin` is the first value of the timeseries\n            - 'start_day': `origin` is the first day at midnight of the timeseries\n\n            - 'end': `origin` is the last value of the timeseries\n            - 'end_day': `origin` is the ceiling midnight of the last day\n\n            .. versionadded:: 1.3.0\n\n            .. note::\n\n                Only takes effect for Tick-frequencies (i.e. fixed frequencies like\n                days, hours, and minutes, rather than months or quarters).\n        offset : Timedelta or str, default is None\n            An offset timedelta added to the origin.\n\n        group_keys : bool, default False\n            Whether to include the group keys in the result index when using\n            ``.apply()`` on the resampled object.\n\n            .. versionadded:: 1.5.0\n\n                Not specifying ``group_keys`` will retain values-dependent behavior\n                from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes\n                <whatsnew_150.enhancements.resample_group_keys>` for examples).\n\n            .. versionchanged:: 2.0.0\n\n                ``group_keys`` now defaults to ``False``.\n\n        Returns\n        -------\n        pandas.api.typing.Resampler\n            :class:`~pandas.core.Resampler` object.\n\n        See Also\n        --------\n        Series.resample : Resample a Series.\n        DataFrame.resample : Resample a DataFrame.\n        groupby : Group {klass} by mapping, function, label, or list of labels.\n        asfreq : Reindex a {klass} with the given frequency without grouping.\n\n        Notes\n        -----\n        See the `user guide\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n        Examples\n        --------\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range(\"1/1/2000\", periods=9, freq=\"min\")\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: min, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample(\"3min\").sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3min, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n\n        >>> series.resample(\"3min\", label=\"right\").sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3min, dtype: int64\n\n        To include this value close the right side of the bin interval,\n        as shown below.\n\n        >>> series.resample(\"3min\", label=\"right\", closed=\"right\").sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3min, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample(\"30s\").asfreq()[0:5]  # Select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30s, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``ffill`` method.\n\n        >>> series.resample(\"30s\").ffill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30s, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample(\"30s\").bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30s, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(arraylike):\n        ...     return np.sum(arraylike) + 5\n        >>> series.resample(\"3min\").apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3min, dtype: int64\n\n        For DataFrame objects, the keyword `on` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> df = pd.DataFrame([10, 11, 9, 13, 14, 18, 17, 19], columns=[\"price\"])\n        >>> df[\"volume\"] = [50, 60, 40, 100, 50, 100, 40, 50]\n        >>> df[\"week_starting\"] = pd.date_range(\"01/01/2018\", periods=8, freq=\"W\")\n        >>> df\n           price  volume week_starting\n        0     10      50    2018-01-07\n        1     11      60    2018-01-14\n        2      9      40    2018-01-21\n        3     13     100    2018-01-28\n        4     14      50    2018-02-04\n        5     18     100    2018-02-11\n        6     17      40    2018-02-18\n        7     19      50    2018-02-25\n        >>> df.resample(\"ME\", on=\"week_starting\").mean()\n                       price  volume\n        week_starting\n        2018-01-31     10.75    62.5\n        2018-02-28     17.00    60.0\n\n        For a DataFrame with MultiIndex, the keyword `level` can be used to\n        specify on which level the resampling needs to take place.\n\n        >>> days = pd.date_range(\"1/1/2000\", periods=4, freq=\"D\")\n        >>> df2 = pd.DataFrame(\n        ...     [\n        ...         [10, 50],\n        ...         [11, 60],\n        ...         [9, 40],\n        ...         [13, 100],\n        ...         [14, 50],\n        ...         [18, 100],\n        ...         [17, 40],\n        ...         [19, 50],\n        ...     ],\n        ...     columns=[\"price\", \"volume\"],\n        ...     index=pd.MultiIndex.from_product([days, [\"morning\", \"afternoon\"]]),\n        ... )\n        >>> df2\n                              price  volume\n        2000-01-01 morning       10      50\n                   afternoon     11      60\n        2000-01-02 morning        9      40\n                   afternoon     13     100\n        2000-01-03 morning       14      50\n                   afternoon     18     100\n        2000-01-04 morning       17      40\n                   afternoon     19      50\n        >>> df2.resample(\"D\", level=0).sum()\n                    price  volume\n        2000-01-01     21     110\n        2000-01-02     22     140\n        2000-01-03     32     150\n        2000-01-04     36      90\n\n        If you want to adjust the start of the bins based on a fixed timestamp:\n\n        >>> start, end = \"2000-10-01 23:30:00\", \"2000-10-02 00:30:00\"\n        >>> rng = pd.date_range(start, end, freq=\"7min\")\n        >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)\n        >>> ts\n        2000-10-01 23:30:00     0\n        2000-10-01 23:37:00     3\n        2000-10-01 23:44:00     6\n        2000-10-01 23:51:00     9\n        2000-10-01 23:58:00    12\n        2000-10-02 00:05:00    15\n        2000-10-02 00:12:00    18\n        2000-10-02 00:19:00    21\n        2000-10-02 00:26:00    24\n        Freq: 7min, dtype: int64\n\n        >>> ts.resample(\"17min\").sum()\n        2000-10-01 23:14:00     0\n        2000-10-01 23:31:00     9\n        2000-10-01 23:48:00    21\n        2000-10-02 00:05:00    54\n        2000-10-02 00:22:00    24\n        Freq: 17min, dtype: int64\n\n        >>> ts.resample(\"17min\", origin=\"epoch\").sum()\n        2000-10-01 23:18:00     0\n        2000-10-01 23:35:00    18\n        2000-10-01 23:52:00    27\n        2000-10-02 00:09:00    39\n        2000-10-02 00:26:00    24\n        Freq: 17min, dtype: int64\n\n        >>> ts.resample(\"17min\", origin=\"2000-01-01\").sum()\n        2000-10-01 23:24:00     3\n        2000-10-01 23:41:00    15\n        2000-10-01 23:58:00    45\n        2000-10-02 00:15:00    45\n        Freq: 17min, dtype: int64\n\n        If you want to adjust the start of the bins with an `offset` Timedelta, the two\n        following lines are equivalent:\n\n        >>> ts.resample(\"17min\", origin=\"start\").sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17min, dtype: int64\n\n        >>> ts.resample(\"17min\", offset=\"23h30min\").sum()\n        2000-10-01 23:30:00     9\n        2000-10-01 23:47:00    21\n        2000-10-02 00:04:00    54\n        2000-10-02 00:21:00    24\n        Freq: 17min, dtype: int64\n\n        If you want to take the largest Timestamp as the end of the bins:\n\n        >>> ts.resample(\"17min\", origin=\"end\").sum()\n        2000-10-01 23:35:00     0\n        2000-10-01 23:52:00    18\n        2000-10-02 00:09:00    27\n        2000-10-02 00:26:00    63\n        Freq: 17min, dtype: int64\n\n        In contrast with the `start_day`, you can use `end_day` to take the ceiling\n        midnight of the largest Timestamp as the end of the bins and drop the bins\n        not containing data:\n\n        >>> ts.resample(\"17min\", origin=\"end_day\").sum()\n        2000-10-01 23:38:00     3\n        2000-10-01 23:55:00    15\n        2000-10-02 00:12:00    45\n        2000-10-02 00:29:00    45\n        Freq: 17min, dtype: int64\n        \"\"\"\n        from pandas.core.resample import get_resampler\n\n        if convention is not lib.no_default:\n            warnings.warn(\n                f\"The 'convention' keyword in {type(self).__name__}.resample is \"\n                \"deprecated and will be removed in a future version. \"\n                \"Explicitly cast PeriodIndex to DatetimeIndex before resampling \"\n                \"instead.\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n        else:\n            convention = \"start\"\n\n        return get_resampler(\n            cast(\"Series | DataFrame\", self),\n            freq=rule,\n            label=label,\n            closed=closed,\n            convention=convention,\n            key=on,\n            level=level,\n            origin=origin,\n            offset=offset,\n            group_keys=group_keys,\n        )\n\n    @final\n    def rank(\n        self,\n        axis: Axis = 0,\n        method: Literal[\"average\", \"min\", \"max\", \"first\", \"dense\"] = \"average\",\n        numeric_only: bool = False,\n        na_option: Literal[\"keep\", \"top\", \"bottom\"] = \"keep\",\n        ascending: bool = True,\n        pct: bool = False,\n    ) -> Self:\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis.\n\n        By default, equal values are assigned a rank that is the average of the\n        ranks of those values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Index to direct ranking.\n            For `Series` this parameter is unused and defaults to 0.\n        method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n            How to rank the group of records that have the same value (i.e. ties):\n\n            * average: average rank of the group\n            * min: lowest rank in the group\n            * max: highest rank in the group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups.\n\n        numeric_only : bool, default False\n            For DataFrame objects, rank only numeric columns if set to True.\n\n            .. versionchanged:: 2.0.0\n                The default value of ``numeric_only`` is now ``False``.\n\n        na_option : {'keep', 'top', 'bottom'}, default 'keep'\n            How to rank NaN values:\n\n            * keep: assign NaN rank to NaN values\n            * top: assign lowest rank to NaN values\n            * bottom: assign highest rank to NaN values\n\n        ascending : bool, default True\n            Whether or not the elements should be ranked in ascending order.\n        pct : bool, default False\n            Whether or not to display the returned rankings in percentile\n            form.\n\n        Returns\n        -------\n        same type as caller\n            Return a Series or DataFrame with data ranks as values.\n\n        See Also\n        --------\n        core.groupby.DataFrameGroupBy.rank : Rank of values within each group.\n        core.groupby.SeriesGroupBy.rank : Rank of values within each group.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     data={\n        ...         \"Animal\": [\"cat\", \"penguin\", \"dog\", \"spider\", \"snake\"],\n        ...         \"Number_legs\": [4, 2, 4, 8, np.nan],\n        ...     }\n        ... )\n        >>> df\n            Animal  Number_legs\n        0      cat          4.0\n        1  penguin          2.0\n        2      dog          4.0\n        3   spider          8.0\n        4    snake          NaN\n\n        Ties are assigned the mean of the ranks (by default) for the group.\n\n        >>> s = pd.Series(range(5), index=list(\"abcde\"))\n        >>> s[\"d\"] = s[\"b\"]\n        >>> s.rank()\n        a    1.0\n        b    2.5\n        c    4.0\n        d    2.5\n        e    5.0\n        dtype: float64\n\n        The following example shows how the method behaves with the above\n        parameters:\n\n        * default_rank: this is the default behaviour obtained without using\n          any parameter.\n        * max_rank: setting ``method = 'max'`` the records that have the\n          same values are ranked using the highest rank (e.g.: since 'cat'\n          and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n        * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n          with NaN values they are placed at the bottom of the ranking.\n        * pct_rank: when setting ``pct = True``, the ranking is expressed as\n          percentile rank.\n\n        >>> df[\"default_rank\"] = df[\"Number_legs\"].rank()\n        >>> df[\"max_rank\"] = df[\"Number_legs\"].rank(method=\"max\")\n        >>> df[\"NA_bottom\"] = df[\"Number_legs\"].rank(na_option=\"bottom\")\n        >>> df[\"pct_rank\"] = df[\"Number_legs\"].rank(pct=True)\n        >>> df\n            Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n        0      cat          4.0           2.5       3.0        2.5     0.625\n        1  penguin          2.0           1.0       1.0        1.0     0.250\n        2      dog          4.0           2.5       3.0        2.5     0.625\n        3   spider          8.0           4.0       4.0        4.0     1.000\n        4    snake          NaN           NaN       NaN        5.0       NaN\n        \"\"\"\n        axis_int = self._get_axis_number(axis)\n\n        if na_option not in {\"keep\", \"top\", \"bottom\"}:\n            msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n            raise ValueError(msg)\n\n        def ranker(data):\n            if data.ndim == 2:\n                # i.e. DataFrame, we cast to ndarray\n                values = data.values\n            else:\n                # i.e. Series, can dispatch to EA\n                values = data._values\n\n            if isinstance(values, ExtensionArray):\n                ranks = values._rank(\n                    axis=axis_int,\n                    method=method,\n                    ascending=ascending,\n                    na_option=na_option,\n                    pct=pct,\n                )\n            else:\n                ranks = algos.rank(\n                    values,\n                    axis=axis_int,\n                    method=method,\n                    ascending=ascending,\n                    na_option=na_option,\n                    pct=pct,\n                )\n\n            ranks_obj = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks_obj.__finalize__(self, method=\"rank\")\n\n        if numeric_only:\n            if self.ndim == 1 and not is_numeric_dtype(self.dtype):\n                # GH#47500\n                raise TypeError(\n                    \"Series.rank does not allow numeric_only=True with \"\n                    \"non-numeric dtype.\"\n                )\n            data = self._get_numeric_data()\n        else:\n            data = self\n\n        return ranker(data)\n\n    @doc(_shared_docs[\"compare\"], klass=_shared_doc_kwargs[\"klass\"])\n    def compare(\n        self,\n        other: Self,\n        align_axis: Axis = 1,\n        keep_shape: bool = False,\n        keep_equal: bool = False,\n        result_names: Suffixes = (\"self\", \"other\"),\n    ):\n        if type(self) is not type(other):\n            cls_self, cls_other = type(self).__name__, type(other).__name__\n            raise TypeError(\n                f\"can only compare '{cls_self}' (not '{cls_other}') with '{cls_self}'\"\n            )\n\n        # error: Unsupported left operand type for & (\"Self\")\n        mask = ~((self == other) | (self.isna() & other.isna()))  # type: ignore[operator]\n        mask.fillna(True, inplace=True)\n\n        if not keep_equal:\n            self = self.where(mask)\n            other = other.where(mask)\n\n        if not keep_shape:\n            if isinstance(self, ABCDataFrame):\n                cmask = mask.any()\n                rmask = mask.any(axis=1)\n                self = self.loc[rmask, cmask]\n                other = other.loc[rmask, cmask]\n            else:\n                self = self[mask]\n                other = other[mask]\n        if not isinstance(result_names, tuple):\n            raise TypeError(\n                f\"Passing 'result_names' as a {type(result_names)} is not \"\n                \"supported. Provide 'result_names' as a tuple instead.\"\n            )\n\n        if align_axis in (1, \"columns\"):  # This is needed for Series\n            axis = 1\n        else:\n            axis = self._get_axis_number(align_axis)\n\n        # error: List item 0 has incompatible type \"NDFrame\"; expected\n        #  \"Union[Series, DataFrame]\"\n        diff = concat(\n            [self, other],  # type: ignore[list-item]\n            axis=axis,\n            keys=result_names,\n        )\n\n        if axis >= self.ndim:\n            # No need to reorganize data if stacking on new axis\n            # This currently applies for stacking two Series on columns\n            return diff\n\n        ax = diff._get_axis(axis)\n        ax_names = np.array(ax.names)\n\n        # set index names to positions to avoid confusion\n        ax.names = np.arange(len(ax_names))\n\n        # bring self-other to inner level\n        order = list(range(1, ax.nlevels)) + [0]\n        if isinstance(diff, ABCDataFrame):\n            diff = diff.reorder_levels(order, axis=axis)\n        else:\n            diff = diff.reorder_levels(order)\n\n        # restore the index names in order\n        diff._get_axis(axis=axis).names = ax_names[order]\n\n        # reorder axis to keep things organized\n        indices = (\n            np.arange(diff.shape[axis])\n            .reshape([2, diff.shape[axis] // 2])\n            .T.reshape(-1)\n        )\n        diff = diff.take(indices, axis=axis)\n\n        return diff\n\n    @final\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        axes_single_arg=_shared_doc_kwargs[\"axes_single_arg\"],\n    )\n    def align(\n        self,\n        other: NDFrameT,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level: Level | None = None,\n        copy: bool | lib.NoDefault = lib.no_default,\n        fill_value: Hashable | None = None,\n    ) -> tuple[Self, NDFrameT]:\n        \"\"\"\n        Align two objects on their axes with the specified join method.\n\n        Join method is specified for each axis Index.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n            The object to align with.\n        join : {{'outer', 'inner', 'left', 'right'}}, default 'outer'\n            Type of alignment to be performed.\n\n            * left: use only keys from left frame, preserve key order.\n            * right: use only keys from right frame, preserve key order.\n            * outer: use union of keys from both frames, sort keys lexicographically.\n            * inner: use intersection of keys from both frames,\n              preserve the order of the left keys.\n\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None).\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        copy : bool, default False\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        fill_value : scalar, default np.nan\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n\n        Returns\n        -------\n        tuple of ({klass}, type of other)\n            Aligned objects.\n\n        See Also\n        --------\n        Series.align : Align two objects on their axes with specified join method.\n        DataFrame.align : Align two objects on their axes with specified join method.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=[\"D\", \"B\", \"E\", \"A\"], index=[1, 2]\n        ... )\n        >>> other = pd.DataFrame(\n        ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],\n        ...     columns=[\"A\", \"B\", \"C\", \"D\"],\n        ...     index=[2, 3, 4],\n        ... )\n        >>> df\n           D  B  E  A\n        1  1  2  3  4\n        2  6  7  8  9\n        >>> other\n            A    B    C    D\n        2   10   20   30   40\n        3   60   70   80   90\n        4  600  700  800  900\n\n        Align on columns:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=1)\n        >>> left\n           A  B   C  D  E\n        1  4  2 NaN  1  3\n        2  9  7 NaN  6  8\n        >>> right\n            A    B    C    D   E\n        2   10   20   30   40 NaN\n        3   60   70   80   90 NaN\n        4  600  700  800  900 NaN\n\n        We can also align on the index:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=0)\n        >>> left\n            D    B    E    A\n        1  1.0  2.0  3.0  4.0\n        2  6.0  7.0  8.0  9.0\n        3  NaN  NaN  NaN  NaN\n        4  NaN  NaN  NaN  NaN\n        >>> right\n            A      B      C      D\n        1    NaN    NaN    NaN    NaN\n        2   10.0   20.0   30.0   40.0\n        3   60.0   70.0   80.0   90.0\n        4  600.0  700.0  800.0  900.0\n\n        Finally, the default `axis=None` will align on both index and columns:\n\n        >>> left, right = df.align(other, join=\"outer\", axis=None)\n        >>> left\n             A    B   C    D    E\n        1  4.0  2.0 NaN  1.0  3.0\n        2  9.0  7.0 NaN  6.0  8.0\n        3  NaN  NaN NaN  NaN  NaN\n        4  NaN  NaN NaN  NaN  NaN\n        >>> right\n               A      B      C      D   E\n        1    NaN    NaN    NaN    NaN NaN\n        2   10.0   20.0   30.0   40.0 NaN\n        3   60.0   70.0   80.0   90.0 NaN\n        4  600.0  700.0  800.0  900.0 NaN\n        \"\"\"\n        self._check_copy_deprecation(copy)\n\n        _right: DataFrame | Series\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, ABCDataFrame):\n            left, _right, join_index = self._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                fill_value=fill_value,\n            )\n\n        elif isinstance(other, ABCSeries):\n            left, _right, join_index = self._align_series(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                fill_value=fill_value,\n            )\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")\n\n        right = cast(NDFrameT, _right)\n        if self.ndim == 1 or axis == 0:\n            # If we are aligning timezone-aware DatetimeIndexes and the timezones\n            #  do not match, convert both to UTC.\n            if isinstance(left.index.dtype, DatetimeTZDtype):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        # GH#33671 copy to ensure we don't change the index on\n                        #  our original Series\n                        left = left.copy(deep=False)\n                        right = right.copy(deep=False)\n                        left.index = join_index\n                        right.index = join_index\n\n        left = left.__finalize__(self)\n        right = right.__finalize__(other)\n        return left, right\n\n    @final\n    def _align_frame(\n        self,\n        other: DataFrame,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level=None,\n        fill_value=None,\n    ) -> tuple[Self, DataFrame, Index | None]:\n        # defaults\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n\n        is_series = isinstance(self, ABCSeries)\n\n        if (axis is None or axis == 0) and not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n        if (\n            (axis is None or axis == 1)\n            and not is_series\n            and not self.columns.equals(other.columns)\n        ):\n            join_columns, clidx, cridx = self.columns.join(\n                other.columns, how=join, level=level, return_indexers=True\n            )\n\n        if is_series:\n            reindexers = {0: [join_index, ilidx]}\n        else:\n            reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n        left = self._reindex_with_indexers(\n            reindexers, fill_value=fill_value, allow_dups=True\n        )\n        # other must be always DataFrame\n        right = other._reindex_with_indexers(\n            {0: [join_index, iridx], 1: [join_columns, cridx]},\n            fill_value=fill_value,\n            allow_dups=True,\n        )\n        return left, right, join_index\n\n    @final\n    def _align_series(\n        self,\n        other: Series,\n        join: AlignJoin = \"outer\",\n        axis: Axis | None = None,\n        level=None,\n        fill_value=None,\n    ) -> tuple[Self, Series, Index | None]:\n        is_series = isinstance(self, ABCSeries)\n\n        if (not is_series and axis is None) or axis not in [None, 0, 1]:\n            raise ValueError(\"Must specify axis=0 or 1\")\n\n        if is_series and axis == 1:\n            raise ValueError(\"cannot align series to a series other than axis 0\")\n\n        # series/series compat, other must always be a Series\n        if not axis:\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if is_series:\n                left = self._reindex_indexer(join_index, lidx)\n            elif lidx is None or join_index is None:\n                left = self.copy(deep=False)\n            else:\n                new_mgr = self._mgr.reindex_indexer(join_index, lidx, axis=1)\n                left = self._constructor_from_mgr(new_mgr, axes=new_mgr.axes)\n\n            right = other._reindex_indexer(join_index, ridx)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._mgr\n            join_index = self.axes[1]\n            lidx, ridx = None, None\n            if not join_index.equals(other.index):\n                join_index, lidx, ridx = join_index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                bm_axis = self._get_block_manager_axis(1)\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=bm_axis)\n\n            left = self._constructor_from_mgr(fdata, axes=fdata.axes)\n\n            right = other._reindex_indexer(join_index, ridx)\n\n        # fill\n        fill_na = notna(fill_value)\n        if fill_na:\n            left = left.fillna(fill_value)\n            right = right.fillna(fill_value)\n\n        return left, right, join_index\n\n    @overload\n    def _where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level=...,\n    ) -> Self: ...\n\n    @overload\n    def _where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level=...,\n    ) -> None: ...\n\n    @overload\n    def _where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool,\n        axis: Axis | None = ...,\n        level=...,\n    ) -> Self | None: ...\n\n    @final\n    def _where(\n        self,\n        cond,\n        other=lib.no_default,\n        *,\n        inplace: bool = False,\n        axis: Axis | None = None,\n        level=None,\n    ) -> Self | None:\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        # align the cond to same shape as myself\n        cond = common.apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            # CoW: Make sure reference is not kept alive\n            if cond.ndim == 1 and self.ndim == 2:\n                cond = cond._constructor_expanddim(\n                    {i: cond for i in range(len(self.columns))},\n                    copy=False,\n                )\n                cond.columns = self.columns\n            cond = cond.align(self, join=\"right\")[0]\n        else:\n            if not hasattr(cond, \"shape\"):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError(\"Array conditional must be same shape as self\")\n            cond = self._constructor(cond, **self._construct_axes_dict(), copy=False)\n\n        # make sure we are boolean\n        fill_value = bool(inplace)\n        cond = cond.fillna(fill_value)\n        cond = cond.infer_objects()\n\n        msg = \"Boolean array expected for the condition, not {dtype}\"\n\n        if not cond.empty:\n            if not isinstance(cond, ABCDataFrame):\n                # This is a single-dimensional object.\n                if not is_bool_dtype(cond):\n                    raise TypeError(msg.format(dtype=cond.dtype))\n            else:\n                for block in cond._mgr.blocks:\n                    if not is_bool_dtype(block.dtype):\n                        raise TypeError(msg.format(dtype=block.dtype))\n                if cond._mgr.any_extension_types:\n                    # GH51574: avoid object ndarray conversion later on\n                    cond = cond._constructor(\n                        cond.to_numpy(dtype=bool, na_value=fill_value),\n                        **cond._construct_axes_dict(),\n                    )\n        else:\n            # GH#21947 we have an empty DataFrame/Series, could be object-dtype\n            cond = cond.astype(bool)\n\n        cond = -cond if inplace else cond\n        cond = cond.reindex(self._info_axis, axis=self._info_axis_number)\n\n        # try to align with other\n        if isinstance(other, NDFrame):\n            # align with me\n            if other.ndim <= self.ndim:\n                # CoW: Make sure reference is not kept alive\n                other = self.align(\n                    other,\n                    join=\"left\",\n                    axis=axis,\n                    level=level,\n                    fill_value=None,\n                )[1]\n\n                # if we are NOT aligned, raise as we cannot where index\n                if axis is None and not other._indexed_same(self):\n                    raise InvalidIndexError\n\n                if other.ndim < self.ndim:\n                    # TODO(EA2D): avoid object-dtype cast in EA case GH#38729\n                    other = other._values\n                    if axis == 0:\n                        other = np.reshape(other, (-1, 1))\n                    elif axis == 1:\n                        other = np.reshape(other, (1, -1))\n\n                    other = np.broadcast_to(other, self.shape)\n\n            # slice me out of the other\n            else:\n                raise NotImplementedError(\n                    \"cannot align with a higher dimensional NDFrame\"\n                )\n\n        elif not isinstance(other, (MultiIndex, NDFrame)):\n            # mainly just catching Index here\n            other = extract_array(other, extract_numpy=True)\n\n        if isinstance(other, (np.ndarray, ExtensionArray)):\n            if other.shape != self.shape:\n                if self.ndim != 1:\n                    # In the ndim == 1 case we may have\n                    #  other length 1, which we treat as scalar (GH#2745, GH#4192)\n                    #  or len(other) == icond.sum(), which we treat like\n                    #  __setitem__ (GH#3235)\n                    raise ValueError(\n                        \"other must be the same shape as self when an ndarray\"\n                    )\n\n            # we are the same shape, so create an actual object for alignment\n            else:\n                other = self._constructor(\n                    other, **self._construct_axes_dict(), copy=False\n                )\n\n        if axis is None:\n            axis = 0\n\n        if self.ndim == getattr(other, \"ndim\", 0):\n            align = True\n        else:\n            align = self._get_axis_number(axis) == 1\n\n        if inplace:\n            # we may have different type blocks come out of putmask, so\n            # reconstruct the block manager\n\n            new_data = self._mgr.putmask(mask=cond, new=other, align=align)\n            result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n            return self._update_inplace(result)\n\n        else:\n            new_data = self._mgr.where(\n                other=other,\n                cond=cond,\n                align=align,\n            )\n            result = self._constructor_from_mgr(new_data, axes=new_data.axes)\n            return result.__finalize__(self)\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self: ...\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> None: ...\n\n    @overload\n    def where(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        klass=_shared_doc_kwargs[\"klass\"],\n        cond=\"True\",\n        cond_rev=\"False\",\n        name=\"where\",\n        name_other=\"mask\",\n    )\n    def where(\n        self,\n        cond,\n        other=np.nan,\n        *,\n        inplace: bool = False,\n        axis: Axis | None = None,\n        level: Level | None = None,\n    ) -> Self | None:\n        \"\"\"\n        Replace values where the condition is {cond_rev}.\n\n        Parameters\n        ----------\n        cond : bool {klass}, array-like, or callable\n            Where `cond` is {cond}, keep the original value. Where\n            {cond_rev}, replace with corresponding value from `other`.\n            If `cond` is callable, it is computed on the {klass} and\n            should return boolean {klass} or array. The callable must\n            not change input {klass} (though pandas doesn't check it).\n        other : scalar, {klass}, or callable\n            Entries where `cond` is {cond_rev} are replaced with\n            corresponding value from `other`.\n            If other is callable, it is computed on the {klass} and\n            should return scalar or {klass}. The callable must not\n            change input {klass} (though pandas doesn't check it).\n            If not specified, entries will be filled with the corresponding\n            NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension\n            dtypes).\n        inplace : bool, default False\n            Whether to perform the operation in place on the data.\n        axis : int, default None\n            Alignment axis if needed. For `Series` this parameter is\n            unused and defaults to 0.\n        level : int, default None\n            Alignment level if needed.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            When applied to a Series, the function will return a Series,\n            and when applied to a DataFrame, it will return a DataFrame;\n            if ``inplace=True``, it will return None.\n\n        See Also\n        --------\n        :func:`DataFrame.{name_other}` : Return an object of same shape as\n            caller.\n        :func:`Series.{name_other}` : Return an object of same shape as\n            caller.\n\n        Notes\n        -----\n        The {name} method is an application of the if-then idiom. For each\n        element in the caller, if ``cond`` is ``{cond}`` the\n        element is used; otherwise the corresponding element from\n        ``other`` is used. If the axis of ``other`` does not align with axis of\n        ``cond`` {klass}, the values of ``cond`` on misaligned index positions\n        will be filled with {cond_rev}.\n\n        The signature for :func:`Series.where` or\n        :func:`DataFrame.where` differs from :func:`numpy.where`.\n        Roughly ``df1.where(m, df2)`` is equivalent to ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``{name}`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        The dtype of the object takes precedence. The fill value is casted to\n        the object's dtype, if this can be done losslessly.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n        dtype: float64\n        >>> s.mask(s > 0)\n        0    0.0\n        1    NaN\n        2    NaN\n        3    NaN\n        4    NaN\n        dtype: float64\n\n        >>> s = pd.Series(range(5))\n        >>> t = pd.Series([True, False])\n        >>> s.where(t, 99)\n        0     0\n        1    99\n        2    99\n        3    99\n        4    99\n        dtype: int64\n        >>> s.mask(t, 99)\n        0    99\n        1     1\n        2    99\n        3    99\n        4    99\n        dtype: int64\n\n        >>> s.where(s > 1, 10)\n        0    10\n        1    10\n        2    2\n        3    3\n        4    4\n        dtype: int64\n        >>> s.mask(s > 1, 10)\n        0     0\n        1     1\n        2    10\n        3    10\n        4    10\n        dtype: int64\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=[\"A\", \"B\"])\n        >>> df\n           A  B\n        0  0  1\n        1  2  3\n        2  4  5\n        3  6  7\n        4  8  9\n        >>> m = df % 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        other = common.apply_if_callable(other, self)\n        return self._where(cond, other, inplace=inplace, axis=axis, level=level)\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[False] = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self: ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: Literal[True],\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> None: ...\n\n    @overload\n    def mask(\n        self,\n        cond,\n        other=...,\n        *,\n        inplace: bool = ...,\n        axis: Axis | None = ...,\n        level: Level = ...,\n    ) -> Self | None: ...\n\n    @final\n    @doc(\n        where,\n        klass=_shared_doc_kwargs[\"klass\"],\n        cond=\"False\",\n        cond_rev=\"True\",\n        name=\"mask\",\n        name_other=\"where\",\n    )\n    def mask(\n        self,\n        cond,\n        other=lib.no_default,\n        *,\n        inplace: bool = False,\n        axis: Axis | None = None,\n        level: Level | None = None,\n    ) -> Self | None:\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            if not PYPY:\n                if sys.getrefcount(self) <= REF_COUNT:\n                    warnings.warn(\n                        _chained_assignment_method_msg,\n                        ChainedAssignmentError,\n                        stacklevel=2,\n                    )\n\n        cond = common.apply_if_callable(cond, self)\n        other = common.apply_if_callable(other, self)\n\n        # see gh-21891\n        if not hasattr(cond, \"__invert__\"):\n            cond = np.array(cond)\n\n        return self._where(\n            ~cond,\n            other=other,\n            inplace=inplace,\n            axis=axis,\n            level=level,\n        )\n\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def shift(\n        self,\n        periods: int | Sequence[int] = 1,\n        freq=None,\n        axis: Axis = 0,\n        fill_value: Hashable = lib.no_default,\n        suffix: str | None = None,\n    ) -> Self | DataFrame:\n        \"\"\"\n        Shift index by desired number of periods with an optional time `freq`.\n\n        When `freq` is not passed, shift the index without realigning the data.\n        If `freq` is passed (in this case, the index must be date or datetime,\n        or it will raise a `NotImplementedError`), the index will be\n        increased using the periods and the `freq`. `freq` can be inferred\n        when specified as \"infer\" as long as either freq or inferred_freq\n        attribute is set in the index.\n\n        Parameters\n        ----------\n        periods : int or Sequence\n            Number of periods to shift. Can be positive or negative.\n            If an iterable of ints, the data will be shifted once by each int.\n            This is equivalent to shifting by one value at a time and\n            concatenating all resulting frames. The resulting columns will have\n            the shift suffixed to their column names. For multiple periods,\n            axis must not be 1.\n        freq : DateOffset, tseries.offsets, timedelta, or str, optional\n            Offset to use from the tseries module or time rule (e.g. 'EOM').\n            If `freq` is specified then the index values are shifted but the\n            data is not realigned. That is, use `freq` if you would like to\n            extend the index when shifting and preserve the original data.\n            If `freq` is specified as \"infer\" then it will be inferred from\n            the freq or inferred_freq attributes of the index. If neither of\n            those attributes exist, a ValueError is thrown.\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Shift direction. For `Series` this parameter is unused and defaults to 0.\n        fill_value : object, optional\n            The scalar value to use for newly introduced missing values.\n            the default depends on the dtype of `self`.\n            For Boolean and numeric NumPy data types, ``np.nan`` is used.\n            For datetime, timedelta, or period data, etc. :attr:`NaT` is used.\n            For extension dtypes, ``self.dtype.na_value`` is used.\n        suffix : str, optional\n            If str and periods is an iterable, this is added after the column\n            name and before the shift value for each shifted column name.\n\n        Returns\n        -------\n        {klass}\n            Copy of input object, shifted.\n\n        See Also\n        --------\n        Index.shift : Shift values of Index.\n        DatetimeIndex.shift : Shift values of DatetimeIndex.\n        PeriodIndex.shift : Shift values of PeriodIndex.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     [[10, 13, 17], [20, 23, 27], [15, 18, 22], [30, 33, 37], [45, 48, 52]],\n        ...     columns=[\"Col1\", \"Col2\", \"Col3\"],\n        ...     index=pd.date_range(\"2020-01-01\", \"2020-01-05\"),\n        ... )\n        >>> df\n                    Col1  Col2  Col3\n        2020-01-01    10    13    17\n        2020-01-02    20    23    27\n        2020-01-03    15    18    22\n        2020-01-04    30    33    37\n        2020-01-05    45    48    52\n\n        >>> df.shift(periods=3)\n                    Col1  Col2  Col3\n        2020-01-01   NaN   NaN   NaN\n        2020-01-02   NaN   NaN   NaN\n        2020-01-03   NaN   NaN   NaN\n        2020-01-04  10.0  13.0  17.0\n        2020-01-05  20.0  23.0  27.0\n\n        >>> df.shift(periods=1, axis=\"columns\")\n                    Col1  Col2  Col3\n        2020-01-01   NaN    10    13\n        2020-01-02   NaN    20    23\n        2020-01-03   NaN    15    18\n        2020-01-04   NaN    30    33\n        2020-01-05   NaN    45    48\n\n        >>> df.shift(periods=3, fill_value=0)\n                    Col1  Col2  Col3\n        2020-01-01     0     0     0\n        2020-01-02     0     0     0\n        2020-01-03     0     0     0\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n\n        >>> df.shift(periods=3, freq=\"D\")\n                    Col1  Col2  Col3\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n        2020-01-06    15    18    22\n        2020-01-07    30    33    37\n        2020-01-08    45    48    52\n\n        >>> df.shift(periods=3, freq=\"infer\")\n                    Col1  Col2  Col3\n        2020-01-04    10    13    17\n        2020-01-05    20    23    27\n        2020-01-06    15    18    22\n        2020-01-07    30    33    37\n        2020-01-08    45    48    52\n\n        >>> df[\"Col1\"].shift(periods=[0, 1, 2])\n                    Col1_0  Col1_1  Col1_2\n        2020-01-01      10     NaN     NaN\n        2020-01-02      20    10.0     NaN\n        2020-01-03      15    20.0    10.0\n        2020-01-04      30    15.0    20.0\n        2020-01-05      45    30.0    15.0\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        if freq is not None and fill_value is not lib.no_default:\n            # GH#53832\n            raise ValueError(\n                \"Passing a 'freq' together with a 'fill_value' is not allowed.\"\n            )\n\n        if periods == 0:\n            return self.copy(deep=False)\n\n        if is_list_like(periods) and isinstance(self, ABCSeries):\n            return self.to_frame().shift(\n                periods=periods, freq=freq, axis=axis, fill_value=fill_value\n            )\n        periods = cast(int, periods)\n\n        if freq is None:\n            # when freq is None, data is shifted, index is not\n            axis = self._get_axis_number(axis)\n            assert axis == 0  # axis == 1 cases handled in DataFrame.shift\n            new_data = self._mgr.shift(periods=periods, fill_value=fill_value)\n            return self._constructor_from_mgr(\n                new_data, axes=new_data.axes\n            ).__finalize__(self, method=\"shift\")\n\n        return self._shift_with_freq(periods, axis, freq)\n\n    @final\n    def _shift_with_freq(self, periods: int, axis: int, freq) -> Self:\n        # see shift.__doc__\n        # when freq is given, index is shifted, data is not\n        index = self._get_axis(axis)\n\n        if freq == \"infer\":\n            freq = getattr(index, \"freq\", None)\n\n            if freq is None:\n                freq = getattr(index, \"inferred_freq\", None)\n\n            if freq is None:\n                msg = \"Freq was not set in the index hence cannot be inferred\"\n                raise ValueError(msg)\n\n        elif isinstance(freq, str):\n            is_period = isinstance(index, PeriodIndex)\n            freq = to_offset(freq, is_period=is_period)\n\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq != orig_freq:\n                assert orig_freq is not None  # for mypy\n                raise ValueError(\n                    f\"Given freq {PeriodDtype(freq)._freqstr} \"\n                    f\"does not match PeriodIndex freq \"\n                    f\"{PeriodDtype(orig_freq)._freqstr}\"\n                )\n            new_ax: Index = index.shift(periods)\n        else:\n            new_ax = index.shift(periods, freq)\n\n        result = self.set_axis(new_ax, axis=axis)\n        return result.__finalize__(self, method=\"shift\")\n\n    @final\n    def truncate(\n        self,\n        before=None,\n        after=None,\n        axis: Axis | None = None,\n        copy: bool | lib.NoDefault = lib.no_default,\n    ) -> Self:\n        \"\"\"\n        Truncate a Series or DataFrame before and after some index value.\n\n        This is a useful shorthand for boolean indexing based on index\n        values above or below certain thresholds.\n\n        Parameters\n        ----------\n        before : date, str, int\n            Truncate all rows before this index value.\n        after : date, str, int\n            Truncate all rows after this index value.\n        axis : {0 or 'index', 1 or 'columns'}, optional\n            Axis to truncate. Truncates the index (rows) by default.\n            For `Series` this parameter is unused and defaults to 0.\n        copy : bool, default is False,\n            Return a copy of the truncated section.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n\n        Returns\n        -------\n        type of caller\n            The truncated Series or DataFrame.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by label.\n        DataFrame.iloc : Select a subset of a DataFrame by position.\n\n        Notes\n        -----\n        If the index being truncated contains only datetime values,\n        `before` and `after` may be specified as strings instead of\n        Timestamps.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"A\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n        ...         \"B\": [\"f\", \"g\", \"h\", \"i\", \"j\"],\n        ...         \"C\": [\"k\", \"l\", \"m\", \"n\", \"o\"],\n        ...     },\n        ...     index=[1, 2, 3, 4, 5],\n        ... )\n        >>> df\n           A  B  C\n        1  a  f  k\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n        5  e  j  o\n\n        >>> df.truncate(before=2, after=4)\n           A  B  C\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n\n        The columns of a DataFrame can be truncated.\n\n        >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n           A  B\n        1  a  f\n        2  b  g\n        3  c  h\n        4  d  i\n        5  e  j\n\n        For Series, only rows can be truncated.\n\n        >>> df[\"A\"].truncate(before=2, after=4)\n        2    b\n        3    c\n        4    d\n        Name: A, dtype: object\n\n        The index values in ``truncate`` can be datetimes or string\n        dates.\n\n        >>> dates = pd.date_range(\"2016-01-01\", \"2016-02-01\", freq=\"s\")\n        >>> df = pd.DataFrame(index=dates, data={\"A\": 1})\n        >>> df.tail()\n                             A\n        2016-01-31 23:59:56  1\n        2016-01-31 23:59:57  1\n        2016-01-31 23:59:58  1\n        2016-01-31 23:59:59  1\n        2016-02-01 00:00:00  1\n\n        >>> df.truncate(\n        ...     before=pd.Timestamp(\"2016-01-05\"), after=pd.Timestamp(\"2016-01-10\")\n        ... ).tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Because the index is a DatetimeIndex containing only dates, we can\n        specify `before` and `after` as strings. They will be coerced to\n        Timestamps before truncation.\n\n        >>> df.truncate(\"2016-01-05\", \"2016-01-10\").tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Note that ``truncate`` assumes a 0 value for any unspecified time\n        component (midnight). This differs from partial string slicing, which\n        returns any partially matching dates.\n\n        >>> df.loc[\"2016-01-05\":\"2016-01-10\", :].tail()\n                             A\n        2016-01-10 23:59:55  1\n        2016-01-10 23:59:56  1\n        2016-01-10 23:59:57  1\n        2016-01-10 23:59:58  1\n        2016-01-10 23:59:59  1\n        \"\"\"\n        self._check_copy_deprecation(copy)\n\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        # GH 17935\n        # Check that index is sorted\n        if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n            raise ValueError(\"truncate requires a sorted index\")\n\n        # if we have a date index, convert to dates, otherwise\n        # treat like a slice\n        if ax._is_all_dates:\n            from pandas.core.tools.datetimes import to_datetime\n\n            before = to_datetime(before)\n            after = to_datetime(after)\n\n        if before is not None and after is not None and before > after:\n            raise ValueError(f\"Truncate: {after} must be after {before}\")\n\n        if len(ax) > 1 and ax.is_monotonic_decreasing and ax.nunique() > 1:\n            before, after = after, before\n\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n\n        result = result.copy(deep=False)\n\n        return result\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def tz_convert(\n        self,\n        tz,\n        axis: Axis = 0,\n        level=None,\n        copy: bool | lib.NoDefault = lib.no_default,\n    ) -> Self:\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : str or tzinfo object or None\n            Target time zone. Passing ``None`` will convert to\n            UTC and remove the timezone information.\n        axis : {{0 or 'index', 1 or 'columns'}}, default 0\n            The axis to convert\n        level : int, str, default None\n            If axis is a MultiIndex, convert a specific level. Otherwise\n            must be None.\n        copy : bool, default False\n            Also make a copy of the underlying data.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n\n        Returns\n        -------\n        {klass}\n            Object with time zone converted axis.\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n\n        See Also\n        --------\n        DataFrame.tz_localize: Localize tz-naive index of DataFrame to target time zone.\n        Series.tz_localize: Localize tz-naive index of Series to target time zone.\n\n        Examples\n        --------\n        Change to another time zone:\n\n        >>> s = pd.Series(\n        ...     [1],\n        ...     index=pd.DatetimeIndex([\"2018-09-15 01:30:00+02:00\"]),\n        ... )\n        >>> s.tz_convert(\"Asia/Shanghai\")\n        2018-09-15 07:30:00+08:00    1\n        dtype: int64\n\n        Pass None to convert to UTC and get a tz-naive index:\n\n        >>> s = pd.Series([1], index=pd.DatetimeIndex([\"2018-09-15 01:30:00+02:00\"]))\n        >>> s.tz_convert(None)\n        2018-09-14 23:30:00    1\n        dtype: int64\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, \"tz_convert\"):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                    )\n                ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(f\"The level {level} is not valid\")\n            ax = _tz_convert(ax, tz)\n\n        result = self.copy(deep=False)\n        result = result.set_axis(ax, axis=axis)\n        return result.__finalize__(self, method=\"tz_convert\")\n\n    @final\n    @doc(klass=_shared_doc_kwargs[\"klass\"])\n    def tz_localize(\n        self,\n        tz,\n        axis: Axis = 0,\n        level=None,\n        copy: bool | lib.NoDefault = lib.no_default,\n        ambiguous: TimeAmbiguous = \"raise\",\n        nonexistent: TimeNonexistent = \"raise\",\n    ) -> Self:\n        \"\"\"\n        Localize time zone naive index of a Series or DataFrame to target time zone.\n\n        This operation localizes the Index. To localize the values in a\n        time zone naive Series, use :meth:`Series.dt.tz_localize`.\n\n        Parameters\n        ----------\n        tz : str or tzinfo or None\n            Time zone to localize. Passing ``None`` will remove the\n            time zone information and preserve local time.\n        axis : {{0 or 'index', 1 or 'columns'}}, default 0\n            The axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None.\n        copy : bool, default False\n            Also make a copy of the underlying data.\n\n            .. note::\n                The `copy` keyword will change behavior in pandas 3.0.\n                `Copy-on-Write\n                <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__\n                will be enabled by default, which means that all methods with a\n                `copy` keyword will use a lazy copy mechanism to defer the copy and\n                ignore the `copy` keyword. The `copy` keyword will be removed in a\n                future version of pandas.\n\n                You can already get the future behavior and improvements through\n                enabling copy on write ``pd.options.mode.copy_on_write = True``\n\n            .. deprecated:: 3.0.0\n        ambiguous : 'infer', bool, bool-ndarray, 'NaT', default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool (or bool-ndarray) where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise a ValueError if there are ambiguous\n              times.\n        nonexistent : str, default 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST. Valid values are:\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise a ValueError if there are\n              nonexistent times.\n\n        Returns\n        -------\n        {klass}\n            Same type as the input, with time zone naive or aware index, depending on\n            ``tz``.\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n\n        See Also\n        --------\n        Series.dt.tz_localize: Localize the values in a time zone naive Series.\n        Timestamp.tz_localize: Localize the Timestamp to a timezone.\n\n        Examples\n        --------\n        Localize local times:\n\n        >>> s = pd.Series(\n        ...     [1],\n        ...     index=pd.DatetimeIndex([\"2018-09-15 01:30:00\"]),\n        ... )\n        >>> s.tz_localize(\"CET\")\n        2018-09-15 01:30:00+02:00    1\n        dtype: int64\n\n        Pass None to convert to tz-naive index and preserve local time:\n\n        >>> s = pd.Series([1], index=pd.DatetimeIndex([\"2018-09-15 01:30:00+02:00\"]))\n        >>> s.tz_localize(None)\n        2018-09-15 01:30:00    1\n        dtype: int64\n\n        Be careful with DST changes. When there is sequential data, pandas\n        can infer the DST time:\n\n        >>> s = pd.Series(\n        ...     range(7),\n        ...     index=pd.DatetimeIndex(\n        ...         [\n        ...             \"2018-10-28 01:30:00\",\n        ...             \"2018-10-28 02:00:00\",\n        ...             \"2018-10-28 02:30:00\",\n        ...             \"2018-10-28 02:00:00\",\n        ...             \"2018-10-28 02:30:00\",\n        ...             \"2018-10-28 03:00:00\",\n        ...             \"2018-10-28 03:30:00\",\n        ...         ]\n        ...     ),\n        ... )\n        >>> s.tz_localize(\"CET\", ambiguous=\"infer\")\n        2018-10-28 01:30:00+02:00    0\n        2018-10-28 02:00:00+02:00    1\n        2018-10-28 02:30:00+02:00    2\n        2018-10-28 02:00:00+01:00    3\n        2018-10-28 02:30:00+01:00    4\n        2018-10-28 03:00:00+01:00    5\n        2018-10-28 03:30:00+01:00    6\n        dtype: int64\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.Series(\n        ...     range(3),\n        ...     index=pd.DatetimeIndex(\n        ...         [\n        ...             \"2018-10-28 01:20:00\",\n        ...             \"2018-10-28 02:36:00\",\n        ...             \"2018-10-28 03:46:00\",\n        ...         ]\n        ...     ),\n        ... )\n        >>> s.tz_localize(\"CET\", ambiguous=np.array([True, True, False]))\n        2018-10-28 01:20:00+02:00    0\n        2018-10-28 02:36:00+02:00    1\n        2018-10-28 03:46:00+01:00    2\n        dtype: int64\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backward with a timedelta object or `'shift_forward'`\n        or `'shift_backward'`.\n\n        >>> dti = pd.DatetimeIndex(\n        ...     [\"2015-03-29 02:30:00\", \"2015-03-29 03:30:00\"], dtype=\"M8[ns]\"\n        ... )\n        >>> s = pd.Series(range(2), index=dti)\n        >>> s.tz_localize(\"Europe/Warsaw\", nonexistent=\"shift_forward\")\n        2015-03-29 03:00:00+02:00    0\n        2015-03-29 03:30:00+02:00    1\n        dtype: int64\n        >>> s.tz_localize(\"Europe/Warsaw\", nonexistent=\"shift_backward\")\n        2015-03-29 01:59:59.999999999+01:00    0\n        2015-03-29 03:30:00+02:00              1\n        dtype: int64\n        >>> s.tz_localize(\"Europe/Warsaw\", nonexistent=pd.Timedelta(\"1h\"))\n        2015-03-29 03:30:00+02:00    0\n        2015-03-29 03:30:00+02:00    1\n        dtype: int64\n        \"\"\"\n        self._check_copy_deprecation(copy)\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, dt.timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise', \"\n                \"'NaT', 'shift_forward', 'shift_backward' or \"\n                \"a timedelta object\"\n            )\n\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous, nonexistent):\n            if not hasattr(ax, \"tz_localize\"):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                    )\n                ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n            return ax\n\n        # if a level is given it must be a MultiIndex level or\n        # equivalent to the axis name\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError(f\"The level {level} is not valid\")\n            ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n\n        result = self.copy(deep=False)\n        result = result.set_axis(ax, axis=axis)\n        return result.__finalize__(self, method=\"tz_localize\")\n\n    # ----------------------------------------------------------------------\n    # Numeric Methods\n\n    @final\n    def describe(\n        self,\n        percentiles=None,\n        include=None,\n        exclude=None,\n    ) -> Self:\n        \"\"\"\n        Generate descriptive statistics.\n\n        Descriptive statistics include those that summarize the central\n        tendency, dispersion and shape of a\n        dataset's distribution, excluding ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default, ``None``, will automatically\n            return the 25th, 50th, and 75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        Series or DataFrame\n            Summary statistics of the Series or Dataframe provided.\n\n        See Also\n        --------\n        DataFrame.count: Count number of non-NA/null observations.\n        DataFrame.max: Maximum of the values in the object.\n        DataFrame.min: Minimum of the values in the object.\n        DataFrame.mean: Mean of the values.\n        DataFrame.std: Standard deviation of the observations.\n        DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n            columns based on their dtype.\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the DataFrame consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        dtype: float64\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series([\"a\", \"a\", \"b\", \"c\"])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series(\n        ...     [\n        ...         np.datetime64(\"2000-01-01\"),\n        ...         np.datetime64(\"2010-01-01\"),\n        ...         np.datetime64(\"2010-01-01\"),\n        ...     ]\n        ... )\n        >>> s.describe()\n        count                      3\n        mean     2006-09-01 08:00:00\n        min      2000-01-01 00:00:00\n        25%      2004-12-31 12:00:00\n        50%      2010-01-01 00:00:00\n        75%      2010-01-01 00:00:00\n        max      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"categorical\": pd.Categorical([\"d\", \"e\", \"f\"]),\n        ...         \"numeric\": [1, 2, 3],\n        ...         \"object\": [\"a\", \"b\", \"c\"],\n        ...     }\n        ... )\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include=\"all\")  # doctest: +SKIP\n               categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      a\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[object])  # doctest: +SKIP\n               object\n        count       3\n        unique      3\n        top         a\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=[\"category\"])\n               categorical\n        count            3\n        unique           3\n        top              d\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])  # doctest: +SKIP\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      a\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[object])  # doctest: +SKIP\n               categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n        \"\"\"\n        return describe_ndframe(\n            obj=self,\n            include=include,\n            exclude=exclude,\n            percentiles=percentiles,\n        ).__finalize__(self, method=\"describe\")\n\n    @final\n    def pct_change(\n        self,\n        periods: int = 1,\n        fill_method: None = None,\n        freq=None,\n        **kwargs,\n    ) -> Self:\n        \"\"\"\n        Fractional change between the current and a prior element.\n\n        Computes the fractional change from the immediately previous row by\n        default. This is useful in comparing the fraction of change in a time\n        series of elements.\n\n        .. note::\n\n            Despite the name of this method, it calculates fractional change\n            (also known as per unit change or relative change) and not\n            percentage change. If you need the percentage change, multiply\n            these values by 100.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change.\n        fill_method : None\n            Must be None. This argument will be removed in a future version of pandas.\n\n            .. deprecated:: 2.1\n                All options of `fill_method` are deprecated except `fill_method=None`.\n\n        freq : DateOffset, timedelta, or str, optional\n            Increment to use from time series API (e.g. 'ME' or BDay()).\n        **kwargs\n            Additional keyword arguments are passed into\n            `DataFrame.shift` or `Series.shift`.\n\n        Returns\n        -------\n        Series or DataFrame\n            The same type as the calling object.\n\n        See Also\n        --------\n        Series.diff : Compute the difference of two elements in a Series.\n        DataFrame.diff : Compute the difference of two elements in a DataFrame.\n        Series.shift : Shift the index by some number of periods.\n        DataFrame.shift : Shift the index by some number of periods.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([90, 91, 85])\n        >>> s\n        0    90\n        1    91\n        2    85\n        dtype: int64\n\n        >>> s.pct_change()\n        0         NaN\n        1    0.011111\n        2   -0.065934\n        dtype: float64\n\n        >>> s.pct_change(periods=2)\n        0         NaN\n        1         NaN\n        2   -0.055556\n        dtype: float64\n\n        See the percentage change in a Series where filling NAs with last\n        valid observation forward to next valid.\n\n        >>> s = pd.Series([90, 91, None, 85])\n        >>> s\n        0    90.0\n        1    91.0\n        2     NaN\n        3    85.0\n        dtype: float64\n\n        >>> s.ffill().pct_change()\n        0         NaN\n        1    0.011111\n        2    0.000000\n        3   -0.065934\n        dtype: float64\n\n        **DataFrame**\n\n        Percentage change in French franc, Deutsche Mark, and Italian lira from\n        1980-01-01 to 1980-03-01.\n\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"FR\": [4.0405, 4.0963, 4.3149],\n        ...         \"GR\": [1.7246, 1.7482, 1.8519],\n        ...         \"IT\": [804.74, 810.01, 860.13],\n        ...     },\n        ...     index=[\"1980-01-01\", \"1980-02-01\", \"1980-03-01\"],\n        ... )\n        >>> df\n                        FR      GR      IT\n        1980-01-01  4.0405  1.7246  804.74\n        1980-02-01  4.0963  1.7482  810.01\n        1980-03-01  4.3149  1.8519  860.13\n\n        >>> df.pct_change()\n                          FR        GR        IT\n        1980-01-01       NaN       NaN       NaN\n        1980-02-01  0.013810  0.013684  0.006549\n        1980-03-01  0.053365  0.059318  0.061876\n\n        Percentage of change in GOOG and APPL stock volume. Shows computing\n        the percentage change between columns.\n\n        >>> df = pd.DataFrame(\n        ...     {\n        ...         \"2016\": [1769950, 30586265],\n        ...         \"2015\": [1500923, 40912316],\n        ...         \"2014\": [1371819, 41403351],\n        ...     },\n        ...     index=[\"GOOG\", \"APPL\"],\n        ... )\n        >>> df\n                  2016      2015      2014\n        GOOG   1769950   1500923   1371819\n        APPL  30586265  40912316  41403351\n\n        >>> df.pct_change(axis=\"columns\", periods=-1)\n                  2016      2015  2014\n        GOOG  0.179241  0.094112   NaN\n        APPL -0.252395 -0.011860   NaN\n        \"\"\"\n        # GH#53491\n        if fill_method is not None:\n            raise ValueError(f\"fill_method must be None; got {fill_method=}.\")\n\n        axis = self._get_axis_number(kwargs.pop(\"axis\", \"index\"))\n        shifted = self.shift(periods=periods, freq=freq, axis=axis, **kwargs)\n        # Unsupported left operand type for / (\"Self\")\n        rs = self / shifted - 1  # type: ignore[operator]\n        if freq is not None:\n            # Shift method is implemented differently when freq is not None\n            # We want to restore the original index\n            rs = rs.loc[~rs.index.duplicated()]\n            rs = rs.reindex_like(self)\n        return rs.__finalize__(self, method=\"pct_change\")\n\n    @final\n    def _logical_func(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = 0,\n        bool_only: bool = False,\n        skipna: bool = True,\n        **kwargs,\n    ) -> Series | bool:\n        nv.validate_logical_func((), kwargs, fname=name)\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        if self.ndim > 1 and axis is None:\n            # Reduce along one dimension then the other, to simplify DataFrame._reduce\n            res = self._logical_func(\n                name, func, axis=0, bool_only=bool_only, skipna=skipna, **kwargs\n            )\n            # error: Item \"bool\" of \"Series | bool\" has no attribute \"_logical_func\"\n            return res._logical_func(  # type: ignore[union-attr]\n                name, func, skipna=skipna, **kwargs\n            )\n        elif axis is None:\n            axis = 0\n\n        if (\n            self.ndim > 1\n            and axis == 1\n            and len(self._mgr.blocks) > 1\n            # TODO(EA2D): special-case not needed\n            and all(block.values.ndim == 2 for block in self._mgr.blocks)\n            and not kwargs\n        ):\n            # Fastpath avoiding potentially expensive transpose\n            obj = self\n            if bool_only:\n                obj = self._get_bool_data()\n            return obj._reduce_axis1(name, func, skipna=skipna)\n\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    def any(\n        self,\n        *,\n        axis: Axis | None = 0,\n        bool_only: bool = False,\n        skipna: bool = True,\n        **kwargs,\n    ) -> Series | bool:\n        return self._logical_func(\n            \"any\", nanops.nanany, axis, bool_only, skipna, **kwargs\n        )\n\n    def all(\n        self,\n        *,\n        axis: Axis = 0,\n        bool_only: bool = False,\n        skipna: bool = True,\n        **kwargs,\n    ) -> Series | bool:\n        return self._logical_func(\n            \"all\", nanops.nanall, axis, bool_only, skipna, **kwargs\n        )\n\n    @final\n    def _accum_func(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = None,\n        skipna: bool = True,\n        *args,\n        **kwargs,\n    ):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = 0\n        else:\n            axis = self._get_axis_number(axis)\n\n        if axis == 1:\n            return self.T._accum_func(\n                name,\n                func,\n                axis=0,\n                skipna=skipna,\n                *args,  # noqa: B026\n                **kwargs,\n            ).T\n\n        def block_accum_func(blk_values):\n            values = blk_values.T if hasattr(blk_values, \"T\") else blk_values\n\n            result: np.ndarray | ExtensionArray\n            if isinstance(values, ExtensionArray):\n                result = values._accumulate(name, skipna=skipna, **kwargs)\n            else:\n                result = nanops.na_accum_func(values, func, skipna=skipna)\n\n            result = result.T if hasattr(result, \"T\") else result\n            return result\n\n        result = self._mgr.apply(block_accum_func)\n\n        return self._constructor_from_mgr(result, axes=result.axes).__finalize__(\n            self, method=name\n        )\n\n    def cummax(self, axis: Axis = 0, skipna: bool = True, *args, **kwargs) -> Self:\n        return self._accum_func(\n            \"cummax\", np.maximum.accumulate, axis, skipna, *args, **kwargs\n        )\n\n    def cummin(self, axis: Axis = 0, skipna: bool = True, *args, **kwargs) -> Self:\n        return self._accum_func(\n            \"cummin\", np.minimum.accumulate, axis, skipna, *args, **kwargs\n        )\n\n    def cumsum(self, axis: Axis = 0, skipna: bool = True, *args, **kwargs) -> Self:\n        return self._accum_func(\"cumsum\", np.cumsum, axis, skipna, *args, **kwargs)\n\n    def cumprod(self, axis: Axis = 0, skipna: bool = True, *args, **kwargs) -> Self:\n        return self._accum_func(\"cumprod\", np.cumprod, axis, skipna, *args, **kwargs)\n\n    @final\n    def _stat_function_ddof(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        ddof: int = 1,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        nv.validate_stat_ddof_func((), kwargs, fname=name)\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        return self._reduce(\n            func, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    def sem(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        ddof: int = 1,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"sem\", nanops.nansem, axis, skipna, ddof, numeric_only, **kwargs\n        )\n\n    def var(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        ddof: int = 1,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"var\", nanops.nanvar, axis, skipna, ddof, numeric_only, **kwargs\n        )\n\n    def std(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        ddof: int = 1,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function_ddof(\n            \"std\", nanops.nanstd, axis, skipna, ddof, numeric_only, **kwargs\n        )\n\n    @final\n    def _stat_function(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ):\n        assert name in [\"median\", \"mean\", \"min\", \"max\", \"kurt\", \"skew\"], name\n        nv.validate_func(name, (), kwargs)\n\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        return self._reduce(\n            func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    def min(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ):\n        return self._stat_function(\n            \"min\",\n            nanops.nanmin,\n            axis,\n            skipna,\n            numeric_only,\n            **kwargs,\n        )\n\n    def max(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ):\n        return self._stat_function(\n            \"max\",\n            nanops.nanmax,\n            axis,\n            skipna,\n            numeric_only,\n            **kwargs,\n        )\n\n    def mean(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"mean\", nanops.nanmean, axis, skipna, numeric_only, **kwargs\n        )\n\n    def median(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"median\", nanops.nanmedian, axis, skipna, numeric_only, **kwargs\n        )\n\n    def skew(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"skew\", nanops.nanskew, axis, skipna, numeric_only, **kwargs\n        )\n\n    def kurt(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        **kwargs,\n    ) -> Series | float:\n        return self._stat_function(\n            \"kurt\", nanops.nankurt, axis, skipna, numeric_only, **kwargs\n        )\n\n    kurtosis = kurt\n\n    @final\n    def _min_count_stat_function(\n        self,\n        name: str,\n        func,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        assert name in [\"sum\", \"prod\"], name\n        nv.validate_func(name, (), kwargs)\n\n        validate_bool_kwarg(skipna, \"skipna\", none_allowed=False)\n\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    def sum(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        return self._min_count_stat_function(\n            \"sum\", nanops.nansum, axis, skipna, numeric_only, min_count, **kwargs\n        )\n\n    def prod(\n        self,\n        *,\n        axis: Axis | None = 0,\n        skipna: bool = True,\n        numeric_only: bool = False,\n        min_count: int = 0,\n        **kwargs,\n    ):\n        return self._min_count_stat_function(\n            \"prod\",\n            nanops.nanprod,\n            axis,\n            skipna,\n            numeric_only,\n            min_count,\n            **kwargs,\n        )\n\n    product = prod\n\n    @final\n    @doc(Rolling)\n    def rolling(\n        self,\n        window: int | dt.timedelta | str | BaseOffset | BaseIndexer,\n        min_periods: int | None = None,\n        center: bool = False,\n        win_type: str | None = None,\n        on: str | None = None,\n        closed: IntervalClosedType | None = None,\n        step: int | None = None,\n        method: str = \"single\",\n    ) -> Window | Rolling:\n        if win_type is not None:\n            return Window(\n                self,\n                window=window,\n                min_periods=min_periods,\n                center=center,\n                win_type=win_type,\n                on=on,\n                closed=closed,\n                step=step,\n                method=method,\n            )\n\n        return Rolling(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            closed=closed,\n            step=step,\n            method=method,\n        )\n\n    @final\n    @doc(Expanding)\n    def expanding(\n        self,\n        min_periods: int = 1,\n        method: Literal[\"single\", \"table\"] = \"single\",\n    ) -> Expanding:\n        return Expanding(self, min_periods=min_periods, method=method)\n\n    @final\n    @doc(ExponentialMovingWindow)\n    def ewm(\n        self,\n        com: float | None = None,\n        span: float | None = None,\n        halflife: float | TimedeltaConvertibleTypes | None = None,\n        alpha: float | None = None,\n        min_periods: int | None = 0,\n        adjust: bool = True,\n        ignore_na: bool = False,\n        times: np.ndarray | DataFrame | Series | None = None,\n        method: Literal[\"single\", \"table\"] = \"single\",\n    ) -> ExponentialMovingWindow:\n        return ExponentialMovingWindow(\n            self,\n            com=com,\n            span=span,\n            halflife=halflife,\n            alpha=alpha,\n            min_periods=min_periods,\n            adjust=adjust,\n            ignore_na=ignore_na,\n            times=times,\n            method=method,\n        )\n\n    # ----------------------------------------------------------------------\n    # Arithmetic Methods\n\n    @final\n    def _inplace_method(self, other, op) -> Self:\n        \"\"\"\n        Wrap arithmetic method to operate inplace.\n        \"\"\"\n        result = op(self, other)\n\n        # this makes sure that we are aligned like the input\n        # we are updating inplace\n        self._update_inplace(result.reindex_like(self))\n        return self\n\n    @final\n    def __iadd__(self, other) -> Self:\n        # error: Unsupported left operand type for + (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__add__)  # type: ignore[operator]\n\n    @final\n    def __isub__(self, other) -> Self:\n        # error: Unsupported left operand type for - (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__sub__)  # type: ignore[operator]\n\n    @final\n    def __imul__(self, other) -> Self:\n        # error: Unsupported left operand type for * (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__mul__)  # type: ignore[operator]\n\n    @final\n    def __itruediv__(self, other) -> Self:\n        # error: Unsupported left operand type for / (\"Type[NDFrame]\")\n        return self._inplace_method(\n            other,\n            type(self).__truediv__,  # type: ignore[operator]\n        )\n\n    @final\n    def __ifloordiv__(self, other) -> Self:\n        # error: Unsupported left operand type for // (\"Type[NDFrame]\")\n        return self._inplace_method(\n            other,\n            type(self).__floordiv__,  # type: ignore[operator]\n        )\n\n    @final\n    def __imod__(self, other) -> Self:\n        # error: Unsupported left operand type for % (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__mod__)  # type: ignore[operator]\n\n    @final\n    def __ipow__(self, other) -> Self:\n        # error: Unsupported left operand type for ** (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__pow__)  # type: ignore[operator]\n\n    @final\n    def __iand__(self, other) -> Self:\n        # error: Unsupported left operand type for & (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__and__)  # type: ignore[operator]\n\n    @final\n    def __ior__(self, other) -> Self:\n        return self._inplace_method(other, type(self).__or__)\n\n    @final\n    def __ixor__(self, other) -> Self:\n        # error: Unsupported left operand type for ^ (\"Type[NDFrame]\")\n        return self._inplace_method(other, type(self).__xor__)  # type: ignore[operator]\n\n    # ----------------------------------------------------------------------\n    # Misc methods\n\n    @final\n    def _find_valid_index(self, *, how: str) -> Hashable:\n        \"\"\"\n        Retrieves the index of the first valid value.\n\n        Parameters\n        ----------\n        how : {'first', 'last'}\n            Use this parameter to change between the first or last valid index.\n\n        Returns\n        -------\n        idx_first_valid : type of index\n        \"\"\"\n        is_valid = self.notna().values\n        idxpos = find_valid_index(how=how, is_valid=is_valid)\n        if idxpos is None:\n            return None\n        return self.index[idxpos]\n\n    @final\n    @doc(position=\"first\", klass=_shared_doc_kwargs[\"klass\"])\n    def first_valid_index(self) -> Hashable:\n        \"\"\"\n        Return index for {position} non-missing value or None, if no value is found.\n\n        See the :ref:`User Guide <missing_data>` for more information\n        on which values are considered missing.\n\n        Returns\n        -------\n        type of index\n            Index of {position} non-missing value.\n\n        See Also\n        --------\n        DataFrame.last_valid_index : Return index for last non-NA value or None, if\n            no non-NA value is found.\n        Series.last_valid_index : Return index for last non-NA value or None, if no\n            non-NA value is found.\n        DataFrame.isna : Detect missing values.\n\n        Examples\n        --------\n        For Series:\n\n        >>> s = pd.Series([None, 3, 4])\n        >>> s.first_valid_index()\n        1\n        >>> s.last_valid_index()\n        2\n\n        >>> s = pd.Series([None, None])\n        >>> print(s.first_valid_index())\n        None\n        >>> print(s.last_valid_index())\n        None\n\n        If all elements in Series are NA/null, returns None.\n\n        >>> s = pd.Series()\n        >>> print(s.first_valid_index())\n        None\n        >>> print(s.last_valid_index())\n        None\n\n        If Series is empty, returns None.\n\n        For DataFrame:\n\n        >>> df = pd.DataFrame({{\"A\": [None, None, 2], \"B\": [None, 3, 4]}})\n        >>> df\n             A      B\n        0  NaN    NaN\n        1  NaN    3.0\n        2  2.0    4.0\n        >>> df.first_valid_index()\n        1\n        >>> df.last_valid_index()\n        2\n\n        >>> df = pd.DataFrame({{\"A\": [None, None, None], \"B\": [None, None, None]}})\n        >>> df\n             A      B\n        0  None   None\n        1  None   None\n        2  None   None\n        >>> print(df.first_valid_index())\n        None\n        >>> print(df.last_valid_index())\n        None\n\n        If all elements in DataFrame are NA/null, returns None.\n\n        >>> df = pd.DataFrame()\n        >>> df\n        Empty DataFrame\n        Columns: []\n        Index: []\n        >>> print(df.first_valid_index())\n        None\n        >>> print(df.last_valid_index())\n        None\n\n        If DataFrame is empty, returns None.\n        \"\"\"\n        return self._find_valid_index(how=\"first\")\n\n    @final\n    @doc(first_valid_index, position=\"last\", klass=_shared_doc_kwargs[\"klass\"])\n    def last_valid_index(self) -> Hashable:\n        return self._find_valid_index(how=\"last\")\n\n\n_num_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {axis_descr}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    For DataFrames, specifying ``axis=None`` will apply the aggregation\n    across both axes.\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns.\n\n{min_count}\\\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\n{name1} or scalar\\\n\n    Value containing the calculation referenced in the description.\\\n{see_also}\\\n{examples}\n\"\"\"\n\n_sum_prod_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {axis_descr}\n    Axis for the function to be applied on.\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.{name} with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\n    .. versionadded:: 2.0.0\n\nskipna : bool, default True\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n\n{min_count}\\\n**kwargs\n    Additional keyword arguments to be passed to the function.\n\nReturns\n-------\n{name1} or scalar\\\n\n    Value containing the calculation referenced in the description.\\\n{see_also}\\\n{examples}\n\"\"\"\n\n_num_ddof_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {axis_descr}\n    For `Series` this parameter is unused and defaults to 0.\n\n    .. warning::\n\n        The behavior of DataFrame.{name} with ``axis=None`` is deprecated,\n        in a future version this will reduce over both axes and return a scalar\n        To retain the old behavior, pass axis=0 (or do not pass axis).\n\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nddof : int, default 1\n    Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n    where N represents the number of elements.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns. Not implemented for Series.\n**kwargs :\n    Additional keywords have no effect but might be accepted\n    for compatibility with NumPy.\n\nReturns\n-------\n{name1} or {name2} (if level specified)\n    {return_desc}\n\nSee Also\n--------\n{see_also}\\\n{notes}\\\n{examples}\n\"\"\"\n\n_sem_see_also = \"\"\"\\\nscipy.stats.sem : Compute standard error of the mean.\n{name2}.std : Return sample standard deviation over requested axis.\n{name2}.var : Return unbiased variance over requested axis.\n{name2}.mean : Return the mean of the values over the requested axis.\n{name2}.median : Return the median of the values over the requested axis.\n{name2}.mode : Return the mode(s) of the Series.\"\"\"\n\n_sem_return_desc = \"\"\"\\\nUnbiased standard error of the mean over requested axis.\"\"\"\n\n_std_see_also = \"\"\"\\\nnumpy.std : Compute the standard deviation along the specified axis.\n{name2}.var : Return unbiased variance over requested axis.\n{name2}.sem : Return unbiased standard error of the mean over requested axis.\n{name2}.mean : Return the mean of the values over the requested axis.\n{name2}.median : Return the median of the values over the requested axis.\n{name2}.mode : Return the mode(s) of the Series.\"\"\"\n\n_std_return_desc = \"\"\"\\\nStandard deviation over requested axis.\"\"\"\n\n_std_notes = \"\"\"\n\nNotes\n-----\nTo have the same behaviour as `numpy.std`, use `ddof=0` (instead of the\ndefault `ddof=1`)\"\"\"\n\n_std_examples = \"\"\"\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\nThe standard deviation of the columns can be found as follows:\n\n>>> df.std()\nage       18.786076\nheight     0.237417\ndtype: float64\n\nAlternatively, `ddof=0` can be set to normalize by N instead of N-1:\n\n>>> df.std(ddof=0)\nage       16.269219\nheight     0.205609\ndtype: float64\"\"\"\n\n_var_examples = \"\"\"\n\nExamples\n--------\n>>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],\n...                    'age': [21, 25, 62, 43],\n...                    'height': [1.61, 1.87, 1.49, 2.01]}\n...                   ).set_index('person_id')\n>>> df\n           age  height\nperson_id\n0           21    1.61\n1           25    1.87\n2           62    1.49\n3           43    2.01\n\n>>> df.var()\nage       352.916667\nheight      0.056367\ndtype: float64\n\nAlternatively, ``ddof=0`` can be set to normalize by N instead of N-1:\n\n>>> df.var(ddof=0)\nage       264.687500\nheight      0.042275\ndtype: float64\"\"\"\n\n_bool_doc = \"\"\"\n{desc}\n\nParameters\n----------\naxis : {{0 or 'index', 1 or 'columns', None}}, default 0\n    Indicate which axis or axes should be reduced. For `Series` this parameter\n    is unused and defaults to 0.\n\n    * 0 / 'index' : reduce the index, return a Series whose index is the\n      original column labels.\n    * 1 / 'columns' : reduce the columns, return a Series whose index is the\n      original index.\n    * None : reduce all axes, return a scalar.\n\nbool_only : bool, default False\n    Include only boolean columns. Not implemented for Series.\nskipna : bool, default True\n    Exclude NA/null values. If the entire row/column is NA and skipna is\n    True, then the result will be {empty_value}, as for an empty row/column.\n    If skipna is False, then NA are treated as True, because these are not\n    equal to zero.\n**kwargs : any, default None\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\n{name2} or {name1}\n    If axis=None, then a scalar boolean is returned.\n    Otherwise a Series is returned with index matching the index argument.\n\n{see_also}\n{examples}\"\"\"\n\n_all_desc = \"\"\"\\\nReturn whether all elements are True, potentially over an axis.\n\nReturns True unless there at least one element within a series or\nalong a Dataframe axis that is False or equivalent (e.g. zero or\nempty).\"\"\"\n\n_all_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> pd.Series([True, True]).all()\nTrue\n>>> pd.Series([True, False]).all()\nFalse\n>>> pd.Series([], dtype=\"float64\").all()\nTrue\n>>> pd.Series([np.nan]).all()\nTrue\n>>> pd.Series([np.nan]).all(skipna=False)\nTrue\n\n**DataFrames**\n\nCreate a DataFrame from a dictionary.\n\n>>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})\n>>> df\n   col1   col2\n0  True   True\n1  True  False\n\nDefault behaviour checks if values in each column all return True.\n\n>>> df.all()\ncol1     True\ncol2    False\ndtype: bool\n\nSpecify ``axis='columns'`` to check if values in each row all return True.\n\n>>> df.all(axis='columns')\n0     True\n1    False\ndtype: bool\n\nOr ``axis=None`` for whether every value is True.\n\n>>> df.all(axis=None)\nFalse\n\"\"\"\n\n_all_see_also = \"\"\"\\\nSee Also\n--------\nSeries.all : Return True if all elements are True.\nDataFrame.any : Return True if one (or more) elements are True.\n\"\"\"\n\n_cnum_pd_doc = \"\"\"\nReturn cumulative {desc} over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\n{desc}.\n\nParameters\n----------\naxis : {{0 or 'index', 1 or 'columns'}}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\nnumeric_only : bool, default False\n    Include only float, int, boolean columns.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\n{name1} or {name2}\n    Return cumulative {desc} of {name1} or {name2}.\n\nSee Also\n--------\ncore.window.expanding.Expanding.{accum_func_name} : Similar functionality\n    but ignores ``NaN`` values.\n{name2}.{accum_func_name} : Return the {desc} over\n    {name2} axis.\n{name2}.cummax : Return cumulative maximum over {name2} axis.\n{name2}.cummin : Return cumulative minimum over {name2} axis.\n{name2}.cumsum : Return cumulative sum over {name2} axis.\n{name2}.cumprod : Return cumulative product over {name2} axis.\n\n{examples}\"\"\"\n\n_cnum_series_doc = \"\"\"\nReturn cumulative {desc} over a DataFrame or Series axis.\n\nReturns a DataFrame or Series of the same size containing the cumulative\n{desc}.\n\nParameters\n----------\naxis : {{0 or 'index', 1 or 'columns'}}, default 0\n    The index or the name of the axis. 0 is equivalent to None or 'index'.\n    For `Series` this parameter is unused and defaults to 0.\nskipna : bool, default True\n    Exclude NA/null values. If an entire row/column is NA, the result\n    will be NA.\n*args, **kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with NumPy.\n\nReturns\n-------\n{name1} or {name2}\n    Return cumulative {desc} of {name1} or {name2}.\n\nSee Also\n--------\ncore.window.expanding.Expanding.{accum_func_name} : Similar functionality\n    but ignores ``NaN`` values.\n{name2}.{accum_func_name} : Return the {desc} over\n    {name2} axis.\n{name2}.cummax : Return cumulative maximum over {name2} axis.\n{name2}.cummin : Return cumulative minimum over {name2} axis.\n{name2}.cumsum : Return cumulative sum over {name2} axis.\n{name2}.cumprod : Return cumulative product over {name2} axis.\n\n{examples}\"\"\"\n\n_cummin_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummin()\n0    2.0\n1    NaN\n2    2.0\n3   -1.0\n4   -1.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummin(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the minimum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummin()\n     A    B\n0  2.0  1.0\n1  2.0  NaN\n2  1.0  0.0\n\nTo iterate over columns and find the minimum in each row,\nuse ``axis=1``\n\n>>> df.cummin(axis=1)\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\"\"\"\n\n_cumsum_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumsum()\n0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumsum(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the sum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumsum()\n     A    B\n0  2.0  1.0\n1  5.0  NaN\n2  6.0  1.0\n\nTo iterate over columns and find the sum in each row,\nuse ``axis=1``\n\n>>> df.cumsum(axis=1)\n     A    B\n0  2.0  3.0\n1  3.0  NaN\n2  1.0  1.0\n\"\"\"\n\n_cumprod_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cumprod()\n0     2.0\n1     NaN\n2    10.0\n3   -10.0\n4    -0.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cumprod(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the product\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cumprod()\n     A    B\n0  2.0  1.0\n1  6.0  NaN\n2  6.0  0.0\n\nTo iterate over columns and find the product in each row,\nuse ``axis=1``\n\n>>> df.cumprod(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  0.0\n\"\"\"\n\n_cummax_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\n>>> s = pd.Series([2, np.nan, 5, -1, 0])\n>>> s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\nBy default, NA values are ignored.\n\n>>> s.cummax()\n0    2.0\n1    NaN\n2    5.0\n3    5.0\n4    5.0\ndtype: float64\n\nTo include NA values in the operation, use ``skipna=False``\n\n>>> s.cummax(skipna=False)\n0    2.0\n1    NaN\n2    NaN\n3    NaN\n4    NaN\ndtype: float64\n\n**DataFrame**\n\n>>> df = pd.DataFrame([[2.0, 1.0],\n...                    [3.0, np.nan],\n...                    [1.0, 0.0]],\n...                   columns=list('AB'))\n>>> df\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  1.0  0.0\n\nBy default, iterates over rows and finds the maximum\nin each column. This is equivalent to ``axis=None`` or ``axis='index'``.\n\n>>> df.cummax()\n     A    B\n0  2.0  1.0\n1  3.0  NaN\n2  3.0  1.0\n\nTo iterate over columns and find the maximum in each row,\nuse ``axis=1``\n\n>>> df.cummax(axis=1)\n     A    B\n0  2.0  2.0\n1  3.0  NaN\n2  1.0  1.0\n\"\"\"\n\n_any_see_also = \"\"\"\\\nSee Also\n--------\nnumpy.any : Numpy version of this method.\nSeries.any : Return whether any element is True.\nSeries.all : Return whether all elements are True.\nDataFrame.any : Return whether any element is True over requested axis.\nDataFrame.all : Return whether all elements are True over requested axis.\n\"\"\"\n\n_any_desc = \"\"\"\\\nReturn whether any element is True, potentially over an axis.\n\nReturns False unless there is at least one element within a series or\nalong a Dataframe axis that is True or equivalent (e.g. non-zero or\nnon-empty).\"\"\"\n\n_any_examples = \"\"\"\\\nExamples\n--------\n**Series**\n\nFor Series input, the output is a scalar indicating whether any element\nis True.\n\n>>> pd.Series([False, False]).any()\nFalse\n>>> pd.Series([True, False]).any()\nTrue\n>>> pd.Series([], dtype=\"float64\").any()\nFalse\n>>> pd.Series([np.nan]).any()\nFalse\n>>> pd.Series([np.nan]).any(skipna=False)\nTrue\n\n**DataFrame**\n\nWhether each column contains at least one True element (the default).\n\n>>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [0, 2], \"C\": [0, 0]})\n>>> df\n   A  B  C\n0  1  0  0\n1  2  2  0\n\n>>> df.any()\nA     True\nB     True\nC    False\ndtype: bool\n\nAggregating over the columns.\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 2]})\n>>> df\n       A  B\n0   True  1\n1  False  2\n\n>>> df.any(axis='columns')\n0    True\n1    True\ndtype: bool\n\n>>> df = pd.DataFrame({\"A\": [True, False], \"B\": [1, 0]})\n>>> df\n       A  B\n0   True  1\n1  False  0\n\n>>> df.any(axis='columns')\n0    True\n1    False\ndtype: bool\n\nAggregating over the entire DataFrame with ``axis=None``.\n\n>>> df.any(axis=None)\nTrue\n\n`any` for an empty DataFrame is an empty Series.\n\n>>> pd.DataFrame([]).any()\nSeries([], dtype: bool)\n\"\"\"\n\n_shared_docs[\"stat_func_example\"] = \"\"\"\n\nExamples\n--------\n>>> idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n>>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n>>> s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n>>> s.{stat_func}()\n{default_output}\"\"\"\n\n_sum_examples = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"sum\", verb=\"Sum\", default_output=14, level_output_0=6, level_output_1=8\n)\n\n_sum_examples += \"\"\"\n\nBy default, the sum of an empty or all-NA Series is ``0``.\n\n>>> pd.Series([], dtype=\"float64\").sum()  # min_count=0 is the default\n0.0\n\nThis can be controlled with the ``min_count`` parameter. For example, if\nyou'd like the sum of an empty series to be NaN, pass ``min_count=1``.\n\n>>> pd.Series([], dtype=\"float64\").sum(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).sum()\n0.0\n\n>>> pd.Series([np.nan]).sum(min_count=1)\nnan\"\"\"\n\n_max_examples: str = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"max\", verb=\"Max\", default_output=8, level_output_0=4, level_output_1=8\n)\n\n_min_examples: str = _shared_docs[\"stat_func_example\"].format(\n    stat_func=\"min\", verb=\"Min\", default_output=0, level_output_0=2, level_output_1=0\n)\n\n_skew_see_also = \"\"\"\n\nSee Also\n--------\nSeries.skew : Return unbiased skew over requested axis.\nSeries.var : Return unbiased variance over requested axis.\nSeries.std : Return unbiased standard deviation over requested axis.\"\"\"\n\n_stat_func_see_also = \"\"\"\n\nSee Also\n--------\nSeries.sum : Return the sum.\nSeries.min : Return the minimum.\nSeries.max : Return the maximum.\nSeries.idxmin : Return the index of the minimum.\nSeries.idxmax : Return the index of the maximum.\nDataFrame.sum : Return the sum over the requested axis.\nDataFrame.min : Return the minimum over the requested axis.\nDataFrame.max : Return the maximum over the requested axis.\nDataFrame.idxmin : Return the index of the minimum over the requested axis.\nDataFrame.idxmax : Return the index of the maximum over the requested axis.\"\"\"\n\n_prod_examples = \"\"\"\n\nExamples\n--------\nBy default, the product of an empty or all-NA Series is ``1``\n\n>>> pd.Series([], dtype=\"float64\").prod()\n1.0\n\nThis can be controlled with the ``min_count`` parameter\n\n>>> pd.Series([], dtype=\"float64\").prod(min_count=1)\nnan\n\nThanks to the ``skipna`` parameter, ``min_count`` handles all-NA and\nempty series identically.\n\n>>> pd.Series([np.nan]).prod()\n1.0\n\n>>> pd.Series([np.nan]).prod(min_count=1)\nnan\"\"\"\n\n_min_count_stub = \"\"\"\\\nmin_count : int, default 0\n    The required number of valid values to perform the operation. If fewer than\n    ``min_count`` non-NA values are present the result will be NA.\n\"\"\"\n\n\ndef make_doc(name: str, ndim: int) -> str:\n    \"\"\"\n    Generate the docstring for a Series/DataFrame reduction.\n    \"\"\"\n    if ndim == 1:\n        name1 = \"scalar\"\n        name2 = \"Series\"\n        axis_descr = \"{index (0)}\"\n    else:\n        name1 = \"Series\"\n        name2 = \"DataFrame\"\n        axis_descr = \"{index (0), columns (1)}\"\n\n    if name == \"any\":\n        base_doc = _bool_doc\n        desc = _any_desc\n        see_also = _any_see_also\n        examples = _any_examples\n        kwargs = {\"empty_value\": \"False\"}\n    elif name == \"all\":\n        base_doc = _bool_doc\n        desc = _all_desc\n        see_also = _all_see_also\n        examples = _all_examples\n        kwargs = {\"empty_value\": \"True\"}\n    elif name == \"min\":\n        base_doc = _num_doc\n        desc = (\n            \"Return the minimum of the values over the requested axis.\\n\\n\"\n            \"If you want the *index* of the minimum, use ``idxmin``. This is \"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\n        )\n        see_also = _stat_func_see_also\n        examples = _min_examples\n        kwargs = {\"min_count\": \"\"}\n    elif name == \"max\":\n        base_doc = _num_doc\n        desc = (\n            \"Return the maximum of the values over the requested axis.\\n\\n\"\n            \"If you want the *index* of the maximum, use ``idxmax``. This is \"\n            \"the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\n        )\n        see_also = _stat_func_see_also\n        examples = _max_examples\n        kwargs = {\"min_count\": \"\"}\n\n    elif name == \"sum\":\n        base_doc = _sum_prod_doc\n        desc = (\n            \"Return the sum of the values over the requested axis.\\n\\n\"\n            \"This is equivalent to the method ``numpy.sum``.\"\n        )\n        see_also = _stat_func_see_also\n        examples = _sum_examples\n        kwargs = {\"min_count\": _min_count_stub}\n\n    elif name == \"prod\":\n        base_doc = _sum_prod_doc\n        desc = \"Return the product of the values over the requested axis.\"\n        see_also = _stat_func_see_also\n        examples = _prod_examples\n        kwargs = {\"min_count\": _min_count_stub}\n\n    elif name == \"median\":\n        base_doc = _num_doc\n        desc = \"Return the median of the values over the requested axis.\"\n        see_also = _stat_func_see_also\n        examples = \"\"\"\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.median()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.median()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.median(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.median(numeric_only=True)\n            a   1.5\n            dtype: float64\"\"\"\n        kwargs = {\"min_count\": \"\"}\n\n    elif name == \"mean\":\n        base_doc = _num_doc\n        desc = \"Return the mean of the values over the requested axis.\"\n        see_also = _stat_func_see_also\n        examples = \"\"\"\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.mean()\n            2.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.mean()\n            a   1.5\n            b   2.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.mean(axis=1)\n            tiger   1.5\n            zebra   2.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.mean(numeric_only=True)\n            a   1.5\n            dtype: float64\"\"\"\n        kwargs = {\"min_count\": \"\"}\n\n    elif name == \"var\":\n        base_doc = _num_ddof_doc\n        desc = (\n            \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n            \"N-1 by default. This can be changed using the ddof argument.\"\n        )\n        examples = _var_examples\n        see_also = \"\"\n        kwargs = {\"notes\": \"\"}\n\n    elif name == \"std\":\n        base_doc = _num_ddof_doc\n        desc = (\n            \"Return sample standard deviation over requested axis.\"\n            \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n            \"ddof argument.\"\n        )\n        examples = _std_examples\n        see_also = _std_see_also.format(name2=name2)\n        kwargs = {\"notes\": \"\", \"return_desc\": _std_return_desc}\n\n    elif name == \"sem\":\n        base_doc = _num_ddof_doc\n        desc = (\n            \"Return unbiased standard error of the mean over requested \"\n            \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n            \"using the ddof argument\"\n        )\n        examples = \"\"\"\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.sem().round(6)\n            0.57735\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])\n            >>> df\n                   a   b\n            tiger  1   2\n            zebra  2   3\n            >>> df.sem()\n            a   0.5\n            b   0.5\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.sem(axis=1)\n            tiger   0.5\n            zebra   0.5\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True`\n            to avoid getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},\n            ...                   index=['tiger', 'zebra'])\n            >>> df.sem(numeric_only=True)\n            a   0.5\n            dtype: float64\"\"\"\n        see_also = _sem_see_also.format(name2=name2)\n        kwargs = {\"notes\": \"\", \"return_desc\": _sem_return_desc}\n\n    elif name == \"skew\":\n        base_doc = _num_doc\n        desc = \"Return unbiased skew over requested axis.\\n\\nNormalized by N-1.\"\n        see_also = _skew_see_also\n        examples = \"\"\"\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 3])\n            >>> s.skew()\n            0.0\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df\n                    a   b   c\n            tiger   1   2   1\n            zebra   2   3   3\n            cow     3   4   5\n            >>> df.skew()\n            a   0.0\n            b   0.0\n            c   0.0\n            dtype: float64\n\n            Using axis=1\n\n            >>> df.skew(axis=1)\n            tiger   1.732051\n            zebra  -1.732051\n            cow     0.000000\n            dtype: float64\n\n            In this case, `numeric_only` should be set to `True` to avoid\n            getting an error.\n\n            >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},\n            ...                   index=['tiger', 'zebra', 'cow'])\n            >>> df.skew(numeric_only=True)\n            a   0.0\n            dtype: float64\"\"\"\n        kwargs = {\"min_count\": \"\"}\n\n    elif name == \"kurt\":\n        base_doc = _num_doc\n        desc = (\n            \"Return unbiased kurtosis over requested axis.\\n\\n\"\n            \"Kurtosis obtained using Fisher's definition of\\n\"\n            \"kurtosis (kurtosis of normal == 0.0). Normalized \"\n            \"by N-1.\"\n        )\n        see_also = \"\"\n        examples = \"\"\"\n\n            Examples\n            --------\n            >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\n            >>> s\n            cat    1\n            dog    2\n            dog    2\n            mouse  3\n            dtype: int64\n            >>> s.kurt()\n            1.5\n\n            With a DataFrame\n\n            >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},\n            ...                   index=['cat', 'dog', 'dog', 'mouse'])\n            >>> df\n                   a   b\n              cat  1   3\n              dog  2   4\n              dog  2   4\n            mouse  3   4\n            >>> df.kurt()\n            a   1.5\n            b   4.0\n            dtype: float64\n\n            With axis=None\n\n            >>> df.kurt(axis=None).round(6)\n            -0.988693\n\n            Using axis=1\n\n            >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},\n            ...                   index=['cat', 'dog'])\n            >>> df.kurt(axis=1)\n            cat   -6.0\n            dog   -6.0\n            dtype: float64\"\"\"\n        kwargs = {\"min_count\": \"\"}\n\n    elif name == \"cumsum\":\n        if ndim == 1:\n            base_doc = _cnum_series_doc\n        else:\n            base_doc = _cnum_pd_doc\n\n        desc = \"sum\"\n        see_also = \"\"\n        examples = _cumsum_examples\n        kwargs = {\"accum_func_name\": \"sum\"}\n\n    elif name == \"cumprod\":\n        if ndim == 1:\n            base_doc = _cnum_series_doc\n        else:\n            base_doc = _cnum_pd_doc\n\n        desc = \"product\"\n        see_also = \"\"\n        examples = _cumprod_examples\n        kwargs = {\"accum_func_name\": \"prod\"}\n\n    elif name == \"cummin\":\n        if ndim == 1:\n            base_doc = _cnum_series_doc\n        else:\n            base_doc = _cnum_pd_doc\n\n        desc = \"minimum\"\n        see_also = \"\"\n        examples = _cummin_examples\n        kwargs = {\"accum_func_name\": \"min\"}\n\n    elif name == \"cummax\":\n        if ndim == 1:\n            base_doc = _cnum_series_doc\n        else:\n            base_doc = _cnum_pd_doc\n\n        desc = \"maximum\"\n        see_also = \"\"\n        examples = _cummax_examples\n        kwargs = {\"accum_func_name\": \"max\"}\n\n    else:\n        raise NotImplementedError\n\n    docstr = base_doc.format(\n        desc=desc,\n        name=name,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        **kwargs,\n    )\n    return docstr\n"
    },
    {
      "filename": "pandas/core/methods/describe.py",
      "content": "\"\"\"\nModule responsible for execution of NDFrame.describe() method.\n\nMethod NDFrame.describe() delegates actual execution to function describe_ndframe().\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom abc import (\n    ABC,\n    abstractmethod,\n)\nfrom typing import (\n    TYPE_CHECKING,\n    cast,\n)\n\nimport numpy as np\n\nfrom pandas._typing import (\n    DtypeObj,\n    NDFrameT,\n    npt,\n)\nfrom pandas.util._validators import validate_percentile\n\nfrom pandas.core.dtypes.common import (\n    is_bool_dtype,\n    is_numeric_dtype,\n)\nfrom pandas.core.dtypes.dtypes import (\n    ArrowDtype,\n    DatetimeTZDtype,\n    ExtensionDtype,\n)\n\nfrom pandas.core.arrays.floating import Float64Dtype\nfrom pandas.core.reshape.concat import concat\n\nfrom pandas.io.formats.format import format_percentiles\n\nif TYPE_CHECKING:\n    from collections.abc import (\n        Callable,\n        Hashable,\n        Sequence,\n    )\n\n    from pandas import (\n        DataFrame,\n        Series,\n    )\n\n\ndef describe_ndframe(\n    *,\n    obj: NDFrameT,\n    include: str | Sequence[str] | None,\n    exclude: str | Sequence[str] | None,\n    percentiles: Sequence[float] | np.ndarray | None,\n) -> NDFrameT:\n    \"\"\"Describe series or dataframe.\n\n    Called from pandas.core.generic.NDFrame.describe()\n\n    Parameters\n    ----------\n    obj: DataFrame or Series\n        Either dataframe or series to be described.\n    include : 'all', list-like of dtypes or None (default), optional\n        A white list of data types to include in the result. Ignored for ``Series``.\n    exclude : list-like of dtypes or None (default), optional,\n        A black list of data types to omit from the result. Ignored for ``Series``.\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output. All should fall between 0 and 1.\n        The default is ``[.25, .5, .75]``, which returns the 25th, 50th, and\n        75th percentiles.\n\n    Returns\n    -------\n    Dataframe or series description.\n    \"\"\"\n    percentiles = _refine_percentiles(percentiles)\n\n    describer: NDFrameDescriberAbstract\n    if obj.ndim == 1:\n        describer = SeriesDescriber(\n            obj=cast(\"Series\", obj),\n        )\n    else:\n        describer = DataFrameDescriber(\n            obj=cast(\"DataFrame\", obj),\n            include=include,\n            exclude=exclude,\n        )\n\n    result = describer.describe(percentiles=percentiles)\n    return cast(NDFrameT, result)\n\n\nclass NDFrameDescriberAbstract(ABC):\n    \"\"\"Abstract class for describing dataframe or series.\n\n    Parameters\n    ----------\n    obj : Series or DataFrame\n        Object to be described.\n    \"\"\"\n\n    def __init__(self, obj: DataFrame | Series) -> None:\n        self.obj = obj\n\n    @abstractmethod\n    def describe(self, percentiles: Sequence[float] | np.ndarray) -> DataFrame | Series:\n        \"\"\"Do describe either series or dataframe.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers\n            The percentiles to include in the output.\n        \"\"\"\n\n\nclass SeriesDescriber(NDFrameDescriberAbstract):\n    \"\"\"Class responsible for creating series description.\"\"\"\n\n    obj: Series\n\n    def describe(self, percentiles: Sequence[float] | np.ndarray) -> Series:\n        describe_func = select_describe_func(\n            self.obj,\n        )\n        return describe_func(self.obj, percentiles)\n\n\nclass DataFrameDescriber(NDFrameDescriberAbstract):\n    \"\"\"Class responsible for creating dataobj description.\n\n    Parameters\n    ----------\n    obj : DataFrame\n        DataFrame to be described.\n    include : 'all', list-like of dtypes or None\n        A white list of data types to include in the result.\n    exclude : list-like of dtypes or None\n        A black list of data types to omit from the result.\n    \"\"\"\n\n    obj: DataFrame\n\n    def __init__(\n        self,\n        obj: DataFrame,\n        *,\n        include: str | Sequence[str] | None,\n        exclude: str | Sequence[str] | None,\n    ) -> None:\n        self.include = include\n        self.exclude = exclude\n\n        if obj.ndim == 2 and obj.columns.size == 0:\n            raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n        super().__init__(obj)\n\n    def describe(self, percentiles: Sequence[float] | np.ndarray) -> DataFrame:\n        data = self._select_data()\n\n        ldesc: list[Series] = []\n        for _, series in data.items():\n            describe_func = select_describe_func(series)\n            ldesc.append(describe_func(series, percentiles))\n\n        col_names = reorder_columns(ldesc)\n        d = concat(\n            [x.reindex(col_names) for x in ldesc],\n            axis=1,\n            ignore_index=True,\n            sort=False,\n        )\n        d.columns = data.columns.copy()\n        return d\n\n    def _select_data(self) -> DataFrame:\n        \"\"\"Select columns to be described.\"\"\"\n        if (self.include is None) and (self.exclude is None):\n            # when some numerics are found, keep only numerics\n            default_include: list[npt.DTypeLike] = [np.number, \"datetime\"]\n            data = self.obj.select_dtypes(include=default_include)\n            if len(data.columns) == 0:\n                data = self.obj\n        elif self.include == \"all\":\n            if self.exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self.obj\n        else:\n            data = self.obj.select_dtypes(\n                include=self.include,\n                exclude=self.exclude,\n            )\n        return data\n\n\ndef reorder_columns(ldesc: Sequence[Series]) -> list[Hashable]:\n    \"\"\"Set a convenient order for rows for display.\"\"\"\n    names: list[Hashable] = []\n    seen_names: set[Hashable] = set()\n    ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n    for idxnames in ldesc_indexes:\n        for name in idxnames:\n            if name not in seen_names:\n                seen_names.add(name)\n                names.append(name)\n    return names\n\n\ndef describe_numeric_1d(series: Series, percentiles: Sequence[float]) -> Series:\n    \"\"\"Describe series containing numerical data.\n\n    Parameters\n    ----------\n    series : Series\n        Series to be described.\n    percentiles : list-like of numbers\n        The percentiles to include in the output.\n    \"\"\"\n    from pandas import Series\n\n    formatted_percentiles = format_percentiles(percentiles)\n\n    if len(percentiles) == 0:\n        quantiles = []\n    else:\n        quantiles = series.quantile(percentiles).tolist()\n\n    stat_index = [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n    d = (\n        [series.count(), series.mean(), series.std(), series.min()]\n        + quantiles\n        + [series.max()]\n    )\n    # GH#48340 - always return float on non-complex numeric data\n    dtype: DtypeObj | None\n    if isinstance(series.dtype, ExtensionDtype):\n        if isinstance(series.dtype, ArrowDtype):\n            if series.dtype.kind == \"m\":\n                # GH53001: describe timedeltas with object dtype\n                dtype = None\n            else:\n                import pyarrow as pa\n\n                dtype = ArrowDtype(pa.float64())\n        else:\n            dtype = Float64Dtype()\n    elif series.dtype.kind in \"iufb\":\n        # i.e. numeric but exclude complex dtype\n        dtype = np.dtype(\"float\")\n    else:\n        dtype = None\n    return Series(d, index=stat_index, name=series.name, dtype=dtype)\n\n\ndef describe_categorical_1d(\n    data: Series,\n    percentiles_ignored: Sequence[float],\n) -> Series:\n    \"\"\"Describe series containing categorical data.\n\n    Parameters\n    ----------\n    data : Series\n        Series to be described.\n    percentiles_ignored : list-like of numbers\n        Ignored, but in place to unify interface.\n    \"\"\"\n    names = [\"count\", \"unique\", \"top\", \"freq\"]\n    objcounts = data.value_counts()\n    count_unique = len(objcounts[objcounts != 0])\n    if count_unique > 0:\n        top, freq = objcounts.index[0], objcounts.iloc[0]\n        dtype = None\n    else:\n        # If the DataFrame is empty, set 'top' and 'freq' to None\n        # to maintain output shape consistency\n        top, freq = np.nan, np.nan\n        dtype = \"object\"\n\n    result = [data.count(), count_unique, top, freq]\n\n    from pandas import Series\n\n    return Series(result, index=names, name=data.name, dtype=dtype)\n\n\ndef describe_timestamp_1d(data: Series, percentiles: Sequence[float]) -> Series:\n    \"\"\"Describe series containing datetime64 dtype.\n\n    Parameters\n    ----------\n    data : Series\n        Series to be described.\n    percentiles : list-like of numbers\n        The percentiles to include in the output.\n    \"\"\"\n    # GH-30164\n    from pandas import Series\n\n    formatted_percentiles = format_percentiles(percentiles)\n\n    stat_index = [\"count\", \"mean\", \"min\"] + formatted_percentiles + [\"max\"]\n    d = (\n        [data.count(), data.mean(), data.min()]\n        + data.quantile(percentiles).tolist()\n        + [data.max()]\n    )\n    return Series(d, index=stat_index, name=data.name)\n\n\ndef select_describe_func(\n    data: Series,\n) -> Callable:\n    \"\"\"Select proper function for describing series based on data type.\n\n    Parameters\n    ----------\n    data : Series\n        Series to be described.\n    \"\"\"\n    if is_bool_dtype(data.dtype):\n        return describe_categorical_1d\n    elif is_numeric_dtype(data):\n        return describe_numeric_1d\n    elif data.dtype.kind == \"M\" or isinstance(data.dtype, DatetimeTZDtype):\n        return describe_timestamp_1d\n    elif data.dtype.kind == \"m\":\n        return describe_numeric_1d\n    else:\n        return describe_categorical_1d\n\n\ndef _refine_percentiles(\n    percentiles: Sequence[float] | np.ndarray | None,\n) -> npt.NDArray[np.float64]:\n    \"\"\"\n    Ensure that percentiles are unique and sorted.\n\n    Parameters\n    ----------\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output.\n    \"\"\"\n    if percentiles is None:\n        return np.array([0.25, 0.5, 0.75])\n\n    # explicit conversion of `percentiles` to list\n    percentiles = list(percentiles)\n\n    # get them all to be in [0, 1]\n    validate_percentile(percentiles)\n\n    percentiles = np.asarray(percentiles)\n\n    # sort and check for duplicates\n    unique_pcts = np.unique(percentiles)\n    assert percentiles is not None\n    if len(unique_pcts) < len(percentiles):\n        raise ValueError(\"percentiles cannot contain duplicates\")\n\n    return unique_pcts\n"
    },
    {
      "filename": "pandas/io/formats/format.py",
      "content": "\"\"\"\nInternal module for formatting output data in csv, html, xml,\nand latex files. This module also applies to display formatting.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections.abc import (\n    Callable,\n    Generator,\n    Hashable,\n    Mapping,\n    Sequence,\n)\nfrom contextlib import contextmanager\nfrom csv import QUOTE_NONE\nfrom decimal import Decimal\nfrom functools import partial\nfrom io import StringIO\nimport math\nimport re\nfrom shutil import get_terminal_size\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Final,\n    cast,\n)\n\nimport numpy as np\n\nfrom pandas._config.config import (\n    get_option,\n    set_option,\n)\n\nfrom pandas._libs import lib\nfrom pandas._libs.missing import NA\nfrom pandas._libs.tslibs import (\n    NaT,\n    Timedelta,\n    Timestamp,\n)\nfrom pandas._libs.tslibs.nattype import NaTType\n\nfrom pandas.core.dtypes.common import (\n    is_complex_dtype,\n    is_float,\n    is_integer,\n    is_list_like,\n    is_numeric_dtype,\n    is_scalar,\n)\nfrom pandas.core.dtypes.dtypes import (\n    CategoricalDtype,\n    DatetimeTZDtype,\n    ExtensionDtype,\n)\nfrom pandas.core.dtypes.missing import (\n    isna,\n    notna,\n)\n\nfrom pandas.core.arrays import (\n    Categorical,\n    DatetimeArray,\n    ExtensionArray,\n    TimedeltaArray,\n)\nfrom pandas.core.arrays.string_ import StringDtype\nfrom pandas.core.base import PandasObject\nimport pandas.core.common as com\nfrom pandas.core.indexes.api import (\n    Index,\n    MultiIndex,\n    PeriodIndex,\n    ensure_index,\n)\nfrom pandas.core.indexes.datetimes import DatetimeIndex\nfrom pandas.core.indexes.timedeltas import TimedeltaIndex\n\nfrom pandas.io.common import (\n    check_parent_directory,\n    stringify_path,\n)\nfrom pandas.io.formats import printing\n\nif TYPE_CHECKING:\n    from pandas._typing import (\n        ArrayLike,\n        Axes,\n        ColspaceArgType,\n        ColspaceType,\n        CompressionOptions,\n        FilePath,\n        FloatFormatType,\n        FormattersType,\n        IndexLabel,\n        SequenceNotStr,\n        StorageOptions,\n        WriteBuffer,\n    )\n\n    from pandas import (\n        DataFrame,\n        Series,\n    )\n\n\ncommon_docstring: Final = \"\"\"\n        Parameters\n        ----------\n        buf : str, Path or StringIO-like, optional, default None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : array-like, optional, default None\n            The subset of columns to write. Writes all columns by default.\n        col_space : %(col_space_type)s, optional\n            %(col_space)s.\n        header : %(header_type)s, optional\n            %(header)s.\n        index : bool, optional, default True\n            Whether to print index (row) labels.\n        na_rep : str, optional, default 'NaN'\n            String representation of ``NaN`` to use.\n        formatters : list, tuple or dict of one-param. functions, optional\n            Formatter functions to apply to columns' elements by position or\n            name.\n            The result of each function must be a unicode string.\n            List/tuple must be of length equal to the number of columns.\n        float_format : one-parameter function, optional, default None\n            Formatter function to apply to columns' elements if they are\n            floats. This function must return a unicode string and will be\n            applied only to the non-``NaN`` elements, with ``NaN`` being\n            handled by ``na_rep``.\n        sparsify : bool, optional, default True\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row.\n        index_names : bool, optional, default True\n            Prints the names of the indexes.\n        justify : str, default None\n            How to justify the column labels. If None uses the option from\n            the print configuration (controlled by set_option), 'right' out\n            of the box. Valid values are\n\n            * left\n            * right\n            * center\n            * justify\n            * justify-all\n            * start\n            * end\n            * inherit\n            * match-parent\n            * initial\n            * unset.\n        max_rows : int, optional\n            Maximum number of rows to display in the console.\n        max_cols : int, optional\n            Maximum number of columns to display in the console.\n        show_dimensions : bool, default False\n            Display DataFrame dimensions (number of rows by number of columns).\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n    \"\"\"\n\nVALID_JUSTIFY_PARAMETERS = (\n    \"left\",\n    \"right\",\n    \"center\",\n    \"justify\",\n    \"justify-all\",\n    \"start\",\n    \"end\",\n    \"inherit\",\n    \"match-parent\",\n    \"initial\",\n    \"unset\",\n)\n\nreturn_docstring: Final = \"\"\"\n        Returns\n        -------\n        str or None\n            If buf is None, returns the result as a string. Otherwise returns\n            None.\n    \"\"\"\n\n\nclass SeriesFormatter:\n    \"\"\"\n    Implement the main logic of Series.to_string, which underlies\n    Series.__repr__.\n    \"\"\"\n\n    def __init__(\n        self,\n        series: Series,\n        *,\n        length: bool | str = True,\n        header: bool = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        name: bool = False,\n        float_format: str | None = None,\n        dtype: bool = True,\n        max_rows: int | None = None,\n        min_rows: int | None = None,\n    ) -> None:\n        self.series = series\n        self.buf = StringIO()\n        self.name = name\n        self.na_rep = na_rep\n        self.header = header\n        self.length = length\n        self.index = index\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n\n        if float_format is None:\n            float_format = get_option(\"display.float_format\")\n        self.float_format = float_format\n        self.dtype = dtype\n        self.adj = printing.get_adjustment()\n\n        self._chk_truncate()\n\n    def _chk_truncate(self) -> None:\n        self.tr_row_num: int | None\n\n        min_rows = self.min_rows\n        max_rows = self.max_rows\n        # truncation determined by max_rows, actual truncated number of rows\n        # used below by min_rows\n        is_truncated_vertically = max_rows and (len(self.series) > max_rows)\n        series = self.series\n        if is_truncated_vertically:\n            max_rows = cast(int, max_rows)\n            if min_rows:\n                # if min_rows is set (not None or 0), set max_rows to minimum\n                # of both\n                max_rows = min(min_rows, max_rows)\n            if max_rows == 1:\n                row_num = max_rows\n                series = series.iloc[:max_rows]\n            else:\n                row_num = max_rows // 2\n                _len = len(series)\n                _slice = np.hstack(\n                    [np.arange(row_num), np.arange(_len - row_num, _len)]\n                )\n                series = series.iloc[_slice]\n            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n        self.tr_series = series\n        self.is_truncated_vertically = is_truncated_vertically\n\n    def _get_footer(self) -> str:\n        name = self.series.name\n        footer = \"\"\n\n        index = self.series.index\n        if (\n            isinstance(index, (DatetimeIndex, PeriodIndex, TimedeltaIndex))\n            and index.freq is not None\n        ):\n            footer += f\"Freq: {index.freqstr}\"\n\n        if self.name is not False and name is not None:\n            if footer:\n                footer += \", \"\n\n            series_name = printing.pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            footer += f\"Name: {series_name}\"\n\n        if self.length is True or (\n            self.length == \"truncate\" and self.is_truncated_vertically\n        ):\n            if footer:\n                footer += \", \"\n            footer += f\"Length: {len(self.series)}\"\n\n        if self.dtype is not False and self.dtype is not None:\n            dtype_name = getattr(self.tr_series.dtype, \"name\", None)\n            if dtype_name:\n                if footer:\n                    footer += \", \"\n                footer += f\"dtype: {printing.pprint_thing(dtype_name)}\"\n\n        # level infos are added to the end and in a new line, like it is done\n        # for Categoricals\n        if isinstance(self.tr_series.dtype, CategoricalDtype):\n            level_info = self.tr_series._values._get_repr_footer()\n            if footer:\n                footer += \"\\n\"\n            footer += level_info\n\n        return str(footer)\n\n    def _get_formatted_values(self) -> list[str]:\n        return format_array(\n            self.tr_series._values,\n            None,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n            leading_space=self.index,\n        )\n\n    def to_string(self) -> str:\n        series = self.tr_series\n        footer = self._get_footer()\n\n        if len(series) == 0:\n            return f\"{type(self.series).__name__}([], {footer})\"\n\n        index = series.index\n        have_header = _has_names(index)\n        if isinstance(index, MultiIndex):\n            fmt_index = index._format_multi(include_names=True, sparsify=None)\n            adj = printing.get_adjustment()\n            fmt_index = adj.adjoin(2, *fmt_index).split(\"\\n\")\n        else:\n            fmt_index = index._format_flat(include_name=True)\n        fmt_values = self._get_formatted_values()\n\n        if self.is_truncated_vertically:\n            n_header_rows = 0\n            row_num = self.tr_row_num\n            row_num = cast(int, row_num)\n            width = self.adj.len(fmt_values[row_num - 1])\n            if width > 3:\n                dot_str = \"...\"\n            else:\n                dot_str = \"..\"\n            # Series uses mode=center because it has single value columns\n            # DataFrame uses mode=left\n            dot_str = self.adj.justify([dot_str], width, mode=\"center\")[0]\n            fmt_values.insert(row_num + n_header_rows, dot_str)\n            fmt_index.insert(row_num + 1, \"\")\n\n        if self.index:\n            result = self.adj.adjoin(3, *[fmt_index[1:], fmt_values])\n        else:\n            result = self.adj.adjoin(3, fmt_values)\n\n        if self.header and have_header:\n            result = fmt_index[0] + \"\\n\" + result\n\n        if footer:\n            result += \"\\n\" + footer\n\n        return str(\"\".join(result))\n\n\ndef get_dataframe_repr_params() -> dict[str, Any]:\n    \"\"\"Get the parameters used to repr(dataFrame) calls using DataFrame.to_string.\n\n    Supplying these parameters to DataFrame.to_string is equivalent to calling\n    ``repr(DataFrame)``. This is useful if you want to adjust the repr output.\n\n    .. versionadded:: 1.4.0\n\n    Example\n    -------\n    >>> import pandas as pd\n    >>>\n    >>> df = pd.DataFrame([[1, 2], [3, 4]])\n    >>> repr_params = pd.io.formats.format.get_dataframe_repr_params()\n    >>> repr(df) == df.to_string(**repr_params)\n    True\n    \"\"\"\n    from pandas.io.formats import console\n\n    if get_option(\"display.expand_frame_repr\"):\n        line_width, _ = console.get_console_size()\n    else:\n        line_width = None\n    return {\n        \"max_rows\": get_option(\"display.max_rows\"),\n        \"min_rows\": get_option(\"display.min_rows\"),\n        \"max_cols\": get_option(\"display.max_columns\"),\n        \"max_colwidth\": get_option(\"display.max_colwidth\"),\n        \"show_dimensions\": get_option(\"display.show_dimensions\"),\n        \"line_width\": line_width,\n    }\n\n\ndef get_series_repr_params() -> dict[str, Any]:\n    \"\"\"Get the parameters used to repr(Series) calls using Series.to_string.\n\n    Supplying these parameters to Series.to_string is equivalent to calling\n    ``repr(series)``. This is useful if you want to adjust the series repr output.\n\n    .. versionadded:: 1.4.0\n\n    Example\n    -------\n    >>> import pandas as pd\n    >>>\n    >>> ser = pd.Series([1, 2, 3, 4])\n    >>> repr_params = pd.io.formats.format.get_series_repr_params()\n    >>> repr(ser) == ser.to_string(**repr_params)\n    True\n    \"\"\"\n    width, height = get_terminal_size()\n    max_rows_opt = get_option(\"display.max_rows\")\n    max_rows = height if max_rows_opt == 0 else max_rows_opt\n    min_rows = height if max_rows_opt == 0 else get_option(\"display.min_rows\")\n\n    return {\n        \"name\": True,\n        \"dtype\": True,\n        \"min_rows\": min_rows,\n        \"max_rows\": max_rows,\n        \"length\": get_option(\"display.show_dimensions\"),\n    }\n\n\nclass DataFrameFormatter:\n    \"\"\"\n    Class for processing dataframe formatting options and data.\n\n    Used by DataFrame.to_string, which backs DataFrame.__repr__.\n    \"\"\"\n\n    __doc__ = __doc__ if __doc__ else \"\"\n    __doc__ += common_docstring + return_docstring\n\n    def __init__(\n        self,\n        frame: DataFrame,\n        columns: Axes | None = None,\n        col_space: ColspaceArgType | None = None,\n        header: bool | SequenceNotStr[str] = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        formatters: FormattersType | None = None,\n        justify: str | None = None,\n        float_format: FloatFormatType | None = None,\n        sparsify: bool | None = None,\n        index_names: bool = True,\n        max_rows: int | None = None,\n        min_rows: int | None = None,\n        max_cols: int | None = None,\n        show_dimensions: bool | str = False,\n        decimal: str = \".\",\n        bold_rows: bool = False,\n        escape: bool = True,\n    ) -> None:\n        self.frame = frame\n        self.columns = self._initialize_columns(columns)\n        self.col_space = self._initialize_colspace(col_space)\n        self.header = header\n        self.index = index\n        self.na_rep = na_rep\n        self.formatters = self._initialize_formatters(formatters)\n        self.justify = self._initialize_justify(justify)\n        self.float_format = float_format\n        self.sparsify = self._initialize_sparsify(sparsify)\n        self.show_index_names = index_names\n        self.decimal = decimal\n        self.bold_rows = bold_rows\n        self.escape = escape\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n        self.max_cols = max_cols\n        self.show_dimensions = show_dimensions\n\n        self.max_cols_fitted = self._calc_max_cols_fitted()\n        self.max_rows_fitted = self._calc_max_rows_fitted()\n\n        self.tr_frame = self.frame\n        self.truncate()\n        self.adj = printing.get_adjustment()\n\n    def get_strcols(self) -> list[list[str]]:\n        \"\"\"\n        Render a DataFrame to a list of columns (as lists of strings).\n        \"\"\"\n        strcols = self._get_strcols_without_index()\n\n        if self.index:\n            str_index = self._get_formatted_index(self.tr_frame)\n            strcols.insert(0, str_index)\n\n        return strcols\n\n    @property\n    def should_show_dimensions(self) -> bool:\n        return self.show_dimensions is True or (\n            self.show_dimensions == \"truncate\" and self.is_truncated\n        )\n\n    @property\n    def is_truncated(self) -> bool:\n        return bool(self.is_truncated_horizontally or self.is_truncated_vertically)\n\n    @property\n    def is_truncated_horizontally(self) -> bool:\n        return bool(self.max_cols_fitted and (len(self.columns) > self.max_cols_fitted))\n\n    @property\n    def is_truncated_vertically(self) -> bool:\n        return bool(self.max_rows_fitted and (len(self.frame) > self.max_rows_fitted))\n\n    @property\n    def dimensions_info(self) -> str:\n        return f\"\\n\\n[{len(self.frame)} rows x {len(self.frame.columns)} columns]\"\n\n    @property\n    def has_index_names(self) -> bool:\n        return _has_names(self.frame.index)\n\n    @property\n    def has_column_names(self) -> bool:\n        return _has_names(self.frame.columns)\n\n    @property\n    def show_row_idx_names(self) -> bool:\n        return all((self.has_index_names, self.index, self.show_index_names))\n\n    @property\n    def show_col_idx_names(self) -> bool:\n        return all((self.has_column_names, self.show_index_names, self.header))\n\n    @property\n    def max_rows_displayed(self) -> int:\n        return min(self.max_rows or len(self.frame), len(self.frame))\n\n    def _initialize_sparsify(self, sparsify: bool | None) -> bool:\n        if sparsify is None:\n            return get_option(\"display.multi_sparse\")\n        return sparsify\n\n    def _initialize_formatters(\n        self, formatters: FormattersType | None\n    ) -> FormattersType:\n        if formatters is None:\n            return {}\n        elif len(self.frame.columns) == len(formatters) or isinstance(formatters, dict):\n            return formatters\n        else:\n            raise ValueError(\n                f\"Formatters length({len(formatters)}) should match \"\n                f\"DataFrame number of columns({len(self.frame.columns)})\"\n            )\n\n    def _initialize_justify(self, justify: str | None) -> str:\n        if justify is None:\n            return get_option(\"display.colheader_justify\")\n        else:\n            return justify\n\n    def _initialize_columns(self, columns: Axes | None) -> Index:\n        if columns is not None:\n            cols = ensure_index(columns)\n            self.frame = self.frame[cols]\n            return cols\n        else:\n            return self.frame.columns\n\n    def _initialize_colspace(self, col_space: ColspaceArgType | None) -> ColspaceType:\n        result: ColspaceType\n\n        if col_space is None:\n            result = {}\n        elif isinstance(col_space, (int, str)):\n            result = {\"\": col_space}\n            result.update({column: col_space for column in self.frame.columns})\n        elif isinstance(col_space, Mapping):\n            for column in col_space.keys():\n                if column not in self.frame.columns and column != \"\":\n                    raise ValueError(\n                        f\"Col_space is defined for an unknown column: {column}\"\n                    )\n            result = col_space\n        else:\n            if len(self.frame.columns) != len(col_space):\n                raise ValueError(\n                    f\"Col_space length({len(col_space)}) should match \"\n                    f\"DataFrame number of columns({len(self.frame.columns)})\"\n                )\n            result = dict(zip(self.frame.columns, col_space))\n        return result\n\n    def _calc_max_cols_fitted(self) -> int | None:\n        \"\"\"Number of columns fitting the screen.\"\"\"\n        if not self._is_in_terminal():\n            return self.max_cols\n\n        width, _ = get_terminal_size()\n        if self._is_screen_narrow(width):\n            return width\n        else:\n            return self.max_cols\n\n    def _calc_max_rows_fitted(self) -> int | None:\n        \"\"\"Number of rows with data fitting the screen.\"\"\"\n        max_rows: int | None\n\n        if self._is_in_terminal():\n            _, height = get_terminal_size()\n            if self.max_rows == 0:\n                # rows available to fill with actual data\n                return height - self._get_number_of_auxiliary_rows()\n\n            if self._is_screen_short(height):\n                max_rows = height\n            else:\n                max_rows = self.max_rows\n        else:\n            max_rows = self.max_rows\n\n        return self._adjust_max_rows(max_rows)\n\n    def _adjust_max_rows(self, max_rows: int | None) -> int | None:\n        \"\"\"Adjust max_rows using display logic.\n\n        See description here:\n        https://pandas.pydata.org/docs/dev/user_guide/options.html#frequently-used-options\n\n        GH #37359\n        \"\"\"\n        if max_rows:\n            if (len(self.frame) > max_rows) and self.min_rows:\n                # if truncated, set max_rows showed to min_rows\n                max_rows = min(self.min_rows, max_rows)\n        return max_rows\n\n    def _is_in_terminal(self) -> bool:\n        \"\"\"Check if the output is to be shown in terminal.\"\"\"\n        return bool(self.max_cols == 0 or self.max_rows == 0)\n\n    def _is_screen_narrow(self, max_width) -> bool:\n        return bool(self.max_cols == 0 and len(self.frame.columns) > max_width)\n\n    def _is_screen_short(self, max_height) -> bool:\n        return bool(self.max_rows == 0 and len(self.frame) > max_height)\n\n    def _get_number_of_auxiliary_rows(self) -> int:\n        \"\"\"Get number of rows occupied by prompt, dots and dimension info.\"\"\"\n        dot_row = 1\n        prompt_row = 1\n        num_rows = dot_row + prompt_row\n\n        if self.show_dimensions:\n            num_rows += len(self.dimensions_info.splitlines())\n\n        if self.header:\n            num_rows += 1\n\n        return num_rows\n\n    def truncate(self) -> None:\n        \"\"\"\n        Check whether the frame should be truncated. If so, slice the frame up.\n        \"\"\"\n        if self.is_truncated_horizontally:\n            self._truncate_horizontally()\n\n        if self.is_truncated_vertically:\n            self._truncate_vertically()\n\n    def _truncate_horizontally(self) -> None:\n        \"\"\"Remove columns, which are not to be displayed and adjust formatters.\n\n        Attributes affected:\n            - tr_frame\n            - formatters\n            - tr_col_num\n        \"\"\"\n        assert self.max_cols_fitted is not None\n        col_num = self.max_cols_fitted // 2\n        if col_num >= 1:\n            _len = len(self.tr_frame.columns)\n            _slice = np.hstack([np.arange(col_num), np.arange(_len - col_num, _len)])\n            self.tr_frame = self.tr_frame.iloc[:, _slice]\n\n            # truncate formatter\n            if isinstance(self.formatters, (list, tuple)):\n                self.formatters = [\n                    *self.formatters[:col_num],\n                    *self.formatters[-col_num:],\n                ]\n        else:\n            col_num = cast(int, self.max_cols)\n            self.tr_frame = self.tr_frame.iloc[:, :col_num]\n        self.tr_col_num: int = col_num\n\n    def _truncate_vertically(self) -> None:\n        \"\"\"Remove rows, which are not to be displayed.\n\n        Attributes affected:\n            - tr_frame\n            - tr_row_num\n        \"\"\"\n        assert self.max_rows_fitted is not None\n        row_num = self.max_rows_fitted // 2\n        if row_num >= 1:\n            _len = len(self.tr_frame)\n            _slice = np.hstack([np.arange(row_num), np.arange(_len - row_num, _len)])\n            self.tr_frame = self.tr_frame.iloc[_slice]\n        else:\n            row_num = cast(int, self.max_rows)\n            self.tr_frame = self.tr_frame.iloc[:row_num, :]\n        self.tr_row_num = row_num\n\n    def _get_strcols_without_index(self) -> list[list[str]]:\n        strcols: list[list[str]] = []\n\n        if not is_list_like(self.header) and not self.header:\n            for i, c in enumerate(self.tr_frame):\n                fmt_values = self.format_col(i)\n                fmt_values = _make_fixed_width(\n                    strings=fmt_values,\n                    justify=self.justify,\n                    minimum=int(self.col_space.get(c, 0)),\n                    adj=self.adj,\n                )\n                strcols.append(fmt_values)\n            return strcols\n\n        if is_list_like(self.header):\n            # cast here since can't be bool if is_list_like\n            self.header = cast(list[str], self.header)\n            if len(self.header) != len(self.columns):\n                raise ValueError(\n                    f\"Writing {len(self.columns)} cols \"\n                    f\"but got {len(self.header)} aliases\"\n                )\n            str_columns = [[label] for label in self.header]\n        else:\n            str_columns = self._get_formatted_column_labels(self.tr_frame)\n\n        if self.show_row_idx_names:\n            for x in str_columns:\n                x.append(\"\")\n\n        for i, c in enumerate(self.tr_frame):\n            cheader = str_columns[i]\n            header_colwidth = max(\n                int(self.col_space.get(c, 0)), *(self.adj.len(x) for x in cheader)\n            )\n            fmt_values = self.format_col(i)\n            fmt_values = _make_fixed_width(\n                fmt_values, self.justify, minimum=header_colwidth, adj=self.adj\n            )\n\n            max_len = max(*(self.adj.len(x) for x in fmt_values), header_colwidth)\n            cheader = self.adj.justify(cheader, max_len, mode=self.justify)\n            strcols.append(cheader + fmt_values)\n\n        return strcols\n\n    def format_col(self, i: int) -> list[str]:\n        frame = self.tr_frame\n        formatter = self._get_formatter(i)\n        return format_array(\n            frame.iloc[:, i]._values,\n            formatter,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n            space=self.col_space.get(frame.columns[i]),\n            decimal=self.decimal,\n            leading_space=self.index,\n        )\n\n    def _get_formatter(self, i: str | int) -> Callable | None:\n        if isinstance(self.formatters, (list, tuple)):\n            if is_integer(i):\n                i = cast(int, i)\n                return self.formatters[i]\n            else:\n                return None\n        else:\n            if is_integer(i) and i not in self.columns:\n                i = self.columns[i]\n            return self.formatters.get(i, None)\n\n    def _get_formatted_column_labels(self, frame: DataFrame) -> list[list[str]]:\n        from pandas.core.indexes.multi import sparsify_labels\n\n        columns = frame.columns\n\n        if isinstance(columns, MultiIndex):\n            fmt_columns = columns._format_multi(sparsify=False, include_names=False)\n            if self.sparsify and len(fmt_columns):\n                fmt_columns = sparsify_labels(fmt_columns)\n\n            str_columns = [list(x) for x in zip(*fmt_columns)]\n        else:\n            fmt_columns = columns._format_flat(include_name=False)\n            str_columns = [\n                [\n                    \" \" + x\n                    if not self._get_formatter(i) and is_numeric_dtype(dtype)\n                    else x\n                ]\n                for i, (x, dtype) in enumerate(zip(fmt_columns, self.frame.dtypes))\n            ]\n        return str_columns\n\n    def _get_formatted_index(self, frame: DataFrame) -> list[str]:\n        # Note: this is only used by to_string() and to_latex(), not by\n        # to_html(). so safe to cast col_space here.\n        col_space = {k: cast(int, v) for k, v in self.col_space.items()}\n        index = frame.index\n        columns = frame.columns\n        fmt = self._get_formatter(\"__index__\")\n\n        if isinstance(index, MultiIndex):\n            fmt_index = index._format_multi(\n                sparsify=self.sparsify,\n                include_names=self.show_row_idx_names,\n                formatter=fmt,\n            )\n        else:\n            fmt_index = [\n                index._format_flat(include_name=self.show_row_idx_names, formatter=fmt)\n            ]\n\n        fmt_index = [\n            tuple(\n                _make_fixed_width(\n                    list(x), justify=\"left\", minimum=col_space.get(\"\", 0), adj=self.adj\n                )\n            )\n            for x in fmt_index\n        ]\n\n        adjoined = self.adj.adjoin(1, *fmt_index).split(\"\\n\")\n\n        # empty space for columns\n        if self.show_col_idx_names:\n            col_header = [str(x) for x in self._get_column_name_list()]\n        else:\n            col_header = [\"\"] * columns.nlevels\n\n        if self.header:\n            return col_header + adjoined\n        else:\n            return adjoined\n\n    def _get_column_name_list(self) -> list[Hashable]:\n        names: list[Hashable] = []\n        columns = self.frame.columns\n        if isinstance(columns, MultiIndex):\n            names.extend(\"\" if name is None else name for name in columns.names)\n        else:\n            names.append(\"\" if columns.name is None else columns.name)\n        return names\n\n\nclass DataFrameRenderer:\n    \"\"\"Class for creating dataframe output in multiple formats.\n\n    Called in pandas.core.generic.NDFrame:\n        - to_csv\n        - to_latex\n\n    Called in pandas.DataFrame:\n        - to_html\n        - to_string\n\n    Parameters\n    ----------\n    fmt : DataFrameFormatter\n        Formatter with the formatting options.\n    \"\"\"\n\n    def __init__(self, fmt: DataFrameFormatter) -> None:\n        self.fmt = fmt\n\n    def to_html(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        encoding: str | None = None,\n        classes: str | list | tuple | None = None,\n        notebook: bool = False,\n        border: int | bool | None = None,\n        table_id: str | None = None,\n        render_links: bool = False,\n    ) -> str | None:\n        \"\"\"\n        Render a DataFrame to a html table.\n\n        Parameters\n        ----------\n        buf : str, path object, file-like object, or None, default None\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a string ``write()`` function. If None, the result is\n            returned as a string.\n        encoding : str, default “utf-8”\n            Set character encoding.\n        classes : str or list-like\n            classes to include in the `class` attribute of the opening\n            ``<table>`` tag, in addition to the default \"dataframe\".\n        notebook : {True, False}, optional, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int or bool\n            When an integer value is provided, it sets the border attribute in\n            the opening tag, specifying the thickness of the border.\n            If ``False`` or ``0`` is passed, the border attribute will not\n            be present in the ``<table>`` tag.\n            The default value for this parameter is governed by\n            ``pd.options.display.html.border``.\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n        render_links : bool, default False\n            Convert URLs to HTML links.\n        \"\"\"\n        from pandas.io.formats.html import (\n            HTMLFormatter,\n            NotebookFormatter,\n        )\n\n        Klass = NotebookFormatter if notebook else HTMLFormatter\n\n        html_formatter = Klass(\n            self.fmt,\n            classes=classes,\n            border=border,\n            table_id=table_id,\n            render_links=render_links,\n        )\n        string = html_formatter.to_string()\n        return save_to_buffer(string, buf=buf, encoding=encoding)\n\n    def to_string(\n        self,\n        buf: FilePath | WriteBuffer[str] | None = None,\n        encoding: str | None = None,\n        line_width: int | None = None,\n    ) -> str | None:\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n\n        Parameters\n        ----------\n        buf : str, path object, file-like object, or None, default None\n            String, path object (implementing ``os.PathLike[str]``), or file-like\n            object implementing a string ``write()`` function. If None, the result is\n            returned as a string.\n        encoding: str, default “utf-8”\n            Set character encoding.\n        line_width : int, optional\n            Width to wrap a line in characters.\n        \"\"\"\n        from pandas.io.formats.string import StringFormatter\n\n        string_formatter = StringFormatter(self.fmt, line_width=line_width)\n        string = string_formatter.to_string()\n        return save_to_buffer(string, buf=buf, encoding=encoding)\n\n    def to_csv(\n        self,\n        path_or_buf: FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None = None,\n        encoding: str | None = None,\n        sep: str = \",\",\n        columns: Sequence[Hashable] | None = None,\n        index_label: IndexLabel | None = None,\n        mode: str = \"w\",\n        compression: CompressionOptions = \"infer\",\n        quoting: int | None = None,\n        quotechar: str = '\"',\n        lineterminator: str | None = None,\n        chunksize: int | None = None,\n        date_format: str | None = None,\n        doublequote: bool = True,\n        escapechar: str | None = None,\n        errors: str = \"strict\",\n        storage_options: StorageOptions | None = None,\n    ) -> str | None:\n        \"\"\"\n        Render dataframe as comma-separated file.\n        \"\"\"\n        from pandas.io.formats.csvs import CSVFormatter\n\n        if path_or_buf is None:\n            created_buffer = True\n            path_or_buf = StringIO()\n        else:\n            created_buffer = False\n\n        csv_formatter = CSVFormatter(\n            path_or_buf=path_or_buf,\n            lineterminator=lineterminator,\n            sep=sep,\n            encoding=encoding,\n            errors=errors,\n            compression=compression,\n            quoting=quoting,\n            cols=columns,\n            index_label=index_label,\n            mode=mode,\n            chunksize=chunksize,\n            quotechar=quotechar,\n            date_format=date_format,\n            doublequote=doublequote,\n            escapechar=escapechar,\n            storage_options=storage_options,\n            formatter=self.fmt,\n        )\n        csv_formatter.save()\n\n        if created_buffer:\n            assert isinstance(path_or_buf, StringIO)\n            content = path_or_buf.getvalue()\n            path_or_buf.close()\n            return content\n\n        return None\n\n\ndef save_to_buffer(\n    string: str,\n    buf: FilePath | WriteBuffer[str] | None = None,\n    encoding: str | None = None,\n) -> str | None:\n    \"\"\"\n    Perform serialization. Write to buf or return as string if buf is None.\n    \"\"\"\n    with _get_buffer(buf, encoding=encoding) as fd:\n        fd.write(string)\n        if buf is None:\n            # error: \"WriteBuffer[str]\" has no attribute \"getvalue\"\n            return fd.getvalue()  # type: ignore[attr-defined]\n        return None\n\n\n@contextmanager\ndef _get_buffer(\n    buf: FilePath | WriteBuffer[str] | None, encoding: str | None = None\n) -> Generator[WriteBuffer[str]] | Generator[StringIO]:\n    \"\"\"\n    Context manager to open, yield and close buffer for filenames or Path-like\n    objects, otherwise yield buf unchanged.\n    \"\"\"\n    if buf is not None:\n        buf = stringify_path(buf)\n    else:\n        buf = StringIO()\n\n    if encoding is None:\n        encoding = \"utf-8\"\n    elif not isinstance(buf, str):\n        raise ValueError(\"buf is not a file name and encoding is specified.\")\n\n    if hasattr(buf, \"write\"):\n        # Incompatible types in \"yield\" (actual type \"Union[str, WriteBuffer[str],\n        # StringIO]\", expected type \"Union[WriteBuffer[str], StringIO]\")\n        yield buf  # type: ignore[misc]\n    elif isinstance(buf, str):\n        check_parent_directory(str(buf))\n        with open(buf, \"w\", encoding=encoding, newline=\"\") as f:\n            # GH#30034 open instead of codecs.open prevents a file leak\n            #  if we have an invalid encoding argument.\n            # newline=\"\" is needed to roundtrip correctly on\n            #  windows test_to_latex_filename\n            yield f\n    else:\n        raise TypeError(\"buf is not a file name and it has no write method\")\n\n\n# ----------------------------------------------------------------------\n# Array formatters\n\n\ndef format_array(\n    values: ArrayLike,\n    formatter: Callable | None,\n    float_format: FloatFormatType | None = None,\n    na_rep: str = \"NaN\",\n    digits: int | None = None,\n    space: str | int | None = None,\n    justify: str = \"right\",\n    decimal: str = \".\",\n    leading_space: bool | None = True,\n    quoting: int | None = None,\n    fallback_formatter: Callable | None = None,\n) -> list[str]:\n    \"\"\"\n    Format an array for printing.\n\n    Parameters\n    ----------\n    values : np.ndarray or ExtensionArray\n    formatter\n    float_format\n    na_rep\n    digits\n    space\n    justify\n    decimal\n    leading_space : bool, optional, default True\n        Whether the array should be formatted with a leading space.\n        When an array as a column of a Series or DataFrame, we do want\n        the leading space to pad between columns.\n\n        When formatting an Index subclass\n        (e.g. IntervalIndex._get_values_for_csv), we don't want the\n        leading space since it should be left-aligned.\n    fallback_formatter\n\n    Returns\n    -------\n    List[str]\n    \"\"\"\n    fmt_klass: type[_GenericArrayFormatter]\n    if lib.is_np_dtype(values.dtype, \"M\"):\n        fmt_klass = _Datetime64Formatter\n        values = cast(DatetimeArray, values)\n    elif isinstance(values.dtype, DatetimeTZDtype):\n        fmt_klass = _Datetime64TZFormatter\n        values = cast(DatetimeArray, values)\n    elif lib.is_np_dtype(values.dtype, \"m\"):\n        fmt_klass = _Timedelta64Formatter\n        values = cast(TimedeltaArray, values)\n    elif isinstance(values.dtype, ExtensionDtype):\n        fmt_klass = _ExtensionArrayFormatter\n    elif lib.is_np_dtype(values.dtype, \"fc\"):\n        fmt_klass = FloatArrayFormatter\n    elif lib.is_np_dtype(values.dtype, \"iu\"):\n        fmt_klass = _IntArrayFormatter\n    else:\n        fmt_klass = _GenericArrayFormatter\n\n    if space is None:\n        space = 12\n\n    if float_format is None:\n        float_format = get_option(\"display.float_format\")\n\n    if digits is None:\n        digits = get_option(\"display.precision\")\n\n    fmt_obj = fmt_klass(\n        values,\n        digits=digits,\n        na_rep=na_rep,\n        float_format=float_format,\n        formatter=formatter,\n        space=space,\n        justify=justify,\n        decimal=decimal,\n        leading_space=leading_space,\n        quoting=quoting,\n        fallback_formatter=fallback_formatter,\n    )\n\n    return fmt_obj.get_result()\n\n\nclass _GenericArrayFormatter:\n    def __init__(\n        self,\n        values: ArrayLike,\n        digits: int = 7,\n        formatter: Callable | None = None,\n        na_rep: str = \"NaN\",\n        space: str | int = 12,\n        float_format: FloatFormatType | None = None,\n        justify: str = \"right\",\n        decimal: str = \".\",\n        quoting: int | None = None,\n        fixed_width: bool = True,\n        leading_space: bool | None = True,\n        fallback_formatter: Callable | None = None,\n    ) -> None:\n        self.values = values\n        self.digits = digits\n        self.na_rep = na_rep\n        self.space = space\n        self.formatter = formatter\n        self.float_format = float_format\n        self.justify = justify\n        self.decimal = decimal\n        self.quoting = quoting\n        self.fixed_width = fixed_width\n        self.leading_space = leading_space\n        self.fallback_formatter = fallback_formatter\n\n    def get_result(self) -> list[str]:\n        fmt_values = self._format_strings()\n        return _make_fixed_width(fmt_values, self.justify)\n\n    def _format_strings(self) -> list[str]:\n        if self.float_format is None:\n            float_format = get_option(\"display.float_format\")\n            if float_format is None:\n                precision = get_option(\"display.precision\")\n                float_format = lambda x: _trim_zeros_single_float(\n                    f\"{x: .{precision:d}f}\"\n                )\n        else:\n            float_format = self.float_format\n\n        if self.formatter is not None:\n            formatter = self.formatter\n        elif self.fallback_formatter is not None:\n            formatter = self.fallback_formatter\n        else:\n            quote_strings = self.quoting is not None and self.quoting != QUOTE_NONE\n            formatter = partial(\n                printing.pprint_thing,\n                escape_chars=(\"\\t\", \"\\r\", \"\\n\"),\n                quote_strings=quote_strings,\n            )\n\n        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                if x is None:\n                    return \"None\"\n                elif x is NA:\n                    return str(NA)\n                elif x is NaT or isinstance(x, (np.datetime64, np.timedelta64)):\n                    return \"NaT\"\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return str(x)\n            elif isinstance(x, StringDtype):\n                return repr(x)\n            else:\n                # object dtype\n                return str(formatter(x))\n\n        vals = self.values\n        if not isinstance(vals, np.ndarray):\n            raise TypeError(\n                \"ExtensionArray formatting should use _ExtensionArrayFormatter\"\n            )\n        inferred = lib.map_infer(vals, is_float)\n        is_float_type = (\n            inferred\n            # vals may have 2 or more dimensions\n            & np.all(notna(vals), axis=tuple(range(1, len(vals.shape))))\n        )\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()\n\n        fmt_values = []\n        for i, v in enumerate(vals):\n            if (not is_float_type[i] or self.formatter is not None) and leading_space:\n                fmt_values.append(f\" {_format(v)}\")\n            elif is_float_type[i]:\n                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here.\n                    tpl = \"{v}\"\n                else:\n                    tpl = \" {v}\"\n                fmt_values.append(tpl.format(v=_format(v)))\n\n        return fmt_values\n\n\nclass FloatArrayFormatter(_GenericArrayFormatter):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n\n        # float_format is expected to be a string\n        # formatter should be used to pass a function\n        if self.float_format is not None and self.formatter is None:\n            # GH21625, GH22270\n            self.fixed_width = False\n            if callable(self.float_format):\n                self.formatter = self.float_format\n                self.float_format = None\n\n    def _value_formatter(\n        self,\n        float_format: FloatFormatType | None = None,\n        threshold: float | None = None,\n    ) -> Callable:\n        \"\"\"Returns a function to be applied on each value to format it\"\"\"\n        # the float_format parameter supersedes self.float_format\n        if float_format is None:\n            float_format = self.float_format\n\n        # we are going to compose different functions, to first convert to\n        # a string, then replace the decimal symbol, and finally chop according\n        # to the threshold\n\n        # when there is no float_format, we use str instead of '%g'\n        # because str(0.0) = '0.0' while '%g' % 0.0 = '0'\n        if float_format:\n\n            def base_formatter(v):\n                assert float_format is not None  # for mypy\n                # error: \"str\" not callable\n                # error: Unexpected keyword argument \"value\" for \"__call__\" of\n                # \"EngFormatter\"\n                return (\n                    float_format(value=v)  # type: ignore[operator,call-arg]\n                    if notna(v)\n                    else self.na_rep\n                )\n\n        else:\n\n            def base_formatter(v):\n                return str(v) if notna(v) else self.na_rep\n\n        if self.decimal != \".\":\n\n            def decimal_formatter(v):\n                return base_formatter(v).replace(\".\", self.decimal, 1)\n\n        else:\n            decimal_formatter = base_formatter\n\n        if threshold is None:\n            return decimal_formatter\n\n        def formatter(value):\n            if notna(value):\n                if abs(value) > threshold:\n                    return decimal_formatter(value)\n                else:\n                    return decimal_formatter(0.0)\n            else:\n                return self.na_rep\n\n        return formatter\n\n    def get_result_as_array(self) -> np.ndarray:\n        \"\"\"\n        Returns the float values converted into strings using\n        the parameters given at initialisation, as a numpy array\n        \"\"\"\n\n        def format_with_na_rep(\n            values: ArrayLike, formatter: Callable, na_rep: str\n        ) -> np.ndarray:\n            mask = isna(values)\n            formatted = np.array(\n                [\n                    formatter(val) if not m else na_rep\n                    for val, m in zip(values.ravel(), mask.ravel())\n                ]\n            ).reshape(values.shape)\n            return formatted\n\n        def format_complex_with_na_rep(\n            values: ArrayLike, formatter: Callable, na_rep: str\n        ) -> np.ndarray:\n            real_values = np.real(values).ravel()  # type: ignore[arg-type]\n            imag_values = np.imag(values).ravel()  # type: ignore[arg-type]\n            real_mask, imag_mask = isna(real_values), isna(imag_values)\n            formatted_lst = []\n            for val, real_val, imag_val, re_isna, im_isna in zip(\n                values.ravel(),\n                real_values,\n                imag_values,\n                real_mask,\n                imag_mask,\n            ):\n                if not re_isna and not im_isna:\n                    formatted_lst.append(formatter(val))\n                elif not re_isna:  # xxx+nanj\n                    formatted_lst.append(f\"{formatter(real_val)}+{na_rep}j\")\n                elif not im_isna:  # nan[+/-]xxxj\n                    # The imaginary part may either start with a \"-\" or a space\n                    imag_formatted = formatter(imag_val).strip()\n                    if imag_formatted.startswith(\"-\"):\n                        formatted_lst.append(f\"{na_rep}{imag_formatted}j\")\n                    else:\n                        formatted_lst.append(f\"{na_rep}+{imag_formatted}j\")\n                else:  # nan+nanj\n                    formatted_lst.append(f\"{na_rep}+{na_rep}j\")\n            return np.array(formatted_lst).reshape(values.shape)\n\n        if self.formatter is not None:\n            return format_with_na_rep(self.values, self.formatter, self.na_rep)\n\n        if self.fixed_width:\n            threshold = get_option(\"display.chop_threshold\")\n        else:\n            threshold = None\n\n        # if we have a fixed_width, we'll need to try different float_format\n        def format_values_with(float_format):\n            formatter = self._value_formatter(float_format, threshold)\n\n            # default formatter leaves a space to the left when formatting\n            # floats, must be consistent for left-justifying NaNs (GH #25061)\n            na_rep = \" \" + self.na_rep if self.justify == \"left\" else self.na_rep\n\n            # different formatting strategies for complex and non-complex data\n            # need to distinguish complex and float NaNs (GH #53762)\n            values = self.values\n            is_complex = is_complex_dtype(values)\n\n            # separate the wheat from the chaff\n            if is_complex:\n                values = format_complex_with_na_rep(values, formatter, na_rep)\n            else:\n                values = format_with_na_rep(values, formatter, na_rep)\n\n            if self.fixed_width:\n                if is_complex:\n                    result = _trim_zeros_complex(values, self.decimal)\n                else:\n                    result = _trim_zeros_float(values, self.decimal)\n                return np.asarray(result, dtype=\"object\")\n\n            return values\n\n        # There is a special default string when we are fixed-width\n        # The default is otherwise to use str instead of a formatting string\n        float_format: FloatFormatType | None\n        if self.float_format is None:\n            if self.fixed_width:\n                if self.leading_space is True:\n                    fmt_str = \"{value: .{digits:d}f}\"\n                else:\n                    fmt_str = \"{value:.{digits:d}f}\"\n                float_format = partial(fmt_str.format, digits=self.digits)\n            else:\n                float_format = self.float_format\n        else:\n            float_format = lambda value: self.float_format % value\n\n        formatted_values = format_values_with(float_format)\n\n        if not self.fixed_width:\n            return formatted_values\n\n        # we need do convert to engineering format if some values are too small\n        # and would appear as 0, or if some values are too big and take too\n        # much space\n\n        if len(formatted_values) > 0:\n            maxlen = max(len(x) for x in formatted_values)\n            too_long = maxlen > self.digits + 6\n        else:\n            too_long = False\n\n        abs_vals = np.abs(self.values)\n        # this is pretty arbitrary for now\n        # large values: more that 8 characters including decimal symbol\n        # and first digit, hence > 1e6\n        has_large_values = (abs_vals > 1e6).any()\n        has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n\n        if has_small_values or (too_long and has_large_values):\n            if self.leading_space is True:\n                fmt_str = \"{value: .{digits:d}e}\"\n            else:\n                fmt_str = \"{value:.{digits:d}e}\"\n            float_format = partial(fmt_str.format, digits=self.digits)\n            formatted_values = format_values_with(float_format)\n\n        return formatted_values\n\n    def _format_strings(self) -> list[str]:\n        return list(self.get_result_as_array())\n\n\nclass _IntArrayFormatter(_GenericArrayFormatter):\n    def _format_strings(self) -> list[str]:\n        if self.leading_space is False:\n            formatter_str = lambda x: f\"{x:d}\".format(x=x)\n        else:\n            formatter_str = lambda x: f\"{x: d}\".format(x=x)\n        formatter = self.formatter or formatter_str\n        fmt_values = [formatter(x) for x in self.values]\n        return fmt_values\n\n\nclass _Datetime64Formatter(_GenericArrayFormatter):\n    values: DatetimeArray\n\n    def __init__(\n        self,\n        values: DatetimeArray,\n        nat_rep: str = \"NaT\",\n        date_format: None = None,\n        **kwargs,\n    ) -> None:\n        super().__init__(values, **kwargs)\n        self.nat_rep = nat_rep\n        self.date_format = date_format\n\n    def _format_strings(self) -> list[str]:\n        \"\"\"we by definition have DO NOT have a TZ\"\"\"\n        values = self.values\n\n        if self.formatter is not None:\n            return [self.formatter(x) for x in values]\n\n        fmt_values = values._format_native_types(\n            na_rep=self.nat_rep, date_format=self.date_format\n        )\n        return fmt_values.tolist()\n\n\nclass _ExtensionArrayFormatter(_GenericArrayFormatter):\n    values: ExtensionArray\n\n    def _format_strings(self) -> list[str]:\n        values = self.values\n\n        formatter = self.formatter\n        fallback_formatter = None\n        if formatter is None:\n            fallback_formatter = values._formatter(boxed=True)\n\n        if isinstance(values, Categorical):\n            # Categorical is special for now, so that we can preserve tzinfo\n            array = values._internal_get_values()\n        else:\n            array = np.asarray(values, dtype=object)\n\n        fmt_values = format_array(\n            array,\n            formatter,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n            digits=self.digits,\n            space=self.space,\n            justify=self.justify,\n            decimal=self.decimal,\n            leading_space=self.leading_space,\n            quoting=self.quoting,\n            fallback_formatter=fallback_formatter,\n        )\n        return fmt_values\n\n\ndef format_percentiles(\n    percentiles: np.ndarray | Sequence[float],\n) -> list[str]:\n    \"\"\"\n    Outputs rounded and formatted percentiles.\n\n    Parameters\n    ----------\n    percentiles : list-like, containing floats from interval [0,1]\n\n    Returns\n    -------\n    formatted : list of strings\n\n    Notes\n    -----\n    Rounding precision is chosen so that: (1) if any two elements of\n    ``percentiles`` differ, they remain different after rounding\n    (2) no entry is *rounded* to 0% or 100%.\n    Any non-integer is always rounded to at least 1 decimal place.\n\n    Examples\n    --------\n    Keeps all entries different after rounding:\n\n    >>> format_percentiles([0.01999, 0.02001, 0.5, 0.666666, 0.9999])\n    ['1.999%', '2.001%', '50%', '66.667%', '99.99%']\n\n    No element is rounded to 0% or 100% (unless already equal to it).\n    Duplicates are allowed:\n\n    >>> format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999])\n    ['0%', '50%', '2.0%', '50%', '66.67%', '99.99%']\n    \"\"\"\n    if len(percentiles) == 0:\n        return []\n\n    percentiles = np.asarray(percentiles)\n\n    # It checks for np.nan as well\n    if (\n        not is_numeric_dtype(percentiles)\n        or not np.all(percentiles >= 0)\n        or not np.all(percentiles <= 1)\n    ):\n        raise ValueError(\"percentiles should all be in the interval [0,1]\")\n\n    percentiles = 100 * percentiles\n    prec = get_precision(percentiles)\n    percentiles_round_type = percentiles.round(prec).astype(int)\n\n    int_idx = np.isclose(percentiles_round_type, percentiles)\n\n    if np.all(int_idx):\n        out = percentiles_round_type.astype(str)\n        return [i + \"%\" for i in out]\n\n    unique_pcts = np.unique(percentiles)\n    prec = get_precision(unique_pcts)\n    out = np.empty_like(percentiles, dtype=object)\n    out[int_idx] = percentiles[int_idx].round().astype(int).astype(str)\n\n    out[~int_idx] = percentiles[~int_idx].round(prec).astype(str)\n    return [i + \"%\" for i in out]\n\n\ndef get_precision(array: np.ndarray | Sequence[float]) -> int:\n    to_begin = array[0] if array[0] > 0 else None\n    to_end = 100 - array[-1] if array[-1] < 100 else None\n    diff = np.ediff1d(array, to_begin=to_begin, to_end=to_end)\n    diff = abs(diff)\n    prec = -np.floor(np.log10(np.min(diff))).astype(int)\n    prec = max(1, prec)\n    return prec\n\n\ndef _format_datetime64(x: NaTType | Timestamp, nat_rep: str = \"NaT\") -> str:\n    if x is NaT:\n        return nat_rep\n\n    # Timestamp.__str__ falls back to datetime.datetime.__str__ = isoformat(sep=' ')\n    # so it already uses string formatting rather than strftime (faster).\n    return str(x)\n\n\ndef _format_datetime64_dateonly(\n    x: NaTType | Timestamp,\n    nat_rep: str = \"NaT\",\n    date_format: str | None = None,\n) -> str:\n    if isinstance(x, NaTType):\n        return nat_rep\n\n    if date_format:\n        return x.strftime(date_format)\n    else:\n        # Timestamp._date_repr relies on string formatting (faster than strftime)\n        return x._date_repr\n\n\ndef get_format_datetime64(\n    is_dates_only: bool, nat_rep: str = \"NaT\", date_format: str | None = None\n) -> Callable:\n    \"\"\"Return a formatter callable taking a datetime64 as input and providing\n    a string as output\"\"\"\n\n    if is_dates_only:\n        return lambda x: _format_datetime64_dateonly(\n            x, nat_rep=nat_rep, date_format=date_format\n        )\n    else:\n        return lambda x: _format_datetime64(x, nat_rep=nat_rep)\n\n\nclass _Datetime64TZFormatter(_Datetime64Formatter):\n    values: DatetimeArray\n\n    def _format_strings(self) -> list[str]:\n        \"\"\"we by definition have a TZ\"\"\"\n        ido = self.values._is_dates_only\n        values = self.values.astype(object)\n        formatter = self.formatter or get_format_datetime64(\n            ido, date_format=self.date_format\n        )\n        fmt_values = [formatter(x) for x in values]\n\n        return fmt_values\n\n\nclass _Timedelta64Formatter(_GenericArrayFormatter):\n    values: TimedeltaArray\n\n    def __init__(\n        self,\n        values: TimedeltaArray,\n        nat_rep: str = \"NaT\",\n        **kwargs,\n    ) -> None:\n        # TODO: nat_rep is never passed, na_rep is.\n        super().__init__(values, **kwargs)\n        self.nat_rep = nat_rep\n\n    def _format_strings(self) -> list[str]:\n        formatter = self.formatter or get_format_timedelta64(\n            self.values, nat_rep=self.nat_rep, box=False\n        )\n        return [formatter(x) for x in self.values]\n\n\ndef get_format_timedelta64(\n    values: TimedeltaArray,\n    nat_rep: str | float = \"NaT\",\n    box: bool = False,\n) -> Callable:\n    \"\"\"\n    Return a formatter function for a range of timedeltas.\n    These will all have the same format argument\n\n    If box, then show the return in quotes\n    \"\"\"\n    even_days = values._is_dates_only\n\n    if even_days:\n        format = None\n    else:\n        format = \"long\"\n\n    def _formatter(x):\n        if x is None or (is_scalar(x) and isna(x)):\n            return nat_rep\n\n        if not isinstance(x, Timedelta):\n            x = Timedelta(x)\n\n        # Timedelta._repr_base uses string formatting (faster than strftime)\n        result = x._repr_base(format=format)\n        if box:\n            result = f\"'{result}'\"\n        return result\n\n    return _formatter\n\n\ndef _make_fixed_width(\n    strings: list[str],\n    justify: str = \"right\",\n    minimum: int | None = None,\n    adj: printing._TextAdjustment | None = None,\n) -> list[str]:\n    if len(strings) == 0 or justify == \"all\":\n        return strings\n\n    if adj is None:\n        adjustment = printing.get_adjustment()\n    else:\n        adjustment = adj\n\n    max_len = max(adjustment.len(x) for x in strings)\n\n    if minimum is not None:\n        max_len = max(minimum, max_len)\n\n    conf_max = get_option(\"display.max_colwidth\")\n    if conf_max is not None and max_len > conf_max:\n        max_len = conf_max\n\n    def just(x: str) -> str:\n        if conf_max is not None:\n            if (conf_max > 3) & (adjustment.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x\n\n    strings = [just(x) for x in strings]\n    result = adjustment.justify(strings, max_len, mode=justify)\n    return result\n\n\ndef _trim_zeros_complex(str_complexes: ArrayLike, decimal: str = \".\") -> list[str]:\n    \"\"\"\n    Separates the real and imaginary parts from the complex number, and\n    executes the _trim_zeros_float method on each of those.\n    \"\"\"\n    real_part, imag_part = [], []\n    for x in str_complexes:\n        # Complex numbers are represented as \"(-)xxx(+/-)xxxj\"\n        # The split will give [{\"\", \"-\"}, \"xxx\", \"+/-\", \"xxx\", \"j\", \"\"]\n        # Therefore, the imaginary part is the 4th and 3rd last elements,\n        # and the real part is everything before the imaginary part\n        trimmed = re.split(r\"(?<!e)([j+-])\", x)\n        real_part.append(\"\".join(trimmed[:-4]))\n        imag_part.append(\"\".join(trimmed[-4:-2]))\n\n    # We want to align the lengths of the real and imaginary parts of each complex\n    # number, as well as the lengths the real (resp. complex) parts of all numbers\n    # in the array\n    n = len(str_complexes)\n    padded_parts = _trim_zeros_float(real_part + imag_part, decimal)\n    if len(padded_parts) == 0:\n        return []\n    padded_length = max(len(part) for part in padded_parts) - 1\n    padded = [\n        real_pt  # real part, possibly NaN\n        + imag_pt[0]  # +/-\n        + f\"{imag_pt[1:]:>{padded_length}}\"  # complex part (no sign), possibly nan\n        + \"j\"\n        for real_pt, imag_pt in zip(padded_parts[:n], padded_parts[n:])\n    ]\n    return padded\n\n\ndef _trim_zeros_single_float(str_float: str) -> str:\n    \"\"\"\n    Trims trailing zeros after a decimal point,\n    leaving just one if necessary.\n    \"\"\"\n    str_float = str_float.rstrip(\"0\")\n    if str_float.endswith(\".\"):\n        str_float += \"0\"\n\n    return str_float\n\n\ndef _trim_zeros_float(\n    str_floats: ArrayLike | list[str], decimal: str = \".\"\n) -> list[str]:\n    \"\"\"\n    Trims the maximum number of trailing zeros equally from\n    all numbers containing decimals, leaving just one if\n    necessary.\n    \"\"\"\n    trimmed = str_floats\n    number_regex = re.compile(rf\"^\\s*[\\+-]?[0-9]+\\{decimal}[0-9]*$\")\n\n    def is_number_with_decimal(x) -> bool:\n        return re.match(number_regex, x) is not None\n\n    def should_trim(values: ArrayLike | list[str]) -> bool:\n        \"\"\"\n        Determine if an array of strings should be trimmed.\n\n        Returns True if all numbers containing decimals (defined by the\n        above regular expression) within the array end in a zero, otherwise\n        returns False.\n        \"\"\"\n        numbers = [x for x in values if is_number_with_decimal(x)]\n        return len(numbers) > 0 and all(x.endswith(\"0\") for x in numbers)\n\n    while should_trim(trimmed):\n        trimmed = [x[:-1] if is_number_with_decimal(x) else x for x in trimmed]\n\n    # leave one 0 after the decimal points if need be.\n    result = [\n        x + \"0\" if is_number_with_decimal(x) and x.endswith(decimal) else x\n        for x in trimmed\n    ]\n    return result\n\n\ndef _has_names(index: Index) -> bool:\n    if isinstance(index, MultiIndex):\n        return com.any_not_none(*index.names)\n    else:\n        return index.name is not None\n\n\nclass EngFormatter:\n    \"\"\"\n    Formats float values according to engineering format.\n\n    Based on matplotlib.ticker.EngFormatter\n    \"\"\"\n\n    # The SI engineering prefixes\n    ENG_PREFIXES = {\n        -24: \"y\",\n        -21: \"z\",\n        -18: \"a\",\n        -15: \"f\",\n        -12: \"p\",\n        -9: \"n\",\n        -6: \"u\",\n        -3: \"m\",\n        0: \"\",\n        3: \"k\",\n        6: \"M\",\n        9: \"G\",\n        12: \"T\",\n        15: \"P\",\n        18: \"E\",\n        21: \"Z\",\n        24: \"Y\",\n    }\n\n    def __init__(\n        self, accuracy: int | None = None, use_eng_prefix: bool = False\n    ) -> None:\n        self.accuracy = accuracy\n        self.use_eng_prefix = use_eng_prefix\n\n    def __call__(self, num: float) -> str:\n        \"\"\"\n        Formats a number in engineering notation, appending a letter\n        representing the power of 1000 of the original number. Some examples:\n        >>> format_eng = EngFormatter(accuracy=0, use_eng_prefix=True)\n        >>> format_eng(0)\n        ' 0'\n        >>> format_eng = EngFormatter(accuracy=1, use_eng_prefix=True)\n        >>> format_eng(1_000_000)\n        ' 1.0M'\n        >>> format_eng = EngFormatter(accuracy=2, use_eng_prefix=False)\n        >>> format_eng(\"-1e-6\")\n        '-1.00E-06'\n\n        @param num: the value to represent\n        @type num: either a numeric value or a string that can be converted to\n                   a numeric value (as per decimal.Decimal constructor)\n\n        @return: engineering formatted string\n        \"\"\"\n        dnum = Decimal(str(num))\n\n        if Decimal.is_nan(dnum):\n            return \"NaN\"\n\n        if Decimal.is_infinite(dnum):\n            return \"inf\"\n\n        sign = 1\n\n        if dnum < 0:  # pragma: no cover\n            sign = -1\n            dnum = -dnum\n\n        if dnum != 0:\n            pow10 = Decimal(int(math.floor(dnum.log10() / 3) * 3))\n        else:\n            pow10 = Decimal(0)\n\n        pow10 = pow10.min(max(self.ENG_PREFIXES.keys()))\n        pow10 = pow10.max(min(self.ENG_PREFIXES.keys()))\n        int_pow10 = int(pow10)\n\n        if self.use_eng_prefix:\n            prefix = self.ENG_PREFIXES[int_pow10]\n        elif int_pow10 < 0:\n            prefix = f\"E-{-int_pow10:02d}\"\n        else:\n            prefix = f\"E+{int_pow10:02d}\"\n\n        mant = sign * dnum / (10**pow10)\n\n        if self.accuracy is None:  # pragma: no cover\n            format_str = \"{mant: g}{prefix}\"\n        else:\n            format_str = f\"{{mant: .{self.accuracy:d}f}}{{prefix}}\"\n\n        formatted = format_str.format(mant=mant, prefix=prefix)\n\n        return formatted\n\n\ndef set_eng_float_format(accuracy: int = 3, use_eng_prefix: bool = False) -> None:\n    \"\"\"\n    Format float representation in DataFrame with SI notation.\n\n    Sets the floating-point display format for ``DataFrame`` objects using engineering\n    notation (SI units), allowing easier readability of values across wide ranges.\n\n    Parameters\n    ----------\n    accuracy : int, default 3\n        Number of decimal digits after the floating point.\n    use_eng_prefix : bool, default False\n        Whether to represent a value with SI prefixes.\n\n    Returns\n    -------\n    None\n        This method does not return a value. it updates the global display format\n        for floats in DataFrames.\n\n    See Also\n    --------\n    set_option : Set the value of the specified option or options.\n    reset_option : Reset one or more options to their default value.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([1e-9, 1e-3, 1, 1e3, 1e6])\n    >>> df\n                  0\n    0  1.000000e-09\n    1  1.000000e-03\n    2  1.000000e+00\n    3  1.000000e+03\n    4  1.000000e+06\n\n    >>> pd.set_eng_float_format(accuracy=1)\n    >>> df\n             0\n    0  1.0E-09\n    1  1.0E-03\n    2  1.0E+00\n    3  1.0E+03\n    4  1.0E+06\n\n    >>> pd.set_eng_float_format(use_eng_prefix=True)\n    >>> df\n            0\n    0  1.000n\n    1  1.000m\n    2   1.000\n    3  1.000k\n    4  1.000M\n\n    >>> pd.set_eng_float_format(accuracy=1, use_eng_prefix=True)\n    >>> df\n          0\n    0  1.0n\n    1  1.0m\n    2   1.0\n    3  1.0k\n    4  1.0M\n\n    >>> pd.set_option(\"display.float_format\", None)  # unset option\n    \"\"\"\n    set_option(\"display.float_format\", EngFormatter(accuracy, use_eng_prefix))\n\n\ndef get_level_lengths(\n    levels: Any, sentinel: bool | object | str = \"\"\n) -> list[dict[int, int]]:\n    \"\"\"\n    For each index in each level the function returns lengths of indexes.\n\n    Parameters\n    ----------\n    levels : list of lists\n        List of values on for level.\n    sentinel : string, optional\n        Value which states that no new index starts on there.\n\n    Returns\n    -------\n    Returns list of maps. For each level returns map of indexes (key is index\n    in row and value is length of index).\n    \"\"\"\n    if len(levels) == 0:\n        return []\n\n    control = [True] * len(levels[0])\n\n    result = []\n    for level in levels:\n        last_index = 0\n\n        lengths = {}\n        for i, key in enumerate(level):\n            if control[i] and key == sentinel:\n                pass\n            else:\n                control[i] = False\n                lengths[last_index] = i - last_index\n                last_index = i\n\n        lengths[last_index] = len(level) - last_index\n\n        result.append(lengths)\n\n    return result\n\n\ndef buffer_put_lines(buf: WriteBuffer[str], lines: list[str]) -> None:\n    \"\"\"\n    Appends lines to a buffer.\n\n    Parameters\n    ----------\n    buf\n        The buffer to write to\n    lines\n        The lines to append.\n    \"\"\"\n    if any(isinstance(x, str) for x in lines):\n        lines = [str(x) for x in lines]\n    buf.write(\"\\n\".join(lines))\n"
    },
    {
      "filename": "pandas/tests/frame/methods/test_describe.py",
      "content": "import numpy as np\nimport pytest\n\nimport pandas as pd\nfrom pandas import (\n    Categorical,\n    DataFrame,\n    Series,\n    Timestamp,\n    date_range,\n)\nimport pandas._testing as tm\n\n\nclass TestDataFrameDescribe:\n    def test_describe_bool_in_mixed_frame(self):\n        df = DataFrame(\n            {\n                \"string_data\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n                \"bool_data\": [True, True, False, False, False],\n                \"int_data\": [10, 20, 30, 40, 50],\n            }\n        )\n\n        # Integer data are included in .describe() output,\n        # Boolean and string data are not.\n        result = df.describe()\n        expected = DataFrame(\n            {\"int_data\": [5, 30, df.int_data.std(), 10, 20, 30, 40, 50]},\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # Top value is a boolean value that is False\n        result = df.describe(include=[\"bool\"])\n\n        expected = DataFrame(\n            {\"bool_data\": [5, 2, False, 3]}, index=[\"count\", \"unique\", \"top\", \"freq\"]\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_empty_object(self):\n        # GH#27183\n        df = DataFrame({\"A\": [None, None]}, dtype=object)\n        result = df.describe()\n        expected = DataFrame(\n            {\"A\": [0, 0, np.nan, np.nan]},\n            dtype=object,\n            index=[\"count\", \"unique\", \"top\", \"freq\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = df.iloc[:0].describe()\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_bool_frame(self):\n        # GH#13891\n        df = DataFrame(\n            {\n                \"bool_data_1\": [False, False, True, True],\n                \"bool_data_2\": [False, True, True, True],\n            }\n        )\n        result = df.describe()\n        expected = DataFrame(\n            {\"bool_data_1\": [4, 2, False, 2], \"bool_data_2\": [4, 2, True, 3]},\n            index=[\"count\", \"unique\", \"top\", \"freq\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(\n            {\n                \"bool_data\": [False, False, True, True, False],\n                \"int_data\": [0, 1, 2, 3, 4],\n            }\n        )\n        result = df.describe()\n        expected = DataFrame(\n            {\"int_data\": [5, 2, df.int_data.std(), 0, 1, 2, 3, 4]},\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        df = DataFrame(\n            {\"bool_data\": [False, False, True, True], \"str_data\": [\"a\", \"b\", \"c\", \"a\"]}\n        )\n        result = df.describe()\n        expected = DataFrame(\n            {\"bool_data\": [4, 2, False, 2], \"str_data\": [4, 3, \"a\", 2]},\n            index=[\"count\", \"unique\", \"top\", \"freq\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_categorical(self):\n        df = DataFrame({\"value\": np.random.default_rng(2).integers(0, 10000, 100)})\n        labels = [f\"{i} - {i + 499}\" for i in range(0, 10000, 500)]\n        cat_labels = Categorical(labels, labels)\n\n        df = df.sort_values(by=[\"value\"], ascending=True)\n        df[\"value_group\"] = pd.cut(\n            df.value, range(0, 10500, 500), right=False, labels=cat_labels\n        )\n        cat = df\n\n        # Categoricals should not show up together with numerical columns\n        result = cat.describe()\n        assert len(result.columns) == 1\n\n        # In a frame, describe() for the cat should be the same as for string\n        # arrays (count, unique, top, freq)\n\n        cat = Categorical(\n            [\"a\", \"b\", \"b\", \"b\"], categories=[\"a\", \"b\", \"c\"], ordered=True\n        )\n        s = Series(cat)\n        result = s.describe()\n        expected = Series([4, 2, \"b\", 3], index=[\"count\", \"unique\", \"top\", \"freq\"])\n        tm.assert_series_equal(result, expected)\n\n        cat = Series(Categorical([\"a\", \"b\", \"c\", \"c\"]))\n        df3 = DataFrame({\"cat\": cat, \"s\": [\"a\", \"b\", \"c\", \"c\"]})\n        result = df3.describe()\n        tm.assert_numpy_array_equal(result[\"cat\"].values, result[\"s\"].values)\n\n    def test_describe_empty_categorical_column(self):\n        # GH#26397\n        # Ensure the index of an empty categorical DataFrame column\n        # also contains (count, unique, top, freq)\n        df = DataFrame({\"empty_col\": Categorical([])})\n        result = df.describe()\n        expected = DataFrame(\n            {\"empty_col\": [0, 0, np.nan, np.nan]},\n            index=[\"count\", \"unique\", \"top\", \"freq\"],\n            dtype=\"object\",\n        )\n        tm.assert_frame_equal(result, expected)\n        # ensure NaN, not None\n        assert np.isnan(result.iloc[2, 0])\n        assert np.isnan(result.iloc[3, 0])\n\n    def test_describe_categorical_columns(self):\n        # GH#11558\n        columns = pd.CategoricalIndex([\"int1\", \"int2\", \"obj\"], ordered=True, name=\"XXX\")\n        df = DataFrame(\n            {\n                \"int1\": [10, 20, 30, 40, 50],\n                \"int2\": [10, 20, 30, 40, 50],\n                \"obj\": [\"A\", 0, None, \"X\", 1],\n            },\n            columns=columns,\n        )\n        result = df.describe()\n\n        exp_columns = pd.CategoricalIndex(\n            [\"int1\", \"int2\"],\n            categories=[\"int1\", \"int2\", \"obj\"],\n            ordered=True,\n            name=\"XXX\",\n        )\n        expected = DataFrame(\n            {\n                \"int1\": [5, 30, df.int1.std(), 10, 20, 30, 40, 50],\n                \"int2\": [5, 30, df.int2.std(), 10, 20, 30, 40, 50],\n            },\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n            columns=exp_columns,\n        )\n\n        tm.assert_frame_equal(result, expected)\n        tm.assert_categorical_equal(result.columns.values, expected.columns.values)\n\n    def test_describe_datetime_columns(self):\n        columns = pd.DatetimeIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-03-01\"],\n            freq=\"MS\",\n            tz=\"US/Eastern\",\n            name=\"XXX\",\n        )\n        df = DataFrame(\n            {\n                0: [10, 20, 30, 40, 50],\n                1: [10, 20, 30, 40, 50],\n                2: [\"A\", 0, None, \"X\", 1],\n            }\n        )\n        df.columns = columns\n        result = df.describe()\n\n        exp_columns = pd.DatetimeIndex(\n            [\"2011-01-01\", \"2011-02-01\"], freq=\"MS\", tz=\"US/Eastern\", name=\"XXX\"\n        )\n        expected = DataFrame(\n            {\n                0: [5, 30, df.iloc[:, 0].std(), 10, 20, 30, 40, 50],\n                1: [5, 30, df.iloc[:, 1].std(), 10, 20, 30, 40, 50],\n            },\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n        )\n        expected.columns = exp_columns\n        tm.assert_frame_equal(result, expected)\n        assert result.columns.freq == \"MS\"\n        assert result.columns.tz == expected.columns.tz\n\n    def test_describe_timedelta_values(self):\n        # GH#6145\n        t1 = pd.timedelta_range(\"1 days\", freq=\"D\", periods=5)\n        t2 = pd.timedelta_range(\"1 hours\", freq=\"h\", periods=5)\n        df = DataFrame({\"t1\": t1, \"t2\": t2})\n\n        expected = DataFrame(\n            {\n                \"t1\": [\n                    5,\n                    pd.Timedelta(\"3 days\"),\n                    df.iloc[:, 0].std(),\n                    pd.Timedelta(\"1 days\"),\n                    pd.Timedelta(\"2 days\"),\n                    pd.Timedelta(\"3 days\"),\n                    pd.Timedelta(\"4 days\"),\n                    pd.Timedelta(\"5 days\"),\n                ],\n                \"t2\": [\n                    5,\n                    pd.Timedelta(\"3 hours\"),\n                    df.iloc[:, 1].std(),\n                    pd.Timedelta(\"1 hours\"),\n                    pd.Timedelta(\"2 hours\"),\n                    pd.Timedelta(\"3 hours\"),\n                    pd.Timedelta(\"4 hours\"),\n                    pd.Timedelta(\"5 hours\"),\n                ],\n            },\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n        )\n\n        result = df.describe()\n        tm.assert_frame_equal(result, expected)\n\n        exp_repr = (\n            \"                              t1                         t2\\n\"\n            \"count                          5                          5\\n\"\n            \"mean             3 days 00:00:00            0 days 03:00:00\\n\"\n            \"std    1 days 13:56:50.394919273  0 days 01:34:52.099788303\\n\"\n            \"min              1 days 00:00:00            0 days 01:00:00\\n\"\n            \"25%              2 days 00:00:00            0 days 02:00:00\\n\"\n            \"50%              3 days 00:00:00            0 days 03:00:00\\n\"\n            \"75%              4 days 00:00:00            0 days 04:00:00\\n\"\n            \"max              5 days 00:00:00            0 days 05:00:00\"\n        )\n        assert repr(result) == exp_repr\n\n    def test_describe_tz_values(self, tz_naive_fixture):\n        # GH#21332\n        tz = tz_naive_fixture\n        s1 = Series(range(5))\n        start = Timestamp(2018, 1, 1)\n        end = Timestamp(2018, 1, 5)\n        s2 = Series(date_range(start, end, tz=tz))\n        df = DataFrame({\"s1\": s1, \"s2\": s2})\n\n        expected = DataFrame(\n            {\n                \"s1\": [5, 2, 0, 1, 2, 3, 4, 1.581139],\n                \"s2\": [\n                    5,\n                    Timestamp(2018, 1, 3).tz_localize(tz),\n                    start.tz_localize(tz),\n                    s2[1],\n                    s2[2],\n                    s2[3],\n                    end.tz_localize(tz),\n                    np.nan,\n                ],\n            },\n            index=[\"count\", \"mean\", \"min\", \"25%\", \"50%\", \"75%\", \"max\", \"std\"],\n        )\n        result = df.describe(include=\"all\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_datetime_is_numeric_includes_datetime(self):\n        df = DataFrame({\"a\": date_range(\"2012\", periods=3), \"b\": [1, 2, 3]})\n        result = df.describe()\n        expected = DataFrame(\n            {\n                \"a\": [\n                    3,\n                    Timestamp(\"2012-01-02\"),\n                    Timestamp(\"2012-01-01\"),\n                    Timestamp(\"2012-01-01T12:00:00\"),\n                    Timestamp(\"2012-01-02\"),\n                    Timestamp(\"2012-01-02T12:00:00\"),\n                    Timestamp(\"2012-01-03\"),\n                    np.nan,\n                ],\n                \"b\": [3, 2, 1, 1.5, 2, 2.5, 3, 1],\n            },\n            index=[\"count\", \"mean\", \"min\", \"25%\", \"50%\", \"75%\", \"max\", \"std\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_tz_values2(self):\n        tz = \"CET\"\n        s1 = Series(range(5))\n        start = Timestamp(2018, 1, 1)\n        end = Timestamp(2018, 1, 5)\n        s2 = Series(date_range(start, end, tz=tz))\n        df = DataFrame({\"s1\": s1, \"s2\": s2})\n\n        s1_ = s1.describe()\n        s2_ = s2.describe()\n        idx = [\n            \"count\",\n            \"mean\",\n            \"min\",\n            \"25%\",\n            \"50%\",\n            \"75%\",\n            \"max\",\n            \"std\",\n        ]\n        expected = pd.concat([s1_, s2_], axis=1, keys=[\"s1\", \"s2\"]).reindex(idx)\n\n        result = df.describe(include=\"all\")\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_percentiles_integer_idx(self):\n        # GH#26660\n        df = DataFrame({\"x\": [1]})\n        pct = np.linspace(0, 1, 10 + 1)\n        result = df.describe(percentiles=pct)\n\n        expected = DataFrame(\n            {\"x\": [1.0, 1.0, np.nan, 1.0, *(1.0 for _ in pct), 1.0]},\n            index=[\n                \"count\",\n                \"mean\",\n                \"std\",\n                \"min\",\n                \"0%\",\n                \"10%\",\n                \"20%\",\n                \"30%\",\n                \"40%\",\n                \"50%\",\n                \"60%\",\n                \"70%\",\n                \"80%\",\n                \"90%\",\n                \"100%\",\n                \"max\",\n            ],\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_does_not_raise_error_for_dictlike_elements(self):\n        # GH#32409\n        df = DataFrame([{\"test\": {\"a\": \"1\"}}, {\"test\": {\"a\": \"2\"}}])\n        expected = DataFrame(\n            {\"test\": [2, 2, {\"a\": \"1\"}, 1]}, index=[\"count\", \"unique\", \"top\", \"freq\"]\n        )\n        result = df.describe()\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"exclude\", [\"x\", \"y\", [\"x\", \"y\"], [\"x\", \"z\"]])\n    def test_describe_when_include_all_exclude_not_allowed(self, exclude):\n        \"\"\"\n        When include is 'all', then setting exclude != None is not allowed.\n        \"\"\"\n        df = DataFrame({\"x\": [1], \"y\": [2], \"z\": [3]})\n        msg = \"exclude must be None when include is 'all'\"\n        with pytest.raises(ValueError, match=msg):\n            df.describe(include=\"all\", exclude=exclude)\n\n    def test_describe_with_duplicate_columns(self):\n        df = DataFrame(\n            [[1, 1, 1], [2, 2, 2], [3, 3, 3]],\n            columns=[\"bar\", \"a\", \"a\"],\n            dtype=\"float64\",\n        )\n        result = df.describe()\n        ser = df.iloc[:, 0].describe()\n        expected = pd.concat([ser, ser, ser], keys=df.columns, axis=1)\n        tm.assert_frame_equal(result, expected)\n\n    def test_ea_with_na(self, any_numeric_ea_dtype):\n        # GH#48778\n\n        df = DataFrame({\"a\": [1, pd.NA, pd.NA], \"b\": pd.NA}, dtype=any_numeric_ea_dtype)\n        result = df.describe()\n        expected = DataFrame(\n            {\"a\": [1.0, 1.0, pd.NA] + [1.0] * 5, \"b\": [0.0] + [pd.NA] * 7},\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n            dtype=\"Float64\",\n        )\n        tm.assert_frame_equal(result, expected)\n\n    def test_describe_exclude_pa_dtype(self):\n        # GH#52570\n        pa = pytest.importorskip(\"pyarrow\")\n        df = DataFrame(\n            {\n                \"a\": Series([1, 2, 3], dtype=pd.ArrowDtype(pa.int8())),\n                \"b\": Series([1, 2, 3], dtype=pd.ArrowDtype(pa.int16())),\n                \"c\": Series([1, 2, 3], dtype=pd.ArrowDtype(pa.int32())),\n            }\n        )\n        result = df.describe(\n            include=pd.ArrowDtype(pa.int8()), exclude=pd.ArrowDtype(pa.int32())\n        )\n        expected = DataFrame(\n            {\"a\": [3, 2, 1, 1, 1.5, 2, 2.5, 3]},\n            index=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n            dtype=pd.ArrowDtype(pa.float64()),\n        )\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize(\"percentiles\", [None, [], [0.2]])\n    def test_refine_percentiles(self, percentiles):\n        \"\"\"\n        Test that the percentiles are returned correctly depending on the `percentiles`\n        argument.\n        - The default behavior is to return the 25th, 50th, and 75 percentiles\n        - If `percentiles` is an empty list, no percentiles are returned\n        - If `percentiles` is a non-empty list, only those percentiles are returned\n        \"\"\"\n        # GH#60550\n        df = DataFrame({\"a\": np.arange(0, 10, 1)})\n\n        result = df.describe(percentiles=percentiles)\n\n        if percentiles is None:\n            percentiles = [0.25, 0.5, 0.75]\n\n        expected = DataFrame(\n            [\n                len(df.a),\n                df.a.mean(),\n                df.a.std(),\n                df.a.min(),\n                *[df.a.quantile(p) for p in percentiles],\n                df.a.max(),\n            ],\n            index=pd.Index(\n                [\n                    \"count\",\n                    \"mean\",\n                    \"std\",\n                    \"min\",\n                    *[f\"{p:.0%}\" for p in percentiles],\n                    \"max\",\n                ]\n            ),\n            columns=[\"a\"],\n        )\n\n        tm.assert_frame_equal(result, expected)\n"
    },
    {
      "filename": "pandas/tests/groupby/methods/test_describe.py",
      "content": "import numpy as np\nimport pytest\n\nimport pandas as pd\nfrom pandas import (\n    DataFrame,\n    Index,\n    MultiIndex,\n    Series,\n    Timestamp,\n    date_range,\n)\nimport pandas._testing as tm\n\n\ndef test_apply_describe_bug(multiindex_dataframe_random_data):\n    grouped = multiindex_dataframe_random_data.groupby(level=\"first\")\n    grouped.describe()  # it works!\n\n\ndef test_series_describe_multikey():\n    ts = Series(\n        np.arange(10, dtype=np.float64), index=date_range(\"2020-01-01\", periods=10)\n    )\n    grouped = ts.groupby([lambda x: x.year, lambda x: x.month])\n    result = grouped.describe()\n    tm.assert_series_equal(result[\"mean\"], grouped.mean(), check_names=False)\n    tm.assert_series_equal(result[\"std\"], grouped.std(), check_names=False)\n    tm.assert_series_equal(result[\"min\"], grouped.min(), check_names=False)\n\n\ndef test_series_describe_single():\n    ts = Series(\n        np.arange(10, dtype=np.float64), index=date_range(\"2020-01-01\", periods=10)\n    )\n    grouped = ts.groupby(lambda x: x.month)\n    result = grouped.apply(lambda x: x.describe())\n    expected = grouped.describe().stack()\n    tm.assert_series_equal(result, expected)\n\n\n@pytest.mark.parametrize(\"keys\", [\"key1\", [\"key1\", \"key2\"]])\ndef test_series_describe_as_index(as_index, keys):\n    # GH#49256\n    df = DataFrame(\n        {\n            \"key1\": [\"one\", \"two\", \"two\", \"three\", \"two\"],\n            \"key2\": [\"one\", \"two\", \"two\", \"three\", \"two\"],\n            \"foo2\": [1, 2, 4, 4, 6],\n        }\n    )\n    gb = df.groupby(keys, as_index=as_index)[\"foo2\"]\n    result = gb.describe()\n    expected = DataFrame(\n        {\n            \"key1\": [\"one\", \"three\", \"two\"],\n            \"count\": [1.0, 1.0, 3.0],\n            \"mean\": [1.0, 4.0, 4.0],\n            \"std\": [np.nan, np.nan, 2.0],\n            \"min\": [1.0, 4.0, 2.0],\n            \"25%\": [1.0, 4.0, 3.0],\n            \"50%\": [1.0, 4.0, 4.0],\n            \"75%\": [1.0, 4.0, 5.0],\n            \"max\": [1.0, 4.0, 6.0],\n        }\n    )\n    if len(keys) == 2:\n        expected.insert(1, \"key2\", expected[\"key1\"])\n    if as_index:\n        expected = expected.set_index(keys)\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_frame_describe_multikey(tsframe):\n    grouped = tsframe.groupby([lambda x: x.year, lambda x: x.month])\n    result = grouped.describe()\n    desc_groups = []\n    for col in tsframe:\n        group = grouped[col].describe()\n        # GH 17464 - Remove duplicate MultiIndex levels\n        group_col = MultiIndex(\n            levels=[Index([col], dtype=tsframe.columns.dtype), group.columns],\n            codes=[[0] * len(group.columns), range(len(group.columns))],\n        )\n        group = DataFrame(group.values, columns=group_col, index=group.index)\n        desc_groups.append(group)\n    expected = pd.concat(desc_groups, axis=1)\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_frame_describe_tupleindex():\n    # GH 14848 - regression from 0.19.0 to 0.19.1\n    name = \"k\"\n    df = DataFrame(\n        {\n            \"x\": [1, 2, 3, 4, 5] * 3,\n            name: [(0, 0, 1), (0, 1, 0), (1, 0, 0)] * 5,\n        }\n    )\n    result = df.groupby(name).describe()\n    expected = DataFrame(\n        [[5.0, 3.0, 1.581139, 1.0, 2.0, 3.0, 4.0, 5.0]] * 3,\n        index=Index([(0, 0, 1), (0, 1, 0), (1, 0, 0)], tupleize_cols=False, name=name),\n        columns=MultiIndex.from_arrays(\n            [[\"x\"] * 8, [\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"]]\n        ),\n    )\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_frame_describe_unstacked_format():\n    # GH 4792\n    prices = {\n        Timestamp(\"2011-01-06 10:59:05\", tz=None): 24990,\n        Timestamp(\"2011-01-06 12:43:33\", tz=None): 25499,\n        Timestamp(\"2011-01-06 12:54:09\", tz=None): 25499,\n    }\n    volumes = {\n        Timestamp(\"2011-01-06 10:59:05\", tz=None): 1500000000,\n        Timestamp(\"2011-01-06 12:43:33\", tz=None): 5000000000,\n        Timestamp(\"2011-01-06 12:54:09\", tz=None): 100000000,\n    }\n    df = DataFrame({\"PRICE\": prices, \"VOLUME\": volumes})\n    result = df.groupby(\"PRICE\").VOLUME.describe()\n    data = [\n        df[df.PRICE == 24990].VOLUME.describe().values.tolist(),\n        df[df.PRICE == 25499].VOLUME.describe().values.tolist(),\n    ]\n    expected = DataFrame(\n        data,\n        index=Index([24990, 25499], name=\"PRICE\"),\n        columns=[\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"],\n    )\n    tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.filterwarnings(\n    \"ignore:\"\n    \"indexing past lexsort depth may impact performance:\"\n    \"pandas.errors.PerformanceWarning\"\n)\n@pytest.mark.parametrize(\"keys\", [[\"a1\"], [\"a1\", \"a2\"]])\ndef test_describe_with_duplicate_output_column_names(as_index, keys):\n    # GH 35314\n    df = DataFrame(\n        {\n            \"a1\": [99, 99, 99, 88, 88, 88],\n            \"a2\": [99, 99, 99, 88, 88, 88],\n            \"b\": [1, 2, 3, 4, 5, 6],\n            \"c\": [10, 20, 30, 40, 50, 60],\n        },\n        columns=[\"a1\", \"a2\", \"b\", \"b\"],\n        copy=False,\n    )\n    if keys == [\"a1\"]:\n        df = df.drop(columns=\"a2\")\n\n    expected = (\n        DataFrame.from_records(\n            [\n                (\"b\", \"count\", 3.0, 3.0),\n                (\"b\", \"mean\", 5.0, 2.0),\n                (\"b\", \"std\", 1.0, 1.0),\n                (\"b\", \"min\", 4.0, 1.0),\n                (\"b\", \"25%\", 4.5, 1.5),\n                (\"b\", \"50%\", 5.0, 2.0),\n                (\"b\", \"75%\", 5.5, 2.5),\n                (\"b\", \"max\", 6.0, 3.0),\n                (\"b\", \"count\", 3.0, 3.0),\n                (\"b\", \"mean\", 5.0, 2.0),\n                (\"b\", \"std\", 1.0, 1.0),\n                (\"b\", \"min\", 4.0, 1.0),\n                (\"b\", \"25%\", 4.5, 1.5),\n                (\"b\", \"50%\", 5.0, 2.0),\n                (\"b\", \"75%\", 5.5, 2.5),\n                (\"b\", \"max\", 6.0, 3.0),\n            ],\n        )\n        .set_index([0, 1])\n        .T\n    )\n    expected.columns.names = [None, None]\n    if len(keys) == 2:\n        expected.index = MultiIndex(\n            levels=[[88, 99], [88, 99]], codes=[[0, 1], [0, 1]], names=[\"a1\", \"a2\"]\n        )\n    else:\n        expected.index = Index([88, 99], name=\"a1\")\n\n    if not as_index:\n        expected = expected.reset_index()\n\n    result = df.groupby(keys, as_index=as_index).describe()\n\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_describe_duplicate_columns():\n    # GH#50806\n    df = DataFrame([[0, 1, 2, 3]])\n    df.columns = [0, 1, 2, 0]\n    gb = df.groupby(df[1])\n    result = gb.describe(percentiles=[])\n\n    columns = [\"count\", \"mean\", \"std\", \"min\", \"max\"]\n    frames = [\n        DataFrame([[1.0, val, np.nan, val, val]], index=[1], columns=columns)\n        for val in (0.0, 2.0, 3.0)\n    ]\n    expected = pd.concat(frames, axis=1)\n    expected.columns = MultiIndex(\n        levels=[[0, 2], columns],\n        codes=[5 * [0] + 5 * [1] + 5 * [0], 3 * list(range(5))],\n    )\n    expected.index.names = [1]\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_describe_non_cython_paths():\n    # GH#5610 non-cython calls should not include the grouper\n    # Tests for code not expected to go through cython paths.\n    df = DataFrame(\n        [[1, 2, \"foo\"], [1, np.nan, \"bar\"], [3, np.nan, \"baz\"]],\n        columns=[\"A\", \"B\", \"C\"],\n    )\n    gb = df.groupby(\"A\")\n    expected_index = Index([1, 3], name=\"A\")\n    expected_col = MultiIndex(\n        levels=[[\"B\"], [\"count\", \"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"]],\n        codes=[[0] * 8, list(range(8))],\n    )\n    expected = DataFrame(\n        [\n            [1.0, 2.0, np.nan, 2.0, 2.0, 2.0, 2.0, 2.0],\n            [0.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n        ],\n        index=expected_index,\n        columns=expected_col,\n    )\n    result = gb.describe()\n    tm.assert_frame_equal(result, expected)\n\n    gni = df.groupby(\"A\", as_index=False)\n    expected = expected.reset_index()\n    result = gni.describe()\n    tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\"dtype\", [int, float, object])\n@pytest.mark.parametrize(\n    \"kwargs\",\n    [\n        {\"percentiles\": [0.10, 0.20, 0.30], \"include\": \"all\", \"exclude\": None},\n        {\"percentiles\": [0.10, 0.20, 0.30], \"include\": None, \"exclude\": [\"int\"]},\n        {\"percentiles\": [0.10, 0.20, 0.30], \"include\": [\"int\"], \"exclude\": None},\n    ],\n)\ndef test_groupby_empty_dataset(dtype, kwargs):\n    # GH#41575\n    df = DataFrame([[1, 2, 3]], columns=[\"A\", \"B\", \"C\"], dtype=dtype)\n    df[\"B\"] = df[\"B\"].astype(int)\n    df[\"C\"] = df[\"C\"].astype(float)\n\n    result = df.iloc[:0].groupby(\"A\").describe(**kwargs)\n    expected = df.groupby(\"A\").describe(**kwargs).reset_index(drop=True).iloc[:0]\n    tm.assert_frame_equal(result, expected)\n\n    result = df.iloc[:0].groupby(\"A\").B.describe(**kwargs)\n    expected = df.groupby(\"A\").B.describe(**kwargs).reset_index(drop=True).iloc[:0]\n    expected.index = Index([], dtype=df.columns.dtype)\n    tm.assert_frame_equal(result, expected)\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the unexpected behavior observed when passing a single percentile value below 50 to the `describe` function?",
    "How does the `describe` function behave when a single percentile value above 50 is provided?",
    "What is the expected behavior for the `describe` function when a single percentile is provided?",
    "Can you identify the part of the codebase where changes might be necessary to fix the issue with the `describe` function's percentile handling?",
    "What steps have the issue reporter taken to ensure the validity of the reported bug?"
  ],
  "golden_answers_generated": [
    "When a single percentile value below 50 is passed to the `describe` function, it returns both the specified percentile and the 50th percentile by default. This behavior is not consistent when the percentile value is above 50, where only the specified percentile is returned.",
    "When a single percentile value above 50 is provided to the `describe` function, it returns only the specified percentile along with other default statistics like count, mean, std, min, and max, without including the 50th percentile.",
    "The expected behavior for the `describe` function when a single percentile is provided is to return only the statistics for that specific percentile along with the default statistics, without automatically including the 50th percentile.",
    "To address the issue with the `describe` function's percentile handling, changes might be necessary in the `describe` method implementation, likely within the `pandas/core/generic.py` file, where the function is defined and where percentile calculation is handled.",
    "The issue reporter has verified that the bug has not been reported previously, confirmed its existence in the latest version of pandas, and checked its presence in the main development branch. Additionally, they provided a reproducible code example demonstrating the issue."
  ]
}