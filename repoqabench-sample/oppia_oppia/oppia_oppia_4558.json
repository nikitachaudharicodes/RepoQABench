{
  "repo_name": "oppia_oppia",
  "issue_id": "4558",
  "issue_description": "# Write testing utilities for non inline interactions\n\nAt the moment in extensions/interactions/protractor.js only 5 out of the many interactions we have are being tested using e2e tests. The testing coverage should include all the other remaining interactions. Here is a checklist for the same:\r\n\r\n- [ ] Code Editor Interaction\r\n- [x] Graph Input Interaction (#5230) \r\n- [ ] Image Click Input Interaction @namansisodiarajput \r\n- [ ] Interactive Map Interaction\r\n- [ ] Item Selection Input Interaction\r\n- [x] Logic Proof Interaction (#4622)\r\n- [x] Math Expression Interaction (#5292) \r\n- [ ] Music Notes Interaction \r\n- [ ] Pencil Code Editor Interaction\r\n- [ ] Set Input Interaction\r\n\r\nPlease checkout prior work on issue #2731 and PR #4525.  ",
  "issue_comments": [
    {
      "id": 423855301,
      "user": "Shuayb1",
      "body": " Set Input Interaction"
    },
    {
      "id": 423860964,
      "user": "aks681",
      "body": "@Shuayb1 Assigned!"
    },
    {
      "id": 424365996,
      "user": "Shuayb1",
      "body": "Hello,\n\nThanks for the opportunity given to me work on it, however, i've been\nunable to get access to the file and work on it. I'm new on the group, so\nkindly put me through.\n\nThanks\n\n\nOn Mon, Sep 24, 2018 at 1:56 AM Akshay Anand <notifications@github.com>\nwrote:\n\n> @Shuayb1 <https://github.com/Shuayb1> Assigned!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-423860964>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8gEkkrWHQnQbF3F1IGSHnPkOIDoUks5ueC3VgaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 424466272,
      "user": "nithusha21",
      "body": "Hi @Shuayb1! Have you completed setting up Oppia on your local machine? If not, please follow [these instructions](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up). Also could you elaborate on the issue you are facing? Are you unable to find which file to add the tests to? (You could take a look at the linked PRs in the issue description, as the tests follow a similar pattern)."
    },
    {
      "id": 424549971,
      "user": "Shuayb1",
      "body": "Ive been unable to finish the installation since 4days now. I was getting\nthis messages, and ive tried* all the python solutions* on oppia site, and\nfew other open resource. I will be grateful if any clue\n\nOn Tue, Sep 25, 2018 at 8:13 PM Nithesh N. Hariharan <\nnotifications@github.com> wrote:\n\n> Hi @Shuayb1 <https://github.com/Shuayb1>! Have you completed setting up\n> Oppia on your local machine? If not, please follow these instructions\n> <https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up>.\n> Also could you elaborate on the issue you are facing? Are you unable to\n> find which file to add the tests to? (You could take a look at the linked\n> PRs in the issue description, as the tests follow a similar pattern).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-424466272>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8r4Vni7-xbHHJDY1Kz4TtvKaUkjjks5ueoBggaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 425561278,
      "user": "aks681",
      "body": "@Shuayb1 Can you tell what error messages you got?"
    },
    {
      "id": 427317310,
      "user": "Shuayb1",
      "body": "Please I've not gotten response from you.\n\nThanks\n\nOn Fri, 28 Sep 2018, 21:47 Akshay Anand, <notifications@github.com> wrote:\n\n> @Shuayb1 <https://github.com/Shuayb1> Can you tell what error messages\n> you got?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-425561278>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8rIqUd7SmjMJ8K7ElCaFlBb_4-v1ks5ufortgaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 427627179,
      "user": "aks681",
      "body": "What is the error message that you got?"
    },
    {
      "id": 427635390,
      "user": "Shuayb1",
      "body": "Ooops! I've sent you earlier 26th September.\n\nBut attached is the error.\n\nOn Sun, 7 Oct 2018, 06:28 Akshay Anand, <notifications@github.com> wrote:\n\n> What is the error message that you got?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-427627179>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8mjzeNlO8LdMrVi0wCeo0e2cBq_1ks5uiZDqgaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 430310786,
      "user": "Shuayb1",
      "body": "I'm taking up another issue, so i want to drop this.\r\n"
    },
    {
      "id": 441420230,
      "user": "namansisodiarajput",
      "body": "please assign Image click input Interaction"
    },
    {
      "id": 441420870,
      "user": "vibhor98",
      "body": "Hi @namansisodiarajput, I've assigned you `Image click input`. Please go ahead. Thanks!  "
    },
    {
      "id": 442467306,
      "user": "namansisodiarajput",
      "body": "sir i need guidance for writing e2e test.is there any way to see\nextensions/interaction visually.i am beginner in angularjs. i have\nexperienced woking in backend nodejs.\n\nOn Sun, Nov 25, 2018 at 12:50 PM Vibhor Agarwal <notifications@github.com>\nwrote:\n\n> Hi @namansisodiarajput <https://github.com/namansisodiarajput>, I've\n> assigned you Image click input. Please go ahead. Thanks!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-441420870>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ASTN2yEpfI4HJKBihNuHWhvin4BGxp3Dks5uykTCgaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 442484499,
      "user": "vibhor98",
      "body": "Hi @namansisodiarajput, please have a look at [#5292](https://github.com/oppia/oppia/pull/5292/files) for reference. Thanks! "
    },
    {
      "id": 447619813,
      "user": "vibhor98",
      "body": "Hi @namansisodiarajput, are you still working on the assigned interaction? Thanks! "
    },
    {
      "id": 447631276,
      "user": "namansisodiarajput",
      "body": "Yes sir I am learning angular.my exam is also going.give you response till\n20-24.\n\nOn Sun, 16 Dec 2018, 11:26 Vibhor Agarwal, <notifications@github.com> wrote:\n\n> Hi @namansisodiarajput <https://github.com/namansisodiarajput>, are you\n> still working on the assigned interaction? Thanks!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-447619813>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ASTN223lu8bcpMs1eEPZPmIJmyB3atC7ks5u5eCggaJpZM4Ribzc>\n> .\n>\n"
    },
    {
      "id": 524559682,
      "user": "nithusha21",
      "body": "Closing this thread in favour of #6240 "
    },
    {
      "id": 699583303,
      "user": "anjali0393",
      "body": "Mesg for Vibhor Annand. SSR warrior\nA_khard@hotmail.com"
    }
  ],
  "text_context": "# Write testing utilities for non inline interactions\n\nAt the moment in extensions/interactions/protractor.js only 5 out of the many interactions we have are being tested using e2e tests. The testing coverage should include all the other remaining interactions. Here is a checklist for the same:\r\n\r\n- [ ] Code Editor Interaction\r\n- [x] Graph Input Interaction (#5230) \r\n- [ ] Image Click Input Interaction @namansisodiarajput \r\n- [ ] Interactive Map Interaction\r\n- [ ] Item Selection Input Interaction\r\n- [x] Logic Proof Interaction (#4622)\r\n- [x] Math Expression Interaction (#5292) \r\n- [ ] Music Notes Interaction \r\n- [ ] Pencil Code Editor Interaction\r\n- [ ] Set Input Interaction\r\n\r\nPlease checkout prior work on issue #2731 and PR #4525.  \n\n Set Input Interaction\n\n@Shuayb1 Assigned!\n\nHello,\n\nThanks for the opportunity given to me work on it, however, i've been\nunable to get access to the file and work on it. I'm new on the group, so\nkindly put me through.\n\nThanks\n\n\nOn Mon, Sep 24, 2018 at 1:56 AM Akshay Anand <notifications@github.com>\nwrote:\n\n> @Shuayb1 <https://github.com/Shuayb1> Assigned!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-423860964>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8gEkkrWHQnQbF3F1IGSHnPkOIDoUks5ueC3VgaJpZM4Ribzc>\n> .\n>\n\n\nHi @Shuayb1! Have you completed setting up Oppia on your local machine? If not, please follow [these instructions](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up). Also could you elaborate on the issue you are facing? Are you unable to find which file to add the tests to? (You could take a look at the linked PRs in the issue description, as the tests follow a similar pattern).\n\nIve been unable to finish the installation since 4days now. I was getting\nthis messages, and ive tried* all the python solutions* on oppia site, and\nfew other open resource. I will be grateful if any clue\n\nOn Tue, Sep 25, 2018 at 8:13 PM Nithesh N. Hariharan <\nnotifications@github.com> wrote:\n\n> Hi @Shuayb1 <https://github.com/Shuayb1>! Have you completed setting up\n> Oppia on your local machine? If not, please follow these instructions\n> <https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#setting-things-up>.\n> Also could you elaborate on the issue you are facing? Are you unable to\n> find which file to add the tests to? (You could take a look at the linked\n> PRs in the issue description, as the tests follow a similar pattern).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-424466272>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8r4Vni7-xbHHJDY1Kz4TtvKaUkjjks5ueoBggaJpZM4Ribzc>\n> .\n>\n\n\n@Shuayb1 Can you tell what error messages you got?\n\nPlease I've not gotten response from you.\n\nThanks\n\nOn Fri, 28 Sep 2018, 21:47 Akshay Anand, <notifications@github.com> wrote:\n\n> @Shuayb1 <https://github.com/Shuayb1> Can you tell what error messages\n> you got?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-425561278>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8rIqUd7SmjMJ8K7ElCaFlBb_4-v1ks5ufortgaJpZM4Ribzc>\n> .\n>\n\n\nWhat is the error message that you got?\n\nOoops! I've sent you earlier 26th September.\n\nBut attached is the error.\n\nOn Sun, 7 Oct 2018, 06:28 Akshay Anand, <notifications@github.com> wrote:\n\n> What is the error message that you got?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-427627179>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhHL8mjzeNlO8LdMrVi0wCeo0e2cBq_1ks5uiZDqgaJpZM4Ribzc>\n> .\n>\n\n\nI'm taking up another issue, so i want to drop this.\r\n\n\nplease assign Image click input Interaction\n\nHi @namansisodiarajput, I've assigned you `Image click input`. Please go ahead. Thanks!  \n\nsir i need guidance for writing e2e test.is there any way to see\nextensions/interaction visually.i am beginner in angularjs. i have\nexperienced woking in backend nodejs.\n\nOn Sun, Nov 25, 2018 at 12:50 PM Vibhor Agarwal <notifications@github.com>\nwrote:\n\n> Hi @namansisodiarajput <https://github.com/namansisodiarajput>, I've\n> assigned you Image click input. Please go ahead. Thanks!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-441420870>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ASTN2yEpfI4HJKBihNuHWhvin4BGxp3Dks5uykTCgaJpZM4Ribzc>\n> .\n>\n\n\nHi @namansisodiarajput, please have a look at [#5292](https://github.com/oppia/oppia/pull/5292/files) for reference. Thanks! \n\nHi @namansisodiarajput, are you still working on the assigned interaction? Thanks! \n\nYes sir I am learning angular.my exam is also going.give you response till\n20-24.\n\nOn Sun, 16 Dec 2018, 11:26 Vibhor Agarwal, <notifications@github.com> wrote:\n\n> Hi @namansisodiarajput <https://github.com/namansisodiarajput>, are you\n> still working on the assigned interaction? Thanks!\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oppia/oppia/issues/4558#issuecomment-447619813>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ASTN223lu8bcpMs1eEPZPmIJmyB3atC7ks5u5eCggaJpZM4Ribzc>\n> .\n>\n\n\nClosing this thread in favour of #6240 \n\nMesg for Vibhor Annand. SSR warrior\nA_khard@hotmail.com",
  "pr_link": "https://github.com/oppia/oppia/pull/5292",
  "code_context": [
    {
      "filename": "core/tests/protractor/extensions.js",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview End-to-end tests for rich-text components and interactions.\n */\n\nvar forms = require('../protractor_utils/forms.js');\nvar general = require('../protractor_utils/general.js');\nvar interactions = require('../../../extensions/interactions/protractor.js');\nvar users = require('../protractor_utils/users.js');\nvar workflow = require('../protractor_utils/workflow.js');\n\nvar ExplorationEditorPage =\n  require('../protractor_utils/ExplorationEditorPage.js');\nvar ExplorationPlayerPage =\n  require('../protractor_utils/ExplorationPlayerPage.js');\nvar LibraryPage = require('../protractor_utils/LibraryPage.js');\n\ndescribe('rich-text components', function() {\n  var explorationEditorPage = null;\n  var explorationPlayerPage = null;\n\n  beforeEach(function() {\n    explorationEditorPage = new ExplorationEditorPage.ExplorationEditorPage();\n    explorationEditorMainTab = explorationEditorPage.getMainTab();\n    explorationPlayerPage = new ExplorationPlayerPage.ExplorationPlayerPage();\n  });\n\n  it('should display correctly', function() {\n    users.createUser('user@richTextComponents.com', 'userRichTextComponents');\n    users.login('user@richTextComponents.com');\n\n    workflow.createExploration();\n\n    explorationEditorMainTab.setContent(function(richTextEditor) {\n      richTextEditor.appendBoldText('bold');\n      richTextEditor.appendPlainText(' ');\n      // TODO (Jacob) add test for image RTE component\n      richTextEditor.addRteComponent('Link', 'http://google.com/', true);\n      richTextEditor.addRteComponent('Math', 'abc');\n      richTextEditor.addRteComponent('Video', 'M7lc1UVf-VE', 10, 100, false);\n      // We put these last as otherwise Protractor sometimes fails to scroll to\n      // and click on them.\n      richTextEditor.addRteComponent(\n        'Collapsible', 'title', forms.toRichText('inner'));\n      richTextEditor.addRteComponent('Tabs', [{\n        title: 'title 1',\n        content: forms.toRichText('contents 1')\n      }, {\n        title: 'title 1',\n        content: forms.toRichText('contents 2')\n      }]);\n    });\n\n    explorationEditorPage.navigateToPreviewTab();\n\n    explorationPlayerPage.expectContentToMatch(function(richTextChecker) {\n      richTextChecker.readBoldText('bold');\n      richTextChecker.readPlainText(' ');\n      richTextChecker.readRteComponent('Link', 'http://google.com/', true);\n      richTextChecker.readRteComponent('Math', 'abc');\n      richTextChecker.readRteComponent('Video', 'M7lc1UVf-VE', 10, 100, false);\n      richTextChecker.readRteComponent(\n        'Collapsible', 'title', forms.toRichText('inner'));\n      richTextChecker.readRteComponent('Tabs', [{\n        title: 'title 1',\n        content: forms.toRichText('contents 1')\n      }, {\n        title: 'title 1',\n        content: forms.toRichText('contents 2')\n      }]);\n    });\n\n    explorationEditorPage.discardChanges();\n    users.logout();\n  });\n\n  // TODO (Jacob): Add in a test for the use of rich text inside collapsibles\n  // and tabs. Previous attempts at such a test intermittently fail with the\n  // rich-text checker unable to read the formatted text.\n\n  afterEach(function() {\n    general.checkForConsoleErrors([\n      // TODO (@pranavsid98) This error is caused by the upgrade from Chrome 60\n      // to Chrome 61. Chrome version at time of recording this is 61.0.3163.\n      'chrome-extension://invalid/ - Failed to load resource: net::ERR_FAILED',\n    ]);\n  });\n});\n\n\ndescribe('Interactions', function() {\n  var explorationEditorPage = null;\n  var explorationEditorMainTab = null;\n  var explorationEditorSettingsTab = null;\n  var explorationPlayerPage = null;\n  var libraryPage = null;\n\n  beforeEach(function() {\n    explorationEditorPage = new ExplorationEditorPage.ExplorationEditorPage();\n    explorationEditorMainTab = explorationEditorPage.getMainTab();\n    explorationEditorSettingsTab = explorationEditorPage.getSettingsTab();\n    explorationPlayerPage = new ExplorationPlayerPage.ExplorationPlayerPage();\n    libraryPage = new LibraryPage.LibraryPage();\n  });\n\n  it('should pass their own test suites', function() {\n    users.createUser('user@interactions.com', 'userInteractions');\n    users.login('user@interactions.com');\n    workflow.createExploration();\n    explorationEditorMainTab.setStateName('first');\n    explorationEditorMainTab.setContent(forms.toRichText('some content'));\n\n    var defaultOutcomeSet = false;\n\n    for (var interactionId in interactions.INTERACTIONS) {\n      var interaction = interactions.INTERACTIONS[interactionId];\n      for (var i = 0; i < interaction.testSuite.length; i++) {\n        var test = interaction.testSuite[i];\n\n        explorationEditorMainTab.setInteraction.apply(\n          null, [interactionId].concat(test.interactionArguments));\n\n        explorationEditorMainTab.addResponse.apply(null, [\n          interactionId, forms.toRichText('yes'), null, false\n        ].concat(test.ruleArguments));\n\n        if (!defaultOutcomeSet) {\n          // The default outcome will be preserved for subsequent tests.\n          explorationEditorMainTab.getResponseEditor('default')\n            .setFeedback(forms.toRichText('no'));\n          explorationEditorMainTab.getResponseEditor('default')\n            .setDestination('(try again)', false, null);\n          defaultOutcomeSet = true;\n        }\n\n        explorationEditorPage.navigateToPreviewTab();\n        explorationPlayerPage.expectInteractionToMatch.apply(\n          null, [interactionId].concat(test.expectedInteractionDetails));\n        for (var j = 0; j < test.wrongAnswers.length; j++) {\n          explorationPlayerPage.submitAnswer(\n            interactionId, test.wrongAnswers[j]);\n          explorationPlayerPage.expectLatestFeedbackToMatch(\n            forms.toRichText('no'));\n        }\n        // Dismiss conversation help card.\n        var clearHelpcardButton = element(by.css(\n          '.protractor-test-close-help-card-button'));\n        clearHelpcardButton.isPresent().then(function(isPresent) {\n          if (isPresent) {\n            clearHelpcardButton.click();\n          }\n        });\n        for (var j = 0; j < test.correctAnswers.length; j++) {\n          explorationPlayerPage.submitAnswer(\n            interactionId, test.correctAnswers[j]);\n          explorationPlayerPage.expectLatestFeedbackToMatch(\n            forms.toRichText('yes'));\n        }\n        explorationEditorPage.navigateToMainTab();\n        explorationEditorMainTab.deleteInteraction();\n      }\n    }\n    explorationEditorPage.discardChanges();\n    users.logout();\n  });\n\n  it('publish and play exploration successfully', function() {\n    /*\n     * This suite should be expanded as new interaction's e2e utility is added.\n     */\n    users.createAndLoginUser(\n      'explorationEditor@interactions.com', 'explorationEditor');\n    workflow.createExploration();\n\n    explorationEditorMainTab.setStateName('Graph');\n    explorationEditorMainTab.setContent(forms.toRichText(\n      'Draw a complete graph with the given vertices.'));\n    var graphDict = {\n      vertices: [[277, 77], [248, 179], [405, 144]]\n    };\n    explorationEditorMainTab.setInteraction('GraphInput', graphDict);\n    graphDict = {\n      edges: [[0, 1], [1, 2], [0, 2]],\n      vertices: [[277, 77], [248, 179], [405, 144]]\n    };\n    explorationEditorMainTab.addResponse(\n      'GraphInput', forms.toRichText('Good job!'), 'MathExp',\n      true, 'IsIsomorphicTo', graphDict);\n    var responseEditor = explorationEditorMainTab.getResponseEditor('default');\n    responseEditor.setFeedback(forms.toRichText(\n      'A complete graph is a graph in which each pair of graph vertices is ' +\n      'connected by an edge.'));\n\n    explorationEditorMainTab.moveToState('MathExp');\n    explorationEditorMainTab.setContent(function(richTextEditor) {\n      richTextEditor.appendPlainText(\n        'Please simplify the following expression: ');\n      // Some Latex styling is expected here.\n      richTextEditor.addRteComponent(\n        'Math', '16x^{12}/4x^2');\n    });\n\n    explorationEditorMainTab.setInteraction('MathExpressionInput');\n    // Proper Latex styling for rule spec is required.\n    explorationEditorMainTab.addResponse(\n      'MathExpressionInput', forms.toRichText('Good job!'), 'End', true,\n      'IsMathematicallyEquivalentTo', '\\\\frac{16x^{12}}{4x^{2}}');\n    // Expecting answer to be 4x^10\n    var responseEditor = explorationEditorMainTab.getResponseEditor('default');\n    responseEditor.setFeedback(forms.toRichText(\n      'A simplified expression should be smaller than the original.'));\n\n    explorationEditorMainTab.moveToState('End');\n    explorationEditorMainTab.setInteraction('EndExploration');\n    explorationEditorPage.navigateToSettingsTab();\n    explorationEditorSettingsTab.setTitle('Regression Test Exploration');\n    explorationEditorSettingsTab.setObjective(\n      'To publish and play this exploration');\n    explorationEditorSettingsTab.setCategory('Logic');\n    explorationEditorPage.saveChanges();\n    workflow.publishExploration();\n    users.logout();\n\n    users.createAndLoginUser('graphLearner@interactions.com', 'graphLearner');\n    libraryPage.get();\n    libraryPage.findExploration('Regression Test Exploration');\n    libraryPage.playExploration('Regression Test Exploration');\n    explorationPlayerPage.expectExplorationNameToBe(\n      'Regression Test Exploration');\n\n    // Play Graph Input interaction.\n    explorationPlayerPage.expectContentToMatch(forms.toRichText(\n      'Draw a complete graph with the given vertices.'));\n    graphDict = {\n      edges: [[1, 2], [1, 0], [0, 2]]\n    };\n    explorationPlayerPage.submitAnswer('GraphInput', graphDict);\n    explorationPlayerPage.expectLatestFeedbackToMatch(\n      forms.toRichText('Good job!'));\n    explorationPlayerPage.clickThroughToNextCard();\n\n    // Play Math Expression Input interaction.\n    explorationPlayerPage.submitAnswer('MathExpressionInput', '4 * x^(10)');\n    explorationPlayerPage.expectLatestFeedbackToMatch(\n      forms.toRichText('Good job!'));\n    explorationPlayerPage.clickThroughToNextCard();\n\n    explorationPlayerPage.expectExplorationToBeOver();\n    users.logout();\n  });\n\n  afterEach(function() {\n    general.checkForConsoleErrors([]);\n  });\n});\n"
    },
    {
      "filename": "core/tests/protractor_utils/ExplorationEditorMainTab.js",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Page object for the exploration editor's main tab, for use in\n * Protractor tests.\n */\n\nvar forms = require('./forms.js');\nvar general = require('./general.js');\nvar interactions = require('../../../extensions/interactions/protractor.js');\nvar ruleTemplates = require(\n  '../../../extensions/interactions/rule_templates.json');\nvar waitFor = require('../protractor_utils/waitFor.js');\n\nvar _NEW_STATE_OPTION = 'A New Card Called...';\nvar _CURRENT_STATE_OPTION = '(try again)';\n\nvar ExplorationEditorMainTab = function() {\n  /*\n   * Interactive elements\n   */\n  var addResponseDetails = element(\n    by.css('.protractor-test-add-response-details'));\n  var addResponseHeader = element(\n    by.css('.protractor-test-add-response-modal-header'));\n  var multipleChoiceAnswerOptions = function (optionNum) {\n    return element(\n      by.cssContainingText('.protractor-test-html-select-option', optionNum));\n  };\n  var neutralElement = element.all(by.css('.protractor-test-neutral-element'))\n    .first();\n  var defaultResponseTab = element(\n    by.css('.protractor-test-default-response-tab'));\n  var editorWelcomeModal = element(by.css('.protractor-test-welcome-modal'));\n  var editOutcomeDestBubble = element(by.css('.protractor-test-dest-bubble'));\n  var editOutcomeDestStateInput = editOutcomeDestBubble.element(\n    by.css('.protractor-test-add-state-input'));\n  var editOutcomeDestAddExplorationId = element(\n    by.css('.protractor-test-add-refresher-exploration-id'));\n  var editOutcomeDestDropdownOptions = function(targetOption) {\n    return element.all(by.cssContainingText('option', targetOption)).first();\n  };\n  var editParamChanges = element(\n    by.css('.protractor-test-state-edit-param-changes'));\n  var feedbackBubble = element(by.css('.protractor-test-feedback-bubble'));\n  var feedbackEditor = element(by.css('.protractor-test-open-feedback-editor'));\n  var interaction = element(by.css('.protractor-test-interaction'));\n  var interactionEditor = element(\n    by.css('.protractor-test-interaction-editor'));\n  var explorationGraph = element(by.css('.protractor-test-exploration-graph'));\n  var stateNodes = explorationGraph.all(by.css('.protractor-test-node'));\n  var stateNodeLabel = function(nodeElement) {\n    return nodeElement.element(by.css('.protractor-test-node-label'));\n  };\n  var interactionTab = function(tabId) {\n    return element(by.css('.protractor-test-interaction-tab-' + tabId));\n  };\n  var interactionTile = function(interactionId) {\n    return element(by.css(\n      '.protractor-test-interaction-tile-' + interactionId));\n  };\n  var openOutcomeDestEditor = element(\n    by.css('.protractor-test-open-outcome-dest-editor'));\n  var openOutcomeFeedBackEditor = element(\n    by.css('.protractor-test-open-outcome-feedback-editor'));\n  var postTutorialPopover = element(by.css('.popover-content'));\n  var responseBody = function(responseNum) {\n    return element(by.css('.protractor-test-response-body-' + responseNum));\n  };\n  var responseTab = element.all(by.css('.protractor-test-response-tab'));\n  var ruleBlock = element.all(by.css('.protractor-test-rule-block'));\n  var stateEditContent = element(\n    by.css('.protractor-test-edit-content'));\n  var stateContentDisplay = element(\n    by.css('.protractor-test-state-content-display'));\n  var stateNameContainer = element(\n    by.css('.protractor-test-state-name-container'));\n  var stateNameInput = element(\n    by.css('.protractor-test-state-name-input'));\n\n  /*\n   * Buttons\n   */\n  var addAnswerButton = element(by.css('.protractor-test-add-answer'));\n  var addHintButton = element(by.css('.protractor-test-oppia-add-hint-button'));\n  var addNewResponseButton = element(\n    by.css('.protractor-test-add-new-response'));\n  var addParamButton = element(by.css('.protractor-test-add-param-button'));\n  var addResponseButton = element(\n    by.css('.protractor-test-open-add-response-modal'));\n  var addSolutionButton = element(\n    by.css('.protractor-test-oppia-add-solution-button'));\n  var addInteractionButton = element(\n    by.css('.protractor-test-open-add-interaction-modal'));\n  var cancelOutcomeDestButton = element(\n    by.css('.protractor-test-cancel-outcome-dest'));\n  var closeAddResponseButton = element(\n    by.css('.protractor-test-close-add-response-modal'));\n  var confirmDeleteInteractionButton = element(\n    by.css('.protractor-test-confirm-delete-interaction'));\n  var confirmDeleteResponseButton = element(\n    by.css('.protractor-test-confirm-delete-response'));\n  var confirmDeleteStateButton = element(\n    by.css('.protractor-test-confirm-delete-state'));\n  var deleteAnswerButton = element(\n    by.css('.protractor-test-delete-answer'));\n  var deleteInteractionButton = element(\n    by.css('.protractor-test-delete-interaction'));\n  var deleteResponseButton = element(\n    by.css('.protractor-test-delete-response'));\n  var dismissWelcomeModalButton = element(\n    by.css('.protractor-test-dismiss-welcome-modal'));\n  var saveAnswerButton = element(\n    by.css('.protractor-test-save-answer'));\n  var saveHintButton = element(by.css('.protractor-test-save-hint'));\n  var saveHintEditButton = element(\n    by.css('.protractor-test-save-hint-edit'));\n  var saveInteractionButton = element(\n    by.css('.protractor-test-save-interaction'));\n  var saveOutcomeDestButton = element(\n    by.css('.protractor-test-save-outcome-dest'));\n  var saveOutcomeFeedbackButton = element(\n    by.css('.protractor-test-save-outcome-feedback'));\n  var saveParamChangesButton = element(\n    by.css('.protractor-test-save-param-changes-button'));\n  var saveStateContentButton = element(\n    by.css('.protractor-test-save-state-content'));\n  var stateNameSubmitButton = stateNameContainer.element(\n    by.css('.protractor-test-state-name-submit'));\n\n  /*\n   * Actions\n   */\n\n  // TUTORIAL\n\n  this.exitTutorial = function() {\n    // If the editor welcome modal shows up, exit it.\n    editorWelcomeModal.isPresent().then(function(isVisible) {\n      if (isVisible) {\n        waitFor.elementToBeClickable(\n          dismissWelcomeModalButton,\n          'Welcome modal is taking too long to appear');\n        dismissWelcomeModalButton.click();\n      }\n    });\n\n    waitFor.invisibilityOf(\n      editorWelcomeModal, 'Editor Welcome modal takes too long to disappear');\n\n    // Otherwise, if the editor tutorial shows up, exit it.\n    element.all(by.css('.skipBtn')).then(function(buttons) {\n      if (buttons.length === 1) {\n        buttons[0].click();\n      } else if (buttons.length !== 0) {\n        throw 'Expected to find at most one \\'exit tutorial\\' button';\n      }\n    });\n  };\n\n  this.finishTutorial = function() {\n    // Finish the tutorial.\n    var finishTutorialButton = element.all(by.buttonText('Finish'));\n    waitFor.elementToBeClickable(\n      finishTutorialButton.first(),\n      'Finish Tutorial Stage button is not clickable');\n    finishTutorialButton.then(function(buttons) {\n      if (buttons.length === 1) {\n        buttons[0].click();\n      } else {\n        throw Error('There is more than 1 Finish button!');\n      }\n    });\n  };\n\n  this.playTutorial = function() {\n    var tutorialTabHeadings = [\n      'Creating in Oppia',\n      'Content',\n      'Interaction',\n      'Responses',\n      'Preview',\n      'Save',\n    ];\n    tutorialTabHeadings.forEach(function(heading) {\n      var tutorialTabHeadingElement = element(by.cssContainingText(\n        '.popover-title', heading));\n      waitFor.visibilityOf(\n        tutorialTabHeadingElement, 'Tutorial: ' + heading + 'is not visible');\n      // Progress to the next instruction in the tutorial.\n      var nextTutorialStageButton = element.all(by.css('.nextBtn'));\n      waitFor.elementToBeClickable(\n        nextTutorialStageButton.first(),\n        'Next Tutorial Stage button is not clickable');\n      nextTutorialStageButton.then(function(buttons) {\n        if (buttons.length === 1) {\n          buttons[0].click();\n          waitFor.invisibilityOf(\n            tutorialTabHeadingElement,\n            'Tutorial stage takes too long to disappear');\n        } else {\n          throw Error('There is more than one Next button!');\n        }\n      });\n    });\n  };\n\n  this.startTutorial = function() {\n    waitFor.visibilityOf(\n      editorWelcomeModal, 'Editor Welcome modal takes too long to appear');\n    element(by.css('.protractor-test-start-tutorial')).click();\n    waitFor.visibilityOf(\n      element(by.css('.ng-joyride-title')),\n      'Tutorial modal takes too long to appear');\n  };\n\n  // RESPONSE EDITOR\n\n  /**\n   * This clicks the \"add new response\" button and then selects the rule type\n   * and enters its parameters, and closes the rule editor. Any number of rule\n   * parameters may be specified after the ruleName.\n   * Note that feedbackInstructions may be null (which means 'specify no\n   * feedback'), and only represents a single feedback element.\n   * @param {string} interactionId - Interaction type e.g. NumericInput\n   * @param {object} feedbackInstructions - A RTE object containing feedback\n   *                                        or null\n   * @param {string} destStateName - New destination state or 'try again'/null\n   * @param {boolean} createNewState - True if the rule creates a new state,\n   *                                   else false.\n   * @param {string} ruleName - The name of the rule, e.g. IsGreaterThan, must\n   *                            match with interaction type.\n   */\n  this.addResponse = function(\n      interactionId, feedbackInstructions, destStateName,\n      createNewState, ruleName) {\n    expect(addResponseButton.isDisplayed()).toEqual(true);\n    // Open the \"Add Response\" modal if it is not already open.\n    addResponseButton.click();\n\n    // Set the rule description.\n    var args = [addResponseDetails, interactionId, ruleName];\n    for (var i = 5; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    expect(addResponseDetails.isDisplayed()).toBe(true);\n    _selectRule(addResponseDetails, interactionId, ruleName);\n    _setRuleParameters.apply(null, args);\n\n    // Open the feedback entry form if it is not already open.\n    feedbackEditor.isPresent().then(function(isVisible) {\n      if (isVisible) {\n        feedbackEditor.click();\n      }\n    });\n\n    if (feedbackInstructions) {\n      // Set feedback contents.\n      _setOutcomeFeedback(feedbackInstructions);\n    }\n    // If the destination is being changed, open the corresponding editor.\n    if (destStateName || destStateName !== '(try again)') {\n    // Set destination contents.\n      _setOutcomeDest(\n        destStateName, createNewState, null);\n    }\n\n    // Close new response modal.\n    expect(addNewResponseButton.isDisplayed()).toBe(true);\n    addNewResponseButton.click();\n    waitFor.invisibilityOf(\n      addNewResponseButton, 'Add New Response Modal is not closed');\n  };\n\n  // Rules are zero-indexed; 'default' denotes the default outcome.\n  this.getResponseEditor = function(responseNum) {\n    var headerElem;\n    if (responseNum === 'default') {\n      headerElem = defaultResponseTab;\n    } else {\n      headerElem = responseTab.get(\n        responseNum);\n    }\n\n    responseBody(responseNum).isPresent().then(function(isVisible) {\n      if (!isVisible) {\n        expect(headerElem.isDisplayed()).toBe(true);\n        waitFor.elementToBeClickable(\n          headerElem, 'Response Editor header is not clickable');\n        headerElem.click();\n      }\n    });\n\n    return {\n      /**\n       * Check for correct rule parameters.\n       * @param {string} [interactionId] - Interaction type.\n       * @param {string} [ruleName] - Appropriate rule of provided interaction.\n       * @param {string[]} [feedbackTextArray] - Exact feedback text to match.\n       */\n      expectRuleToBe: function(interactionId, ruleName, feedbackTextArray) {\n        var ruleDescription = _getRuleDescription(interactionId, ruleName);\n        // Replace selectors with feedbackTextArray's elements.\n        ruleDescription = _replaceRuleInputPlaceholders(\n          ruleDescription, feedbackTextArray);\n        ruleDescription += '...';\n        // Adding \"...\" to end of string.\n        var answerTab = element(by.css('.protractor-test-answer-tab'));\n        expect(answerTab.getText()).toEqual(ruleDescription);\n      },\n      /**\n       * Check for correct learner's feedback.\n       * @param {string} [feedbackInstructionText] - Exact feedback to match.\n       */\n      expectFeedbackInstructionToBe: function(feedbackInstructionsText) {\n        // The first rule block's RTE.\n        var feedbackRTE = responseBody(responseNum).\n          element(by.className('oppia-rte-editor'));\n        expect(feedbackRTE.getText()).toEqual(\n          feedbackInstructionsText);\n      },\n      setFeedback: function(richTextInstructions) {\n      // Begin editing feedback.\n        openOutcomeFeedBackEditor.click();\n\n        // Set feedback contents.\n        _setOutcomeFeedback(richTextInstructions);\n\n        // Save feedback.\n        saveOutcomeFeedbackButton.click();\n      },\n      // This saves the rule after the destination is selected.\n      //  - destinationName: The name of the state to move to, or null to stay\n      //    on the same state.\n      //  - createNewState: whether the destination state is new and must be\n      //    created at this point.\n      setDestination: function(\n          destinationName, createNewState, refresherExplorationId) {\n      // Begin editing destination.\n        expect(openOutcomeDestEditor.isDisplayed()).toBe(true);\n        openOutcomeDestEditor.click();\n\n        // Set destination contents.\n        _setOutcomeDest(\n          destinationName, createNewState, refresherExplorationId);\n\n        // Save destination.\n        expect(saveOutcomeDestButton.isDisplayed()).toBe(true);\n        saveOutcomeDestButton.click();\n      },\n      // The current state name must be at the front of the list.\n      expectAvailableDestinationsToBe: function(stateNames) {\n      // Begin editing destination.\n        openOutcomeDestEditor.click();\n\n        var expectedOptionTexts = [_CURRENT_STATE_OPTION].concat(\n          stateNames.slice(1));\n\n        // Create new option always at the end of the list.\n        expectedOptionTexts.push(_NEW_STATE_OPTION);\n\n        editOutcomeDestBubble.all(by.tagName('option')).map(\n          function(optionElem) {\n            return optionElem.getText();\n          }).then(function(actualOptionTexts) {\n          expect(actualOptionTexts).toEqual(expectedOptionTexts);\n        });\n\n        // Cancel editing the destination.\n        cancelOutcomeDestButton.click();\n      },\n      addRule: function(interactionId, ruleName) {\n      // Additional parameters may be provided after ruleName.\n\n      // Add the rule.\n        addAnswerButton.click();\n\n        // Set the rule description.\n        var ruleDetails = element(by.css('.protractor-test-rule-details'));\n        var args = [ruleDetails, interactionId, ruleName];\n        for (var i = 2; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        _selectRule(ruleDetails, interactionId, ruleName);\n        _setRuleParameters.apply(null, args);\n\n        // Save the new rule.\n        saveAnswerButton.click();\n      },\n      deleteResponse: function() {\n        deleteResponseButton.click();\n        confirmDeleteResponseButton.click();\n      },\n      expectCannotSetFeedback: function() {\n        expect(openOutcomeFeedBackEditor.isPresent()).toBeFalsy();\n      },\n      expectCannotSetDestination: function() {\n        var destEditorElem = openOutcomeDestEditor;\n        expect(destEditorElem.isPresent()).toBeFalsy();\n      },\n      expectCannotAddRule: function() {\n        expect(addAnswerButton.isPresent()).toBeFalsy();\n      },\n      expectCannotDeleteRule: function(ruleNum) {\n        ruleElem = ruleBlock.get(ruleNum);\n        expect(deleteAnswerButton.isPresent()).toBeFalsy();\n      },\n      expectCannotDeleteResponse: function() {\n        expect(deleteResponseButton.isPresent()).toBeFalsy();\n      }\n    };\n  };\n\n  this.expectCannotAddResponse = function() {\n    expect(addResponseButton.isPresent()).toBeFalsy();\n  };\n\n  var _setOutcomeDest = function(\n      destName, createNewDest, refresherExplorationId) {\n    expect(destName === null && createNewDest).toBe(false);\n\n    if (createNewDest) {\n      targetOption = _NEW_STATE_OPTION;\n    } else if (destName === null | destName === '(try again)') {\n      targetOption = _CURRENT_STATE_OPTION;\n    } else {\n      targetOption = destName;\n    }\n    waitFor.visibilityOf(\n      editOutcomeDestDropdownOptions(targetOption),\n      'editOutcomeDestDropdownOptions taking too long to appear');\n    expect(editOutcomeDestDropdownOptions(targetOption).isDisplayed())\n      .toBe(true);\n    editOutcomeDestDropdownOptions(targetOption).click();\n\n    if (createNewDest) {\n      editOutcomeDestStateInput.sendKeys(destName);\n    } else if (refresherExplorationId) {\n      editOutcomeDestAddExplorationId.sendKeys(refresherExplorationId);\n    }\n  };\n\n  // CONTENT\n\n  // 'richTextInstructions' is a function that is sent a RichTextEditor which it\n  // can then use to alter the state content, for example by calling\n  // .appendBoldText(...).\n  this.setContent = function(richTextInstructions) {\n    // Wait for browser to time out the popover, which is 4000 ms.\n    waitFor.invisibilityOf(\n      postTutorialPopover, 'Post-tutorial popover does not disappear.');\n\n    waitFor.elementToBeClickable(\n      stateEditContent,\n      'stateEditContent taking too long to appear to set content');\n    stateEditContent.click();\n    var stateEditorTag = element(by.tagName('state-content-editor'));\n    var stateContentEditor = stateEditorTag.element(\n      by.css('.protractor-test-state-content-editor'));\n    waitFor.visibilityOf(\n      stateContentEditor,\n      'stateContentEditor taking too long to appear to set content');\n    var richTextEditor = forms.RichTextEditor(stateContentEditor);\n    richTextEditor.clear();\n    richTextInstructions(richTextEditor);\n    expect(saveStateContentButton.isDisplayed()).toBe(true);\n    saveStateContentButton.click();\n    waitFor.invisibilityOf(\n      saveStateContentButton,\n      'State content editor takes too long to disappear');\n  };\n\n  // This receives a function richTextInstructions used to verify the display of\n  // the state's content visible when the content editor is closed. The\n  // richTextInstructions will be supplied with a handler of the form\n  // forms.RichTextChecker and can then perform checks such as\n  //   handler.readBoldText('bold')\n  //   handler.readRteComponent('Collapsible', 'outer', 'inner')\n  // These would verify that the content consists of the word 'bold' in bold\n  // followed by a Collapsible component with the given arguments, and nothing\n  // else. Note that this fails for collapsibles and tabs since it is not\n  // possible to click on them to view their contents, as clicks instead open\n  // the rich text editor.\n  this.expectContentToMatch = function(richTextInstructions) {\n    forms.expectRichText(stateContentDisplay).toMatch(richTextInstructions);\n  };\n\n  // HINT\n\n  this.addHint = function(hint) {\n    addHintButton.click();\n    var addHintModal = element(\n      by.cssContainingText('.protractor-test-hint-modal', 'Add Hint'));\n    waitFor.visibilityOf(\n      addHintModal, 'Add hint modal takes too long to appear');\n    element(by.css('.protractor-test-hint-text')).all(by.tagName('p'))\n      .last().click();\n    browser.switchTo().activeElement().sendKeys(hint);\n\n    waitFor.elementToBeClickable(\n      saveHintButton,\n      'Save Hint button takes too long to be clickable');\n    saveHintButton.click();\n    waitFor.invisibilityOf(\n      addHintModal, 'Add Hint modal takes too long to close');\n  };\n\n  // Hints are zero-indexed.\n  this.getHintEditor = function(hintNum) {\n    var confirmDeteletHintButton = element(\n      by.css('.protractor-test-confirm-delete-hint'));\n    var headerElem = element.all(by.css('.protractor-test-hint-tab')).get(\n      hintNum);\n    var deleteHintIcon = headerElem.element(\n      by.css('.protractor-test-delete-response'));\n    var hintBodyElem = element(\n      by.css('.protractor-test-hint-body-' + hintNum));\n    hintBodyElem.isPresent().then(function(isVisible) {\n      if (!isVisible) {\n        headerElem.click();\n      }\n    });\n    return {\n      setHint: function(hint) {\n        var editHintIcon = element(\n          by.css('.protractor-test-open-hint-editor'));\n        editHintIcon.click();\n        browser.switchTo().activeElement().clear();\n        browser.switchTo().activeElement().sendKeys(hint);\n        waitFor.elementToBeClickable(\n          saveHintEditButton,\n          'Save Hint button takes too long to be clickable');\n        saveHintEditButton.click();\n        waitFor.visibilityOf(\n          editHintIcon, 'Add Hint modal takes too long to close');\n      },\n      deleteHint: function() {\n        deleteHintIcon.click();\n        confirmDeteletHintButton.click();\n      },\n      expectCannotDeleteHint: function() {\n        expect(deleteHintIcon.isPresent()).toBeFalsy();\n      }\n    };\n  };\n\n  this.addSolution = function(interactionId, solution) {\n    addSolutionButton.click();\n    var addOrUpdateSolutionModal = element(\n      by.css('.protractor-test-add-or-update-solution-modal'));\n    waitFor.visibilityOf(\n      addOrUpdateSolutionModal,\n      'Add/Update Solution modal takes to long to appear');\n    interactions.getInteraction(interactionId).submitAnswer(\n      element(by.css('.protractor-test-interaction-html')),\n      solution.correctAnswer);\n    element(by.css('.protractor-test-explanation-textarea'))\n      .all(by.tagName('p')).first().click();\n    browser.switchTo().activeElement().sendKeys(solution.explanation);\n    var submitSolutionButton = element(\n      by.css('.protractor-test-submit-solution-button'));\n    waitFor.elementToBeClickable(\n      submitSolutionButton,\n      'Submit Solution button takes too long to be clickable');\n    submitSolutionButton.click();\n    waitFor.invisibilityOf(\n      addOrUpdateSolutionModal,\n      'Add/Update Solution modal takes too long to close');\n  };\n\n  // INTERACTIONS\n\n  this.deleteInteraction = function() {\n    waitFor.elementToBeClickable(\n      deleteInteractionButton, 'Delete Interaction button is not clickable');\n    deleteInteractionButton.click();\n\n    // Click through the \"are you sure?\" warning.\n    waitFor.elementToBeClickable(\n      confirmDeleteInteractionButton,\n      'Confirm Delete Interaction button takes too long to be clickable');\n    confirmDeleteInteractionButton.click();\n\n    waitFor.invisibilityOf(\n      confirmDeleteInteractionButton,\n      'Delete Interaction modal takes too long to close');\n  };\n\n  // This function should be used as the standard way to specify interactions\n  // for most purposes. Additional arguments may be sent to this function,\n  // and they will be passed on to the relevant interaction editor.\n  this.setInteraction = function(interactionId) {\n    createNewInteraction(interactionId);\n    customizeInteraction.apply(null, arguments);\n    closeAddResponseModal();\n    waitFor.invisibilityOf(\n      addResponseHeader, 'Add Response modal takes too long to close');\n  };\n\n  // This function should not usually be invoked directly; please consider\n  // using setInteraction instead.\n  var createNewInteraction = function(interactionId) {\n    waitFor.invisibilityOf(\n      deleteInteractionButton,\n      'Please delete interaction before creating a new one');\n\n    waitFor.elementToBeClickable(\n      addInteractionButton,\n      'Add Interaction button takes too long to be clickable');\n    expect(addInteractionButton.isDisplayed()).toBe(true);\n    addInteractionButton.click();\n\n    var INTERACTION_ID_TO_TAB_NAME = {\n      Continue: 'General',\n      EndExploration: 'General',\n      ImageClickInput: 'General',\n      ItemSelectionInput: 'General',\n      MultipleChoiceInput: 'General',\n      TextInput: 'General',\n      FractionInput: 'Math',\n      GraphInput: 'Math',\n      LogicProof: 'Math',\n      NumericInput: 'Math',\n      SetInput: 'Math',\n      MathExpressionInput: 'Math',\n      NumberWithUnits: 'Math',\n      CodeRepl: 'Programming',\n      PencilCodeEditor: 'Programming',\n      MusicNotesInput: 'Music',\n      InteractiveMap: 'Geography'\n    };\n\n    expect(interactionTab(INTERACTION_ID_TO_TAB_NAME[interactionId])\n      .isDisplayed()).toBe(true);\n    interactionTab(INTERACTION_ID_TO_TAB_NAME[interactionId]).click();\n    expect(interactionTile(interactionId).isDisplayed()).toBe(true);\n    interactionTile(interactionId).click();\n  };\n\n  // This function should not usually be invoked directly; please consider\n  // using setInteraction instead.\n  var customizeInteraction = function(interactionId) {\n    if (arguments.length > 1) {\n      var elem = interactionEditor;\n      var customizationArgs = [elem];\n      for (var i = 1; i < arguments.length; i++) {\n        customizationArgs.push(arguments[i]);\n      }\n      interactions.getInteraction(interactionId).customizeInteraction.apply(\n        null, customizationArgs);\n    }\n\n    // The save interaction button doesn't appear for interactions having no\n    // options to customize.\n    saveInteractionButton.isPresent().then(function(result) {\n      if (result) {\n        saveInteractionButton.click();\n      }\n    });\n    waitFor.invisibilityOf(\n      saveInteractionButton,\n      'Customize Interaction modal taking too long to close');\n  };\n\n  // This function should not usually be invoked directly; please consider\n  // using setInteraction instead.\n  var closeAddResponseModal = function() {\n    // If the \"Add Response\" modal opens, close it.\n    addResponseHeader.isPresent().then(function(isVisible) {\n      if (isVisible) {\n        expect(closeAddResponseButton.isDisplayed()).toBe(true);\n        closeAddResponseButton.click();\n      }\n    });\n  };\n\n  // Likewise this can receive additional arguments.\n  // Note that this refers to the interaction displayed in the editor tab (as\n  // opposed to the preview tab, which uses the corresponding function in\n  // ExplorationPlayerPage.js).\n  this.expectInteractionToMatch = function(interactionId) {\n  // Convert additional arguments to an array to send on.\n    var args = [interaction];\n    for (var i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    interactions.getInteraction(interactionId).\n      expectInteractionDetailsToMatch.apply(null, args);\n  };\n\n  this.expectCannotDeleteInteraction = function() {\n    expect((deleteInteractionButton).isPresent()).toBeFalsy();\n  };\n\n  var _setOutcomeFeedback = function(richTextInstructions) {\n    var feedbackEditor = forms.RichTextEditor(\n      feedbackBubble);\n    feedbackEditor.clear();\n    richTextInstructions(feedbackEditor);\n  };\n\n  // PARAMETERS\n\n  // This function adds a multiple-choice parameter change, creating the\n  // parameter if necessary.\n  this.addMultipleChoiceParameterChange = function(paramName, paramValues) {\n    waitFor.elementToBeClickable(\n      editParamChanges, 'Edit Param Changes is not clickable');\n    editParamChanges.click();\n\n    waitFor.elementToBeClickable(\n      addParamButton, 'Add Param button is not clickable');\n    addParamButton.click();\n\n    var editorRowElem = element.all(by.css(\n      '.protractor-test-param-changes-list')).last();\n\n    forms.AutocompleteDropdownEditor(editorRowElem).setValue(paramName);\n\n    var editorRowOption = editorRowElem.element(\n      by.cssContainingText('option', 'to one of'));\n    waitFor.elementToBeClickable(\n      editorRowOption, 'Param Options are not clickable');\n    editorRowOption.click();\n    paramValues.forEach(function(paramValue) {\n      var item = editorRowElem.all(by.tagName('input')).last();\n      item.clear();\n      item.sendKeys(paramValue);\n    });\n\n    waitFor.elementToBeClickable(\n      saveParamChangesButton, 'Save Param Changes button is not clickable');\n    saveParamChangesButton.click();\n\n    waitFor.invisibilityOf(\n      saveParamChangesButton,\n      'Param Changes editor takes too long to disappear');\n  };\n\n  // This function adds a parameter change, creating the parameter if necessary.\n  this.addParameterChange = function(paramName, paramValue) {\n    waitFor.elementToBeClickable(\n      editParamChanges, 'Param Changes editor is not clickable');\n    editParamChanges.click();\n\n    waitFor.elementToBeClickable(\n      addParamButton, 'Add Param button is not clickable');\n    addParamButton.click();\n\n    var editorRowElem = element.all(by.css(\n      '.protractor-test-param-changes-list')).last();\n\n    forms.AutocompleteDropdownEditor(editorRowElem).setValue(paramName);\n\n    var item = editorRowElem.all(by.tagName('input')).last();\n    waitFor.elementToBeClickable(item, 'Param Options are not clickable');\n    // Setting parameter value is difficult via css since input fields\n    // are dynamically generated. We isolate it as the last input in the\n    // current parameter changes UI.\n    item.click();\n    item.clear();\n    item.sendKeys(paramValue);\n\n    waitFor.elementToBeClickable(\n      saveParamChangesButton, 'Save Param Changes button is not clickable');\n    saveParamChangesButton.click();\n\n    waitFor.invisibilityOf(\n      saveParamChangesButton,\n      'Param Changes editor takes too long to disappear');\n  };\n\n  // RULES\n  this.selectRuleInAddResponseModal = function(interactionId, ruleName) {\n    _selectRule(addResponseDetails, interactionId, ruleName);\n  };\n\n  var _getRuleDescription = function(interactionId, ruleName) {\n    if (ruleTemplates.hasOwnProperty(interactionId)) {\n      if (ruleTemplates[interactionId].hasOwnProperty(ruleName)) {\n        return ruleTemplates[interactionId][ruleName].description;\n      } else {\n        throw Error('Unknown rule: ' + ruleName);\n      }\n    } else {\n      throw Error('Could not find rules for interaction: ' + interactionId);\n    }\n  };\n\n  // Parses the relevant ruleDescription string, and returns an Array containing\n  // the types of the rule input parameters.\n  var _getRuleParameterTypes = function(interactionId, ruleName) {\n    var ruleDescription = _getRuleDescription(interactionId, ruleName);\n    // An example of rule description:\n    // is equal to {{a|NonnegativeInt}} and {{b|NonnegativeInt}}.\n    // (from NumericInput).\n    var parameterTypes = [];\n    var re = /\\|(.*?)\\}/ig;\n    // Matched result = Array[|NonnegativeInt}, |NonnegativeInt}]\n    var angularSelectors = ruleDescription.match(re);\n    // Slicing first and last letter.\n    if (angularSelectors) {\n      angularSelectors.forEach(function(elem) {\n        parameterTypes.push(elem.toString().slice(1, -1));\n      });\n    }\n    // Expected sample output = Array[NonnegativeInt, NonnegativeInt]\n    return parameterTypes;\n  };\n\n  // This function sets the parameter values for the given rule.\n  // Note: The parameter values should be specified as additional arguments\n  // after the ruleName. For example, the call\n  //   _selectRuleParameters(ruleElement, 'NumericInput', 'Equals', 24)\n  // will result in a rule that checks whether the learner's answer equals 24.\n  var _setRuleParameters = function(ruleElement, interactionId, ruleName) {\n    var parameterValues = [];\n    for (var i = 3; i < arguments.length; i++) {\n      parameterValues.push(arguments[i]);\n    }\n    var parameterTypes = _getRuleParameterTypes(interactionId, ruleName);\n    expect(parameterValues.length).toEqual(parameterTypes.length);\n    var answerDescriptionFragment = element.all(\n      by.css('.protractor-test-answer-description-fragment'));\n    for (var i = 0; i < parameterValues.length; i++) {\n      var parameterElement = answerDescriptionFragment.get(i * 2 + 1);\n      var parameterEditor = forms.getEditor(\n        parameterTypes[i])(parameterElement);\n\n      if (interactionId === 'MultipleChoiceInput') {\n      // This is a special case as it uses a dropdown to set a NonnegativeInt.\n        parameterElement.element(by.tagName('button')).click();\n        multipleChoiceAnswerOptions(parameterValues[i])\n          .click();\n      } else {\n        parameterEditor.setValue(parameterValues[i]);\n      }\n    }\n  };\n\n  /**\n   * Parse for rule input placeholders in ruleDescription and replace them.\n   * @param {string} [ruleDescription] - Interaction type.\n   * @param {string[]} [providedText] - Feedback text to replace with.\n   */\n  var _replaceRuleInputPlaceholders = function(ruleDescription, providedText) {\n    // An example of rule description:\n    // \"is equal to {{a|NonnegativeInt}} and {{b|NonnegativeInt}}\"\n    // (from NumericInput).\n    var re = /{{[a-z]+[\\|](.*?)}}/ig;\n    // Matched result = Array[{{a|NonnegativeInt}}}, {{b|NonnegativeInt}}]\n    var placeholders = ruleDescription.match(re);\n    var textArray = [];\n    // Return as-is if string does not contain placeholders.\n    if (placeholders) {\n      // Replacing placeholders in ruleDescription with given text.\n      placeholders.forEach(function(placeholderElement, index) {\n        if (providedText[0] === '...') {\n          ruleDescription = ruleDescription.replace(placeholderElement, '...');\n        } else {\n          if (providedText.length !== placeholders.length) {\n            throw Error('# of feedback text(' + textArray.length +\n            ') is expected to match # of placeholders(' +\n            (placeholders.length) + ')');\n          }\n          ruleDescription = ruleDescription.replace(\n            placeholderElement, providedText[index].toString());\n        }\n      });\n    }\n    return ruleDescription;\n  };\n\n  // This function selects a rule from the dropdown,\n  // but does not set any of its input parameters.\n  var _selectRule = function(ruleElem, interactionId, ruleName) {\n    var ruleDescription = _getRuleDescription(interactionId, ruleName);\n    // Replace selectors with \"...\".\n    ruleDescription = _replaceRuleInputPlaceholders(ruleDescription, ['...']);\n    var ruleDescriptionInDropdown = ruleDescription;\n    var answerDescription = element(\n      by.css('.protractor-test-answer-description'));\n    expect(answerDescription.isDisplayed()).toBe(true);\n    answerDescription.click();\n    var ruleDropdownElement = element.all(by.cssContainingText(\n      '.select2-results__option', ruleDescriptionInDropdown)).first();\n    waitFor.visibilityOf(\n      ruleDropdownElement, 'Rule dropdown element takes too long to appear');\n    ruleDropdownElement.click();\n  };\n\n  // STATE GRAPH\n\n  this.deleteState = function(stateName) {\n    general.scrollToTop();\n    var nodeElement = explorationGraph.all(\n      by.cssContainingText('.protractor-test-node', stateName)).first();\n    waitFor.visibilityOf(\n      nodeElement,\n      'State ' + stateName + ' takes too long to appear or does not exist');\n    nodeElement.element(by.css('.protractor-test-delete-node')).click();\n    expect(confirmDeleteStateButton.isDisplayed());\n    confirmDeleteStateButton.click();\n    waitFor.invisibilityOf(\n      confirmDeleteStateButton, 'Deleting state takes too long');\n  };\n\n  // For this to work, there must be more than one name, otherwise the\n  // exploration overview will be disabled.\n  this.expectStateNamesToBe = function(names) {\n    stateNodes.map(function(stateElement) {\n      return stateNodeLabel(stateElement).getText();\n    }).then(function(stateNames) {\n      expect(stateNames.sort()).toEqual(names.sort());\n    });\n  };\n\n  // NOTE: if the state is not visible in the state graph this function will\n  // fail.\n  this.moveToState = function(targetName) {\n    general.scrollToTop();\n    stateNodes.map(function(stateElement) {\n      return stateNodeLabel(stateElement).getText();\n    }).then(function(listOfNames) {\n      var matched = false;\n      for (var i = 0; i < listOfNames.length; i++) {\n        if (listOfNames[i] === targetName) {\n          stateNodes.get(i).click();\n          matched = true;\n          // Wait to re-load the entire state editor.\n        }\n      }\n      if (!matched) {\n        throw Error(\n          'State ' + targetName + ' not found by editorMainTab.moveToState.');\n      }\n    });\n\n    var errorMessage = (\n      'Current state name is:' +\n      stateNameContainer.getAttribute('textContent') +\n      'instead of expected ' + targetName);\n    waitFor.textToBePresentInElement(\n      stateNameContainer, targetName, errorMessage);\n  };\n\n  this.setStateName = function(name) {\n    waitFor.invisibilityOf(\n      postTutorialPopover, 'Post-tutorial popover takes too long to disappear');\n    waitFor.elementToBeClickable(\n      stateNameContainer, 'State Name Container takes too long to appear');\n    stateNameContainer.click();\n    stateNameInput.clear();\n    stateNameInput.sendKeys(name);\n\n    waitFor.elementToBeClickable(\n      stateNameSubmitButton,\n      'State Name Submit button takes too long to be clickable');\n    stateNameSubmitButton.click();\n\n    // Wait for state name container to completely disappear\n    // and re-appear again.\n    waitFor.textToBePresentInElement(\n      stateNameContainer, name,\n      'Current state name is:' + stateNameContainer.getAttribute(\n        'textContent') + 'instead of expected ' + name);\n  };\n\n  this.expectCurrentStateToBe = function(name) {\n    waitFor.textToBePresentInElement(\n      stateNameContainer, name,\n      'Expecting current state ' + stateNameContainer.getAttribute(\n        'textContent') + ' to be ' + name);\n    expect(stateNameContainer.getAttribute('textContent')).toMatch(name);\n  };\n};\n\nexports.ExplorationEditorMainTab = ExplorationEditorMainTab;\n"
    },
    {
      "filename": "extensions/interactions/MathExpressionInput/protractor.js",
      "content": "// Copyright 2018 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview End-to-end testing utilities for Math Input Expression\n * interaction\n */\n\nvar objects = require('../../objects/protractor.js');\n\nvar mathExpressionInputTag = function(parentElement) {\n  return parentElement.element(by.tagName(\n    'oppia-interactive-math-expression-input'));\n};\n\nvar customizeInteraction = function(elem) {\n  // There is no customization option.\n};\n\nvar expectInteractionDetailsToMatch = function(elem) {\n  expect(\n    mathExpressionInputTag(elem).isPresent()\n  ).toBe(true);\n};\n\nvar submitAnswer = function(elem, answer) {\n  mathExpressionInputTag(elem).click();\n  var mathInputElem = element(by.css('.guppy_active'));\n  var submitAnswerButon = element(by.css(\n    '.protractor-test-submit-answer-button'));\n  // Input box is always empty.\n  mathInputElem.isPresent().then(function(present) {\n    if (present) {\n      mathInputElem.sendKeys(answer);\n      submitAnswerButon.click();\n    }\n  });\n};\n\nvar answerObjectType = 'UnicodeString';\n\nvar testSuite = [{\n  interactionArguments: [],\n  ruleArguments: ['IsMathematicallyEquivalentTo', '{x}^{3}'],\n  expectedInteractionDetails: [],\n  wrongAnswers: ['x', '3x', '2x^3'],\n  correctAnswers: ['x^3', 'xxx']\n}];\n\nexports.customizeInteraction = customizeInteraction;\nexports.expectInteractionDetailsToMatch = expectInteractionDetailsToMatch;\nexports.submitAnswer = submitAnswer;\nexports.answerObjectType = answerObjectType;\nexports.testSuite = testSuite;\n"
    },
    {
      "filename": "extensions/interactions/protractor.js",
      "content": "// Copyright 2014 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Clearing-house for protractor test utilities for interactions.\n */\n\n/* Each interaction's protractor file must implement the following:\n * customizeInteraction: a function that receives an element containing the\n *   interaction editor followed by some number of arguments used to customize\n *   the interaction in question (e.g options for the MultipleChoiceInput).\n * expectInteractionDetailsToMatch: a function that receives arguments\n *   describing the way the interaction is expected to look, and is run in the\n *   player to verify the interaction actually looks this way.\n * submitAnswer: a function that is sent a single 'answer' argument and should\n *   then use it to answer the interaction in this way, for example by\n *   selecting an option in MultipleChoiceInput.\n * answerObjectType: the name of the type of object returned by the interaction.\n * testSuite: an array of dictionaries each containing:\n * - interactionArguments: an array of arguments that will be splatted and sent\n *   (together with the editor element) to the interaction's\n *   customizeInteraction() function.\n * - ruleArguments: an array of arguments, the first of which should be the\n *   name of the rule to be used and the rest parameters for that rule.\n * - expectedInteractionDetails: an array of arguments that will be splatted and\n *   sent to expectInteractionDetailsToMatch when the interaction is being run\n *   in the player.\n * - wrongAnswers: an array of arguments that will be submitted in sequence via\n *   the interaction's submitAnswer() function; it will be verified that all\n *   these answers fail to satisfy the given rule.\n * - correctAnswers: likewise, but these should satisfy the rule.\n */\n\nvar INTERACTIONS = {\n  Continue: require('./Continue/protractor.js'),\n  EndExploration: require('./EndExploration/protractor.js'),\n  FractionInput: require('./FractionInput/protractor.js'),\n  GraphInput: require('./GraphInput/protractor.js'),\n  LogicProof: require('./LogicProof/protractor.js'),\n  MathExpressionInput: require('./MathExpressionInput/protractor.js'),\n  MultipleChoiceInput: require('./MultipleChoiceInput/protractor.js'),\n  NumericInput: require('./NumericInput/protractor.js'),\n  NumberWithUnits: require('./NumberWithUnits/protractor.js'),\n  TextInput: require('./TextInput/protractor.js')\n};\n\nvar getInteraction = function(interactionName) {\n  if (INTERACTIONS.hasOwnProperty(interactionName)) {\n    return INTERACTIONS[interactionName];\n  } else {\n    throw Error('Unknown interaction: ' + interactionName);\n  }\n};\n\nexports.INTERACTIONS = INTERACTIONS;\nexports.getInteraction = getInteraction;\n"
    }
  ],
  "questions": [],
  "golden_answers": [],
  "questions_generated": [
    "What is the primary goal of the issue described in the oppia_oppia repository?",
    "How many interactions are currently lacking e2e test coverage according to the issue checklist?",
    "What is the significance of referencing prior issues and pull requests (like #2731 and #4525) in the context of this issue?",
    "Why might a new contributor like @Shuayb1 face challenges in setting up the development environment for oppia_oppia?",
    "What role does the file core/tests/protractor/extensions.js play in the oppia_oppia repository?",
    "How does the issue description suggest handling the Set Input Interaction test specifically?"
  ],
  "golden_answers_generated": [
    "The primary goal of the issue is to improve end-to-end (e2e) test coverage for interactions within the oppia_oppia repository. Specifically, it aims to extend testing utilities to cover all non-inline interactions that are not currently tested in extensions/interactions/protractor.js.",
    "According to the issue checklist, there are eight interactions lacking e2e test coverage. These include Code Editor Interaction, Image Click Input Interaction, Interactive Map Interaction, Item Selection Input Interaction, Music Notes Interaction, Pencil Code Editor Interaction, and Set Input Interaction.",
    "Referencing prior issues and pull requests is significant because it provides contributors with examples of how similar tests have been implemented in the past. This can guide them in understanding the pattern and structure of tests required for the current issue, ensuring consistency and potentially speeding up the development process.",
    "A new contributor might face challenges in setting up the development environment for oppia_oppia due to complex dependencies, the need for specific versions of software (such as Python), or unfamiliarity with the setup instructions. The repository may have intricate requirements that are not immediately apparent to newcomers, leading to installation errors or configuration issues.",
    "The file core/tests/protractor/extensions.js is used for end-to-end testing of rich-text components and interactions in the oppia_oppia repository. It contains test cases that simulate user interactions with various components of the application to ensure they function correctly.",
    "The issue description assigns the task of writing the Set Input Interaction test to a specific contributor, @Shuayb1. This suggests a collaborative approach where specific contributors are responsible for particular interactions, likely to distribute the workload and utilize individual expertise or interest."
  ]
}