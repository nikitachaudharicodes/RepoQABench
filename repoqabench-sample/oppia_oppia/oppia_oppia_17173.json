{
  "repo_name": "oppia_oppia",
  "issue_id": "17173",
  "issue_description": "# opposite loading when in arabic\n\n### Describe the bug\n\nwhen u open oppia>parts of multiplications expression and then change the  language to arabic , the loading/ timer works in opposite direction as that of the loader\n\n### Steps To Reproduce\n\n1-> visit https://www.oppia.org/explore/R7WpsSfmDQPV?story_url_fragment=aria-wants-to-plant-a-garden&topic_url_fragment=multiplication&classroom_url_fragment=math&node_id=node_1\r\n\r\n2-> change language to arabic\r\n3->play the audio\n\n### Expected Behavior\n\nthe loader should also works from right to left\n\n### Screenshots/Videos\n\n![Screenshot (45)](https://user-images.githubusercontent.com/97456331/215309918-09d20df5-fb47-416f-878f-5e20273f368c.png)\r\n\n\n### What device are you using?\n\nDesktop\n\n### Operating System\n\nWindows\n\n### What browsers are you seeing the problem on?\n\nChrome\n\n### Browser version\n\n_No response_\n\n### Additional context\n\n_No response_",
  "issue_comments": [
    {
      "id": 1598113144,
      "user": "Uglycrown",
      "body": "### Hint for new contributors\r\nThe changes can be made to the following files in order to solve this issue:\r\noppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n\r\n/oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n\r\nPlease refer the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.)"
    },
    {
      "id": 1598113299,
      "user": "Uglycrown",
      "body": "@seanlip this can be marked as good first issue."
    },
    {
      "id": 1598474955,
      "user": "seanlip",
      "body": "Thanks @Uglycrown, this is done. "
    },
    {
      "id": 1648999447,
      "user": "v-a14",
      "body": "@seanlip is this issue still open ? \r\nAnd yes which loader are we talking about ? "
    },
    {
      "id": 1649002246,
      "user": "v-a14",
      "body": "![Screenshot_20230725_085649_Brave](https://github.com/oppia/oppia/assets/55106600/03d7b164-67cb-4342-baf6-dec48c9408e0)\r\nThis loading page ?"
    },
    {
      "id": 1650971173,
      "user": "Uglycrown",
      "body": "@v-a14 we are talking about the progress of the audio player, it's progress is moving left to right but we want it right to left --Thanks\r\n\r\n[Screencast from 26-07-23 10:09:28 AM IST.webm](https://github.com/oppia/oppia/assets/87015615/a28de710-a8d5-465f-bb22-1085b43c155d)\r\n\r\n"
    },
    {
      "id": 1655138182,
      "user": "cindy-qu",
      "body": "Hello, I am interested in helping contribute!\r\n\r\nThe changes to the following files can be made to resolve the issue.\r\n1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n`<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n                                **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n                                `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n                                `  (valueChange)=\"setProgress($event)\"`\r\n                                `  aria-label=\"audio-slider\">`\r\n            `</oppia-audio-slider>`\r\nExplanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n\r\n2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n`import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n`private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n`  isLanguageRTL(): boolean {`\r\n`    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n`  }`\r\nExplanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from. \r\n\r\nPlease see the attached screenrecording for the end result. Thanks!\r\n\r\n\r\nhttps://github.com/oppia/oppia/assets/109881408/51c23bc5-5964-4660-b859-b856a462cbb3\r\n\r\n\r\n"
    },
    {
      "id": 1655186041,
      "user": "Uglycrown",
      "body": "@cindy-qu assigned this issue to you, change looking good to me. Feel free to Open PR."
    },
    {
      "id": 1655186885,
      "user": "Ykumar1415",
      "body": "> Hello, I am interested in helping contribute!\r\n> \r\n> The changes to the following files can be made to resolve the issue.\r\n> \r\n> 1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n>    `<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n>    **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n>    `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n>    `  (valueChange)=\"setProgress($event)\"`\r\n>    `  aria-label=\"audio-slider\">`\r\n>    `</oppia-audio-slider>`\r\n>    Explanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n> 2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n>    `import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n>    `private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n>    `  isLanguageRTL(): boolean {`\r\n>    `    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n>    `  }`\r\n>    Explanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from.\r\n> \r\n> Please see the attached screenrecording for the end result. Thanks!\r\n> \r\n>  issuescreen_cq.mp4\r\n\r\n@cindy-qu I think it looks nice wait for review from @seanlip and @prafulbbandre . I am assigning this issue to you. Also before making pr confirm that in other languages it will work as expected."
    },
    {
      "id": 1655186898,
      "user": "Uglycrown",
      "body": "Please let me know the expected date of opening of PR. --Thanks"
    },
    {
      "id": 1655817852,
      "user": "cindy-qu",
      "body": "I will open a PR by EOD. Thanks!\r\nConfirmed it also works as expected when switching to other languages."
    },
    {
      "id": 1657192942,
      "user": "Uglycrown",
      "body": "Hi @cindy-qu Any Progress?"
    },
    {
      "id": 1657194152,
      "user": "cindy-qu",
      "body": "I am currently working on debugging a few failing tests that occurred when I tried to create a PR. I will need another day to work on it. Thanks!"
    },
    {
      "id": 1662681196,
      "user": "cindy-qu",
      "body": "> Hi @cindy-qu Any Progress?\r\n\r\nI just opened a PR here [https://github.com/oppia/oppia/pull/18730](https://github.com/oppia/oppia/pull/18730). Please let me know if there are any issues. Thanks!"
    },
    {
      "id": 1662694397,
      "user": "Uglycrown",
      "body": "> > Hi @cindy-qu Any Progress?\r\n> \r\n> I just opened a PR here #18730. Please let me know if there are any issues. Thanks!\r\n\r\nGreat @cindy-qu, lets wait for the review from the reviewers, looking good to me & let us know if you need help in anything. Thank you for your efforts!"
    }
  ],
  "text_context": "# opposite loading when in arabic\n\n### Describe the bug\n\nwhen u open oppia>parts of multiplications expression and then change the  language to arabic , the loading/ timer works in opposite direction as that of the loader\n\n### Steps To Reproduce\n\n1-> visit https://www.oppia.org/explore/R7WpsSfmDQPV?story_url_fragment=aria-wants-to-plant-a-garden&topic_url_fragment=multiplication&classroom_url_fragment=math&node_id=node_1\r\n\r\n2-> change language to arabic\r\n3->play the audio\n\n### Expected Behavior\n\nthe loader should also works from right to left\n\n### Screenshots/Videos\n\n![Screenshot (45)](https://user-images.githubusercontent.com/97456331/215309918-09d20df5-fb47-416f-878f-5e20273f368c.png)\r\n\n\n### What device are you using?\n\nDesktop\n\n### Operating System\n\nWindows\n\n### What browsers are you seeing the problem on?\n\nChrome\n\n### Browser version\n\n_No response_\n\n### Additional context\n\n_No response_\n\n### Hint for new contributors\r\nThe changes can be made to the following files in order to solve this issue:\r\noppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n\r\n/oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n\r\nPlease refer the guidance at https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#choosing-a-good-first-issue, please provide an explanation of what your PR will do (with names of files you're changing, what you plan to change in each file, etc.)\n\n@seanlip this can be marked as good first issue.\n\nThanks @Uglycrown, this is done. \n\n@seanlip is this issue still open ? \r\nAnd yes which loader are we talking about ? \n\n![Screenshot_20230725_085649_Brave](https://github.com/oppia/oppia/assets/55106600/03d7b164-67cb-4342-baf6-dec48c9408e0)\r\nThis loading page ?\n\n@v-a14 we are talking about the progress of the audio player, it's progress is moving left to right but we want it right to left --Thanks\r\n\r\n[Screencast from 26-07-23 10:09:28 AM IST.webm](https://github.com/oppia/oppia/assets/87015615/a28de710-a8d5-465f-bb22-1085b43c155d)\r\n\r\n\n\nHello, I am interested in helping contribute!\r\n\r\nThe changes to the following files can be made to resolve the issue.\r\n1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n`<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n                                **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n                                `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n                                `  (valueChange)=\"setProgress($event)\"`\r\n                                `  aria-label=\"audio-slider\">`\r\n            `</oppia-audio-slider>`\r\nExplanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n\r\n2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n`import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n`private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n`  isLanguageRTL(): boolean {`\r\n`    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n`  }`\r\nExplanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from. \r\n\r\nPlease see the attached screenrecording for the end result. Thanks!\r\n\r\n\r\nhttps://github.com/oppia/oppia/assets/109881408/51c23bc5-5964-4660-b859-b856a462cbb3\r\n\r\n\r\n\n\n@cindy-qu assigned this issue to you, change looking good to me. Feel free to Open PR.\n\n> Hello, I am interested in helping contribute!\r\n> \r\n> The changes to the following files can be made to resolve the issue.\r\n> \r\n> 1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n>    `<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n>    **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n>    `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n>    `  (valueChange)=\"setProgress($event)\"`\r\n>    `  aria-label=\"audio-slider\">`\r\n>    `</oppia-audio-slider>`\r\n>    Explanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n> 2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n>    `import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n>    `private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n>    `  isLanguageRTL(): boolean {`\r\n>    `    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n>    `  }`\r\n>    Explanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from.\r\n> \r\n> Please see the attached screenrecording for the end result. Thanks!\r\n> \r\n>  issuescreen_cq.mp4\r\n\r\n@cindy-qu I think it looks nice wait for review from @seanlip and @prafulbbandre . I am assigning this issue to you. Also before making pr confirm that in other languages it will work as expected.\n\nPlease let me know the expected date of opening of PR. --Thanks\n\nI will open a PR by EOD. Thanks!\r\nConfirmed it also works as expected when switching to other languages.\n\nHi @cindy-qu Any Progress?\n\nI am currently working on debugging a few failing tests that occurred when I tried to create a PR. I will need another day to work on it. Thanks!\n\n> Hi @cindy-qu Any Progress?\r\n\r\nI just opened a PR here [https://github.com/oppia/oppia/pull/18730](https://github.com/oppia/oppia/pull/18730). Please let me know if there are any issues. Thanks!\n\n> > Hi @cindy-qu Any Progress?\r\n> \r\n> I just opened a PR here #18730. Please let me know if there are any issues. Thanks!\r\n\r\nGreat @cindy-qu, lets wait for the review from the reviewers, looking good to me & let us know if you need help in anything. Thank you for your efforts!",
  "pr_link": "https://github.com/oppia/oppia/pull/18730",
  "code_context": [
    {
      "filename": "core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html",
      "content": "<div tabindex=\"0\" aria-label=\"audio menu\" class=\"audio-header\" *ngIf=\"isAudioBarAvailable()\"\n     [ngClass]=\"{'audio-header-margin': explorationPlayerModeIsActive}\" headroom>\n  <div *ngIf=\"audioBarIsExpanded\" class=\"audio-bar-expanded\" headroom>\n    <div class=\"audio-controls\" [ngClass]=\"{'audio-controls-margin': progressBarIsShown}\">\n      <div class=\"oppia-audio-header-control-buttons fx-row fx-main-center fx-cross-center\">\n        <div class=\"audio-header-control-icons\">\n          <a (click)=\"onBackwardButtonClicked()\">\n            <span class=\"oppia-replay-white-circle\" *ngIf=\"progressBarIsShown\">\n              <i class=\"fas fa-undo audio-undo-icon\"></i>\n              <span class=\"oppia-five-icon\">5</span>\n            </span>\n          </a>\n          <a (click)=\"onPlayButtonClicked()\" (keydown.enter)=\"onPlayButtonClicked()\"\n             [ngbTooltip]=\"!isAudioAvailableInCurrentLanguage() ? ('I18N_PLAYER_AUDIO_NOT_AVAILABLE_IN' | translate:{languageDescription:getCurrentAudioLanguageDescription()}) : ''\"\n             placement=\"right\">\n            <i class=\"fas oppia-audio-controls-button-icon\" tabindex=\"0\" aria-label=\"Press enter to Listen to the Lesson\"\n               [ngClass]=\"{'fa-ellipsis-h': audioLoadingIndicatorIsShown, 'fa-play-circle e2e-test-play-circle': !isAudioPlaying(), 'fa-pause-circle e2e-test-pause-circle': isAudioPlaying(), 'audio-controls-audio-not-available': !isAudioAvailableInCurrentLanguage() || audioIsLoading}\">\n            </i>\n          </a>\n          <a (click)=\"onForwardButtonClicked()\">\n            <span class=\"oppia-replay-white-circle oppia-replay-white-circle-forward\" *ngIf=\"progressBarIsShown\">\n              <i class=\"fas fa-undo audio-undo-icon audio-undo-icon-forward\"></i>\n              <span class=\"oppia-five-icon oppia-five-icon-forward\">5</span>\n            </span>\n          </a>\n        </div>\n        <div class=\"slider-section\" *ngIf=\"progressBarIsShown\">\n          <div *ngIf=\"audioLoadingIndicatorIsShown\">\n            <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n          </div>\n          <div *ngIf=\"!audioLoadingIndicatorIsShown\">\n            <oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"\n                                [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"\n                                [max]=\"audioPlayerService.getAudioDuration()\"\n                                (valueChange)=\"setProgress($event)\"\n                                aria-label=\"audio-slider\">\n            </oppia-audio-slider>\n          </div>\n          <span *ngIf=\"audioLoadingIndicatorIsShown && !doesCurrentAudioTranslationNeedUpdate()\"\n                class=\"audio-controls-message\">\n            {{ 'I18N_PLAYER_AUDIO_LOADING_AUDIO' | translate }}\n          </span>\n          <span *ngIf=\"isAudioAvailableInCurrentLanguage() && doesCurrentAudioTranslationNeedUpdate()\"\n                class=\"audio-controls-message\">\n            {{ 'I18N_PLAYER_AUDIO_MIGHT_NOT_MATCH_TEXT' | translate }}\n          </span>\n          <!--Filler space for message-->\n          <span class=\"audio-controls-message\">&zwnj;</span>\n        </div>\n        <div class=\"oppia-audio-header-select\">\n          <select class=\"audio-language-select e2e-test-audio-lang-select\"\n                  [(ngModel)]=\"selectedLanguage.value\"\n                  (change)=\"onNewLanguageSelected()\">\n            <option *ngFor=\"let opt of languagesInExploration\" [value]=\"opt.value\">{{ opt.displayed }}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <div class=\"audio-collapse-button audio-toggle-button\"\n         *ngIf=\"audioBarIsExpanded\"\n         (click)=\"collapseAudioBar()\"\n         aria-label=\"Audio menu collapse\"\n         [ngClass]=\"{'audio-controls-margin': progressBarIsShown}\">\n      <i class=\"fas fa-sort-up\"></i>\n    </div>\n  </div>\n  <div class=\"audio-expand-button audio-toggle-button\"\n       *ngIf=\"!audioBarIsExpanded\"\n       (click)=\"expandAudioBar()\"\n       (keydown.enter)=\"expandAudioBar()\"\n       aria-label=\"Audio menu expand\">\n    <div class=\"container e2e-test-audio-bar\">\n      <div class=\"row\">\n        <div class=\"col-lg-6 px-0 mt-1 ml-2\">\n          <span class=\"audio-expand-button-text\">\n            {{ 'I18N_PLAYER_AUDIO_EXPAND_TEXT' | translate }}\n          </span>\n        </div>\n        <div class=\"col-lg-3 col-6 px-0 mt-lg-2\">\n          <i tabindex=\"0\" aria-label=\"headphone icon\" class=\"audio-expand-icon fas fa-headphones-alt\"></i>\n        </div>\n        <div class=\"col-lg-2 col-6 px-0 mt-lg-1\">\n          <i tabindex=\"0\" aria-label=\"Press Enter to expand the audio menu\" class=\"audio-expand-icon fas fa-sort-down\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  .fa-play-circle:before {\n    font-size: 1.7em;\n  }\n\n  .fa-pause-circle:before {\n    font-size: 1.7em;\n  }\n\n  .mat-progress-bar {\n    height: 5px;\n  }\n\n  .mat-progress-bar .mat-progress-bar-fill {\n    background-color: #009688;\n  }\n\n  .mat-progress-bar-primary:after {\n    background-color: #009688;\n    border-color: #009688;\n  }\n\n  .audio-header .fa-sort-up, .audio-header .fa-sort-down {\n    transform: translateY(-2px);\n  }\n\n  .audio-expand-button {\n    height: 45px;\n    width: 150px;\n  }\n\n  @media screen and (max-width: 991px) {\n    .audio-expand-button {\n      height: 32px;\n      width: 90px;\n    }\n    .audio-expand-button-text {\n      display: none;\n    }\n  }\n\n  .audio-expand-icon {\n    font-size: 25px;\n  }\n\n  .audio-collapse-button {\n    height: 10px;\n    position: absolute;\n    top: 44px;\n    transition: top 200ms linear;\n    width: 30px;\n  }\n\n  .audio-toggle-button {\n    background-color: #0d48a1;\n    border-bottom-left-radius: 15px;\n    border-bottom-right-radius: 15px;\n    color: white;\n    display: block;\n    font-size: 12px;\n    margin: 0 auto;\n    position: sticky;\n    text-align: center;\n  }\n\n  .oppia-audio-controls-button-icon {\n    color: white;\n    font-size: 1.4em;\n    min-width: 6%;\n    text-align: right;\n    vertical-align: middle;\n  }\n  .oppia-audio-header-control-buttons {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    width: 700px;\n  }\n  .oppia-replay-white-circle {\n    display: inline-block;\n    font-size: 1.4em;\n    height: 36px;\n    padding: 5px;\n    position: relative;\n    vertical-align: middle;\n    width: 36px;\n  }\n  .audio-undo-icon {\n    color: #fff;\n    left: 50%;\n    padding: 0;\n    position: absolute;\n    top: 7px;\n    transform: translateX(-43%);\n  }\n  .audio-undo-icon-forward {\n    transform: scaleX(-1) translateX(43%);\n  }\n  .oppia-audio-header-select {\n    transform: translateY(5px);\n  }\n  .oppia-five-icon {\n    bottom: 7px;\n    color: #fff;\n    font-size: 10px;\n    font-weight: 800;\n    left: 3px;\n    position: relative;\n  }\n  .oppia-five-icon-forward {\n    left: 0;\n  }\n  .audio-controls-button-image {\n    height: 21px;\n    width: 21px;\n  }\n\n  .audio-controls-audio-not-available {\n    color: gray;\n  }\n\n  .audio-controls {\n    align-items: center;\n    background-color: #0d48a1;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    height: 70px;\n    justify-content: center;\n    padding: 0 4px;\n    transition: margin-top 200ms linear;\n    width: 100%;\n  }\n\n  .audio-controls.ng-enter,\n  .audio-controls.ng-leave {\n    position: absolute;\n    -webkit-transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -moz-transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -ms-transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -o-transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n  }\n\n  .audio-controls.ng-enter {\n    top: -44px;\n  }\n\n  .audio-controls.ng-enter.audio-controls.ng-enter-active {\n    top: 0;\n  }\n\n  .audio-controls.ng-leave {\n    top: 0;\n  }\n\n  .audio-controls.ng-leave.audio-controls.ng-leave-active {\n    top: -44px;\n  }\n\n  .audio-controls-message {\n    color: white;\n    font-size: 10px;\n    font-style: italic;\n    vertical-align: 29px;\n  }\n\n  .audio-header {\n    left: 0;\n    position: fixed;\n    text-align: center;\n    top: 126px;\n    width: 100%;\n    z-index: 100;\n  }\n\n  .audio-header-margin {\n    top: 3.5em;\n  }\n\n  @media(max-width: 768px) {\n    .audio-header {\n      top: 3.5em;\n      transition: top 200ms linear;\n    }\n\n    .audio-header.headroom--unpinned {\n      top: 0;\n    }\n  }\n  .audio-language-select {\n    border-radius: 9px;\n    font-size: 15px;\n    margin-bottom: 15px;\n    margin-left: 5px;\n    padding-left: 2px;\n    padding-top: 2px;\n  }\n\n  .slider-section {\n    line-height: 0px;\n    transform: translateY(10px);\n  }\n\n  .audio-bar-nav-up {\n    margin-top: -186px;\n  }\n\n  .audio-bar-nav-hidden {\n    margin-top: -270px;\n  }\n\n  @media screen and (max-width: 370px) {\n    .oppia-audio-header-control-buttons {\n      justify-content: space-evenly;\n    }\n    .oppia-replay-white-circle {\n      padding: 5px;\n      width: 26px;\n    }\n    .oppia-audio-header-select select {\n      width: 100%;\n    }\n    .audio-header-control-icons {\n      order: 2;\n    }\n    .slider-section {\n      order: 1;\n      width: 90%;\n    }\n    .oppia-audio-header-select {\n      order: 3;\n      width: 50%;\n    }\n    .audio-collapse-button {\n      top: 80px;\n    }\n    .audio-controls {\n      height: 80px;\n    }\n  }\n\n  @media screen and (max-width: 550px) {\n    .audio-controls {\n      height: auto;\n      margin-top: -1px;\n      padding: 20px 0;\n      padding-right: 20px;\n    }\n    .slider-section {\n      transform: translateY(4px);\n    }\n    .audio-collapse-button {\n      top: 98px;\n    }\n    .audio-header-control-icons {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    }\n    .oppia-audio-controls-button-icon {\n      font-size: 1.1em;\n      margin: 0 20px;\n      position: relative;\n      top: 4px;\n    }\n  }\n</style>\n"
    },
    {
      "filename": "core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.spec.ts",
      "content": "// Copyright 2021 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the 'License');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS-IS' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unit tests for the AudioBarComponent.\n */\n\nimport { EventEmitter, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ComponentFixture, discardPeriodicTasks, fakeAsync, flush, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { MockTranslatePipe } from 'tests/unit-test-utils';\n\nimport { AudioBarComponent } from 'pages/exploration-player-page/layout-directives/audio-bar.component';\nimport { Voiceover } from 'domain/exploration/voiceover.model';\nimport { AssetsBackendApiService } from 'services/assets-backend-api.service';\nimport { AudioBarStatusService } from 'services/audio-bar-status.service';\nimport { AudioPlayerService } from 'services/audio-player.service';\nimport { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';\nimport { AudioPreloaderService } from '../services/audio-preloader.service';\nimport { AudioTranslationLanguageService } from '../services/audio-translation-language.service';\nimport { AudioTranslationManagerService } from '../services/audio-translation-manager.service';\nimport { PlayerPositionService } from '../services/player-position.service';\nimport { ContextService } from 'services/context.service';\nimport { I18nLanguageCodeService } from 'services/i18n-language-code.service';\n\ndescribe('Audio Bar Component', () => {\n  let component: AudioBarComponent;\n  let fixture: ComponentFixture<AudioBarComponent>;\n\n  let assetsBackendApiService: AssetsBackendApiService;\n  let audioBarStatusService: AudioBarStatusService;\n  let audioPlayerService: AudioPlayerService;\n  let audioPreloaderService: AudioPreloaderService;\n  let audioTranslationLanguageService: AudioTranslationLanguageService;\n  let audioTranslationManagerService: AudioTranslationManagerService;\n  let autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService;\n  let playerPositionService: PlayerPositionService;\n  let contextService: ContextService;\n  let i18nLanguageCodeService: I18nLanguageCodeService;\n\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [\n        AudioBarComponent,\n        MockTranslatePipe\n      ],\n      providers: [],\n      schemas: [NO_ERRORS_SCHEMA]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AudioBarComponent);\n    component = fixture.componentInstance;\n    audioPlayerService = TestBed.inject(AudioPlayerService);\n    audioBarStatusService = TestBed.inject(AudioBarStatusService);\n    audioTranslationLanguageService = TestBed.inject(\n      AudioTranslationLanguageService);\n    audioPreloaderService = TestBed.inject(AudioPreloaderService);\n    assetsBackendApiService = TestBed.inject(AssetsBackendApiService);\n    audioTranslationManagerService = TestBed.inject(\n      AudioTranslationManagerService);\n    autogeneratedAudioPlayerService = TestBed.inject(\n      AutogeneratedAudioPlayerService);\n    playerPositionService = TestBed.inject(PlayerPositionService);\n    contextService = TestBed.inject(ContextService);\n    i18nLanguageCodeService = TestBed.inject(I18nLanguageCodeService);\n\n    fixture.detectChanges();\n  });\n  beforeEach(() => {\n    spyOn(audioBarStatusService, 'markAudioBarExpanded').and.callThrough();\n    spyOn(audioBarStatusService, 'markAudioBarCollapsed').and.callThrough();\n    spyOn(contextService, 'getExplorationId').and.returnValue('exp1');\n  });\n\n  afterEach(() => {\n    component.ngOnDestroy();\n  });\n\n  it('should set secondary audio translations when audio bar ' +\n    'is opened and audio is playing', fakeAsync(() => {\n    let params = {\n      audioTranslations: {},\n      componentName: 'feedback',\n      html: ''\n    };\n    let mockOnAutoplayAudioEventEmitter = new EventEmitter();\n    spyOnProperty(audioPlayerService, 'onAutoplayAudio')\n      .and.returnValue(mockOnAutoplayAudioEventEmitter);\n    let secondaryTranslaionsSpy = spyOn(\n      audioTranslationManagerService, 'setSecondaryAudioTranslations')\n      .and.callThrough();\n\n    component.ngOnInit();\n    component.expandAudioBar();\n    component.isPaused = false;\n    fixture.detectChanges();\n\n    mockOnAutoplayAudioEventEmitter.emit(params);\n    flush();\n    discardPeriodicTasks();\n    fixture.detectChanges();\n\n    expect(secondaryTranslaionsSpy).toHaveBeenCalledWith(\n      params.audioTranslations, params.html, params.componentName);\n  }));\n\n  it('should set current time when calling \\'setProgress\\'', () => {\n    // This time period is used to set progress\n    // when user pulls the drag button in audio bar.\n    let param = {\n      value: 100\n    };\n    let currentTimeSpy = spyOn(\n      audioPlayerService, 'setCurrentTime').and.callThrough();\n\n    component.setProgress(param);\n\n    expect(currentTimeSpy).toHaveBeenCalledWith(100);\n  });\n\n  it('should check whether the auto generated language ' +\n    'code is selected', () => {\n    let autoGeneratedLanguageSpy = spyOn(\n      audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n      .and.returnValue(false);\n    let result = component.isAutogeneratedLanguageCodeSelected();\n\n    expect(result).toBe(false);\n    expect(autoGeneratedLanguageSpy).toHaveBeenCalled();\n  });\n\n  it('should check if the audio bar is available', () => {\n    // Audio bar is only accessible if the number of\n    // available languages are greater than one.\n    component.languagesInExploration = [\n      {\n        value: 'en',\n        displayed: 'english'\n      }, {\n        value: 'es',\n        displayed: 'spanish'\n      }\n    ];\n\n    let result = component.isAudioBarAvailable();\n    expect(result).toBe(true);\n\n    component.languagesInExploration = [];\n    result = component.isAudioBarAvailable();\n    expect(result).toBe(false);\n  });\n\n  it('should return true if the selected language is RTL', () => {\n    spyOn(i18nLanguageCodeService, 'isCurrentLanguageRTL').and.returnValue(\n      true);\n\n    expect(component.isLanguageRTL()).toBe(true);\n  });\n\n  it('should return false if the selected language is not RTL', () => {\n    spyOn(i18nLanguageCodeService, 'isCurrentLanguageRTL').and.returnValue(\n      false);\n\n    expect(component.isLanguageRTL()).toBe(false);\n  });\n\n  it('should forward audio with time interval of five seconds ' +\n    'when audio forward button is clicked', () => {\n    let forwardSpy = spyOn(audioPlayerService, 'forward').and.callThrough();\n\n    component.onForwardButtonClicked();\n\n    expect(forwardSpy).toHaveBeenCalledWith(5);\n  });\n\n  it('should rewind audio with time interval of five seconds ' +\n    'when audio rewind button is clicked', () => {\n    let rewindSpy = spyOn(audioPlayerService, 'rewind').and.callThrough();\n\n    component.onBackwardButtonClicked();\n\n    expect(rewindSpy).toHaveBeenCalledWith(5);\n  });\n\n  it('should expand audio bar when clicking expand button', () => {\n    // Setting audio bar in collapsed view.\n    component.audioBarIsExpanded = false;\n    component.expandAudioBar();\n    expect(component.audioBarIsExpanded).toBe(true);\n  });\n\n  it('should collapse audio bar when clicking expand button', () => {\n    // Setting audio bar in expanded view.\n    component.audioBarIsExpanded = true;\n    component.collapseAudioBar();\n    expect(component.audioBarIsExpanded).toBe(false);\n  });\n\n  it('should return selected audio language code', () => {\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n      .and.returnValue('en');\n    let result = component.getCurrentAudioLanguageCode();\n    expect(result).toBe('en');\n  });\n\n  it('should return selected audio language description', () => {\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageDescription')\n      .and.returnValue('description');\n    let result = component.getCurrentAudioLanguageDescription();\n    expect(result).toBe('description');\n  });\n\n  it('should return voiceovers in selected language', () => {\n    let audioTranslation = {\n      en: Voiceover.createFromBackendDict({\n        filename: 'audio-en.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      }),\n      es: Voiceover.createFromBackendDict({\n        filename: 'audio-es.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      })\n    };\n    spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n      .and.returnValue(audioTranslation);\n    // Setting selected language to be 'en'.\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n      .and.returnValue('en');\n\n    let result = component.getVoiceoverInCurrentLanguage();\n    expect(result).toBe(audioTranslation.en);\n  });\n\n  it('should check whether the audio is playing currently', () => {\n    let isPlayingSpy = spyOn(\n      audioPlayerService, 'isPlaying').and.returnValue(false);\n    let result = component.isAudioPlaying();\n\n    expect(result).toBe(false);\n    expect(isPlayingSpy).toHaveBeenCalled();\n  });\n\n  it('should check whether the audio is selected by ' +\n    'auto generated language code', () => {\n    let autogeneratedLanguageSpy = spyOn(\n      audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n      .and.returnValue(false);\n    let result = component.isAutogeneratedLanguageCodeSelected();\n\n    expect(result).toBe(false);\n    expect(autogeneratedLanguageSpy).toHaveBeenCalled();\n  });\n\n  it('should check if the audio is available in selected language', () => {\n    let audioTranslation = {\n      en: Voiceover.createFromBackendDict({\n        filename: 'audio-en.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      }),\n      es: Voiceover.createFromBackendDict({\n        filename: 'audio-es.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      })\n    };\n    spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n      .and.returnValue(audioTranslation);\n    // Setting selected language to be 'en'.\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n      .and.returnValue('en');\n\n    let result = component.isAudioAvailableInCurrentLanguage();\n    expect(result).toBe(true);\n  });\n\n  it('should return true if the selected audio translation ' +\n    'needs to be updated which is not auto generated language code', () => {\n    let audioTranslation = {\n      en: Voiceover.createFromBackendDict({\n        filename: 'audio-en.mp3',\n        file_size_bytes: 0.5,\n        needs_update: true,\n        duration_secs: 0.5\n      }),\n      es: Voiceover.createFromBackendDict({\n        filename: 'audio-es.mp3',\n        file_size_bytes: 0.5,\n        needs_update: true,\n        duration_secs: 0.5\n      })\n    };\n    spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n      .and.returnValue(audioTranslation);\n    // Setting selected language to be 'en'.\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n      .and.returnValue('en');\n\n    let result = component.doesCurrentAudioTranslationNeedUpdate();\n\n    expect(result).toBe(true);\n  });\n\n  it('should not check whether the auto generated audio ' +\n    'language code is upto to date', () => {\n    spyOn(\n      audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n      .and.returnValue(true);\n\n    let result = component.doesCurrentAudioTranslationNeedUpdate();\n\n    expect(result).toBe(false);\n  });\n\n  describe('on clicking play pause button ', () => {\n    it('should play auto generated audio translation when ' +\n      'play button is clicked', () => {\n      // Setting auto generated langugae to be true.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(true);\n      // Setting audio is playing to be false.\n      spyOn(autogeneratedAudioPlayerService, 'isPlaying')\n        .and.returnValue(false);\n      spyOn(audioTranslationLanguageService, 'getSpeechSynthesisLanguageCode')\n        .and.returnValue('');\n      spyOn(\n        audioTranslationManagerService,\n        'getCurrentHtmlForAutogeneratedSequentialAudio'\n      ).and.returnValue('<p>test</p>');\n      let playSpy = spyOn(autogeneratedAudioPlayerService, 'play')\n        .and.callFake((html, language, cb) => {\n          cb();\n        });\n\n      component.onPlayButtonClicked();\n      expect(playSpy).toHaveBeenCalled();\n    });\n\n    it('should throw error if speech synthesis language code ' +\n      'is null', () => {\n      // Setting auto generated langugae to be true.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(true);\n      // Setting audio is playing to be false.\n      spyOn(autogeneratedAudioPlayerService, 'isPlaying')\n        .and.returnValue(false);\n      spyOn(audioTranslationLanguageService, 'getSpeechSynthesisLanguageCode')\n        .and.returnValue(null);\n      spyOn(autogeneratedAudioPlayerService, 'play')\n        .and.callFake((html, language, cb) => {\n          cb();\n        });\n\n      expect(() => {\n        component.onPlayButtonClicked();\n      }).toThrowError(\n        'speechSynthesisLanguageCode cannot be null at this point.');\n    });\n\n    it('should pause auto generated audio translation when ' +\n      'pause button is clicked', () => {\n      // Setting auto generated langugae to be true.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(true);\n      // Setting audio is playing to be true.\n      spyOn(autogeneratedAudioPlayerService, 'isPlaying')\n        .and.returnValue(true);\n      let pauseSpy = spyOn(autogeneratedAudioPlayerService, 'cancel')\n        .and.callThrough();\n\n      component.onPlayButtonClicked();\n      expect(pauseSpy).toHaveBeenCalled();\n    });\n\n    it('should play uploaded audio translation when ' +\n      'play button is clicked and when tracks are loaded', () => {\n      let audioTranslation = {\n        en: Voiceover.createFromBackendDict({\n          filename: 'audio-en.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        }),\n        es: Voiceover.createFromBackendDict({\n          filename: 'audio-es.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        })\n      };\n      spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n        .and.returnValue(audioTranslation);\n      // Setting selected language to be 'en'.\n      spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n        .and.returnValue('en');\n      // Setting auto generated langugae to be false.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(false);\n      // Setting audio is playing to be true.\n      spyOn(audioPlayerService, 'isPlaying')\n        .and.returnValue(false);\n      // Settings audio tracks loaded to be true.\n      spyOn(audioPlayerService, 'isTrackLoaded').and.returnValue(true);\n      let playSpy = spyOn(audioPlayerService, 'play')\n        .and.callThrough();\n\n      component.onPlayButtonClicked();\n      expect(playSpy).toHaveBeenCalled();\n    });\n\n    it('should load audio track and play audio when ' +\n      'play button is clicked', () => {\n      let audioTranslation = {\n        en: Voiceover.createFromBackendDict({\n          filename: 'audio-en.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        }),\n        es: Voiceover.createFromBackendDict({\n          filename: 'audio-es.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        })\n      };\n      spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n        .and.returnValue(audioTranslation);\n      // Setting selected language to be 'en'.\n      spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n        .and.returnValue('en');\n      // Setting auto generated langugae to be false.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(false);\n      // Setting audio is playing to be true.\n      spyOn(audioPlayerService, 'isPlaying')\n        .and.returnValue(false);\n      // Settings audio tracks loaded to be false.\n      spyOn(audioPlayerService, 'isTrackLoaded').and.returnValue(false);\n      let loadAndPlaySpy = spyOn(component, 'loadAndPlayAudioTranslation')\n        .and.returnValue();\n      spyOn(playerPositionService, 'getCurrentStateName')\n        .and.returnValue('Start');\n      spyOn(audioPreloaderService, 'restartAudioPreloader')\n        .and.returnValue();\n\n      component.onPlayButtonClicked();\n      expect(loadAndPlaySpy).toHaveBeenCalled();\n    });\n\n    it('should pause uploaded audio translation when ' +\n      'pause button is clicked', () => {\n      let audioTranslation = {\n        en: Voiceover.createFromBackendDict({\n          filename: 'audio-en.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        }),\n        es: Voiceover.createFromBackendDict({\n          filename: 'audio-es.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        })\n      };\n      spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n        .and.returnValue(audioTranslation);\n      // Setting selected language to be 'en'.\n      spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n        .and.returnValue('en');\n      // Setting auto generated langugae to be false.\n      spyOn(\n        audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n        .and.returnValue(false);\n      // Setting audio is playing to be true.\n      spyOn(audioPlayerService, 'isPlaying')\n        .and.returnValue(true);\n      let pauseSpy = spyOn(audioPlayerService, 'pause')\n        .and.callThrough();\n\n      component.onPlayButtonClicked();\n      expect(pauseSpy).toHaveBeenCalled();\n    });\n\n    it('should load audio track and play audio ' +\n      'which are stored in cache', fakeAsync(() => {\n      let audioTranslation = {\n        en: Voiceover.createFromBackendDict({\n          filename: 'audio-en.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        }),\n        es: Voiceover.createFromBackendDict({\n          filename: 'audio-es.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        })\n      };\n      spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n        .and.returnValue(audioTranslation);\n      // Setting selected language to be 'en'.\n      spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n        .and.returnValue('en');\n      spyOn(audioPreloaderService, 'setMostRecentlyRequestedAudioFilename')\n        .and.callThrough();\n      // Setting cached value to be true.\n      spyOn(assetsBackendApiService, 'isCached').and.returnValue(true);\n      spyOn(audioPlayerService, 'loadAsync').and.returnValue(Promise.resolve());\n      let playCacheAudioSpy = spyOn(component, 'playCachedAudioTranslation')\n        .and.callThrough();\n      let playSpy = spyOn(audioPlayerService, 'play')\n        .and.callThrough();\n\n      component.loadAndPlayAudioTranslation();\n      tick();\n      discardPeriodicTasks();\n\n      expect(playCacheAudioSpy).toHaveBeenCalled();\n      expect(playSpy).toHaveBeenCalled();\n    }));\n\n    it('should restart audio track if audio is not' +\n      'stored in cache', fakeAsync(() => {\n      let audioTranslation = {\n        en: Voiceover.createFromBackendDict({\n          filename: 'audio-en.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        }),\n        es: Voiceover.createFromBackendDict({\n          filename: 'audio-es.mp3',\n          file_size_bytes: 0.5,\n          needs_update: false,\n          duration_secs: 0.5\n        })\n      };\n      spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n        .and.returnValue(audioTranslation);\n      // Setting selected language to be 'en'.\n      spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n        .and.returnValue('en');\n      spyOn(audioPreloaderService, 'setMostRecentlyRequestedAudioFilename')\n        .and.callThrough();\n      // Setting cached value to be true.\n      spyOn(assetsBackendApiService, 'isCached').and.returnValue(false);\n      spyOn(playerPositionService, 'getCurrentStateName').and.returnValue(\n        'Start');\n      let restartAudioSpy = spyOn(\n        audioPreloaderService, 'restartAudioPreloader').and.returnValue();\n\n      component.loadAndPlayAudioTranslation();\n      tick();\n\n      expect(restartAudioSpy).toHaveBeenCalled();\n    }));\n  });\n\n  it('should play audio from cache after finishing loading', () => {\n    spyOn(\n      audioPreloaderService, 'getMostRecentlyRequestedAudioFilename')\n      .and.returnValue('audio-en.mp3');\n    component.audioLoadingIndicatorIsShown = true;\n    let playCacheAudioSpy = spyOn(component, 'playCachedAudioTranslation');\n\n    component.onFinishedLoadingAudio('audio-en.mp3');\n    expect(playCacheAudioSpy).toHaveBeenCalled();\n  });\n\n  it('should restart audio bar after selecting a new language', () => {\n    component.languagesInExploration = [\n      {\n        value: 'en',\n        displayed: 'english'\n      }, {\n        value: 'es',\n        displayed: 'spanish'\n      }\n    ];\n    component.selectedLanguage.value = 'en';\n    let audioTranslation = {\n      en: Voiceover.createFromBackendDict({\n        filename: 'audio-en.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      }),\n      es: Voiceover.createFromBackendDict({\n        filename: 'audio-es.mp3',\n        file_size_bytes: 0.5,\n        needs_update: false,\n        duration_secs: 0.5\n      })\n    };\n\n    spyOn(playerPositionService, 'getCurrentStateName')\n      .and.returnValue('Start');\n    spyOn(\n      audioTranslationLanguageService, 'isAutogeneratedLanguageCodeSelected')\n      .and.returnValue(false);\n    spyOn(audioTranslationLanguageService, 'setCurrentAudioLanguageCode')\n      .and.callThrough();\n    spyOn(audioTranslationManagerService, 'getCurrentAudioTranslations')\n      .and.returnValue(audioTranslation);\n    // Setting selected language to be 'en'.\n    spyOn(audioTranslationLanguageService, 'getCurrentAudioLanguageCode')\n      .and.returnValue('en');\n    let languageSetSpy = spyOn(\n      audioPreloaderService, 'setMostRecentlyRequestedAudioFilename')\n      .and.callThrough();\n    let restartAudioBarSpy = spyOn(\n      audioPreloaderService, 'restartAudioPreloader')\n      .and.returnValue();\n\n    component.onNewLanguageSelected();\n    expect(languageSetSpy).toHaveBeenCalledWith('audio-en.mp3');\n    expect(restartAudioBarSpy).toHaveBeenCalled();\n  });\n\n  it('should throw error if language code is invalid', () => {\n    component.selectedLanguage.value = null;\n\n    expect(() => {\n      component.onNewLanguageSelected();\n    }).toThrowError('Expected a valid language code.');\n  });\n});\n"
    },
    {
      "filename": "core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts",
      "content": "// Copyright 2021 The Oppia Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Component for a set of audio controls for a specific\n * audio translation in the learner view.\n */\n\nimport { Component } from '@angular/core';\nimport { downgradeComponent } from '@angular/upgrade/static';\nimport { Voiceover } from 'domain/exploration/voiceover.model';\nimport { Subscription } from 'rxjs';\nimport { AssetsBackendApiService } from 'services/assets-backend-api.service';\nimport { AudioBarStatusService } from 'services/audio-bar-status.service';\nimport { AudioPlayerService, AutoPlayAudioEvent } from 'services/audio-player.service';\nimport { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';\nimport { ContextService } from 'services/context.service';\nimport { SiteAnalyticsService } from 'services/site-analytics.service';\nimport { AudioPreloaderService } from '../services/audio-preloader.service';\nimport { AudioTranslationLanguageService, ExplorationLanguageInfo } from '../services/audio-translation-language.service';\nimport { AudioTranslationManagerService } from '../services/audio-translation-manager.service';\nimport { PlayerPositionService } from '../services/player-position.service';\nimport { I18nLanguageCodeService } from 'services/i18n-language-code.service';\n\n@Component({\n  selector: 'oppia-audio-bar',\n  templateUrl: './audio-bar.component.html'\n})\nexport class AudioBarComponent {\n  lastScrollTop: number = 0;\n  isPaused: boolean = true;\n  directiveSubscriptions: Subscription = new Subscription();\n  languagesInExploration: ExplorationLanguageInfo[];\n  audioBarIsExpanded: boolean = false;\n  progressBarIsShown: boolean = false;\n  audioLoadingIndicatorIsShown: boolean = false;\n  explorationPlayerModeIsActive: boolean;\n  // Value may be null if the language is not available.\n  selectedLanguage: { value: string | null };\n\n  constructor(\n    private assetsBackendApiService: AssetsBackendApiService,\n    private audioBarStatusService: AudioBarStatusService,\n    private audioPlayerService: AudioPlayerService,\n    private audioPreloaderService: AudioPreloaderService,\n    private audioTranslationLanguageService: AudioTranslationLanguageService,\n    private audioTranslationManagerService: AudioTranslationManagerService,\n    private autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService,\n    private contextService: ContextService,\n    private playerPositionService: PlayerPositionService,\n    private I18nLanguageCodeService: I18nLanguageCodeService,\n    private siteAnalyticsService: SiteAnalyticsService\n  ) {\n    this.explorationPlayerModeIsActive =\n      this.contextService.isInExplorationPlayerPage();\n    this.languagesInExploration = this.audioTranslationLanguageService\n      .getLanguageOptionsForDropdown();\n    this.selectedLanguage = {\n      value: this.getCurrentAudioLanguageCode()\n    };\n  }\n\n  ngOnInit(): void {\n    this.directiveSubscriptions.add(\n      this.audioPlayerService.onAutoplayAudio.subscribe(\n        (params: AutoPlayAudioEvent) => {\n          if (this.audioBarIsExpanded) {\n            this.audioPlayerService.stop();\n            this.autogeneratedAudioPlayerService.cancel();\n\n            // We use a timeout to allow for any previous audio to have\n            // their 'onend' callback called. This is primarily used to\n            // address delays with autogenerated audio callbacks.\n            setTimeout(() => {\n              if (params) {\n                this.audioTranslationManagerService\n                  .setSecondaryAudioTranslations(\n                    params.audioTranslations,\n                    params.html,\n                    params.componentName\n                  );\n                if (!this.isPaused) {\n                  this.onPlayButtonClicked();\n                }\n              }\n            }, 100);\n          }\n        }\n      ));\n    this.audioBarIsExpanded = false;\n    this.progressBarIsShown = false;\n    this.audioLoadingIndicatorIsShown = false;\n    this.audioPreloaderService.setAudioLoadedCallback(\n      this.onFinishedLoadingAudio.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.directiveSubscriptions.unsubscribe();\n  }\n\n  setProgress(val: {value: number}): void {\n    this.audioPlayerService.setCurrentTime(val.value);\n  }\n\n  isAudioBarAvailable(): boolean {\n    return this.languagesInExploration.length > 0;\n  }\n\n  isLanguageRTL(): boolean {\n    return this.I18nLanguageCodeService.isCurrentLanguageRTL();\n  }\n\n  onNewLanguageSelected(): void {\n    if (this.selectedLanguage.value === null) {\n      throw new Error('Expected a valid language code.');\n    }\n    this.audioTranslationLanguageService.setCurrentAudioLanguageCode(\n      this.selectedLanguage.value);\n    this.audioPlayerService.stop();\n    this.audioPlayerService.clear();\n    this.autogeneratedAudioPlayerService.cancel();\n    const voiceoverInCurrentLanguage = this.getVoiceoverInCurrentLanguage();\n    if (\n      this.isAudioBarAvailable() &&\n      !this.isAutogeneratedLanguageCodeSelected() &&\n      voiceoverInCurrentLanguage\n    ) {\n      let audioTranslation: Voiceover = voiceoverInCurrentLanguage;\n      this.audioPreloaderService\n        .setMostRecentlyRequestedAudioFilename(audioTranslation.filename);\n      this.audioPreloaderService.restartAudioPreloader(\n        this.playerPositionService.getCurrentStateName());\n    }\n  }\n\n  expandAudioBar(): void {\n    this.audioBarIsExpanded = true;\n    this.audioBarStatusService.markAudioBarExpanded();\n  }\n\n  collapseAudioBar(): void {\n    this.audioBarStatusService.markAudioBarCollapsed();\n    this.audioBarIsExpanded = false;\n    this.audioPlayerService.stop();\n    this.audioPlayerService.clear();\n    this.autogeneratedAudioPlayerService.cancel();\n  }\n\n  // Returns null if the audio is not available in the current language.\n  getCurrentAudioLanguageCode(): string | null {\n    return this.audioTranslationLanguageService\n      .getCurrentAudioLanguageCode();\n  }\n\n  // Returns null if the audio is not available in the current language.\n  getCurrentAudioLanguageDescription(): string | null {\n    return this.audioTranslationLanguageService\n      .getCurrentAudioLanguageDescription();\n  }\n\n  // Returns null if the audio is not available in the current language.\n  getVoiceoverInCurrentLanguage(): Voiceover | null {\n    const currentAudioLanguageCode = this.getCurrentAudioLanguageCode();\n    if (currentAudioLanguageCode !== null) {\n      return this.audioTranslationManagerService.getCurrentAudioTranslations()[\n        currentAudioLanguageCode];\n    }\n    return null;\n  }\n\n  isAudioPlaying(): boolean {\n    return this.audioPlayerService.isPlaying() ||\n      this.autogeneratedAudioPlayerService.isPlaying();\n  }\n\n  isAudioAvailableInCurrentLanguage(): boolean {\n    return Boolean(this.getVoiceoverInCurrentLanguage()) ||\n      this.isAutogeneratedLanguageCodeSelected();\n  }\n\n  doesCurrentAudioTranslationNeedUpdate(): boolean {\n    const voiceoverInCurrentLanguage = this.getVoiceoverInCurrentLanguage();\n    if (\n      !this.isAutogeneratedLanguageCodeSelected() &&\n      voiceoverInCurrentLanguage\n    ) {\n      let audioTranslation: Voiceover = voiceoverInCurrentLanguage;\n      return (audioTranslation && audioTranslation.needsUpdate);\n    } else {\n      return false;\n    }\n  }\n\n  isAutogeneratedLanguageCodeSelected(): boolean {\n    return this.audioTranslationLanguageService\n      .isAutogeneratedLanguageCodeSelected();\n  }\n\n  onBackwardButtonClicked(): void {\n    this.audioPlayerService.rewind(5);\n  }\n\n  onForwardButtonClicked(): void {\n    this.audioPlayerService.forward(5);\n  }\n\n  onPlayButtonClicked(): void {\n    this.isPaused = !this.isPaused;\n    this.progressBarIsShown = !this.isAutogeneratedLanguageCodeSelected();\n    if (this.isAutogeneratedLanguageCodeSelected()) {\n      this.playPauseAutogeneratedAudioTranslation();\n    } else {\n      let audioTranslation = this.getVoiceoverInCurrentLanguage();\n      if (audioTranslation) {\n        this.playPauseUploadedAudioTranslation();\n      }\n    }\n    this.siteAnalyticsService.registerStartAudioPlayedEvent(\n      this.contextService.getExplorationId(),\n      this.playerPositionService.getDisplayedCardIndex()\n    );\n  }\n\n  isCached(audioTranslation: Voiceover): boolean {\n    return this.assetsBackendApiService.isCached(audioTranslation.filename);\n  }\n\n  playPauseAutogeneratedAudioTranslation(): void {\n    // SpeechSynthesis in Chrome seems to have a bug\n    // where if you pause the utterance, wait for around\n    // 15 or more seconds, then try resuming, nothing\n    // will sound. As a temporary fix, just restart the\n    // utterance from the beginning instead of resuming.\n    if (this.autogeneratedAudioPlayerService.isPlaying()) {\n      this.autogeneratedAudioPlayerService.cancel();\n    } else {\n      const speechSynthesisLanguageCode = (\n        this.audioTranslationLanguageService.getSpeechSynthesisLanguageCode());\n      if (speechSynthesisLanguageCode === null) {\n        throw new Error(\n          'speechSynthesisLanguageCode cannot be null at this point.');\n      }\n      this.autogeneratedAudioPlayerService.play(\n        this.audioTranslationManagerService\n          .getCurrentHtmlForAutogeneratedAudio(),\n        speechSynthesisLanguageCode,\n        () => {\n          // Used to update bindings to show a silent speaker after\n          // autogenerated audio has finished playing.\n          this.audioTranslationManagerService\n            .clearSecondaryAudioTranslations();\n          let sequentialAudio = this.audioTranslationManagerService\n            .getCurrentHtmlForAutogeneratedSequentialAudio();\n          if (sequentialAudio) {\n            this.autogeneratedAudioPlayerService.play(\n              sequentialAudio,\n              speechSynthesisLanguageCode, () => {});\n          }\n        }\n      );\n    }\n  }\n\n  playPauseUploadedAudioTranslation(): void {\n    if (!this.audioPlayerService.isPlaying()) {\n      if (this.audioPlayerService.isTrackLoaded()) {\n        this.audioPlayerService.play();\n      } else {\n        this.loadAndPlayAudioTranslation();\n      }\n    } else {\n      this.audioPlayerService.pause();\n    }\n  }\n\n  playCachedAudioTranslation(audioFilename: string): void {\n    this.audioPlayerService.loadAsync(audioFilename)\n      .then(() => {\n        this.audioLoadingIndicatorIsShown = false;\n        this.audioPlayerService.play();\n      });\n  }\n\n  /**\n   * Called when an audio file finishes loading.\n   * @param {string} audioFilename - Filename of the audio file that\n   *                                 finished loading.\n   */\n  onFinishedLoadingAudio(audioFilename: string): void {\n    let mostRecentlyRequestedAudioFilename =\n      this.audioPreloaderService.getMostRecentlyRequestedAudioFilename();\n    if (this.audioLoadingIndicatorIsShown &&\n        audioFilename === mostRecentlyRequestedAudioFilename) {\n      this.playCachedAudioTranslation(audioFilename);\n    }\n  }\n\n  loadAndPlayAudioTranslation(): void {\n    this.audioLoadingIndicatorIsShown = true;\n    let audioTranslation = this.getVoiceoverInCurrentLanguage();\n    if (audioTranslation) {\n      this.audioPreloaderService.setMostRecentlyRequestedAudioFilename(\n        audioTranslation.filename);\n      if (this.isCached(audioTranslation)) {\n        this.playCachedAudioTranslation(\n          audioTranslation.filename);\n      } else if (!this.audioPreloaderService.isLoadingAudioFile(\n        audioTranslation.filename)) {\n        this.audioPreloaderService.restartAudioPreloader(\n          this.playerPositionService.getCurrentStateName());\n      }\n    }\n  }\n}\n\nangular.module('oppia').directive('oppiaAudioBar',\n  downgradeComponent({\n    component: AudioBarComponent\n  }) as angular.IDirectiveFactory);\n"
    }
  ],
  "questions": [
    "Hello, I am interested in helping contribute!\r\n\r\nThe changes to the following files can be made to resolve the issue.\r\n1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n`<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n                                **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n                                `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n                                `  (valueChange)=\"setProgress($event)\"`\r\n                                `  aria-label=\"audio-slider\">`\r\n            `</oppia-audio-slider>`\r\nExplanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n\r\n2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n`import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n`private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n`  isLanguageRTL(): boolean {`\r\n`    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n`  }`\r\nExplanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from. \r\n\r\nPlease see the attached screenrecording for the end result. Thanks!\r\n\r\n\r\nhttps://github.com/oppia/oppia/assets/109881408/51c23bc5-5964-4660-b859-b856a462cbb3"
  ],
  "golden_answers": [
    "> Hello, I am interested in helping contribute!\r\n> \r\n> The changes to the following files can be made to resolve the issue.\r\n> \r\n> 1. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html\r\n>    `<oppia-audio-slider [value]=\"audioPlayerService.getCurrentTime()\"`\r\n>    **` [dir]=\"isLanguageRTL() ? 'rtl' : 'ltr'\"`**\r\n>    `  [max]=\"audioPlayerService.getAudioDuration()\"`\r\n>    `  (valueChange)=\"setProgress($event)\"`\r\n>    `  aria-label=\"audio-slider\">`\r\n>    `</oppia-audio-slider>`\r\n>    Explanation: Adding dir=\"rtl\" or dir=\"ltr\" will indicate to the audio slider which way to start, depending on the language selected.\r\n> 2. oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts\r\n>    `import { I18nLanguageCodeService } from 'services/i18n-language-code.service';`\r\n>    `private I18nLanguageCodeService: I18nLanguageCodeService` //Add inside constructor line 52\r\n>    `  isLanguageRTL(): boolean {`\r\n>    `    return this.I18nLanguageCodeService.isCurrentLanguageRTL();`\r\n>    `  }`\r\n>    Explanation: isLanguageRTL() is needed in order to indicate to the oppia-audio-slider which direction it needs to start from.\r\n> \r\n> Please see the attached screenrecording for the end result. Thanks!\r\n> \r\n>  issuescreen_cq.mp4\r\n\r\n@cindy-qu I think it looks nice wait for review from @seanlip and @prafulbbandre . I am assigning this issue to you. Also before making pr confirm that in other languages it will work as expected."
  ],
  "questions_generated": [
    "What specific files in the oppia_oppia repository need to be modified to address the issue of the audio loader working in the opposite direction when the language is set to Arabic?",
    "How can the direction of the audio loader be controlled based on the selected language in the oppia_oppia repository?",
    "What is the role of the 'I18nLanguageCodeService' in handling the audio loader's direction in the oppia_oppia repository?",
    "Why is it important for the audio loader's progress direction to match the reading direction of the selected language in the oppia_oppia repository?",
    "What is the expected behavior of the audio loader when the language is set to Arabic in the oppia_oppia repository, and how does it differ from the current behavior?",
    "How does the 'audio-bar.component.html' file contribute to the functionality of the audio loader in the oppia_oppia repository?"
  ],
  "golden_answers_generated": [
    "The files that need modification are 'oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.html' and 'oppia/core/templates/pages/exploration-player-page/layout-directives/audio-bar.component.ts'.",
    "The direction can be controlled by setting the 'dir' attribute of the audio slider element to 'rtl' or 'ltr' based on the result of the 'isLanguageRTL()' function in the HTML template. This setup determines the direction in which the slider progresses.",
    "The 'I18nLanguageCodeService' is likely used to determine if the current language is read from right to left (RTL). This information is then used to set the 'dir' attribute in the HTML to ensure the loader behaves according to the language's reading direction.",
    "Matching the audio loader's progress direction with the reading direction of the language enhances usability and accessibility. It ensures that users have a consistent and intuitive experience, especially in RTL languages like Arabic, where the natural flow of information is right to left.",
    "The expected behavior is for the audio loader to progress from right to left when the language is set to Arabic. Currently, the loader progresses from left to right, which is opposite to the expected direction for RTL languages.",
    "The 'audio-bar.component.html' file contains the HTML structure for the audio player, including the audio slider element. By modifying this file, specifically by adding a conditional 'dir' attribute, one can control the visual direction of the audio loader's progress to align with the language's reading direction."
  ]
}